
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0801bf08  0801bf08  0002bf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c20c  0801c20c  0002c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c214  0801c214  0002c214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c218  0801c218  0002c218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  24000000  0801c21c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c80  240000e0  0801c2fc  000300e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24006d60  0801c2fc  00036d60  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043535  00000000  00000000  0003010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000803a  00000000  00000000  00073643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cb0  00000000  00000000  0007b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002980  00000000  00000000  0007e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046834  00000000  00000000  00080cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000440b2  00000000  00000000  000c74e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019764a  00000000  00000000  0010b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a2be0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ba8c  00000000  00000000  002a2c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bef0 	.word	0x0801bef0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	0801bef0 	.word	0x0801bef0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b7a      	ldr	r3, [pc, #488]	; (8000804 <MX_ADC1_Init+0x210>)
 800061a:	4a7b      	ldr	r2, [pc, #492]	; (8000808 <MX_ADC1_Init+0x214>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800061e:	4b79      	ldr	r3, [pc, #484]	; (8000804 <MX_ADC1_Init+0x210>)
 8000620:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000626:	4b77      	ldr	r3, [pc, #476]	; (8000804 <MX_ADC1_Init+0x210>)
 8000628:	2208      	movs	r2, #8
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b75      	ldr	r3, [pc, #468]	; (8000804 <MX_ADC1_Init+0x210>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b74      	ldr	r3, [pc, #464]	; (8000804 <MX_ADC1_Init+0x210>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b72      	ldr	r3, [pc, #456]	; (8000804 <MX_ADC1_Init+0x210>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b71      	ldr	r3, [pc, #452]	; (8000804 <MX_ADC1_Init+0x210>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000644:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <MX_ADC1_Init+0x210>)
 8000646:	220b      	movs	r2, #11
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <MX_ADC1_Init+0x210>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <MX_ADC1_Init+0x210>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b6b      	ldr	r3, [pc, #428]	; (8000804 <MX_ADC1_Init+0x210>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b69      	ldr	r3, [pc, #420]	; (8000804 <MX_ADC1_Init+0x210>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000662:	4b68      	ldr	r3, [pc, #416]	; (8000804 <MX_ADC1_Init+0x210>)
 8000664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800066a:	4b66      	ldr	r3, [pc, #408]	; (8000804 <MX_ADC1_Init+0x210>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b64      	ldr	r3, [pc, #400]	; (8000804 <MX_ADC1_Init+0x210>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4862      	ldr	r0, [pc, #392]	; (8000804 <MX_ADC1_Init+0x210>)
 800067a:	f006 fbed 	bl	8006e58 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000684:	f003 faa8 	bl	8003bd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	485c      	ldr	r0, [pc, #368]	; (8000804 <MX_ADC1_Init+0x210>)
 8000694:	f007 fd08 	bl	80080a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800069e:	f003 fa9b 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <MX_ADC1_Init+0x218>)
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80006aa:	2307      	movs	r3, #7
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b4:	2304      	movs	r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	484f      	ldr	r0, [pc, #316]	; (8000804 <MX_ADC1_Init+0x210>)
 80006c6:	f006 fe4b 	bl	8007360 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006d0:	f003 fa82 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006d4:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <MX_ADC1_Init+0x21c>)
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d8:	230c      	movs	r3, #12
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4848      	ldr	r0, [pc, #288]	; (8000804 <MX_ADC1_Init+0x210>)
 80006e2:	f006 fe3d 	bl	8007360 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006ec:	f003 fa74 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <MX_ADC1_Init+0x220>)
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006f4:	2312      	movs	r3, #18
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4841      	ldr	r0, [pc, #260]	; (8000804 <MX_ADC1_Init+0x210>)
 80006fe:	f006 fe2f 	bl	8007360 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000708:	f003 fa66 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <MX_ADC1_Init+0x224>)
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000710:	2318      	movs	r3, #24
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	483a      	ldr	r0, [pc, #232]	; (8000804 <MX_ADC1_Init+0x210>)
 800071a:	f006 fe21 	bl	8007360 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000724:	f003 fa58 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000728:	4b3c      	ldr	r3, [pc, #240]	; (800081c <MX_ADC1_Init+0x228>)
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4833      	ldr	r0, [pc, #204]	; (8000804 <MX_ADC1_Init+0x210>)
 8000738:	f006 fe12 	bl	8007360 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000742:	f003 fa49 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <MX_ADC1_Init+0x22c>)
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800074a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	482b      	ldr	r0, [pc, #172]	; (8000804 <MX_ADC1_Init+0x210>)
 8000756:	f006 fe03 	bl	8007360 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000760:	f003 fa3a 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_ADC1_Init+0x230>)
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000768:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800076c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4824      	ldr	r0, [pc, #144]	; (8000804 <MX_ADC1_Init+0x210>)
 8000774:	f006 fdf4 	bl	8007360 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800077e:	f003 fa2b 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <MX_ADC1_Init+0x234>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000786:	f44f 7389 	mov.w	r3, #274	; 0x112
 800078a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_ADC1_Init+0x210>)
 8000792:	f006 fde5 	bl	8007360 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800079c:	f003 fa1c 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_ADC1_Init+0x238>)
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007a4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80007a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <MX_ADC1_Init+0x210>)
 80007b0:	f006 fdd6 	bl	8007360 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007ba:	f003 fa0d 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x23c>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC1_Init+0x210>)
 80007ce:	f006 fdc7 	bl	8007360 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007d8:	f003 f9fe 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_ADC1_Init+0x240>)
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007e0:	f240 2306 	movw	r3, #518	; 0x206
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC1_Init+0x210>)
 80007ec:	f006 fdb8 	bl	8007360 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007f6:	f003 f9ef 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	240000fc 	.word	0x240000fc
 8000808:	40022000 	.word	0x40022000
 800080c:	0c900008 	.word	0x0c900008
 8000810:	10c00010 	.word	0x10c00010
 8000814:	14f00020 	.word	0x14f00020
 8000818:	1d500080 	.word	0x1d500080
 800081c:	21800100 	.word	0x21800100
 8000820:	25b00200 	.word	0x25b00200
 8000824:	2a000400 	.word	0x2a000400
 8000828:	2e300800 	.word	0x2e300800
 800082c:	3ac04000 	.word	0x3ac04000
 8000830:	3ef08000 	.word	0x3ef08000
 8000834:	47520000 	.word	0x47520000

08000838 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000850:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <MX_ADC3_Init+0x110>)
 8000852:	4a3e      	ldr	r2, [pc, #248]	; (800094c <MX_ADC3_Init+0x114>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000856:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <MX_ADC3_Init+0x110>)
 8000858:	2208      	movs	r2, #8
 800085a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800085c:	4b3a      	ldr	r3, [pc, #232]	; (8000948 <MX_ADC3_Init+0x110>)
 800085e:	2201      	movs	r2, #1
 8000860:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <MX_ADC3_Init+0x110>)
 8000864:	2204      	movs	r2, #4
 8000866:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000868:	4b37      	ldr	r3, [pc, #220]	; (8000948 <MX_ADC3_Init+0x110>)
 800086a:	2200      	movs	r2, #0
 800086c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <MX_ADC3_Init+0x110>)
 8000870:	2201      	movs	r2, #1
 8000872:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000874:	4b34      	ldr	r3, [pc, #208]	; (8000948 <MX_ADC3_Init+0x110>)
 8000876:	2204      	movs	r2, #4
 8000878:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <MX_ADC3_Init+0x110>)
 800087c:	2200      	movs	r2, #0
 800087e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <MX_ADC3_Init+0x110>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_ADC3_Init+0x110>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_ADC3_Init+0x110>)
 800088e:	2203      	movs	r2, #3
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_ADC3_Init+0x110>)
 8000894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000898:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_ADC3_Init+0x110>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_ADC3_Init+0x110>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008a8:	4827      	ldr	r0, [pc, #156]	; (8000948 <MX_ADC3_Init+0x110>)
 80008aa:	f006 fad5 	bl	8006e58 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008b4:	f003 f990 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_ADC3_Init+0x118>)
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008bc:	2306      	movs	r3, #6
 80008be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008c0:	2307      	movs	r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	481b      	ldr	r0, [pc, #108]	; (8000948 <MX_ADC3_Init+0x110>)
 80008dc:	f006 fd40 	bl	8007360 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f003 f977 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_ADC3_Init+0x11c>)
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ee:	230c      	movs	r3, #12
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_ADC3_Init+0x110>)
 80008f8:	f006 fd32 	bl	8007360 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000902:	f003 f969 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000906:	2301      	movs	r3, #1
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800090a:	2312      	movs	r3, #18
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_ADC3_Init+0x110>)
 8000914:	f006 fd24 	bl	8007360 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800091e:	f003 f95b 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_ADC3_Init+0x120>)
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000926:	2318      	movs	r3, #24
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_ADC3_Init+0x110>)
 8000930:	f006 fd16 	bl	8007360 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800093a:	f003 f94d 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000160 	.word	0x24000160
 800094c:	58026000 	.word	0x58026000
 8000950:	cb840000 	.word	0xcb840000
 8000954:	cfb80000 	.word	0xcfb80000
 8000958:	04300002 	.word	0x04300002

0800095c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a7b      	ldr	r2, [pc, #492]	; (8000b68 <HAL_ADC_MspInit+0x20c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	f040 8091 	bne.w	8000aa2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000980:	4b7a      	ldr	r3, [pc, #488]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	4a79      	ldr	r2, [pc, #484]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000988:	f043 0320 	orr.w	r3, r3, #32
 800098c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000990:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a71      	ldr	r2, [pc, #452]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b6f      	ldr	r3, [pc, #444]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a6a      	ldr	r2, [pc, #424]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b67      	ldr	r3, [pc, #412]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a62      	ldr	r2, [pc, #392]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b60      	ldr	r3, [pc, #384]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009f8:	2333      	movs	r3, #51	; 0x33
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fc:	2303      	movs	r3, #3
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4859      	ldr	r0, [pc, #356]	; (8000b70 <HAL_ADC_MspInit+0x214>)
 8000a0c:	f00b fe38 	bl	800c680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a10:	23ce      	movs	r3, #206	; 0xce
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4854      	ldr	r0, [pc, #336]	; (8000b74 <HAL_ADC_MspInit+0x218>)
 8000a24:	f00b fe2c 	bl	800c680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	484f      	ldr	r0, [pc, #316]	; (8000b78 <HAL_ADC_MspInit+0x21c>)
 8000a3c:	f00b fe20 	bl	800c680 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a40:	4b4e      	ldr	r3, [pc, #312]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a42:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_ADC_MspInit+0x224>)
 8000a44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a46:	4b4d      	ldr	r3, [pc, #308]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a48:	2209      	movs	r2, #9
 8000a4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a52:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a58:	4b48      	ldr	r3, [pc, #288]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a60:	4b46      	ldr	r3, [pc, #280]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a68:	4b44      	ldr	r3, [pc, #272]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a70:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a84:	483d      	ldr	r0, [pc, #244]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a86:	f008 f91f 	bl	8008cc8 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a90:	f003 f8a2 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a39      	ldr	r2, [pc, #228]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a9a:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <HAL_ADC_MspInit+0x220>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000aa0:	e05e      	b.n	8000b60 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <HAL_ADC_MspInit+0x228>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d159      	bne.n	8000b60 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a2e      	ldr	r2, [pc, #184]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <HAL_ADC_MspInit+0x210>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ae8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000aec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000af0:	f005 ff8e 	bl	8006a10 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000af4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000af8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000afc:	f005 ff88 	bl	8006a10 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <HAL_ADC_MspInit+0x230>)
 8000b04:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b08:	2273      	movs	r2, #115	; 0x73
 8000b0a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b26:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b36:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b46:	f008 f8bf 	bl	8008cc8 <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b50:	f003 f842 	bl	8003bd8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b58:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_ADC_MspInit+0x22c>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b60:	bf00      	nop
 8000b62:	3738      	adds	r7, #56	; 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58020800 	.word	0x58020800
 8000b74:	58020000 	.word	0x58020000
 8000b78:	58020400 	.word	0x58020400
 8000b7c:	240001c4 	.word	0x240001c4
 8000b80:	40020010 	.word	0x40020010
 8000b84:	58026000 	.word	0x58026000
 8000b88:	2400023c 	.word	0x2400023c
 8000b8c:	40020028 	.word	0x40020028

08000b90 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2224      	movs	r2, #36	; 0x24
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f01b f98f 	bl	801bec0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_DAC1_Init+0x60>)
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000baa:	f007 fc88 	bl	80084be <HAL_DAC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bb4:	f003 f810 	bl	8003bd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000bd4:	f007 fea2 	bl	800891c <HAL_DAC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bde:	f002 fffb 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240002b4 	.word	0x240002b4
 8000bf0:	40007400 	.word	0x40007400

08000bf4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_DAC_MspInit+0xf0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d161      	bne.n	8000cda <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_DAC_MspInit+0xf4>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c52:	2310      	movs	r3, #16
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <HAL_DAC_MspInit+0xf8>)
 8000c66:	f00b fd0b 	bl	800c680 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_DAC_MspInit+0x100>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c72:	2243      	movs	r2, #67	; 0x43
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c78:	2240      	movs	r2, #64	; 0x40
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c98:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000cb0:	f008 f80a 	bl	8008cc8 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000cba:	f002 ff8d 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_DAC_MspInit+0xfc>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	2036      	movs	r0, #54	; 0x36
 8000cd0:	f007 fbbb 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f007 fbd2 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40007400 	.word	0x40007400
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020000 	.word	0x58020000
 8000cf0:	240002c8 	.word	0x240002c8
 8000cf4:	40020088 	.word	0x40020088

08000cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <MX_DMA_Init+0xac>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_DMA_Init+0xac>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200b      	movs	r0, #11
 8000d22:	f007 fb92 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d26:	200b      	movs	r0, #11
 8000d28:	f007 fba9 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200c      	movs	r0, #12
 8000d32:	f007 fb8a 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d36:	200c      	movs	r0, #12
 8000d38:	f007 fba1 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200d      	movs	r0, #13
 8000d42:	f007 fb82 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d46:	200d      	movs	r0, #13
 8000d48:	f007 fb99 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200e      	movs	r0, #14
 8000d52:	f007 fb7a 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d56:	200e      	movs	r0, #14
 8000d58:	f007 fb91 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	200f      	movs	r0, #15
 8000d62:	f007 fb72 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f007 fb89 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2010      	movs	r0, #16
 8000d72:	f007 fb6a 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d76:	2010      	movs	r0, #16
 8000d78:	f007 fb81 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2011      	movs	r0, #17
 8000d82:	f007 fb62 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d86:	2011      	movs	r0, #17
 8000d88:	f007 fb79 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	202f      	movs	r0, #47	; 0x2f
 8000d92:	f007 fb5a 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d96:	202f      	movs	r0, #47	; 0x2f
 8000d98:	f007 fb71 	bl	800847e <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400

08000da8 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b092      	sub	sp, #72	; 0x48
 8000dac:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000dae:	2306      	movs	r3, #6
 8000db0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000db4:	2306      	movs	r3, #6
 8000db6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dcc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f01b f870 	bl	801bec0 <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000de0:	4bb7      	ldr	r3, [pc, #732]	; (80010c0 <EE_Init+0x318>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000de8:	4bb6      	ldr	r3, [pc, #728]	; (80010c4 <EE_Init+0x31c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000df4:	2302      	movs	r3, #2
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000e00:	2320      	movs	r3, #32
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000e04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d00d      	beq.n	8000e2c <EE_Init+0x84>
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e14:	f280 8430 	bge.w	8001678 <EE_Init+0x8d0>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 82ca 	beq.w	80013b2 <EE_Init+0x60a>
 8000e1e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f000 810f 	beq.w	8001046 <EE_Init+0x29e>
 8000e28:	f000 bc26 	b.w	8001678 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d154      	bne.n	8000ede <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e34:	48a2      	ldr	r0, [pc, #648]	; (80010c0 <EE_Init+0x318>)
 8000e36:	f000 fc45 	bl	80016c4 <EE_VerifyPageFullyErased>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 8428 	bne.w	8001692 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
}
 8000e46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e48:	f3bf 8f6f 	isb	sy
}
 8000e4c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e4e:	4b9e      	ldr	r3, [pc, #632]	; (80010c8 <EE_Init+0x320>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a9d      	ldr	r2, [pc, #628]	; (80010c8 <EE_Init+0x320>)
 8000e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e58:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e5a:	4b9b      	ldr	r3, [pc, #620]	; (80010c8 <EE_Init+0x320>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e62:	f3bf 8f4f 	dsb	sy
}
 8000e66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e68:	f3bf 8f6f 	isb	sy
}
 8000e6c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e6e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00b fa5e 	bl	800c33c <HAL_FLASHEx_Erase>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e86:	4b90      	ldr	r3, [pc, #576]	; (80010c8 <EE_Init+0x320>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11b      	bne.n	8000eca <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e92:	f3bf 8f4f 	dsb	sy
}
 8000e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e98:	f3bf 8f6f 	isb	sy
}
 8000e9c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e9e:	4b8a      	ldr	r3, [pc, #552]	; (80010c8 <EE_Init+0x320>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea6:	f3bf 8f4f 	dsb	sy
}
 8000eaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eac:	f3bf 8f6f 	isb	sy
}
 8000eb0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000eb2:	4b85      	ldr	r3, [pc, #532]	; (80010c8 <EE_Init+0x320>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a84      	ldr	r2, [pc, #528]	; (80010c8 <EE_Init+0x320>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebe:	f3bf 8f4f 	dsb	sy
}
 8000ec2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec4:	f3bf 8f6f 	isb	sy
}
 8000ec8:	e000      	b.n	8000ecc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eca:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ecc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 83de 	beq.w	8001692 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ed6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	e3e1      	b.n	80016a2 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ede:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ee2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f040 809f 	bne.w	800102a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000eec:	4874      	ldr	r0, [pc, #464]	; (80010c0 <EE_Init+0x318>)
 8000eee:	f000 fbe9 	bl	80016c4 <EE_VerifyPageFullyErased>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d14c      	bne.n	8000f92 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef8:	f3bf 8f4f 	dsb	sy
}
 8000efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000efe:	f3bf 8f6f 	isb	sy
}
 8000f02:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f04:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <EE_Init+0x320>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a6f      	ldr	r2, [pc, #444]	; (80010c8 <EE_Init+0x320>)
 8000f0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f0e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <EE_Init+0x320>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
}
 8000f22:	bf00      	nop
}
 8000f24:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b fa03 	bl	800c33c <HAL_FLASHEx_Erase>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <EE_Init+0x320>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11b      	bne.n	8000f80 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f48:	f3bf 8f4f 	dsb	sy
}
 8000f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f54:	4b5c      	ldr	r3, [pc, #368]	; (80010c8 <EE_Init+0x320>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5c:	f3bf 8f4f 	dsb	sy
}
 8000f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f62:	f3bf 8f6f 	isb	sy
}
 8000f66:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f68:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <EE_Init+0x320>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a56      	ldr	r2, [pc, #344]	; (80010c8 <EE_Init+0x320>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f7a:	f3bf 8f6f 	isb	sy
}
 8000f7e:	e000      	b.n	8000f82 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f80:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	e387      	b.n	80016a2 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <EE_Init+0x320>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <EE_Init+0x320>)
 8000fa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000fa8:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <EE_Init+0x320>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb2:	f3bf 8f4f 	dsb	sy
}
 8000fb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb8:	f3bf 8f6f 	isb	sy
}
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	493f      	ldr	r1, [pc, #252]	; (80010c4 <EE_Init+0x31c>)
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f00a fe8a 	bl	800bce0 <HAL_FLASH_Program>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <EE_Init+0x320>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d11b      	bne.n	8001016 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fde:	f3bf 8f4f 	dsb	sy
}
 8000fe2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe4:	f3bf 8f6f 	isb	sy
}
 8000fe8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <EE_Init+0x320>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff2:	f3bf 8f4f 	dsb	sy
}
 8000ff6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff8:	f3bf 8f6f 	isb	sy
}
 8000ffc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <EE_Init+0x320>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <EE_Init+0x320>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800100a:	f3bf 8f4f 	dsb	sy
}
 800100e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001010:	f3bf 8f6f 	isb	sy
}
 8001014:	e000      	b.n	8001018 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001016:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001018:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8338 	beq.w	8001692 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001022:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001026:	b29b      	uxth	r3, r3
 8001028:	e33b      	b.n	80016a2 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800102a:	f000 fbdf 	bl	80017ec <EE_Format>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001034:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 832a 	beq.w	8001692 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800103e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001042:	b29b      	uxth	r3, r3
 8001044:	e32d      	b.n	80016a2 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 80f5 	bne.w	800123a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001056:	e044      	b.n	80010e2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <EE_Init+0x324>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001062:	491b      	ldr	r1, [pc, #108]	; (80010d0 <EE_Init+0x328>)
 8001064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001068:	429a      	cmp	r2, r3
 800106a:	d103      	bne.n	8001074 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800106c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001070:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001074:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001078:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800107c:	429a      	cmp	r2, r3
 800107e:	d02b      	beq.n	80010d8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <EE_Init+0x328>)
 8001086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108a:	4912      	ldr	r1, [pc, #72]	; (80010d4 <EE_Init+0x32c>)
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fb43 	bl	8001718 <EE_ReadVariable>
 8001092:	4603      	mov	r3, r0
 8001094:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001096:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001098:	2b01      	cmp	r3, #1
 800109a:	d01d      	beq.n	80010d8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800109c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <EE_Init+0x328>)
 80010a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <EE_Init+0x32c>)
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fcf7 	bl	8001aa0 <EE_VerifyPageFullWriteVariable>
 80010b2:	4603      	mov	r3, r0
 80010b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00d      	beq.n	80010d8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010be:	e2f0      	b.n	80016a2 <EE_Init+0x8fa>
 80010c0:	081c0000 	.word	0x081c0000
 80010c4:	081e0000 	.word	0x081e0000
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	081c0006 	.word	0x081c0006
 80010d0:	24000000 	.word	0x24000000
 80010d4:	24000340 	.word	0x24000340
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010dc:	3301      	adds	r3, #1
 80010de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010e6:	2b1e      	cmp	r3, #30
 80010e8:	d9b6      	bls.n	8001058 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010ea:	f3bf 8f4f 	dsb	sy
}
 80010ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f0:	f3bf 8f6f 	isb	sy
}
 80010f4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010f6:	4bb8      	ldr	r3, [pc, #736]	; (80013d8 <EE_Init+0x630>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4ab7      	ldr	r2, [pc, #732]	; (80013d8 <EE_Init+0x630>)
 80010fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001102:	4bb5      	ldr	r3, [pc, #724]	; (80013d8 <EE_Init+0x630>)
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800110a:	f3bf 8f4f 	dsb	sy
}
 800110e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001110:	f3bf 8f6f 	isb	sy
}
 8001114:	bf00      	nop
}
 8001116:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001118:	463b      	mov	r3, r7
 800111a:	461a      	mov	r2, r3
 800111c:	49af      	ldr	r1, [pc, #700]	; (80013dc <EE_Init+0x634>)
 800111e:	2001      	movs	r0, #1
 8001120:	f00a fdde 	bl	800bce0 <HAL_FLASH_Program>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800112a:	4bab      	ldr	r3, [pc, #684]	; (80013d8 <EE_Init+0x630>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d11b      	bne.n	800116e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001136:	f3bf 8f4f 	dsb	sy
}
 800113a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800113c:	f3bf 8f6f 	isb	sy
}
 8001140:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001142:	4ba5      	ldr	r3, [pc, #660]	; (80013d8 <EE_Init+0x630>)
 8001144:	2200      	movs	r2, #0
 8001146:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800114a:	f3bf 8f4f 	dsb	sy
}
 800114e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001150:	f3bf 8f6f 	isb	sy
}
 8001154:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001156:	4ba0      	ldr	r3, [pc, #640]	; (80013d8 <EE_Init+0x630>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a9f      	ldr	r2, [pc, #636]	; (80013d8 <EE_Init+0x630>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	e000      	b.n	8001170 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800116e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001178:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800117c:	b29b      	uxth	r3, r3
 800117e:	e290      	b.n	80016a2 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001180:	2307      	movs	r3, #7
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001184:	2302      	movs	r3, #2
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800118c:	2320      	movs	r3, #32
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001190:	4893      	ldr	r0, [pc, #588]	; (80013e0 <EE_Init+0x638>)
 8001192:	f000 fa97 	bl	80016c4 <EE_VerifyPageFullyErased>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 827c 	bne.w	8001696 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800119e:	f3bf 8f4f 	dsb	sy
}
 80011a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a4:	f3bf 8f6f 	isb	sy
}
 80011a8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80011aa:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <EE_Init+0x630>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a8a      	ldr	r2, [pc, #552]	; (80013d8 <EE_Init+0x630>)
 80011b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011b6:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <EE_Init+0x630>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c4:	f3bf 8f6f 	isb	sy
}
 80011c8:	bf00      	nop
}
 80011ca:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b f8b0 	bl	800c33c <HAL_FLASHEx_Erase>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011e2:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <EE_Init+0x630>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d11b      	bne.n	8001226 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011ee:	f3bf 8f4f 	dsb	sy
}
 80011f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f4:	f3bf 8f6f 	isb	sy
}
 80011f8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <EE_Init+0x630>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001202:	f3bf 8f4f 	dsb	sy
}
 8001206:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001208:	f3bf 8f6f 	isb	sy
}
 800120c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800120e:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <EE_Init+0x630>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a71      	ldr	r2, [pc, #452]	; (80013d8 <EE_Init+0x630>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800121a:	f3bf 8f4f 	dsb	sy
}
 800121e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001220:	f3bf 8f6f 	isb	sy
}
 8001224:	e000      	b.n	8001228 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001226:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001228:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8232 	beq.w	8001696 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001232:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001236:	b29b      	uxth	r3, r3
 8001238:	e233      	b.n	80016a2 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800123a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 80a7 	bne.w	8001396 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001248:	2307      	movs	r3, #7
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800124c:	2302      	movs	r3, #2
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001254:	2320      	movs	r3, #32
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001258:	4861      	ldr	r0, [pc, #388]	; (80013e0 <EE_Init+0x638>)
 800125a:	f000 fa33 	bl	80016c4 <EE_VerifyPageFullyErased>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d14c      	bne.n	80012fe <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001264:	f3bf 8f4f 	dsb	sy
}
 8001268:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800126a:	f3bf 8f6f 	isb	sy
}
 800126e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <EE_Init+0x630>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <EE_Init+0x630>)
 8001276:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800127a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800127c:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <EE_Init+0x630>)
 800127e:	2200      	movs	r2, #0
 8001280:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001284:	f3bf 8f4f 	dsb	sy
}
 8001288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800128a:	f3bf 8f6f 	isb	sy
}
 800128e:	bf00      	nop
}
 8001290:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001292:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f00b f84d 	bl	800c33c <HAL_FLASHEx_Erase>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <EE_Init+0x630>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11b      	bne.n	80012ec <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012b4:	f3bf 8f4f 	dsb	sy
}
 80012b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ba:	f3bf 8f6f 	isb	sy
}
 80012be:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <EE_Init+0x630>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ce:	f3bf 8f6f 	isb	sy
}
 80012d2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012d4:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <EE_Init+0x630>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <EE_Init+0x630>)
 80012da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012e0:	f3bf 8f4f 	dsb	sy
}
 80012e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e6:	f3bf 8f6f 	isb	sy
}
 80012ea:	e000      	b.n	80012ee <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012ec:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <EE_Init+0x556>
          {
            return FlashStatus;
 80012f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	e1d1      	b.n	80016a2 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012fe:	f3bf 8f4f 	dsb	sy
}
 8001302:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001304:	f3bf 8f6f 	isb	sy
}
 8001308:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <EE_Init+0x630>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <EE_Init+0x630>)
 8001310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001314:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <EE_Init+0x630>)
 8001318:	2200      	movs	r2, #0
 800131a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
}
 8001322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001324:	f3bf 8f6f 	isb	sy
}
 8001328:	bf00      	nop
}
 800132a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800132c:	463b      	mov	r3, r7
 800132e:	461a      	mov	r2, r3
 8001330:	492a      	ldr	r1, [pc, #168]	; (80013dc <EE_Init+0x634>)
 8001332:	2001      	movs	r0, #1
 8001334:	f00a fcd4 	bl	800bce0 <HAL_FLASH_Program>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <EE_Init+0x630>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d11b      	bne.n	8001382 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800134a:	f3bf 8f4f 	dsb	sy
}
 800134e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001350:	f3bf 8f6f 	isb	sy
}
 8001354:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <EE_Init+0x630>)
 8001358:	2200      	movs	r2, #0
 800135a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001364:	f3bf 8f6f 	isb	sy
}
 8001368:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <EE_Init+0x630>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <EE_Init+0x630>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001376:	f3bf 8f4f 	dsb	sy
}
 800137a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800137c:	f3bf 8f6f 	isb	sy
}
 8001380:	e000      	b.n	8001384 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001382:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001384:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8184 	beq.w	8001696 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800138e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001392:	b29b      	uxth	r3, r3
 8001394:	e185      	b.n	80016a2 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001396:	f000 fa29 	bl	80017ec <EE_Format>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8176 	beq.w	8001696 <EE_Init+0x8ee>
        {
          return FlashStatus;
 80013aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	e177      	b.n	80016a2 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d114      	bne.n	80013e4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013ba:	f000 fa17 	bl	80017ec <EE_Format>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8166 	beq.w	800169a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	e165      	b.n	80016a2 <EE_Init+0x8fa>
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	081c0000 	.word	0x081c0000
 80013e0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d15c      	bne.n	80014aa <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013f0:	2307      	movs	r3, #7
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013f4:	2302      	movs	r3, #2
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013fc:	2320      	movs	r3, #32
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001400:	48aa      	ldr	r0, [pc, #680]	; (80016ac <EE_Init+0x904>)
 8001402:	f000 f95f 	bl	80016c4 <EE_VerifyPageFullyErased>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 8146 	bne.w	800169a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 800140e:	f3bf 8f4f 	dsb	sy
}
 8001412:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001414:	f3bf 8f6f 	isb	sy
}
 8001418:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800141a:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <EE_Init+0x908>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4aa4      	ldr	r2, [pc, #656]	; (80016b0 <EE_Init+0x908>)
 8001420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001424:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001426:	4ba2      	ldr	r3, [pc, #648]	; (80016b0 <EE_Init+0x908>)
 8001428:	2200      	movs	r2, #0
 800142a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800142e:	f3bf 8f4f 	dsb	sy
}
 8001432:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001434:	f3bf 8f6f 	isb	sy
}
 8001438:	bf00      	nop
}
 800143a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800143c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f00a ff78 	bl	800c33c <HAL_FLASHEx_Erase>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <EE_Init+0x908>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d11b      	bne.n	8001496 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800145e:	f3bf 8f4f 	dsb	sy
}
 8001462:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001464:	f3bf 8f6f 	isb	sy
}
 8001468:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <EE_Init+0x908>)
 800146c:	2200      	movs	r2, #0
 800146e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
}
 8001476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001478:	f3bf 8f6f 	isb	sy
}
 800147c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800147e:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <EE_Init+0x908>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a8b      	ldr	r2, [pc, #556]	; (80016b0 <EE_Init+0x908>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800148a:	f3bf 8f4f 	dsb	sy
}
 800148e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001490:	f3bf 8f6f 	isb	sy
}
 8001494:	e000      	b.n	8001498 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001496:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001498:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80fc 	beq.w	800169a <EE_Init+0x8f2>
          {
            return FlashStatus;
 80014a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	e0fb      	b.n	80016a2 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014b0:	e038      	b.n	8001524 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014b2:	4b80      	ldr	r3, [pc, #512]	; (80016b4 <EE_Init+0x90c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014bc:	497e      	ldr	r1, [pc, #504]	; (80016b8 <EE_Init+0x910>)
 80014be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d103      	bne.n	80014ce <EE_Init+0x726>
          {
            x = VarIdx;
 80014c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014d2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d01f      	beq.n	800151a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014de:	4a76      	ldr	r2, [pc, #472]	; (80016b8 <EE_Init+0x910>)
 80014e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e4:	4975      	ldr	r1, [pc, #468]	; (80016bc <EE_Init+0x914>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f916 	bl	8001718 <EE_ReadVariable>
 80014ec:	4603      	mov	r3, r0
 80014ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d011      	beq.n	800151a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014fa:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <EE_Init+0x910>)
 80014fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001500:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <EE_Init+0x914>)
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f000 faca 	bl	8001aa0 <EE_VerifyPageFullWriteVariable>
 800150c:	4603      	mov	r3, r0
 800150e:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001510:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <EE_Init+0x772>
              {
                return EepromStatus;
 8001516:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001518:	e0c3      	b.n	80016a2 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800151a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800151e:	3301      	adds	r3, #1
 8001520:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001528:	2b1e      	cmp	r3, #30
 800152a:	d9c2      	bls.n	80014b2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <EE_Init+0x908>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a5c      	ldr	r2, [pc, #368]	; (80016b0 <EE_Init+0x908>)
 800153e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001542:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001544:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <EE_Init+0x908>)
 8001546:	2200      	movs	r2, #0
 8001548:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800154c:	f3bf 8f4f 	dsb	sy
}
 8001550:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001552:	f3bf 8f6f 	isb	sy
}
 8001556:	bf00      	nop
}
 8001558:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800155a:	463b      	mov	r3, r7
 800155c:	461a      	mov	r2, r3
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <EE_Init+0x904>)
 8001560:	2001      	movs	r0, #1
 8001562:	f00a fbbd 	bl	800bce0 <HAL_FLASH_Program>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <EE_Init+0x908>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <EE_Init+0x908>)
 8001586:	2200      	movs	r2, #0
 8001588:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
}
 8001590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy
}
 8001596:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001598:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <EE_Init+0x908>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <EE_Init+0x908>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a4:	f3bf 8f4f 	dsb	sy
}
 80015a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy
}
 80015ae:	e000      	b.n	80015b2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015b0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015be:	b29b      	uxth	r3, r3
 80015c0:	e06f      	b.n	80016a2 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015c2:	2306      	movs	r3, #6
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015c6:	2302      	movs	r3, #2
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015ce:	2320      	movs	r3, #32
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015d2:	483b      	ldr	r0, [pc, #236]	; (80016c0 <EE_Init+0x918>)
 80015d4:	f000 f876 	bl	80016c4 <EE_VerifyPageFullyErased>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d15d      	bne.n	800169a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015de:	f3bf 8f4f 	dsb	sy
}
 80015e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e4:	f3bf 8f6f 	isb	sy
}
 80015e8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <EE_Init+0x908>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <EE_Init+0x908>)
 80015f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015f4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <EE_Init+0x908>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015fe:	f3bf 8f4f 	dsb	sy
}
 8001602:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001604:	f3bf 8f6f 	isb	sy
}
 8001608:	bf00      	nop
}
 800160a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800160c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f00a fe90 	bl	800c33c <HAL_FLASHEx_Erase>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <EE_Init+0x908>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11b      	bne.n	8001666 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800162e:	f3bf 8f4f 	dsb	sy
}
 8001632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001634:	f3bf 8f6f 	isb	sy
}
 8001638:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <EE_Init+0x908>)
 800163c:	2200      	movs	r2, #0
 800163e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001642:	f3bf 8f4f 	dsb	sy
}
 8001646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001648:	f3bf 8f6f 	isb	sy
}
 800164c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <EE_Init+0x908>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <EE_Init+0x908>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800165a:	f3bf 8f4f 	dsb	sy
}
 800165e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001660:	f3bf 8f6f 	isb	sy
}
 8001664:	e000      	b.n	8001668 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001666:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001668:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001670:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001674:	b29b      	uxth	r3, r3
 8001676:	e014      	b.n	80016a2 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001678:	f000 f8b8 	bl	80017ec <EE_Format>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800168a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800168e:	b29b      	uxth	r3, r3
 8001690:	e007      	b.n	80016a2 <EE_Init+0x8fa>
      break;
 8001692:	bf00      	nop
 8001694:	e004      	b.n	80016a0 <EE_Init+0x8f8>
      break;
 8001696:	bf00      	nop
 8001698:	e002      	b.n	80016a0 <EE_Init+0x8f8>
      break;
 800169a:	bf00      	nop
 800169c:	e000      	b.n	80016a0 <EE_Init+0x8f8>
      }
      break;
 800169e:	bf00      	nop
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3748      	adds	r7, #72	; 0x48
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	081e0000 	.word	0x081e0000
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	081e0006 	.word	0x081e0006
 80016b8:	24000000 	.word	0x24000000
 80016bc:	24000340 	.word	0x24000340
 80016c0:	081c0000 	.word	0x081c0000

080016c4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016d0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016d4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <EE_VerifyPageFullyErased+0x50>)
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016de:	e00d      	b.n	80016fc <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d002      	beq.n	80016f6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

      break;
 80016f4:	e006      	b.n	8001704 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d9ed      	bls.n	80016e0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	b29b      	uxth	r3, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	0001fffc 	.word	0x0001fffc

08001718 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001724:	2300      	movs	r3, #0
 8001726:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001728:	f245 5355 	movw	r3, #21845	; 0x5555
 800172c:	81bb      	strh	r3, [r7, #12]
 800172e:	2301      	movs	r3, #1
 8001730:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <EE_ReadVariable+0x88>)
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <EE_ReadVariable+0x88>)
 8001738:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f96a 	bl	8001a14 <EE_FindValidPage>
 8001740:	4603      	mov	r3, r0
 8001742:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	2bab      	cmp	r3, #171	; 0xab
 8001748:	d101      	bne.n	800174e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800174a:	23ab      	movs	r3, #171	; 0xab
 800174c:	e024      	b.n	8001798 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001754:	045b      	lsls	r3, r3, #17
 8001756:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	3301      	adds	r3, #1
 800175c:	045a      	lsls	r2, r3, #17
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <EE_ReadVariable+0x8c>)
 8001760:	4413      	add	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001764:	e012      	b.n	800178c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800176c:	89ba      	ldrh	r2, [r7, #12]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	429a      	cmp	r2, r3
 8001772:	d108      	bne.n	8001786 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3b20      	subs	r3, #32
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29a      	uxth	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	82fb      	strh	r3, [r7, #22]

      break;
 8001784:	e007      	b.n	8001796 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	3b40      	subs	r3, #64	; 0x40
 800178a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	3320      	adds	r3, #32
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	429a      	cmp	r2, r3
 8001794:	d8e7      	bhi.n	8001766 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001796:	8afb      	ldrh	r3, [r7, #22]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	081c0000 	.word	0x081c0000
 80017a4:	081bffe0 	.word	0x081bffe0

080017a8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017bc:	88ba      	ldrh	r2, [r7, #4]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f96c 	bl	8001aa0 <EE_VerifyPageFullWriteVariable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	2b80      	cmp	r3, #128	; 0x80
 80017d0:	d107      	bne.n	80017e2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017d2:	88ba      	ldrh	r2, [r7, #4]
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fa13 	bl	8001c04 <EE_PageTransfer>
 80017de:	4603      	mov	r3, r0
 80017e0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017e2:	89fb      	ldrh	r3, [r7, #14]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2220      	movs	r2, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f01a fb5c 	bl	801bec0 <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001810:	2306      	movs	r3, #6
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001818:	2320      	movs	r3, #32
 800181a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800181c:	487a      	ldr	r0, [pc, #488]	; (8001a08 <EE_Format+0x21c>)
 800181e:	f7ff ff51 	bl	80016c4 <EE_VerifyPageFullyErased>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d14b      	bne.n	80018c0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001828:	f3bf 8f4f 	dsb	sy
}
 800182c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182e:	f3bf 8f6f 	isb	sy
}
 8001832:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <EE_Format+0x220>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	4a74      	ldr	r2, [pc, #464]	; (8001a0c <EE_Format+0x220>)
 800183a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800183e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001840:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <EE_Format+0x220>)
 8001842:	2200      	movs	r2, #0
 8001844:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001848:	f3bf 8f4f 	dsb	sy
}
 800184c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800184e:	f3bf 8f6f 	isb	sy
}
 8001852:	bf00      	nop
}
 8001854:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001856:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f00a fd6b 	bl	800c33c <HAL_FLASHEx_Erase>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <EE_Format+0x220>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11b      	bne.n	80018b0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001878:	f3bf 8f4f 	dsb	sy
}
 800187c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800187e:	f3bf 8f6f 	isb	sy
}
 8001882:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001884:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <EE_Format+0x220>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800188c:	f3bf 8f4f 	dsb	sy
}
 8001890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001892:	f3bf 8f6f 	isb	sy
}
 8001896:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001898:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <EE_Format+0x220>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <EE_Format+0x220>)
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018a4:	f3bf 8f4f 	dsb	sy
}
 80018a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018aa:	f3bf 8f6f 	isb	sy
}
 80018ae:	e000      	b.n	80018b2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018b0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018be:	e09e      	b.n	80019fe <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018c0:	f3bf 8f4f 	dsb	sy
}
 80018c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018c6:	f3bf 8f6f 	isb	sy
}
 80018ca:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <EE_Format+0x220>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	4a4e      	ldr	r2, [pc, #312]	; (8001a0c <EE_Format+0x220>)
 80018d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018d6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018d8:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <EE_Format+0x220>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018e0:	f3bf 8f4f 	dsb	sy
}
 80018e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018e6:	f3bf 8f6f 	isb	sy
}
 80018ea:	bf00      	nop
}
 80018ec:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	461a      	mov	r2, r3
 80018f2:	4945      	ldr	r1, [pc, #276]	; (8001a08 <EE_Format+0x21c>)
 80018f4:	2001      	movs	r0, #1
 80018f6:	f00a f9f3 	bl	800bce0 <HAL_FLASH_Program>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <EE_Format+0x220>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11b      	bne.n	8001944 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 800190c:	f3bf 8f4f 	dsb	sy
}
 8001910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001912:	f3bf 8f6f 	isb	sy
}
 8001916:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <EE_Format+0x220>)
 800191a:	2200      	movs	r2, #0
 800191c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001920:	f3bf 8f4f 	dsb	sy
}
 8001924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001926:	f3bf 8f6f 	isb	sy
}
 800192a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800192c:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <EE_Format+0x220>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	4a36      	ldr	r2, [pc, #216]	; (8001a0c <EE_Format+0x220>)
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001938:	f3bf 8f4f 	dsb	sy
}
 800193c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800193e:	f3bf 8f6f 	isb	sy
}
 8001942:	e000      	b.n	8001946 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001944:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001946:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <EE_Format+0x168>
  {
    return FlashStatus;
 800194e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001952:	e054      	b.n	80019fe <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001954:	2307      	movs	r3, #7
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001958:	482d      	ldr	r0, [pc, #180]	; (8001a10 <EE_Format+0x224>)
 800195a:	f7ff feb3 	bl	80016c4 <EE_VerifyPageFullyErased>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d14b      	bne.n	80019fc <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
}
 8001968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800196a:	f3bf 8f6f 	isb	sy
}
 800196e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <EE_Format+0x220>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <EE_Format+0x220>)
 8001976:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800197a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <EE_Format+0x220>)
 800197e:	2200      	movs	r2, #0
 8001980:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001984:	f3bf 8f4f 	dsb	sy
}
 8001988:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800198a:	f3bf 8f6f 	isb	sy
}
 800198e:	bf00      	nop
}
 8001990:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f00a fccd 	bl	800c33c <HAL_FLASHEx_Erase>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <EE_Format+0x220>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11b      	bne.n	80019ec <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019b4:	f3bf 8f4f 	dsb	sy
}
 80019b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ba:	f3bf 8f6f 	isb	sy
}
 80019be:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <EE_Format+0x220>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019c8:	f3bf 8f4f 	dsb	sy
}
 80019cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ce:	f3bf 8f6f 	isb	sy
}
 80019d2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <EE_Format+0x220>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <EE_Format+0x220>)
 80019da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019e0:	f3bf 8f4f 	dsb	sy
}
 80019e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019e6:	f3bf 8f6f 	isb	sy
}
 80019ea:	e000      	b.n	80019ee <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019ec:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <EE_Format+0x210>
    {
      return FlashStatus;
 80019f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019fa:	e000      	b.n	80019fe <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3740      	adds	r7, #64	; 0x40
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	081c0000 	.word	0x081c0000
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	081e0000 	.word	0x081e0000

08001a14 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	81fb      	strh	r3, [r7, #14]
 8001a22:	2306      	movs	r3, #6
 8001a24:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <EE_FindValidPage+0x84>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <EE_FindValidPage+0x88>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <EE_FindValidPage+0x5c>
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d125      	bne.n	8001a88 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e01c      	b.n	8001a8a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a50:	2301      	movs	r3, #1
 8001a52:	e01a      	b.n	8001a8a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a5a:	89bb      	ldrh	r3, [r7, #12]
 8001a5c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a64:	2301      	movs	r3, #1
 8001a66:	e010      	b.n	8001a8a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e00e      	b.n	8001a8a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a6c:	23ab      	movs	r3, #171	; 0xab
 8001a6e:	e00c      	b.n	8001a8a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a76:	2300      	movs	r3, #0
 8001a78:	e007      	b.n	8001a8a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a80:	2301      	movs	r3, #1
 8001a82:	e002      	b.n	8001a8a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a84:	23ab      	movs	r3, #171	; 0xab
 8001a86:	e000      	b.n	8001a8a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a88:	2300      	movs	r3, #0
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	081c0000 	.word	0x081c0000
 8001a9c:	081e0000 	.word	0x081e0000

08001aa0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b096      	sub	sp, #88	; 0x58
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	80fb      	strh	r3, [r7, #6]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001abe:	657b      	str	r3, [r7, #84]	; 0x54
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f01a f9f7 	bl	801bec0 <memset>
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2220      	movs	r2, #32
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f01a f9ee 	bl	801bec0 <memset>
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff ff93 	bl	8001a14 <EE_FindValidPage>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001af4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af8:	2bab      	cmp	r3, #171	; 0xab
 8001afa:	d101      	bne.n	8001b00 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001afc:	23ab      	movs	r3, #171	; 0xab
 8001afe:	e075      	b.n	8001bec <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b04:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001b08:	045b      	lsls	r3, r3, #17
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b10:	3301      	adds	r3, #1
 8001b12:	045a      	lsls	r2, r3, #17
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b16:	4413      	add	r3, r2
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1a:	f3bf 8f4f 	dsb	sy
}
 8001b1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b20:	f3bf 8f6f 	isb	sy
}
 8001b24:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b26:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a35      	ldr	r2, [pc, #212]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b30:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3a:	f3bf 8f4f 	dsb	sy
}
 8001b3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b40:	f3bf 8f6f 	isb	sy
}
 8001b44:	bf00      	nop
}
 8001b46:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b48:	e028      	b.n	8001b9c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d120      	bne.n	8001b96 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f00a f8bf 	bl	800bce0 <HAL_FLASH_Program>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b70:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	e039      	b.n	8001bec <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	3320      	adds	r3, #32
 8001b7c:	f107 020c 	add.w	r2, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	2001      	movs	r0, #1
 8001b84:	f00a f8ac 	bl	800bce0 <HAL_FLASH_Program>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b8e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	e02a      	b.n	8001bec <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	3340      	adds	r3, #64	; 0x40
 8001b9a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3d2      	bcc.n	8001b4a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11b      	bne.n	8001be8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb0:	f3bf 8f4f 	dsb	sy
}
 8001bb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb6:	f3bf 8f6f 	isb	sy
}
 8001bba:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy
}
 8001bce:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bdc:	f3bf 8f4f 	dsb	sy
}
 8001be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be2:	f3bf 8f6f 	isb	sy
}
 8001be6:	e000      	b.n	8001bea <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001be8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bea:	2380      	movs	r3, #128	; 0x80
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3758      	adds	r7, #88	; 0x58
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	081c0000 	.word	0x081c0000
 8001bf8:	081e0000 	.word	0x081e0000
 8001bfc:	081bffff 	.word	0x081bffff
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09c      	sub	sp, #112	; 0x70
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	80fb      	strh	r3, [r7, #6]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c1a:	4bc3      	ldr	r3, [pc, #780]	; (8001f28 <EE_PageTransfer+0x324>)
 8001c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	2220      	movs	r2, #32
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f01a f939 	bl	801bec0 <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2220      	movs	r2, #32
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f01a f932 	bl	801bec0 <memset>
 8001c5c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c60:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fed6 	bl	8001a14 <EE_FindValidPage>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d105      	bne.n	8001c82 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c76:	4bac      	ldr	r3, [pc, #688]	; (8001f28 <EE_PageTransfer+0x324>)
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c80:	e00b      	b.n	8001c9a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c8a:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <EE_PageTransfer+0x328>)
 8001c8c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c94:	e001      	b.n	8001c9a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c96:	23ab      	movs	r3, #171	; 0xab
 8001c98:	e142      	b.n	8001f20 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9a:	f3bf 8f4f 	dsb	sy
}
 8001c9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
}
 8001ca4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001ca6:	4ba2      	ldr	r3, [pc, #648]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4aa1      	ldr	r2, [pc, #644]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cb0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001cb2:	4b9f      	ldr	r3, [pc, #636]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cba:	f3bf 8f4f 	dsb	sy
}
 8001cbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc0:	f3bf 8f6f 	isb	sy
}
 8001cc4:	bf00      	nop
}
 8001cc6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f00a f805 	bl	800bce0 <HAL_FLASH_Program>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001cdc:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11b      	bne.n	8001d20 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cee:	f3bf 8f6f 	isb	sy
}
 8001cf2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001cf4:	4b8e      	ldr	r3, [pc, #568]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfc:	f3bf 8f4f 	dsb	sy
}
 8001d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d02:	f3bf 8f6f 	isb	sy
}
 8001d06:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d08:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4a88      	ldr	r2, [pc, #544]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d14:	f3bf 8f4f 	dsb	sy
}
 8001d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d1a:	f3bf 8f6f 	isb	sy
}
 8001d1e:	e000      	b.n	8001d22 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d20:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	e0f6      	b.n	8001f20 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff feb1 	bl	8001aa0 <EE_VerifyPageFullWriteVariable>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d50:	e0e6      	b.n	8001f20 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d58:	e031      	b.n	8001dbe <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d024      	beq.n	8001db4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d6e:	4a71      	ldr	r2, [pc, #452]	; (8001f34 <EE_PageTransfer+0x330>)
 8001d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d74:	4970      	ldr	r1, [pc, #448]	; (8001f38 <EE_PageTransfer+0x334>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fcce 	bl	8001718 <EE_ReadVariable>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d82:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d014      	beq.n	8001db4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d8a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d8e:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <EE_PageTransfer+0x330>)
 8001d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d94:	4a68      	ldr	r2, [pc, #416]	; (8001f38 <EE_PageTransfer+0x334>)
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe80 	bl	8001aa0 <EE_VerifyPageFullWriteVariable>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001da6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001dae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001db2:	e0b5      	b.n	8001f20 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001db4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db8:	3301      	adds	r3, #1
 8001dba:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dbe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001dc2:	2b1e      	cmp	r3, #30
 8001dc4:	d9c9      	bls.n	8001d5a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001dc6:	f00a f9e3 	bl	800c190 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <EE_PageTransfer+0x338>)
 8001dcc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dd0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dda:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dde:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001de4:	2320      	movs	r3, #32
 8001de6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001de8:	f3bf 8f4f 	dsb	sy
}
 8001dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dee:	f3bf 8f6f 	isb	sy
}
 8001df2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001df4:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	4a4d      	ldr	r2, [pc, #308]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001dfa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dfe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e08:	f3bf 8f4f 	dsb	sy
}
 8001e0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e0e:	f3bf 8f6f 	isb	sy
}
 8001e12:	bf00      	nop
}
 8001e14:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e16:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00a fa8b 	bl	800c33c <HAL_FLASHEx_Erase>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11b      	bne.n	8001e70 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e38:	f3bf 8f4f 	dsb	sy
}
 8001e3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e3e:	f3bf 8f6f 	isb	sy
}
 8001e42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4c:	f3bf 8f4f 	dsb	sy
}
 8001e50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e52:	f3bf 8f6f 	isb	sy
}
 8001e56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e64:	f3bf 8f4f 	dsb	sy
}
 8001e68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e6a:	f3bf 8f6f 	isb	sy
}
 8001e6e:	e000      	b.n	8001e72 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e70:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	e04e      	b.n	8001f20 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e82:	f3bf 8f4f 	dsb	sy
}
 8001e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e88:	f3bf 8f6f 	isb	sy
}
 8001e8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea2:	f3bf 8f4f 	dsb	sy
}
 8001ea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ea8:	f3bf 8f6f 	isb	sy
}
 8001eac:	bf00      	nop
}
 8001eae:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f009 ff11 	bl	800bce0 <HAL_FLASH_Program>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11b      	bne.n	8001f08 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
}
 8001ed4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ed6:	f3bf 8f6f 	isb	sy
}
 8001eda:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee4:	f3bf 8f4f 	dsb	sy
}
 8001ee8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eea:	f3bf 8f6f 	isb	sy
}
 8001eee:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <EE_PageTransfer+0x32c>)
 8001ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001efc:	f3bf 8f4f 	dsb	sy
}
 8001f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f02:	f3bf 8f6f 	isb	sy
}
 8001f06:	e000      	b.n	8001f0a <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f08:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	e002      	b.n	8001f20 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f1e:	b29b      	uxth	r3, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3770      	adds	r7, #112	; 0x70
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	081c0000 	.word	0x081c0000
 8001f2c:	081e0000 	.word	0x081e0000
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	24000000 	.word	0x24000000
 8001f38:	24000340 	.word	0x24000340
 8001f3c:	52002000 	.word	0x52002000

08001f40 <handle_error>:
 *        Initiates an emergency shutdown, manages Flash ECC-related errors, and sends error packets.
 *
 * @param error The error structure containing the error category and details.
 */
void handle_error(ERROR_STRUCT error)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	463b      	mov	r3, r7
 8001f48:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	emergency_shutdown();
 8001f4c:	f000 f9e0 	bl	8002310 <emergency_shutdown>

	// If error was caused by flash ECC...
	if ((error.detail == ED_single_bit_error_flash) || (error.detail == ED_double_bit_error_flash))
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b18      	cmp	r3, #24
 8001f54:	d002      	beq.n	8001f5c <handle_error+0x1c>
 8001f56:	787b      	ldrb	r3, [r7, #1]
 8001f58:	2b19      	cmp	r3, #25
 8001f5a:	d11f      	bne.n	8001f9c <handle_error+0x5c>
	{
		// Erase user flash, reinit EE, reset error counters, increment error counter, set previous error
		local_cpy[error.category]++;
 8001f5c:	783b      	ldrb	r3, [r7, #0]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <handle_error+0x98>)
 8001f60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f64:	3201      	adds	r2, #1
 8001f66:	b291      	uxth	r1, r2
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <handle_error+0x98>)
 8001f6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		local_cpy[error.detail]++;
 8001f6e:	787b      	ldrb	r3, [r7, #1]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <handle_error+0x98>)
 8001f72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f76:	3201      	adds	r2, #1
 8001f78:	b291      	uxth	r1, r2
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <handle_error+0x98>)
 8001f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flash_mass_erase();
 8001f80:	f000 f830 	bl	8001fe4 <flash_mass_erase>
		EE_Init();
 8001f84:	f7fe ff10 	bl	8000da8 <EE_Init>
		reset_error_counters();
 8001f88:	f000 f8c8 	bl	800211c <reset_error_counters>
		update_error_counter();
 8001f8c:	f000 f8a0 	bl	80020d0 <update_error_counter>
		set_previous_error(error);
 8001f90:	463b      	mov	r3, r7
 8001f92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f96:	f000 f8e1 	bl	800215c <set_previous_error>
 8001f9a:	e009      	b.n	8001fb0 <handle_error+0x70>
	}
	// Otherwise, just increment error counter and set previous error
	else
	{
		increment_error_counter(error);
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fa2:	f000 f875 	bl	8002090 <increment_error_counter>
		set_previous_error(error);
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fac:	f000 f8d6 	bl	800215c <set_previous_error>
	}

	// Wait until all power supply rails are off, then send current error packet + junk data
	while(!IDLING){};
 8001fb0:	bf00      	nop
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <handle_error+0x9c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0fa      	beq.n	8001fb2 <handle_error+0x72>
	send_current_error_packet(error);
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fc2:	f000 f93f 	bl	8002244 <send_current_error_packet>
	send_junk_packet();
 8001fc6:	f000 f979 	bl	80022bc <send_junk_packet>

	HAL_TIM_Base_Start_IT(&htim3);
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <handle_error+0xa0>)
 8001fcc:	f012 f9c8 	bl	8014360 <HAL_TIM_Base_Start_IT>
#endif
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24000344 	.word	0x24000344
 8001fdc:	240000c8 	.word	0x240000c8
 8001fe0:	24002178 	.word	0x24002178

08001fe4 <flash_mass_erase>:
/**
 * @brief Performs a mass erase of Flash memory.
 *        Unlocks Flash and erases all sectors in Bank 2, handling errors if the erase fails.
 */
void flash_mass_erase()
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fea:	f00a f8d1 	bl	800c190 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <flash_mass_erase+0x48>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <flash_mass_erase+0x48>)
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks = FLASH_BANK_2;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <flash_mass_erase+0x48>)
 8002000:	2202      	movs	r2, #2
 8002002:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_0;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <flash_mass_erase+0x48>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = FLASH_SECTOR_TOTAL;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <flash_mass_erase+0x48>)
 800200c:	2208      	movs	r2, #8
 800200e:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <flash_mass_erase+0x48>)
 8002016:	f00a f991 	bl	800c33c <HAL_FLASHEx_Erase>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <flash_mass_erase+0x40>
	{
		Error_Handler();
 8002020:	f001 fdda 	bl	8003bd8 <Error_Handler>
	}
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24000380 	.word	0x24000380

08002030 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002036:	f00a f8ab 	bl	800c190 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK)
 800203a:	f7fe feb5 	bl	8000da8 <EE_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <error_counter_init+0x18>
	{
		Error_Handler();
 8002044:	f001 fdc8 	bl	8003bd8 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	e013      	b.n	8002076 <error_counter_init+0x46>
	{
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK)
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <error_counter_init+0x58>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	490c      	ldr	r1, [pc, #48]	; (800208c <error_counter_init+0x5c>)
 800205c:	440b      	add	r3, r1
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f7ff fb59 	bl	8001718 <EE_ReadVariable>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <error_counter_init+0x40>
		{
			Error_Handler();
 800206c:	f001 fdb4 	bl	8003bd8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3301      	adds	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b1c      	cmp	r3, #28
 800207a:	dde8      	ble.n	800204e <error_counter_init+0x1e>
		}
	}
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	24000000 	.word	0x24000000
 800208c:	24000344 	.word	0x24000344

08002090 <increment_error_counter>:
 *        Updates both the category and detail counters and saves the updated values.
 *
 * @param error The error structure containing the error category and details.
 */
void increment_error_counter(ERROR_STRUCT error)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	463b      	mov	r3, r7
 8002098:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 800209c:	783b      	ldrb	r3, [r7, #0]
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <increment_error_counter+0x3c>)
 80020a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020a4:	3201      	adds	r2, #1
 80020a6:	b291      	uxth	r1, r2
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <increment_error_counter+0x3c>)
 80020aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <increment_error_counter+0x3c>)
 80020b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020b6:	3201      	adds	r2, #1
 80020b8:	b291      	uxth	r1, r2
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <increment_error_counter+0x3c>)
 80020bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 80020c0:	f000 f806 	bl	80020d0 <update_error_counter>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	24000344 	.word	0x24000344

080020d0 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e013      	b.n	8002104 <update_error_counter+0x34>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK)
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <update_error_counter+0x44>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <update_error_counter+0x48>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7ff fb5a 	bl	80017a8 <EE_WriteVariable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <update_error_counter+0x2e>
		{
			Error_Handler();
 80020fa:	f001 fd6d 	bl	8003bd8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3301      	adds	r3, #1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b1c      	cmp	r3, #28
 8002108:	dde8      	ble.n	80020dc <update_error_counter+0xc>
		}
	}
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	24000000 	.word	0x24000000
 8002118:	24000344 	.word	0x24000344

0800211c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e00f      	b.n	8002148 <reset_error_counters+0x2c>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK)
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <reset_error_counters+0x3c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fb38 	bl	80017a8 <EE_WriteVariable>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <reset_error_counters+0x26>
		{
			Error_Handler();
 800213e:	f001 fd4b 	bl	8003bd8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b1c      	cmp	r3, #28
 800214c:	ddec      	ble.n	8002128 <reset_error_counters+0xc>
		}
	}
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	24000000 	.word	0x24000000

0800215c <set_previous_error>:
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	463b      	mov	r3, r7
 8002164:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK)
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <set_previous_error+0x48>)
 800216a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800216c:	783a      	ldrb	r2, [r7, #0]
 800216e:	b292      	uxth	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fb18 	bl	80017a8 <EE_WriteVariable>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <set_previous_error+0x26>
	{
		Error_Handler();
 800217e:	f001 fd2b 	bl	8003bd8 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK)
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <set_previous_error+0x48>)
 8002184:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002186:	787a      	ldrb	r2, [r7, #1]
 8002188:	b292      	uxth	r2, r2
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fb0b 	bl	80017a8 <EE_WriteVariable>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <set_previous_error+0x40>
	{
		Error_Handler();
 8002198:	f001 fd1e 	bl	8003bd8 <Error_Handler>
	}
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24000000 	.word	0x24000000

080021a8 <get_previous_error>:
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK)
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <get_previous_error+0x60>)
 80021b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80021b4:	f107 020e 	add.w	r2, r7, #14
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff faac 	bl	8001718 <EE_ReadVariable>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <get_previous_error+0x22>
	{
		Error_Handler();
 80021c6:	f001 fd07 	bl	8003bd8 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK)
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <get_previous_error+0x60>)
 80021cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80021ce:	f107 020c 	add.w	r2, r7, #12
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fa9f 	bl	8001718 <EE_ReadVariable>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <get_previous_error+0x3c>
	{
		Error_Handler();
 80021e0:	f001 fcfa 	bl	8003bd8 <Error_Handler>
	}

	prev_error.category = category;
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 80021ea:	89bb      	ldrh	r3, [r7, #12]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	747b      	strb	r3, [r7, #17]

	return prev_error;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	cb03      	ldmia	r3!, {r0, r1}
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	6051      	str	r1, [r2, #4]
}
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	24000000 	.word	0x24000000

0800220c <send_previous_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffc6 	bl	80021a8 <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800221c:	23aa      	movs	r3, #170	; 0xaa
 800221e:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 8002220:	23aa      	movs	r3, #170	; 0xaa
 8002222:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 8002224:	7a3b      	ldrb	r3, [r7, #8]
 8002226:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 8002228:	7a7b      	ldrb	r3, [r7, #9]
 800222a:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 800222c:	1d39      	adds	r1, r7, #4
 800222e:	2364      	movs	r3, #100	; 0x64
 8002230:	2204      	movs	r2, #4
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <send_previous_error_packet+0x34>)
 8002234:	f013 fcd5 	bl	8015be2 <HAL_UART_Transmit>
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	240021c4 	.word	0x240021c4

08002244 <send_current_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	463b      	mov	r3, r7
 800224c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail)
 8002250:	783b      	ldrb	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <send_current_error_packet+0x1e>
	{
		error.OOB_1 = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002262:	23bb      	movs	r3, #187	; 0xbb
 8002264:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002266:	23bb      	movs	r3, #187	; 0xbb
 8002268:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 800226a:	783b      	ldrb	r3, [r7, #0]
 800226c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 8002282:	88bb      	ldrh	r3, [r7, #4]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 80022a2:	f107 010c 	add.w	r1, r7, #12
 80022a6:	2364      	movs	r3, #100	; 0x64
 80022a8:	220a      	movs	r2, #10
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <send_current_error_packet+0x74>)
 80022ac:	f013 fc99 	bl	8015be2 <HAL_UART_Transmit>
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	240021c4 	.word	0x240021c4

080022bc <send_junk_packet>:
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80022c2:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022ca:	e00d      	b.n	80022e8 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 80022cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022d0:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80022d4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022d8:	4413      	add	r3, r2
 80022da:	22ce      	movs	r2, #206	; 0xce
 80022dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022de:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022e8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	dbec      	blt.n	80022cc <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, UART_TIMEOUT_MS);
 80022f2:	1d39      	adds	r1, r7, #4
 80022f4:	2364      	movs	r3, #100	; 0x64
 80022f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <send_junk_packet+0x50>)
 80022fc:	f013 fc71 	bl	8015be2 <HAL_UART_Transmit>
}
 8002300:	bf00      	nop
 8002302:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	240021c4 	.word	0x240021c4

08002310 <emergency_shutdown>:
/**
 * @brief Initiates an emergency shutdown of the system.
 *        Disables timers, DAC, rail monitoring, and all power supply voltages, setting the system to idle.
 */
void emergency_shutdown()
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
	ERPA_ENABLED = 0;
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <emergency_shutdown+0x8c>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
	TIM2->CCR4 = 0;
 800231c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002324:	2100      	movs	r1, #0
 8002326:	481e      	ldr	r0, [pc, #120]	; (80023a0 <emergency_shutdown+0x90>)
 8002328:	f012 f9ec 	bl	8014704 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800232c:	210c      	movs	r1, #12
 800232e:	481d      	ldr	r0, [pc, #116]	; (80023a4 <emergency_shutdown+0x94>)
 8002330:	f012 f9e8 	bl	8014704 <HAL_TIM_OC_Stop_IT>

	HK_ENABLED = 0;
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <emergency_shutdown+0x98>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800233a:	2100      	movs	r1, #0
 800233c:	481b      	ldr	r0, [pc, #108]	; (80023ac <emergency_shutdown+0x9c>)
 800233e:	f006 f9f7 	bl	8008730 <HAL_DAC_Stop_DMA>

	// Telling rail monitor which voltages are now disabled
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002342:	2311      	movs	r3, #17
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	e008      	b.n	800235a <emergency_shutdown+0x4a>
	{
		set_rail_monitor_enable(i, 0);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f004 f89e 	bl	8006490 <set_rail_monitor_enable>
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b05      	cmp	r3, #5
 800235e:	dcf3      	bgt.n	8002348 <emergency_shutdown+0x38>
	}

	// Disabling all voltages
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002360:	2308      	movs	r3, #8
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	e00f      	b.n	8002386 <emergency_shutdown+0x76>
	{
		HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <emergency_shutdown+0xa0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <emergency_shutdown+0xa0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	889b      	ldrh	r3, [r3, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	4619      	mov	r1, r3
 800237c:	f00a fc52 	bl	800cc24 <HAL_GPIO_WritePin>
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3b01      	subs	r3, #1
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	daec      	bge.n	8002366 <emergency_shutdown+0x56>
	}
	IDLING = 1;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <emergency_shutdown+0xa4>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	24001cf5 	.word	0x24001cf5
 80023a0:	240020e0 	.word	0x240020e0
 80023a4:	2400212c 	.word	0x2400212c
 80023a8:	24001cf4 	.word	0x24001cf4
 80023ac:	240002b4 	.word	0x240002b4
 80023b0:	0801c184 	.word	0x0801c184
 80023b4:	240000c8 	.word	0x240000c8

080023b8 <vApplicationTickHook>:
/**
 * @brief Tick hook function called by each tick interrupt.
 *		  Increments uptime_millis, used in time tagging.
 */
void vApplicationTickHook( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <vApplicationTickHook+0x18>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <vApplicationTickHook+0x18>)
 80023c4:	6013      	str	r3, [r2, #0]

}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	24001cf8 	.word	0x24001cf8

080023d4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80023f0:	4a28      	ldr	r2, [pc, #160]	; (8002494 <MX_FREERTOS_Init+0xa8>)
 80023f2:	2100      	movs	r1, #0
 80023f4:	4828      	ldr	r0, [pc, #160]	; (8002498 <MX_FREERTOS_Init+0xac>)
 80023f6:	f016 fa4d 	bl	8018894 <osThreadNew>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <MX_FREERTOS_Init+0xb0>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <MX_FREERTOS_Init+0xb4>)
 8002402:	2100      	movs	r1, #0
 8002404:	4827      	ldr	r0, [pc, #156]	; (80024a4 <MX_FREERTOS_Init+0xb8>)
 8002406:	f016 fa45 	bl	8018894 <osThreadNew>
 800240a:	4603      	mov	r3, r0
 800240c:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <MX_FREERTOS_Init+0xbc>)
 800240e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <MX_FREERTOS_Init+0xc0>)
 8002412:	2100      	movs	r1, #0
 8002414:	4826      	ldr	r0, [pc, #152]	; (80024b0 <MX_FREERTOS_Init+0xc4>)
 8002416:	f016 fa3d 	bl	8018894 <osThreadNew>
 800241a:	4603      	mov	r3, r0
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <MX_FREERTOS_Init+0xc8>)
 800241e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002420:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <MX_FREERTOS_Init+0xcc>)
 8002422:	2100      	movs	r1, #0
 8002424:	4825      	ldr	r0, [pc, #148]	; (80024bc <MX_FREERTOS_Init+0xd0>)
 8002426:	f016 fa35 	bl	8018894 <osThreadNew>
 800242a:	4603      	mov	r3, r0
 800242c:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <MX_FREERTOS_Init+0xd4>)
 800242e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <MX_FREERTOS_Init+0xd8>)
 8002432:	2100      	movs	r1, #0
 8002434:	4824      	ldr	r0, [pc, #144]	; (80024c8 <MX_FREERTOS_Init+0xdc>)
 8002436:	f016 fa2d 	bl	8018894 <osThreadNew>
 800243a:	4603      	mov	r3, r0
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <MX_FREERTOS_Init+0xe0>)
 800243e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <MX_FREERTOS_Init+0xe4>)
 8002442:	2100      	movs	r1, #0
 8002444:	4823      	ldr	r0, [pc, #140]	; (80024d4 <MX_FREERTOS_Init+0xe8>)
 8002446:	f016 fa25 	bl	8018894 <osThreadNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <MX_FREERTOS_Init+0xec>)
 800244e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002450:	4a22      	ldr	r2, [pc, #136]	; (80024dc <MX_FREERTOS_Init+0xf0>)
 8002452:	2100      	movs	r1, #0
 8002454:	4822      	ldr	r0, [pc, #136]	; (80024e0 <MX_FREERTOS_Init+0xf4>)
 8002456:	f016 fa1d 	bl	8018894 <osThreadNew>
 800245a:	4603      	mov	r3, r0
 800245c:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <MX_FREERTOS_Init+0xf8>)
 800245e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002460:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <MX_FREERTOS_Init+0xfc>)
 8002462:	2100      	movs	r1, #0
 8002464:	4821      	ldr	r0, [pc, #132]	; (80024ec <MX_FREERTOS_Init+0x100>)
 8002466:	f016 fa15 	bl	8018894 <osThreadNew>
 800246a:	4603      	mov	r3, r0
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <MX_FREERTOS_Init+0x104>)
 800246e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <MX_FREERTOS_Init+0x108>)
 8002472:	2100      	movs	r1, #0
 8002474:	4820      	ldr	r0, [pc, #128]	; (80024f8 <MX_FREERTOS_Init+0x10c>)
 8002476:	f016 fa0d 	bl	8018894 <osThreadNew>
 800247a:	4603      	mov	r3, r0
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <MX_FREERTOS_Init+0x110>)
 800247e:	6013      	str	r3, [r2, #0]

  /* creation of Sync_task */
  Sync_taskHandle = osThreadNew(Sync_init, NULL, &Sync_task_attributes);
 8002480:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <MX_FREERTOS_Init+0x114>)
 8002482:	2100      	movs	r1, #0
 8002484:	481f      	ldr	r0, [pc, #124]	; (8002504 <MX_FREERTOS_Init+0x118>)
 8002486:	f016 fa05 	bl	8018894 <osThreadNew>
 800248a:	4603      	mov	r3, r0
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <MX_FREERTOS_Init+0x11c>)
 800248e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0801c01c 	.word	0x0801c01c
 8002498:	0800250d 	.word	0x0800250d
 800249c:	24000394 	.word	0x24000394
 80024a0:	0801c040 	.word	0x0801c040
 80024a4:	08002535 	.word	0x08002535
 80024a8:	240005f4 	.word	0x240005f4
 80024ac:	0801c064 	.word	0x0801c064
 80024b0:	0800255d 	.word	0x0800255d
 80024b4:	24000854 	.word	0x24000854
 80024b8:	0801c088 	.word	0x0801c088
 80024bc:	08002585 	.word	0x08002585
 80024c0:	24000ab4 	.word	0x24000ab4
 80024c4:	0801c0ac 	.word	0x0801c0ac
 80024c8:	080025fd 	.word	0x080025fd
 80024cc:	24000d14 	.word	0x24000d14
 80024d0:	0801c0d0 	.word	0x0801c0d0
 80024d4:	08002675 	.word	0x08002675
 80024d8:	24000f74 	.word	0x24000f74
 80024dc:	0801c0f4 	.word	0x0801c0f4
 80024e0:	080026e9 	.word	0x080026e9
 80024e4:	240011d4 	.word	0x240011d4
 80024e8:	0801c118 	.word	0x0801c118
 80024ec:	08002739 	.word	0x08002739
 80024f0:	24001434 	.word	0x24001434
 80024f4:	0801c13c 	.word	0x0801c13c
 80024f8:	08002839 	.word	0x08002839
 80024fc:	24001694 	.word	0x24001694
 8002500:	0801c160 	.word	0x0801c160
 8002504:	0800290d 	.word	0x0800290d
 8002508:	240018f4 	.word	0x240018f4

0800250c <PMT_init>:
 * This function waits for PMT event flags, creates a PMT packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <PMT_init+0x24>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	2200      	movs	r2, #0
 800251e:	2101      	movs	r1, #1
 8002520:	f016 fb7c 	bl	8018c1c <osEventFlagsWait>

		create_pmt_packet();
 8002524:	f001 fd34 	bl	8003f90 <create_pmt_packet>

		osThreadYield();
 8002528:	f016 fa46 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 800252c:	e7f2      	b.n	8002514 <PMT_init+0x8>
 800252e:	bf00      	nop
 8002530:	24001ca8 	.word	0x24001ca8

08002534 <ERPA_init>:
 * This function waits for ERPA event flags, creates an ERPA packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <ERPA_init+0x24>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	2200      	movs	r2, #0
 8002546:	2102      	movs	r1, #2
 8002548:	f016 fb68 	bl	8018c1c <osEventFlagsWait>

		create_erpa_packet();
 800254c:	f001 fd66 	bl	800401c <create_erpa_packet>

		osThreadYield();
 8002550:	f016 fa32 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 8002554:	e7f2      	b.n	800253c <ERPA_init+0x8>
 8002556:	bf00      	nop
 8002558:	24001ca8 	.word	0x24001ca8

0800255c <HK_init>:
 * This function waits for HK event flags, creates an HK packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HK_init+0x24>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	2200      	movs	r2, #0
 800256e:	2104      	movs	r1, #4
 8002570:	f016 fb54 	bl	8018c1c <osEventFlagsWait>

		create_hk_packet();
 8002574:	f001 fdb0 	bl	80040d8 <create_hk_packet>

		osThreadYield();
 8002578:	f016 fa1e 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 800257c:	e7f2      	b.n	8002564 <HK_init+0x8>
 800257e:	bf00      	nop
 8002580:	24001ca8 	.word	0x24001ca8

08002584 <AUTOINIT_init>:
 * from SDN1 to 15V, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <AUTOINIT_init+0x70>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	2200      	movs	r2, #0
 8002596:	2104      	movs	r1, #4
 8002598:	f016 fb40 	bl	8018c1c <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e012      	b.n	80025c8 <AUTOINIT_init+0x44>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <AUTOINIT_init+0x74>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <AUTOINIT_init+0x74>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	889b      	ldrh	r3, [r3, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	f00a fb34 	bl	800cc24 <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	f016 fa5d 	bl	8018a7c <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	dde9      	ble.n	80025a2 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025ce:	2308      	movs	r3, #8
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	e008      	b.n	80025e6 <AUTOINIT_init+0x62>
		{
			set_rail_monitor_enable(i, ENABLED);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 ff58 	bl	8006490 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	3301      	adds	r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b0d      	cmp	r3, #13
 80025ea:	ddf3      	ble.n	80025d4 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80025ec:	f016 f9e4 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025f0:	e7cc      	b.n	800258c <AUTOINIT_init+0x8>
 80025f2:	bf00      	nop
 80025f4:	24001cac 	.word	0x24001cac
 80025f8:	0801c184 	.word	0x0801c184

080025fc <AUTODEINIT_init>:
 * from 15V to SDN1, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <AUTODEINIT_init+0x70>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	2200      	movs	r2, #0
 800260e:	2108      	movs	r1, #8
 8002610:	f016 fb04 	bl	8018c1c <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002614:	230d      	movs	r3, #13
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e008      	b.n	800262c <AUTODEINIT_init+0x30>
		{
			set_rail_monitor_enable(i, DISABLED);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f003 ff35 	bl	8006490 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b01      	subs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b07      	cmp	r3, #7
 8002630:	dcf3      	bgt.n	800261a <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 8002632:	2306      	movs	r3, #6
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	e012      	b.n	800265e <AUTODEINIT_init+0x62>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <AUTODEINIT_init+0x74>)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <AUTODEINIT_init+0x74>)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	889b      	ldrh	r3, [r3, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	f00a fae9 	bl	800cc24 <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 8002652:	2064      	movs	r0, #100	; 0x64
 8002654:	f016 fa12 	bl	8018a7c <osDelay>
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3b01      	subs	r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	dae9      	bge.n	8002638 <AUTODEINIT_init+0x3c>
		}

		osThreadYield();
 8002664:	f016 f9a8 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002668:	e7cc      	b.n	8002604 <AUTODEINIT_init+0x8>
 800266a:	bf00      	nop
 800266c:	24001cac 	.word	0x24001cac
 8002670:	0801c184 	.word	0x0801c184

08002674 <Voltage_Monitor_init>:
 * and checks rail status. If rails are out of bounds, it transitions to idle mode
 * before returning to science mode.
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	uint8_t rails_in_bound = 1;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <Voltage_Monitor_init+0x68>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2200      	movs	r2, #0
 800268a:	2101      	movs	r1, #1
 800268c:	f016 fac6 	bl	8018c1c <osEventFlagsWait>
	  set_rail_monitor();
 8002690:	f003 ff16 	bl	80064c0 <set_rail_monitor>
#ifdef ERROR_HANDLING_ENABLED
	  rails_in_bound = monitor_rails();
 8002694:	f003 fff4 	bl	8006680 <monitor_rails>
 8002698:	4603      	mov	r3, r0
 800269a:	73fb      	strb	r3, [r7, #15]
	  if (!rails_in_bound && !IDLING)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ee      	bne.n	8002680 <Voltage_Monitor_init+0xc>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <Voltage_Monitor_init+0x6c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e9      	bne.n	8002680 <Voltage_Monitor_init+0xc>
	  {
		  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <Voltage_Monitor_init+0x70>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2102      	movs	r1, #2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f016 fa3c 	bl	8018b30 <osEventFlagsSet>
		  while (!IDLING) {};
 80026b8:	bf00      	nop
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <Voltage_Monitor_init+0x6c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0fa      	beq.n	80026ba <Voltage_Monitor_init+0x46>
		  osDelay(IDLE_TO_SCIENCE_DELAY);
 80026c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c8:	f016 f9d8 	bl	8018a7c <osDelay>
		  osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <Voltage_Monitor_init+0x70>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f016 fa2c 	bl	8018b30 <osEventFlagsSet>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 80026d8:	e7d2      	b.n	8002680 <Voltage_Monitor_init+0xc>
 80026da:	bf00      	nop
 80026dc:	24001cac 	.word	0x24001cac
 80026e0:	240000c8 	.word	0x240000c8
 80026e4:	24001cb0 	.word	0x24001cb0

080026e8 <STOP_init>:
 * This function waits for the STOP event flag, clears it, sets the IDLE flag,
 * and enters stop mode when idle.
 */
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <STOP_init+0x44>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	2200      	movs	r2, #0
 80026fa:	2102      	movs	r1, #2
 80026fc:	f016 fa8e 	bl	8018c1c <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <STOP_init+0x44>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f016 fa56 	bl	8018bb8 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <STOP_init+0x48>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2102      	movs	r1, #2
 8002712:	4618      	mov	r0, r3
 8002714:	f016 fa0c 	bl	8018b30 <osEventFlagsSet>
	  while (!IDLING) {};
 8002718:	bf00      	nop
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <STOP_init+0x4c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0fa      	beq.n	800271a <STOP_init+0x32>

	  enter_stop();
 8002724:	f001 fa1c 	bl	8003b60 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002728:	e7e2      	b.n	80026f0 <STOP_init+0x8>
 800272a:	bf00      	nop
 800272c:	24001cac 	.word	0x24001cac
 8002730:	24001cb0 	.word	0x24001cb0
 8002734:	240000c8 	.word	0x240000c8

08002738 <Science_init>:
 * updates the rail monitor, starts DAC in DMA mode, and resets packet
 * sequence numbers, transitioning to the science mode.
 */
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <Science_init+0xd4>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	f016 fa66 	bl	8018c1c <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <Science_init+0xd8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f016 f94f 	bl	80189f8 <osThreadSuspend>
		IDLING = 0;
 800275a:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <Science_init+0xdc>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]

		// Enabling all voltages
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e012      	b.n	800278c <Science_init+0x54>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002766:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <Science_init+0xe0>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <Science_init+0xe0>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	4619      	mov	r1, r3
 800277c:	f00a fa52 	bl	800cc24 <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f016 f97b 	bl	8018a7c <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b08      	cmp	r3, #8
 8002790:	dde9      	ble.n	8002766 <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 8002792:	2306      	movs	r3, #6
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	e008      	b.n	80027aa <Science_init+0x72>
		{
			set_rail_monitor_enable(i, ENABLED);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fe76 	bl	8006490 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b11      	cmp	r3, #17
 80027ae:	ddf3      	ble.n	8002798 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <Science_init+0xd8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f016 f940 	bl	8018a3a <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 80027ba:	b672      	cpsid	i
}
 80027bc:	bf00      	nop

		__disable_irq();
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 80027be:	2300      	movs	r3, #0
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2320      	movs	r3, #32
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <Science_init+0xe4>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	4815      	ldr	r0, [pc, #84]	; (8002820 <Science_init+0xe8>)
 80027ca:	f005 fef1 	bl	80085b0 <HAL_DAC_Start_DMA>
		HK_ENABLED = ENABLED;
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <Science_init+0xec>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = ENABLED;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <Science_init+0xf0>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <Science_init+0xf4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80027e0:	f001 fdbc 	bl	800435c <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <Science_init+0xf8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2104      	movs	r1, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f016 f9a0 	bl	8018b30 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 80027f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80027fa:	2100      	movs	r1, #0
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <Science_init+0xfc>)
 80027fe:	f011 fe27 	bl	8014450 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002802:	b662      	cpsie	i
}
 8002804:	bf00      	nop
		__enable_irq();

		osThreadYield();
 8002806:	f016 f8d7 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800280a:	e799      	b.n	8002740 <Science_init+0x8>
 800280c:	24001cb0 	.word	0x24001cb0
 8002810:	24000f74 	.word	0x24000f74
 8002814:	240000c8 	.word	0x240000c8
 8002818:	0801c184 	.word	0x0801c184
 800281c:	24000044 	.word	0x24000044
 8002820:	240002b4 	.word	0x240002b4
 8002824:	24001cf4 	.word	0x24001cf4
 8002828:	24001cf5 	.word	0x24001cf5
 800282c:	24001cf8 	.word	0x24001cf8
 8002830:	24001ca8 	.word	0x24001ca8
 8002834:	240020e0 	.word	0x240020e0

08002838 <Idle_init>:
 * stops the DAC, updates the rail monitor, disables all voltages,
 * and yields control to other threads.
 */
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <Idle_init+0xb4>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	2200      	movs	r2, #0
 800284a:	2102      	movs	r1, #2
 800284c:	f016 f9e6 	bl	8018c1c <osEventFlagsWait>

		ERPA_ENABLED = DISABLED;
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <Idle_init+0xb8>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800285e:	2100      	movs	r1, #0
 8002860:	4824      	ldr	r0, [pc, #144]	; (80028f4 <Idle_init+0xbc>)
 8002862:	f011 ff4f 	bl	8014704 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = DISABLED;
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <Idle_init+0xc0>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800286c:	2100      	movs	r1, #0
 800286e:	4823      	ldr	r0, [pc, #140]	; (80028fc <Idle_init+0xc4>)
 8002870:	f005 ff5e 	bl	8008730 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <Idle_init+0xc8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f016 f8bd 	bl	80189f8 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 800287e:	2311      	movs	r3, #17
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e008      	b.n	8002896 <Idle_init+0x5e>
		{
			set_rail_monitor_enable(i, DISABLED);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fe00 	bl	8006490 <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b05      	cmp	r3, #5
 800289a:	dcf3      	bgt.n	8002884 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 800289c:	2308      	movs	r3, #8
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	e012      	b.n	80028c8 <Idle_init+0x90>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <Idle_init+0xcc>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <Idle_init+0xcc>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	4619      	mov	r1, r3
 80028b8:	f00a f9b4 	bl	800cc24 <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80028bc:	2064      	movs	r0, #100	; 0x64
 80028be:	f016 f8dd 	bl	8018a7c <osDelay>
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dae9      	bge.n	80028a2 <Idle_init+0x6a>
		}
		osDelay(IDLE_TO_VOLTAGE_MONITOR_DELAY);
 80028ce:	f640 50ac 	movw	r0, #3500	; 0xdac
 80028d2:	f016 f8d3 	bl	8018a7c <osDelay>
		IDLING = 1;
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <Idle_init+0xd0>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <Idle_init+0xc8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f016 f8aa 	bl	8018a3a <osThreadResume>

		// Yield thread control
		osThreadYield();
 80028e6:	f016 f867 	bl	80189b8 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028ea:	e7a9      	b.n	8002840 <Idle_init+0x8>
 80028ec:	24001cb0 	.word	0x24001cb0
 80028f0:	24001cf5 	.word	0x24001cf5
 80028f4:	240020e0 	.word	0x240020e0
 80028f8:	24001cf4 	.word	0x24001cf4
 80028fc:	240002b4 	.word	0x240002b4
 8002900:	24000f74 	.word	0x24000f74
 8002904:	0801c184 	.word	0x0801c184
 8002908:	240000c8 	.word	0x240000c8

0800290c <Sync_init>:
 * waits for a specific key value to be received, calibrates the RTC,
 * and handles UART communication for error counting and reset cause.
 */
/* USER CODE END Header_Sync_init */
void Sync_init(void *argument)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sync_init */
  /* Infinite loop */
  for(;;)
  {
	  	osEventFlagsWait(mode_event_flags, SYNC_FLAG, osFlagsWaitAny, osWaitForever);
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <Sync_init+0x7c>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	2200      	movs	r2, #0
 800291e:	2104      	movs	r1, #4
 8002920:	f016 f97c 	bl	8018c1c <osEventFlagsWait>
	  	send_ACK();
 8002924:	f001 f8a8 	bl	8003a78 <send_ACK>

	  	uint8_t key;
	  	uint8_t key_index = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	75fb      	strb	r3, [r7, #23]
	  	uint8_t expected_key_value = 0xFF;
 800292c:	23ff      	movs	r3, #255	; 0xff
 800292e:	75bb      	strb	r3, [r7, #22]
	  	uint8_t rtc_buffer_size = 9;
 8002930:	2309      	movs	r3, #9
 8002932:	757b      	strb	r3, [r7, #21]
	  	ERROR_STRUCT reset_cause;

	  	// Wait for 0xFF to be received
	  	HAL_UART_AbortReceive(&huart1);
 8002934:	4815      	ldr	r0, [pc, #84]	; (800298c <Sync_init+0x80>)
 8002936:	f013 faf7 	bl	8015f28 <HAL_UART_AbortReceive>
	  	do
	  	{
	  		HAL_UART_Receive(&huart1, UART_RX_BUFFER, rtc_buffer_size, UART_TIMEOUT_MS);
 800293a:	7d7b      	ldrb	r3, [r7, #21]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2364      	movs	r3, #100	; 0x64
 8002940:	4913      	ldr	r1, [pc, #76]	; (8002990 <Sync_init+0x84>)
 8002942:	4812      	ldr	r0, [pc, #72]	; (800298c <Sync_init+0x80>)
 8002944:	f013 f9db 	bl	8015cfe <HAL_UART_Receive>
	  		key = UART_RX_BUFFER[key_index];
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	4a11      	ldr	r2, [pc, #68]	; (8002990 <Sync_init+0x84>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	753b      	strb	r3, [r7, #20]
	  	} while (key != expected_key_value);
 8002950:	7d3a      	ldrb	r2, [r7, #20]
 8002952:	7dbb      	ldrb	r3, [r7, #22]
 8002954:	429a      	cmp	r2, r3
 8002956:	d1f0      	bne.n	800293a <Sync_init+0x2e>

	  	calibrateRTC(UART_RX_BUFFER);
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <Sync_init+0x84>)
 800295a:	f003 f90d 	bl	8005b78 <calibrateRTC>
	  	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800295e:	2201      	movs	r2, #1
 8002960:	490b      	ldr	r1, [pc, #44]	; (8002990 <Sync_init+0x84>)
 8002962:	480a      	ldr	r0, [pc, #40]	; (800298c <Sync_init+0x80>)
 8002964:	f013 fa94 	bl	8015e90 <HAL_UART_Receive_IT>
	  	osDelay(SYNC_DELAY);
 8002968:	200a      	movs	r0, #10
 800296a:	f016 f887 	bl	8018a7c <osDelay>
	  	reset_cause = get_reset_cause();
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fefe 	bl	8003774 <get_reset_cause>
	  	create_sync_packet(reset_cause);
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002980:	f001 f93a 	bl	8003bf8 <create_sync_packet>
  {
 8002984:	e7c6      	b.n	8002914 <Sync_init+0x8>
 8002986:	bf00      	nop
 8002988:	24001cb0 	.word	0x24001cb0
 800298c:	240021c4 	.word	0x240021c4
 8002990:	24001cb4 	.word	0x24001cb4

08002994 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b0:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ce:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <MX_GPIO_Init+0xe8>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_GPIO_Init+0xe8>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <MX_GPIO_Init+0xe8>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_GPIO_Init+0xe8>)
 8002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <MX_GPIO_Init+0xec>)
 8002a2a:	f00a f8fb 	bl	800cc24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2164      	movs	r1, #100	; 0x64
 8002a32:	4814      	ldr	r0, [pc, #80]	; (8002a84 <MX_GPIO_Init+0xf0>)
 8002a34:	f00a f8f6 	bl	800cc24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a38:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <MX_GPIO_Init+0xec>)
 8002a52:	f009 fe15 	bl	800c680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a56:	2364      	movs	r3, #100	; 0x64
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_GPIO_Init+0xf0>)
 8002a6e:	f009 fe07 	bl	800c680 <HAL_GPIO_Init>

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58020800 	.word	0x58020800
 8002a84:	58020400 	.word	0x58020400

08002a88 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <MX_I2C1_Init+0x7c>)
 8002a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <MX_I2C1_Init+0x80>)
 8002a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac2:	480f      	ldr	r0, [pc, #60]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002ac4:	f00a f8c8 	bl	800cc58 <HAL_I2C_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ace:	f001 f883 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002ad6:	f00c fb67 	bl	800f1a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ae0:	f001 f87a 	bl	8003bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4806      	ldr	r0, [pc, #24]	; (8002b00 <MX_I2C1_Init+0x78>)
 8002ae8:	f00c fba9 	bl	800f23e <HAL_I2CEx_ConfigDigitalFilter>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002af2:	f001 f871 	bl	8003bd8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f00c fbee 	bl	800f2d8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	24001b54 	.word	0x24001b54
 8002b04:	40005400 	.word	0x40005400
 8002b08:	00100517 	.word	0x00100517

08002b0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0ba      	sub	sp, #232	; 0xe8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	22c0      	movs	r2, #192	; 0xc0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f019 f9c7 	bl	801bec0 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_I2C_MspInit+0x1a0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	f040 80b3 	bne.w	8002ca4 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b3e:	f04f 0208 	mov.w	r2, #8
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00d fded 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b60:	f001 f83a 	bl	8003bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b74:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8a:	2312      	movs	r3, #18
 8002b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4842      	ldr	r0, [pc, #264]	; (8002cb4 <HAL_I2C_MspInit+0x1a8>)
 8002baa:	f009 fd69 	bl	800c680 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb4:	4a3e      	ldr	r2, [pc, #248]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_I2C_MspInit+0x1a4>)
 8002bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bce:	4a3b      	ldr	r2, [pc, #236]	; (8002cbc <HAL_I2C_MspInit+0x1b0>)
 8002bd0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bd4:	2222      	movs	r2, #34	; 0x22
 8002bd6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002c00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c0c:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002c0e:	f006 f85b 	bl	8008cc8 <HAL_DMA_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c18:	f000 ffde 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_I2C_MspInit+0x1ac>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <HAL_I2C_MspInit+0x1b8>)
 8002c2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c68:	4815      	ldr	r0, [pc, #84]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c6a:	f006 f82d 	bl	8008cc8 <HAL_DMA_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c74:	f000 ffb0 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_I2C_MspInit+0x1b4>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2105      	movs	r1, #5
 8002c88:	201f      	movs	r0, #31
 8002c8a:	f005 fbde 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c8e:	201f      	movs	r0, #31
 8002c90:	f005 fbf5 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2105      	movs	r1, #5
 8002c98:	2020      	movs	r0, #32
 8002c9a:	f005 fbd6 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c9e:	2020      	movs	r0, #32
 8002ca0:	f005 fbed 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	37e8      	adds	r7, #232	; 0xe8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58020400 	.word	0x58020400
 8002cb8:	24001ba8 	.word	0x24001ba8
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	24001c20 	.word	0x24001c20
 8002cc4:	400200b8 	.word	0x400200b8

08002cc8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_IWDG1_Init+0x34>)
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <MX_IWDG1_Init+0x38>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <MX_IWDG1_Init+0x34>)
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 2499;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_IWDG1_Init+0x34>)
 8002cda:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002cde:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_IWDG1_Init+0x34>)
 8002ce2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002ce6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002ce8:	4804      	ldr	r0, [pc, #16]	; (8002cfc <MX_IWDG1_Init+0x34>)
 8002cea:	f00c fb19 	bl	800f320 <HAL_IWDG_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002cf4:	f000 ff70 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	24001c98 	.word	0x24001c98
 8002d00:	58004800 	.word	0x58004800

08002d04 <__NVIC_SystemReset>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d08:	f3bf 8f4f 	dsb	sy
}
 8002d0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <__NVIC_SystemReset+0x24>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <__NVIC_SystemReset+0x24>)
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_SystemReset+0x28>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1e:	f3bf 8f4f 	dsb	sy
}
 8002d22:	bf00      	nop
    __NOP();
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <__NVIC_SystemReset+0x20>
 8002d28:	e000ed00 	.word	0xe000ed00
 8002d2c:	05fa0004 	.word	0x05fa0004

08002d30 <SetBootloaderFlag>:
/* USER CODE BEGIN 0 */

/**
 * @brief Prepares for system reset and jump to bootloader
 */
void SetBootloaderFlag() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
	__disable_irq();
	*bootloader_flag = BOOTLOADER_FLAG_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SetBootloaderFlag+0x20>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <SetBootloaderFlag+0x24>)
 8002d3e:	601a      	str	r2, [r3, #0]
	HAL_UART_DeInit(&huart1);
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <SetBootloaderFlag+0x28>)
 8002d42:	f012 ff0f 	bl	8015b64 <HAL_UART_DeInit>
	HAL_NVIC_SystemReset();
 8002d46:	f005 fbb6 	bl	80084b6 <HAL_NVIC_SystemReset>
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	24001d00 	.word	0x24001d00
 8002d54:	deadbeef 	.word	0xdeadbeef
 8002d58:	240021c4 	.word	0x240021c4

08002d5c <JumpToBootloader>:

/**
 * @brief Recognizes if we want to jump to the bootloader and does so
 */
void JumpToBootloader(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
	bootloader_flag = (uint32_t*) (&_estack - BOOTLOADER_FLAG_OFFSET); // below top of stack
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <JumpToBootloader+0x58>)
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <JumpToBootloader+0x5c>)
 8002d66:	601a      	str	r2, [r3, #0]
	if (*bootloader_flag == BOOTLOADER_FLAG_VALUE) {
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <JumpToBootloader+0x5c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <JumpToBootloader+0x60>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d116      	bne.n	8002da2 <JumpToBootloader+0x46>
		*bootloader_flag = 0;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <JumpToBootloader+0x5c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
		/* Jump to system memory bootloader */
		JumpAddress = *(__IO uint32_t*) (BOOTLOADER_ADDRESS + 4);
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <JumpToBootloader+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <JumpToBootloader+0x68>)
 8002d82:	6013      	str	r3, [r2, #0]
		JumpToApplication = (pFunction) JumpAddress;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <JumpToBootloader+0x68>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <JumpToBootloader+0x6c>)
 8002d8c:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t*) BOOTLOADER_ADDRESS);
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <JumpToBootloader+0x70>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f383 8808 	msr	MSP, r3
}
 8002d9a:	bf00      	nop
		JumpToApplication();
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <JumpToBootloader+0x6c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4798      	blx	r3
	}
		*bootloader_flag = 0; // So next boot won't be affected
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <JumpToBootloader+0x5c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2407f060 	.word	0x2407f060
 8002db8:	24001d00 	.word	0x24001d00
 8002dbc:	deadbeef 	.word	0xdeadbeef
 8002dc0:	1ff09804 	.word	0x1ff09804
 8002dc4:	24001d08 	.word	0x24001d08
 8002dc8:	24001d04 	.word	0x24001d04
 8002dcc:	1ff09800 	.word	0x1ff09800

08002dd0 <HAL_FLASHEx_EccCorrectionCallback>:
/**
 * @brief Callback function for handling ECC correction in flash memory.
 *        Detects and handles single-bit flash ECC errors.
 */
void HAL_FLASHEx_EccCorrectionCallback()
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	703b      	strb	r3, [r7, #0]
	error.detail = ED_single_bit_error_flash;
 8002dda:	2318      	movs	r3, #24
 8002ddc:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002dde:	463b      	mov	r3, r7
 8002de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002de4:	f7ff f8ac 	bl	8001f40 <handle_error>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_FLASHEx_EccDetectionCallback>:
/**
 * @brief Callback function for handling ECC detection in flash memory.
 *        Detects and handles double-bit flash ECC errors.
 */
void HAL_FLASHEx_EccDetectionCallback()
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002df6:	2301      	movs	r3, #1
 8002df8:	703b      	strb	r3, [r7, #0]
	error.detail = ED_double_bit_error_flash;
 8002dfa:	2319      	movs	r3, #25
 8002dfc:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e04:	f7ff f89c 	bl	8001f40 <handle_error>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_OC_DelayElapsedCallback>:
 *        Sets event flags based on the triggered timer and manages housekeeping tasks.
 *
 * @param htim Pointer to the timer handle triggering the callback.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d106      	bne.n	8002e2e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f015 fe82 	bl	8018b30 <osEventFlagsSet>
	}
	else
	{
		// Unknown timer interrupt
	}
}
 8002e2c:	e02e      	b.n	8002e8c <HAL_TIM_OC_DelayElapsedCallback+0x7c>
	else if (htim == &htim2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d12a      	bne.n	8002e8c <HAL_TIM_OC_DelayElapsedCallback+0x7c>
		if (ERPA_ENABLED)
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f015 fe72 	bl	8018b30 <osEventFlagsSet>
		if (HK_100_ms_counter == HK_100MS_COUNTER_MAX)
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d113      	bne.n	8002e7e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG);
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f015 fe67 	bl	8018b30 <osEventFlagsSet>
			if (HK_ENABLED)
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG);
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2104      	movs	r1, #4
 8002e72:	4618      	mov	r0, r3
 8002e74:	f015 fe5c 	bl	8018b30 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002e8a:	701a      	strb	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	240020e0 	.word	0x240020e0
 8002e98:	24001ca8 	.word	0x24001ca8
 8002e9c:	2400212c 	.word	0x2400212c
 8002ea0:	24001cf5 	.word	0x24001cf5
 8002ea4:	24001cfc 	.word	0x24001cfc
 8002ea8:	24001cac 	.word	0x24001cac
 8002eac:	24001cf4 	.word	0x24001cf4

08002eb0 <HAL_UART_RxCpltCallback>:
 *        Processes received commands to control GPIO pins and manage power rails.
 *
 * @param huart Pointer to the UART handle triggering the callback.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b091      	sub	sp, #68	; 0x44
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	49fa      	ldr	r1, [pc, #1000]	; (80032a4 <HAL_UART_RxCpltCallback+0x3f4>)
 8002ebc:	48fa      	ldr	r0, [pc, #1000]	; (80032a8 <HAL_UART_RxCpltCallback+0x3f8>)
 8002ebe:	f012 ffe7 	bl	8015e90 <HAL_UART_Receive_IT>
	uint8_t key_index = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	unsigned char key = UART_RX_BUFFER[key_index];
 8002ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ecc:	4af5      	ldr	r2, [pc, #980]	; (80032a4 <HAL_UART_RxCpltCallback+0x3f4>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	switch (key)
 8002ed4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ed8:	2bef      	cmp	r3, #239	; 0xef
 8002eda:	f200 842f 	bhi.w	800373c <HAL_UART_RxCpltCallback+0x88c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_UART_RxCpltCallback+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	080032bb 	.word	0x080032bb
 8002ee8:	080032df 	.word	0x080032df
 8002eec:	08003343 	.word	0x08003343
 8002ef0:	08003371 	.word	0x08003371
 8002ef4:	0800339d 	.word	0x0800339d
 8002ef8:	080033cb 	.word	0x080033cb
 8002efc:	080033fb 	.word	0x080033fb
 8002f00:	0800342b 	.word	0x0800342b
 8002f04:	08003459 	.word	0x08003459
 8002f08:	08003481 	.word	0x08003481
 8002f0c:	080034a9 	.word	0x080034a9
 8002f10:	080034cf 	.word	0x080034cf
 8002f14:	080034ed 	.word	0x080034ed
 8002f18:	08003531 	.word	0x08003531
 8002f1c:	080035bd 	.word	0x080035bd
 8002f20:	080035e1 	.word	0x080035e1
 8002f24:	080032ad 	.word	0x080032ad
 8002f28:	080032c9 	.word	0x080032c9
 8002f2c:	0800332b 	.word	0x0800332b
 8002f30:	0800335b 	.word	0x0800335b
 8002f34:	08003387 	.word	0x08003387
 8002f38:	080033b3 	.word	0x080033b3
 8002f3c:	080033e3 	.word	0x080033e3
 8002f40:	08003413 	.word	0x08003413
 8002f44:	08003443 	.word	0x08003443
 8002f48:	0800346f 	.word	0x0800346f
 8002f4c:	0800348b 	.word	0x0800348b
 8002f50:	080034b9 	.word	0x080034b9
 8002f54:	080034d9 	.word	0x080034d9
 8002f58:	080034f5 	.word	0x080034f5
 8002f5c:	0800356d 	.word	0x0800356d
 8002f60:	08003641 	.word	0x08003641
 8002f64:	0800373d 	.word	0x0800373d
 8002f68:	0800373d 	.word	0x0800373d
 8002f6c:	0800373d 	.word	0x0800373d
 8002f70:	0800373d 	.word	0x0800373d
 8002f74:	0800373d 	.word	0x0800373d
 8002f78:	0800373d 	.word	0x0800373d
 8002f7c:	0800373d 	.word	0x0800373d
 8002f80:	0800373d 	.word	0x0800373d
 8002f84:	0800373d 	.word	0x0800373d
 8002f88:	0800373d 	.word	0x0800373d
 8002f8c:	08003723 	.word	0x08003723
 8002f90:	0800373d 	.word	0x0800373d
 8002f94:	0800373d 	.word	0x0800373d
 8002f98:	0800373d 	.word	0x0800373d
 8002f9c:	0800373d 	.word	0x0800373d
 8002fa0:	08003667 	.word	0x08003667
 8002fa4:	0800373d 	.word	0x0800373d
 8002fa8:	0800373d 	.word	0x0800373d
 8002fac:	0800373d 	.word	0x0800373d
 8002fb0:	0800373d 	.word	0x0800373d
 8002fb4:	0800373d 	.word	0x0800373d
 8002fb8:	0800373d 	.word	0x0800373d
 8002fbc:	0800373d 	.word	0x0800373d
 8002fc0:	0800373d 	.word	0x0800373d
 8002fc4:	0800373d 	.word	0x0800373d
 8002fc8:	0800373d 	.word	0x0800373d
 8002fcc:	0800373d 	.word	0x0800373d
 8002fd0:	0800373d 	.word	0x0800373d
 8002fd4:	0800373d 	.word	0x0800373d
 8002fd8:	0800373d 	.word	0x0800373d
 8002fdc:	0800373d 	.word	0x0800373d
 8002fe0:	08003647 	.word	0x08003647
 8002fe4:	0800373d 	.word	0x0800373d
 8002fe8:	0800373d 	.word	0x0800373d
 8002fec:	0800373d 	.word	0x0800373d
 8002ff0:	0800373d 	.word	0x0800373d
 8002ff4:	0800373d 	.word	0x0800373d
 8002ff8:	0800373d 	.word	0x0800373d
 8002ffc:	0800373d 	.word	0x0800373d
 8003000:	0800373d 	.word	0x0800373d
 8003004:	0800373d 	.word	0x0800373d
 8003008:	0800373d 	.word	0x0800373d
 800300c:	0800373d 	.word	0x0800373d
 8003010:	0800373d 	.word	0x0800373d
 8003014:	0800373d 	.word	0x0800373d
 8003018:	0800373d 	.word	0x0800373d
 800301c:	0800373d 	.word	0x0800373d
 8003020:	0800373d 	.word	0x0800373d
 8003024:	0800373d 	.word	0x0800373d
 8003028:	0800373d 	.word	0x0800373d
 800302c:	0800373d 	.word	0x0800373d
 8003030:	0800373d 	.word	0x0800373d
 8003034:	0800373d 	.word	0x0800373d
 8003038:	0800373d 	.word	0x0800373d
 800303c:	0800373d 	.word	0x0800373d
 8003040:	0800373d 	.word	0x0800373d
 8003044:	0800373d 	.word	0x0800373d
 8003048:	0800373d 	.word	0x0800373d
 800304c:	0800373d 	.word	0x0800373d
 8003050:	0800373d 	.word	0x0800373d
 8003054:	0800373d 	.word	0x0800373d
 8003058:	0800373d 	.word	0x0800373d
 800305c:	0800373d 	.word	0x0800373d
 8003060:	0800373d 	.word	0x0800373d
 8003064:	0800373d 	.word	0x0800373d
 8003068:	0800373d 	.word	0x0800373d
 800306c:	0800373d 	.word	0x0800373d
 8003070:	0800373d 	.word	0x0800373d
 8003074:	0800373d 	.word	0x0800373d
 8003078:	0800373d 	.word	0x0800373d
 800307c:	0800373d 	.word	0x0800373d
 8003080:	0800373d 	.word	0x0800373d
 8003084:	0800373d 	.word	0x0800373d
 8003088:	0800373d 	.word	0x0800373d
 800308c:	0800373d 	.word	0x0800373d
 8003090:	0800373d 	.word	0x0800373d
 8003094:	0800373d 	.word	0x0800373d
 8003098:	0800373d 	.word	0x0800373d
 800309c:	0800373d 	.word	0x0800373d
 80030a0:	0800373d 	.word	0x0800373d
 80030a4:	0800373d 	.word	0x0800373d
 80030a8:	0800373d 	.word	0x0800373d
 80030ac:	0800373d 	.word	0x0800373d
 80030b0:	0800373d 	.word	0x0800373d
 80030b4:	0800373d 	.word	0x0800373d
 80030b8:	0800373d 	.word	0x0800373d
 80030bc:	0800373d 	.word	0x0800373d
 80030c0:	0800373d 	.word	0x0800373d
 80030c4:	0800373d 	.word	0x0800373d
 80030c8:	0800373d 	.word	0x0800373d
 80030cc:	0800373d 	.word	0x0800373d
 80030d0:	0800373d 	.word	0x0800373d
 80030d4:	0800373d 	.word	0x0800373d
 80030d8:	0800373d 	.word	0x0800373d
 80030dc:	0800373d 	.word	0x0800373d
 80030e0:	0800373d 	.word	0x0800373d
 80030e4:	0800373d 	.word	0x0800373d
 80030e8:	0800373d 	.word	0x0800373d
 80030ec:	0800373d 	.word	0x0800373d
 80030f0:	0800373d 	.word	0x0800373d
 80030f4:	0800373d 	.word	0x0800373d
 80030f8:	0800373d 	.word	0x0800373d
 80030fc:	0800373d 	.word	0x0800373d
 8003100:	0800373d 	.word	0x0800373d
 8003104:	0800373d 	.word	0x0800373d
 8003108:	0800373d 	.word	0x0800373d
 800310c:	0800373d 	.word	0x0800373d
 8003110:	0800373d 	.word	0x0800373d
 8003114:	0800373d 	.word	0x0800373d
 8003118:	0800373d 	.word	0x0800373d
 800311c:	0800373d 	.word	0x0800373d
 8003120:	0800373d 	.word	0x0800373d
 8003124:	0800373d 	.word	0x0800373d
 8003128:	0800373d 	.word	0x0800373d
 800312c:	0800373d 	.word	0x0800373d
 8003130:	0800373d 	.word	0x0800373d
 8003134:	0800373d 	.word	0x0800373d
 8003138:	0800373d 	.word	0x0800373d
 800313c:	0800373d 	.word	0x0800373d
 8003140:	0800373d 	.word	0x0800373d
 8003144:	0800373d 	.word	0x0800373d
 8003148:	0800373d 	.word	0x0800373d
 800314c:	0800373d 	.word	0x0800373d
 8003150:	0800373d 	.word	0x0800373d
 8003154:	0800373d 	.word	0x0800373d
 8003158:	0800373d 	.word	0x0800373d
 800315c:	0800373d 	.word	0x0800373d
 8003160:	0800373d 	.word	0x0800373d
 8003164:	0800373d 	.word	0x0800373d
 8003168:	0800373d 	.word	0x0800373d
 800316c:	0800373d 	.word	0x0800373d
 8003170:	0800373d 	.word	0x0800373d
 8003174:	0800373d 	.word	0x0800373d
 8003178:	0800373d 	.word	0x0800373d
 800317c:	0800373d 	.word	0x0800373d
 8003180:	0800373d 	.word	0x0800373d
 8003184:	0800373d 	.word	0x0800373d
 8003188:	0800373d 	.word	0x0800373d
 800318c:	0800373d 	.word	0x0800373d
 8003190:	0800373d 	.word	0x0800373d
 8003194:	0800373d 	.word	0x0800373d
 8003198:	0800373d 	.word	0x0800373d
 800319c:	0800373d 	.word	0x0800373d
 80031a0:	0800360b 	.word	0x0800360b
 80031a4:	0800373d 	.word	0x0800373d
 80031a8:	0800373d 	.word	0x0800373d
 80031ac:	0800373d 	.word	0x0800373d
 80031b0:	0800373d 	.word	0x0800373d
 80031b4:	0800373d 	.word	0x0800373d
 80031b8:	0800373d 	.word	0x0800373d
 80031bc:	0800373d 	.word	0x0800373d
 80031c0:	0800373d 	.word	0x0800373d
 80031c4:	0800373d 	.word	0x0800373d
 80031c8:	0800373d 	.word	0x0800373d
 80031cc:	0800373d 	.word	0x0800373d
 80031d0:	0800373d 	.word	0x0800373d
 80031d4:	0800373d 	.word	0x0800373d
 80031d8:	0800373d 	.word	0x0800373d
 80031dc:	0800373d 	.word	0x0800373d
 80031e0:	08003619 	.word	0x08003619
 80031e4:	0800373d 	.word	0x0800373d
 80031e8:	0800373d 	.word	0x0800373d
 80031ec:	0800373d 	.word	0x0800373d
 80031f0:	0800373d 	.word	0x0800373d
 80031f4:	0800373d 	.word	0x0800373d
 80031f8:	0800373d 	.word	0x0800373d
 80031fc:	0800373d 	.word	0x0800373d
 8003200:	0800373d 	.word	0x0800373d
 8003204:	0800373d 	.word	0x0800373d
 8003208:	0800373d 	.word	0x0800373d
 800320c:	0800373d 	.word	0x0800373d
 8003210:	0800373d 	.word	0x0800373d
 8003214:	0800373d 	.word	0x0800373d
 8003218:	0800373d 	.word	0x0800373d
 800321c:	0800373d 	.word	0x0800373d
 8003220:	08003627 	.word	0x08003627
 8003224:	080035fd 	.word	0x080035fd
 8003228:	0800373d 	.word	0x0800373d
 800322c:	0800373d 	.word	0x0800373d
 8003230:	0800373d 	.word	0x0800373d
 8003234:	0800373d 	.word	0x0800373d
 8003238:	0800373d 	.word	0x0800373d
 800323c:	0800373d 	.word	0x0800373d
 8003240:	0800373d 	.word	0x0800373d
 8003244:	0800373d 	.word	0x0800373d
 8003248:	0800373d 	.word	0x0800373d
 800324c:	0800373d 	.word	0x0800373d
 8003250:	0800373d 	.word	0x0800373d
 8003254:	0800373d 	.word	0x0800373d
 8003258:	0800373d 	.word	0x0800373d
 800325c:	0800373d 	.word	0x0800373d
 8003260:	08003635 	.word	0x08003635
 8003264:	080035ef 	.word	0x080035ef
 8003268:	0800373d 	.word	0x0800373d
 800326c:	0800373d 	.word	0x0800373d
 8003270:	0800373d 	.word	0x0800373d
 8003274:	0800373d 	.word	0x0800373d
 8003278:	0800373d 	.word	0x0800373d
 800327c:	0800373d 	.word	0x0800373d
 8003280:	0800373d 	.word	0x0800373d
 8003284:	0800373d 	.word	0x0800373d
 8003288:	0800373d 	.word	0x0800373d
 800328c:	0800373d 	.word	0x0800373d
 8003290:	0800373d 	.word	0x0800373d
 8003294:	0800373d 	.word	0x0800373d
 8003298:	0800373d 	.word	0x0800373d
 800329c:	0800373d 	.word	0x0800373d
 80032a0:	0800363b 	.word	0x0800363b
 80032a4:	24001cb4 	.word	0x24001cb4
 80032a8:	240021c4 	.word	0x240021c4
	{
	case CMD_SDN1_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_SET);
 80032ac:	4bb8      	ldr	r3, [pc, #736]	; (8003590 <HAL_UART_RxCpltCallback+0x6e0>)
 80032ae:	2104      	movs	r1, #4
 80032b0:	2201      	movs	r2, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f009 fcb6 	bl	800cc24 <HAL_GPIO_WritePin>
		break;
 80032b8:	e249      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SDN1_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_RESET);
 80032ba:	4bb5      	ldr	r3, [pc, #724]	; (8003590 <HAL_UART_RxCpltCallback+0x6e0>)
 80032bc:	2104      	movs	r1, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f009 fcaf 	bl	800cc24 <HAL_GPIO_WritePin>
		break;
 80032c6:	e242      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SYS_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SYS].gpio, gpios[GPIOS_INDEX_SYS].pin, GPIO_PIN_SET);
 80032c8:	4bb1      	ldr	r3, [pc, #708]	; (8003590 <HAL_UART_RxCpltCallback+0x6e0>)
 80032ca:	2120      	movs	r1, #32
 80032cc:	2201      	movs	r2, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f009 fca8 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, ENABLED);
 80032d4:	2101      	movs	r1, #1
 80032d6:	2008      	movs	r0, #8
 80032d8:	f003 f8da 	bl	8006490 <set_rail_monitor_enable>
		break;
 80032dc:	e237      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SYS_OFF:
	{
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 80032de:	2308      	movs	r3, #8
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
 80032e2:	e00f      	b.n	8003304 <HAL_UART_RxCpltCallback+0x454>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80032e4:	4aab      	ldr	r2, [pc, #684]	; (8003594 <HAL_UART_RxCpltCallback+0x6e4>)
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80032ec:	4aa9      	ldr	r2, [pc, #676]	; (8003594 <HAL_UART_RxCpltCallback+0x6e4>)
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	889b      	ldrh	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	4619      	mov	r1, r3
 80032fa:	f009 fc93 	bl	800cc24 <HAL_GPIO_WritePin>
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	3b01      	subs	r3, #1
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	2b00      	cmp	r3, #0
 8003308:	dcec      	bgt.n	80032e4 <HAL_UART_RxCpltCallback+0x434>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 800330a:	2310      	movs	r3, #16
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	e008      	b.n	8003322 <HAL_UART_RxCpltCallback+0x472>
		{
			set_rail_monitor_enable(i, DISABLED);
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f003 f8ba 	bl	8006490 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	3b01      	subs	r3, #1
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	2b07      	cmp	r3, #7
 8003326:	dcf3      	bgt.n	8003310 <HAL_UART_RxCpltCallback+0x460>
		}
		break;
 8003328:	e211      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_SET);
 800332a:	4b9b      	ldr	r3, [pc, #620]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 800332c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003330:	2201      	movs	r2, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f009 fc76 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, ENABLED);
 8003338:	2101      	movs	r1, #1
 800333a:	2009      	movs	r0, #9
 800333c:	f003 f8a8 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003340:	e205      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_RESET);
 8003342:	4b95      	ldr	r3, [pc, #596]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 8003344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003348:	2200      	movs	r2, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f009 fc6a 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, DISABLED);
 8003350:	2100      	movs	r1, #0
 8003352:	2009      	movs	r0, #9
 8003354:	f003 f89c 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003358:	e1f9      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_SET);
 800335a:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	2201      	movs	r2, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f009 fc5f 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, ENABLED);
 8003366:	2101      	movs	r1, #1
 8003368:	200a      	movs	r0, #10
 800336a:	f003 f891 	bl	8006490 <set_rail_monitor_enable>
		break;
 800336e:	e1ee      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_RESET);
 8003370:	4b89      	ldr	r3, [pc, #548]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	2200      	movs	r2, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f009 fc54 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, DISABLED);
 800337c:	2100      	movs	r1, #0
 800337e:	200a      	movs	r0, #10
 8003380:	f003 f886 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003384:	e1e3      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_SET);
 8003386:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	2201      	movs	r2, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f009 fc49 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, ENABLED);
 8003392:	2101      	movs	r1, #1
 8003394:	200b      	movs	r0, #11
 8003396:	f003 f87b 	bl	8006490 <set_rail_monitor_enable>
		break;
 800339a:	e1d8      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_RESET);
 800339c:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	2200      	movs	r2, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f009 fc3e 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, DISABLED);
 80033a8:	2100      	movs	r1, #0
 80033aa:	200b      	movs	r0, #11
 80033ac:	f003 f870 	bl	8006490 <set_rail_monitor_enable>
		break;
 80033b0:	e1cd      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_SET);
 80033b2:	4b79      	ldr	r3, [pc, #484]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 80033b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b8:	2201      	movs	r2, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f009 fc32 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, ENABLED);
 80033c0:	2101      	movs	r1, #1
 80033c2:	200c      	movs	r0, #12
 80033c4:	f003 f864 	bl	8006490 <set_rail_monitor_enable>
		break;
 80033c8:	e1c1      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_RESET);
 80033ca:	4b73      	ldr	r3, [pc, #460]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 80033cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d0:	2200      	movs	r2, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f009 fc26 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, DISABLED);
 80033d8:	2100      	movs	r1, #0
 80033da:	200c      	movs	r0, #12
 80033dc:	f003 f858 	bl	8006490 <set_rail_monitor_enable>
		break;
 80033e0:	e1b5      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_15V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_SET);
 80033e2:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 80033e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e8:	2201      	movs	r2, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f009 fc1a 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, ENABLED);
 80033f0:	2101      	movs	r1, #1
 80033f2:	200d      	movs	r0, #13
 80033f4:	f003 f84c 	bl	8006490 <set_rail_monitor_enable>
		break;
 80033f8:	e1a9      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_15V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_RESET);
 80033fa:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 80033fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003400:	2200      	movs	r2, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f009 fc0e 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, DISABLED);
 8003408:	2100      	movs	r1, #0
 800340a:	200d      	movs	r0, #13
 800340c:	f003 f840 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003410:	e19d      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N200V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_SET);
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 8003414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003418:	2201      	movs	r2, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f009 fc02 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, ENABLED);
 8003420:	2101      	movs	r1, #1
 8003422:	200f      	movs	r0, #15
 8003424:	f003 f834 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003428:	e191      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N200V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_RESET);
 800342a:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <HAL_UART_RxCpltCallback+0x6e8>)
 800342c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003430:	2200      	movs	r2, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f009 fbf6 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, DISABLED);
 8003438:	2100      	movs	r1, #0
 800343a:	200f      	movs	r0, #15
 800343c:	f003 f828 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003440:	e185      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N800V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_SET);
 8003442:	4b53      	ldr	r3, [pc, #332]	; (8003590 <HAL_UART_RxCpltCallback+0x6e0>)
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	2201      	movs	r2, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f009 fbeb 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, ENABLED);
 800344e:	2101      	movs	r1, #1
 8003450:	2010      	movs	r0, #16
 8003452:	f003 f81d 	bl	8006490 <set_rail_monitor_enable>
		break;
 8003456:	e17a      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_N800V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_RESET);
 8003458:	4b4d      	ldr	r3, [pc, #308]	; (8003590 <HAL_UART_RxCpltCallback+0x6e0>)
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	2200      	movs	r2, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f009 fbe0 	bl	800cc24 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, DISABLED);
 8003464:	2100      	movs	r1, #0
 8003466:	2010      	movs	r0, #16
 8003468:	f003 f812 	bl	8006490 <set_rail_monitor_enable>
		break;
 800346c:	e16f      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_AUTOSWEEP_ON:
	{
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2320      	movs	r3, #32
 8003474:	4a49      	ldr	r2, [pc, #292]	; (800359c <HAL_UART_RxCpltCallback+0x6ec>)
 8003476:	2100      	movs	r1, #0
 8003478:	4849      	ldr	r0, [pc, #292]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 800347a:	f005 f899 	bl	80085b0 <HAL_DAC_Start_DMA>
		break;
 800347e:	e166      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_AUTOSWEEP_OFF:
	{
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003480:	2100      	movs	r1, #0
 8003482:	4847      	ldr	r0, [pc, #284]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 8003484:	f005 f954 	bl	8008730 <HAL_DAC_Stop_DMA>
		break;
 8003488:	e161      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_ERPA_ON:
	{
		osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 800348a:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <HAL_UART_RxCpltCallback+0x6f4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f015 fb4d 	bl	8018b30 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 8003496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800349a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = ENABLED;
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_UART_RxCpltCallback+0x6f8>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
		break;
 80034a6:	e152      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_ERPA_OFF:
	{
		ERPA_ENABLED = DISABLED;
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_UART_RxCpltCallback+0x6f8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80034ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80034b6:	e14a      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_PMT_ON:
	{
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80034b8:	2100      	movs	r1, #0
 80034ba:	483c      	ldr	r0, [pc, #240]	; (80035ac <HAL_UART_RxCpltCallback+0x6fc>)
 80034bc:	f010 ffc8 	bl	8014450 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 80034c0:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_UART_RxCpltCallback+0x6f4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f015 fb32 	bl	8018b30 <osEventFlagsSet>
		break;
 80034cc:	e13f      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_PMT_OFF:
	{
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80034ce:	2100      	movs	r1, #0
 80034d0:	4836      	ldr	r0, [pc, #216]	; (80035ac <HAL_UART_RxCpltCallback+0x6fc>)
 80034d2:	f011 f917 	bl	8014704 <HAL_TIM_OC_Stop_IT>
		break;
 80034d6:	e13a      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_HK_ON:
	{
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_UART_RxCpltCallback+0x6f4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2104      	movs	r1, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f015 fb26 	bl	8018b30 <osEventFlagsSet>
		HK_ENABLED = ENABLED;
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_UART_RxCpltCallback+0x700>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
		break;
 80034ea:	e130      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_HK_OFF:
	{
		HK_ENABLED = DISABLED;
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_UART_RxCpltCallback+0x700>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
		break;
 80034f2:	e12c      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_STEP_UP:
	{
		if (step < 14)
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b0d      	cmp	r3, #13
 80034fc:	f200 8120 	bhi.w	8003740 <HAL_UART_RxCpltCallback+0x890>
		{
			step += 2;
 8003500:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3302      	adds	r3, #2
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 800350c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <HAL_UART_RxCpltCallback+0x6ec>)
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	481f      	ldr	r0, [pc, #124]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 8003522:	f005 f9a8 	bl	8008876 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003526:	2100      	movs	r1, #0
 8003528:	481d      	ldr	r0, [pc, #116]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 800352a:	f004 ffea 	bl	8008502 <HAL_DAC_Start>
		}
		break;
 800352e:	e107      	b.n	8003740 <HAL_UART_RxCpltCallback+0x890>
	}

	case CMD_STEP_DOWN:
	{
		if (step > 1)
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	f240 8104 	bls.w	8003744 <HAL_UART_RxCpltCallback+0x894>
		{
			step -= 2;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3b02      	subs	r3, #2
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 8003548:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_UART_RxCpltCallback+0x704>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_UART_RxCpltCallback+0x6ec>)
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	4810      	ldr	r0, [pc, #64]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 800355e:	f005 f98a 	bl	8008876 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003562:	2100      	movs	r1, #0
 8003564:	480e      	ldr	r0, [pc, #56]	; (80035a0 <HAL_UART_RxCpltCallback+0x6f0>)
 8003566:	f004 ffcc 	bl	8008502 <HAL_DAC_Start>
		}
		break;
 800356a:	e0eb      	b.n	8003744 <HAL_UART_RxCpltCallback+0x894>
	}

	case CMD_FACTOR_UP:
	{
		if (cadence <= 50000)
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_UART_RxCpltCallback+0x708>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003574:	4293      	cmp	r3, r2
 8003576:	f200 80e7 	bhi.w	8003748 <HAL_UART_RxCpltCallback+0x898>
		{
			cadence *= 2;
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_UART_RxCpltCallback+0x708>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_UART_RxCpltCallback+0x708>)
 8003582:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_UART_RxCpltCallback+0x708>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800358e:	e0db      	b.n	8003748 <HAL_UART_RxCpltCallback+0x898>
 8003590:	58020400 	.word	0x58020400
 8003594:	0801c184 	.word	0x0801c184
 8003598:	58020800 	.word	0x58020800
 800359c:	24000044 	.word	0x24000044
 80035a0:	240002b4 	.word	0x240002b4
 80035a4:	24001ca8 	.word	0x24001ca8
 80035a8:	24001cf5 	.word	0x24001cf5
 80035ac:	240020e0 	.word	0x240020e0
 80035b0:	24001cf4 	.word	0x24001cf4
 80035b4:	24001cf6 	.word	0x24001cf6
 80035b8:	240000c4 	.word	0x240000c4
	}

	case CMD_FACTOR_DOWN:
	{
		if (cadence >= 6250)
 80035bc:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_UART_RxCpltCallback+0x8a8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f641 0269 	movw	r2, #6249	; 0x1869
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f240 80c1 	bls.w	800374c <HAL_UART_RxCpltCallback+0x89c>
		{
			cadence /= 2;
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_UART_RxCpltCallback+0x8a8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	4a61      	ldr	r2, [pc, #388]	; (8003758 <HAL_UART_RxCpltCallback+0x8a8>)
 80035d2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80035d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035d8:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <HAL_UART_RxCpltCallback+0x8a8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035de:	e0b5      	b.n	800374c <HAL_UART_RxCpltCallback+0x89c>
	}

	case CMD_ENTER_STOP:
	{
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80035e0:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_UART_RxCpltCallback+0x8ac>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f015 faa2 	bl	8018b30 <osEventFlagsSet>
		break;
 80035ec:	e0af      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_AUTO_INIT:
	{
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80035ee:	4b5b      	ldr	r3, [pc, #364]	; (800375c <HAL_UART_RxCpltCallback+0x8ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2104      	movs	r1, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f015 fa9b 	bl	8018b30 <osEventFlagsSet>
		break;
 80035fa:	e0a8      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_AUTO_DEINIT:
	{
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_UART_RxCpltCallback+0x8ac>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2108      	movs	r1, #8
 8003602:	4618      	mov	r0, r3
 8003604:	f015 fa94 	bl	8018b30 <osEventFlagsSet>
		break;
 8003608:	e0a1      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SYNC_MODE:
	{
		osEventFlagsSet(mode_event_flags, SYNC_FLAG);
 800360a:	4b55      	ldr	r3, [pc, #340]	; (8003760 <HAL_UART_RxCpltCallback+0x8b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2104      	movs	r1, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f015 fa8d 	bl	8018b30 <osEventFlagsSet>
		break;
 8003616:	e09a      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SCIENCE_MODE:
	{
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003618:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_UART_RxCpltCallback+0x8b0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f015 fa86 	bl	8018b30 <osEventFlagsSet>
		break;
 8003624:	e093      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_IDLE_MODE:
	{
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003626:	4b4e      	ldr	r3, [pc, #312]	; (8003760 <HAL_UART_RxCpltCallback+0x8b0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f015 fa7f 	bl	8018b30 <osEventFlagsSet>
		break;
 8003632:	e08c      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_RESET_ERROR_COUNTERS:
	{
		reset_error_counters();
 8003634:	f7fe fd72 	bl	800211c <reset_error_counters>
		break;
 8003638:	e089      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SEND_PREVIOUS_ERROR:
	{
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 800363a:	f7fe fde7 	bl	800220c <send_previous_error_packet>
#endif
		break;
 800363e:	e086      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_SEND_VERSION_PACKET:
	{
		create_version_packet();
 8003640:	f000 fc88 	bl	8003f54 <create_version_packet>
		break;
 8003644:	e083      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	case CMD_SEND_VERSION_INFO:
	{
		// Ensure the GIT_INFO macro is defined
		#ifdef GIT_INFO_PRESENT
			// Transmit the version information via UART
			HAL_UART_Transmit(&huart1, (uint8_t*)GIT_INFO, strlen(GIT_INFO), HAL_MAX_DELAY);
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_UART_RxCpltCallback+0x8b4>)
 8003648:	681c      	ldr	r4, [r3, #0]
 800364a:	4b46      	ldr	r3, [pc, #280]	; (8003764 <HAL_UART_RxCpltCallback+0x8b4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc fe46 	bl	80002e0 <strlen>
 8003654:	4603      	mov	r3, r0
 8003656:	b29a      	uxth	r2, r3
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	4621      	mov	r1, r4
 800365e:	4842      	ldr	r0, [pc, #264]	; (8003768 <HAL_UART_RxCpltCallback+0x8b8>)
 8003660:	f012 fabf 	bl	8015be2 <HAL_UART_Transmit>
		#else
			// Transmit a fallback message if version information is unavailable
			const char* fallback_message = "Version information unavailable.\r\n";
			HAL_UART_Transmit(&huart1, (uint8_t*)fallback_message, strlen(fallback_message), HAL_MAX_DELAY);
		#endif
		break;
 8003664:	e073      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>

	case CMD_SEND_VERSION_NUMBERING:
	{
		char version_message[16];
		// Format the version as "v1.x.x"
		strcpy(version_message, "v");       // Start with 'v'
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	2276      	movs	r2, #118	; 0x76
 800366c:	801a      	strh	r2, [r3, #0]
		char major[4], minor[4], patch[4];  // Buffers for numbers

		// Convert integers to strings manually
		major[0] = V_MAJOR + '0'; major[1] = '\0';  // Convert number to string
 800366e:	2331      	movs	r3, #49	; 0x31
 8003670:	763b      	strb	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	767b      	strb	r3, [r7, #25]
		minor[0] = V_MINOR + '0'; minor[1] = '\0';
 8003676:	2330      	movs	r3, #48	; 0x30
 8003678:	753b      	strb	r3, [r7, #20]
 800367a:	2300      	movs	r3, #0
 800367c:	757b      	strb	r3, [r7, #21]
		patch[0] = V_PATCH + '0'; patch[1] = '\0';
 800367e:	2330      	movs	r3, #48	; 0x30
 8003680:	743b      	strb	r3, [r7, #16]
 8003682:	2300      	movs	r3, #0
 8003684:	747b      	strb	r3, [r7, #17]

		strcat(version_message, major); // Append major version
 8003686:	f107 0218 	add.w	r2, r7, #24
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f018 fc1d 	bl	801bed0 <strcat>
		strcat(version_message, ".");   // Append dot
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc fe20 	bl	80002e0 <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	4413      	add	r3, r2
 80036aa:	4930      	ldr	r1, [pc, #192]	; (800376c <HAL_UART_RxCpltCallback+0x8bc>)
 80036ac:	461a      	mov	r2, r3
 80036ae:	460b      	mov	r3, r1
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	8013      	strh	r3, [r2, #0]
		strcat(version_message, minor); // Append minor version
 80036b4:	f107 0214 	add.w	r2, r7, #20
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f018 fc06 	bl	801bed0 <strcat>
		strcat(version_message, ".");   // Append dot
 80036c4:	f107 031c 	add.w	r3, r7, #28
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc fe09 	bl	80002e0 <strlen>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	4413      	add	r3, r2
 80036d8:	4924      	ldr	r1, [pc, #144]	; (800376c <HAL_UART_RxCpltCallback+0x8bc>)
 80036da:	461a      	mov	r2, r3
 80036dc:	460b      	mov	r3, r1
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	8013      	strh	r3, [r2, #0]
		strcat(version_message, patch); // Append patch version
 80036e2:	f107 0210 	add.w	r2, r7, #16
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f018 fbef 	bl	801bed0 <strcat>
		strcat(version_message, "\r\n"); // Append carriage return and newline
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fdf2 	bl	80002e0 <strlen>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4413      	add	r3, r2
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_UART_RxCpltCallback+0x8c0>)
 8003708:	8811      	ldrh	r1, [r2, #0]
 800370a:	7892      	ldrb	r2, [r2, #2]
 800370c:	8019      	strh	r1, [r3, #0]
 800370e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*)version_message, 8, HAL_MAX_DELAY);
 8003710:	f107 011c 	add.w	r1, r7, #28
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	2208      	movs	r2, #8
 800371a:	4813      	ldr	r0, [pc, #76]	; (8003768 <HAL_UART_RxCpltCallback+0x8b8>)
 800371c:	f012 fa61 	bl	8015be2 <HAL_UART_Transmit>
		break;
 8003720:	e015      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	case CMD_UPDATE_FIRMWARE:
	{
		uint8_t msg = 0x79;
 8003722:	2379      	movs	r3, #121	; 0x79
 8003724:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &msg, 1, 1000);
 8003726:	f107 010f 	add.w	r1, r7, #15
 800372a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372e:	2201      	movs	r2, #1
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <HAL_UART_RxCpltCallback+0x8b8>)
 8003732:	f012 fa56 	bl	8015be2 <HAL_UART_Transmit>
		SetBootloaderFlag();
 8003736:	f7ff fafb 	bl	8002d30 <SetBootloaderFlag>
		break;
 800373a:	e008      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
	}

	default:
	{
		// Unknown command
		break;
 800373c:	bf00      	nop
 800373e:	e006      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
		break;
 8003740:	bf00      	nop
 8003742:	e004      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
		break;
 8003744:	bf00      	nop
 8003746:	e002      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
		break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_UART_RxCpltCallback+0x89e>
		break;
 800374c:	bf00      	nop
	}
	}
}
 800374e:	bf00      	nop
 8003750:	373c      	adds	r7, #60	; 0x3c
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	240000c4 	.word	0x240000c4
 800375c:	24001cac 	.word	0x24001cac
 8003760:	24001cb0 	.word	0x24001cb0
 8003764:	24000040 	.word	0x24000040
 8003768:	240021c4 	.word	0x240021c4
 800376c:	0801bffc 	.word	0x0801bffc
 8003770:	0801c000 	.word	0x0801c000

08003774 <get_reset_cause>:
/**
 * @brief Retrieves and handles the cause of a system reset.
 *        Checks for watchdog and brownout reset conditions and reports errors.
 */
ERROR_STRUCT get_reset_cause()
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_UNDEFINED;
 800377c:	2305      	movs	r3, #5
 800377e:	723b      	strb	r3, [r7, #8]
	error.detail = ED_UNDEFINED;
 8003780:	231c      	movs	r3, #28
 8003782:	727b      	strb	r3, [r7, #9]

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <get_reset_cause+0xa4>)
 8003786:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800378a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <get_reset_cause+0x50>
    {
        error.category = EC_watchdog;
 8003792:	2304      	movs	r3, #4
 8003794:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 8003796:	231c      	movs	r3, #28
 8003798:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <get_reset_cause+0xa4>)
 800379c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <get_reset_cause+0xa4>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037b2:	f7fe fc6d 	bl	8002090 <increment_error_counter>
        set_previous_error(error);
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037be:	f7fe fccd 	bl	800215c <set_previous_error>
 80037c2:	e01e      	b.n	8003802 <get_reset_cause+0x8e>
    }

    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <get_reset_cause+0xa4>)
 80037c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <get_reset_cause+0x8e>
    {
        error.category = EC_brownout;
 80037d2:	2303      	movs	r3, #3
 80037d4:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 80037d6:	231c      	movs	r3, #28
 80037d8:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <get_reset_cause+0xa4>)
 80037dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <get_reset_cause+0xa4>)
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 80037ea:	f107 0308 	add.w	r3, r7, #8
 80037ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037f2:	f7fe fc4d 	bl	8002090 <increment_error_counter>
        set_previous_error(error);
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037fe:	f7fe fcad 	bl	800215c <set_previous_error>
    }

	return error;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	461a      	mov	r2, r3
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	cb03      	ldmia	r3!, {r0, r1}
 800380c:	6010      	str	r0, [r2, #0]
 800380e:	6051      	str	r1, [r2, #4]
}
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	58024400 	.word	0x58024400

0800381c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	JumpToBootloader();
 8003820:	f7ff fa9c 	bl	8002d5c <JumpToBootloader>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003824:	f003 f88c 	bl	8006940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003828:	f000 f82a 	bl	8003880 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800382c:	f000 f8aa 	bl	8003984 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003830:	f7ff f8b0 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 8003834:	f7fd fa60 	bl	8000cf8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003838:	f002 fa60 	bl	8005cfc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800383c:	f7ff f924 	bl	8002a88 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003840:	f001 f966 	bl	8004b10 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003844:	f001 fe68 	bl	8005518 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003848:	f001 fdb8 	bl	80053bc <MX_TIM1_Init>
  MX_ADC3_Init();
 800384c:	f7fc fff4 	bl	8000838 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003850:	f7fc fed0 	bl	80005f4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003854:	f7fd f99c 	bl	8000b90 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003858:	f001 f902 	bl	8004a60 <MX_SPI1_Init>
  MX_RTC_Init();
 800385c:	f000 fedc 	bl	8004618 <MX_RTC_Init>
#ifdef ERROR_HANDLING_ENABLED
  MX_IWDG1_Init();
 8003860:	f7ff fa32 	bl	8002cc8 <MX_IWDG1_Init>
  MX_RAMECC_Init();
 8003864:	f000 fd90 	bl	8004388 <MX_RAMECC_Init>
#endif
  MX_TIM3_Init();
 8003868:	f001 fecc 	bl	8005604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 800386c:	f000 f8ba 	bl	80039e4 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003870:	f014 ffc6 	bl	8018800 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003874:	f7fe fdba 	bl	80023ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003878:	f014 ffe6 	bl	8018848 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800387c:	e7fe      	b.n	800387c <main+0x60>
	...

08003880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b09c      	sub	sp, #112	; 0x70
 8003884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	224c      	movs	r2, #76	; 0x4c
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f018 fb16 	bl	801bec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2220      	movs	r2, #32
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f018 fb10 	bl	801bec0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80038a0:	2002      	movs	r0, #2
 80038a2:	f00b fdd9 	bl	800f458 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <SystemClock_Config+0xfc>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	4a33      	ldr	r2, [pc, #204]	; (800397c <SystemClock_Config+0xfc>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <SystemClock_Config+0xfc>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <SystemClock_Config+0x100>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038c8:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <SystemClock_Config+0x100>)
 80038ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ce:	6193      	str	r3, [r2, #24]
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <SystemClock_Config+0x100>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80038dc:	bf00      	nop
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <SystemClock_Config+0x100>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	d1f8      	bne.n	80038de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80038ec:	230b      	movs	r3, #11
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80038f6:	2309      	movs	r3, #9
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038fe:	2301      	movs	r3, #1
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003902:	2302      	movs	r3, #2
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003906:	2302      	movs	r3, #2
 8003908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800390a:	2304      	movs	r3, #4
 800390c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800390e:	2318      	movs	r3, #24
 8003910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003912:	2302      	movs	r3, #2
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003916:	2302      	movs	r3, #2
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800391a:	2302      	movs	r3, #2
 800391c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800391e:	2308      	movs	r3, #8
 8003920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8003922:	2302      	movs	r3, #2
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800392a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392e:	4618      	mov	r0, r3
 8003930:	f00b fed8 	bl	800f6e4 <HAL_RCC_OscConfig>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800393a:	f000 f94d 	bl	8003bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800393e:	233f      	movs	r3, #63	; 0x3f
 8003940:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003942:	2303      	movs	r3, #3
 8003944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003952:	2340      	movs	r3, #64	; 0x40
 8003954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	2101      	movs	r1, #1
 8003962:	4618      	mov	r0, r3
 8003964:	f00c fb18 	bl	800ff98 <HAL_RCC_ClockConfig>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800396e:	f000 f933 	bl	8003bd8 <Error_Handler>
  }
}
 8003972:	bf00      	nop
 8003974:	3770      	adds	r7, #112	; 0x70
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	58000400 	.word	0x58000400
 8003980:	58024800 	.word	0x58024800

08003984 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0b0      	sub	sp, #192	; 0xc0
 8003988:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800398a:	463b      	mov	r3, r7
 800398c:	22c0      	movs	r2, #192	; 0xc0
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f018 fa95 	bl	801bec0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80039a2:	2304      	movs	r3, #4
 80039a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80039a6:	2318      	movs	r3, #24
 80039a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80039aa:	2308      	movs	r3, #8
 80039ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80039ae:	2302      	movs	r3, #2
 80039b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80039b2:	2302      	movs	r3, #2
 80039b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80039ba:	2320      	movs	r3, #32
 80039bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039c8:	463b      	mov	r3, r7
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00c feb2 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80039d6:	f000 f8ff 	bl	8003bd8 <Error_Handler>
  }
}
 80039da:	bf00      	nop
 80039dc:	37c0      	adds	r7, #192	; 0xc0
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <system_setup>:
/**
 * @brief Initializes the system and its components.
 *        Sets up error handling, event flags, timer, voltage monitoring, ADC, and UART reception.
 */
void system_setup()
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
#ifdef ERROR_HANDLING_ENABLED
	error_counter_init();
 80039e8:	f7fe fb22 	bl	8002030 <error_counter_init>
	init_flash_ecc();
 80039ec:	f000 f8c4 	bl	8003b78 <init_flash_ecc>
#endif

	packet_event_flags = osEventFlagsNew(NULL);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f015 f85e 	bl	8018ab2 <osEventFlagsNew>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <system_setup+0x7c>)
 80039fa:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL)
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <system_setup+0x7c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <system_setup+0x24>
    {
        Error_Handler();
 8003a04:	f000 f8e8 	bl	8003bd8 <Error_Handler>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f015 f852 	bl	8018ab2 <osEventFlagsNew>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <system_setup+0x80>)
 8003a12:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL)
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <system_setup+0x80>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <system_setup+0x3c>
    {
        Error_Handler();
 8003a1c:	f000 f8dc 	bl	8003bd8 <Error_Handler>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f015 f846 	bl	8018ab2 <osEventFlagsNew>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <system_setup+0x84>)
 8003a2a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL)
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <system_setup+0x84>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <system_setup+0x54>
    {
        Error_Handler();
 8003a34:	f000 f8d0 	bl	8003bd8 <Error_Handler>
    }

    TIM2->CCR4 = 0;
 8003a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003a40:	210c      	movs	r1, #12
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <system_setup+0x88>)
 8003a44:	f010 fd04 	bl	8014450 <HAL_TIM_OC_Start_IT>

	voltage_monitor_init();
 8003a48:	f002 fa8a 	bl	8005f60 <voltage_monitor_init>

	init_adc_dma();
 8003a4c:	f000 fe76 	bl	800473c <init_adc_dma>

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003a50:	2201      	movs	r2, #1
 8003a52:	4907      	ldr	r1, [pc, #28]	; (8003a70 <system_setup+0x8c>)
 8003a54:	4807      	ldr	r0, [pc, #28]	; (8003a74 <system_setup+0x90>)
 8003a56:	f012 fa1b 	bl	8015e90 <HAL_UART_Receive_IT>
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	24001ca8 	.word	0x24001ca8
 8003a64:	24001cac 	.word	0x24001cac
 8003a68:	24001cb0 	.word	0x24001cb0
 8003a6c:	2400212c 	.word	0x2400212c
 8003a70:	24001cb4 	.word	0x24001cb4
 8003a74:	240021c4 	.word	0x240021c4

08003a78 <send_ACK>:
/**
 * @brief Sends an acknowledgment (ACK) over UART.
 *        Transmits a single byte indicating a successful operation.
 */
void send_ACK()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <send_ACK+0x1c>)
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, UART_TIMEOUT_MS);
 8003a82:	2364      	movs	r3, #100	; 0x64
 8003a84:	2201      	movs	r2, #1
 8003a86:	4903      	ldr	r1, [pc, #12]	; (8003a94 <send_ACK+0x1c>)
 8003a88:	4803      	ldr	r0, [pc, #12]	; (8003a98 <send_ACK+0x20>)
 8003a8a:	f012 f8aa 	bl	8015be2 <HAL_UART_Transmit>
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	24001d0c 	.word	0x24001d0c
 8003a98:	240021c4 	.word	0x240021c4

08003a9c <get_current_step>:
 * @brief Retrieves the current step value based on the DAC output.
 *
 * @return The corresponding step value based on the DAC1 output, or -1 if out of range.
 */
STEP_VALUES get_current_step()
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <get_current_step+0xc0>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	607b      	str	r3, [r7, #4]

	switch (dac_value)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d04a      	beq.n	8003b48 <get_current_step+0xac>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	da48      	bge.n	8003b4c <get_current_step+0xb0>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03f      	beq.n	8003b44 <get_current_step+0xa8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003aca:	4293      	cmp	r3, r2
 8003acc:	dc3e      	bgt.n	8003b4c <get_current_step+0xb0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d033      	beq.n	8003b40 <get_current_step+0xa4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003ade:	da35      	bge.n	8003b4c <get_current_step+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d028      	beq.n	8003b3c <get_current_step+0xa0>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003af0:	4293      	cmp	r3, r2
 8003af2:	dc2b      	bgt.n	8003b4c <get_current_step+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f240 7245 	movw	r2, #1861	; 0x745
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01c      	beq.n	8003b38 <get_current_step+0x9c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f240 7245 	movw	r2, #1861	; 0x745
 8003b04:	4293      	cmp	r3, r2
 8003b06:	dc21      	bgt.n	8003b4c <get_current_step+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d010      	beq.n	8003b34 <get_current_step+0x98>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	dc17      	bgt.n	8003b4c <get_current_step+0xb0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <get_current_step+0x90>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003b28:	d002      	beq.n	8003b30 <get_current_step+0x94>
 8003b2a:	e00f      	b.n	8003b4c <get_current_step+0xb0>
	{
	case DAC_VALUE_0:
		return STEP_0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e00e      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_620:
		return STEP_1;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e00c      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_1241:
		return STEP_2;
 8003b34:	2302      	movs	r3, #2
 8003b36:	e00a      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_1861:
		return STEP_3;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e008      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_2482:
		return STEP_4;
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e006      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_3103:
		return STEP_5;
 8003b40:	2305      	movs	r3, #5
 8003b42:	e004      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_3723:
		return STEP_6;
 8003b44:	2306      	movs	r3, #6
 8003b46:	e002      	b.n	8003b4e <get_current_step+0xb2>

	case DAC_VALUE_4095:
		return STEP_7;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	e000      	b.n	8003b4e <get_current_step+0xb2>

	default:
		return INVALID_STEP;
 8003b4c:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007400 	.word	0x40007400

08003b60 <enter_stop>:
/**
 * @brief Enters low-power stop mode after sending an acknowledgment.
 *        Suspends all FreeRTOS tasks, enters stop mode, and resumes configuration upon wake-up.
 */
void enter_stop()
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
	  send_ACK();
 8003b64:	f7ff ff88 	bl	8003a78 <send_ACK>

	  vTaskSuspendAll();
 8003b68:	f016 fc40 	bl	801a3ec <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f00b fc36 	bl	800f3e0 <HAL_PWR_EnterSTOPMode>

	  // MCU resumes here after waking from stop mode.

	  NVIC_SystemReset();
 8003b74:	f7ff f8c6 	bl	8002d04 <__NVIC_SystemReset>

08003b78 <init_flash_ecc>:
/**
 * @brief Initializes Flash ECC (Error Correction Code) settings.
 *        Unlocks Flash memory, sets IRQ priority, and enables ECC correction and detection interrupts.
 */
void init_flash_ecc()
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8003b7c:	f008 fb08 	bl	800c190 <HAL_FLASH_Unlock>

	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	210f      	movs	r1, #15
 8003b84:	2004      	movs	r0, #4
 8003b86:	f004 fc60 	bl	800844a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003b8a:	2004      	movs	r0, #4
 8003b8c:	f004 fc77 	bl	800847e <HAL_NVIC_EnableIRQ>
	HAL_FLASHEx_EnableEccCorrectionInterrupt();
 8003b90:	f008 fc9e 	bl	800c4d0 <HAL_FLASHEx_EnableEccCorrectionInterrupt>
	HAL_FLASHEx_EnableEccDetectionInterrupt();
 8003b94:	f008 fcb4 	bl	800c500 <HAL_FLASHEx_EnableEccDetectionInterrupt>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	HAL_IWDG_Refresh(&hiwdg1);
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003ba6:	f00b fc0a 	bl	800f3be <HAL_IWDG_Refresh>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_IncTick();
 8003bb4:	f002 ff00 	bl	80069b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim3)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	NVIC_SystemReset();
 8003bc0:	f7ff f8a0 	bl	8002d04 <__NVIC_SystemReset>
  }
  /* USER CODE END Callback 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	24001c98 	.word	0x24001c98
 8003bd0:	40001000 	.word	0x40001000
 8003bd4:	24002178 	.word	0x24002178

08003bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003bde:	2302      	movs	r3, #2
 8003be0:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003be2:	231c      	movs	r3, #28
 8003be4:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003be6:	463b      	mov	r3, r7
 8003be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bec:	f7fe f9a8 	bl	8001f40 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <create_sync_packet>:
 *
 * This function combines version number, error
 * counters, and reset cause into a single packet.
 */
void create_sync_packet(ERROR_STRUCT reset_cause)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	463b      	mov	r3, r7
 8003c00:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t buffer[SYNC_DATA_SIZE];

	buffer[0] = SYNC_SYNCWORD;
 8003c04:	4b96      	ldr	r3, [pc, #600]	; (8003e60 <create_sync_packet+0x268>)
 8003c06:	2288      	movs	r2, #136	; 0x88
 8003c08:	701a      	strb	r2, [r3, #0]
	buffer[1] = SYNC_SYNCWORD;
 8003c0a:	4b95      	ldr	r3, [pc, #596]	; (8003e60 <create_sync_packet+0x268>)
 8003c0c:	2288      	movs	r2, #136	; 0x88
 8003c0e:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003c10:	4b93      	ldr	r3, [pc, #588]	; (8003e60 <create_sync_packet+0x268>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003c16:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <create_sync_packet+0x268>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003c1c:	4b90      	ldr	r3, [pc, #576]	; (8003e60 <create_sync_packet+0x268>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	711a      	strb	r2, [r3, #4]
	buffer[5] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 8003c22:	4b90      	ldr	r3, [pc, #576]	; (8003e64 <create_sync_packet+0x26c>)
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	; (8003e60 <create_sync_packet+0x268>)
 8003c2e:	715a      	strb	r2, [r3, #5]
	buffer[6] = (local_cpy[EC_power_supply_rail] & 0xFF);
 8003c30:	4b8c      	ldr	r3, [pc, #560]	; (8003e64 <create_sync_packet+0x26c>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <create_sync_packet+0x268>)
 8003c38:	719a      	strb	r2, [r3, #6]
	buffer[7] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 8003c3a:	4b8a      	ldr	r3, [pc, #552]	; (8003e64 <create_sync_packet+0x26c>)
 8003c3c:	885b      	ldrh	r3, [r3, #2]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b86      	ldr	r3, [pc, #536]	; (8003e60 <create_sync_packet+0x268>)
 8003c46:	71da      	strb	r2, [r3, #7]
	buffer[8] = (local_cpy[EC_seu] & 0xFF);
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <create_sync_packet+0x26c>)
 8003c4a:	885b      	ldrh	r3, [r3, #2]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b84      	ldr	r3, [pc, #528]	; (8003e60 <create_sync_packet+0x268>)
 8003c50:	721a      	strb	r2, [r3, #8]
	buffer[9] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 8003c52:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <create_sync_packet+0x26c>)
 8003c54:	889b      	ldrh	r3, [r3, #4]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b80      	ldr	r3, [pc, #512]	; (8003e60 <create_sync_packet+0x268>)
 8003c5e:	725a      	strb	r2, [r3, #9]
	buffer[10] = (local_cpy[EC_peripheral] & 0xFF);
 8003c60:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <create_sync_packet+0x26c>)
 8003c62:	889b      	ldrh	r3, [r3, #4]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b7e      	ldr	r3, [pc, #504]	; (8003e60 <create_sync_packet+0x268>)
 8003c68:	729a      	strb	r2, [r3, #10]
	buffer[11] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 8003c6a:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <create_sync_packet+0x26c>)
 8003c6c:	88db      	ldrh	r3, [r3, #6]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <create_sync_packet+0x268>)
 8003c76:	72da      	strb	r2, [r3, #11]
	buffer[12] = (local_cpy[EC_brownout] & 0xFF);
 8003c78:	4b7a      	ldr	r3, [pc, #488]	; (8003e64 <create_sync_packet+0x26c>)
 8003c7a:	88db      	ldrh	r3, [r3, #6]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <create_sync_packet+0x268>)
 8003c80:	731a      	strb	r2, [r3, #12]
	buffer[13] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 8003c82:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <create_sync_packet+0x26c>)
 8003c84:	891b      	ldrh	r3, [r3, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <create_sync_packet+0x268>)
 8003c8e:	735a      	strb	r2, [r3, #13]
	buffer[14] = (local_cpy[EC_watchdog] & 0xFF);
 8003c90:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <create_sync_packet+0x26c>)
 8003c92:	891b      	ldrh	r3, [r3, #8]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <create_sync_packet+0x268>)
 8003c98:	739a      	strb	r2, [r3, #14]
	buffer[15] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 8003c9a:	4b72      	ldr	r3, [pc, #456]	; (8003e64 <create_sync_packet+0x26c>)
 8003c9c:	895b      	ldrh	r3, [r3, #10]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <create_sync_packet+0x268>)
 8003ca6:	73da      	strb	r2, [r3, #15]
	buffer[16] = (local_cpy[EC_UNDEFINED] & 0xFF);
 8003ca8:	4b6e      	ldr	r3, [pc, #440]	; (8003e64 <create_sync_packet+0x26c>)
 8003caa:	895b      	ldrh	r3, [r3, #10]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b6c      	ldr	r3, [pc, #432]	; (8003e60 <create_sync_packet+0x268>)
 8003cb0:	741a      	strb	r2, [r3, #16]
	buffer[17] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <create_sync_packet+0x26c>)
 8003cb4:	899b      	ldrh	r3, [r3, #12]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <create_sync_packet+0x268>)
 8003cbe:	745a      	strb	r2, [r3, #17]
	buffer[18] = (local_cpy[ED_vsense] & 0xFF);
 8003cc0:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <create_sync_packet+0x26c>)
 8003cc2:	899b      	ldrh	r3, [r3, #12]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <create_sync_packet+0x268>)
 8003cc8:	749a      	strb	r2, [r3, #18]
	buffer[19] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <create_sync_packet+0x26c>)
 8003ccc:	89db      	ldrh	r3, [r3, #14]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <create_sync_packet+0x268>)
 8003cd6:	74da      	strb	r2, [r3, #19]
	buffer[20] = (local_cpy[ED_vrefint] & 0xFF);
 8003cd8:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <create_sync_packet+0x26c>)
 8003cda:	89db      	ldrh	r3, [r3, #14]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <create_sync_packet+0x268>)
 8003ce0:	751a      	strb	r2, [r3, #20]
	buffer[21] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 8003ce2:	4b60      	ldr	r3, [pc, #384]	; (8003e64 <create_sync_packet+0x26c>)
 8003ce4:	8a1b      	ldrh	r3, [r3, #16]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	4b5c      	ldr	r3, [pc, #368]	; (8003e60 <create_sync_packet+0x268>)
 8003cee:	755a      	strb	r2, [r3, #21]
	buffer[22] = (local_cpy[ED_TEMP1] & 0xFF);
 8003cf0:	4b5c      	ldr	r3, [pc, #368]	; (8003e64 <create_sync_packet+0x26c>)
 8003cf2:	8a1b      	ldrh	r3, [r3, #16]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <create_sync_packet+0x268>)
 8003cf8:	759a      	strb	r2, [r3, #22]
	buffer[23] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <create_sync_packet+0x26c>)
 8003cfc:	8a5b      	ldrh	r3, [r3, #18]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <create_sync_packet+0x268>)
 8003d06:	75da      	strb	r2, [r3, #23]
	buffer[24] = (local_cpy[ED_TEMP2] & 0xFF);
 8003d08:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <create_sync_packet+0x26c>)
 8003d0a:	8a5b      	ldrh	r3, [r3, #18]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b54      	ldr	r3, [pc, #336]	; (8003e60 <create_sync_packet+0x268>)
 8003d10:	761a      	strb	r2, [r3, #24]
	buffer[25] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <create_sync_packet+0x26c>)
 8003d14:	8a9b      	ldrh	r3, [r3, #20]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <create_sync_packet+0x268>)
 8003d1e:	765a      	strb	r2, [r3, #25]
	buffer[26] = (local_cpy[ED_TEMP3] & 0xFF);
 8003d20:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <create_sync_packet+0x26c>)
 8003d22:	8a9b      	ldrh	r3, [r3, #20]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <create_sync_packet+0x268>)
 8003d28:	769a      	strb	r2, [r3, #26]
	buffer[27] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <create_sync_packet+0x26c>)
 8003d2c:	8adb      	ldrh	r3, [r3, #22]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <create_sync_packet+0x268>)
 8003d36:	76da      	strb	r2, [r3, #27]
	buffer[28] = (local_cpy[ED_TEMP4] & 0xFF);
 8003d38:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <create_sync_packet+0x26c>)
 8003d3a:	8adb      	ldrh	r3, [r3, #22]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <create_sync_packet+0x268>)
 8003d40:	771a      	strb	r2, [r3, #28]
	buffer[29] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 8003d42:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <create_sync_packet+0x26c>)
 8003d44:	8b1b      	ldrh	r3, [r3, #24]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <create_sync_packet+0x268>)
 8003d4e:	775a      	strb	r2, [r3, #29]
	buffer[30] = (local_cpy[ED_busvmon] & 0xFF);
 8003d50:	4b44      	ldr	r3, [pc, #272]	; (8003e64 <create_sync_packet+0x26c>)
 8003d52:	8b1b      	ldrh	r3, [r3, #24]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <create_sync_packet+0x268>)
 8003d58:	779a      	strb	r2, [r3, #30]
	buffer[31] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 8003d5a:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <create_sync_packet+0x26c>)
 8003d5c:	8b5b      	ldrh	r3, [r3, #26]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <create_sync_packet+0x268>)
 8003d66:	77da      	strb	r2, [r3, #31]
	buffer[32] = (local_cpy[ED_busimon] & 0xFF);
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <create_sync_packet+0x26c>)
 8003d6a:	8b5b      	ldrh	r3, [r3, #26]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <create_sync_packet+0x268>)
 8003d70:	f883 2020 	strb.w	r2, [r3, #32]
	buffer[33] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 8003d74:	4b3b      	ldr	r3, [pc, #236]	; (8003e64 <create_sync_packet+0x26c>)
 8003d76:	8b9b      	ldrh	r3, [r3, #28]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <create_sync_packet+0x268>)
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	buffer[34] = (local_cpy[ED_2v5] & 0xFF);
 8003d84:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <create_sync_packet+0x26c>)
 8003d86:	8b9b      	ldrh	r3, [r3, #28]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <create_sync_packet+0x268>)
 8003d8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buffer[35] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 8003d90:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <create_sync_packet+0x26c>)
 8003d92:	8bdb      	ldrh	r3, [r3, #30]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <create_sync_packet+0x268>)
 8003d9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	buffer[36] = (local_cpy[ED_3v3] & 0xFF);
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <create_sync_packet+0x26c>)
 8003da2:	8bdb      	ldrh	r3, [r3, #30]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <create_sync_packet+0x268>)
 8003da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	buffer[37] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <create_sync_packet+0x26c>)
 8003dae:	8c1b      	ldrh	r3, [r3, #32]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <create_sync_packet+0x268>)
 8003db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	buffer[38] = (local_cpy[ED_5v] & 0xFF);
 8003dbc:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <create_sync_packet+0x26c>)
 8003dbe:	8c1b      	ldrh	r3, [r3, #32]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <create_sync_packet+0x268>)
 8003dc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	buffer[39] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <create_sync_packet+0x26c>)
 8003dca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <create_sync_packet+0x268>)
 8003dd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	buffer[40] = (local_cpy[ED_n3v3] & 0xFF);
 8003dd8:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <create_sync_packet+0x26c>)
 8003dda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <create_sync_packet+0x268>)
 8003de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	buffer[41] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 8003de4:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <create_sync_packet+0x26c>)
 8003de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <create_sync_packet+0x268>)
 8003df0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	buffer[42] = (local_cpy[ED_n5v] & 0xFF);
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <create_sync_packet+0x26c>)
 8003df6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <create_sync_packet+0x268>)
 8003dfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	buffer[43] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <create_sync_packet+0x26c>)
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <create_sync_packet+0x268>)
 8003e0c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	buffer[44] = (local_cpy[ED_15v] & 0xFF);
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <create_sync_packet+0x26c>)
 8003e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <create_sync_packet+0x268>)
 8003e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	buffer[45] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <create_sync_packet+0x26c>)
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <create_sync_packet+0x268>)
 8003e28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	buffer[46] = (local_cpy[ED_5vref] & 0xFF);
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <create_sync_packet+0x26c>)
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <create_sync_packet+0x268>)
 8003e34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	buffer[47] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <create_sync_packet+0x26c>)
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <create_sync_packet+0x268>)
 8003e44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	buffer[48] = (local_cpy[ED_n200v] & 0xFF);
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <create_sync_packet+0x26c>)
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <create_sync_packet+0x268>)
 8003e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	buffer[49] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <create_sync_packet+0x26c>)
 8003e56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	e003      	b.n	8003e68 <create_sync_packet+0x270>
 8003e60:	24001d18 	.word	0x24001d18
 8003e64:	24000344 	.word	0x24000344
 8003e68:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <create_sync_packet+0x350>)
 8003e6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	buffer[50] = (local_cpy[ED_n800v] & 0xFF);
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <create_sync_packet+0x354>)
 8003e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <create_sync_packet+0x350>)
 8003e76:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	buffer[51] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 8003e7a:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <create_sync_packet+0x354>)
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <create_sync_packet+0x350>)
 8003e86:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	buffer[52] = (local_cpy[ED_TMP1] & 0xFF);
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <create_sync_packet+0x354>)
 8003e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <create_sync_packet+0x350>)
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	buffer[53] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 8003e96:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <create_sync_packet+0x354>)
 8003e98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <create_sync_packet+0x350>)
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	buffer[54] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <create_sync_packet+0x354>)
 8003ea8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <create_sync_packet+0x350>)
 8003eae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	buffer[55] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <create_sync_packet+0x354>)
 8003eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <create_sync_packet+0x350>)
 8003ebe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	buffer[56] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <create_sync_packet+0x354>)
 8003ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <create_sync_packet+0x350>)
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	buffer[57] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <create_sync_packet+0x354>)
 8003ed0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <create_sync_packet+0x350>)
 8003eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	buffer[58] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <create_sync_packet+0x354>)
 8003ee0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <create_sync_packet+0x350>)
 8003ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	buffer[59] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <create_sync_packet+0x354>)
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <create_sync_packet+0x350>)
 8003ef6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	buffer[60] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <create_sync_packet+0x354>)
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <create_sync_packet+0x350>)
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	buffer[61] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <create_sync_packet+0x354>)
 8003f08:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <create_sync_packet+0x350>)
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	buffer[62] = (local_cpy[ED_UNDEFINED] & 0xFF);
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <create_sync_packet+0x354>)
 8003f18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <create_sync_packet+0x350>)
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	buffer[63] = reset_cause.category;
 8003f22:	783a      	ldrb	r2, [r7, #0]
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <create_sync_packet+0x350>)
 8003f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	buffer[64] = reset_cause.detail;
 8003f2a:	787a      	ldrb	r2, [r7, #1]
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <create_sync_packet+0x350>)
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_Transmit(&huart1, buffer, SYNC_DATA_SIZE, UART_TIMEOUT_MS);
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	2241      	movs	r2, #65	; 0x41
 8003f36:	4904      	ldr	r1, [pc, #16]	; (8003f48 <create_sync_packet+0x350>)
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <create_sync_packet+0x358>)
 8003f3a:	f011 fe52 	bl	8015be2 <HAL_UART_Transmit>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	24001d18 	.word	0x24001d18
 8003f4c:	24000344 	.word	0x24000344
 8003f50:	240021c4 	.word	0x240021c4

08003f54 <create_version_packet>:
 * it over UART.
 *
 * @note V_MAJOR, V_MINOR, and V_PATCH are defined in main.h.
 */
void create_version_packet()
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	static uint8_t buffer[VERSION_DATA_SIZE];

	buffer[0] = VERSION_SYNCWORD;
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <create_version_packet+0x34>)
 8003f5a:	2299      	movs	r2, #153	; 0x99
 8003f5c:	701a      	strb	r2, [r3, #0]
	buffer[1] = VERSION_SYNCWORD;
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <create_version_packet+0x34>)
 8003f60:	2299      	movs	r2, #153	; 0x99
 8003f62:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003f64:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <create_version_packet+0x34>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <create_version_packet+0x34>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <create_version_packet+0x34>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	711a      	strb	r2, [r3, #4]

	HAL_UART_Transmit(&huart1, buffer, VERSION_DATA_SIZE, UART_TIMEOUT_MS);
 8003f76:	2364      	movs	r3, #100	; 0x64
 8003f78:	2205      	movs	r2, #5
 8003f7a:	4903      	ldr	r1, [pc, #12]	; (8003f88 <create_version_packet+0x34>)
 8003f7c:	4803      	ldr	r0, [pc, #12]	; (8003f8c <create_version_packet+0x38>)
 8003f7e:	f011 fe30 	bl	8015be2 <HAL_UART_Transmit>
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	24001d5c 	.word	0x24001d5c
 8003f8c:	240021c4 	.word	0x240021c4

08003f90 <create_pmt_packet>:
 * This function samples the PMT SPI data, retrieves uptime information,
 * constructs a packet with synchronization bytes and data,
 * and transmits it over UART.
 */
void create_pmt_packet()
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {};
 8003f96:	bf00      	nop
 8003f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f9c:	481c      	ldr	r0, [pc, #112]	; (8004010 <create_pmt_packet+0x80>)
 8003f9e:	f008 fe29 	bl	800cbf4 <HAL_GPIO_ReadPin>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f7      	bne.n	8003f98 <create_pmt_packet+0x8>

	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fc5a 	bl	8005864 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003fb0:	f107 0308 	add.w	r3, r7, #8
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fc0d 	bl	80047d4 <sample_pmt_spi>

	buffer[0] = PMT_SYNCWORD;
 8003fba:	23ff      	movs	r3, #255	; 0xff
 8003fbc:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNCWORD;
 8003fbe:	23ff      	movs	r3, #255	; 0xff
 8003fc0:	737b      	strb	r3, [r7, #13]
	buffer[2] = uptime[0];
 8003fc2:	793b      	ldrb	r3, [r7, #4]
 8003fc4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = uptime[1];
 8003fc6:	797b      	ldrb	r3, [r7, #5]
 8003fc8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = uptime[2];
 8003fca:	79bb      	ldrb	r3, [r7, #6]
 8003fcc:	743b      	strb	r3, [r7, #16]
	buffer[5] = uptime[3];
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((pmt_seq & 0xFF00) >> 8);
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <create_pmt_packet+0x84>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (pmt_seq & 0xFF);
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <create_pmt_packet+0x84>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	74fb      	strb	r3, [r7, #19]
	buffer[8] = pmt_spi[0];
 8003fe6:	7a3b      	ldrb	r3, [r7, #8]
 8003fe8:	753b      	strb	r3, [r7, #20]
	buffer[9] = pmt_spi[1];
 8003fea:	7a7b      	ldrb	r3, [r7, #9]
 8003fec:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, UART_TIMEOUT_MS);
 8003fee:	f107 010c 	add.w	r1, r7, #12
 8003ff2:	2364      	movs	r3, #100	; 0x64
 8003ff4:	220a      	movs	r2, #10
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <create_pmt_packet+0x88>)
 8003ff8:	f011 fdf3 	bl	8015be2 <HAL_UART_Transmit>

	pmt_seq++;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <create_pmt_packet+0x84>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <create_pmt_packet+0x84>)
 8004006:	801a      	strh	r2, [r3, #0]
}
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	58020000 	.word	0x58020000
 8004014:	24001d0e 	.word	0x24001d0e
 8004018:	240021c4 	.word	0x240021c4

0800401c <create_erpa_packet>:
 * This function samples the ERPA SPI and ADC data, retrieves uptime information,
 * constructs a packet with synchronization bytes, sequence number, and data,
 * and transmits it over UART.
 */
void create_erpa_packet()
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {};
 8004022:	bf00      	nop
 8004024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004028:	4828      	ldr	r0, [pc, #160]	; (80040cc <create_erpa_packet+0xb0>)
 800402a:	f008 fde3 	bl	800cbf4 <HAL_GPIO_ReadPin>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f7      	bne.n	8004024 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	STEP_VALUES sweep_step = INVALID_STEP;
 8004034:	23ff      	movs	r3, #255	; 0xff
 8004036:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fc12 	bl	8005864 <get_uptime>
	sweep_step = get_current_step();
 8004040:	f7ff fd2c 	bl	8003a9c <get_current_step>
 8004044:	4603      	mov	r3, r0
 8004046:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fbe1 	bl	8004814 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fbfc 	bl	8004854 <sample_erpa_adc>

	buffer[0] = ERPA_SYNCWORD;
 800405c:	23ee      	movs	r3, #238	; 0xee
 800405e:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNCWORD;
 8004060:	23ee      	movs	r3, #238	; 0xee
 8004062:	747b      	strb	r3, [r7, #17]
	buffer[2] = uptime[0];
 8004064:	793b      	ldrb	r3, [r7, #4]
 8004066:	74bb      	strb	r3, [r7, #18]
	buffer[3] = uptime[1];
 8004068:	797b      	ldrb	r3, [r7, #5]
 800406a:	74fb      	strb	r3, [r7, #19]
	buffer[4] = uptime[2];
 800406c:	79bb      	ldrb	r3, [r7, #6]
 800406e:	753b      	strb	r3, [r7, #20]
	buffer[5] = uptime[3];
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_seq >> 16) & 0xFF);
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <create_erpa_packet+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	b2db      	uxtb	r3, r3
 800407c:	75bb      	strb	r3, [r7, #22]
	buffer[7] = ((erpa_seq >> 8) & 0xFF);
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <create_erpa_packet+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b2db      	uxtb	r3, r3
 8004086:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_seq & 0xFF;
 8004088:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <create_erpa_packet+0xb4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	763b      	strb	r3, [r7, #24]
	buffer[9] = sweep_step;
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	b29b      	uxth	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800409e:	893b      	ldrh	r3, [r7, #8]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	76fb      	strb	r3, [r7, #27]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 80040a4:	7b3b      	ldrb	r3, [r7, #12]
 80040a6:	773b      	strb	r3, [r7, #28]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 80040a8:	7b7b      	ldrb	r3, [r7, #13]
 80040aa:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, UART_TIMEOUT_MS);
 80040ac:	f107 0110 	add.w	r1, r7, #16
 80040b0:	2364      	movs	r3, #100	; 0x64
 80040b2:	220e      	movs	r2, #14
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <create_erpa_packet+0xb8>)
 80040b6:	f011 fd94 	bl	8015be2 <HAL_UART_Transmit>

	erpa_seq++;
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <create_erpa_packet+0xb4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <create_erpa_packet+0xb4>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	58020400 	.word	0x58020400
 80040d0:	24001d10 	.word	0x24001d10
 80040d4:	240021c4 	.word	0x240021c4

080040d8 <create_hk_packet>:
 * This function retrieves uptime and UNIX time information, samples the voltage rails,
 * constructs a packet with synchronization bytes, sequence number, and voltage readings,
 * and transmits it over UART.
 */
void create_hk_packet()
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b092      	sub	sp, #72	; 0x48
 80040dc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fbbf 	bl	8005864 <get_uptime>
	get_unix_time(timestamp);
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 fc0a 	bl	8005904 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 80040f0:	f002 fa42 	bl	8006578 <get_rail_monitor>
 80040f4:	6478      	str	r0, [r7, #68]	; 0x44

	buffer[0] = HK_SYNCWORD;                     	// HK SYNC 0xCC MSB
 80040f6:	23dd      	movs	r3, #221	; 0xdd
 80040f8:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNCWORD;                     	// HK SYNC 0xCC LSB
 80040fa:	23dd      	movs	r3, #221	; 0xdd
 80040fc:	747b      	strb	r3, [r7, #17]
	buffer[2] = timestamp[0];
 80040fe:	7a3b      	ldrb	r3, [r7, #8]
 8004100:	74bb      	strb	r3, [r7, #18]
	buffer[3] = timestamp[1];
 8004102:	7a7b      	ldrb	r3, [r7, #9]
 8004104:	74fb      	strb	r3, [r7, #19]
	buffer[4] = timestamp[2];
 8004106:	7abb      	ldrb	r3, [r7, #10]
 8004108:	753b      	strb	r3, [r7, #20]
	buffer[5] = timestamp[3];
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	757b      	strb	r3, [r7, #21]
	buffer[6] = timestamp[4];
 800410e:	7b3b      	ldrb	r3, [r7, #12]
 8004110:	75bb      	strb	r3, [r7, #22]
	buffer[7] = timestamp[5];
 8004112:	7b7b      	ldrb	r3, [r7, #13]
 8004114:	75fb      	strb	r3, [r7, #23]
	buffer[8] = uptime[0];
 8004116:	793b      	ldrb	r3, [r7, #4]
 8004118:	763b      	strb	r3, [r7, #24]
	buffer[9] = uptime[1];
 800411a:	797b      	ldrb	r3, [r7, #5]
 800411c:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[2];
 800411e:	79bb      	ldrb	r3, [r7, #6]
 8004120:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[3];
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8004126:	4b8b      	ldr	r3, [pc, #556]	; (8004354 <create_hk_packet+0x27c>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	773b      	strb	r3, [r7, #28]
	buffer[13] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8004132:	4b88      	ldr	r3, [pc, #544]	; (8004354 <create_hk_packet+0x27c>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800413a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413c:	889b      	ldrh	r3, [r3, #4]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8004146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004148:	889b      	ldrh	r3, [r3, #4]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 800414e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004150:	3310      	adds	r3, #16
 8004152:	889b      	ldrh	r3, [r3, #4]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b29b      	uxth	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 800415e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004160:	3310      	adds	r3, #16
 8004162:	889b      	ldrh	r3, [r3, #4]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 800416a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416c:	3360      	adds	r3, #96	; 0x60
 800416e:	889b      	ldrh	r3, [r3, #4]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	b29b      	uxth	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 800417a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417c:	3360      	adds	r3, #96	; 0x60
 800417e:	889b      	ldrh	r3, [r3, #4]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8004186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004188:	3370      	adds	r3, #112	; 0x70
 800418a:	889b      	ldrh	r3, [r3, #4]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	b29b      	uxth	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8004196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004198:	3370      	adds	r3, #112	; 0x70
 800419a:	889b      	ldrh	r3, [r3, #4]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 80041a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a4:	3380      	adds	r3, #128	; 0x80
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 80041b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b4:	3380      	adds	r3, #128	; 0x80
 80041b6:	889b      	ldrh	r3, [r3, #4]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 80041be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c0:	3390      	adds	r3, #144	; 0x90
 80041c2:	889b      	ldrh	r3, [r3, #4]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 80041ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d0:	3390      	adds	r3, #144	; 0x90
 80041d2:	889b      	ldrh	r3, [r3, #4]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 80041da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041dc:	33a0      	adds	r3, #160	; 0xa0
 80041de:	889b      	ldrh	r3, [r3, #4]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	33a0      	adds	r3, #160	; 0xa0
 80041ee:	889b      	ldrh	r3, [r3, #4]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80041f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f8:	33b0      	adds	r3, #176	; 0xb0
 80041fa:	889b      	ldrh	r3, [r3, #4]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	b29b      	uxth	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8004206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004208:	33b0      	adds	r3, #176	; 0xb0
 800420a:	889b      	ldrh	r3, [r3, #4]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8004212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004214:	33c0      	adds	r3, #192	; 0xc0
 8004216:	889b      	ldrh	r3, [r3, #4]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	b29b      	uxth	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8004222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004224:	33c0      	adds	r3, #192	; 0xc0
 8004226:	889b      	ldrh	r3, [r3, #4]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 800422e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004230:	33d0      	adds	r3, #208	; 0xd0
 8004232:	889b      	ldrh	r3, [r3, #4]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	b29b      	uxth	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800423e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004240:	33d0      	adds	r3, #208	; 0xd0
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 800424a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424c:	33e0      	adds	r3, #224	; 0xe0
 800424e:	889b      	ldrh	r3, [r3, #4]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	b29b      	uxth	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 800425a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425c:	33e0      	adds	r3, #224	; 0xe0
 800425e:	889b      	ldrh	r3, [r3, #4]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8004266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004268:	33f0      	adds	r3, #240	; 0xf0
 800426a:	889b      	ldrh	r3, [r3, #4]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	b29b      	uxth	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8004276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004278:	33f0      	adds	r3, #240	; 0xf0
 800427a:	889b      	ldrh	r3, [r3, #4]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8004282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004288:	889b      	ldrh	r3, [r3, #4]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8004294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004296:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800429a:	889b      	ldrh	r3, [r3, #4]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	3320      	adds	r3, #32
 80042a6:	889b      	ldrh	r3, [r3, #4]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	3320      	adds	r3, #32
 80042b6:	889b      	ldrh	r3, [r3, #4]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80042be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c0:	3330      	adds	r3, #48	; 0x30
 80042c2:	889b      	ldrh	r3, [r3, #4]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80042ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d0:	3330      	adds	r3, #48	; 0x30
 80042d2:	889b      	ldrh	r3, [r3, #4]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80042da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042dc:	3340      	adds	r3, #64	; 0x40
 80042de:	889b      	ldrh	r3, [r3, #4]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80042ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ec:	3340      	adds	r3, #64	; 0x40
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80042f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f8:	3350      	adds	r3, #80	; 0x50
 80042fa:	889b      	ldrh	r3, [r3, #4]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	b29b      	uxth	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	3350      	adds	r3, #80	; 0x50
 800430a:	889b      	ldrh	r3, [r3, #4]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8004312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004314:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004318:	889b      	ldrh	r3, [r3, #4]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	b29b      	uxth	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8004324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004326:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800432a:	889b      	ldrh	r3, [r3, #4]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, UART_TIMEOUT_MS);
 8004332:	f107 0110 	add.w	r1, r7, #16
 8004336:	2364      	movs	r3, #100	; 0x64
 8004338:	2232      	movs	r2, #50	; 0x32
 800433a:	4807      	ldr	r0, [pc, #28]	; (8004358 <create_hk_packet+0x280>)
 800433c:	f011 fc51 	bl	8015be2 <HAL_UART_Transmit>

	hk_seq++;
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <create_hk_packet+0x27c>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <create_hk_packet+0x27c>)
 800434a:	801a      	strh	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	3748      	adds	r7, #72	; 0x48
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	24001d14 	.word	0x24001d14
 8004358:	240021c4 	.word	0x240021c4

0800435c <reset_packet_sequence_numbers>:
 *
 * This function sets the sequence counters for the PMT, ERPA, and housekeeping (HK) packets
 * back to zero. It is useful for reinitializing the packet transmission system.
 */
void reset_packet_sequence_numbers()
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <reset_packet_sequence_numbers+0x20>)
 8004362:	2200      	movs	r2, #0
 8004364:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <reset_packet_sequence_numbers+0x24>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <reset_packet_sequence_numbers+0x28>)
 800436e:	2200      	movs	r2, #0
 8004370:	801a      	strh	r2, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	24001d0e 	.word	0x24001d0e
 8004380:	24001d10 	.word	0x24001d10
 8004384:	24001d14 	.word	0x24001d14

08004388 <MX_RAMECC_Init>:
 * This function sets up the RAMECC for various RAM regions, ensuring that ECC errors
 * are monitored and handled. It includes writing to the ITCM and DTCM on startup
 * to avoid triggering errors.
 */
void MX_RAMECC_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RAMECC_Init 0 */
	// ITCM and DTCM will trigger ECC error if not written to on startup
	write_RAM((volatile uint32_t*) ITCM_START_ADDRESS, (volatile uint32_t*) ITCM_END_ADDRESS);
 800438c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004390:	2000      	movs	r0, #0
 8004392:	f000 f8e9 	bl	8004568 <write_RAM>
	write_RAM((volatile uint32_t*) DTCM_START_ADDRESS, (volatile uint32_t*) DTCM_END_ADDRESS);
 8004396:	495b      	ldr	r1, [pc, #364]	; (8004504 <MX_RAMECC_Init+0x17c>)
 8004398:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800439c:	f000 f8e4 	bl	8004568 <write_RAM>

	/* USER CODE END RAMECC_Init 1 */

	/** Initialize RAMECC1 M1 : AXI SRAM
	 */
	hramecc1_m1.Instance = RAMECC1_Monitor1;
 80043a0:	4b59      	ldr	r3, [pc, #356]	; (8004508 <MX_RAMECC_Init+0x180>)
 80043a2:	4a5a      	ldr	r2, [pc, #360]	; (800450c <MX_RAMECC_Init+0x184>)
 80043a4:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 80043a6:	4858      	ldr	r0, [pc, #352]	; (8004508 <MX_RAMECC_Init+0x180>)
 80043a8:	f00b f890 	bl	800f4cc <HAL_RAMECC_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_RAMECC_Init+0x2e>
	{
		Error_Handler();
 80043b2:	f7ff fc11 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC1 M2 : ITCM-RAM
	 */
	hramecc1_m2.Instance = RAMECC1_Monitor2;
 80043b6:	4b56      	ldr	r3, [pc, #344]	; (8004510 <MX_RAMECC_Init+0x188>)
 80043b8:	4a56      	ldr	r2, [pc, #344]	; (8004514 <MX_RAMECC_Init+0x18c>)
 80043ba:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 80043bc:	4854      	ldr	r0, [pc, #336]	; (8004510 <MX_RAMECC_Init+0x188>)
 80043be:	f00b f885 	bl	800f4cc <HAL_RAMECC_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <MX_RAMECC_Init+0x44>
	{
		Error_Handler();
 80043c8:	f7ff fc06 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC1 M3 : D0TCM-RAM
	 */
	hramecc1_m3.Instance = RAMECC1_Monitor3;
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <MX_RAMECC_Init+0x190>)
 80043ce:	4a53      	ldr	r2, [pc, #332]	; (800451c <MX_RAMECC_Init+0x194>)
 80043d0:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 80043d2:	4851      	ldr	r0, [pc, #324]	; (8004518 <MX_RAMECC_Init+0x190>)
 80043d4:	f00b f87a 	bl	800f4cc <HAL_RAMECC_Init>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_RAMECC_Init+0x5a>
	{
		Error_Handler();
 80043de:	f7ff fbfb 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC1 M4 : D1TCM-RAM
	 */
	hramecc1_m4.Instance = RAMECC1_Monitor4;
 80043e2:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <MX_RAMECC_Init+0x198>)
 80043e4:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <MX_RAMECC_Init+0x19c>)
 80043e6:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 80043e8:	484d      	ldr	r0, [pc, #308]	; (8004520 <MX_RAMECC_Init+0x198>)
 80043ea:	f00b f86f 	bl	800f4cc <HAL_RAMECC_Init>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_RAMECC_Init+0x70>
	{
		Error_Handler();
 80043f4:	f7ff fbf0 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC1 M5 : ETM RAM
	 */
	hramecc1_m5.Instance = RAMECC1_Monitor5;
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <MX_RAMECC_Init+0x1a0>)
 80043fa:	4a4c      	ldr	r2, [pc, #304]	; (800452c <MX_RAMECC_Init+0x1a4>)
 80043fc:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 80043fe:	484a      	ldr	r0, [pc, #296]	; (8004528 <MX_RAMECC_Init+0x1a0>)
 8004400:	f00b f864 	bl	800f4cc <HAL_RAMECC_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_RAMECC_Init+0x86>
	{
		Error_Handler();
 800440a:	f7ff fbe5 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC2 M1 : SRAM1_0
	 */
	hramecc2_m1.Instance = RAMECC2_Monitor1;
 800440e:	4b48      	ldr	r3, [pc, #288]	; (8004530 <MX_RAMECC_Init+0x1a8>)
 8004410:	4a48      	ldr	r2, [pc, #288]	; (8004534 <MX_RAMECC_Init+0x1ac>)
 8004412:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8004414:	4846      	ldr	r0, [pc, #280]	; (8004530 <MX_RAMECC_Init+0x1a8>)
 8004416:	f00b f859 	bl	800f4cc <HAL_RAMECC_Init>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_RAMECC_Init+0x9c>
	{
		Error_Handler();
 8004420:	f7ff fbda 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC2 M2 SRAM1_1
	 */
	hramecc2_m2.Instance = RAMECC2_Monitor2;
 8004424:	4b44      	ldr	r3, [pc, #272]	; (8004538 <MX_RAMECC_Init+0x1b0>)
 8004426:	4a45      	ldr	r2, [pc, #276]	; (800453c <MX_RAMECC_Init+0x1b4>)
 8004428:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800442a:	4843      	ldr	r0, [pc, #268]	; (8004538 <MX_RAMECC_Init+0x1b0>)
 800442c:	f00b f84e 	bl	800f4cc <HAL_RAMECC_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_RAMECC_Init+0xb2>
	{
		Error_Handler();
 8004436:	f7ff fbcf 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC2 M3 : SRAM2_0
	 */
	hramecc2_m3.Instance = RAMECC2_Monitor3;
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <MX_RAMECC_Init+0x1b8>)
 800443c:	4a41      	ldr	r2, [pc, #260]	; (8004544 <MX_RAMECC_Init+0x1bc>)
 800443e:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 8004440:	483f      	ldr	r0, [pc, #252]	; (8004540 <MX_RAMECC_Init+0x1b8>)
 8004442:	f00b f843 	bl	800f4cc <HAL_RAMECC_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_RAMECC_Init+0xc8>
	{
		Error_Handler();
 800444c:	f7ff fbc4 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC2 M4 : SRAM2_1
	 */
	hramecc2_m4.Instance = RAMECC2_Monitor4;
 8004450:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <MX_RAMECC_Init+0x1c0>)
 8004452:	4a3e      	ldr	r2, [pc, #248]	; (800454c <MX_RAMECC_Init+0x1c4>)
 8004454:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 8004456:	483c      	ldr	r0, [pc, #240]	; (8004548 <MX_RAMECC_Init+0x1c0>)
 8004458:	f00b f838 	bl	800f4cc <HAL_RAMECC_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_RAMECC_Init+0xde>
	{
		Error_Handler();
 8004462:	f7ff fbb9 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC2 M5 : SRAM3
	 */
	hramecc2_m5.Instance = RAMECC2_Monitor5;
 8004466:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <MX_RAMECC_Init+0x1c8>)
 8004468:	4a3a      	ldr	r2, [pc, #232]	; (8004554 <MX_RAMECC_Init+0x1cc>)
 800446a:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 800446c:	4838      	ldr	r0, [pc, #224]	; (8004550 <MX_RAMECC_Init+0x1c8>)
 800446e:	f00b f82d 	bl	800f4cc <HAL_RAMECC_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_RAMECC_Init+0xf4>
	{
		Error_Handler();
 8004478:	f7ff fbae 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC3 M1 : SRAM4
	 */
	hramecc3_m1.Instance = RAMECC3_Monitor1;
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <MX_RAMECC_Init+0x1d0>)
 800447e:	4a37      	ldr	r2, [pc, #220]	; (800455c <MX_RAMECC_Init+0x1d4>)
 8004480:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 8004482:	4835      	ldr	r0, [pc, #212]	; (8004558 <MX_RAMECC_Init+0x1d0>)
 8004484:	f00b f822 	bl	800f4cc <HAL_RAMECC_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_RAMECC_Init+0x10a>
	{
		Error_Handler();
 800448e:	f7ff fba3 	bl	8003bd8 <Error_Handler>
	}

	/** Initialize RAMECC3 M2 : Backup RAM
	 */
	hramecc3_m2.Instance = RAMECC3_Monitor2;
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <MX_RAMECC_Init+0x1d8>)
 8004494:	4a33      	ldr	r2, [pc, #204]	; (8004564 <MX_RAMECC_Init+0x1dc>)
 8004496:	601a      	str	r2, [r3, #0]
	if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 8004498:	4831      	ldr	r0, [pc, #196]	; (8004560 <MX_RAMECC_Init+0x1d8>)
 800449a:	f00b f817 	bl	800f4cc <HAL_RAMECC_Init>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_RAMECC_Init+0x120>
	{
		Error_Handler();
 80044a4:	f7ff fb98 	bl	8003bd8 <Error_Handler>
	}
	/* USER CODE BEGIN RAMECC_Init 2 */
	HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	2091      	movs	r0, #145	; 0x91
 80044ae:	f003 ffcc 	bl	800844a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ECC_IRQn);
 80044b2:	2091      	movs	r0, #145	; 0x91
 80044b4:	f003 ffe3 	bl	800847e <HAL_NVIC_EnableIRQ>

	enable_ramecc_monitor_notifications(&hramecc1_m1);
 80044b8:	4813      	ldr	r0, [pc, #76]	; (8004508 <MX_RAMECC_Init+0x180>)
 80044ba:	f000 f86d 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m2);
 80044be:	4814      	ldr	r0, [pc, #80]	; (8004510 <MX_RAMECC_Init+0x188>)
 80044c0:	f000 f86a 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m3);
 80044c4:	4814      	ldr	r0, [pc, #80]	; (8004518 <MX_RAMECC_Init+0x190>)
 80044c6:	f000 f867 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m4);
 80044ca:	4815      	ldr	r0, [pc, #84]	; (8004520 <MX_RAMECC_Init+0x198>)
 80044cc:	f000 f864 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m5);
 80044d0:	4815      	ldr	r0, [pc, #84]	; (8004528 <MX_RAMECC_Init+0x1a0>)
 80044d2:	f000 f861 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m1);
 80044d6:	4816      	ldr	r0, [pc, #88]	; (8004530 <MX_RAMECC_Init+0x1a8>)
 80044d8:	f000 f85e 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m2);
 80044dc:	4816      	ldr	r0, [pc, #88]	; (8004538 <MX_RAMECC_Init+0x1b0>)
 80044de:	f000 f85b 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m3);
 80044e2:	4817      	ldr	r0, [pc, #92]	; (8004540 <MX_RAMECC_Init+0x1b8>)
 80044e4:	f000 f858 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m4);
 80044e8:	4817      	ldr	r0, [pc, #92]	; (8004548 <MX_RAMECC_Init+0x1c0>)
 80044ea:	f000 f855 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m5);
 80044ee:	4818      	ldr	r0, [pc, #96]	; (8004550 <MX_RAMECC_Init+0x1c8>)
 80044f0:	f000 f852 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m1);
 80044f4:	4818      	ldr	r0, [pc, #96]	; (8004558 <MX_RAMECC_Init+0x1d0>)
 80044f6:	f000 f84f 	bl	8004598 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m2);
 80044fa:	4819      	ldr	r0, [pc, #100]	; (8004560 <MX_RAMECC_Init+0x1d8>)
 80044fc:	f000 f84c 	bl	8004598 <enable_ramecc_monitor_notifications>
	/* USER CODE END RAMECC_Init 2 */
}
 8004500:	bf00      	nop
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2001ffff 	.word	0x2001ffff
 8004508:	24001d64 	.word	0x24001d64
 800450c:	52009020 	.word	0x52009020
 8004510:	24001d74 	.word	0x24001d74
 8004514:	52009040 	.word	0x52009040
 8004518:	24001d84 	.word	0x24001d84
 800451c:	52009060 	.word	0x52009060
 8004520:	24001d94 	.word	0x24001d94
 8004524:	52009080 	.word	0x52009080
 8004528:	24001da4 	.word	0x24001da4
 800452c:	520090a0 	.word	0x520090a0
 8004530:	24001db4 	.word	0x24001db4
 8004534:	48023020 	.word	0x48023020
 8004538:	24001dc4 	.word	0x24001dc4
 800453c:	48023040 	.word	0x48023040
 8004540:	24001dd4 	.word	0x24001dd4
 8004544:	48023060 	.word	0x48023060
 8004548:	24001de4 	.word	0x24001de4
 800454c:	48023080 	.word	0x48023080
 8004550:	24001df4 	.word	0x24001df4
 8004554:	480230a0 	.word	0x480230a0
 8004558:	24001e04 	.word	0x24001e04
 800455c:	58027020 	.word	0x58027020
 8004560:	24001e14 	.word	0x24001e14
 8004564:	58027040 	.word	0x58027040

08004568 <write_RAM>:
 *
 * @param start Pointer to the starting address of the RAM range.
 * @param end Pointer to the ending address of the RAM range.
 */
void write_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	while (start <= end)
 8004572:	e005      	b.n	8004580 <write_RAM+0x18>
	{
		*start = 0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
		start++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	607b      	str	r3, [r7, #4]
	while (start <= end)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d9f5      	bls.n	8004574 <write_RAM+0xc>
	}
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <enable_ramecc_monitor_notifications>:
 * @brief Enables notifications for RAMECC monitoring.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void enable_ramecc_monitor_notifications(RAMECC_HandleTypeDef *hramecc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK)
 80045a0:	490a      	ldr	r1, [pc, #40]	; (80045cc <enable_ramecc_monitor_notifications+0x34>)
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f00a fff6 	bl	800f594 <HAL_RAMECC_EnableNotification>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <enable_ramecc_monitor_notifications+0x1a>
	{
		Error_Handler();
 80045ae:	f7ff fb13 	bl	8003bd8 <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK)
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f00a ffca 	bl	800f54c <HAL_RAMECC_StartMonitor>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <enable_ramecc_monitor_notifications+0x2a>
	{
		Error_Handler();
 80045be:	f7ff fb0b 	bl	8003bd8 <Error_Handler>
	}
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <HAL_RAMECC_DetectErrorCallback>:
 * This function handles single and double bit errors detected by RAMECC.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_seu;
 80045d8:	2301      	movs	r3, #1
 80045da:	723b      	strb	r3, [r7, #8]
	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED) != 0U)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f00b f875 	bl	800f6cc <HAL_RAMECC_GetRAMECCError>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RAMECC_DetectErrorCallback+0x20>
	{
		error.detail = ED_single_bit_error_ram;
 80045ec:	231a      	movs	r3, #26
 80045ee:	727b      	strb	r3, [r7, #9]
	}

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED) != 0U)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f00b f86b 	bl	800f6cc <HAL_RAMECC_GetRAMECCError>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_RAMECC_DetectErrorCallback+0x34>
	{
		error.detail = ED_double_bit_error_ram;
 8004600:	231b      	movs	r3, #27
 8004602:	727b      	strb	r3, [r7, #9]
	}
	handle_error(error);
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	e893 0003 	ldmia.w	r3, {r0, r1}
 800460c:	f7fd fc98 	bl	8001f40 <handle_error>
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800462c:	2300      	movs	r3, #0
 800462e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <MX_RTC_Init+0xb4>)
 8004632:	4a27      	ldr	r2, [pc, #156]	; (80046d0 <MX_RTC_Init+0xb8>)
 8004634:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <MX_RTC_Init+0xb4>)
 8004638:	2200      	movs	r2, #0
 800463a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 800463c:	4b23      	ldr	r3, [pc, #140]	; (80046cc <MX_RTC_Init+0xb4>)
 800463e:	2263      	movs	r2, #99	; 0x63
 8004640:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <MX_RTC_Init+0xb4>)
 8004644:	f242 720f 	movw	r2, #9999	; 0x270f
 8004648:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <MX_RTC_Init+0xb4>)
 800464c:	2200      	movs	r2, #0
 800464e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <MX_RTC_Init+0xb4>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <MX_RTC_Init+0xb4>)
 8004658:	2200      	movs	r2, #0
 800465a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <MX_RTC_Init+0xb4>)
 800465e:	2200      	movs	r2, #0
 8004660:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004662:	481a      	ldr	r0, [pc, #104]	; (80046cc <MX_RTC_Init+0xb4>)
 8004664:	f00e fd64 	bl	8013130 <HAL_RTC_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800466e:	f7ff fab3 	bl	8003bd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004672:	2300      	movs	r3, #0
 8004674:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004676:	2300      	movs	r3, #0
 8004678:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800467a:	2300      	movs	r3, #0
 800467c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	2201      	movs	r2, #1
 800468a:	4619      	mov	r1, r3
 800468c:	480f      	ldr	r0, [pc, #60]	; (80046cc <MX_RTC_Init+0xb4>)
 800468e:	f00e fdd1 	bl	8013234 <HAL_RTC_SetTime>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004698:	f7ff fa9e 	bl	8003bd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800469c:	2301      	movs	r3, #1
 800469e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80046a0:	2301      	movs	r3, #1
 80046a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80046a4:	2301      	movs	r3, #1
 80046a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80046ac:	463b      	mov	r3, r7
 80046ae:	2201      	movs	r2, #1
 80046b0:	4619      	mov	r1, r3
 80046b2:	4806      	ldr	r0, [pc, #24]	; (80046cc <MX_RTC_Init+0xb4>)
 80046b4:	f00e feb8 	bl	8013428 <HAL_RTC_SetDate>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80046be:	f7ff fa8b 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	24001e24 	.word	0x24001e24
 80046d0:	58004000 	.word	0x58004000

080046d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b0b2      	sub	sp, #200	; 0xc8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	22c0      	movs	r2, #192	; 0xc0
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f017 fbeb 	bl	801bec0 <memset>
  if(rtcHandle->Instance==RTC)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a10      	ldr	r2, [pc, #64]	; (8004730 <HAL_RTC_MspInit+0x5c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d118      	bne.n	8004726 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80046f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RTC_MspInit+0x60>)
 8004702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f00c f812 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8004716:	f7ff fa5f 	bl	8003bd8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RTC_MspInit+0x64>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a06      	ldr	r2, [pc, #24]	; (8004738 <HAL_RTC_MspInit+0x64>)
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004726:	bf00      	nop
 8004728:	37c8      	adds	r7, #200	; 0xc8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	58004000 	.word	0x58004000
 8004734:	00019300 	.word	0x00019300
 8004738:	58024400 	.word	0x58024400

0800473c <init_adc_dma>:
 *
 * This function calibrates and starts DMA for ADC1 and ADC3.
 * It also enables the SPI peripherals.
 */
void init_adc_dma()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004740:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004748:	481c      	ldr	r0, [pc, #112]	; (80047bc <init_adc_dma+0x80>)
 800474a:	f003 fc49 	bl	8007fe0 <HAL_ADCEx_Calibration_Start>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <init_adc_dma+0x1c>
	{
		Error_Handler();
 8004754:	f7ff fa40 	bl	8003bd8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data, ADC1_NUM_CHANNELS) != HAL_OK)
 8004758:	220b      	movs	r2, #11
 800475a:	4919      	ldr	r1, [pc, #100]	; (80047c0 <init_adc_dma+0x84>)
 800475c:	4817      	ldr	r0, [pc, #92]	; (80047bc <init_adc_dma+0x80>)
 800475e:	f002 fd1d 	bl	800719c <HAL_ADC_Start_DMA>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <init_adc_dma+0x30>
	{
		Error_Handler();
 8004768:	f7ff fa36 	bl	8003bd8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800476c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004774:	4813      	ldr	r0, [pc, #76]	; (80047c4 <init_adc_dma+0x88>)
 8004776:	f003 fc33 	bl	8007fe0 <HAL_ADCEx_Calibration_Start>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <init_adc_dma+0x48>
	{
		Error_Handler();
 8004780:	f7ff fa2a 	bl	8003bd8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data, ADC3_NUM_CHANNELS) != HAL_OK)
 8004784:	2204      	movs	r2, #4
 8004786:	4910      	ldr	r1, [pc, #64]	; (80047c8 <init_adc_dma+0x8c>)
 8004788:	480e      	ldr	r0, [pc, #56]	; (80047c4 <init_adc_dma+0x88>)
 800478a:	f002 fd07 	bl	800719c <HAL_ADC_Start_DMA>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <init_adc_dma+0x5c>
	{
		Error_Handler();
 8004794:	f7ff fa20 	bl	8003bd8 <Error_Handler>
	}

	hspi2.Instance->CR1 |= 1 << 10;
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <init_adc_dma+0x90>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <init_adc_dma+0x90>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047a6:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <init_adc_dma+0x94>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <init_adc_dma+0x94>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	240000fc 	.word	0x240000fc
 80047c0:	24001e60 	.word	0x24001e60
 80047c4:	24000160 	.word	0x24000160
 80047c8:	24001e80 	.word	0x24001e80
 80047cc:	24001f1c 	.word	0x24001f1c
 80047d0:	24001e94 	.word	0x24001e94

080047d4 <sample_pmt_spi>:
 * @brief Samples PMT data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_pmt_spi(uint8_t *buffer)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80047dc:	2201      	movs	r2, #1
 80047de:	490b      	ldr	r1, [pc, #44]	; (800480c <sample_pmt_spi+0x38>)
 80047e0:	480b      	ldr	r0, [pc, #44]	; (8004810 <sample_pmt_spi+0x3c>)
 80047e2:	f00f f8eb 	bl	80139bc <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <sample_pmt_spi+0x38>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <sample_pmt_spi+0x38>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3301      	adds	r3, #1
 8004800:	7bba      	ldrb	r2, [r7, #14]
 8004802:	701a      	strb	r2, [r3, #0]
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	24001e8c 	.word	0x24001e8c
 8004810:	24001e94 	.word	0x24001e94

08004814 <sample_erpa_spi>:
 * @brief Samples ERPA data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_spi(uint8_t *buffer)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 800481c:	2201      	movs	r2, #1
 800481e:	490b      	ldr	r1, [pc, #44]	; (800484c <sample_erpa_spi+0x38>)
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <sample_erpa_spi+0x3c>)
 8004822:	f00f f8cb 	bl	80139bc <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <sample_erpa_spi+0x38>)
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b29b      	uxth	r3, r3
 800482e:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <sample_erpa_spi+0x38>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3301      	adds	r3, #1
 8004840:	7bba      	ldrb	r2, [r7, #14]
 8004842:	701a      	strb	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	24001e88 	.word	0x24001e88
 8004850:	24001f1c 	.word	0x24001f1c

08004854 <sample_erpa_adc>:
 * @brief Samples ERPA data from ADC.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_adc(uint16_t *buffer)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <sample_erpa_adc+0x20>)
 800485e:	885b      	ldrh	r3, [r3, #2]
 8004860:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	89fa      	ldrh	r2, [r7, #14]
 8004866:	801a      	strh	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	24001e60 	.word	0x24001e60

08004878 <sample_hk_i2c>:
 * @brief Samples HK data from I2C sensors.
 *
 * @param buffer Pointer to store the sampled data from sensors.
 */
void sample_hk_i2c(int16_t *buffer)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004880:	2390      	movs	r3, #144	; 0x90
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f8a2 	bl	80049cc <poll_i2c_sensor>
 8004888:	4603      	mov	r3, r0
 800488a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800488c:	2394      	movs	r3, #148	; 0x94
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f89c 	bl	80049cc <poll_i2c_sensor>
 8004894:	4603      	mov	r3, r0
 8004896:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004898:	2392      	movs	r3, #146	; 0x92
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f896 	bl	80049cc <poll_i2c_sensor>
 80048a0:	4603      	mov	r3, r0
 80048a2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80048a4:	2396      	movs	r3, #150	; 0x96
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f890 	bl	80049cc <poll_i2c_sensor>
 80048ac:	4603      	mov	r3, r0
 80048ae:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	89fa      	ldrh	r2, [r7, #14]
 80048b4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3302      	adds	r3, #2
 80048ba:	89ba      	ldrh	r2, [r7, #12]
 80048bc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	897a      	ldrh	r2, [r7, #10]
 80048c4:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3306      	adds	r3, #6
 80048ca:	893a      	ldrh	r2, [r7, #8]
 80048cc:	801a      	strh	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <sample_hk_adc1>:
 * @brief Samples HK data from ADC1 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc1(uint16_t *buffer)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <sample_hk_adc1+0xa0>)
 80048e2:	8a9b      	ldrh	r3, [r3, #20]
 80048e4:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <sample_hk_adc1+0xa0>)
 80048e8:	8a1b      	ldrh	r3, [r3, #16]
 80048ea:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <sample_hk_adc1+0xa0>)
 80048ee:	899b      	ldrh	r3, [r3, #12]
 80048f0:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <sample_hk_adc1+0xa0>)
 80048f4:	8a5b      	ldrh	r3, [r3, #18]
 80048f6:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <sample_hk_adc1+0xa0>)
 80048fa:	889b      	ldrh	r3, [r3, #4]
 80048fc:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <sample_hk_adc1+0xa0>)
 8004900:	88db      	ldrh	r3, [r3, #6]
 8004902:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <sample_hk_adc1+0xa0>)
 8004906:	89db      	ldrh	r3, [r3, #14]
 8004908:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <sample_hk_adc1+0xa0>)
 800490c:	891b      	ldrh	r3, [r3, #8]
 800490e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <sample_hk_adc1+0xa0>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <sample_hk_adc1+0xa0>)
 8004918:	895b      	ldrh	r3, [r3, #10]
 800491a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8bfa      	ldrh	r2, [r7, #30]
 8004920:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3302      	adds	r3, #2
 8004926:	8bba      	ldrh	r2, [r7, #28]
 8004928:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	8b7a      	ldrh	r2, [r7, #26]
 8004930:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3306      	adds	r3, #6
 8004936:	8b3a      	ldrh	r2, [r7, #24]
 8004938:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3308      	adds	r3, #8
 800493e:	8afa      	ldrh	r2, [r7, #22]
 8004940:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	330a      	adds	r3, #10
 8004946:	8aba      	ldrh	r2, [r7, #20]
 8004948:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	330c      	adds	r3, #12
 800494e:	8a7a      	ldrh	r2, [r7, #18]
 8004950:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	330e      	adds	r3, #14
 8004956:	8a3a      	ldrh	r2, [r7, #16]
 8004958:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3310      	adds	r3, #16
 800495e:	89fa      	ldrh	r2, [r7, #14]
 8004960:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3312      	adds	r3, #18
 8004966:	89ba      	ldrh	r2, [r7, #12]
 8004968:	801a      	strh	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	3724      	adds	r7, #36	; 0x24
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	24001e60 	.word	0x24001e60

0800497c <sample_hk_adc3>:
 * @brief Samples HK data from ADC3 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc3(uint16_t *buffer)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8004984:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <sample_hk_adc3+0x4c>)
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <sample_hk_adc3+0x4c>)
 800498c:	885b      	ldrh	r3, [r3, #2]
 800498e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <sample_hk_adc3+0x4c>)
 8004992:	889b      	ldrh	r3, [r3, #4]
 8004994:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <sample_hk_adc3+0x4c>)
 8004998:	88db      	ldrh	r3, [r3, #6]
 800499a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	89fa      	ldrh	r2, [r7, #14]
 80049a0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3302      	adds	r3, #2
 80049a6:	89ba      	ldrh	r2, [r7, #12]
 80049a8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	897a      	ldrh	r2, [r7, #10]
 80049b0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3306      	adds	r3, #6
 80049b6:	893a      	ldrh	r2, [r7, #8]
 80049b8:	801a      	strh	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	24001e80 	.word	0x24001e80

080049cc <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR I2C address of the temperature sensor.
 * @return int16_t The temperature data received from the sensor.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80049d6:	2200      	movs	r2, #0
 80049d8:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <poll_i2c_sensor+0x8c>)
 80049da:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	b299      	uxth	r1, r3
 80049e0:	2301      	movs	r3, #1
 80049e2:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <poll_i2c_sensor+0x8c>)
 80049e4:	481d      	ldr	r0, [pc, #116]	; (8004a5c <poll_i2c_sensor+0x90>)
 80049e6:	f008 f9d3 	bl	800cd90 <HAL_I2C_Master_Transmit_DMA>
 80049ea:	4603      	mov	r3, r0
 80049ec:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK)
 80049ee:	7b7b      	ldrb	r3, [r7, #13]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <poll_i2c_sensor+0x2e>
	{
		Error_Handler();
 80049f4:	f7ff f8f0 	bl	8003bd8 <Error_Handler>
 80049f8:	e027      	b.n	8004a4a <poll_i2c_sensor+0x7e>
	}
	else
	{
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80049fa:	bf00      	nop
 80049fc:	4817      	ldr	r0, [pc, #92]	; (8004a5c <poll_i2c_sensor+0x90>)
 80049fe:	f008 fcae 	bl	800d35e <HAL_I2C_GetState>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d1f9      	bne.n	80049fc <poll_i2c_sensor+0x30>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <poll_i2c_sensor+0x8c>)
 8004a10:	4812      	ldr	r0, [pc, #72]	; (8004a5c <poll_i2c_sensor+0x90>)
 8004a12:	f008 fad1 	bl	800cfb8 <HAL_I2C_Master_Receive_DMA>
 8004a16:	4603      	mov	r3, r0
 8004a18:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK)
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <poll_i2c_sensor+0x5a>
		{
			Error_Handler();
 8004a20:	f7ff f8da 	bl	8003bd8 <Error_Handler>
 8004a24:	e011      	b.n	8004a4a <poll_i2c_sensor+0x7e>
		}
		else
		{
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004a26:	bf00      	nop
 8004a28:	480c      	ldr	r0, [pc, #48]	; (8004a5c <poll_i2c_sensor+0x90>)
 8004a2a:	f008 fc98 	bl	800d35e <HAL_I2C_GetState>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d1f9      	bne.n	8004a28 <poll_i2c_sensor+0x5c>
			output = (int16_t) (raw_i2c[0] << 8);
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <poll_i2c_sensor+0x8c>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a40:	4a05      	ldr	r2, [pc, #20]	; (8004a58 <poll_i2c_sensor+0x8c>)
 8004a42:	7852      	ldrb	r2, [r2, #1]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	10db      	asrs	r3, r3, #3
 8004a48:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	24001e90 	.word	0x24001e90
 8004a5c:	24001b54 	.word	0x24001b54

08004a60 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a66:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <MX_SPI1_Init+0xac>)
 8004a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a6a:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a72:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a7c:	220f      	movs	r2, #15
 8004a7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004a94:	4b1c      	ldr	r3, [pc, #112]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a96:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004aba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004af2:	4805      	ldr	r0, [pc, #20]	; (8004b08 <MX_SPI1_Init+0xa8>)
 8004af4:	f00e fe3e 	bl	8013774 <HAL_SPI_Init>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004afe:	f7ff f86b 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	24001e94 	.word	0x24001e94
 8004b0c:	40013000 	.word	0x40013000

08004b10 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <MX_SPI2_Init+0xac>)
 8004b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b1a:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b46:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b52:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004b72:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004ba2:	4805      	ldr	r0, [pc, #20]	; (8004bb8 <MX_SPI2_Init+0xa8>)
 8004ba4:	f00e fde6 	bl	8013774 <HAL_SPI_Init>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004bae:	f7ff f813 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	24001f1c 	.word	0x24001f1c
 8004bbc:	40003800 	.word	0x40003800

08004bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b0bc      	sub	sp, #240	; 0xf0
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bd8:	f107 0318 	add.w	r3, r7, #24
 8004bdc:	22c0      	movs	r2, #192	; 0xc0
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f017 f96d 	bl	801bec0 <memset>
  if(spiHandle->Instance==SPI1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a83      	ldr	r2, [pc, #524]	; (8004df8 <HAL_SPI_MspInit+0x238>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d17c      	bne.n	8004cea <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c00:	f107 0318 	add.w	r3, r7, #24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f00b fd95 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004c10:	f7fe ffe2 	bl	8003bd8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c14:	4b79      	ldr	r3, [pc, #484]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c1a:	4a78      	ldr	r2, [pc, #480]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c24:	4b75      	ldr	r3, [pc, #468]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c32:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c38:	4a70      	ldr	r2, [pc, #448]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c3a:	f043 0302 	orr.w	r3, r3, #2
 8004c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c42:	4b6e      	ldr	r3, [pc, #440]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004c50:	2318      	movs	r3, #24
 8004c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c56:	2302      	movs	r3, #2
 8004c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c68:	2305      	movs	r3, #5
 8004c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c72:	4619      	mov	r1, r3
 8004c74:	4862      	ldr	r0, [pc, #392]	; (8004e00 <HAL_SPI_MspInit+0x240>)
 8004c76:	f007 fd03 	bl	800c680 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004c7a:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c7c:	4a62      	ldr	r2, [pc, #392]	; (8004e08 <HAL_SPI_MspInit+0x248>)
 8004c7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004c80:	4b60      	ldr	r3, [pc, #384]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c82:	2225      	movs	r2, #37	; 0x25
 8004c84:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c86:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c8c:	4b5d      	ldr	r3, [pc, #372]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c92:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c98:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c9a:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ca2:	4b58      	ldr	r3, [pc, #352]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ca8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004caa:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cb0:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cb6:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004cbc:	4851      	ldr	r0, [pc, #324]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cbe:	f004 f803 	bl	8008cc8 <HAL_DMA_Init>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004cc8:	f7fe ff86 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a4d      	ldr	r2, [pc, #308]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8004cd2:	4a4c      	ldr	r2, [pc, #304]	; (8004e04 <HAL_SPI_MspInit+0x244>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2105      	movs	r1, #5
 8004cdc:	2023      	movs	r0, #35	; 0x23
 8004cde:	f003 fbb4 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004ce2:	2023      	movs	r0, #35	; 0x23
 8004ce4:	f003 fbcb 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004ce8:	e081      	b.n	8004dee <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a47      	ldr	r2, [pc, #284]	; (8004e0c <HAL_SPI_MspInit+0x24c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d17c      	bne.n	8004dee <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d04:	f107 0318 	add.w	r3, r7, #24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f00b fd13 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004d14:	f7fe ff60 	bl	8003bd8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d18:	4b38      	ldr	r3, [pc, #224]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d1e:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d36:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d3c:	4a2f      	ldr	r2, [pc, #188]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d46:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_SPI_MspInit+0x23c>)
 8004d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004d54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d6e:	2305      	movs	r3, #5
 8004d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4821      	ldr	r0, [pc, #132]	; (8004e00 <HAL_SPI_MspInit+0x240>)
 8004d7c:	f007 fc80 	bl	800c680 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004d82:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_SPI_MspInit+0x254>)
 8004d84:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004d88:	2227      	movs	r2, #39	; 0x27
 8004d8a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d92:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d9e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dae:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004dc2:	4813      	ldr	r0, [pc, #76]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004dc4:	f003 ff80 	bl	8008cc8 <HAL_DMA_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004dce:	f7fe ff03 	bl	8003bd8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004dd6:	67da      	str	r2, [r3, #124]	; 0x7c
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <HAL_SPI_MspInit+0x250>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2105      	movs	r1, #5
 8004de2:	2024      	movs	r0, #36	; 0x24
 8004de4:	f003 fb31 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004de8:	2024      	movs	r0, #36	; 0x24
 8004dea:	f003 fb48 	bl	800847e <HAL_NVIC_EnableIRQ>
}
 8004dee:	bf00      	nop
 8004df0:	37f0      	adds	r7, #240	; 0xf0
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40013000 	.word	0x40013000
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	58020400 	.word	0x58020400
 8004e04:	24001fa4 	.word	0x24001fa4
 8004e08:	40020070 	.word	0x40020070
 8004e0c:	40003800 	.word	0x40003800
 8004e10:	2400201c 	.word	0x2400201c
 8004e14:	40020058 	.word	0x40020058

08004e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_MspInit+0x48>)
 8004e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e24:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <HAL_MspInit+0x48>)
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_MspInit+0x48>)
 8004e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	210f      	movs	r1, #15
 8004e40:	f06f 0001 	mvn.w	r0, #1
 8004e44:	f003 fb01 	bl	800844a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2105      	movs	r1, #5
 8004e4c:	2004      	movs	r0, #4
 8004e4e:	f003 fafc 	bl	800844a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004e52:	2004      	movs	r0, #4
 8004e54:	f003 fb13 	bl	800847e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	58024400 	.word	0x58024400

08004e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b090      	sub	sp, #64	; 0x40
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b0f      	cmp	r3, #15
 8004e70:	d827      	bhi.n	8004ec2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004e72:	2200      	movs	r2, #0
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	2036      	movs	r0, #54	; 0x36
 8004e78:	f003 fae7 	bl	800844a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e7c:	2036      	movs	r0, #54	; 0x36
 8004e7e:	f003 fafe 	bl	800847e <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004e82:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <HAL_InitTick+0xc4>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e88:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <HAL_InitTick+0xc8>)
 8004e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e8e:	4a27      	ldr	r2, [pc, #156]	; (8004f2c <HAL_InitTick+0xc8>)
 8004e90:	f043 0310 	orr.w	r3, r3, #16
 8004e94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_InitTick+0xc8>)
 8004e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ea6:	f107 0210 	add.w	r2, r7, #16
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f00b fbfd 	bl	80106b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_InitTick+0x6a>
 8004ec0:	e001      	b.n	8004ec6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e02b      	b.n	8004f1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f00b fbc7 	bl	8010658 <HAL_RCC_GetPCLK1Freq>
 8004eca:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004ecc:	e004      	b.n	8004ed8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004ece:	f00b fbc3 	bl	8010658 <HAL_RCC_GetPCLK1Freq>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_InitTick+0xcc>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	0c9b      	lsrs	r3, r3, #18
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_InitTick+0xd0>)
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <HAL_InitTick+0xd4>)
 8004eea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_InitTick+0xd0>)
 8004eee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ef2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004ef4:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <HAL_InitTick+0xd0>)
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <HAL_InitTick+0xd0>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_InitTick+0xd0>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004f06:	480b      	ldr	r0, [pc, #44]	; (8004f34 <HAL_InitTick+0xd0>)
 8004f08:	f00f f9d3 	bl	80142b2 <HAL_TIM_Base_Init>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004f12:	4808      	ldr	r0, [pc, #32]	; (8004f34 <HAL_InitTick+0xd0>)
 8004f14:	f00f fa24 	bl	8014360 <HAL_TIM_Base_Start_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	e000      	b.n	8004f1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3740      	adds	r7, #64	; 0x40
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	240000d4 	.word	0x240000d4
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	431bde83 	.word	0x431bde83
 8004f34:	24002094 	.word	0x24002094
 8004f38:	40001000 	.word	0x40001000

08004f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004f40:	e7fe      	b.n	8004f40 <NMI_Handler+0x4>
	...

08004f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	if ((FLASH->SR1 & FLASH_SR_DBECCERR) || (FLASH->SR2 & FLASH_SR_DBECCERR)) {
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HardFault_Handler+0x24>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HardFault_Handler+0x1e>
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HardFault_Handler+0x24>)
 8004f56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HardFault_Handler+0x22>
		FLASH_IRQHandler();
 8004f62:	f000 f813 	bl	8004f8c <FLASH_IRQHandler>
	}
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f66:	e7fe      	b.n	8004f66 <HardFault_Handler+0x22>
 8004f68:	52002000 	.word	0x52002000

08004f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f70:	e7fe      	b.n	8004f70 <MemManage_Handler+0x4>

08004f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f76:	e7fe      	b.n	8004f76 <BusFault_Handler+0x4>

08004f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f7c:	e7fe      	b.n	8004f7c <UsageFault_Handler+0x4>

08004f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004f90:	f006 ff38 	bl	800be04 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004f94:	bf00      	nop
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <DMA1_Stream0_IRQHandler+0x10>)
 8004f9e:	f005 fb73 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	240001c4 	.word	0x240001c4

08004fac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004fb0:	4802      	ldr	r0, [pc, #8]	; (8004fbc <DMA1_Stream1_IRQHandler+0x10>)
 8004fb2:	f005 fb69 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	2400023c 	.word	0x2400023c

08004fc0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004fc4:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <DMA1_Stream2_IRQHandler+0x10>)
 8004fc6:	f005 fb5f 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	24002258 	.word	0x24002258

08004fd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <DMA1_Stream3_IRQHandler+0x10>)
 8004fda:	f005 fb55 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	2400201c 	.word	0x2400201c

08004fe8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <DMA1_Stream4_IRQHandler+0x10>)
 8004fee:	f005 fb4b 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	24001fa4 	.word	0x24001fa4

08004ffc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <DMA1_Stream5_IRQHandler+0x10>)
 8005002:	f005 fb41 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	240002c8 	.word	0x240002c8

08005010 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <DMA1_Stream6_IRQHandler+0x10>)
 8005016:	f005 fb37 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	24001ba8 	.word	0x24001ba8

08005024 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005028:	4802      	ldr	r0, [pc, #8]	; (8005034 <TIM1_BRK_IRQHandler+0x10>)
 800502a:	f00f fcb0 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	240020e0 	.word	0x240020e0

08005038 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <TIM1_UP_IRQHandler+0x10>)
 800503e:	f00f fca6 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	240020e0 	.word	0x240020e0

0800504c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <TIM1_TRG_COM_IRQHandler+0x10>)
 8005052:	f00f fc9c 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	240020e0 	.word	0x240020e0

08005060 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <TIM1_CC_IRQHandler+0x10>)
 8005066:	f00f fc92 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	240020e0 	.word	0x240020e0

08005074 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <TIM2_IRQHandler+0x10>)
 800507a:	f00f fc88 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2400212c 	.word	0x2400212c

08005088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800508c:	4802      	ldr	r0, [pc, #8]	; (8005098 <TIM3_IRQHandler+0x10>)
 800508e:	f00f fc7e 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	24002178 	.word	0x24002178

0800509c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80050a0:	4802      	ldr	r0, [pc, #8]	; (80050ac <I2C1_EV_IRQHandler+0x10>)
 80050a2:	f008 f879 	bl	800d198 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	24001b54 	.word	0x24001b54

080050b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80050b4:	4802      	ldr	r0, [pc, #8]	; (80050c0 <I2C1_ER_IRQHandler+0x10>)
 80050b6:	f008 f889 	bl	800d1cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	24001b54 	.word	0x24001b54

080050c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80050c8:	4802      	ldr	r0, [pc, #8]	; (80050d4 <SPI1_IRQHandler+0x10>)
 80050ca:	f00e fdbf 	bl	8013c4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	24001e94 	.word	0x24001e94

080050d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80050dc:	4802      	ldr	r0, [pc, #8]	; (80050e8 <SPI2_IRQHandler+0x10>)
 80050de:	f00e fdb5 	bl	8013c4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	24001f1c 	.word	0x24001f1c

080050ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050f0:	4802      	ldr	r0, [pc, #8]	; (80050fc <USART1_IRQHandler+0x10>)
 80050f2:	f010 ffcf 	bl	8016094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	240021c4 	.word	0x240021c4

08005100 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <DMA1_Stream7_IRQHandler+0x10>)
 8005106:	f005 fabf 	bl	800a688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	24001c20 	.word	0x24001c20

08005114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <TIM6_DAC_IRQHandler+0x20>)
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8005122:	4804      	ldr	r0, [pc, #16]	; (8005134 <TIM6_DAC_IRQHandler+0x20>)
 8005124:	f003 fb51 	bl	80087ca <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005128:	4803      	ldr	r0, [pc, #12]	; (8005138 <TIM6_DAC_IRQHandler+0x24>)
 800512a:	f00f fc30 	bl	801498e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	240002b4 	.word	0x240002b4
 8005138:	24002094 	.word	0x24002094

0800513c <ECC_IRQHandler>:

/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RAMECC global interrupt
 */
void ECC_IRQHandler(void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
	// Domain 1
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m1, RAMECC_FLAGS_ALL)) {
 8005140:	4b4e      	ldr	r3, [pc, #312]	; (800527c <ECC_IRQHandler+0x140>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4a4d      	ldr	r2, [pc, #308]	; (800527c <ECC_IRQHandler+0x140>)
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	6053      	str	r3, [r2, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <ECC_IRQHandler+0x1e>
		HAL_RAMECC_IRQHandler(&hramecc1_m1);
 8005154:	4849      	ldr	r0, [pc, #292]	; (800527c <ECC_IRQHandler+0x140>)
 8005156:	f00a fa71 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m2, RAMECC_FLAGS_ALL)) {
 800515a:	4b49      	ldr	r3, [pc, #292]	; (8005280 <ECC_IRQHandler+0x144>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a47      	ldr	r2, [pc, #284]	; (8005280 <ECC_IRQHandler+0x144>)
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	6053      	str	r3, [r2, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <ECC_IRQHandler+0x38>
		HAL_RAMECC_IRQHandler(&hramecc1_m2);
 800516e:	4844      	ldr	r0, [pc, #272]	; (8005280 <ECC_IRQHandler+0x144>)
 8005170:	f00a fa64 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m3, RAMECC_FLAGS_ALL)) {
 8005174:	4b43      	ldr	r3, [pc, #268]	; (8005284 <ECC_IRQHandler+0x148>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4a42      	ldr	r2, [pc, #264]	; (8005284 <ECC_IRQHandler+0x148>)
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <ECC_IRQHandler+0x52>
		HAL_RAMECC_IRQHandler(&hramecc1_m3);
 8005188:	483e      	ldr	r0, [pc, #248]	; (8005284 <ECC_IRQHandler+0x148>)
 800518a:	f00a fa57 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m4, RAMECC_FLAGS_ALL)) {
 800518e:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <ECC_IRQHandler+0x14c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <ECC_IRQHandler+0x14c>)
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	6053      	str	r3, [r2, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <ECC_IRQHandler+0x6c>
		HAL_RAMECC_IRQHandler(&hramecc1_m4);
 80051a2:	4839      	ldr	r0, [pc, #228]	; (8005288 <ECC_IRQHandler+0x14c>)
 80051a4:	f00a fa4a 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m5, RAMECC_FLAGS_ALL)) {
 80051a8:	4b38      	ldr	r3, [pc, #224]	; (800528c <ECC_IRQHandler+0x150>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4a37      	ldr	r2, [pc, #220]	; (800528c <ECC_IRQHandler+0x150>)
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	6053      	str	r3, [r2, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <ECC_IRQHandler+0x86>
		HAL_RAMECC_IRQHandler(&hramecc1_m5);
 80051bc:	4833      	ldr	r0, [pc, #204]	; (800528c <ECC_IRQHandler+0x150>)
 80051be:	f00a fa3d 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}

	// Domain 2
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m1, RAMECC_FLAGS_ALL)) {
 80051c2:	4b33      	ldr	r3, [pc, #204]	; (8005290 <ECC_IRQHandler+0x154>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <ECC_IRQHandler+0x154>)
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	6053      	str	r3, [r2, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <ECC_IRQHandler+0xa0>
		HAL_RAMECC_IRQHandler(&hramecc2_m1);
 80051d6:	482e      	ldr	r0, [pc, #184]	; (8005290 <ECC_IRQHandler+0x154>)
 80051d8:	f00a fa30 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m2, RAMECC_FLAGS_ALL)) {
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <ECC_IRQHandler+0x158>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <ECC_IRQHandler+0x158>)
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	6053      	str	r3, [r2, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <ECC_IRQHandler+0xba>
		HAL_RAMECC_IRQHandler(&hramecc2_m2);
 80051f0:	4828      	ldr	r0, [pc, #160]	; (8005294 <ECC_IRQHandler+0x158>)
 80051f2:	f00a fa23 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m3, RAMECC_FLAGS_ALL)) {
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <ECC_IRQHandler+0x15c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <ECC_IRQHandler+0x15c>)
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <ECC_IRQHandler+0xd4>
		HAL_RAMECC_IRQHandler(&hramecc2_m3);
 800520a:	4823      	ldr	r0, [pc, #140]	; (8005298 <ECC_IRQHandler+0x15c>)
 800520c:	f00a fa16 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m4, RAMECC_FLAGS_ALL)) {
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <ECC_IRQHandler+0x160>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4a21      	ldr	r2, [pc, #132]	; (800529c <ECC_IRQHandler+0x160>)
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	6053      	str	r3, [r2, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <ECC_IRQHandler+0xee>
		HAL_RAMECC_IRQHandler(&hramecc2_m4);
 8005224:	481d      	ldr	r0, [pc, #116]	; (800529c <ECC_IRQHandler+0x160>)
 8005226:	f00a fa09 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m5, RAMECC_FLAGS_ALL)) {
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <ECC_IRQHandler+0x164>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <ECC_IRQHandler+0x164>)
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	6053      	str	r3, [r2, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <ECC_IRQHandler+0x108>
		HAL_RAMECC_IRQHandler(&hramecc2_m5);
 800523e:	4818      	ldr	r0, [pc, #96]	; (80052a0 <ECC_IRQHandler+0x164>)
 8005240:	f00a f9fc 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}

	// Domain 3
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m1, RAMECC_FLAGS_ALL)) {
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <ECC_IRQHandler+0x168>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <ECC_IRQHandler+0x168>)
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	6053      	str	r3, [r2, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <ECC_IRQHandler+0x122>
		HAL_RAMECC_IRQHandler(&hramecc3_m1);
 8005258:	4812      	ldr	r0, [pc, #72]	; (80052a4 <ECC_IRQHandler+0x168>)
 800525a:	f00a f9ef 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m2, RAMECC_FLAGS_ALL)) {
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <ECC_IRQHandler+0x16c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <ECC_IRQHandler+0x16c>)
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <ECC_IRQHandler+0x13c>
		HAL_RAMECC_IRQHandler(&hramecc3_m2);
 8005272:	480d      	ldr	r0, [pc, #52]	; (80052a8 <ECC_IRQHandler+0x16c>)
 8005274:	f00a f9e2 	bl	800f63c <HAL_RAMECC_IRQHandler>
	}
}
 8005278:	bf00      	nop
 800527a:	bd80      	pop	{r7, pc}
 800527c:	24001d64 	.word	0x24001d64
 8005280:	24001d74 	.word	0x24001d74
 8005284:	24001d84 	.word	0x24001d84
 8005288:	24001d94 	.word	0x24001d94
 800528c:	24001da4 	.word	0x24001da4
 8005290:	24001db4 	.word	0x24001db4
 8005294:	24001dc4 	.word	0x24001dc4
 8005298:	24001dd4 	.word	0x24001dd4
 800529c:	24001de4 	.word	0x24001de4
 80052a0:	24001df4 	.word	0x24001df4
 80052a4:	24001e04 	.word	0x24001e04
 80052a8:	24001e14 	.word	0x24001e14

080052ac <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80052b0:	4b37      	ldr	r3, [pc, #220]	; (8005390 <SystemInit+0xe4>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	4a36      	ldr	r2, [pc, #216]	; (8005390 <SystemInit+0xe4>)
 80052b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80052c0:	4b34      	ldr	r3, [pc, #208]	; (8005394 <SystemInit+0xe8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d807      	bhi.n	80052dc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <SystemInit+0xe8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 030f 	bic.w	r3, r3, #15
 80052d4:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <SystemInit+0xe8>)
 80052d6:	f043 0307 	orr.w	r3, r3, #7
 80052da:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80052dc:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <SystemInit+0xec>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2d      	ldr	r2, [pc, #180]	; (8005398 <SystemInit+0xec>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80052e8:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <SystemInit+0xec>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80052ee:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <SystemInit+0xec>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4929      	ldr	r1, [pc, #164]	; (8005398 <SystemInit+0xec>)
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <SystemInit+0xf0>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80052fa:	4b26      	ldr	r3, [pc, #152]	; (8005394 <SystemInit+0xe8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <SystemInit+0xe8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 030f 	bic.w	r3, r3, #15
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <SystemInit+0xe8>)
 8005310:	f043 0307 	orr.w	r3, r3, #7
 8005314:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <SystemInit+0xec>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800531c:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <SystemInit+0xec>)
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <SystemInit+0xec>)
 8005324:	2200      	movs	r2, #0
 8005326:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <SystemInit+0xec>)
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <SystemInit+0xf4>)
 800532c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <SystemInit+0xec>)
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <SystemInit+0xf8>)
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <SystemInit+0xec>)
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <SystemInit+0xfc>)
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <SystemInit+0xec>)
 800533c:	2200      	movs	r2, #0
 800533e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8005340:	4b15      	ldr	r3, [pc, #84]	; (8005398 <SystemInit+0xec>)
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <SystemInit+0xfc>)
 8005344:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <SystemInit+0xec>)
 8005348:	2200      	movs	r2, #0
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <SystemInit+0xec>)
 800534e:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <SystemInit+0xfc>)
 8005350:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <SystemInit+0xec>)
 8005354:	2200      	movs	r2, #0
 8005356:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <SystemInit+0xec>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <SystemInit+0xec>)
 800535e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005362:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <SystemInit+0xec>)
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <SystemInit+0x100>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <SystemInit+0x104>)
 8005370:	4013      	ands	r3, r2
 8005372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005376:	d202      	bcs.n	800537e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <SystemInit+0x108>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <SystemInit+0x10c>)
 8005380:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005384:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000ed00 	.word	0xe000ed00
 8005394:	52002000 	.word	0x52002000
 8005398:	58024400 	.word	0x58024400
 800539c:	eaf6ed7f 	.word	0xeaf6ed7f
 80053a0:	02020200 	.word	0x02020200
 80053a4:	01ff0000 	.word	0x01ff0000
 80053a8:	01010280 	.word	0x01010280
 80053ac:	5c001000 	.word	0x5c001000
 80053b0:	ffff0000 	.word	0xffff0000
 80053b4:	51008108 	.word	0x51008108
 80053b8:	52004000 	.word	0x52004000

080053bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b09a      	sub	sp, #104	; 0x68
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	611a      	str	r2, [r3, #16]
 80053ec:	615a      	str	r2, [r3, #20]
 80053ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	222c      	movs	r2, #44	; 0x2c
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f016 fd62 	bl	801bec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053fc:	4b44      	ldr	r3, [pc, #272]	; (8005510 <MX_TIM1_Init+0x154>)
 80053fe:	4a45      	ldr	r2, [pc, #276]	; (8005514 <MX_TIM1_Init+0x158>)
 8005400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8005402:	4b43      	ldr	r3, [pc, #268]	; (8005510 <MX_TIM1_Init+0x154>)
 8005404:	224a      	movs	r2, #74	; 0x4a
 8005406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <MX_TIM1_Init+0x154>)
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800540e:	4b40      	ldr	r3, [pc, #256]	; (8005510 <MX_TIM1_Init+0x154>)
 8005410:	f24f 4223 	movw	r2, #62499	; 0xf423
 8005414:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <MX_TIM1_Init+0x154>)
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800541c:	4b3c      	ldr	r3, [pc, #240]	; (8005510 <MX_TIM1_Init+0x154>)
 800541e:	2200      	movs	r2, #0
 8005420:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005422:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <MX_TIM1_Init+0x154>)
 8005424:	2200      	movs	r2, #0
 8005426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005428:	4839      	ldr	r0, [pc, #228]	; (8005510 <MX_TIM1_Init+0x154>)
 800542a:	f00e ff42 	bl	80142b2 <HAL_TIM_Base_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005434:	f7fe fbd0 	bl	8003bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800543c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800543e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005442:	4619      	mov	r1, r3
 8005444:	4832      	ldr	r0, [pc, #200]	; (8005510 <MX_TIM1_Init+0x154>)
 8005446:	f00f fcbd 	bl	8014dc4 <HAL_TIM_ConfigClockSource>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005450:	f7fe fbc2 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005454:	482e      	ldr	r0, [pc, #184]	; (8005510 <MX_TIM1_Init+0x154>)
 8005456:	f00f fa39 	bl	80148cc <HAL_TIM_PWM_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005460:	f7fe fbba 	bl	8003bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005464:	2300      	movs	r3, #0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005470:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005474:	4619      	mov	r1, r3
 8005476:	4826      	ldr	r0, [pc, #152]	; (8005510 <MX_TIM1_Init+0x154>)
 8005478:	f010 f9fa 	bl	8015870 <HAL_TIMEx_MasterConfigSynchronization>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005482:	f7fe fba9 	bl	8003bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005486:	2360      	movs	r3, #96	; 0x60
 8005488:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800548a:	f240 13df 	movw	r3, #479	; 0x1df
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005490:	2300      	movs	r3, #0
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005494:	2300      	movs	r3, #0
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005498:	2300      	movs	r3, #0
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800549c:	2300      	movs	r3, #0
 800549e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80054a0:	2300      	movs	r3, #0
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	4619      	mov	r1, r3
 80054ac:	4818      	ldr	r0, [pc, #96]	; (8005510 <MX_TIM1_Init+0x154>)
 80054ae:	f00f fb75 	bl	8014b9c <HAL_TIM_PWM_ConfigChannel>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80054b8:	f7fe fb8e 	bl	8003bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80054da:	2300      	movs	r3, #0
 80054dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80054de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4807      	ldr	r0, [pc, #28]	; (8005510 <MX_TIM1_Init+0x154>)
 80054f2:	f010 fa4b 	bl	801598c <HAL_TIMEx_ConfigBreakDeadTime>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80054fc:	f7fe fb6c 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005500:	4803      	ldr	r0, [pc, #12]	; (8005510 <MX_TIM1_Init+0x154>)
 8005502:	f000 f94b 	bl	800579c <HAL_TIM_MspPostInit>

}
 8005506:	bf00      	nop
 8005508:	3768      	adds	r7, #104	; 0x68
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	240020e0 	.word	0x240020e0
 8005514:	40010000 	.word	0x40010000

08005518 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08e      	sub	sp, #56	; 0x38
 800551c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800551e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	609a      	str	r2, [r3, #8]
 800552a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800552c:	f107 031c 	add.w	r3, r7, #28
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005538:	463b      	mov	r3, r7
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	611a      	str	r2, [r3, #16]
 8005546:	615a      	str	r2, [r3, #20]
 8005548:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800554a:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <MX_TIM2_Init+0xe8>)
 800554c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005550:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8005552:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <MX_TIM2_Init+0xe8>)
 8005554:	224a      	movs	r2, #74	; 0x4a
 8005556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005558:	4b29      	ldr	r3, [pc, #164]	; (8005600 <MX_TIM2_Init+0xe8>)
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800555e:	4b28      	ldr	r3, [pc, #160]	; (8005600 <MX_TIM2_Init+0xe8>)
 8005560:	f640 4234 	movw	r2, #3124	; 0xc34
 8005564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005566:	4b26      	ldr	r3, [pc, #152]	; (8005600 <MX_TIM2_Init+0xe8>)
 8005568:	2200      	movs	r2, #0
 800556a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800556c:	4b24      	ldr	r3, [pc, #144]	; (8005600 <MX_TIM2_Init+0xe8>)
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005572:	4823      	ldr	r0, [pc, #140]	; (8005600 <MX_TIM2_Init+0xe8>)
 8005574:	f00e fe9d 	bl	80142b2 <HAL_TIM_Base_Init>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800557e:	f7fe fb2b 	bl	8003bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800558c:	4619      	mov	r1, r3
 800558e:	481c      	ldr	r0, [pc, #112]	; (8005600 <MX_TIM2_Init+0xe8>)
 8005590:	f00f fc18 	bl	8014dc4 <HAL_TIM_ConfigClockSource>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800559a:	f7fe fb1d 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800559e:	4818      	ldr	r0, [pc, #96]	; (8005600 <MX_TIM2_Init+0xe8>)
 80055a0:	f00f f994 	bl	80148cc <HAL_TIM_PWM_Init>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80055aa:	f7fe fb15 	bl	8003bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055ae:	2320      	movs	r3, #32
 80055b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055b6:	f107 031c 	add.w	r3, r7, #28
 80055ba:	4619      	mov	r1, r3
 80055bc:	4810      	ldr	r0, [pc, #64]	; (8005600 <MX_TIM2_Init+0xe8>)
 80055be:	f010 f957 	bl	8015870 <HAL_TIMEx_MasterConfigSynchronization>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80055c8:	f7fe fb06 	bl	8003bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055cc:	2360      	movs	r3, #96	; 0x60
 80055ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055dc:	463b      	mov	r3, r7
 80055de:	220c      	movs	r2, #12
 80055e0:	4619      	mov	r1, r3
 80055e2:	4807      	ldr	r0, [pc, #28]	; (8005600 <MX_TIM2_Init+0xe8>)
 80055e4:	f00f fada 	bl	8014b9c <HAL_TIM_PWM_ConfigChannel>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80055ee:	f7fe faf3 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80055f2:	4803      	ldr	r0, [pc, #12]	; (8005600 <MX_TIM2_Init+0xe8>)
 80055f4:	f000 f8d2 	bl	800579c <HAL_TIM_MspPostInit>

}
 80055f8:	bf00      	nop
 80055fa:	3738      	adds	r7, #56	; 0x38
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	2400212c 	.word	0x2400212c

08005604 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005622:	4b1e      	ldr	r3, [pc, #120]	; (800569c <MX_TIM3_Init+0x98>)
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <MX_TIM3_Init+0x9c>)
 8005626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500-1;
 8005628:	4b1c      	ldr	r3, [pc, #112]	; (800569c <MX_TIM3_Init+0x98>)
 800562a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800562e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <MX_TIM3_Init+0x98>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35000-1;
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <MX_TIM3_Init+0x98>)
 8005638:	f648 02b7 	movw	r2, #34999	; 0x88b7
 800563c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800563e:	4b17      	ldr	r3, [pc, #92]	; (800569c <MX_TIM3_Init+0x98>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005644:	4b15      	ldr	r3, [pc, #84]	; (800569c <MX_TIM3_Init+0x98>)
 8005646:	2200      	movs	r2, #0
 8005648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800564a:	4814      	ldr	r0, [pc, #80]	; (800569c <MX_TIM3_Init+0x98>)
 800564c:	f00e fe31 	bl	80142b2 <HAL_TIM_Base_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005656:	f7fe fabf 	bl	8003bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800565a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800565e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005660:	f107 0310 	add.w	r3, r7, #16
 8005664:	4619      	mov	r1, r3
 8005666:	480d      	ldr	r0, [pc, #52]	; (800569c <MX_TIM3_Init+0x98>)
 8005668:	f00f fbac 	bl	8014dc4 <HAL_TIM_ConfigClockSource>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8005672:	f7fe fab1 	bl	8003bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4806      	ldr	r0, [pc, #24]	; (800569c <MX_TIM3_Init+0x98>)
 8005684:	f010 f8f4 	bl	8015870 <HAL_TIMEx_MasterConfigSynchronization>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800568e:	f7fe faa3 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	24002178 	.word	0x24002178
 80056a0:	40000400 	.word	0x40000400

080056a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a37      	ldr	r2, [pc, #220]	; (8005790 <HAL_TIM_Base_MspInit+0xec>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d12f      	bne.n	8005716 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 80056b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056bc:	4a35      	ldr	r2, [pc, #212]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056c6:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 80056c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80056d4:	2200      	movs	r2, #0
 80056d6:	2105      	movs	r1, #5
 80056d8:	2018      	movs	r0, #24
 80056da:	f002 feb6 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80056de:	2018      	movs	r0, #24
 80056e0:	f002 fecd 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80056e4:	2200      	movs	r2, #0
 80056e6:	2105      	movs	r1, #5
 80056e8:	2019      	movs	r0, #25
 80056ea:	f002 feae 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80056ee:	2019      	movs	r0, #25
 80056f0:	f002 fec5 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80056f4:	2200      	movs	r2, #0
 80056f6:	2105      	movs	r1, #5
 80056f8:	201a      	movs	r0, #26
 80056fa:	f002 fea6 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80056fe:	201a      	movs	r0, #26
 8005700:	f002 febd 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005704:	2200      	movs	r2, #0
 8005706:	2105      	movs	r1, #5
 8005708:	201b      	movs	r0, #27
 800570a:	f002 fe9e 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800570e:	201b      	movs	r0, #27
 8005710:	f002 feb5 	bl	800847e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005714:	e038      	b.n	8005788 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d117      	bne.n	8005750 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005720:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 8005722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005726:	4a1b      	ldr	r2, [pc, #108]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 8005732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800573e:	2200      	movs	r2, #0
 8005740:	2105      	movs	r1, #5
 8005742:	201c      	movs	r0, #28
 8005744:	f002 fe81 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005748:	201c      	movs	r0, #28
 800574a:	f002 fe98 	bl	800847e <HAL_NVIC_EnableIRQ>
}
 800574e:	e01b      	b.n	8005788 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a10      	ldr	r2, [pc, #64]	; (8005798 <HAL_TIM_Base_MspInit+0xf4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d116      	bne.n	8005788 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800575a:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 800575c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005760:	4a0c      	ldr	r2, [pc, #48]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_TIM_Base_MspInit+0xf0>)
 800576c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005778:	2200      	movs	r2, #0
 800577a:	2105      	movs	r1, #5
 800577c:	201d      	movs	r0, #29
 800577e:	f002 fe64 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005782:	201d      	movs	r0, #29
 8005784:	f002 fe7b 	bl	800847e <HAL_NVIC_EnableIRQ>
}
 8005788:	bf00      	nop
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40010000 	.word	0x40010000
 8005794:	58024400 	.word	0x58024400
 8005798:	40000400 	.word	0x40000400

0800579c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a4:	f107 0314 	add.w	r3, r7, #20
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a26      	ldr	r2, [pc, #152]	; (8005854 <HAL_TIM_MspPostInit+0xb8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d120      	bne.n	8005800 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057be:	4b26      	ldr	r3, [pc, #152]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 80057c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c4:	4a24      	ldr	r2, [pc, #144]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 80057d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e2:	2302      	movs	r3, #2
 80057e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ea:	2300      	movs	r3, #0
 80057ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	4619      	mov	r1, r3
 80057f8:	4818      	ldr	r0, [pc, #96]	; (800585c <HAL_TIM_MspPostInit+0xc0>)
 80057fa:	f006 ff41 	bl	800c680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80057fe:	e024      	b.n	800584a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d11f      	bne.n	800584a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 800580c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005810:	4a11      	ldr	r2, [pc, #68]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 8005812:	f043 0302 	orr.w	r3, r3, #2
 8005816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <HAL_TIM_MspPostInit+0xbc>)
 800581c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800582c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800582e:	2302      	movs	r3, #2
 8005830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800583a:	2301      	movs	r3, #1
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	4619      	mov	r1, r3
 8005844:	4806      	ldr	r0, [pc, #24]	; (8005860 <HAL_TIM_MspPostInit+0xc4>)
 8005846:	f006 ff1b 	bl	800c680 <HAL_GPIO_Init>
}
 800584a:	bf00      	nop
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	58024400 	.word	0x58024400
 800585c:	58020000 	.word	0x58020000
 8005860:	58020400 	.word	0x58020400

08005864 <get_uptime>:
 * @brief Gets the system uptime and stores it in a buffer.
 *
 * @param buffer Pointer to a buffer where the uptime will be stored as four bytes.
 */
void get_uptime(uint8_t *buffer)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <get_uptime+0x94>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <get_uptime+0x98>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60fb      	str	r3, [r7, #12]

	// Ensuring uptime_millis hasn't rolled over
	if (ms != uptime_millis)
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <get_uptime+0x94>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d005      	beq.n	8005892 <get_uptime+0x2e>
	{
		ms = uptime_millis;
 8005886:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <get_uptime+0x94>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <get_uptime+0x98>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005898:	fb03 f202 	mul.w	r2, r3, r2
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <get_uptime+0x98>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4917      	ldr	r1, [pc, #92]	; (8005900 <get_uptime+0x9c>)
 80058a4:	fba1 1303 	umull	r1, r3, r1, r3
 80058a8:	099b      	lsrs	r3, r3, #6
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]

	if (ms == 0)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <get_uptime+0x5a>
	{
		uptime = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	0e1b      	lsrs	r3, r3, #24
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	0c1a      	lsrs	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3301      	adds	r3, #1
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	0a1a      	lsrs	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3302      	adds	r3, #2
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3303      	adds	r3, #3
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	24001cf8 	.word	0x24001cf8
 80058fc:	e000e010 	.word	0xe000e010
 8005900:	10624dd3 	.word	0x10624dd3

08005904 <get_unix_time>:
 * @brief Retrieves the current Unix time and milliseconds, storing them in a buffer.
 *
 * @param buffer Pointer to a buffer where the Unix time (4 bytes) and milliseconds (2 bytes) will be stored.
 */
void get_unix_time(uint8_t* buffer)
{
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	b09d      	sub	sp, #116	; 0x74
 800590a:	af00      	add	r7, sp, #0
 800590c:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800590e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005912:	2200      	movs	r2, #0
 8005914:	4619      	mov	r1, r3
 8005916:	4893      	ldr	r0, [pc, #588]	; (8005b64 <get_unix_time+0x260>)
 8005918:	f00d fd2a 	bl	8013370 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800591c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005920:	2200      	movs	r2, #0
 8005922:	4619      	mov	r1, r3
 8005924:	488f      	ldr	r0, [pc, #572]	; (8005b64 <get_unix_time+0x260>)
 8005926:	f00d fe07 	bl	8013538 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 800592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	4b8d      	ldr	r3, [pc, #564]	; (8005b68 <get_unix_time+0x264>)
 8005934:	fba3 2302 	umull	r2, r3, r3, r2
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	y = current_date.Year + 2000;
 800594a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800594e:	b29b      	uxth	r3, r3
 8005950:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005954:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 8005958:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800595c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 8005960:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005968:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800596c:	2b02      	cmp	r3, #2
 800596e:	d809      	bhi.n	8005984 <get_unix_time+0x80>
	{
		m += 12;
 8005970:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005974:	330c      	adds	r3, #12
 8005976:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 800597a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800597e:	3b01      	subs	r3, #1
 8005980:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005984:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005988:	f240 136d 	movw	r3, #365	; 0x16d
 800598c:	fb03 f202 	mul.w	r2, r3, r2
 8005990:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005994:	089b      	lsrs	r3, r3, #2
 8005996:	b29b      	uxth	r3, r3
 8005998:	18d1      	adds	r1, r2, r3
 800599a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800599e:	4b73      	ldr	r3, [pc, #460]	; (8005b6c <get_unix_time+0x268>)
 80059a0:	fba3 2302 	umull	r2, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	1ac9      	subs	r1, r1, r3
 80059aa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80059ae:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <get_unix_time+0x268>)
 80059b0:	fba3 2302 	umull	r2, r3, r3, r2
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	440b      	add	r3, r1
 80059ba:	17da      	asrs	r2, r3, #31
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	627a      	str	r2, [r7, #36]	; 0x24
 80059c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059c4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 80059c8:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4618      	mov	r0, r3
 80059d6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	1899      	adds	r1, r3, r2
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <get_unix_time+0x26c>)
 80059e4:	fb83 2301 	smull	r2, r3, r3, r1
 80059e8:	105a      	asrs	r2, r3, #1
 80059ea:	17cb      	asrs	r3, r1, #31
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	18c2      	adds	r2, r0, r3
 80059f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059f4:	4413      	add	r3, r2
 80059f6:	17da      	asrs	r2, r3, #31
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
 80059fa:	637a      	str	r2, [r7, #52]	; 0x34
 80059fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a02:	1851      	adds	r1, r2, r1
 8005a04:	61b9      	str	r1, [r7, #24]
 8005a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a08:	eb43 0101 	adc.w	r1, r3, r1
 8005a0c:	61f9      	str	r1, [r7, #28]
 8005a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a12:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005a16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a1a:	4956      	ldr	r1, [pc, #344]	; (8005b74 <get_unix_time+0x270>)
 8005a1c:	1851      	adds	r1, r2, r1
 8005a1e:	6139      	str	r1, [r7, #16]
 8005a20:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a2a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8005a2e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	1896      	adds	r6, r2, r2
 8005a38:	60be      	str	r6, [r7, #8]
 8005a3a:	415b      	adcs	r3, r3
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a42:	eb12 0800 	adds.w	r8, r2, r0
 8005a46:	eb43 0901 	adc.w	r9, r3, r1
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005a56:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005a5a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005a5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005a62:	eb63 0509 	sbc.w	r5, r3, r9
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	012b      	lsls	r3, r5, #4
 8005a70:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005a74:	0122      	lsls	r2, r4, #4
 8005a76:	ebb2 0a04 	subs.w	sl, r2, r4
 8005a7a:	eb63 0b05 	sbc.w	fp, r3, r5
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005a8a:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8005a8e:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8005a92:	4692      	mov	sl, r2
 8005a94:	469b      	mov	fp, r3
 8005a96:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 8005a9a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005aa4:	fb03 f202 	mul.w	r2, r3, r2
 8005aa8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005aac:	4619      	mov	r1, r3
 8005aae:	460b      	mov	r3, r1
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	1a5b      	subs	r3, r3, r1
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005abc:	4413      	add	r3, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ac8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005acc:	4621      	mov	r1, r4
 8005ace:	1851      	adds	r1, r2, r1
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	eb43 0101 	adc.w	r1, r3, r1
 8005ad8:	6079      	str	r1, [r7, #4]
 8005ada:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ade:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 8005ae2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	0e02      	lsrs	r2, r0, #24
 8005af0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005af4:	0e0b      	lsrs	r3, r1, #24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afa:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005afc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	0c02      	lsrs	r2, r0, #16
 8005b0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b0e:	0c0b      	lsrs	r3, r1, #16
 8005b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b12:	3101      	adds	r1, #1
 8005b14:	b2d3      	uxtb	r3, r2
 8005b16:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 8005b18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	0a02      	lsrs	r2, r0, #8
 8005b26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005b2a:	0a0b      	lsrs	r3, r1, #8
 8005b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b2e:	3102      	adds	r1, #2
 8005b30:	b2d3      	uxtb	r3, r2
 8005b32:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8005b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b36:	3303      	adds	r3, #3
 8005b38:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005b3c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 8005b3e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b48:	3304      	adds	r3, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	3305      	adds	r3, #5
 8005b52:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3774      	adds	r7, #116	; 0x74
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	24001e24 	.word	0x24001e24
 8005b68:	cccccccd 	.word	0xcccccccd
 8005b6c:	51eb851f 	.word	0x51eb851f
 8005b70:	66666667 	.word	0x66666667
 8005b74:	fff50537 	.word	0xfff50537

08005b78 <calibrateRTC>:
 *               [6] = Second
 *               [7] = ms MSB
 *               [8] = ms LSB
 */
void calibrateRTC(uint8_t *buffer)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08c      	sub	sp, #48	; 0x30
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	789b      	ldrb	r3, [r3, #2]
 8005b8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	78db      	ldrb	r3, [r3, #3]
 8005b94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	791b      	ldrb	r3, [r3, #4]
 8005b9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	795b      	ldrb	r3, [r3, #5]
 8005ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	799b      	ldrb	r3, [r3, #6]
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3307      	adds	r3, #7
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	b21a      	sxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b21b      	sxth	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b21b      	sxth	r3, r3
 8005bc6:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005bd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be4:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bea:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005bec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005bf0:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8005bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bf4:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005bf6:	f107 0320 	add.w	r3, r7, #32
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	480b      	ldr	r0, [pc, #44]	; (8005c2c <calibrateRTC+0xb4>)
 8005c00:	f00d fc12 	bl	8013428 <HAL_RTC_SetDate>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK)
 8005c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <calibrateRTC+0x9e>
	{
		Error_Handler();
 8005c12:	f7fd ffe1 	bl	8003bd8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4803      	ldr	r0, [pc, #12]	; (8005c2c <calibrateRTC+0xb4>)
 8005c20:	f000 f806 	bl	8005c30 <RTC_SetTime>
}
 8005c24:	bf00      	nop
 8005c26:	3730      	adds	r7, #48	; 0x30
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	24001e24 	.word	0x24001e24

08005c30 <RTC_SetTime>:
 * @param Format Specifies the format of the time (24-hour or 12-hour).
 *
 * @retval HAL_StatusTypeDef HAL_OK on success, HAL_ERROR on failure.
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	__HAL_LOCK(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <RTC_SetTime+0x1a>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e051      	b.n	8005cee <RTC_SetTime+0xbe>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	22ca      	movs	r2, #202	; 0xca
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2253      	movs	r2, #83	; 0x53
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

	status = RTC_EnterInitMode(hrtc);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f00d fcd6 	bl	801361c <RTC_EnterInitMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d129      	bne.n	8005cce <RTC_SetTime+0x9e>
	{
		sTime->TimeFormat = 0x00U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));
		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f00d fd3b 	bl	8013700 <RTC_ByteToBcd2>
 8005c8a:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005c8c:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f00d fd34 	bl	8013700 <RTC_ByteToBcd2>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	789b      	ldrb	r3, [r3, #2]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f00d fd2c 	bl	8013700 <RTC_ByteToBcd2>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	78db      	ldrb	r3, [r3, #3]
 8005cb2:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	6939      	ldr	r1, [r7, #16]
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <RTC_SetTime+0xc8>)
 8005cc0:	400b      	ands	r3, r1
 8005cc2:	6013      	str	r3, [r2, #0]

		status = RTC_ExitInitMode(hrtc);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f00d fcdd 	bl	8013684 <RTC_ExitInitMode>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]
	}

	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	22ff      	movs	r2, #255	; 0xff
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK)
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <RTC_SetTime+0xb4>
	{
		hrtc->State = HAL_RTC_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	007f7f7f 	.word	0x007f7f7f

08005cfc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d02:	4a31      	ldr	r2, [pc, #196]	; (8005dc8 <MX_USART1_UART_Init+0xcc>)
 8005d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d08:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d0e:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d22:	220c      	movs	r2, #12
 8005d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d38:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d3e:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d44:	481f      	ldr	r0, [pc, #124]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d46:	f00f febd 	bl	8015ac4 <HAL_UART_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005d50:	f7fd ff42 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d54:	2100      	movs	r1, #0
 8005d56:	481b      	ldr	r0, [pc, #108]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d58:	f012 fc43 	bl	80185e2 <HAL_UARTEx_SetTxFifoThreshold>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005d62:	f7fd ff39 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d66:	2100      	movs	r1, #0
 8005d68:	4816      	ldr	r0, [pc, #88]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d6a:	f012 fc78 	bl	801865e <HAL_UARTEx_SetRxFifoThreshold>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005d74:	f7fd ff30 	bl	8003bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005d78:	4812      	ldr	r0, [pc, #72]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d7a:	f012 fbf9 	bl	8018570 <HAL_UARTEx_DisableFifoMode>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005d84:	f7fd ff28 	bl	8003bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005d88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d8c:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d8e:	f012 fc66 	bl	801865e <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005d92:	480c      	ldr	r0, [pc, #48]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d94:	f012 fbb1 	bl	80184fa <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005d98:	480a      	ldr	r0, [pc, #40]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005d9a:	f012 fb7b 	bl	8018494 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dac:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <MX_USART1_UART_Init+0xc8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	240021c4 	.word	0x240021c4
 8005dc8:	40011000 	.word	0x40011000

08005dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0ba      	sub	sp, #232	; 0xe8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005de4:	f107 0310 	add.w	r3, r7, #16
 8005de8:	22c0      	movs	r2, #192	; 0xc0
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f016 f867 	bl	801bec0 <memset>
  if(uartHandle->Instance==USART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a41      	ldr	r2, [pc, #260]	; (8005efc <HAL_UART_MspInit+0x130>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d17b      	bne.n	8005ef4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005dfc:	f04f 0201 	mov.w	r2, #1
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005e08:	2318      	movs	r3, #24
 8005e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	4618      	mov	r0, r3
 8005e14:	f00a fc8e 	bl	8010734 <HAL_RCCEx_PeriphCLKConfig>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005e1e:	f7fd fedb 	bl	8003bd8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e28:	4a35      	ldr	r2, [pc, #212]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e2a:	f043 0310 	orr.w	r3, r3, #16
 8005e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e32:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e46:	4a2e      	ldr	r2, [pc, #184]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e50:	4b2b      	ldr	r3, [pc, #172]	; (8005f00 <HAL_UART_MspInit+0x134>)
 8005e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e66:	2302      	movs	r3, #2
 8005e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e78:	2307      	movs	r3, #7
 8005e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005e82:	4619      	mov	r1, r3
 8005e84:	481f      	ldr	r0, [pc, #124]	; (8005f04 <HAL_UART_MspInit+0x138>)
 8005e86:	f006 fbfb 	bl	800c680 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <HAL_UART_MspInit+0x140>)
 8005e8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005e90:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005e92:	222a      	movs	r2, #42	; 0x2a
 8005e94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005e98:	2240      	movs	r2, #64	; 0x40
 8005e9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eb0:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005ec8:	480f      	ldr	r0, [pc, #60]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005eca:	f002 fefd 	bl	8008cc8 <HAL_DMA_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005ed4:	f7fd fe80 	bl	8003bd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005edc:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_UART_MspInit+0x13c>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2105      	movs	r1, #5
 8005ee8:	2025      	movs	r0, #37	; 0x25
 8005eea:	f002 faae 	bl	800844a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005eee:	2025      	movs	r0, #37	; 0x25
 8005ef0:	f002 fac5 	bl	800847e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	37e8      	adds	r7, #232	; 0xe8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40011000 	.word	0x40011000
 8005f00:	58024400 	.word	0x58024400
 8005f04:	58020000 	.word	0x58020000
 8005f08:	24002258 	.word	0x24002258
 8005f0c:	40020040 	.word	0x40020040

08005f10 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <HAL_UART_MspDeInit+0x44>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d114      	bne.n	8005f4c <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005f22:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <HAL_UART_MspDeInit+0x48>)
 8005f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_UART_MspDeInit+0x48>)
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005f32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f36:	4809      	ldr	r0, [pc, #36]	; (8005f5c <HAL_UART_MspDeInit+0x4c>)
 8005f38:	f006 fd52 	bl	800c9e0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f40:	4618      	mov	r0, r3
 8005f42:	f003 fa1d 	bl	8009380 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005f46:	2025      	movs	r0, #37	; 0x25
 8005f48:	f002 faa7 	bl	800849a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40011000 	.word	0x40011000
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	58020000 	.word	0x58020000

08005f60 <voltage_monitor_init>:
 * @brief Initializes the voltage monitoring system by setting up each rail's
 *        parameters such as name, error count, enable status, voltage limits,
 *        and out-of-bound counters.
 */
void voltage_monitor_init()
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005f64:	4bc0      	ldr	r3, [pc, #768]	; (8006268 <voltage_monitor_init+0x308>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005f6a:	4bbf      	ldr	r3, [pc, #764]	; (8006268 <voltage_monitor_init+0x308>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = ENABLED;
 8005f70:	4bbd      	ldr	r3, [pc, #756]	; (8006268 <voltage_monitor_init+0x308>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005f76:	4bbc      	ldr	r3, [pc, #752]	; (8006268 <voltage_monitor_init+0x308>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = RAIL_VSENSE_MAX;
 8005f7c:	4bba      	ldr	r3, [pc, #744]	; (8006268 <voltage_monitor_init+0x308>)
 8005f7e:	f240 328a 	movw	r2, #906	; 0x38a
 8005f82:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = RAIL_VSENSE_MIN;
 8005f84:	4bb8      	ldr	r3, [pc, #736]	; (8006268 <voltage_monitor_init+0x308>)
 8005f86:	f44f 7215 	mov.w	r2, #596	; 0x254
 8005f8a:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 8005f8c:	4bb6      	ldr	r3, [pc, #728]	; (8006268 <voltage_monitor_init+0x308>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 8005f92:	4bb5      	ldr	r3, [pc, #724]	; (8006268 <voltage_monitor_init+0x308>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 8005f98:	4bb3      	ldr	r3, [pc, #716]	; (8006268 <voltage_monitor_init+0x308>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	81da      	strh	r2, [r3, #14]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005f9e:	4bb2      	ldr	r3, [pc, #712]	; (8006268 <voltage_monitor_init+0x308>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8005fa4:	4bb0      	ldr	r3, [pc, #704]	; (8006268 <voltage_monitor_init+0x308>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = ENABLED;
 8005faa:	4baf      	ldr	r3, [pc, #700]	; (8006268 <voltage_monitor_init+0x308>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 8005fb0:	4bad      	ldr	r3, [pc, #692]	; (8006268 <voltage_monitor_init+0x308>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = RAIL_VREFINT_MAX;
 8005fb6:	4bac      	ldr	r3, [pc, #688]	; (8006268 <voltage_monitor_init+0x308>)
 8005fb8:	f240 6215 	movw	r2, #1557	; 0x615
 8005fbc:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = RAIL_VREFINT_MIN;
 8005fbe:	4baa      	ldr	r3, [pc, #680]	; (8006268 <voltage_monitor_init+0x308>)
 8005fc0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8005fc4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 8005fc6:	4ba8      	ldr	r3, [pc, #672]	; (8006268 <voltage_monitor_init+0x308>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 8005fcc:	4ba6      	ldr	r3, [pc, #664]	; (8006268 <voltage_monitor_init+0x308>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 8005fd2:	4ba5      	ldr	r3, [pc, #660]	; (8006268 <voltage_monitor_init+0x308>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8005fd8:	4ba3      	ldr	r3, [pc, #652]	; (8006268 <voltage_monitor_init+0x308>)
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005fe0:	4ba1      	ldr	r3, [pc, #644]	; (8006268 <voltage_monitor_init+0x308>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = ENABLED;
 8005fe8:	4b9f      	ldr	r3, [pc, #636]	; (8006268 <voltage_monitor_init+0x308>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 8005ff0:	4b9d      	ldr	r3, [pc, #628]	; (8006268 <voltage_monitor_init+0x308>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = RAIL_TEMP1_MAX;
 8005ff6:	4b9c      	ldr	r3, [pc, #624]	; (8006268 <voltage_monitor_init+0x308>)
 8005ff8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ffc:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = RAIL_TEMP1_MIN;
 8005ffe:	4b9a      	ldr	r3, [pc, #616]	; (8006268 <voltage_monitor_init+0x308>)
 8006000:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006004:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 8006006:	4b98      	ldr	r3, [pc, #608]	; (8006268 <voltage_monitor_init+0x308>)
 8006008:	2200      	movs	r2, #0
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 800600c:	4b96      	ldr	r3, [pc, #600]	; (8006268 <voltage_monitor_init+0x308>)
 800600e:	2200      	movs	r2, #0
 8006010:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 8006012:	4b95      	ldr	r3, [pc, #596]	; (8006268 <voltage_monitor_init+0x308>)
 8006014:	2200      	movs	r2, #0
 8006016:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8006018:	4b93      	ldr	r3, [pc, #588]	; (8006268 <voltage_monitor_init+0x308>)
 800601a:	2203      	movs	r2, #3
 800601c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8006020:	4b91      	ldr	r3, [pc, #580]	; (8006268 <voltage_monitor_init+0x308>)
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = ENABLED;
 8006028:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <voltage_monitor_init+0x308>)
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 8006030:	4b8d      	ldr	r3, [pc, #564]	; (8006268 <voltage_monitor_init+0x308>)
 8006032:	2200      	movs	r2, #0
 8006034:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = RAIL_TEMP2_MAX;
 8006036:	4b8c      	ldr	r3, [pc, #560]	; (8006268 <voltage_monitor_init+0x308>)
 8006038:	f44f 7248 	mov.w	r2, #800	; 0x320
 800603c:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = RAIL_TEMP2_MIN;
 800603e:	4b8a      	ldr	r3, [pc, #552]	; (8006268 <voltage_monitor_init+0x308>)
 8006040:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006044:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <voltage_monitor_init+0x308>)
 8006048:	2200      	movs	r2, #0
 800604a:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 800604c:	4b86      	ldr	r3, [pc, #536]	; (8006268 <voltage_monitor_init+0x308>)
 800604e:	2200      	movs	r2, #0
 8006050:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <voltage_monitor_init+0x308>)
 8006054:	2200      	movs	r2, #0
 8006056:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8006058:	4b83      	ldr	r3, [pc, #524]	; (8006268 <voltage_monitor_init+0x308>)
 800605a:	2204      	movs	r2, #4
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8006060:	4b81      	ldr	r3, [pc, #516]	; (8006268 <voltage_monitor_init+0x308>)
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = ENABLED;
 8006068:	4b7f      	ldr	r3, [pc, #508]	; (8006268 <voltage_monitor_init+0x308>)
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 8006070:	4b7d      	ldr	r3, [pc, #500]	; (8006268 <voltage_monitor_init+0x308>)
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = RAIL_TEMP3_MAX;
 8006078:	4b7b      	ldr	r3, [pc, #492]	; (8006268 <voltage_monitor_init+0x308>)
 800607a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800607e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = RAIL_TEMP3_MIN;
 8006082:	4b79      	ldr	r3, [pc, #484]	; (8006268 <voltage_monitor_init+0x308>)
 8006084:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006088:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 800608c:	4b76      	ldr	r3, [pc, #472]	; (8006268 <voltage_monitor_init+0x308>)
 800608e:	2200      	movs	r2, #0
 8006090:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 8006094:	4b74      	ldr	r3, [pc, #464]	; (8006268 <voltage_monitor_init+0x308>)
 8006096:	2200      	movs	r2, #0
 8006098:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 800609c:	4b72      	ldr	r3, [pc, #456]	; (8006268 <voltage_monitor_init+0x308>)
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80060a4:	4b70      	ldr	r3, [pc, #448]	; (8006268 <voltage_monitor_init+0x308>)
 80060a6:	2205      	movs	r2, #5
 80060a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80060ac:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <voltage_monitor_init+0x308>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = ENABLED;
 80060b4:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <voltage_monitor_init+0x308>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 80060bc:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <voltage_monitor_init+0x308>)
 80060be:	2200      	movs	r2, #0
 80060c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = RAIL_TEMP4_MAX;
 80060c4:	4b68      	ldr	r3, [pc, #416]	; (8006268 <voltage_monitor_init+0x308>)
 80060c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = RAIL_TEMP4_MIN;
 80060ce:	4b66      	ldr	r3, [pc, #408]	; (8006268 <voltage_monitor_init+0x308>)
 80060d0:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80060d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 80060d8:	4b63      	ldr	r3, [pc, #396]	; (8006268 <voltage_monitor_init+0x308>)
 80060da:	2200      	movs	r2, #0
 80060dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 80060e0:	4b61      	ldr	r3, [pc, #388]	; (8006268 <voltage_monitor_init+0x308>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 80060e8:	4b5f      	ldr	r3, [pc, #380]	; (8006268 <voltage_monitor_init+0x308>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80060f0:	4b5d      	ldr	r3, [pc, #372]	; (8006268 <voltage_monitor_init+0x308>)
 80060f2:	2206      	movs	r2, #6
 80060f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 80060f8:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <voltage_monitor_init+0x308>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = DISABLED;
 8006100:	4b59      	ldr	r3, [pc, #356]	; (8006268 <voltage_monitor_init+0x308>)
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 8006108:	4b57      	ldr	r3, [pc, #348]	; (8006268 <voltage_monitor_init+0x308>)
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = RAIL_BUSVMON_MAX;
 8006110:	4b55      	ldr	r3, [pc, #340]	; (8006268 <voltage_monitor_init+0x308>)
 8006112:	f242 7210 	movw	r2, #10000	; 0x2710
 8006116:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = RAIL_BUSVMON_MIN;
 800611a:	4b53      	ldr	r3, [pc, #332]	; (8006268 <voltage_monitor_init+0x308>)
 800611c:	2200      	movs	r2, #0
 800611e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 8006122:	4b51      	ldr	r3, [pc, #324]	; (8006268 <voltage_monitor_init+0x308>)
 8006124:	2200      	movs	r2, #0
 8006126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 800612a:	4b4f      	ldr	r3, [pc, #316]	; (8006268 <voltage_monitor_init+0x308>)
 800612c:	2200      	movs	r2, #0
 800612e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 8006132:	4b4d      	ldr	r3, [pc, #308]	; (8006268 <voltage_monitor_init+0x308>)
 8006134:	2200      	movs	r2, #0
 8006136:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800613a:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <voltage_monitor_init+0x308>)
 800613c:	2207      	movs	r2, #7
 800613e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 8006142:	4b49      	ldr	r3, [pc, #292]	; (8006268 <voltage_monitor_init+0x308>)
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = DISABLED;
 800614a:	4b47      	ldr	r3, [pc, #284]	; (8006268 <voltage_monitor_init+0x308>)
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 8006152:	4b45      	ldr	r3, [pc, #276]	; (8006268 <voltage_monitor_init+0x308>)
 8006154:	2200      	movs	r2, #0
 8006156:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = RAIL_BUSIMON_MAX;
 800615a:	4b43      	ldr	r3, [pc, #268]	; (8006268 <voltage_monitor_init+0x308>)
 800615c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006160:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = RAIL_BUSIMON_MIN;
 8006164:	4b40      	ldr	r3, [pc, #256]	; (8006268 <voltage_monitor_init+0x308>)
 8006166:	2200      	movs	r2, #0
 8006168:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 800616c:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <voltage_monitor_init+0x308>)
 800616e:	2200      	movs	r2, #0
 8006170:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <voltage_monitor_init+0x308>)
 8006176:	2200      	movs	r2, #0
 8006178:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <voltage_monitor_init+0x308>)
 800617e:	2200      	movs	r2, #0
 8006180:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8006184:	4b38      	ldr	r3, [pc, #224]	; (8006268 <voltage_monitor_init+0x308>)
 8006186:	2208      	movs	r2, #8
 8006188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 800618c:	4b36      	ldr	r3, [pc, #216]	; (8006268 <voltage_monitor_init+0x308>)
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = DISABLED;
 8006194:	4b34      	ldr	r3, [pc, #208]	; (8006268 <voltage_monitor_init+0x308>)
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 800619c:	4b32      	ldr	r3, [pc, #200]	; (8006268 <voltage_monitor_init+0x308>)
 800619e:	2200      	movs	r2, #0
 80061a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = RAIL_2V5_MAX;
 80061a4:	4b30      	ldr	r3, [pc, #192]	; (8006268 <voltage_monitor_init+0x308>)
 80061a6:	f640 5256 	movw	r2, #3414	; 0xd56
 80061aa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = RAIL_2V5_MIN;
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <voltage_monitor_init+0x308>)
 80061b0:	f640 22e8 	movw	r2, #2792	; 0xae8
 80061b4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <voltage_monitor_init+0x308>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 80061c0:	4b29      	ldr	r3, [pc, #164]	; (8006268 <voltage_monitor_init+0x308>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <voltage_monitor_init+0x308>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <voltage_monitor_init+0x308>)
 80061d2:	2209      	movs	r2, #9
 80061d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 80061d8:	4b23      	ldr	r3, [pc, #140]	; (8006268 <voltage_monitor_init+0x308>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = DISABLED;
 80061e0:	4b21      	ldr	r3, [pc, #132]	; (8006268 <voltage_monitor_init+0x308>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 80061e8:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <voltage_monitor_init+0x308>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	rail_monitor[RAIL_3v3].max_voltage = RAIL_3V3_MAX;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <voltage_monitor_init+0x308>)
 80061f2:	f240 623c 	movw	r2, #1596	; 0x63c
 80061f6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = RAIL_3V3_MIN;
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <voltage_monitor_init+0x308>)
 80061fc:	f240 521a 	movw	r2, #1306	; 0x51a
 8006200:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 8006204:	4b18      	ldr	r3, [pc, #96]	; (8006268 <voltage_monitor_init+0x308>)
 8006206:	2200      	movs	r2, #0
 8006208:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 800620c:	4b16      	ldr	r3, [pc, #88]	; (8006268 <voltage_monitor_init+0x308>)
 800620e:	2200      	movs	r2, #0
 8006210:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <voltage_monitor_init+0x308>)
 8006216:	2200      	movs	r2, #0
 8006218:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	rail_monitor[RAIL_5v].name = RAIL_5v;
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <voltage_monitor_init+0x308>)
 800621e:	220a      	movs	r2, #10
 8006220:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <voltage_monitor_init+0x308>)
 8006226:	2200      	movs	r2, #0
 8006228:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = DISABLED;
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <voltage_monitor_init+0x308>)
 800622e:	2200      	movs	r2, #0
 8006230:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <voltage_monitor_init+0x308>)
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = RAIL_5V_MAX;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <voltage_monitor_init+0x308>)
 800623e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006242:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = RAIL_5V_MIN;
 8006246:	4b08      	ldr	r3, [pc, #32]	; (8006268 <voltage_monitor_init+0x308>)
 8006248:	f640 5216 	movw	r2, #3350	; 0xd16
 800624c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <voltage_monitor_init+0x308>)
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <voltage_monitor_init+0x308>)
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 8006260:	4b01      	ldr	r3, [pc, #4]	; (8006268 <voltage_monitor_init+0x308>)
 8006262:	2200      	movs	r2, #0
 8006264:	e002      	b.n	800626c <voltage_monitor_init+0x30c>
 8006266:	bf00      	nop
 8006268:	240022d0 	.word	0x240022d0
 800626c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8006270:	4b86      	ldr	r3, [pc, #536]	; (800648c <voltage_monitor_init+0x52c>)
 8006272:	220b      	movs	r2, #11
 8006274:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 8006278:	4b84      	ldr	r3, [pc, #528]	; (800648c <voltage_monitor_init+0x52c>)
 800627a:	2200      	movs	r2, #0
 800627c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = DISABLED;
 8006280:	4b82      	ldr	r3, [pc, #520]	; (800648c <voltage_monitor_init+0x52c>)
 8006282:	2200      	movs	r2, #0
 8006284:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 8006288:	4b80      	ldr	r3, [pc, #512]	; (800648c <voltage_monitor_init+0x52c>)
 800628a:	2200      	movs	r2, #0
 800628c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = RAIL_N3V3_MAX;
 8006290:	4b7e      	ldr	r3, [pc, #504]	; (800648c <voltage_monitor_init+0x52c>)
 8006292:	f241 02be 	movw	r2, #4286	; 0x10be
 8006296:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = RAIL_N3V3_MIN;
 800629a:	4b7c      	ldr	r3, [pc, #496]	; (800648c <voltage_monitor_init+0x52c>)
 800629c:	f640 52b3 	movw	r2, #3507	; 0xdb3
 80062a0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 80062a4:	4b79      	ldr	r3, [pc, #484]	; (800648c <voltage_monitor_init+0x52c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 80062ac:	4b77      	ldr	r3, [pc, #476]	; (800648c <voltage_monitor_init+0x52c>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 80062b4:	4b75      	ldr	r3, [pc, #468]	; (800648c <voltage_monitor_init+0x52c>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80062bc:	4b73      	ldr	r3, [pc, #460]	; (800648c <voltage_monitor_init+0x52c>)
 80062be:	220c      	movs	r2, #12
 80062c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 80062c4:	4b71      	ldr	r3, [pc, #452]	; (800648c <voltage_monitor_init+0x52c>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = DISABLED;
 80062cc:	4b6f      	ldr	r3, [pc, #444]	; (800648c <voltage_monitor_init+0x52c>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 80062d4:	4b6d      	ldr	r3, [pc, #436]	; (800648c <voltage_monitor_init+0x52c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	rail_monitor[RAIL_n5v].max_voltage = RAIL_N5V_MAX;
 80062dc:	4b6b      	ldr	r3, [pc, #428]	; (800648c <voltage_monitor_init+0x52c>)
 80062de:	f242 7210 	movw	r2, #10000	; 0x2710
 80062e2:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = RAIL_N5V_MIN;
 80062e6:	4b69      	ldr	r3, [pc, #420]	; (800648c <voltage_monitor_init+0x52c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 80062ee:	4b67      	ldr	r3, [pc, #412]	; (800648c <voltage_monitor_init+0x52c>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 80062f6:	4b65      	ldr	r3, [pc, #404]	; (800648c <voltage_monitor_init+0x52c>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 80062fe:	4b63      	ldr	r3, [pc, #396]	; (800648c <voltage_monitor_init+0x52c>)
 8006300:	2200      	movs	r2, #0
 8006302:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8006306:	4b61      	ldr	r3, [pc, #388]	; (800648c <voltage_monitor_init+0x52c>)
 8006308:	220d      	movs	r2, #13
 800630a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 800630e:	4b5f      	ldr	r3, [pc, #380]	; (800648c <voltage_monitor_init+0x52c>)
 8006310:	2200      	movs	r2, #0
 8006312:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = DISABLED;
 8006316:	4b5d      	ldr	r3, [pc, #372]	; (800648c <voltage_monitor_init+0x52c>)
 8006318:	2200      	movs	r2, #0
 800631a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 800631e:	4b5b      	ldr	r3, [pc, #364]	; (800648c <voltage_monitor_init+0x52c>)
 8006320:	2200      	movs	r2, #0
 8006322:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = RAIL_15V_MAX;
 8006326:	4b59      	ldr	r3, [pc, #356]	; (800648c <voltage_monitor_init+0x52c>)
 8006328:	f640 72ff 	movw	r2, #4095	; 0xfff
 800632c:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = RAIL_15V_MIN;
 8006330:	4b56      	ldr	r3, [pc, #344]	; (800648c <voltage_monitor_init+0x52c>)
 8006332:	f640 5216 	movw	r2, #3350	; 0xd16
 8006336:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 800633a:	4b54      	ldr	r3, [pc, #336]	; (800648c <voltage_monitor_init+0x52c>)
 800633c:	2200      	movs	r2, #0
 800633e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 8006342:	4b52      	ldr	r3, [pc, #328]	; (800648c <voltage_monitor_init+0x52c>)
 8006344:	2200      	movs	r2, #0
 8006346:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 800634a:	4b50      	ldr	r3, [pc, #320]	; (800648c <voltage_monitor_init+0x52c>)
 800634c:	2200      	movs	r2, #0
 800634e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8006352:	4b4e      	ldr	r3, [pc, #312]	; (800648c <voltage_monitor_init+0x52c>)
 8006354:	220e      	movs	r2, #14
 8006356:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 800635a:	4b4c      	ldr	r3, [pc, #304]	; (800648c <voltage_monitor_init+0x52c>)
 800635c:	2200      	movs	r2, #0
 800635e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = DISABLED;
 8006362:	4b4a      	ldr	r3, [pc, #296]	; (800648c <voltage_monitor_init+0x52c>)
 8006364:	2200      	movs	r2, #0
 8006366:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 800636a:	4b48      	ldr	r3, [pc, #288]	; (800648c <voltage_monitor_init+0x52c>)
 800636c:	2200      	movs	r2, #0
 800636e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = RAIL_5VREF_MAX;
 8006372:	4b46      	ldr	r3, [pc, #280]	; (800648c <voltage_monitor_init+0x52c>)
 8006374:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006378:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = RAIL_5VREF_MIN;
 800637c:	4b43      	ldr	r3, [pc, #268]	; (800648c <voltage_monitor_init+0x52c>)
 800637e:	f640 5216 	movw	r2, #3350	; 0xd16
 8006382:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 8006386:	4b41      	ldr	r3, [pc, #260]	; (800648c <voltage_monitor_init+0x52c>)
 8006388:	2200      	movs	r2, #0
 800638a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <voltage_monitor_init+0x52c>)
 8006390:	2200      	movs	r2, #0
 8006392:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 8006396:	4b3d      	ldr	r3, [pc, #244]	; (800648c <voltage_monitor_init+0x52c>)
 8006398:	2200      	movs	r2, #0
 800639a:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800639e:	4b3b      	ldr	r3, [pc, #236]	; (800648c <voltage_monitor_init+0x52c>)
 80063a0:	220f      	movs	r2, #15
 80063a2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 80063a6:	4b39      	ldr	r3, [pc, #228]	; (800648c <voltage_monitor_init+0x52c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = DISABLED;
 80063ae:	4b37      	ldr	r3, [pc, #220]	; (800648c <voltage_monitor_init+0x52c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 80063b6:	4b35      	ldr	r3, [pc, #212]	; (800648c <voltage_monitor_init+0x52c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = RAIL_N200V_MAX;
 80063be:	4b33      	ldr	r3, [pc, #204]	; (800648c <voltage_monitor_init+0x52c>)
 80063c0:	f640 6266 	movw	r2, #3686	; 0xe66
 80063c4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = RAIL_N200V_MIN;
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <voltage_monitor_init+0x52c>)
 80063ca:	f640 32c7 	movw	r2, #3015	; 0xbc7
 80063ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 80063d2:	4b2e      	ldr	r3, [pc, #184]	; (800648c <voltage_monitor_init+0x52c>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 80063da:	4b2c      	ldr	r3, [pc, #176]	; (800648c <voltage_monitor_init+0x52c>)
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <voltage_monitor_init+0x52c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe

	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80063ea:	4b28      	ldr	r3, [pc, #160]	; (800648c <voltage_monitor_init+0x52c>)
 80063ec:	2210      	movs	r2, #16
 80063ee:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 80063f2:	4b26      	ldr	r3, [pc, #152]	; (800648c <voltage_monitor_init+0x52c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = DISABLED;
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <voltage_monitor_init+0x52c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 8006402:	4b22      	ldr	r3, [pc, #136]	; (800648c <voltage_monitor_init+0x52c>)
 8006404:	2200      	movs	r2, #0
 8006406:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = RAIL_N800V_MAX;
 800640a:	4b20      	ldr	r3, [pc, #128]	; (800648c <voltage_monitor_init+0x52c>)
 800640c:	f640 52a6 	movw	r2, #3494	; 0xda6
 8006410:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = RAIL_N800V_MIN;
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <voltage_monitor_init+0x52c>)
 8006416:	f640 322b 	movw	r2, #2859	; 0xb2b
 800641a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 800641e:	4b1b      	ldr	r3, [pc, #108]	; (800648c <voltage_monitor_init+0x52c>)
 8006420:	2200      	movs	r2, #0
 8006422:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <voltage_monitor_init+0x52c>)
 8006428:	2200      	movs	r2, #0
 800642a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 800642e:	4b17      	ldr	r3, [pc, #92]	; (800648c <voltage_monitor_init+0x52c>)
 8006430:	2200      	movs	r2, #0
 8006432:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <voltage_monitor_init+0x52c>)
 8006438:	2211      	movs	r2, #17
 800643a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <voltage_monitor_init+0x52c>)
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = DISABLED;
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <voltage_monitor_init+0x52c>)
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <voltage_monitor_init+0x52c>)
 8006450:	2200      	movs	r2, #0
 8006452:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = RAIL_TMP1_MAX;
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <voltage_monitor_init+0x52c>)
 8006458:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 800645c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = RAIL_TMP1_MIN;
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <voltage_monitor_init+0x52c>)
 8006462:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8006466:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 800646a:	4b08      	ldr	r3, [pc, #32]	; (800648c <voltage_monitor_init+0x52c>)
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <voltage_monitor_init+0x52c>)
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <voltage_monitor_init+0x52c>)
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	240022d0 	.word	0x240022d0

08006490 <set_rail_monitor_enable>:
 *
 * @param rail_name The voltage rail to modify.
 * @param enable_value 1 to enable monitoring, 0 to disable.
 */
void set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	460a      	mov	r2, r1
 800649a:	71fb      	strb	r3, [r7, #7]
 800649c:	4613      	mov	r3, r2
 800649e:	71bb      	strb	r3, [r7, #6]
	rail_monitor[rail_name].is_enabled = enable_value;
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	4a06      	ldr	r2, [pc, #24]	; (80064bc <set_rail_monitor_enable+0x2c>)
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	4413      	add	r3, r2
 80064a8:	3302      	adds	r3, #2
 80064aa:	79ba      	ldrb	r2, [r7, #6]
 80064ac:	701a      	strb	r2, [r3, #0]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	240022d0 	.word	0x240022d0

080064c0 <set_rail_monitor>:
 *
 * Samples data from ADC1, ADC3, and I2C channels, then updates the corresponding
 * voltage rail monitor entries with the sampled values.
 */
void set_rail_monitor()
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe f9d5 	bl	8004878 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 80064ce:	f107 0314 	add.w	r3, r7, #20
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fa00 	bl	80048d8 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 80064d8:	f107 030c 	add.w	r3, r7, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fe fa4d 	bl	800497c <sample_hk_adc3>
 80064e2:	89ba      	ldrh	r2, [r7, #12]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <set_rail_monitor+0xb4>)
 80064e6:	809a      	strh	r2, [r3, #4]
 80064e8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 80064ea:	4b22      	ldr	r3, [pc, #136]	; (8006574 <set_rail_monitor+0xb4>)
 80064ec:	829a      	strh	r2, [r3, #20]
 80064ee:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 80064f0:	4b20      	ldr	r3, [pc, #128]	; (8006574 <set_rail_monitor+0xb4>)
 80064f2:	849a      	strh	r2, [r3, #36]	; 0x24
 80064f4:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80064f6:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <set_rail_monitor+0xb4>)
 80064f8:	869a      	strh	r2, [r3, #52]	; 0x34
 80064fa:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <set_rail_monitor+0xb4>)
 80064fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006502:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <set_rail_monitor+0xb4>)
 8006506:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800650a:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 800650c:	4b19      	ldr	r3, [pc, #100]	; (8006574 <set_rail_monitor+0xb4>)
 800650e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8006512:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8006514:	4b17      	ldr	r3, [pc, #92]	; (8006574 <set_rail_monitor+0xb4>)
 8006516:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800651a:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <set_rail_monitor+0xb4>)
 800651e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8006522:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8006524:	4b13      	ldr	r3, [pc, #76]	; (8006574 <set_rail_monitor+0xb4>)
 8006526:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800652a:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <set_rail_monitor+0xb4>)
 800652e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006532:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <set_rail_monitor+0xb4>)
 8006536:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800653a:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <set_rail_monitor+0xb4>)
 800653e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8006542:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <set_rail_monitor+0xb4>)
 8006546:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 800654a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <set_rail_monitor+0xb4>)
 800654e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8006552:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <set_rail_monitor+0xb4>)
 8006556:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800655a:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <set_rail_monitor+0xb4>)
 800655e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8006562:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <set_rail_monitor+0xb4>)
 8006566:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
}
 800656a:	bf00      	nop
 800656c:	3728      	adds	r7, #40	; 0x28
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	240022d0 	.word	0x240022d0

08006578 <get_rail_monitor>:
 * @brief Retrieves the voltage rail monitor array.
 *
 * @return Pointer to the array of monitored voltage rails.
 */
VOLTAGE_RAIL* get_rail_monitor()
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	return rail_monitor;
 800657c:	4b02      	ldr	r3, [pc, #8]	; (8006588 <get_rail_monitor+0x10>)
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	240022d0 	.word	0x240022d0

0800658c <convert_ADT7410>:
 *
 * @param raw The raw temperature data from the ADT7410 sensor.
 * @return The converted temperature in degrees Celsius.
 */
int16_t convert_ADT7410(int16_t raw)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8006596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000)
 80065a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	db07      	blt.n	80065c0 <convert_ADT7410+0x34>
    {
        ret -= 8192;
 80065b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80065b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80065e8 <convert_ADT7410+0x5c>
 80065b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065bc:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 80065c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80065c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80065c8:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80065cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80065d4:	ee17 3a90 	vmov	r3, s15
 80065d8:	b21b      	sxth	r3, r3
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	46000000 	.word	0x46000000

080065ec <check_bounds>:
 * @param min The minimum acceptable value.
 * @param max The maximum acceptable value.
 * @return 1 if the value is within bounds, 0 otherwise.
 */
uint8_t check_bounds(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60ba      	str	r2, [r7, #8]
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
 80065fa:	460b      	mov	r3, r1
 80065fc:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4)
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d008      	beq.n	8006616 <check_bounds+0x2a>
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d005      	beq.n	8006616 <check_bounds+0x2a>
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b04      	cmp	r3, #4
 800660e:	d002      	beq.n	8006616 <check_bounds+0x2a>
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	2b05      	cmp	r3, #5
 8006614:	d124      	bne.n	8006660 <check_bounds+0x74>
	{
		int16_t converted_max = convert_ADT7410(max);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	b21b      	sxth	r3, r3
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff ffb6 	bl	800658c <convert_ADT7410>
 8006620:	4603      	mov	r3, r0
 8006622:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	b21b      	sxth	r3, r3
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff ffaf 	bl	800658c <convert_ADT7410>
 800662e:	4603      	mov	r3, r0
 8006630:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 8006632:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ffa8 	bl	800658c <convert_ADT7410>
 800663c:	4603      	mov	r3, r0
 800663e:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min)
 8006640:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006648:	429a      	cmp	r2, r3
 800664a:	dc07      	bgt.n	800665c <check_bounds+0x70>
 800664c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006654:	429a      	cmp	r2, r3
 8006656:	db01      	blt.n	800665c <check_bounds+0x70>
		{
			return 1;
 8006658:	2301      	movs	r3, #1
 800665a:	e00c      	b.n	8006676 <check_bounds+0x8a>
		}
		return 0;
 800665c:	2300      	movs	r3, #0
 800665e:	e00a      	b.n	8006676 <check_bounds+0x8a>
	}

	if (raw <= max && raw >= min)
 8006660:	89bb      	ldrh	r3, [r7, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	db05      	blt.n	8006674 <check_bounds+0x88>
 8006668:	89bb      	ldrh	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	dc01      	bgt.n	8006674 <check_bounds+0x88>
	{
		return 1;
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <check_bounds+0x8a>
	}
	return 0;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <monitor_rails>:
 * three times.
 *
 * @return 1 if all rails are within bounds, 0 if any rail is out of bounds.
 */
uint8_t monitor_rails()
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
	uint8_t within_bounds = 1;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
	uint16_t tolerance;

	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e0c2      	b.n	8006816 <monitor_rails+0x196>
	{
		// Range check is different depending on whether the rail is enabled or not
		if (rail_monitor[i].is_enabled)
 8006690:	4a67      	ldr	r2, [pc, #412]	; (8006830 <monitor_rails+0x1b0>)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	4413      	add	r3, r2
 8006698:	3302      	adds	r3, #2
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01d      	beq.n	80066dc <monitor_rails+0x5c>
		{
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage);
 80066a0:	4a63      	ldr	r2, [pc, #396]	; (8006830 <monitor_rails+0x1b0>)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	4413      	add	r3, r2
 80066a8:	7818      	ldrb	r0, [r3, #0]
 80066aa:	4a61      	ldr	r2, [pc, #388]	; (8006830 <monitor_rails+0x1b0>)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	4413      	add	r3, r2
 80066b2:	3304      	adds	r3, #4
 80066b4:	8819      	ldrh	r1, [r3, #0]
 80066b6:	4a5e      	ldr	r2, [pc, #376]	; (8006830 <monitor_rails+0x1b0>)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	4413      	add	r3, r2
 80066be:	3308      	adds	r3, #8
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	461c      	mov	r4, r3
 80066c4:	4a5a      	ldr	r2, [pc, #360]	; (8006830 <monitor_rails+0x1b0>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	3306      	adds	r3, #6
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	4622      	mov	r2, r4
 80066d2:	f7ff ff8b 	bl	80065ec <check_bounds>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]
 80066da:	e023      	b.n	8006724 <monitor_rails+0xa4>
		}
		else
		{
			tolerance = rail_monitor[i].max_voltage * 0.1;
 80066dc:	4a54      	ldr	r2, [pc, #336]	; (8006830 <monitor_rails+0x1b0>)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4413      	add	r3, r2
 80066e4:	3306      	adds	r3, #6
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066f0:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8006828 <monitor_rails+0x1a8>
 80066f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80066f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066fc:	ee17 3a90 	vmov	r3, s15
 8006700:	81fb      	strh	r3, [r7, #14]
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance);
 8006702:	4a4b      	ldr	r2, [pc, #300]	; (8006830 <monitor_rails+0x1b0>)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	4413      	add	r3, r2
 800670a:	7818      	ldrb	r0, [r3, #0]
 800670c:	4a48      	ldr	r2, [pc, #288]	; (8006830 <monitor_rails+0x1b0>)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	4413      	add	r3, r2
 8006714:	3304      	adds	r3, #4
 8006716:	8819      	ldrh	r1, [r3, #0]
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	2200      	movs	r2, #0
 800671c:	f7ff ff66 	bl	80065ec <check_bounds>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]
		}

		// If we aren't within range...
		if (!within_bounds)
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d16f      	bne.n	800680a <monitor_rails+0x18a>
		{
			// Increase that rails error count
			rail_monitor[i].error_count++;
 800672a:	4a41      	ldr	r2, [pc, #260]	; (8006830 <monitor_rails+0x1b0>)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	3301      	adds	r3, #1
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	b2d9      	uxtb	r1, r3
 800673a:	4a3d      	ldr	r2, [pc, #244]	; (8006830 <monitor_rails+0x1b0>)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	4413      	add	r3, r2
 8006742:	3301      	adds	r3, #1
 8006744:	460a      	mov	r2, r1
 8006746:	701a      	strb	r2, [r3, #0]

			// Store the voltage each time a rail goes out of bounds
			switch (rail_monitor[i].error_count)
 8006748:	4a39      	ldr	r2, [pc, #228]	; (8006830 <monitor_rails+0x1b0>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	4413      	add	r3, r2
 8006750:	3301      	adds	r3, #1
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d024      	beq.n	80067a2 <monitor_rails+0x122>
 8006758:	2b03      	cmp	r3, #3
 800675a:	dc58      	bgt.n	800680e <monitor_rails+0x18e>
 800675c:	2b01      	cmp	r3, #1
 800675e:	d002      	beq.n	8006766 <monitor_rails+0xe6>
 8006760:	2b02      	cmp	r3, #2
 8006762:	d00f      	beq.n	8006784 <monitor_rails+0x104>
				error.OOB_2 = rail_monitor[i].OOB_2;
				error.OOB_3 = rail_monitor[i].OOB_3;
				handle_error(error);
				break;
			default:
				break;
 8006764:	e053      	b.n	800680e <monitor_rails+0x18e>
				rail_monitor[i].OOB_1 = rail_monitor[i].data;
 8006766:	4a32      	ldr	r2, [pc, #200]	; (8006830 <monitor_rails+0x1b0>)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	8819      	ldrh	r1, [r3, #0]
 8006772:	4a2f      	ldr	r2, [pc, #188]	; (8006830 <monitor_rails+0x1b0>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	4413      	add	r3, r2
 800677a:	330a      	adds	r3, #10
 800677c:	460a      	mov	r2, r1
 800677e:	801a      	strh	r2, [r3, #0]
				return 0;
 8006780:	2300      	movs	r3, #0
 8006782:	e04d      	b.n	8006820 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8006784:	4a2a      	ldr	r2, [pc, #168]	; (8006830 <monitor_rails+0x1b0>)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	4413      	add	r3, r2
 800678c:	3304      	adds	r3, #4
 800678e:	8819      	ldrh	r1, [r3, #0]
 8006790:	4a27      	ldr	r2, [pc, #156]	; (8006830 <monitor_rails+0x1b0>)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	4413      	add	r3, r2
 8006798:	330c      	adds	r3, #12
 800679a:	460a      	mov	r2, r1
 800679c:	801a      	strh	r2, [r3, #0]
				return 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	e03e      	b.n	8006820 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_3 = rail_monitor[i].data;
 80067a2:	4a23      	ldr	r2, [pc, #140]	; (8006830 <monitor_rails+0x1b0>)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4413      	add	r3, r2
 80067aa:	3304      	adds	r3, #4
 80067ac:	8819      	ldrh	r1, [r3, #0]
 80067ae:	4a20      	ldr	r2, [pc, #128]	; (8006830 <monitor_rails+0x1b0>)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4413      	add	r3, r2
 80067b6:	330e      	adds	r3, #14
 80067b8:	460a      	mov	r2, r1
 80067ba:	801a      	strh	r2, [r3, #0]
				error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80067bc:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <monitor_rails+0x1b0>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f834 	bl	8006834 <get_rail_name_error_detail>
 80067cc:	4603      	mov	r3, r0
 80067ce:	717b      	strb	r3, [r7, #5]
				error.category = EC_power_supply_rail;
 80067d0:	2300      	movs	r3, #0
 80067d2:	713b      	strb	r3, [r7, #4]
				error.OOB_1 = rail_monitor[i].OOB_1;
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <monitor_rails+0x1b0>)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	330a      	adds	r3, #10
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	80fb      	strh	r3, [r7, #6]
				error.OOB_2 = rail_monitor[i].OOB_2;
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <monitor_rails+0x1b0>)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	4413      	add	r3, r2
 80067ea:	330c      	adds	r3, #12
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	813b      	strh	r3, [r7, #8]
				error.OOB_3 = rail_monitor[i].OOB_3;
 80067f0:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <monitor_rails+0x1b0>)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	4413      	add	r3, r2
 80067f8:	330e      	adds	r3, #14
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	817b      	strh	r3, [r7, #10]
				handle_error(error);
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006804:	f7fb fb9c 	bl	8001f40 <handle_error>
				break;
 8006808:	e002      	b.n	8006810 <monitor_rails+0x190>
			}
		}
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <monitor_rails+0x190>
				break;
 800680e:	bf00      	nop
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	3301      	adds	r3, #1
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b11      	cmp	r3, #17
 800681a:	f77f af39 	ble.w	8006690 <monitor_rails+0x10>
	}
	// No rails were out of bounds, so voltage_monitor task does not need to enter idle and delay
	return 1;
 800681e:	2301      	movs	r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	9999999a 	.word	0x9999999a
 800682c:	3fb99999 	.word	0x3fb99999
 8006830:	240022d0 	.word	0x240022d0

08006834 <get_rail_name_error_detail>:
 *
 * @param rail_name The voltage rail for which to get the error detail.
 * @return The corresponding ERROR_DETAIL enumeration value for the specified rail.
 */
ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b11      	cmp	r3, #17
 8006842:	d84b      	bhi.n	80068dc <get_rail_name_error_detail+0xa8>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <get_rail_name_error_detail+0x18>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006895 	.word	0x08006895
 8006850:	08006899 	.word	0x08006899
 8006854:	0800689d 	.word	0x0800689d
 8006858:	080068a1 	.word	0x080068a1
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a9 	.word	0x080068a9
 8006864:	080068ad 	.word	0x080068ad
 8006868:	080068b1 	.word	0x080068b1
 800686c:	080068b5 	.word	0x080068b5
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068bd 	.word	0x080068bd
 8006878:	080068c1 	.word	0x080068c1
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068c9 	.word	0x080068c9
 8006884:	080068cd 	.word	0x080068cd
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d5 	.word	0x080068d5
 8006890:	080068d9 	.word	0x080068d9
	case RAIL_vsense:
		return ED_vsense;
 8006894:	2306      	movs	r3, #6
 8006896:	e022      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8006898:	2307      	movs	r3, #7
 800689a:	e020      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 800689c:	2308      	movs	r3, #8
 800689e:	e01e      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80068a0:	2309      	movs	r3, #9
 80068a2:	e01c      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80068a4:	230a      	movs	r3, #10
 80068a6:	e01a      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80068a8:	230b      	movs	r3, #11
 80068aa:	e018      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80068ac:	230c      	movs	r3, #12
 80068ae:	e016      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80068b0:	230d      	movs	r3, #13
 80068b2:	e014      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80068b4:	230e      	movs	r3, #14
 80068b6:	e012      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80068b8:	230f      	movs	r3, #15
 80068ba:	e010      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80068bc:	2310      	movs	r3, #16
 80068be:	e00e      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80068c0:	2311      	movs	r3, #17
 80068c2:	e00c      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80068c4:	2312      	movs	r3, #18
 80068c6:	e00a      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80068c8:	2313      	movs	r3, #19
 80068ca:	e008      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80068cc:	2314      	movs	r3, #20
 80068ce:	e006      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80068d0:	2315      	movs	r3, #21
 80068d2:	e004      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80068d4:	2316      	movs	r3, #22
 80068d6:	e002      	b.n	80068de <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80068d8:	2317      	movs	r3, #23
 80068da:	e000      	b.n	80068de <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80068dc:	231c      	movs	r3, #28
	}
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80068ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006924 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80068f0:	f7fe fcdc 	bl	80052ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068f4:	480c      	ldr	r0, [pc, #48]	; (8006928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068f8:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068fc:	e002      	b.n	8006904 <LoopCopyDataInit>

080068fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006902:	3304      	adds	r3, #4

08006904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006908:	d3f9      	bcc.n	80068fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800690a:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800690c:	4c0a      	ldr	r4, [pc, #40]	; (8006938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800690e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006910:	e001      	b.n	8006916 <LoopFillZerobss>

08006912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006914:	3204      	adds	r2, #4

08006916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006918:	d3fb      	bcc.n	8006912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800691a:	f015 fa9f 	bl	801be5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800691e:	f7fc ff7d 	bl	800381c <main>
  bx  lr
 8006922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006924:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006928:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800692c:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 8006930:	0801c21c 	.word	0x0801c21c
  ldr r2, =_sbss
 8006934:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8006938:	24006d60 	.word	0x24006d60

0800693c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800693c:	e7fe      	b.n	800693c <ADC3_IRQHandler>
	...

08006940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006946:	2003      	movs	r0, #3
 8006948:	f001 fd74 	bl	8008434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800694c:	f009 fcda 	bl	8010304 <HAL_RCC_GetSysClockFreq>
 8006950:	4602      	mov	r2, r0
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_Init+0x68>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	4913      	ldr	r1, [pc, #76]	; (80069ac <HAL_Init+0x6c>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <HAL_Init+0x68>)
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <HAL_Init+0x6c>)
 8006974:	5cd3      	ldrb	r3, [r2, r3]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
 8006980:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <HAL_Init+0x70>)
 8006982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <HAL_Init+0x74>)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800698a:	2005      	movs	r0, #5
 800698c:	f7fe fa6a 	bl	8004e64 <HAL_InitTick>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e002      	b.n	80069a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800699a:	f7fe fa3d 	bl	8004e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	58024400 	.word	0x58024400
 80069ac:	0801c1cc 	.word	0x0801c1cc
 80069b0:	240000d0 	.word	0x240000d0
 80069b4:	240000cc 	.word	0x240000cc

080069b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <HAL_IncTick+0x20>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <HAL_IncTick+0x24>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4413      	add	r3, r2
 80069c8:	4a04      	ldr	r2, [pc, #16]	; (80069dc <HAL_IncTick+0x24>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	240000d8 	.word	0x240000d8
 80069dc:	240023f0 	.word	0x240023f0

080069e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return uwTick;
 80069e4:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <HAL_GetTick+0x14>)
 80069e6:	681b      	ldr	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	240023f0 	.word	0x240023f0

080069f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <HAL_GetREVID+0x14>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	0c1b      	lsrs	r3, r3, #16
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	5c001000 	.word	0x5c001000

08006a10 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	4904      	ldr	r1, [pc, #16]	; (8006a38 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	58000400 	.word	0x58000400

08006a3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3360      	adds	r3, #96	; 0x60
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	611a      	str	r2, [r3, #16]
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b087      	sub	sp, #28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3360      	adds	r3, #96	; 0x60
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	601a      	str	r2, [r3, #0]
  }
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	4413      	add	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	211f      	movs	r1, #31
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	401a      	ands	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0e9b      	lsrs	r3, r3, #26
 8006baa:	f003 011f 	and.w	r1, r3, #31
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f023 0203 	bic.w	r2, r3, #3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	461a      	mov	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	0e5b      	lsrs	r3, r3, #25
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	4413      	add	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	0d1b      	lsrs	r3, r3, #20
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2107      	movs	r1, #7
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	401a      	ands	r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	0d1b      	lsrs	r3, r3, #20
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	431a      	orrs	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0318 	and.w	r3, r3, #24
 8006c6a:	4908      	ldr	r1, [pc, #32]	; (8006c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c6c:	40d9      	lsrs	r1, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	400b      	ands	r3, r1
 8006c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	000fffff 	.word	0x000fffff

08006c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 031f 	and.w	r3, r3, #31
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <LL_ADC_DisableDeepPowerDown+0x20>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6093      	str	r3, [r2, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	5fffffc0 	.word	0x5fffffc0

08006cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce4:	d101      	bne.n	8006cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <LL_ADC_EnableInternalRegulator+0x24>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	6fffffc0 	.word	0x6fffffc0

08006d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d34:	d101      	bne.n	8006d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <LL_ADC_Enable+0x24>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	f043 0201 	orr.w	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	7fffffc0 	.word	0x7fffffc0

08006d70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <LL_ADC_Disable+0x24>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	f043 0202 	orr.w	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	7fffffc0 	.word	0x7fffffc0

08006d98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <LL_ADC_IsEnabled+0x18>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <LL_ADC_IsEnabled+0x1a>
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d101      	bne.n	8006dd6 <LL_ADC_IsDisableOngoing+0x18>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <LL_ADC_IsDisableOngoing+0x1a>
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <LL_ADC_REG_StartConversion+0x24>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	f043 0204 	orr.w	r2, r3, #4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	7fffffc0 	.word	0x7fffffc0

08006e0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d101      	bne.n	8006e24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d101      	bne.n	8006e4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e18f      	b.n	8007192 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7f9 fd6b 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff ff19 	bl	8006cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff feff 	bl	8006cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ff34 	bl	8006d20 <LL_ADC_IsInternalRegulatorEnabled>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d114      	bne.n	8006ee8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ff18 	bl	8006cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ec8:	4b87      	ldr	r3, [pc, #540]	; (80070e8 <HAL_ADC_Init+0x290>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	099b      	lsrs	r3, r3, #6
 8006ece:	4a87      	ldr	r2, [pc, #540]	; (80070ec <HAL_ADC_Init+0x294>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	099b      	lsrs	r3, r3, #6
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006eda:	e002      	b.n	8006ee2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f9      	bne.n	8006edc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff17 	bl	8006d20 <LL_ADC_IsInternalRegulatorEnabled>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10d      	bne.n	8006f14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	f043 0210 	orr.w	r2, r3, #16
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f08:	f043 0201 	orr.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff77 	bl	8006e0c <LL_ADC_REG_IsConversionOngoing>
 8006f1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8129 	bne.w	8007180 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 8125 	bne.w	8007180 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006f3e:	f043 0202 	orr.w	r2, r3, #2
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ff24 	bl	8006d98 <LL_ADC_IsEnabled>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d136      	bne.n	8006fc4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_ADC_Init+0x298>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <HAL_ADC_Init+0x112>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a63      	ldr	r2, [pc, #396]	; (80070f4 <HAL_ADC_Init+0x29c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d10e      	bne.n	8006f88 <HAL_ADC_Init+0x130>
 8006f6a:	4861      	ldr	r0, [pc, #388]	; (80070f0 <HAL_ADC_Init+0x298>)
 8006f6c:	f7ff ff14 	bl	8006d98 <LL_ADC_IsEnabled>
 8006f70:	4604      	mov	r4, r0
 8006f72:	4860      	ldr	r0, [pc, #384]	; (80070f4 <HAL_ADC_Init+0x29c>)
 8006f74:	f7ff ff10 	bl	8006d98 <LL_ADC_IsEnabled>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4323      	orrs	r3, r4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e008      	b.n	8006f9a <HAL_ADC_Init+0x142>
 8006f88:	485b      	ldr	r0, [pc, #364]	; (80070f8 <HAL_ADC_Init+0x2a0>)
 8006f8a:	f7ff ff05 	bl	8006d98 <LL_ADC_IsEnabled>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d012      	beq.n	8006fc4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a53      	ldr	r2, [pc, #332]	; (80070f0 <HAL_ADC_Init+0x298>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_ADC_Init+0x15a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a51      	ldr	r2, [pc, #324]	; (80070f4 <HAL_ADC_Init+0x29c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d101      	bne.n	8006fb6 <HAL_ADC_Init+0x15e>
 8006fb2:	4a52      	ldr	r2, [pc, #328]	; (80070fc <HAL_ADC_Init+0x2a4>)
 8006fb4:	e000      	b.n	8006fb8 <HAL_ADC_Init+0x160>
 8006fb6:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_ADC_Init+0x2a8>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7ff fd3c 	bl	8006a3c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006fc4:	f7ff fd18 	bl	80069f8 <HAL_GetREVID>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d914      	bls.n	8006ffc <HAL_ADC_Init+0x1a4>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d110      	bne.n	8006ffc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7d5b      	ldrb	r3, [r3, #21]
 8006fde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006fe4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006fea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7f1b      	ldrb	r3, [r3, #28]
 8006ff0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006ff2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006ff4:	f043 030c 	orr.w	r3, r3, #12
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e00d      	b.n	8007018 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	7d5b      	ldrb	r3, [r3, #21]
 8007000:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007006:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800700c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7f1b      	ldrb	r3, [r3, #28]
 8007012:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007014:	4313      	orrs	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7f1b      	ldrb	r3, [r3, #28]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d106      	bne.n	800702e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	3b01      	subs	r3, #1
 8007026:	045b      	lsls	r3, r3, #17
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	4313      	orrs	r3, r2
 800702c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4313      	orrs	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <HAL_ADC_Init+0x2ac>)
 8007052:	4013      	ands	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	430b      	orrs	r3, r1
 800705c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fed2 	bl	8006e0c <LL_ADC_REG_IsConversionOngoing>
 8007068:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fedf 	bl	8006e32 <LL_ADC_INJ_IsConversionOngoing>
 8007074:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15f      	bne.n	800713c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d15c      	bne.n	800713c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7d1b      	ldrb	r3, [r3, #20]
 8007086:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800708c:	4313      	orrs	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <HAL_ADC_Init+0x2b0>)
 8007098:	4013      	ands	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6812      	ldr	r2, [r2, #0]
 800709e:	69b9      	ldr	r1, [r7, #24]
 80070a0:	430b      	orrs	r3, r1
 80070a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d130      	bne.n	8007110 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	4b14      	ldr	r3, [pc, #80]	; (800710c <HAL_ADC_Init+0x2b4>)
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070c2:	3a01      	subs	r2, #1
 80070c4:	0411      	lsls	r1, r2, #16
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070ca:	4311      	orrs	r1, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070d0:	4311      	orrs	r1, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070d6:	430a      	orrs	r2, r1
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	611a      	str	r2, [r3, #16]
 80070e4:	e01c      	b.n	8007120 <HAL_ADC_Init+0x2c8>
 80070e6:	bf00      	nop
 80070e8:	240000cc 	.word	0x240000cc
 80070ec:	053e2d63 	.word	0x053e2d63
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40022100 	.word	0x40022100
 80070f8:	58026000 	.word	0x58026000
 80070fc:	40022300 	.word	0x40022300
 8007100:	58026300 	.word	0x58026300
 8007104:	fff0c003 	.word	0xfff0c003
 8007108:	ffffbffc 	.word	0xffffbffc
 800710c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0201 	bic.w	r2, r2, #1
 800711e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fdec 	bl	8007d14 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10c      	bne.n	800715e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f023 010f 	bic.w	r1, r3, #15
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	1e5a      	subs	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
 800715c:	e007      	b.n	800716e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 020f 	bic.w	r2, r2, #15
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	f043 0201 	orr.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
 800717e:	e007      	b.n	8007190 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f043 0210 	orr.w	r2, r3, #16
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007190:	7ffb      	ldrb	r3, [r7, #31]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3724      	adds	r7, #36	; 0x24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd90      	pop	{r4, r7, pc}
 800719a:	bf00      	nop

0800719c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a55      	ldr	r2, [pc, #340]	; (8007304 <HAL_ADC_Start_DMA+0x168>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_ADC_Start_DMA+0x20>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a54      	ldr	r2, [pc, #336]	; (8007308 <HAL_ADC_Start_DMA+0x16c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d101      	bne.n	80071c0 <HAL_ADC_Start_DMA+0x24>
 80071bc:	4b53      	ldr	r3, [pc, #332]	; (800730c <HAL_ADC_Start_DMA+0x170>)
 80071be:	e000      	b.n	80071c2 <HAL_ADC_Start_DMA+0x26>
 80071c0:	4b53      	ldr	r3, [pc, #332]	; (8007310 <HAL_ADC_Start_DMA+0x174>)
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fd64 	bl	8006c90 <LL_ADC_GetMultimode>
 80071c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fe1c 	bl	8006e0c <LL_ADC_REG_IsConversionOngoing>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 808c 	bne.w	80072f4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_ADC_Start_DMA+0x4e>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e087      	b.n	80072fa <HAL_ADC_Start_DMA+0x15e>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	d002      	beq.n	8007204 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b09      	cmp	r3, #9
 8007202:	d170      	bne.n	80072e6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fc07 	bl	8007a18 <ADC_Enable>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d163      	bne.n	80072dc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007218:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <HAL_ADC_Start_DMA+0x178>)
 800721a:	4013      	ands	r3, r2
 800721c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a37      	ldr	r2, [pc, #220]	; (8007308 <HAL_ADC_Start_DMA+0x16c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d002      	beq.n	8007234 <HAL_ADC_Start_DMA+0x98>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	e000      	b.n	8007236 <HAL_ADC_Start_DMA+0x9a>
 8007234:	4b33      	ldr	r3, [pc, #204]	; (8007304 <HAL_ADC_Start_DMA+0x168>)
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	4293      	cmp	r3, r2
 800723c:	d002      	beq.n	8007244 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007260:	f023 0206 	bic.w	r2, r3, #6
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	659a      	str	r2, [r3, #88]	; 0x58
 8007268:	e002      	b.n	8007270 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	4a28      	ldr	r2, [pc, #160]	; (8007318 <HAL_ADC_Start_DMA+0x17c>)
 8007276:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	4a27      	ldr	r2, [pc, #156]	; (800731c <HAL_ADC_Start_DMA+0x180>)
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007284:	4a26      	ldr	r2, [pc, #152]	; (8007320 <HAL_ADC_Start_DMA+0x184>)
 8007286:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	221c      	movs	r2, #28
 800728e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0210 	orr.w	r2, r2, #16
 80072a6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	4619      	mov	r1, r3
 80072b2:	4610      	mov	r0, r2
 80072b4:	f7ff fc89 	bl	8006bca <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3340      	adds	r3, #64	; 0x40
 80072c2:	4619      	mov	r1, r3
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f002 fa10 	bl	80096ec <HAL_DMA_Start_IT>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fd85 	bl	8006de4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80072da:	e00d      	b.n	80072f8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80072e4:	e008      	b.n	80072f8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80072f2:	e001      	b.n	80072f8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
 80072f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40022000 	.word	0x40022000
 8007308:	40022100 	.word	0x40022100
 800730c:	40022300 	.word	0x40022300
 8007310:	58026300 	.word	0x58026300
 8007314:	fffff0fe 	.word	0xfffff0fe
 8007318:	08007beb 	.word	0x08007beb
 800731c:	08007cc3 	.word	0x08007cc3
 8007320:	08007cdf 	.word	0x08007cdf

08007324 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007360:	b590      	push	{r4, r7, lr}
 8007362:	b0a1      	sub	sp, #132	; 0x84
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <HAL_ADC_ConfigChannel+0x1b0>)
 800737a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_ADC_ConfigChannel+0x2a>
 8007386:	2302      	movs	r3, #2
 8007388:	e32e      	b.n	80079e8 <HAL_ADC_ConfigChannel+0x688>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fd38 	bl	8006e0c <LL_ADC_REG_IsConversionOngoing>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f040 8313 	bne.w	80079ca <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	db2c      	blt.n	8007406 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <HAL_ADC_ConfigChannel+0x6a>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	0e9b      	lsrs	r3, r3, #26
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2201      	movs	r2, #1
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	e016      	b.n	80073f8 <HAL_ADC_ConfigChannel+0x98>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	fa93 f3a3 	rbit	r3, r3
 80073d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80073d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80073e2:	2320      	movs	r3, #32
 80073e4:	e003      	b.n	80073ee <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80073e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e8:	fab3 f383 	clz	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2201      	movs	r2, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	69d1      	ldr	r1, [r2, #28]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	430b      	orrs	r3, r1
 8007404:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7ff fbad 	bl	8006b72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fcf5 	bl	8006e0c <LL_ADC_REG_IsConversionOngoing>
 8007422:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fd02 	bl	8006e32 <LL_ADC_INJ_IsConversionOngoing>
 800742e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 80b8 	bne.w	80075a8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800743a:	2b00      	cmp	r3, #0
 800743c:	f040 80b4 	bne.w	80075a8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6819      	ldr	r1, [r3, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	461a      	mov	r2, r3
 800744e:	f7ff fbcf 	bl	8006bf0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007452:	4b30      	ldr	r3, [pc, #192]	; (8007514 <HAL_ADC_ConfigChannel+0x1b4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800745a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745e:	d10b      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x118>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	e01d      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x154>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10b      	bne.n	800749e <HAL_ADC_ConfigChannel+0x13e>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	e00a      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x154>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	089b      	lsrs	r3, r3, #2
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d02c      	beq.n	8007518 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6919      	ldr	r1, [r3, #16]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	f7ff faea 	bl	8006aa4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6919      	ldr	r1, [r3, #16]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	7e5b      	ldrb	r3, [r3, #25]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d102      	bne.n	80074e6 <HAL_ADC_ConfigChannel+0x186>
 80074e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e4:	e000      	b.n	80074e8 <HAL_ADC_ConfigChannel+0x188>
 80074e6:	2300      	movs	r3, #0
 80074e8:	461a      	mov	r2, r3
 80074ea:	f7ff fb14 	bl	8006b16 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6919      	ldr	r1, [r3, #16]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	7e1b      	ldrb	r3, [r3, #24]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d102      	bne.n	8007504 <HAL_ADC_ConfigChannel+0x1a4>
 80074fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007502:	e000      	b.n	8007506 <HAL_ADC_ConfigChannel+0x1a6>
 8007504:	2300      	movs	r3, #0
 8007506:	461a      	mov	r2, r3
 8007508:	f7ff faec 	bl	8006ae4 <LL_ADC_SetDataRightShift>
 800750c:	e04c      	b.n	80075a8 <HAL_ADC_ConfigChannel+0x248>
 800750e:	bf00      	nop
 8007510:	47ff0000 	.word	0x47ff0000
 8007514:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	069b      	lsls	r3, r3, #26
 8007528:	429a      	cmp	r2, r3
 800752a:	d107      	bne.n	800753c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800753a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	429a      	cmp	r2, r3
 800754e:	d107      	bne.n	8007560 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800755e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	069b      	lsls	r3, r3, #26
 8007570:	429a      	cmp	r2, r3
 8007572:	d107      	bne.n	8007584 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007582:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800758a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	069b      	lsls	r3, r3, #26
 8007594:	429a      	cmp	r2, r3
 8007596:	d107      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fbf3 	bl	8006d98 <LL_ADC_IsEnabled>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 8211 	bne.w	80079dc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f7ff fb3e 	bl	8006c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4aa1      	ldr	r2, [pc, #644]	; (8007858 <HAL_ADC_ConfigChannel+0x4f8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f040 812e 	bne.w	8007834 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <HAL_ADC_ConfigChannel+0x2a0>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	0e9b      	lsrs	r3, r3, #26
 80075ee:	3301      	adds	r3, #1
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	bf94      	ite	ls
 80075f8:	2301      	movls	r3, #1
 80075fa:	2300      	movhi	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	e019      	b.n	8007634 <HAL_ADC_ConfigChannel+0x2d4>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007608:	fa93 f3a3 	rbit	r3, r3
 800760c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800760e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007610:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8007618:	2320      	movs	r3, #32
 800761a:	e003      	b.n	8007624 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800761c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800761e:	fab3 f383 	clz	r3, r3
 8007622:	b2db      	uxtb	r3, r3
 8007624:	3301      	adds	r3, #1
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b09      	cmp	r3, #9
 800762c:	bf94      	ite	ls
 800762e:	2301      	movls	r3, #1
 8007630:	2300      	movhi	r3, #0
 8007632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007634:	2b00      	cmp	r3, #0
 8007636:	d079      	beq.n	800772c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <HAL_ADC_ConfigChannel+0x2f4>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	0e9b      	lsrs	r3, r3, #26
 800764a:	3301      	adds	r3, #1
 800764c:	069b      	lsls	r3, r3, #26
 800764e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007652:	e015      	b.n	8007680 <HAL_ADC_ConfigChannel+0x320>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	fa93 f3a3 	rbit	r3, r3
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007664:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800766c:	2320      	movs	r3, #32
 800766e:	e003      	b.n	8007678 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8007670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007672:	fab3 f383 	clz	r3, r3
 8007676:	b2db      	uxtb	r3, r3
 8007678:	3301      	adds	r3, #1
 800767a:	069b      	lsls	r3, r3, #26
 800767c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_ADC_ConfigChannel+0x340>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0e9b      	lsrs	r3, r3, #26
 8007692:	3301      	adds	r3, #1
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	e017      	b.n	80076d0 <HAL_ADC_ConfigChannel+0x370>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	fa93 f3a3 	rbit	r3, r3
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80076b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80076b8:	2320      	movs	r3, #32
 80076ba:	e003      	b.n	80076c4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80076bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076be:	fab3 f383 	clz	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	3301      	adds	r3, #1
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	2101      	movs	r1, #1
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	ea42 0103 	orr.w	r1, r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <HAL_ADC_ConfigChannel+0x396>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	0e9b      	lsrs	r3, r3, #26
 80076e6:	3301      	adds	r3, #1
 80076e8:	f003 021f 	and.w	r2, r3, #31
 80076ec:	4613      	mov	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	4413      	add	r3, r2
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	e018      	b.n	8007728 <HAL_ADC_ConfigChannel+0x3c8>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	fa93 f3a3 	rbit	r3, r3
 8007702:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800770e:	2320      	movs	r3, #32
 8007710:	e003      	b.n	800771a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	fab3 f383 	clz	r3, r3
 8007718:	b2db      	uxtb	r3, r3
 800771a:	3301      	adds	r3, #1
 800771c:	f003 021f 	and.w	r2, r3, #31
 8007720:	4613      	mov	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	4413      	add	r3, r2
 8007726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007728:	430b      	orrs	r3, r1
 800772a:	e07e      	b.n	800782a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_ADC_ConfigChannel+0x3e8>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	0e9b      	lsrs	r3, r3, #26
 800773e:	3301      	adds	r3, #1
 8007740:	069b      	lsls	r3, r3, #26
 8007742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007746:	e015      	b.n	8007774 <HAL_ADC_ConfigChannel+0x414>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	fa93 f3a3 	rbit	r3, r3
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8007760:	2320      	movs	r3, #32
 8007762:	e003      	b.n	800776c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	fab3 f383 	clz	r3, r3
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3301      	adds	r3, #1
 800776e:	069b      	lsls	r3, r3, #26
 8007770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_ADC_ConfigChannel+0x434>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	0e9b      	lsrs	r3, r3, #26
 8007786:	3301      	adds	r3, #1
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2101      	movs	r1, #1
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	e017      	b.n	80077c4 <HAL_ADC_ConfigChannel+0x464>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa93 f3a3 	rbit	r3, r3
 80077a0:	61bb      	str	r3, [r7, #24]
  return result;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80077ac:	2320      	movs	r3, #32
 80077ae:	e003      	b.n	80077b8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	fab3 f383 	clz	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	3301      	adds	r3, #1
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	2101      	movs	r1, #1
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	ea42 0103 	orr.w	r1, r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10d      	bne.n	80077f0 <HAL_ADC_ConfigChannel+0x490>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	0e9b      	lsrs	r3, r3, #26
 80077da:	3301      	adds	r3, #1
 80077dc:	f003 021f 	and.w	r2, r3, #31
 80077e0:	4613      	mov	r3, r2
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	3b1e      	subs	r3, #30
 80077e8:	051b      	lsls	r3, r3, #20
 80077ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077ee:	e01b      	b.n	8007828 <HAL_ADC_ConfigChannel+0x4c8>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	fa93 f3a3 	rbit	r3, r3
 80077fc:	60fb      	str	r3, [r7, #12]
  return result;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007808:	2320      	movs	r3, #32
 800780a:	e003      	b.n	8007814 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	fab3 f383 	clz	r3, r3
 8007812:	b2db      	uxtb	r3, r3
 8007814:	3301      	adds	r3, #1
 8007816:	f003 021f 	and.w	r2, r3, #31
 800781a:	4613      	mov	r3, r2
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4413      	add	r3, r2
 8007820:	3b1e      	subs	r3, #30
 8007822:	051b      	lsls	r3, r3, #20
 8007824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007828:	430b      	orrs	r3, r1
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	6892      	ldr	r2, [r2, #8]
 800782e:	4619      	mov	r1, r3
 8007830:	f7ff f9de 	bl	8006bf0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f280 80cf 	bge.w	80079dc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a06      	ldr	r2, [pc, #24]	; (800785c <HAL_ADC_ConfigChannel+0x4fc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_ADC_ConfigChannel+0x4f2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a04      	ldr	r2, [pc, #16]	; (8007860 <HAL_ADC_ConfigChannel+0x500>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d10a      	bne.n	8007868 <HAL_ADC_ConfigChannel+0x508>
 8007852:	4b04      	ldr	r3, [pc, #16]	; (8007864 <HAL_ADC_ConfigChannel+0x504>)
 8007854:	e009      	b.n	800786a <HAL_ADC_ConfigChannel+0x50a>
 8007856:	bf00      	nop
 8007858:	47ff0000 	.word	0x47ff0000
 800785c:	40022000 	.word	0x40022000
 8007860:	40022100 	.word	0x40022100
 8007864:	40022300 	.word	0x40022300
 8007868:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <HAL_ADC_ConfigChannel+0x690>)
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff f90c 	bl	8006a88 <LL_ADC_GetCommonPathInternalCh>
 8007870:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a5f      	ldr	r2, [pc, #380]	; (80079f4 <HAL_ADC_ConfigChannel+0x694>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d004      	beq.n	8007886 <HAL_ADC_ConfigChannel+0x526>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a5d      	ldr	r2, [pc, #372]	; (80079f8 <HAL_ADC_ConfigChannel+0x698>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d10e      	bne.n	80078a4 <HAL_ADC_ConfigChannel+0x544>
 8007886:	485b      	ldr	r0, [pc, #364]	; (80079f4 <HAL_ADC_ConfigChannel+0x694>)
 8007888:	f7ff fa86 	bl	8006d98 <LL_ADC_IsEnabled>
 800788c:	4604      	mov	r4, r0
 800788e:	485a      	ldr	r0, [pc, #360]	; (80079f8 <HAL_ADC_ConfigChannel+0x698>)
 8007890:	f7ff fa82 	bl	8006d98 <LL_ADC_IsEnabled>
 8007894:	4603      	mov	r3, r0
 8007896:	4323      	orrs	r3, r4
 8007898:	2b00      	cmp	r3, #0
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	e008      	b.n	80078b6 <HAL_ADC_ConfigChannel+0x556>
 80078a4:	4855      	ldr	r0, [pc, #340]	; (80079fc <HAL_ADC_ConfigChannel+0x69c>)
 80078a6:	f7ff fa77 	bl	8006d98 <LL_ADC_IsEnabled>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bf0c      	ite	eq
 80078b0:	2301      	moveq	r3, #1
 80078b2:	2300      	movne	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d07d      	beq.n	80079b6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a50      	ldr	r2, [pc, #320]	; (8007a00 <HAL_ADC_ConfigChannel+0x6a0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d130      	bne.n	8007926 <HAL_ADC_ConfigChannel+0x5c6>
 80078c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d12b      	bne.n	8007926 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a4a      	ldr	r2, [pc, #296]	; (80079fc <HAL_ADC_ConfigChannel+0x69c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	f040 8081 	bne.w	80079dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a45      	ldr	r2, [pc, #276]	; (80079f4 <HAL_ADC_ConfigChannel+0x694>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_ADC_ConfigChannel+0x58e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a43      	ldr	r2, [pc, #268]	; (80079f8 <HAL_ADC_ConfigChannel+0x698>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d101      	bne.n	80078f2 <HAL_ADC_ConfigChannel+0x592>
 80078ee:	4a45      	ldr	r2, [pc, #276]	; (8007a04 <HAL_ADC_ConfigChannel+0x6a4>)
 80078f0:	e000      	b.n	80078f4 <HAL_ADC_ConfigChannel+0x594>
 80078f2:	4a3f      	ldr	r2, [pc, #252]	; (80079f0 <HAL_ADC_ConfigChannel+0x690>)
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f7ff f8b0 	bl	8006a62 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007902:	4b41      	ldr	r3, [pc, #260]	; (8007a08 <HAL_ADC_ConfigChannel+0x6a8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a40      	ldr	r2, [pc, #256]	; (8007a0c <HAL_ADC_ConfigChannel+0x6ac>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	099b      	lsrs	r3, r3, #6
 8007910:	3301      	adds	r3, #1
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007916:	e002      	b.n	800791e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3b01      	subs	r3, #1
 800791c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f9      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007924:	e05a      	b.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a39      	ldr	r2, [pc, #228]	; (8007a10 <HAL_ADC_ConfigChannel+0x6b0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d11e      	bne.n	800796e <HAL_ADC_ConfigChannel+0x60e>
 8007930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d119      	bne.n	800796e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2f      	ldr	r2, [pc, #188]	; (80079fc <HAL_ADC_ConfigChannel+0x69c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d14b      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2a      	ldr	r2, [pc, #168]	; (80079f4 <HAL_ADC_ConfigChannel+0x694>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_ADC_ConfigChannel+0x5f8>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a29      	ldr	r2, [pc, #164]	; (80079f8 <HAL_ADC_ConfigChannel+0x698>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d101      	bne.n	800795c <HAL_ADC_ConfigChannel+0x5fc>
 8007958:	4a2a      	ldr	r2, [pc, #168]	; (8007a04 <HAL_ADC_ConfigChannel+0x6a4>)
 800795a:	e000      	b.n	800795e <HAL_ADC_ConfigChannel+0x5fe>
 800795c:	4a24      	ldr	r2, [pc, #144]	; (80079f0 <HAL_ADC_ConfigChannel+0x690>)
 800795e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7ff f87b 	bl	8006a62 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800796c:	e036      	b.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <HAL_ADC_ConfigChannel+0x6b4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d131      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
 8007978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d12c      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1d      	ldr	r2, [pc, #116]	; (80079fc <HAL_ADC_ConfigChannel+0x69c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d127      	bne.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <HAL_ADC_ConfigChannel+0x694>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_ADC_ConfigChannel+0x640>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <HAL_ADC_ConfigChannel+0x698>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d101      	bne.n	80079a4 <HAL_ADC_ConfigChannel+0x644>
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_ADC_ConfigChannel+0x6a4>)
 80079a2:	e000      	b.n	80079a6 <HAL_ADC_ConfigChannel+0x646>
 80079a4:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <HAL_ADC_ConfigChannel+0x690>)
 80079a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7ff f857 	bl	8006a62 <LL_ADC_SetCommonPathInternalCh>
 80079b4:	e012      	b.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80079c8:	e008      	b.n	80079dc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	f043 0220 	orr.w	r2, r3, #32
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80079e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3784      	adds	r7, #132	; 0x84
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd90      	pop	{r4, r7, pc}
 80079f0:	58026300 	.word	0x58026300
 80079f4:	40022000 	.word	0x40022000
 80079f8:	40022100 	.word	0x40022100
 80079fc:	58026000 	.word	0x58026000
 8007a00:	cb840000 	.word	0xcb840000
 8007a04:	40022300 	.word	0x40022300
 8007a08:	240000cc 	.word	0x240000cc
 8007a0c:	053e2d63 	.word	0x053e2d63
 8007a10:	c7520000 	.word	0xc7520000
 8007a14:	cfb80000 	.word	0xcfb80000

08007a18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff f9b7 	bl	8006d98 <LL_ADC_IsEnabled>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d16e      	bne.n	8007b0e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	4b38      	ldr	r3, [pc, #224]	; (8007b18 <ADC_Enable+0x100>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00d      	beq.n	8007a5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	f043 0210 	orr.w	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e05a      	b.n	8007b10 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f972 	bl	8006d48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007a64:	f7fe ffbc 	bl	80069e0 <HAL_GetTick>
 8007a68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2b      	ldr	r2, [pc, #172]	; (8007b1c <ADC_Enable+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <ADC_Enable+0x66>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a29      	ldr	r2, [pc, #164]	; (8007b20 <ADC_Enable+0x108>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d101      	bne.n	8007a82 <ADC_Enable+0x6a>
 8007a7e:	4b29      	ldr	r3, [pc, #164]	; (8007b24 <ADC_Enable+0x10c>)
 8007a80:	e000      	b.n	8007a84 <ADC_Enable+0x6c>
 8007a82:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <ADC_Enable+0x110>)
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff f903 	bl	8006c90 <LL_ADC_GetMultimode>
 8007a8a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a23      	ldr	r2, [pc, #140]	; (8007b20 <ADC_Enable+0x108>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d002      	beq.n	8007a9c <ADC_Enable+0x84>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	e000      	b.n	8007a9e <ADC_Enable+0x86>
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <ADC_Enable+0x104>)
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02c      	beq.n	8007b00 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d130      	bne.n	8007b0e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007aac:	e028      	b.n	8007b00 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff f970 	bl	8006d98 <LL_ADC_IsEnabled>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff f940 	bl	8006d48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007ac8:	f7fe ff8a 	bl	80069e0 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d914      	bls.n	8007b00 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d00d      	beq.n	8007b00 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	f043 0210 	orr.w	r2, r3, #16
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af4:	f043 0201 	orr.w	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e007      	b.n	8007b10 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d1cf      	bne.n	8007aae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	8000003f 	.word	0x8000003f
 8007b1c:	40022000 	.word	0x40022000
 8007b20:	40022100 	.word	0x40022100
 8007b24:	40022300 	.word	0x40022300
 8007b28:	58026300 	.word	0x58026300

08007b2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff f940 	bl	8006dbe <LL_ADC_IsDisableOngoing>
 8007b3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff f927 	bl	8006d98 <LL_ADC_IsEnabled>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d047      	beq.n	8007be0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d144      	bne.n	8007be0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 030d 	and.w	r3, r3, #13
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d10c      	bne.n	8007b7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff f901 	bl	8006d70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007b76:	f7fe ff33 	bl	80069e0 <HAL_GetTick>
 8007b7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b7c:	e029      	b.n	8007bd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f043 0210 	orr.w	r2, r3, #16
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e023      	b.n	8007be2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007b9a:	f7fe ff21 	bl	80069e0 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d914      	bls.n	8007bd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f043 0210 	orr.w	r2, r3, #16
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	f043 0201 	orr.w	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e007      	b.n	8007be2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1dc      	bne.n	8007b9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d14b      	bne.n	8007c9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d021      	beq.n	8007c62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe ff92 	bl	8006b4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d032      	beq.n	8007c94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d12b      	bne.n	8007c94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d11f      	bne.n	8007c94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	f043 0201 	orr.w	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54
 8007c60:	e018      	b.n	8007c94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d111      	bne.n	8007c94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d105      	bne.n	8007c94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	f043 0201 	orr.w	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fb45 	bl	8007324 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c9a:	e00e      	b.n	8007cba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fb4f 	bl	800734c <HAL_ADC_ErrorCallback>
}
 8007cae:	e004      	b.n	8007cba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff fb31 	bl	8007338 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	f043 0204 	orr.w	r2, r3, #4
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fb21 	bl	800734c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a7a      	ldr	r2, [pc, #488]	; (8007f0c <ADC_ConfigureBoostMode+0x1f8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <ADC_ConfigureBoostMode+0x1c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a79      	ldr	r2, [pc, #484]	; (8007f10 <ADC_ConfigureBoostMode+0x1fc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d109      	bne.n	8007d44 <ADC_ConfigureBoostMode+0x30>
 8007d30:	4b78      	ldr	r3, [pc, #480]	; (8007f14 <ADC_ConfigureBoostMode+0x200>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	e008      	b.n	8007d56 <ADC_ConfigureBoostMode+0x42>
 8007d44:	4b74      	ldr	r3, [pc, #464]	; (8007f18 <ADC_ConfigureBoostMode+0x204>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bf14      	ite	ne
 8007d50:	2301      	movne	r3, #1
 8007d52:	2300      	moveq	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01c      	beq.n	8007d94 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007d5a:	f008 fc4d 	bl	80105f8 <HAL_RCC_GetHCLKFreq>
 8007d5e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d68:	d010      	beq.n	8007d8c <ADC_ConfigureBoostMode+0x78>
 8007d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d6e:	d873      	bhi.n	8007e58 <ADC_ConfigureBoostMode+0x144>
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d002      	beq.n	8007d7c <ADC_ConfigureBoostMode+0x68>
 8007d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7a:	d16d      	bne.n	8007e58 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	60fb      	str	r3, [r7, #12]
        break;
 8007d8a:	e068      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	089b      	lsrs	r3, r3, #2
 8007d90:	60fb      	str	r3, [r7, #12]
        break;
 8007d92:	e064      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007d94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d98:	f04f 0100 	mov.w	r1, #0
 8007d9c:	f009 fed4 	bl	8011b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8007da0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007daa:	d051      	beq.n	8007e50 <ADC_ConfigureBoostMode+0x13c>
 8007dac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007db0:	d854      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007db2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007db6:	d047      	beq.n	8007e48 <ADC_ConfigureBoostMode+0x134>
 8007db8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007dbc:	d84e      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007dbe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007dc2:	d03d      	beq.n	8007e40 <ADC_ConfigureBoostMode+0x12c>
 8007dc4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007dc8:	d848      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dce:	d033      	beq.n	8007e38 <ADC_ConfigureBoostMode+0x124>
 8007dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd4:	d842      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007dd6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007dda:	d029      	beq.n	8007e30 <ADC_ConfigureBoostMode+0x11c>
 8007ddc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007de0:	d83c      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007de2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007de6:	d01a      	beq.n	8007e1e <ADC_ConfigureBoostMode+0x10a>
 8007de8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007dec:	d836      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007dee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007df2:	d014      	beq.n	8007e1e <ADC_ConfigureBoostMode+0x10a>
 8007df4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007df8:	d830      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dfe:	d00e      	beq.n	8007e1e <ADC_ConfigureBoostMode+0x10a>
 8007e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e04:	d82a      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007e06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e0a:	d008      	beq.n	8007e1e <ADC_ConfigureBoostMode+0x10a>
 8007e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e10:	d824      	bhi.n	8007e5c <ADC_ConfigureBoostMode+0x148>
 8007e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e16:	d002      	beq.n	8007e1e <ADC_ConfigureBoostMode+0x10a>
 8007e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e1c:	d11e      	bne.n	8007e5c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	0c9b      	lsrs	r3, r3, #18
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	60fb      	str	r3, [r7, #12]
        break;
 8007e2e:	e016      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	60fb      	str	r3, [r7, #12]
        break;
 8007e36:	e012      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	60fb      	str	r3, [r7, #12]
        break;
 8007e3e:	e00e      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	099b      	lsrs	r3, r3, #6
 8007e44:	60fb      	str	r3, [r7, #12]
        break;
 8007e46:	e00a      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	09db      	lsrs	r3, r3, #7
 8007e4c:	60fb      	str	r3, [r7, #12]
        break;
 8007e4e:	e006      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	60fb      	str	r3, [r7, #12]
        break;
 8007e56:	e002      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
        break;
 8007e58:	bf00      	nop
 8007e5a:	e000      	b.n	8007e5e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007e5c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007e5e:	f7fe fdcb 	bl	80069f8 <HAL_GetREVID>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d815      	bhi.n	8007e98 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <ADC_ConfigureBoostMode+0x208>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d908      	bls.n	8007e86 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689a      	ldr	r2, [r3, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007e84:	e03e      	b.n	8007f04 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e94:	609a      	str	r2, [r3, #8]
}
 8007e96:	e035      	b.n	8007f04 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <ADC_ConfigureBoostMode+0x20c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d808      	bhi.n	8007eb8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007eb4:	609a      	str	r2, [r3, #8]
}
 8007eb6:	e025      	b.n	8007f04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4a1a      	ldr	r2, [pc, #104]	; (8007f24 <ADC_ConfigureBoostMode+0x210>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d80a      	bhi.n	8007ed6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	e016      	b.n	8007f04 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <ADC_ConfigureBoostMode+0x214>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d80a      	bhi.n	8007ef4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef0:	609a      	str	r2, [r3, #8]
}
 8007ef2:	e007      	b.n	8007f04 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007f02:	609a      	str	r2, [r3, #8]
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40022000 	.word	0x40022000
 8007f10:	40022100 	.word	0x40022100
 8007f14:	40022300 	.word	0x40022300
 8007f18:	58026300 	.word	0x58026300
 8007f1c:	01312d00 	.word	0x01312d00
 8007f20:	005f5e10 	.word	0x005f5e10
 8007f24:	00bebc20 	.word	0x00bebc20
 8007f28:	017d7840 	.word	0x017d7840

08007f2c <LL_ADC_IsEnabled>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <LL_ADC_IsEnabled+0x18>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <LL_ADC_IsEnabled+0x1a>
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <LL_ADC_StartCalibration>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <LL_ADC_StartCalibration+0x38>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007f74:	430a      	orrs	r2, r1
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	609a      	str	r2, [r3, #8]
}
 8007f80:	bf00      	nop
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	3ffeffc0 	.word	0x3ffeffc0

08007f90 <LL_ADC_IsCalibrationOnGoing>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa4:	d101      	bne.n	8007faa <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <LL_ADC_REG_IsConversionOngoing>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d101      	bne.n	8007fd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_ADCEx_Calibration_Start+0x1e>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e04c      	b.n	8008098 <HAL_ADCEx_Calibration_Start+0xb8>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fd90 	bl	8007b2c <ADC_Disable>
 800800c:	4603      	mov	r3, r0
 800800e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008010:	7dfb      	ldrb	r3, [r7, #23]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d135      	bne.n	8008082 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801a:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800801c:	4013      	ands	r3, r2
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff ff90 	bl	8007f54 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008034:	e014      	b.n	8008060 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d30d      	bcc.n	8008060 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	f023 0312 	bic.w	r3, r3, #18
 800804c:	f043 0210 	orr.w	r2, r3, #16
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e01b      	b.n	8008098 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff93 	bl	8007f90 <LL_ADC_IsCalibrationOnGoing>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e2      	bne.n	8008036 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	f043 0201 	orr.w	r2, r3, #1
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	655a      	str	r2, [r3, #84]	; 0x54
 8008080:	e005      	b.n	800808e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	f043 0210 	orr.w	r2, r3, #16
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	ffffeefd 	.word	0xffffeefd
 80080a4:	25c3f800 	.word	0x25c3f800

080080a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b09f      	sub	sp, #124	; 0x7c
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e0be      	b.n	8008244 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80080ce:	2300      	movs	r3, #0
 80080d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a5c      	ldr	r2, [pc, #368]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d102      	bne.n	80080e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80080e0:	4b5b      	ldr	r3, [pc, #364]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	e001      	b.n	80080ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10b      	bne.n	8008108 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	f043 0220 	orr.w	r2, r3, #32
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e09d      	b.n	8008244 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff ff54 	bl	8007fb8 <LL_ADC_REG_IsConversionOngoing>
 8008110:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff ff4e 	bl	8007fb8 <LL_ADC_REG_IsConversionOngoing>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d17f      	bne.n	8008222 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008124:	2b00      	cmp	r3, #0
 8008126:	d17c      	bne.n	8008222 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a47      	ldr	r2, [pc, #284]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d004      	beq.n	800813c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a46      	ldr	r2, [pc, #280]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d101      	bne.n	8008140 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800813c:	4b45      	ldr	r3, [pc, #276]	; (8008254 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800813e:	e000      	b.n	8008142 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008140:	4b45      	ldr	r3, [pc, #276]	; (8008258 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008142:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d039      	beq.n	80081c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800814c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	431a      	orrs	r2, r3
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3a      	ldr	r2, [pc, #232]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a38      	ldr	r2, [pc, #224]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10e      	bne.n	8008190 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008172:	4836      	ldr	r0, [pc, #216]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008174:	f7ff feda 	bl	8007f2c <LL_ADC_IsEnabled>
 8008178:	4604      	mov	r4, r0
 800817a:	4835      	ldr	r0, [pc, #212]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800817c:	f7ff fed6 	bl	8007f2c <LL_ADC_IsEnabled>
 8008180:	4603      	mov	r3, r0
 8008182:	4323      	orrs	r3, r4
 8008184:	2b00      	cmp	r3, #0
 8008186:	bf0c      	ite	eq
 8008188:	2301      	moveq	r3, #1
 800818a:	2300      	movne	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e008      	b.n	80081a2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008190:	4832      	ldr	r0, [pc, #200]	; (800825c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008192:	f7ff fecb 	bl	8007f2c <LL_ADC_IsEnabled>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d047      	beq.n	8008236 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80081a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	4b2d      	ldr	r3, [pc, #180]	; (8008260 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	6811      	ldr	r1, [r2, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	6892      	ldr	r2, [r2, #8]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	431a      	orrs	r2, r3
 80081ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80081be:	e03a      	b.n	8008236 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a1e      	ldr	r2, [pc, #120]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10e      	bne.n	80081fe <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80081e0:	481a      	ldr	r0, [pc, #104]	; (800824c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80081e2:	f7ff fea3 	bl	8007f2c <LL_ADC_IsEnabled>
 80081e6:	4604      	mov	r4, r0
 80081e8:	4819      	ldr	r0, [pc, #100]	; (8008250 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081ea:	f7ff fe9f 	bl	8007f2c <LL_ADC_IsEnabled>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4323      	orrs	r3, r4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	e008      	b.n	8008210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80081fe:	4817      	ldr	r0, [pc, #92]	; (800825c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008200:	f7ff fe94 	bl	8007f2c <LL_ADC_IsEnabled>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	4b11      	ldr	r3, [pc, #68]	; (8008260 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800821a:	4013      	ands	r3, r2
 800821c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800821e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008220:	e009      	b.n	8008236 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f043 0220 	orr.w	r2, r3, #32
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008234:	e000      	b.n	8008238 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008236:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008240:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008244:	4618      	mov	r0, r3
 8008246:	377c      	adds	r7, #124	; 0x7c
 8008248:	46bd      	mov	sp, r7
 800824a:	bd90      	pop	{r4, r7, pc}
 800824c:	40022000 	.word	0x40022000
 8008250:	40022100 	.word	0x40022100
 8008254:	40022300 	.word	0x40022300
 8008258:	58026300 	.word	0x58026300
 800825c:	58026000 	.word	0x58026000
 8008260:	fffff0e0 	.word	0xfffff0e0

08008264 <__NVIC_SetPriorityGrouping>:
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <__NVIC_SetPriorityGrouping+0x40>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008280:	4013      	ands	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <__NVIC_SetPriorityGrouping+0x44>)
 800828e:	4313      	orrs	r3, r2
 8008290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008292:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <__NVIC_SetPriorityGrouping+0x40>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	60d3      	str	r3, [r2, #12]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	e000ed00 	.word	0xe000ed00
 80082a8:	05fa0000 	.word	0x05fa0000

080082ac <__NVIC_GetPriorityGrouping>:
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <__NVIC_GetPriorityGrouping+0x18>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	f003 0307 	and.w	r3, r3, #7
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <__NVIC_EnableIRQ>:
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80082d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	db0b      	blt.n	80082f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	f003 021f 	and.w	r2, r3, #31
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <__NVIC_EnableIRQ+0x38>)
 80082e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	2001      	movs	r0, #1
 80082ea:	fa00 f202 	lsl.w	r2, r0, r2
 80082ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e100 	.word	0xe000e100

08008304 <__NVIC_DisableIRQ>:
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800830e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	db12      	blt.n	800833c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	f003 021f 	and.w	r2, r3, #31
 800831c:	490a      	ldr	r1, [pc, #40]	; (8008348 <__NVIC_DisableIRQ+0x44>)
 800831e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	2001      	movs	r0, #1
 8008326:	fa00 f202 	lsl.w	r2, r0, r2
 800832a:	3320      	adds	r3, #32
 800832c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008330:	f3bf 8f4f 	dsb	sy
}
 8008334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008336:	f3bf 8f6f 	isb	sy
}
 800833a:	bf00      	nop
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	e000e100 	.word	0xe000e100

0800834c <__NVIC_SetPriority>:
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	db0a      	blt.n	8008376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	490c      	ldr	r1, [pc, #48]	; (8008398 <__NVIC_SetPriority+0x4c>)
 8008366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800836a:	0112      	lsls	r2, r2, #4
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	440b      	add	r3, r1
 8008370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008374:	e00a      	b.n	800838c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4908      	ldr	r1, [pc, #32]	; (800839c <__NVIC_SetPriority+0x50>)
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	3b04      	subs	r3, #4
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	440b      	add	r3, r1
 800838a:	761a      	strb	r2, [r3, #24]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000e100 	.word	0xe000e100
 800839c:	e000ed00 	.word	0xe000ed00

080083a0 <NVIC_EncodePriority>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	b089      	sub	sp, #36	; 0x24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f1c3 0307 	rsb	r3, r3, #7
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	bf28      	it	cs
 80083be:	2304      	movcs	r3, #4
 80083c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	d902      	bls.n	80083d0 <NVIC_EncodePriority+0x30>
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3b03      	subs	r3, #3
 80083ce:	e000      	b.n	80083d2 <NVIC_EncodePriority+0x32>
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	43da      	mvns	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	401a      	ands	r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083e8:	f04f 31ff 	mov.w	r1, #4294967295
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	fa01 f303 	lsl.w	r3, r1, r3
 80083f2:	43d9      	mvns	r1, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083f8:	4313      	orrs	r3, r2
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3724      	adds	r7, #36	; 0x24
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <__NVIC_SystemReset>:
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800840c:	f3bf 8f4f 	dsb	sy
}
 8008410:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <__NVIC_SystemReset+0x24>)
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800841a:	4904      	ldr	r1, [pc, #16]	; (800842c <__NVIC_SystemReset+0x24>)
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <__NVIC_SystemReset+0x28>)
 800841e:	4313      	orrs	r3, r2
 8008420:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008422:	f3bf 8f4f 	dsb	sy
}
 8008426:	bf00      	nop
    __NOP();
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <__NVIC_SystemReset+0x20>
 800842c:	e000ed00 	.word	0xe000ed00
 8008430:	05fa0004 	.word	0x05fa0004

08008434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff11 	bl	8008264 <__NVIC_SetPriorityGrouping>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008458:	f7ff ff28 	bl	80082ac <__NVIC_GetPriorityGrouping>
 800845c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	6978      	ldr	r0, [r7, #20]
 8008464:	f7ff ff9c 	bl	80083a0 <NVIC_EncodePriority>
 8008468:	4602      	mov	r2, r0
 800846a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800846e:	4611      	mov	r1, r2
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff ff6b 	bl	800834c <__NVIC_SetPriority>
}
 8008476:	bf00      	nop
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	4603      	mov	r3, r0
 8008486:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff ff1b 	bl	80082c8 <__NVIC_EnableIRQ>
}
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	4603      	mov	r3, r0
 80084a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80084a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff2b 	bl	8008304 <__NVIC_DisableIRQ>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80084ba:	f7ff ffa5 	bl	8008408 <__NVIC_SystemReset>

080084be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e014      	b.n	80084fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	791b      	ldrb	r3, [r3, #4]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d105      	bne.n	80084e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7f8 fb87 	bl	8000bf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e046      	b.n	80085a4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_DAC_Start+0x20>
 800851e:	2302      	movs	r3, #2
 8008520:	e040      	b.n	80085a4 <HAL_DAC_Start+0xa2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2201      	movs	r2, #1
 800853c:	409a      	lsls	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10f      	bne.n	800856c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008556:	2b02      	cmp	r3, #2
 8008558:	d11d      	bne.n	8008596 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	e014      	b.n	8008596 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2102      	movs	r1, #2
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	429a      	cmp	r2, r3
 8008584:	d107      	bne.n	8008596 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0202 	orr.w	r2, r2, #2
 8008594:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0a2      	b.n	800870e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	795b      	ldrb	r3, [r3, #5]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_DAC_Start_DMA+0x24>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e09c      	b.n	800870e <HAL_DAC_Start_DMA+0x15e>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2202      	movs	r2, #2
 80085de:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d129      	bne.n	800863a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	4a4b      	ldr	r2, [pc, #300]	; (8008718 <HAL_DAC_Start_DMA+0x168>)
 80085ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	4a4a      	ldr	r2, [pc, #296]	; (800871c <HAL_DAC_Start_DMA+0x16c>)
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	4a49      	ldr	r2, [pc, #292]	; (8008720 <HAL_DAC_Start_DMA+0x170>)
 80085fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800860c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_DAC_Start_DMA+0x6c>
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	2b04      	cmp	r3, #4
 8008618:	d005      	beq.n	8008626 <HAL_DAC_Start_DMA+0x76>
 800861a:	e009      	b.n	8008630 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	613b      	str	r3, [r7, #16]
        break;
 8008624:	e033      	b.n	800868e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	613b      	str	r3, [r7, #16]
        break;
 800862e:	e02e      	b.n	800868e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3310      	adds	r3, #16
 8008636:	613b      	str	r3, [r7, #16]
        break;
 8008638:	e029      	b.n	800868e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4a39      	ldr	r2, [pc, #228]	; (8008724 <HAL_DAC_Start_DMA+0x174>)
 8008640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	4a38      	ldr	r2, [pc, #224]	; (8008728 <HAL_DAC_Start_DMA+0x178>)
 8008648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4a37      	ldr	r2, [pc, #220]	; (800872c <HAL_DAC_Start_DMA+0x17c>)
 8008650:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008660:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_DAC_Start_DMA+0xc0>
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	2b04      	cmp	r3, #4
 800866c:	d005      	beq.n	800867a <HAL_DAC_Start_DMA+0xca>
 800866e:	e009      	b.n	8008684 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3314      	adds	r3, #20
 8008676:	613b      	str	r3, [r7, #16]
        break;
 8008678:	e009      	b.n	800868e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3318      	adds	r3, #24
 8008680:	613b      	str	r3, [r7, #16]
        break;
 8008682:	e004      	b.n	800868e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	331c      	adds	r3, #28
 800868a:	613b      	str	r3, [r7, #16]
        break;
 800868c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d111      	bne.n	80086b8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6898      	ldr	r0, [r3, #8]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	f001 f81d 	bl	80096ec <HAL_DMA_Start_IT>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
 80086b6:	e010      	b.n	80086da <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80086c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68d8      	ldr	r0, [r3, #12]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	f001 f80b 	bl	80096ec <HAL_DMA_Start_IT>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10c      	bne.n	8008700 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 0310 	and.w	r3, r3, #16
 80086f2:	2201      	movs	r2, #1
 80086f4:	409a      	lsls	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e005      	b.n	800870c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f043 0204 	orr.w	r2, r3, #4
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	08008ba1 	.word	0x08008ba1
 800871c:	08008bc3 	.word	0x08008bc3
 8008720:	08008bdf 	.word	0x08008bdf
 8008724:	08008c5d 	.word	0x08008c5d
 8008728:	08008c7f 	.word	0x08008c7f
 800872c:	08008c9b 	.word	0x08008c9b

08008730 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e03e      	b.n	80087c2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008754:	fa02 f303 	lsl.w	r3, r2, r3
 8008758:	43da      	mvns	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	400a      	ands	r2, r1
 8008760:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	2201      	movs	r2, #1
 8008770:	fa02 f303 	lsl.w	r3, r2, r3
 8008774:	43da      	mvns	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	400a      	ands	r2, r1
 800877c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10d      	bne.n	80087a0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fa19 	bl	8009bc0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e00c      	b.n	80087ba <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fa0b 	bl	8009bc0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80087b8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01d      	beq.n	8008828 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d018      	beq.n	8008828 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2204      	movs	r2, #4
 80087fa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f043 0201 	orr.w	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008810:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008820:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f86f 	bl	8008906 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01d      	beq.n	800886e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d018      	beq.n	800886e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2204      	movs	r2, #4
 8008840:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f043 0202 	orr.w	r2, r3, #2
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008856:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008866:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9ed 	bl	8008c48 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e015      	b.n	80088be <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	3308      	adds	r3, #8
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e004      	b.n	80088b4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	3314      	adds	r3, #20
 80088b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	461a      	mov	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <HAL_DAC_ConfigChannel+0x1e>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e12a      	b.n	8008b94 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	795b      	ldrb	r3, [r3, #5]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_DAC_ConfigChannel+0x2e>
 8008946:	2302      	movs	r3, #2
 8008948:	e124      	b.n	8008b94 <HAL_DAC_ConfigChannel+0x278>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2202      	movs	r2, #2
 8008954:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b04      	cmp	r3, #4
 800895c:	d17a      	bne.n	8008a54 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800895e:	f7fe f83f 	bl	80069e0 <HAL_GetTick>
 8008962:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d13d      	bne.n	80089e6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800896a:	e018      	b.n	800899e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800896c:	f7fe f838 	bl	80069e0 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b01      	cmp	r3, #1
 8008978:	d911      	bls.n	800899e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008980:	4b86      	ldr	r3, [pc, #536]	; (8008b9c <HAL_DAC_ConfigChannel+0x280>)
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f043 0208 	orr.w	r2, r3, #8
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2203      	movs	r2, #3
 8008998:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e0fa      	b.n	8008b94 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a4:	4b7d      	ldr	r3, [pc, #500]	; (8008b9c <HAL_DAC_ConfigChannel+0x280>)
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1df      	bne.n	800896c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	6992      	ldr	r2, [r2, #24]
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40
 80089b6:	e020      	b.n	80089fa <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089b8:	f7fe f812 	bl	80069e0 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d90f      	bls.n	80089e6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da0a      	bge.n	80089e6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f043 0208 	orr.w	r2, r3, #8
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2203      	movs	r2, #3
 80089e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e0d6      	b.n	8008b94 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dbe3      	blt.n	80089b8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	6992      	ldr	r2, [r2, #24]
 80089f8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	ea02 0103 	and.w	r1, r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f003 0310 	and.w	r3, r3, #16
 8008a1e:	409a      	lsls	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	21ff      	movs	r1, #255	; 0xff
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	ea02 0103 	and.w	r1, r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0310 	and.w	r3, r3, #16
 8008a4a:	409a      	lsls	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d11d      	bne.n	8008a98 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	221f      	movs	r2, #31
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	43db      	mvns	r3, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	4013      	ands	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2207      	movs	r2, #7
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43db      	mvns	r3, r3
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d102      	bne.n	8008ac2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac0:	e00f      	b.n	8008ae2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d102      	bne.n	8008ad0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008aca:	2301      	movs	r3, #1
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ace:	e008      	b.n	8008ae2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
 8008adc:	e001      	b.n	8008ae2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6819      	ldr	r1, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	43da      	mvns	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	400a      	ands	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	43db      	mvns	r3, r3
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	4013      	ands	r3, r2
 8008b46:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	22c0      	movs	r2, #192	; 0xc0
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	43da      	mvns	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	400a      	ands	r2, r1
 8008b82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3728      	adds	r7, #40	; 0x28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20008000 	.word	0x20008000

08008ba0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff fe8b 	bl	80088ca <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	711a      	strb	r2, [r3, #4]
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fe84 	bl	80088de <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f043 0204 	orr.w	r2, r3, #4
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fe7a 	bl	80088f2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	711a      	strb	r2, [r3, #4]
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f7ff ffce 	bl	8008c0c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	711a      	strb	r2, [r3, #4]
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff ffc7 	bl	8008c20 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f043 0204 	orr.w	r2, r3, #4
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7ff ffbd 	bl	8008c34 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	711a      	strb	r2, [r3, #4]
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008cd0:	f7fd fe86 	bl	80069e0 <HAL_GetTick>
 8008cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e316      	b.n	800930e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a66      	ldr	r2, [pc, #408]	; (8008e80 <HAL_DMA_Init+0x1b8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d04a      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a65      	ldr	r2, [pc, #404]	; (8008e84 <HAL_DMA_Init+0x1bc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d045      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a63      	ldr	r2, [pc, #396]	; (8008e88 <HAL_DMA_Init+0x1c0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d040      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a62      	ldr	r2, [pc, #392]	; (8008e8c <HAL_DMA_Init+0x1c4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d03b      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a60      	ldr	r2, [pc, #384]	; (8008e90 <HAL_DMA_Init+0x1c8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d036      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a5f      	ldr	r2, [pc, #380]	; (8008e94 <HAL_DMA_Init+0x1cc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d031      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a5d      	ldr	r2, [pc, #372]	; (8008e98 <HAL_DMA_Init+0x1d0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d02c      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a5c      	ldr	r2, [pc, #368]	; (8008e9c <HAL_DMA_Init+0x1d4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d027      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a5a      	ldr	r2, [pc, #360]	; (8008ea0 <HAL_DMA_Init+0x1d8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d022      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a59      	ldr	r2, [pc, #356]	; (8008ea4 <HAL_DMA_Init+0x1dc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d01d      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a57      	ldr	r2, [pc, #348]	; (8008ea8 <HAL_DMA_Init+0x1e0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d018      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a56      	ldr	r2, [pc, #344]	; (8008eac <HAL_DMA_Init+0x1e4>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a54      	ldr	r2, [pc, #336]	; (8008eb0 <HAL_DMA_Init+0x1e8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00e      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a53      	ldr	r2, [pc, #332]	; (8008eb4 <HAL_DMA_Init+0x1ec>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d009      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a51      	ldr	r2, [pc, #324]	; (8008eb8 <HAL_DMA_Init+0x1f0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_DMA_Init+0xb8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a50      	ldr	r2, [pc, #320]	; (8008ebc <HAL_DMA_Init+0x1f4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d101      	bne.n	8008d84 <HAL_DMA_Init+0xbc>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <HAL_DMA_Init+0xbe>
 8008d84:	2300      	movs	r3, #0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 813b 	beq.w	8009002 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a37      	ldr	r2, [pc, #220]	; (8008e80 <HAL_DMA_Init+0x1b8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d04a      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a36      	ldr	r2, [pc, #216]	; (8008e84 <HAL_DMA_Init+0x1bc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d045      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a34      	ldr	r2, [pc, #208]	; (8008e88 <HAL_DMA_Init+0x1c0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d040      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a33      	ldr	r2, [pc, #204]	; (8008e8c <HAL_DMA_Init+0x1c4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d03b      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a31      	ldr	r2, [pc, #196]	; (8008e90 <HAL_DMA_Init+0x1c8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d036      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a30      	ldr	r2, [pc, #192]	; (8008e94 <HAL_DMA_Init+0x1cc>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d031      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2e      	ldr	r2, [pc, #184]	; (8008e98 <HAL_DMA_Init+0x1d0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d02c      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a2d      	ldr	r2, [pc, #180]	; (8008e9c <HAL_DMA_Init+0x1d4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d027      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a2b      	ldr	r2, [pc, #172]	; (8008ea0 <HAL_DMA_Init+0x1d8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d022      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <HAL_DMA_Init+0x1dc>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d01d      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a28      	ldr	r2, [pc, #160]	; (8008ea8 <HAL_DMA_Init+0x1e0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d018      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a27      	ldr	r2, [pc, #156]	; (8008eac <HAL_DMA_Init+0x1e4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d013      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a25      	ldr	r2, [pc, #148]	; (8008eb0 <HAL_DMA_Init+0x1e8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00e      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a24      	ldr	r2, [pc, #144]	; (8008eb4 <HAL_DMA_Init+0x1ec>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d009      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a22      	ldr	r2, [pc, #136]	; (8008eb8 <HAL_DMA_Init+0x1f0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_DMA_Init+0x174>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a21      	ldr	r2, [pc, #132]	; (8008ebc <HAL_DMA_Init+0x1f4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d108      	bne.n	8008e4e <HAL_DMA_Init+0x186>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0201 	bic.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e007      	b.n	8008e5e <HAL_DMA_Init+0x196>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e5e:	e02f      	b.n	8008ec0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e60:	f7fd fdbe 	bl	80069e0 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2b05      	cmp	r3, #5
 8008e6c:	d928      	bls.n	8008ec0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2203      	movs	r2, #3
 8008e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e246      	b.n	800930e <HAL_DMA_Init+0x646>
 8008e80:	40020010 	.word	0x40020010
 8008e84:	40020028 	.word	0x40020028
 8008e88:	40020040 	.word	0x40020040
 8008e8c:	40020058 	.word	0x40020058
 8008e90:	40020070 	.word	0x40020070
 8008e94:	40020088 	.word	0x40020088
 8008e98:	400200a0 	.word	0x400200a0
 8008e9c:	400200b8 	.word	0x400200b8
 8008ea0:	40020410 	.word	0x40020410
 8008ea4:	40020428 	.word	0x40020428
 8008ea8:	40020440 	.word	0x40020440
 8008eac:	40020458 	.word	0x40020458
 8008eb0:	40020470 	.word	0x40020470
 8008eb4:	40020488 	.word	0x40020488
 8008eb8:	400204a0 	.word	0x400204a0
 8008ebc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1c8      	bne.n	8008e60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4b83      	ldr	r3, [pc, #524]	; (80090e8 <HAL_DMA_Init+0x420>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008ee6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ef2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008efe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d107      	bne.n	8008f24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008f24:	4b71      	ldr	r3, [pc, #452]	; (80090ec <HAL_DMA_Init+0x424>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	4b71      	ldr	r3, [pc, #452]	; (80090f0 <HAL_DMA_Init+0x428>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f30:	d328      	bcc.n	8008f84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b28      	cmp	r3, #40	; 0x28
 8008f38:	d903      	bls.n	8008f42 <HAL_DMA_Init+0x27a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f40:	d917      	bls.n	8008f72 <HAL_DMA_Init+0x2aa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b3e      	cmp	r3, #62	; 0x3e
 8008f48:	d903      	bls.n	8008f52 <HAL_DMA_Init+0x28a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b42      	cmp	r3, #66	; 0x42
 8008f50:	d90f      	bls.n	8008f72 <HAL_DMA_Init+0x2aa>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b46      	cmp	r3, #70	; 0x46
 8008f58:	d903      	bls.n	8008f62 <HAL_DMA_Init+0x29a>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	2b48      	cmp	r3, #72	; 0x48
 8008f60:	d907      	bls.n	8008f72 <HAL_DMA_Init+0x2aa>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b4e      	cmp	r3, #78	; 0x4e
 8008f68:	d905      	bls.n	8008f76 <HAL_DMA_Init+0x2ae>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b52      	cmp	r3, #82	; 0x52
 8008f70:	d801      	bhi.n	8008f76 <HAL_DMA_Init+0x2ae>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <HAL_DMA_Init+0x2b0>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0307 	bic.w	r3, r3, #7
 8008f9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d117      	bne.n	8008fde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00e      	beq.n	8008fde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f002 fd03 	bl	800b9cc <DMA_CheckFifoParam>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2240      	movs	r2, #64	; 0x40
 8008fd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e197      	b.n	800930e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f002 fc3e 	bl	800b868 <DMA_CalcBaseAndBitshift>
 8008fec:	4603      	mov	r3, r0
 8008fee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	223f      	movs	r2, #63	; 0x3f
 8008ffa:	409a      	lsls	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	609a      	str	r2, [r3, #8]
 8009000:	e0cd      	b.n	800919e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a3b      	ldr	r2, [pc, #236]	; (80090f4 <HAL_DMA_Init+0x42c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d022      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a39      	ldr	r2, [pc, #228]	; (80090f8 <HAL_DMA_Init+0x430>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d01d      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a38      	ldr	r2, [pc, #224]	; (80090fc <HAL_DMA_Init+0x434>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d018      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a36      	ldr	r2, [pc, #216]	; (8009100 <HAL_DMA_Init+0x438>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d013      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a35      	ldr	r2, [pc, #212]	; (8009104 <HAL_DMA_Init+0x43c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00e      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a33      	ldr	r2, [pc, #204]	; (8009108 <HAL_DMA_Init+0x440>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d009      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a32      	ldr	r2, [pc, #200]	; (800910c <HAL_DMA_Init+0x444>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d004      	beq.n	8009052 <HAL_DMA_Init+0x38a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a30      	ldr	r2, [pc, #192]	; (8009110 <HAL_DMA_Init+0x448>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d101      	bne.n	8009056 <HAL_DMA_Init+0x38e>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <HAL_DMA_Init+0x390>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8097 	beq.w	800918c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a24      	ldr	r2, [pc, #144]	; (80090f4 <HAL_DMA_Init+0x42c>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d021      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a22      	ldr	r2, [pc, #136]	; (80090f8 <HAL_DMA_Init+0x430>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d01c      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a21      	ldr	r2, [pc, #132]	; (80090fc <HAL_DMA_Init+0x434>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d017      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <HAL_DMA_Init+0x438>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d012      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <HAL_DMA_Init+0x43c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00d      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <HAL_DMA_Init+0x440>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d008      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1b      	ldr	r2, [pc, #108]	; (800910c <HAL_DMA_Init+0x444>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <HAL_DMA_Init+0x3e4>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a19      	ldr	r2, [pc, #100]	; (8009110 <HAL_DMA_Init+0x448>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	4b12      	ldr	r3, [pc, #72]	; (8009114 <HAL_DMA_Init+0x44c>)
 80090ca:	4013      	ands	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d020      	beq.n	8009118 <HAL_DMA_Init+0x450>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d102      	bne.n	80090e4 <HAL_DMA_Init+0x41c>
 80090de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090e2:	e01a      	b.n	800911a <HAL_DMA_Init+0x452>
 80090e4:	2300      	movs	r3, #0
 80090e6:	e018      	b.n	800911a <HAL_DMA_Init+0x452>
 80090e8:	fe10803f 	.word	0xfe10803f
 80090ec:	5c001000 	.word	0x5c001000
 80090f0:	ffff0000 	.word	0xffff0000
 80090f4:	58025408 	.word	0x58025408
 80090f8:	5802541c 	.word	0x5802541c
 80090fc:	58025430 	.word	0x58025430
 8009100:	58025444 	.word	0x58025444
 8009104:	58025458 	.word	0x58025458
 8009108:	5802546c 	.word	0x5802546c
 800910c:	58025480 	.word	0x58025480
 8009110:	58025494 	.word	0x58025494
 8009114:	fffe000f 	.word	0xfffe000f
 8009118:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	68d2      	ldr	r2, [r2, #12]
 800911e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009148:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	4b6e      	ldr	r3, [pc, #440]	; (8009318 <HAL_DMA_Init+0x650>)
 8009160:	4413      	add	r3, r2
 8009162:	4a6e      	ldr	r2, [pc, #440]	; (800931c <HAL_DMA_Init+0x654>)
 8009164:	fba2 2303 	umull	r2, r3, r2, r3
 8009168:	091b      	lsrs	r3, r3, #4
 800916a:	009a      	lsls	r2, r3, #2
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f002 fb79 	bl	800b868 <DMA_CalcBaseAndBitshift>
 8009176:	4603      	mov	r3, r0
 8009178:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917e:	f003 031f 	and.w	r3, r3, #31
 8009182:	2201      	movs	r2, #1
 8009184:	409a      	lsls	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	605a      	str	r2, [r3, #4]
 800918a:	e008      	b.n	800919e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2240      	movs	r2, #64	; 0x40
 8009190:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2203      	movs	r2, #3
 8009196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e0b7      	b.n	800930e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a5f      	ldr	r2, [pc, #380]	; (8009320 <HAL_DMA_Init+0x658>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d072      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a5d      	ldr	r2, [pc, #372]	; (8009324 <HAL_DMA_Init+0x65c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d06d      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a5c      	ldr	r2, [pc, #368]	; (8009328 <HAL_DMA_Init+0x660>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d068      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a5a      	ldr	r2, [pc, #360]	; (800932c <HAL_DMA_Init+0x664>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d063      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a59      	ldr	r2, [pc, #356]	; (8009330 <HAL_DMA_Init+0x668>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d05e      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a57      	ldr	r2, [pc, #348]	; (8009334 <HAL_DMA_Init+0x66c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d059      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a56      	ldr	r2, [pc, #344]	; (8009338 <HAL_DMA_Init+0x670>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d054      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a54      	ldr	r2, [pc, #336]	; (800933c <HAL_DMA_Init+0x674>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d04f      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a53      	ldr	r2, [pc, #332]	; (8009340 <HAL_DMA_Init+0x678>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d04a      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a51      	ldr	r2, [pc, #324]	; (8009344 <HAL_DMA_Init+0x67c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d045      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a50      	ldr	r2, [pc, #320]	; (8009348 <HAL_DMA_Init+0x680>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d040      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a4e      	ldr	r2, [pc, #312]	; (800934c <HAL_DMA_Init+0x684>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d03b      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4d      	ldr	r2, [pc, #308]	; (8009350 <HAL_DMA_Init+0x688>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d036      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a4b      	ldr	r2, [pc, #300]	; (8009354 <HAL_DMA_Init+0x68c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d031      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a4a      	ldr	r2, [pc, #296]	; (8009358 <HAL_DMA_Init+0x690>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d02c      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a48      	ldr	r2, [pc, #288]	; (800935c <HAL_DMA_Init+0x694>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d027      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a47      	ldr	r2, [pc, #284]	; (8009360 <HAL_DMA_Init+0x698>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d022      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a45      	ldr	r2, [pc, #276]	; (8009364 <HAL_DMA_Init+0x69c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d01d      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a44      	ldr	r2, [pc, #272]	; (8009368 <HAL_DMA_Init+0x6a0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d018      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a42      	ldr	r2, [pc, #264]	; (800936c <HAL_DMA_Init+0x6a4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d013      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a41      	ldr	r2, [pc, #260]	; (8009370 <HAL_DMA_Init+0x6a8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00e      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a3f      	ldr	r2, [pc, #252]	; (8009374 <HAL_DMA_Init+0x6ac>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d009      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a3e      	ldr	r2, [pc, #248]	; (8009378 <HAL_DMA_Init+0x6b0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d004      	beq.n	800928e <HAL_DMA_Init+0x5c6>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a3c      	ldr	r2, [pc, #240]	; (800937c <HAL_DMA_Init+0x6b4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d101      	bne.n	8009292 <HAL_DMA_Init+0x5ca>
 800928e:	2301      	movs	r3, #1
 8009290:	e000      	b.n	8009294 <HAL_DMA_Init+0x5cc>
 8009292:	2300      	movs	r3, #0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d032      	beq.n	80092fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f002 fc13 	bl	800bac4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d102      	bne.n	80092ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b4:	b2d2      	uxtb	r2, r2
 80092b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80092c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d010      	beq.n	80092ec <HAL_DMA_Init+0x624>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b08      	cmp	r3, #8
 80092d0:	d80c      	bhi.n	80092ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f002 fc90 	bl	800bbf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80092e8:	605a      	str	r2, [r3, #4]
 80092ea:	e008      	b.n	80092fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	a7fdabf8 	.word	0xa7fdabf8
 800931c:	cccccccd 	.word	0xcccccccd
 8009320:	40020010 	.word	0x40020010
 8009324:	40020028 	.word	0x40020028
 8009328:	40020040 	.word	0x40020040
 800932c:	40020058 	.word	0x40020058
 8009330:	40020070 	.word	0x40020070
 8009334:	40020088 	.word	0x40020088
 8009338:	400200a0 	.word	0x400200a0
 800933c:	400200b8 	.word	0x400200b8
 8009340:	40020410 	.word	0x40020410
 8009344:	40020428 	.word	0x40020428
 8009348:	40020440 	.word	0x40020440
 800934c:	40020458 	.word	0x40020458
 8009350:	40020470 	.word	0x40020470
 8009354:	40020488 	.word	0x40020488
 8009358:	400204a0 	.word	0x400204a0
 800935c:	400204b8 	.word	0x400204b8
 8009360:	58025408 	.word	0x58025408
 8009364:	5802541c 	.word	0x5802541c
 8009368:	58025430 	.word	0x58025430
 800936c:	58025444 	.word	0x58025444
 8009370:	58025458 	.word	0x58025458
 8009374:	5802546c 	.word	0x5802546c
 8009378:	58025480 	.word	0x58025480
 800937c:	58025494 	.word	0x58025494

08009380 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e1a8      	b.n	80096e4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a82      	ldr	r2, [pc, #520]	; (80095a0 <HAL_DMA_DeInit+0x220>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d04a      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a80      	ldr	r2, [pc, #512]	; (80095a4 <HAL_DMA_DeInit+0x224>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d045      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a7f      	ldr	r2, [pc, #508]	; (80095a8 <HAL_DMA_DeInit+0x228>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d040      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a7d      	ldr	r2, [pc, #500]	; (80095ac <HAL_DMA_DeInit+0x22c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d03b      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a7c      	ldr	r2, [pc, #496]	; (80095b0 <HAL_DMA_DeInit+0x230>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d036      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a7a      	ldr	r2, [pc, #488]	; (80095b4 <HAL_DMA_DeInit+0x234>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d031      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a79      	ldr	r2, [pc, #484]	; (80095b8 <HAL_DMA_DeInit+0x238>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d02c      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a77      	ldr	r2, [pc, #476]	; (80095bc <HAL_DMA_DeInit+0x23c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d027      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a76      	ldr	r2, [pc, #472]	; (80095c0 <HAL_DMA_DeInit+0x240>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d022      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a74      	ldr	r2, [pc, #464]	; (80095c4 <HAL_DMA_DeInit+0x244>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d01d      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a73      	ldr	r2, [pc, #460]	; (80095c8 <HAL_DMA_DeInit+0x248>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d018      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a71      	ldr	r2, [pc, #452]	; (80095cc <HAL_DMA_DeInit+0x24c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a70      	ldr	r2, [pc, #448]	; (80095d0 <HAL_DMA_DeInit+0x250>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00e      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a6e      	ldr	r2, [pc, #440]	; (80095d4 <HAL_DMA_DeInit+0x254>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a6d      	ldr	r2, [pc, #436]	; (80095d8 <HAL_DMA_DeInit+0x258>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_DMA_DeInit+0xb2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a6b      	ldr	r2, [pc, #428]	; (80095dc <HAL_DMA_DeInit+0x25c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d108      	bne.n	8009444 <HAL_DMA_DeInit+0xc4>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0201 	bic.w	r2, r2, #1
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e007      	b.n	8009454 <HAL_DMA_DeInit+0xd4>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0201 	bic.w	r2, r2, #1
 8009452:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a51      	ldr	r2, [pc, #324]	; (80095a0 <HAL_DMA_DeInit+0x220>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d04a      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a50      	ldr	r2, [pc, #320]	; (80095a4 <HAL_DMA_DeInit+0x224>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d045      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a4e      	ldr	r2, [pc, #312]	; (80095a8 <HAL_DMA_DeInit+0x228>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d040      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a4d      	ldr	r2, [pc, #308]	; (80095ac <HAL_DMA_DeInit+0x22c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d03b      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a4b      	ldr	r2, [pc, #300]	; (80095b0 <HAL_DMA_DeInit+0x230>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d036      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a4a      	ldr	r2, [pc, #296]	; (80095b4 <HAL_DMA_DeInit+0x234>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d031      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a48      	ldr	r2, [pc, #288]	; (80095b8 <HAL_DMA_DeInit+0x238>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02c      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a47      	ldr	r2, [pc, #284]	; (80095bc <HAL_DMA_DeInit+0x23c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d027      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a45      	ldr	r2, [pc, #276]	; (80095c0 <HAL_DMA_DeInit+0x240>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d022      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a44      	ldr	r2, [pc, #272]	; (80095c4 <HAL_DMA_DeInit+0x244>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d01d      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a42      	ldr	r2, [pc, #264]	; (80095c8 <HAL_DMA_DeInit+0x248>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d018      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a41      	ldr	r2, [pc, #260]	; (80095cc <HAL_DMA_DeInit+0x24c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d013      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a3f      	ldr	r2, [pc, #252]	; (80095d0 <HAL_DMA_DeInit+0x250>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00e      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a3e      	ldr	r2, [pc, #248]	; (80095d4 <HAL_DMA_DeInit+0x254>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a3c      	ldr	r2, [pc, #240]	; (80095d8 <HAL_DMA_DeInit+0x258>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_DMA_DeInit+0x174>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a3b      	ldr	r2, [pc, #236]	; (80095dc <HAL_DMA_DeInit+0x25c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d101      	bne.n	80094f8 <HAL_DMA_DeInit+0x178>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <HAL_DMA_DeInit+0x17a>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d025      	beq.n	800954a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2221      	movs	r2, #33	; 0x21
 800952c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 f99a 	bl	800b868 <DMA_CalcBaseAndBitshift>
 8009534:	4603      	mov	r3, r0
 8009536:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953c:	f003 031f 	and.w	r3, r3, #31
 8009540:	223f      	movs	r2, #63	; 0x3f
 8009542:	409a      	lsls	r2, r3
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	609a      	str	r2, [r3, #8]
 8009548:	e081      	b.n	800964e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a24      	ldr	r2, [pc, #144]	; (80095e0 <HAL_DMA_DeInit+0x260>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d022      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a22      	ldr	r2, [pc, #136]	; (80095e4 <HAL_DMA_DeInit+0x264>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01d      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a21      	ldr	r2, [pc, #132]	; (80095e8 <HAL_DMA_DeInit+0x268>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d018      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <HAL_DMA_DeInit+0x26c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <HAL_DMA_DeInit+0x270>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00e      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1c      	ldr	r2, [pc, #112]	; (80095f4 <HAL_DMA_DeInit+0x274>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d009      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1b      	ldr	r2, [pc, #108]	; (80095f8 <HAL_DMA_DeInit+0x278>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d004      	beq.n	800959a <HAL_DMA_DeInit+0x21a>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a19      	ldr	r2, [pc, #100]	; (80095fc <HAL_DMA_DeInit+0x27c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d132      	bne.n	8009600 <HAL_DMA_DeInit+0x280>
 800959a:	2301      	movs	r3, #1
 800959c:	e031      	b.n	8009602 <HAL_DMA_DeInit+0x282>
 800959e:	bf00      	nop
 80095a0:	40020010 	.word	0x40020010
 80095a4:	40020028 	.word	0x40020028
 80095a8:	40020040 	.word	0x40020040
 80095ac:	40020058 	.word	0x40020058
 80095b0:	40020070 	.word	0x40020070
 80095b4:	40020088 	.word	0x40020088
 80095b8:	400200a0 	.word	0x400200a0
 80095bc:	400200b8 	.word	0x400200b8
 80095c0:	40020410 	.word	0x40020410
 80095c4:	40020428 	.word	0x40020428
 80095c8:	40020440 	.word	0x40020440
 80095cc:	40020458 	.word	0x40020458
 80095d0:	40020470 	.word	0x40020470
 80095d4:	40020488 	.word	0x40020488
 80095d8:	400204a0 	.word	0x400204a0
 80095dc:	400204b8 	.word	0x400204b8
 80095e0:	58025408 	.word	0x58025408
 80095e4:	5802541c 	.word	0x5802541c
 80095e8:	58025430 	.word	0x58025430
 80095ec:	58025444 	.word	0x58025444
 80095f0:	58025458 	.word	0x58025458
 80095f4:	5802546c 	.word	0x5802546c
 80095f8:	58025480 	.word	0x58025480
 80095fc:	58025494 	.word	0x58025494
 8009600:	2300      	movs	r3, #0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d021      	beq.n	800964a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2200      	movs	r2, #0
 800962c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 f91a 	bl	800b868 <DMA_CalcBaseAndBitshift>
 8009634:	4603      	mov	r3, r0
 8009636:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	2201      	movs	r2, #1
 8009642:	409a      	lsls	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	605a      	str	r2, [r3, #4]
 8009648:	e001      	b.n	800964e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e04a      	b.n	80096e4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f002 fa38 	bl	800bac4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009658:	2b00      	cmp	r3, #0
 800965a:	d008      	beq.n	800966e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800966c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00f      	beq.n	8009696 <HAL_DMA_DeInit+0x316>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b08      	cmp	r3, #8
 800967c:	d80b      	bhi.n	8009696 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f002 faba 	bl	800bbf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009694:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e226      	b.n	8009b56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_DMA_Start_IT+0x2a>
 8009712:	2302      	movs	r3, #2
 8009714:	e21f      	b.n	8009b56 <HAL_DMA_Start_IT+0x46a>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b01      	cmp	r3, #1
 8009728:	f040 820a 	bne.w	8009b40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a68      	ldr	r2, [pc, #416]	; (80098e0 <HAL_DMA_Start_IT+0x1f4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d04a      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a66      	ldr	r2, [pc, #408]	; (80098e4 <HAL_DMA_Start_IT+0x1f8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d045      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a65      	ldr	r2, [pc, #404]	; (80098e8 <HAL_DMA_Start_IT+0x1fc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d040      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a63      	ldr	r2, [pc, #396]	; (80098ec <HAL_DMA_Start_IT+0x200>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d03b      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a62      	ldr	r2, [pc, #392]	; (80098f0 <HAL_DMA_Start_IT+0x204>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d036      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a60      	ldr	r2, [pc, #384]	; (80098f4 <HAL_DMA_Start_IT+0x208>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d031      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a5f      	ldr	r2, [pc, #380]	; (80098f8 <HAL_DMA_Start_IT+0x20c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d02c      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a5d      	ldr	r2, [pc, #372]	; (80098fc <HAL_DMA_Start_IT+0x210>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d027      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a5c      	ldr	r2, [pc, #368]	; (8009900 <HAL_DMA_Start_IT+0x214>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d022      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a5a      	ldr	r2, [pc, #360]	; (8009904 <HAL_DMA_Start_IT+0x218>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d01d      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a59      	ldr	r2, [pc, #356]	; (8009908 <HAL_DMA_Start_IT+0x21c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d018      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a57      	ldr	r2, [pc, #348]	; (800990c <HAL_DMA_Start_IT+0x220>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a56      	ldr	r2, [pc, #344]	; (8009910 <HAL_DMA_Start_IT+0x224>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00e      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a54      	ldr	r2, [pc, #336]	; (8009914 <HAL_DMA_Start_IT+0x228>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d009      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a53      	ldr	r2, [pc, #332]	; (8009918 <HAL_DMA_Start_IT+0x22c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d004      	beq.n	80097da <HAL_DMA_Start_IT+0xee>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a51      	ldr	r2, [pc, #324]	; (800991c <HAL_DMA_Start_IT+0x230>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d108      	bne.n	80097ec <HAL_DMA_Start_IT+0x100>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0201 	bic.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	e007      	b.n	80097fc <HAL_DMA_Start_IT+0x110>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f001 fe84 	bl	800b510 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a34      	ldr	r2, [pc, #208]	; (80098e0 <HAL_DMA_Start_IT+0x1f4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d04a      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a33      	ldr	r2, [pc, #204]	; (80098e4 <HAL_DMA_Start_IT+0x1f8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d045      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a31      	ldr	r2, [pc, #196]	; (80098e8 <HAL_DMA_Start_IT+0x1fc>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d040      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a30      	ldr	r2, [pc, #192]	; (80098ec <HAL_DMA_Start_IT+0x200>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d03b      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a2e      	ldr	r2, [pc, #184]	; (80098f0 <HAL_DMA_Start_IT+0x204>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d036      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a2d      	ldr	r2, [pc, #180]	; (80098f4 <HAL_DMA_Start_IT+0x208>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d031      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a2b      	ldr	r2, [pc, #172]	; (80098f8 <HAL_DMA_Start_IT+0x20c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d02c      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a2a      	ldr	r2, [pc, #168]	; (80098fc <HAL_DMA_Start_IT+0x210>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d027      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a28      	ldr	r2, [pc, #160]	; (8009900 <HAL_DMA_Start_IT+0x214>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d022      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a27      	ldr	r2, [pc, #156]	; (8009904 <HAL_DMA_Start_IT+0x218>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d01d      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a25      	ldr	r2, [pc, #148]	; (8009908 <HAL_DMA_Start_IT+0x21c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d018      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a24      	ldr	r2, [pc, #144]	; (800990c <HAL_DMA_Start_IT+0x220>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d013      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a22      	ldr	r2, [pc, #136]	; (8009910 <HAL_DMA_Start_IT+0x224>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00e      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a21      	ldr	r2, [pc, #132]	; (8009914 <HAL_DMA_Start_IT+0x228>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d009      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1f      	ldr	r2, [pc, #124]	; (8009918 <HAL_DMA_Start_IT+0x22c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d004      	beq.n	80098a8 <HAL_DMA_Start_IT+0x1bc>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1e      	ldr	r2, [pc, #120]	; (800991c <HAL_DMA_Start_IT+0x230>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d101      	bne.n	80098ac <HAL_DMA_Start_IT+0x1c0>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <HAL_DMA_Start_IT+0x1c2>
 80098ac:	2300      	movs	r3, #0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d036      	beq.n	8009920 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f023 021e 	bic.w	r2, r3, #30
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0216 	orr.w	r2, r2, #22
 80098c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d03e      	beq.n	800994c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0208 	orr.w	r2, r2, #8
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	e035      	b.n	800994c <HAL_DMA_Start_IT+0x260>
 80098e0:	40020010 	.word	0x40020010
 80098e4:	40020028 	.word	0x40020028
 80098e8:	40020040 	.word	0x40020040
 80098ec:	40020058 	.word	0x40020058
 80098f0:	40020070 	.word	0x40020070
 80098f4:	40020088 	.word	0x40020088
 80098f8:	400200a0 	.word	0x400200a0
 80098fc:	400200b8 	.word	0x400200b8
 8009900:	40020410 	.word	0x40020410
 8009904:	40020428 	.word	0x40020428
 8009908:	40020440 	.word	0x40020440
 800990c:	40020458 	.word	0x40020458
 8009910:	40020470 	.word	0x40020470
 8009914:	40020488 	.word	0x40020488
 8009918:	400204a0 	.word	0x400204a0
 800991c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f023 020e 	bic.w	r2, r3, #14
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 020a 	orr.w	r2, r2, #10
 8009932:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	2b00      	cmp	r3, #0
 800993a:	d007      	beq.n	800994c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0204 	orr.w	r2, r2, #4
 800994a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <HAL_DMA_Start_IT+0x474>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d072      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a82      	ldr	r2, [pc, #520]	; (8009b64 <HAL_DMA_Start_IT+0x478>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d06d      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a80      	ldr	r2, [pc, #512]	; (8009b68 <HAL_DMA_Start_IT+0x47c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d068      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a7f      	ldr	r2, [pc, #508]	; (8009b6c <HAL_DMA_Start_IT+0x480>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d063      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a7d      	ldr	r2, [pc, #500]	; (8009b70 <HAL_DMA_Start_IT+0x484>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d05e      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a7c      	ldr	r2, [pc, #496]	; (8009b74 <HAL_DMA_Start_IT+0x488>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d059      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a7a      	ldr	r2, [pc, #488]	; (8009b78 <HAL_DMA_Start_IT+0x48c>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d054      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a79      	ldr	r2, [pc, #484]	; (8009b7c <HAL_DMA_Start_IT+0x490>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d04f      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a77      	ldr	r2, [pc, #476]	; (8009b80 <HAL_DMA_Start_IT+0x494>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d04a      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a76      	ldr	r2, [pc, #472]	; (8009b84 <HAL_DMA_Start_IT+0x498>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d045      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a74      	ldr	r2, [pc, #464]	; (8009b88 <HAL_DMA_Start_IT+0x49c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d040      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a73      	ldr	r2, [pc, #460]	; (8009b8c <HAL_DMA_Start_IT+0x4a0>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d03b      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a71      	ldr	r2, [pc, #452]	; (8009b90 <HAL_DMA_Start_IT+0x4a4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d036      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a70      	ldr	r2, [pc, #448]	; (8009b94 <HAL_DMA_Start_IT+0x4a8>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d031      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a6e      	ldr	r2, [pc, #440]	; (8009b98 <HAL_DMA_Start_IT+0x4ac>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d02c      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a6d      	ldr	r2, [pc, #436]	; (8009b9c <HAL_DMA_Start_IT+0x4b0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d027      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a6b      	ldr	r2, [pc, #428]	; (8009ba0 <HAL_DMA_Start_IT+0x4b4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d022      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a6a      	ldr	r2, [pc, #424]	; (8009ba4 <HAL_DMA_Start_IT+0x4b8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d01d      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a68      	ldr	r2, [pc, #416]	; (8009ba8 <HAL_DMA_Start_IT+0x4bc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d018      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a67      	ldr	r2, [pc, #412]	; (8009bac <HAL_DMA_Start_IT+0x4c0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a65      	ldr	r2, [pc, #404]	; (8009bb0 <HAL_DMA_Start_IT+0x4c4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d00e      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a64      	ldr	r2, [pc, #400]	; (8009bb4 <HAL_DMA_Start_IT+0x4c8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d009      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a62      	ldr	r2, [pc, #392]	; (8009bb8 <HAL_DMA_Start_IT+0x4cc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d004      	beq.n	8009a3c <HAL_DMA_Start_IT+0x350>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a61      	ldr	r2, [pc, #388]	; (8009bbc <HAL_DMA_Start_IT+0x4d0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d101      	bne.n	8009a40 <HAL_DMA_Start_IT+0x354>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <HAL_DMA_Start_IT+0x356>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d01a      	beq.n	8009a7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a37      	ldr	r2, [pc, #220]	; (8009b60 <HAL_DMA_Start_IT+0x474>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d04a      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a36      	ldr	r2, [pc, #216]	; (8009b64 <HAL_DMA_Start_IT+0x478>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d045      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a34      	ldr	r2, [pc, #208]	; (8009b68 <HAL_DMA_Start_IT+0x47c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d040      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a33      	ldr	r2, [pc, #204]	; (8009b6c <HAL_DMA_Start_IT+0x480>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d03b      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a31      	ldr	r2, [pc, #196]	; (8009b70 <HAL_DMA_Start_IT+0x484>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d036      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a30      	ldr	r2, [pc, #192]	; (8009b74 <HAL_DMA_Start_IT+0x488>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d031      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a2e      	ldr	r2, [pc, #184]	; (8009b78 <HAL_DMA_Start_IT+0x48c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d02c      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a2d      	ldr	r2, [pc, #180]	; (8009b7c <HAL_DMA_Start_IT+0x490>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d027      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a2b      	ldr	r2, [pc, #172]	; (8009b80 <HAL_DMA_Start_IT+0x494>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d022      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a2a      	ldr	r2, [pc, #168]	; (8009b84 <HAL_DMA_Start_IT+0x498>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d01d      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a28      	ldr	r2, [pc, #160]	; (8009b88 <HAL_DMA_Start_IT+0x49c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d018      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a27      	ldr	r2, [pc, #156]	; (8009b8c <HAL_DMA_Start_IT+0x4a0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d013      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a25      	ldr	r2, [pc, #148]	; (8009b90 <HAL_DMA_Start_IT+0x4a4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00e      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a24      	ldr	r2, [pc, #144]	; (8009b94 <HAL_DMA_Start_IT+0x4a8>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d009      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a22      	ldr	r2, [pc, #136]	; (8009b98 <HAL_DMA_Start_IT+0x4ac>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <HAL_DMA_Start_IT+0x430>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a21      	ldr	r2, [pc, #132]	; (8009b9c <HAL_DMA_Start_IT+0x4b0>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d108      	bne.n	8009b2e <HAL_DMA_Start_IT+0x442>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	e012      	b.n	8009b54 <HAL_DMA_Start_IT+0x468>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e009      	b.n	8009b54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	40020010 	.word	0x40020010
 8009b64:	40020028 	.word	0x40020028
 8009b68:	40020040 	.word	0x40020040
 8009b6c:	40020058 	.word	0x40020058
 8009b70:	40020070 	.word	0x40020070
 8009b74:	40020088 	.word	0x40020088
 8009b78:	400200a0 	.word	0x400200a0
 8009b7c:	400200b8 	.word	0x400200b8
 8009b80:	40020410 	.word	0x40020410
 8009b84:	40020428 	.word	0x40020428
 8009b88:	40020440 	.word	0x40020440
 8009b8c:	40020458 	.word	0x40020458
 8009b90:	40020470 	.word	0x40020470
 8009b94:	40020488 	.word	0x40020488
 8009b98:	400204a0 	.word	0x400204a0
 8009b9c:	400204b8 	.word	0x400204b8
 8009ba0:	58025408 	.word	0x58025408
 8009ba4:	5802541c 	.word	0x5802541c
 8009ba8:	58025430 	.word	0x58025430
 8009bac:	58025444 	.word	0x58025444
 8009bb0:	58025458 	.word	0x58025458
 8009bb4:	5802546c 	.word	0x5802546c
 8009bb8:	58025480 	.word	0x58025480
 8009bbc:	58025494 	.word	0x58025494

08009bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009bc8:	f7fc ff0a 	bl	80069e0 <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e2dc      	b.n	800a192 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d008      	beq.n	8009bf6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2280      	movs	r2, #128	; 0x80
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e2cd      	b.n	800a192 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a76      	ldr	r2, [pc, #472]	; (8009dd4 <HAL_DMA_Abort+0x214>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d04a      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a74      	ldr	r2, [pc, #464]	; (8009dd8 <HAL_DMA_Abort+0x218>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d045      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a73      	ldr	r2, [pc, #460]	; (8009ddc <HAL_DMA_Abort+0x21c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d040      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a71      	ldr	r2, [pc, #452]	; (8009de0 <HAL_DMA_Abort+0x220>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d03b      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a70      	ldr	r2, [pc, #448]	; (8009de4 <HAL_DMA_Abort+0x224>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d036      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a6e      	ldr	r2, [pc, #440]	; (8009de8 <HAL_DMA_Abort+0x228>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d031      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a6d      	ldr	r2, [pc, #436]	; (8009dec <HAL_DMA_Abort+0x22c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d02c      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a6b      	ldr	r2, [pc, #428]	; (8009df0 <HAL_DMA_Abort+0x230>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d027      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a6a      	ldr	r2, [pc, #424]	; (8009df4 <HAL_DMA_Abort+0x234>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d022      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a68      	ldr	r2, [pc, #416]	; (8009df8 <HAL_DMA_Abort+0x238>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d01d      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a67      	ldr	r2, [pc, #412]	; (8009dfc <HAL_DMA_Abort+0x23c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d018      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a65      	ldr	r2, [pc, #404]	; (8009e00 <HAL_DMA_Abort+0x240>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a64      	ldr	r2, [pc, #400]	; (8009e04 <HAL_DMA_Abort+0x244>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00e      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a62      	ldr	r2, [pc, #392]	; (8009e08 <HAL_DMA_Abort+0x248>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d009      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a61      	ldr	r2, [pc, #388]	; (8009e0c <HAL_DMA_Abort+0x24c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d004      	beq.n	8009c96 <HAL_DMA_Abort+0xd6>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a5f      	ldr	r2, [pc, #380]	; (8009e10 <HAL_DMA_Abort+0x250>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d101      	bne.n	8009c9a <HAL_DMA_Abort+0xda>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <HAL_DMA_Abort+0xdc>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d013      	beq.n	8009cc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 021e 	bic.w	r2, r2, #30
 8009cae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	695a      	ldr	r2, [r3, #20]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e00a      	b.n	8009cde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f022 020e 	bic.w	r2, r2, #14
 8009cd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a3c      	ldr	r2, [pc, #240]	; (8009dd4 <HAL_DMA_Abort+0x214>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d072      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a3a      	ldr	r2, [pc, #232]	; (8009dd8 <HAL_DMA_Abort+0x218>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d06d      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a39      	ldr	r2, [pc, #228]	; (8009ddc <HAL_DMA_Abort+0x21c>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d068      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a37      	ldr	r2, [pc, #220]	; (8009de0 <HAL_DMA_Abort+0x220>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d063      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a36      	ldr	r2, [pc, #216]	; (8009de4 <HAL_DMA_Abort+0x224>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d05e      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a34      	ldr	r2, [pc, #208]	; (8009de8 <HAL_DMA_Abort+0x228>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d059      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a33      	ldr	r2, [pc, #204]	; (8009dec <HAL_DMA_Abort+0x22c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d054      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a31      	ldr	r2, [pc, #196]	; (8009df0 <HAL_DMA_Abort+0x230>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d04f      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <HAL_DMA_Abort+0x234>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d04a      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a2e      	ldr	r2, [pc, #184]	; (8009df8 <HAL_DMA_Abort+0x238>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d045      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <HAL_DMA_Abort+0x23c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d040      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a2b      	ldr	r2, [pc, #172]	; (8009e00 <HAL_DMA_Abort+0x240>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d03b      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a2a      	ldr	r2, [pc, #168]	; (8009e04 <HAL_DMA_Abort+0x244>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d036      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a28      	ldr	r2, [pc, #160]	; (8009e08 <HAL_DMA_Abort+0x248>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d031      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a27      	ldr	r2, [pc, #156]	; (8009e0c <HAL_DMA_Abort+0x24c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d02c      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a25      	ldr	r2, [pc, #148]	; (8009e10 <HAL_DMA_Abort+0x250>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d027      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a24      	ldr	r2, [pc, #144]	; (8009e14 <HAL_DMA_Abort+0x254>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d022      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a22      	ldr	r2, [pc, #136]	; (8009e18 <HAL_DMA_Abort+0x258>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01d      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a21      	ldr	r2, [pc, #132]	; (8009e1c <HAL_DMA_Abort+0x25c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d018      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a1f      	ldr	r2, [pc, #124]	; (8009e20 <HAL_DMA_Abort+0x260>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d013      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <HAL_DMA_Abort+0x264>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00e      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a1c      	ldr	r2, [pc, #112]	; (8009e28 <HAL_DMA_Abort+0x268>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d009      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1b      	ldr	r2, [pc, #108]	; (8009e2c <HAL_DMA_Abort+0x26c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d004      	beq.n	8009dce <HAL_DMA_Abort+0x20e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <HAL_DMA_Abort+0x270>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d132      	bne.n	8009e34 <HAL_DMA_Abort+0x274>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e031      	b.n	8009e36 <HAL_DMA_Abort+0x276>
 8009dd2:	bf00      	nop
 8009dd4:	40020010 	.word	0x40020010
 8009dd8:	40020028 	.word	0x40020028
 8009ddc:	40020040 	.word	0x40020040
 8009de0:	40020058 	.word	0x40020058
 8009de4:	40020070 	.word	0x40020070
 8009de8:	40020088 	.word	0x40020088
 8009dec:	400200a0 	.word	0x400200a0
 8009df0:	400200b8 	.word	0x400200b8
 8009df4:	40020410 	.word	0x40020410
 8009df8:	40020428 	.word	0x40020428
 8009dfc:	40020440 	.word	0x40020440
 8009e00:	40020458 	.word	0x40020458
 8009e04:	40020470 	.word	0x40020470
 8009e08:	40020488 	.word	0x40020488
 8009e0c:	400204a0 	.word	0x400204a0
 8009e10:	400204b8 	.word	0x400204b8
 8009e14:	58025408 	.word	0x58025408
 8009e18:	5802541c 	.word	0x5802541c
 8009e1c:	58025430 	.word	0x58025430
 8009e20:	58025444 	.word	0x58025444
 8009e24:	58025458 	.word	0x58025458
 8009e28:	5802546c 	.word	0x5802546c
 8009e2c:	58025480 	.word	0x58025480
 8009e30:	58025494 	.word	0x58025494
 8009e34:	2300      	movs	r3, #0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a6d      	ldr	r2, [pc, #436]	; (800a004 <HAL_DMA_Abort+0x444>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d04a      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a6b      	ldr	r2, [pc, #428]	; (800a008 <HAL_DMA_Abort+0x448>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d045      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a6a      	ldr	r2, [pc, #424]	; (800a00c <HAL_DMA_Abort+0x44c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d040      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a68      	ldr	r2, [pc, #416]	; (800a010 <HAL_DMA_Abort+0x450>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d03b      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a67      	ldr	r2, [pc, #412]	; (800a014 <HAL_DMA_Abort+0x454>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d036      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a65      	ldr	r2, [pc, #404]	; (800a018 <HAL_DMA_Abort+0x458>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d031      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a64      	ldr	r2, [pc, #400]	; (800a01c <HAL_DMA_Abort+0x45c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d02c      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a62      	ldr	r2, [pc, #392]	; (800a020 <HAL_DMA_Abort+0x460>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d027      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a61      	ldr	r2, [pc, #388]	; (800a024 <HAL_DMA_Abort+0x464>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d022      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a5f      	ldr	r2, [pc, #380]	; (800a028 <HAL_DMA_Abort+0x468>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01d      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a5e      	ldr	r2, [pc, #376]	; (800a02c <HAL_DMA_Abort+0x46c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d018      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a5c      	ldr	r2, [pc, #368]	; (800a030 <HAL_DMA_Abort+0x470>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d013      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a5b      	ldr	r2, [pc, #364]	; (800a034 <HAL_DMA_Abort+0x474>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00e      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a59      	ldr	r2, [pc, #356]	; (800a038 <HAL_DMA_Abort+0x478>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d009      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a58      	ldr	r2, [pc, #352]	; (800a03c <HAL_DMA_Abort+0x47c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d004      	beq.n	8009eea <HAL_DMA_Abort+0x32a>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a56      	ldr	r2, [pc, #344]	; (800a040 <HAL_DMA_Abort+0x480>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d108      	bne.n	8009efc <HAL_DMA_Abort+0x33c>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0201 	bic.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	e007      	b.n	8009f0c <HAL_DMA_Abort+0x34c>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009f0c:	e013      	b.n	8009f36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f0e:	f7fc fd67 	bl	80069e0 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b05      	cmp	r3, #5
 8009f1a:	d90c      	bls.n	8009f36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2203      	movs	r2, #3
 8009f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e12d      	b.n	800a192 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a2f      	ldr	r2, [pc, #188]	; (800a004 <HAL_DMA_Abort+0x444>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d04a      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a2d      	ldr	r2, [pc, #180]	; (800a008 <HAL_DMA_Abort+0x448>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d045      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2c      	ldr	r2, [pc, #176]	; (800a00c <HAL_DMA_Abort+0x44c>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d040      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a2a      	ldr	r2, [pc, #168]	; (800a010 <HAL_DMA_Abort+0x450>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d03b      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a29      	ldr	r2, [pc, #164]	; (800a014 <HAL_DMA_Abort+0x454>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d036      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a27      	ldr	r2, [pc, #156]	; (800a018 <HAL_DMA_Abort+0x458>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d031      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a26      	ldr	r2, [pc, #152]	; (800a01c <HAL_DMA_Abort+0x45c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d02c      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a24      	ldr	r2, [pc, #144]	; (800a020 <HAL_DMA_Abort+0x460>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d027      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a23      	ldr	r2, [pc, #140]	; (800a024 <HAL_DMA_Abort+0x464>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d022      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a21      	ldr	r2, [pc, #132]	; (800a028 <HAL_DMA_Abort+0x468>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01d      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a20      	ldr	r2, [pc, #128]	; (800a02c <HAL_DMA_Abort+0x46c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d018      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1e      	ldr	r2, [pc, #120]	; (800a030 <HAL_DMA_Abort+0x470>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1d      	ldr	r2, [pc, #116]	; (800a034 <HAL_DMA_Abort+0x474>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <HAL_DMA_Abort+0x478>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1a      	ldr	r2, [pc, #104]	; (800a03c <HAL_DMA_Abort+0x47c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_DMA_Abort+0x422>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a18      	ldr	r2, [pc, #96]	; (800a040 <HAL_DMA_Abort+0x480>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d101      	bne.n	8009fe6 <HAL_DMA_Abort+0x426>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <HAL_DMA_Abort+0x428>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02b      	beq.n	800a044 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff6:	f003 031f 	and.w	r3, r3, #31
 8009ffa:	223f      	movs	r2, #63	; 0x3f
 8009ffc:	409a      	lsls	r2, r3
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	609a      	str	r2, [r3, #8]
 800a002:	e02a      	b.n	800a05a <HAL_DMA_Abort+0x49a>
 800a004:	40020010 	.word	0x40020010
 800a008:	40020028 	.word	0x40020028
 800a00c:	40020040 	.word	0x40020040
 800a010:	40020058 	.word	0x40020058
 800a014:	40020070 	.word	0x40020070
 800a018:	40020088 	.word	0x40020088
 800a01c:	400200a0 	.word	0x400200a0
 800a020:	400200b8 	.word	0x400200b8
 800a024:	40020410 	.word	0x40020410
 800a028:	40020428 	.word	0x40020428
 800a02c:	40020440 	.word	0x40020440
 800a030:	40020458 	.word	0x40020458
 800a034:	40020470 	.word	0x40020470
 800a038:	40020488 	.word	0x40020488
 800a03c:	400204a0 	.word	0x400204a0
 800a040:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04e:	f003 031f 	and.w	r3, r3, #31
 800a052:	2201      	movs	r2, #1
 800a054:	409a      	lsls	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a4f      	ldr	r2, [pc, #316]	; (800a19c <HAL_DMA_Abort+0x5dc>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d072      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a4d      	ldr	r2, [pc, #308]	; (800a1a0 <HAL_DMA_Abort+0x5e0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d06d      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a4c      	ldr	r2, [pc, #304]	; (800a1a4 <HAL_DMA_Abort+0x5e4>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d068      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a4a      	ldr	r2, [pc, #296]	; (800a1a8 <HAL_DMA_Abort+0x5e8>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d063      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a49      	ldr	r2, [pc, #292]	; (800a1ac <HAL_DMA_Abort+0x5ec>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d05e      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a47      	ldr	r2, [pc, #284]	; (800a1b0 <HAL_DMA_Abort+0x5f0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d059      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a46      	ldr	r2, [pc, #280]	; (800a1b4 <HAL_DMA_Abort+0x5f4>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d054      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a44      	ldr	r2, [pc, #272]	; (800a1b8 <HAL_DMA_Abort+0x5f8>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d04f      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a43      	ldr	r2, [pc, #268]	; (800a1bc <HAL_DMA_Abort+0x5fc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d04a      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a41      	ldr	r2, [pc, #260]	; (800a1c0 <HAL_DMA_Abort+0x600>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d045      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a40      	ldr	r2, [pc, #256]	; (800a1c4 <HAL_DMA_Abort+0x604>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d040      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a3e      	ldr	r2, [pc, #248]	; (800a1c8 <HAL_DMA_Abort+0x608>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d03b      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a3d      	ldr	r2, [pc, #244]	; (800a1cc <HAL_DMA_Abort+0x60c>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d036      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a3b      	ldr	r2, [pc, #236]	; (800a1d0 <HAL_DMA_Abort+0x610>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d031      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a3a      	ldr	r2, [pc, #232]	; (800a1d4 <HAL_DMA_Abort+0x614>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d02c      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a38      	ldr	r2, [pc, #224]	; (800a1d8 <HAL_DMA_Abort+0x618>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d027      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a37      	ldr	r2, [pc, #220]	; (800a1dc <HAL_DMA_Abort+0x61c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d022      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a35      	ldr	r2, [pc, #212]	; (800a1e0 <HAL_DMA_Abort+0x620>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d01d      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a34      	ldr	r2, [pc, #208]	; (800a1e4 <HAL_DMA_Abort+0x624>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d018      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a32      	ldr	r2, [pc, #200]	; (800a1e8 <HAL_DMA_Abort+0x628>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d013      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a31      	ldr	r2, [pc, #196]	; (800a1ec <HAL_DMA_Abort+0x62c>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00e      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a2f      	ldr	r2, [pc, #188]	; (800a1f0 <HAL_DMA_Abort+0x630>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d009      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a2e      	ldr	r2, [pc, #184]	; (800a1f4 <HAL_DMA_Abort+0x634>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d004      	beq.n	800a14a <HAL_DMA_Abort+0x58a>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a2c      	ldr	r2, [pc, #176]	; (800a1f8 <HAL_DMA_Abort+0x638>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d101      	bne.n	800a14e <HAL_DMA_Abort+0x58e>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <HAL_DMA_Abort+0x590>
 800a14e:	2300      	movs	r3, #0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d015      	beq.n	800a180 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a15c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00c      	beq.n	800a180 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a174:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a17e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40020010 	.word	0x40020010
 800a1a0:	40020028 	.word	0x40020028
 800a1a4:	40020040 	.word	0x40020040
 800a1a8:	40020058 	.word	0x40020058
 800a1ac:	40020070 	.word	0x40020070
 800a1b0:	40020088 	.word	0x40020088
 800a1b4:	400200a0 	.word	0x400200a0
 800a1b8:	400200b8 	.word	0x400200b8
 800a1bc:	40020410 	.word	0x40020410
 800a1c0:	40020428 	.word	0x40020428
 800a1c4:	40020440 	.word	0x40020440
 800a1c8:	40020458 	.word	0x40020458
 800a1cc:	40020470 	.word	0x40020470
 800a1d0:	40020488 	.word	0x40020488
 800a1d4:	400204a0 	.word	0x400204a0
 800a1d8:	400204b8 	.word	0x400204b8
 800a1dc:	58025408 	.word	0x58025408
 800a1e0:	5802541c 	.word	0x5802541c
 800a1e4:	58025430 	.word	0x58025430
 800a1e8:	58025444 	.word	0x58025444
 800a1ec:	58025458 	.word	0x58025458
 800a1f0:	5802546c 	.word	0x5802546c
 800a1f4:	58025480 	.word	0x58025480
 800a1f8:	58025494 	.word	0x58025494

0800a1fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e237      	b.n	800a67e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d004      	beq.n	800a224 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2280      	movs	r2, #128	; 0x80
 800a21e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e22c      	b.n	800a67e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a5c      	ldr	r2, [pc, #368]	; (800a39c <HAL_DMA_Abort_IT+0x1a0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d04a      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a5b      	ldr	r2, [pc, #364]	; (800a3a0 <HAL_DMA_Abort_IT+0x1a4>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d045      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a59      	ldr	r2, [pc, #356]	; (800a3a4 <HAL_DMA_Abort_IT+0x1a8>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d040      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a58      	ldr	r2, [pc, #352]	; (800a3a8 <HAL_DMA_Abort_IT+0x1ac>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d03b      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a56      	ldr	r2, [pc, #344]	; (800a3ac <HAL_DMA_Abort_IT+0x1b0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d036      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a55      	ldr	r2, [pc, #340]	; (800a3b0 <HAL_DMA_Abort_IT+0x1b4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d031      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a53      	ldr	r2, [pc, #332]	; (800a3b4 <HAL_DMA_Abort_IT+0x1b8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d02c      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a52      	ldr	r2, [pc, #328]	; (800a3b8 <HAL_DMA_Abort_IT+0x1bc>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d027      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a50      	ldr	r2, [pc, #320]	; (800a3bc <HAL_DMA_Abort_IT+0x1c0>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d022      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a4f      	ldr	r2, [pc, #316]	; (800a3c0 <HAL_DMA_Abort_IT+0x1c4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d01d      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a4d      	ldr	r2, [pc, #308]	; (800a3c4 <HAL_DMA_Abort_IT+0x1c8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d018      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a4c      	ldr	r2, [pc, #304]	; (800a3c8 <HAL_DMA_Abort_IT+0x1cc>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d013      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a4a      	ldr	r2, [pc, #296]	; (800a3cc <HAL_DMA_Abort_IT+0x1d0>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00e      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a49      	ldr	r2, [pc, #292]	; (800a3d0 <HAL_DMA_Abort_IT+0x1d4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d009      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a47      	ldr	r2, [pc, #284]	; (800a3d4 <HAL_DMA_Abort_IT+0x1d8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d004      	beq.n	800a2c4 <HAL_DMA_Abort_IT+0xc8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a46      	ldr	r2, [pc, #280]	; (800a3d8 <HAL_DMA_Abort_IT+0x1dc>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d101      	bne.n	800a2c8 <HAL_DMA_Abort_IT+0xcc>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <HAL_DMA_Abort_IT+0xce>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8086 	beq.w	800a3dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a2f      	ldr	r2, [pc, #188]	; (800a39c <HAL_DMA_Abort_IT+0x1a0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d04a      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a2e      	ldr	r2, [pc, #184]	; (800a3a0 <HAL_DMA_Abort_IT+0x1a4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d045      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a2c      	ldr	r2, [pc, #176]	; (800a3a4 <HAL_DMA_Abort_IT+0x1a8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d040      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a2b      	ldr	r2, [pc, #172]	; (800a3a8 <HAL_DMA_Abort_IT+0x1ac>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d03b      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a29      	ldr	r2, [pc, #164]	; (800a3ac <HAL_DMA_Abort_IT+0x1b0>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d036      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a28      	ldr	r2, [pc, #160]	; (800a3b0 <HAL_DMA_Abort_IT+0x1b4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d031      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a26      	ldr	r2, [pc, #152]	; (800a3b4 <HAL_DMA_Abort_IT+0x1b8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d02c      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a25      	ldr	r2, [pc, #148]	; (800a3b8 <HAL_DMA_Abort_IT+0x1bc>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d027      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a23      	ldr	r2, [pc, #140]	; (800a3bc <HAL_DMA_Abort_IT+0x1c0>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d022      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a22      	ldr	r2, [pc, #136]	; (800a3c0 <HAL_DMA_Abort_IT+0x1c4>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d01d      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a20      	ldr	r2, [pc, #128]	; (800a3c4 <HAL_DMA_Abort_IT+0x1c8>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d018      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a1f      	ldr	r2, [pc, #124]	; (800a3c8 <HAL_DMA_Abort_IT+0x1cc>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d013      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a1d      	ldr	r2, [pc, #116]	; (800a3cc <HAL_DMA_Abort_IT+0x1d0>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00e      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <HAL_DMA_Abort_IT+0x1d4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d009      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1a      	ldr	r2, [pc, #104]	; (800a3d4 <HAL_DMA_Abort_IT+0x1d8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_DMA_Abort_IT+0x17c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a19      	ldr	r2, [pc, #100]	; (800a3d8 <HAL_DMA_Abort_IT+0x1dc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d108      	bne.n	800a38a <HAL_DMA_Abort_IT+0x18e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 0201 	bic.w	r2, r2, #1
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	e178      	b.n	800a67c <HAL_DMA_Abort_IT+0x480>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	e16f      	b.n	800a67c <HAL_DMA_Abort_IT+0x480>
 800a39c:	40020010 	.word	0x40020010
 800a3a0:	40020028 	.word	0x40020028
 800a3a4:	40020040 	.word	0x40020040
 800a3a8:	40020058 	.word	0x40020058
 800a3ac:	40020070 	.word	0x40020070
 800a3b0:	40020088 	.word	0x40020088
 800a3b4:	400200a0 	.word	0x400200a0
 800a3b8:	400200b8 	.word	0x400200b8
 800a3bc:	40020410 	.word	0x40020410
 800a3c0:	40020428 	.word	0x40020428
 800a3c4:	40020440 	.word	0x40020440
 800a3c8:	40020458 	.word	0x40020458
 800a3cc:	40020470 	.word	0x40020470
 800a3d0:	40020488 	.word	0x40020488
 800a3d4:	400204a0 	.word	0x400204a0
 800a3d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 020e 	bic.w	r2, r2, #14
 800a3ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a6c      	ldr	r2, [pc, #432]	; (800a5a4 <HAL_DMA_Abort_IT+0x3a8>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d04a      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a6b      	ldr	r2, [pc, #428]	; (800a5a8 <HAL_DMA_Abort_IT+0x3ac>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d045      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a69      	ldr	r2, [pc, #420]	; (800a5ac <HAL_DMA_Abort_IT+0x3b0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d040      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a68      	ldr	r2, [pc, #416]	; (800a5b0 <HAL_DMA_Abort_IT+0x3b4>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d03b      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a66      	ldr	r2, [pc, #408]	; (800a5b4 <HAL_DMA_Abort_IT+0x3b8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d036      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a65      	ldr	r2, [pc, #404]	; (800a5b8 <HAL_DMA_Abort_IT+0x3bc>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d031      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a63      	ldr	r2, [pc, #396]	; (800a5bc <HAL_DMA_Abort_IT+0x3c0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d02c      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a62      	ldr	r2, [pc, #392]	; (800a5c0 <HAL_DMA_Abort_IT+0x3c4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d027      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a60      	ldr	r2, [pc, #384]	; (800a5c4 <HAL_DMA_Abort_IT+0x3c8>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d022      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a5f      	ldr	r2, [pc, #380]	; (800a5c8 <HAL_DMA_Abort_IT+0x3cc>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d01d      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a5d      	ldr	r2, [pc, #372]	; (800a5cc <HAL_DMA_Abort_IT+0x3d0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d018      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a5c      	ldr	r2, [pc, #368]	; (800a5d0 <HAL_DMA_Abort_IT+0x3d4>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d013      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a5a      	ldr	r2, [pc, #360]	; (800a5d4 <HAL_DMA_Abort_IT+0x3d8>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00e      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a59      	ldr	r2, [pc, #356]	; (800a5d8 <HAL_DMA_Abort_IT+0x3dc>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d009      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a57      	ldr	r2, [pc, #348]	; (800a5dc <HAL_DMA_Abort_IT+0x3e0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_DMA_Abort_IT+0x290>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a56      	ldr	r2, [pc, #344]	; (800a5e0 <HAL_DMA_Abort_IT+0x3e4>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d108      	bne.n	800a49e <HAL_DMA_Abort_IT+0x2a2>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0201 	bic.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e007      	b.n	800a4ae <HAL_DMA_Abort_IT+0x2b2>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0201 	bic.w	r2, r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a3c      	ldr	r2, [pc, #240]	; (800a5a4 <HAL_DMA_Abort_IT+0x3a8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d072      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a3a      	ldr	r2, [pc, #232]	; (800a5a8 <HAL_DMA_Abort_IT+0x3ac>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d06d      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a39      	ldr	r2, [pc, #228]	; (800a5ac <HAL_DMA_Abort_IT+0x3b0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d068      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a37      	ldr	r2, [pc, #220]	; (800a5b0 <HAL_DMA_Abort_IT+0x3b4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d063      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a36      	ldr	r2, [pc, #216]	; (800a5b4 <HAL_DMA_Abort_IT+0x3b8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d05e      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a34      	ldr	r2, [pc, #208]	; (800a5b8 <HAL_DMA_Abort_IT+0x3bc>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d059      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a33      	ldr	r2, [pc, #204]	; (800a5bc <HAL_DMA_Abort_IT+0x3c0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d054      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a31      	ldr	r2, [pc, #196]	; (800a5c0 <HAL_DMA_Abort_IT+0x3c4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d04f      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a30      	ldr	r2, [pc, #192]	; (800a5c4 <HAL_DMA_Abort_IT+0x3c8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d04a      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a2e      	ldr	r2, [pc, #184]	; (800a5c8 <HAL_DMA_Abort_IT+0x3cc>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d045      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a2d      	ldr	r2, [pc, #180]	; (800a5cc <HAL_DMA_Abort_IT+0x3d0>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d040      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a2b      	ldr	r2, [pc, #172]	; (800a5d0 <HAL_DMA_Abort_IT+0x3d4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d03b      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a2a      	ldr	r2, [pc, #168]	; (800a5d4 <HAL_DMA_Abort_IT+0x3d8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d036      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a28      	ldr	r2, [pc, #160]	; (800a5d8 <HAL_DMA_Abort_IT+0x3dc>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d031      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <HAL_DMA_Abort_IT+0x3e0>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d02c      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a25      	ldr	r2, [pc, #148]	; (800a5e0 <HAL_DMA_Abort_IT+0x3e4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d027      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a24      	ldr	r2, [pc, #144]	; (800a5e4 <HAL_DMA_Abort_IT+0x3e8>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d022      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a22      	ldr	r2, [pc, #136]	; (800a5e8 <HAL_DMA_Abort_IT+0x3ec>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d01d      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a21      	ldr	r2, [pc, #132]	; (800a5ec <HAL_DMA_Abort_IT+0x3f0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d018      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <HAL_DMA_Abort_IT+0x3f4>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d013      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a1e      	ldr	r2, [pc, #120]	; (800a5f4 <HAL_DMA_Abort_IT+0x3f8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d00e      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1c      	ldr	r2, [pc, #112]	; (800a5f8 <HAL_DMA_Abort_IT+0x3fc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d009      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1b      	ldr	r2, [pc, #108]	; (800a5fc <HAL_DMA_Abort_IT+0x400>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d004      	beq.n	800a59e <HAL_DMA_Abort_IT+0x3a2>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a19      	ldr	r2, [pc, #100]	; (800a600 <HAL_DMA_Abort_IT+0x404>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d132      	bne.n	800a604 <HAL_DMA_Abort_IT+0x408>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e031      	b.n	800a606 <HAL_DMA_Abort_IT+0x40a>
 800a5a2:	bf00      	nop
 800a5a4:	40020010 	.word	0x40020010
 800a5a8:	40020028 	.word	0x40020028
 800a5ac:	40020040 	.word	0x40020040
 800a5b0:	40020058 	.word	0x40020058
 800a5b4:	40020070 	.word	0x40020070
 800a5b8:	40020088 	.word	0x40020088
 800a5bc:	400200a0 	.word	0x400200a0
 800a5c0:	400200b8 	.word	0x400200b8
 800a5c4:	40020410 	.word	0x40020410
 800a5c8:	40020428 	.word	0x40020428
 800a5cc:	40020440 	.word	0x40020440
 800a5d0:	40020458 	.word	0x40020458
 800a5d4:	40020470 	.word	0x40020470
 800a5d8:	40020488 	.word	0x40020488
 800a5dc:	400204a0 	.word	0x400204a0
 800a5e0:	400204b8 	.word	0x400204b8
 800a5e4:	58025408 	.word	0x58025408
 800a5e8:	5802541c 	.word	0x5802541c
 800a5ec:	58025430 	.word	0x58025430
 800a5f0:	58025444 	.word	0x58025444
 800a5f4:	58025458 	.word	0x58025458
 800a5f8:	5802546c 	.word	0x5802546c
 800a5fc:	58025480 	.word	0x58025480
 800a600:	58025494 	.word	0x58025494
 800a604:	2300      	movs	r3, #0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d028      	beq.n	800a65c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a618:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a624:	f003 031f 	and.w	r3, r3, #31
 800a628:	2201      	movs	r2, #1
 800a62a:	409a      	lsls	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a638:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a650:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a65a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a694:	4b67      	ldr	r3, [pc, #412]	; (800a834 <HAL_DMA_IRQHandler+0x1ac>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a67      	ldr	r2, [pc, #412]	; (800a838 <HAL_DMA_IRQHandler+0x1b0>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	0a9b      	lsrs	r3, r3, #10
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a5f      	ldr	r2, [pc, #380]	; (800a83c <HAL_DMA_IRQHandler+0x1b4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d04a      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a5d      	ldr	r2, [pc, #372]	; (800a840 <HAL_DMA_IRQHandler+0x1b8>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d045      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a5c      	ldr	r2, [pc, #368]	; (800a844 <HAL_DMA_IRQHandler+0x1bc>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d040      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a5a      	ldr	r2, [pc, #360]	; (800a848 <HAL_DMA_IRQHandler+0x1c0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d03b      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a59      	ldr	r2, [pc, #356]	; (800a84c <HAL_DMA_IRQHandler+0x1c4>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d036      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a57      	ldr	r2, [pc, #348]	; (800a850 <HAL_DMA_IRQHandler+0x1c8>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d031      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a56      	ldr	r2, [pc, #344]	; (800a854 <HAL_DMA_IRQHandler+0x1cc>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d02c      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a54      	ldr	r2, [pc, #336]	; (800a858 <HAL_DMA_IRQHandler+0x1d0>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d027      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a53      	ldr	r2, [pc, #332]	; (800a85c <HAL_DMA_IRQHandler+0x1d4>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d022      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a51      	ldr	r2, [pc, #324]	; (800a860 <HAL_DMA_IRQHandler+0x1d8>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01d      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a50      	ldr	r2, [pc, #320]	; (800a864 <HAL_DMA_IRQHandler+0x1dc>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d018      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a4e      	ldr	r2, [pc, #312]	; (800a868 <HAL_DMA_IRQHandler+0x1e0>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d013      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a4d      	ldr	r2, [pc, #308]	; (800a86c <HAL_DMA_IRQHandler+0x1e4>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00e      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a4b      	ldr	r2, [pc, #300]	; (800a870 <HAL_DMA_IRQHandler+0x1e8>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d009      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a4a      	ldr	r2, [pc, #296]	; (800a874 <HAL_DMA_IRQHandler+0x1ec>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d004      	beq.n	800a75a <HAL_DMA_IRQHandler+0xd2>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a48      	ldr	r2, [pc, #288]	; (800a878 <HAL_DMA_IRQHandler+0x1f0>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d101      	bne.n	800a75e <HAL_DMA_IRQHandler+0xd6>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <HAL_DMA_IRQHandler+0xd8>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 842b 	beq.w	800afbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76a:	f003 031f 	and.w	r3, r3, #31
 800a76e:	2208      	movs	r2, #8
 800a770:	409a      	lsls	r2, r3
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	4013      	ands	r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 80a2 	beq.w	800a8c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a2e      	ldr	r2, [pc, #184]	; (800a83c <HAL_DMA_IRQHandler+0x1b4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d04a      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a2d      	ldr	r2, [pc, #180]	; (800a840 <HAL_DMA_IRQHandler+0x1b8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d045      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a2b      	ldr	r2, [pc, #172]	; (800a844 <HAL_DMA_IRQHandler+0x1bc>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d040      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a2a      	ldr	r2, [pc, #168]	; (800a848 <HAL_DMA_IRQHandler+0x1c0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d03b      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a28      	ldr	r2, [pc, #160]	; (800a84c <HAL_DMA_IRQHandler+0x1c4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d036      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a27      	ldr	r2, [pc, #156]	; (800a850 <HAL_DMA_IRQHandler+0x1c8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d031      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a25      	ldr	r2, [pc, #148]	; (800a854 <HAL_DMA_IRQHandler+0x1cc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d02c      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a24      	ldr	r2, [pc, #144]	; (800a858 <HAL_DMA_IRQHandler+0x1d0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d027      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a22      	ldr	r2, [pc, #136]	; (800a85c <HAL_DMA_IRQHandler+0x1d4>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d022      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a21      	ldr	r2, [pc, #132]	; (800a860 <HAL_DMA_IRQHandler+0x1d8>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d01d      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a1f      	ldr	r2, [pc, #124]	; (800a864 <HAL_DMA_IRQHandler+0x1dc>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d018      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <HAL_DMA_IRQHandler+0x1e0>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d013      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a1c      	ldr	r2, [pc, #112]	; (800a86c <HAL_DMA_IRQHandler+0x1e4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00e      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a1b      	ldr	r2, [pc, #108]	; (800a870 <HAL_DMA_IRQHandler+0x1e8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d009      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a19      	ldr	r2, [pc, #100]	; (800a874 <HAL_DMA_IRQHandler+0x1ec>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d004      	beq.n	800a81c <HAL_DMA_IRQHandler+0x194>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a18      	ldr	r2, [pc, #96]	; (800a878 <HAL_DMA_IRQHandler+0x1f0>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d12f      	bne.n	800a87c <HAL_DMA_IRQHandler+0x1f4>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0304 	and.w	r3, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	bf14      	ite	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	2300      	moveq	r3, #0
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	e02e      	b.n	800a890 <HAL_DMA_IRQHandler+0x208>
 800a832:	bf00      	nop
 800a834:	240000cc 	.word	0x240000cc
 800a838:	1b4e81b5 	.word	0x1b4e81b5
 800a83c:	40020010 	.word	0x40020010
 800a840:	40020028 	.word	0x40020028
 800a844:	40020040 	.word	0x40020040
 800a848:	40020058 	.word	0x40020058
 800a84c:	40020070 	.word	0x40020070
 800a850:	40020088 	.word	0x40020088
 800a854:	400200a0 	.word	0x400200a0
 800a858:	400200b8 	.word	0x400200b8
 800a85c:	40020410 	.word	0x40020410
 800a860:	40020428 	.word	0x40020428
 800a864:	40020440 	.word	0x40020440
 800a868:	40020458 	.word	0x40020458
 800a86c:	40020470 	.word	0x40020470
 800a870:	40020488 	.word	0x40020488
 800a874:	400204a0 	.word	0x400204a0
 800a878:	400204b8 	.word	0x400204b8
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0308 	and.w	r3, r3, #8
 800a886:	2b00      	cmp	r3, #0
 800a888:	bf14      	ite	ne
 800a88a:	2301      	movne	r3, #1
 800a88c:	2300      	moveq	r3, #0
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d015      	beq.n	800a8c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0204 	bic.w	r2, r2, #4
 800a8a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a8:	f003 031f 	and.w	r3, r3, #31
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	409a      	lsls	r2, r3
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b8:	f043 0201 	orr.w	r2, r3, #1
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c4:	f003 031f 	and.w	r3, r3, #31
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d06e      	beq.n	800a9b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a69      	ldr	r2, [pc, #420]	; (800aa80 <HAL_DMA_IRQHandler+0x3f8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d04a      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a67      	ldr	r2, [pc, #412]	; (800aa84 <HAL_DMA_IRQHandler+0x3fc>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d045      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a66      	ldr	r2, [pc, #408]	; (800aa88 <HAL_DMA_IRQHandler+0x400>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d040      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a64      	ldr	r2, [pc, #400]	; (800aa8c <HAL_DMA_IRQHandler+0x404>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d03b      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a63      	ldr	r2, [pc, #396]	; (800aa90 <HAL_DMA_IRQHandler+0x408>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d036      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a61      	ldr	r2, [pc, #388]	; (800aa94 <HAL_DMA_IRQHandler+0x40c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d031      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a60      	ldr	r2, [pc, #384]	; (800aa98 <HAL_DMA_IRQHandler+0x410>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d02c      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a5e      	ldr	r2, [pc, #376]	; (800aa9c <HAL_DMA_IRQHandler+0x414>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d027      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a5d      	ldr	r2, [pc, #372]	; (800aaa0 <HAL_DMA_IRQHandler+0x418>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d022      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a5b      	ldr	r2, [pc, #364]	; (800aaa4 <HAL_DMA_IRQHandler+0x41c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d01d      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a5a      	ldr	r2, [pc, #360]	; (800aaa8 <HAL_DMA_IRQHandler+0x420>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d018      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a58      	ldr	r2, [pc, #352]	; (800aaac <HAL_DMA_IRQHandler+0x424>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a57      	ldr	r2, [pc, #348]	; (800aab0 <HAL_DMA_IRQHandler+0x428>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00e      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a55      	ldr	r2, [pc, #340]	; (800aab4 <HAL_DMA_IRQHandler+0x42c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d009      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a54      	ldr	r2, [pc, #336]	; (800aab8 <HAL_DMA_IRQHandler+0x430>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d004      	beq.n	800a976 <HAL_DMA_IRQHandler+0x2ee>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a52      	ldr	r2, [pc, #328]	; (800aabc <HAL_DMA_IRQHandler+0x434>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d10a      	bne.n	800a98c <HAL_DMA_IRQHandler+0x304>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a980:	2b00      	cmp	r3, #0
 800a982:	bf14      	ite	ne
 800a984:	2301      	movne	r3, #1
 800a986:	2300      	moveq	r3, #0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	e003      	b.n	800a994 <HAL_DMA_IRQHandler+0x30c>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2300      	movs	r3, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a99c:	f003 031f 	and.w	r3, r3, #31
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	409a      	lsls	r2, r3
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ac:	f043 0202 	orr.w	r2, r3, #2
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b8:	f003 031f 	and.w	r3, r3, #31
 800a9bc:	2204      	movs	r2, #4
 800a9be:	409a      	lsls	r2, r3
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 808f 	beq.w	800aae8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a2c      	ldr	r2, [pc, #176]	; (800aa80 <HAL_DMA_IRQHandler+0x3f8>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d04a      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a2a      	ldr	r2, [pc, #168]	; (800aa84 <HAL_DMA_IRQHandler+0x3fc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d045      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a29      	ldr	r2, [pc, #164]	; (800aa88 <HAL_DMA_IRQHandler+0x400>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d040      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a27      	ldr	r2, [pc, #156]	; (800aa8c <HAL_DMA_IRQHandler+0x404>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d03b      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a26      	ldr	r2, [pc, #152]	; (800aa90 <HAL_DMA_IRQHandler+0x408>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d036      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a24      	ldr	r2, [pc, #144]	; (800aa94 <HAL_DMA_IRQHandler+0x40c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d031      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a23      	ldr	r2, [pc, #140]	; (800aa98 <HAL_DMA_IRQHandler+0x410>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d02c      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a21      	ldr	r2, [pc, #132]	; (800aa9c <HAL_DMA_IRQHandler+0x414>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d027      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a20      	ldr	r2, [pc, #128]	; (800aaa0 <HAL_DMA_IRQHandler+0x418>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d022      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <HAL_DMA_IRQHandler+0x41c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d01d      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1d      	ldr	r2, [pc, #116]	; (800aaa8 <HAL_DMA_IRQHandler+0x420>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d018      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1b      	ldr	r2, [pc, #108]	; (800aaac <HAL_DMA_IRQHandler+0x424>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d013      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1a      	ldr	r2, [pc, #104]	; (800aab0 <HAL_DMA_IRQHandler+0x428>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00e      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a18      	ldr	r2, [pc, #96]	; (800aab4 <HAL_DMA_IRQHandler+0x42c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d009      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <HAL_DMA_IRQHandler+0x430>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d004      	beq.n	800aa6a <HAL_DMA_IRQHandler+0x3e2>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a15      	ldr	r2, [pc, #84]	; (800aabc <HAL_DMA_IRQHandler+0x434>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d12a      	bne.n	800aac0 <HAL_DMA_IRQHandler+0x438>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bf14      	ite	ne
 800aa78:	2301      	movne	r3, #1
 800aa7a:	2300      	moveq	r3, #0
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	e023      	b.n	800aac8 <HAL_DMA_IRQHandler+0x440>
 800aa80:	40020010 	.word	0x40020010
 800aa84:	40020028 	.word	0x40020028
 800aa88:	40020040 	.word	0x40020040
 800aa8c:	40020058 	.word	0x40020058
 800aa90:	40020070 	.word	0x40020070
 800aa94:	40020088 	.word	0x40020088
 800aa98:	400200a0 	.word	0x400200a0
 800aa9c:	400200b8 	.word	0x400200b8
 800aaa0:	40020410 	.word	0x40020410
 800aaa4:	40020428 	.word	0x40020428
 800aaa8:	40020440 	.word	0x40020440
 800aaac:	40020458 	.word	0x40020458
 800aab0:	40020470 	.word	0x40020470
 800aab4:	40020488 	.word	0x40020488
 800aab8:	400204a0 	.word	0x400204a0
 800aabc:	400204b8 	.word	0x400204b8
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00d      	beq.n	800aae8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad0:	f003 031f 	and.w	r3, r3, #31
 800aad4:	2204      	movs	r2, #4
 800aad6:	409a      	lsls	r2, r3
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae0:	f043 0204 	orr.w	r2, r3, #4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	2210      	movs	r2, #16
 800aaf2:	409a      	lsls	r2, r3
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80a6 	beq.w	800ac4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a85      	ldr	r2, [pc, #532]	; (800ad18 <HAL_DMA_IRQHandler+0x690>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d04a      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a83      	ldr	r2, [pc, #524]	; (800ad1c <HAL_DMA_IRQHandler+0x694>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d045      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a82      	ldr	r2, [pc, #520]	; (800ad20 <HAL_DMA_IRQHandler+0x698>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d040      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a80      	ldr	r2, [pc, #512]	; (800ad24 <HAL_DMA_IRQHandler+0x69c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d03b      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a7f      	ldr	r2, [pc, #508]	; (800ad28 <HAL_DMA_IRQHandler+0x6a0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d036      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a7d      	ldr	r2, [pc, #500]	; (800ad2c <HAL_DMA_IRQHandler+0x6a4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d031      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a7c      	ldr	r2, [pc, #496]	; (800ad30 <HAL_DMA_IRQHandler+0x6a8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d02c      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a7a      	ldr	r2, [pc, #488]	; (800ad34 <HAL_DMA_IRQHandler+0x6ac>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d027      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a79      	ldr	r2, [pc, #484]	; (800ad38 <HAL_DMA_IRQHandler+0x6b0>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d022      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a77      	ldr	r2, [pc, #476]	; (800ad3c <HAL_DMA_IRQHandler+0x6b4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01d      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a76      	ldr	r2, [pc, #472]	; (800ad40 <HAL_DMA_IRQHandler+0x6b8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d018      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a74      	ldr	r2, [pc, #464]	; (800ad44 <HAL_DMA_IRQHandler+0x6bc>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d013      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a73      	ldr	r2, [pc, #460]	; (800ad48 <HAL_DMA_IRQHandler+0x6c0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d00e      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a71      	ldr	r2, [pc, #452]	; (800ad4c <HAL_DMA_IRQHandler+0x6c4>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d009      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a70      	ldr	r2, [pc, #448]	; (800ad50 <HAL_DMA_IRQHandler+0x6c8>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d004      	beq.n	800ab9e <HAL_DMA_IRQHandler+0x516>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a6e      	ldr	r2, [pc, #440]	; (800ad54 <HAL_DMA_IRQHandler+0x6cc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d10a      	bne.n	800abb4 <HAL_DMA_IRQHandler+0x52c>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0308 	and.w	r3, r3, #8
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	e009      	b.n	800abc8 <HAL_DMA_IRQHandler+0x540>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bf14      	ite	ne
 800abc2:	2301      	movne	r3, #1
 800abc4:	2300      	moveq	r3, #0
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d03e      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	2210      	movs	r2, #16
 800abd6:	409a      	lsls	r2, r3
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d018      	beq.n	800ac1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d108      	bne.n	800ac0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d024      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	4798      	blx	r3
 800ac08:	e01f      	b.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01b      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	e016      	b.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d107      	bne.n	800ac3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 0208 	bic.w	r2, r2, #8
 800ac38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	f003 031f 	and.w	r3, r3, #31
 800ac52:	2220      	movs	r2, #32
 800ac54:	409a      	lsls	r2, r3
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8110 	beq.w	800ae80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a2c      	ldr	r2, [pc, #176]	; (800ad18 <HAL_DMA_IRQHandler+0x690>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d04a      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a2b      	ldr	r2, [pc, #172]	; (800ad1c <HAL_DMA_IRQHandler+0x694>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d045      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a29      	ldr	r2, [pc, #164]	; (800ad20 <HAL_DMA_IRQHandler+0x698>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d040      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a28      	ldr	r2, [pc, #160]	; (800ad24 <HAL_DMA_IRQHandler+0x69c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d03b      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <HAL_DMA_IRQHandler+0x6a0>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d036      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a25      	ldr	r2, [pc, #148]	; (800ad2c <HAL_DMA_IRQHandler+0x6a4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d031      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a23      	ldr	r2, [pc, #140]	; (800ad30 <HAL_DMA_IRQHandler+0x6a8>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d02c      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a22      	ldr	r2, [pc, #136]	; (800ad34 <HAL_DMA_IRQHandler+0x6ac>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d027      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a20      	ldr	r2, [pc, #128]	; (800ad38 <HAL_DMA_IRQHandler+0x6b0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d022      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a1f      	ldr	r2, [pc, #124]	; (800ad3c <HAL_DMA_IRQHandler+0x6b4>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d01d      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1d      	ldr	r2, [pc, #116]	; (800ad40 <HAL_DMA_IRQHandler+0x6b8>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d018      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1c      	ldr	r2, [pc, #112]	; (800ad44 <HAL_DMA_IRQHandler+0x6bc>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d013      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a1a      	ldr	r2, [pc, #104]	; (800ad48 <HAL_DMA_IRQHandler+0x6c0>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00e      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a19      	ldr	r2, [pc, #100]	; (800ad4c <HAL_DMA_IRQHandler+0x6c4>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d009      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a17      	ldr	r2, [pc, #92]	; (800ad50 <HAL_DMA_IRQHandler+0x6c8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_DMA_IRQHandler+0x678>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a16      	ldr	r2, [pc, #88]	; (800ad54 <HAL_DMA_IRQHandler+0x6cc>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d12b      	bne.n	800ad58 <HAL_DMA_IRQHandler+0x6d0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0310 	and.w	r3, r3, #16
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bf14      	ite	ne
 800ad0e:	2301      	movne	r3, #1
 800ad10:	2300      	moveq	r3, #0
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	e02a      	b.n	800ad6c <HAL_DMA_IRQHandler+0x6e4>
 800ad16:	bf00      	nop
 800ad18:	40020010 	.word	0x40020010
 800ad1c:	40020028 	.word	0x40020028
 800ad20:	40020040 	.word	0x40020040
 800ad24:	40020058 	.word	0x40020058
 800ad28:	40020070 	.word	0x40020070
 800ad2c:	40020088 	.word	0x40020088
 800ad30:	400200a0 	.word	0x400200a0
 800ad34:	400200b8 	.word	0x400200b8
 800ad38:	40020410 	.word	0x40020410
 800ad3c:	40020428 	.word	0x40020428
 800ad40:	40020440 	.word	0x40020440
 800ad44:	40020458 	.word	0x40020458
 800ad48:	40020470 	.word	0x40020470
 800ad4c:	40020488 	.word	0x40020488
 800ad50:	400204a0 	.word	0x400204a0
 800ad54:	400204b8 	.word	0x400204b8
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	bf14      	ite	ne
 800ad66:	2301      	movne	r3, #1
 800ad68:	2300      	moveq	r3, #0
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 8087 	beq.w	800ae80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad76:	f003 031f 	and.w	r3, r3, #31
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	409a      	lsls	r2, r3
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d139      	bne.n	800ae02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 0216 	bic.w	r2, r2, #22
 800ad9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695a      	ldr	r2, [r3, #20]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <HAL_DMA_IRQHandler+0x736>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0208 	bic.w	r2, r2, #8
 800adcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	223f      	movs	r2, #63	; 0x3f
 800add8:	409a      	lsls	r2, r3
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 834a 	beq.w	800b48c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
          }
          return;
 800ae00:	e344      	b.n	800b48c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d018      	beq.n	800ae42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d108      	bne.n	800ae30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d02c      	beq.n	800ae80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	4798      	blx	r3
 800ae2e:	e027      	b.n	800ae80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d023      	beq.n	800ae80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
 800ae40:	e01e      	b.n	800ae80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10f      	bne.n	800ae70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0210 	bic.w	r2, r2, #16
 800ae5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 8306 	beq.w	800b496 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 8088 	beq.w	800afa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a7a      	ldr	r2, [pc, #488]	; (800b090 <HAL_DMA_IRQHandler+0xa08>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d04a      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a79      	ldr	r2, [pc, #484]	; (800b094 <HAL_DMA_IRQHandler+0xa0c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d045      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a77      	ldr	r2, [pc, #476]	; (800b098 <HAL_DMA_IRQHandler+0xa10>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d040      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a76      	ldr	r2, [pc, #472]	; (800b09c <HAL_DMA_IRQHandler+0xa14>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d03b      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a74      	ldr	r2, [pc, #464]	; (800b0a0 <HAL_DMA_IRQHandler+0xa18>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d036      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a73      	ldr	r2, [pc, #460]	; (800b0a4 <HAL_DMA_IRQHandler+0xa1c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d031      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a71      	ldr	r2, [pc, #452]	; (800b0a8 <HAL_DMA_IRQHandler+0xa20>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d02c      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a70      	ldr	r2, [pc, #448]	; (800b0ac <HAL_DMA_IRQHandler+0xa24>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d027      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a6e      	ldr	r2, [pc, #440]	; (800b0b0 <HAL_DMA_IRQHandler+0xa28>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d022      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a6d      	ldr	r2, [pc, #436]	; (800b0b4 <HAL_DMA_IRQHandler+0xa2c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d01d      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a6b      	ldr	r2, [pc, #428]	; (800b0b8 <HAL_DMA_IRQHandler+0xa30>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d018      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a6a      	ldr	r2, [pc, #424]	; (800b0bc <HAL_DMA_IRQHandler+0xa34>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d013      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a68      	ldr	r2, [pc, #416]	; (800b0c0 <HAL_DMA_IRQHandler+0xa38>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00e      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a67      	ldr	r2, [pc, #412]	; (800b0c4 <HAL_DMA_IRQHandler+0xa3c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d009      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a65      	ldr	r2, [pc, #404]	; (800b0c8 <HAL_DMA_IRQHandler+0xa40>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d004      	beq.n	800af40 <HAL_DMA_IRQHandler+0x8b8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a64      	ldr	r2, [pc, #400]	; (800b0cc <HAL_DMA_IRQHandler+0xa44>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d108      	bne.n	800af52 <HAL_DMA_IRQHandler+0x8ca>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0201 	bic.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	e007      	b.n	800af62 <HAL_DMA_IRQHandler+0x8da>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0201 	bic.w	r2, r2, #1
 800af60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3301      	adds	r3, #1
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d307      	bcc.n	800af7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1f2      	bne.n	800af62 <HAL_DMA_IRQHandler+0x8da>
 800af7c:	e000      	b.n	800af80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800af7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2203      	movs	r2, #3
 800af92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800af96:	e003      	b.n	800afa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8272 	beq.w	800b496 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
 800afba:	e26c      	b.n	800b496 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a43      	ldr	r2, [pc, #268]	; (800b0d0 <HAL_DMA_IRQHandler+0xa48>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d022      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a42      	ldr	r2, [pc, #264]	; (800b0d4 <HAL_DMA_IRQHandler+0xa4c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d01d      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a40      	ldr	r2, [pc, #256]	; (800b0d8 <HAL_DMA_IRQHandler+0xa50>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d018      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a3f      	ldr	r2, [pc, #252]	; (800b0dc <HAL_DMA_IRQHandler+0xa54>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d013      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a3d      	ldr	r2, [pc, #244]	; (800b0e0 <HAL_DMA_IRQHandler+0xa58>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d00e      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a3c      	ldr	r2, [pc, #240]	; (800b0e4 <HAL_DMA_IRQHandler+0xa5c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d009      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a3a      	ldr	r2, [pc, #232]	; (800b0e8 <HAL_DMA_IRQHandler+0xa60>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d004      	beq.n	800b00c <HAL_DMA_IRQHandler+0x984>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a39      	ldr	r2, [pc, #228]	; (800b0ec <HAL_DMA_IRQHandler+0xa64>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d101      	bne.n	800b010 <HAL_DMA_IRQHandler+0x988>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e000      	b.n	800b012 <HAL_DMA_IRQHandler+0x98a>
 800b010:	2300      	movs	r3, #0
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 823f 	beq.w	800b496 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b024:	f003 031f 	and.w	r3, r3, #31
 800b028:	2204      	movs	r2, #4
 800b02a:	409a      	lsls	r2, r3
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	4013      	ands	r3, r2
 800b030:	2b00      	cmp	r3, #0
 800b032:	f000 80cd 	beq.w	800b1d0 <HAL_DMA_IRQHandler+0xb48>
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 80c7 	beq.w	800b1d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b046:	f003 031f 	and.w	r3, r3, #31
 800b04a:	2204      	movs	r2, #4
 800b04c:	409a      	lsls	r2, r3
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d049      	beq.n	800b0f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 8210 	beq.w	800b490 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b078:	e20a      	b.n	800b490 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 8206 	beq.w	800b490 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b08c:	e200      	b.n	800b490 <HAL_DMA_IRQHandler+0xe08>
 800b08e:	bf00      	nop
 800b090:	40020010 	.word	0x40020010
 800b094:	40020028 	.word	0x40020028
 800b098:	40020040 	.word	0x40020040
 800b09c:	40020058 	.word	0x40020058
 800b0a0:	40020070 	.word	0x40020070
 800b0a4:	40020088 	.word	0x40020088
 800b0a8:	400200a0 	.word	0x400200a0
 800b0ac:	400200b8 	.word	0x400200b8
 800b0b0:	40020410 	.word	0x40020410
 800b0b4:	40020428 	.word	0x40020428
 800b0b8:	40020440 	.word	0x40020440
 800b0bc:	40020458 	.word	0x40020458
 800b0c0:	40020470 	.word	0x40020470
 800b0c4:	40020488 	.word	0x40020488
 800b0c8:	400204a0 	.word	0x400204a0
 800b0cc:	400204b8 	.word	0x400204b8
 800b0d0:	58025408 	.word	0x58025408
 800b0d4:	5802541c 	.word	0x5802541c
 800b0d8:	58025430 	.word	0x58025430
 800b0dc:	58025444 	.word	0x58025444
 800b0e0:	58025458 	.word	0x58025458
 800b0e4:	5802546c 	.word	0x5802546c
 800b0e8:	58025480 	.word	0x58025480
 800b0ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d160      	bne.n	800b1bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a7f      	ldr	r2, [pc, #508]	; (800b2fc <HAL_DMA_IRQHandler+0xc74>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d04a      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a7d      	ldr	r2, [pc, #500]	; (800b300 <HAL_DMA_IRQHandler+0xc78>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d045      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a7c      	ldr	r2, [pc, #496]	; (800b304 <HAL_DMA_IRQHandler+0xc7c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d040      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a7a      	ldr	r2, [pc, #488]	; (800b308 <HAL_DMA_IRQHandler+0xc80>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d03b      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a79      	ldr	r2, [pc, #484]	; (800b30c <HAL_DMA_IRQHandler+0xc84>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d036      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a77      	ldr	r2, [pc, #476]	; (800b310 <HAL_DMA_IRQHandler+0xc88>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d031      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a76      	ldr	r2, [pc, #472]	; (800b314 <HAL_DMA_IRQHandler+0xc8c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d02c      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a74      	ldr	r2, [pc, #464]	; (800b318 <HAL_DMA_IRQHandler+0xc90>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d027      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a73      	ldr	r2, [pc, #460]	; (800b31c <HAL_DMA_IRQHandler+0xc94>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d022      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a71      	ldr	r2, [pc, #452]	; (800b320 <HAL_DMA_IRQHandler+0xc98>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d01d      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a70      	ldr	r2, [pc, #448]	; (800b324 <HAL_DMA_IRQHandler+0xc9c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d018      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a6e      	ldr	r2, [pc, #440]	; (800b328 <HAL_DMA_IRQHandler+0xca0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d013      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a6d      	ldr	r2, [pc, #436]	; (800b32c <HAL_DMA_IRQHandler+0xca4>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00e      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a6b      	ldr	r2, [pc, #428]	; (800b330 <HAL_DMA_IRQHandler+0xca8>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d009      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a6a      	ldr	r2, [pc, #424]	; (800b334 <HAL_DMA_IRQHandler+0xcac>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d004      	beq.n	800b19a <HAL_DMA_IRQHandler+0xb12>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a68      	ldr	r2, [pc, #416]	; (800b338 <HAL_DMA_IRQHandler+0xcb0>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d108      	bne.n	800b1ac <HAL_DMA_IRQHandler+0xb24>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0208 	bic.w	r2, r2, #8
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	e007      	b.n	800b1bc <HAL_DMA_IRQHandler+0xb34>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f022 0204 	bic.w	r2, r2, #4
 800b1ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 8165 	beq.w	800b490 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b1ce:	e15f      	b.n	800b490 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	2202      	movs	r2, #2
 800b1da:	409a      	lsls	r2, r3
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 80c5 	beq.w	800b370 <HAL_DMA_IRQHandler+0xce8>
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 80bf 	beq.w	800b370 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1f6:	f003 031f 	and.w	r3, r3, #31
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	409a      	lsls	r2, r3
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d018      	beq.n	800b23e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 813a 	beq.w	800b494 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b228:	e134      	b.n	800b494 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 8130 	beq.w	800b494 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b23c:	e12a      	b.n	800b494 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f003 0320 	and.w	r3, r3, #32
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 8089 	bne.w	800b35c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <HAL_DMA_IRQHandler+0xc74>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d04a      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a29      	ldr	r2, [pc, #164]	; (800b300 <HAL_DMA_IRQHandler+0xc78>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d045      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a28      	ldr	r2, [pc, #160]	; (800b304 <HAL_DMA_IRQHandler+0xc7c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d040      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a26      	ldr	r2, [pc, #152]	; (800b308 <HAL_DMA_IRQHandler+0xc80>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d03b      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a25      	ldr	r2, [pc, #148]	; (800b30c <HAL_DMA_IRQHandler+0xc84>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d036      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a23      	ldr	r2, [pc, #140]	; (800b310 <HAL_DMA_IRQHandler+0xc88>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d031      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a22      	ldr	r2, [pc, #136]	; (800b314 <HAL_DMA_IRQHandler+0xc8c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d02c      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a20      	ldr	r2, [pc, #128]	; (800b318 <HAL_DMA_IRQHandler+0xc90>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d027      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <HAL_DMA_IRQHandler+0xc94>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d022      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a1d      	ldr	r2, [pc, #116]	; (800b320 <HAL_DMA_IRQHandler+0xc98>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d01d      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a1c      	ldr	r2, [pc, #112]	; (800b324 <HAL_DMA_IRQHandler+0xc9c>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d018      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1a      	ldr	r2, [pc, #104]	; (800b328 <HAL_DMA_IRQHandler+0xca0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d013      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a19      	ldr	r2, [pc, #100]	; (800b32c <HAL_DMA_IRQHandler+0xca4>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00e      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a17      	ldr	r2, [pc, #92]	; (800b330 <HAL_DMA_IRQHandler+0xca8>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d009      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a16      	ldr	r2, [pc, #88]	; (800b334 <HAL_DMA_IRQHandler+0xcac>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d004      	beq.n	800b2ea <HAL_DMA_IRQHandler+0xc62>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a14      	ldr	r2, [pc, #80]	; (800b338 <HAL_DMA_IRQHandler+0xcb0>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d128      	bne.n	800b33c <HAL_DMA_IRQHandler+0xcb4>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0214 	bic.w	r2, r2, #20
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e027      	b.n	800b34c <HAL_DMA_IRQHandler+0xcc4>
 800b2fc:	40020010 	.word	0x40020010
 800b300:	40020028 	.word	0x40020028
 800b304:	40020040 	.word	0x40020040
 800b308:	40020058 	.word	0x40020058
 800b30c:	40020070 	.word	0x40020070
 800b310:	40020088 	.word	0x40020088
 800b314:	400200a0 	.word	0x400200a0
 800b318:	400200b8 	.word	0x400200b8
 800b31c:	40020410 	.word	0x40020410
 800b320:	40020428 	.word	0x40020428
 800b324:	40020440 	.word	0x40020440
 800b328:	40020458 	.word	0x40020458
 800b32c:	40020470 	.word	0x40020470
 800b330:	40020488 	.word	0x40020488
 800b334:	400204a0 	.word	0x400204a0
 800b338:	400204b8 	.word	0x400204b8
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 020a 	bic.w	r2, r2, #10
 800b34a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 8097 	beq.w	800b494 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b36e:	e091      	b.n	800b494 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b374:	f003 031f 	and.w	r3, r3, #31
 800b378:	2208      	movs	r2, #8
 800b37a:	409a      	lsls	r2, r3
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	4013      	ands	r3, r2
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 8088 	beq.w	800b496 <HAL_DMA_IRQHandler+0xe0e>
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f003 0308 	and.w	r3, r3, #8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8082 	beq.w	800b496 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a41      	ldr	r2, [pc, #260]	; (800b49c <HAL_DMA_IRQHandler+0xe14>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d04a      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a3f      	ldr	r2, [pc, #252]	; (800b4a0 <HAL_DMA_IRQHandler+0xe18>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d045      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a3e      	ldr	r2, [pc, #248]	; (800b4a4 <HAL_DMA_IRQHandler+0xe1c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d040      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a3c      	ldr	r2, [pc, #240]	; (800b4a8 <HAL_DMA_IRQHandler+0xe20>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d03b      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a3b      	ldr	r2, [pc, #236]	; (800b4ac <HAL_DMA_IRQHandler+0xe24>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d036      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a39      	ldr	r2, [pc, #228]	; (800b4b0 <HAL_DMA_IRQHandler+0xe28>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d031      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a38      	ldr	r2, [pc, #224]	; (800b4b4 <HAL_DMA_IRQHandler+0xe2c>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d02c      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a36      	ldr	r2, [pc, #216]	; (800b4b8 <HAL_DMA_IRQHandler+0xe30>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d027      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a35      	ldr	r2, [pc, #212]	; (800b4bc <HAL_DMA_IRQHandler+0xe34>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d022      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a33      	ldr	r2, [pc, #204]	; (800b4c0 <HAL_DMA_IRQHandler+0xe38>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d01d      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a32      	ldr	r2, [pc, #200]	; (800b4c4 <HAL_DMA_IRQHandler+0xe3c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d018      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a30      	ldr	r2, [pc, #192]	; (800b4c8 <HAL_DMA_IRQHandler+0xe40>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d013      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a2f      	ldr	r2, [pc, #188]	; (800b4cc <HAL_DMA_IRQHandler+0xe44>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00e      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a2d      	ldr	r2, [pc, #180]	; (800b4d0 <HAL_DMA_IRQHandler+0xe48>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d009      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a2c      	ldr	r2, [pc, #176]	; (800b4d4 <HAL_DMA_IRQHandler+0xe4c>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d004      	beq.n	800b432 <HAL_DMA_IRQHandler+0xdaa>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	; (800b4d8 <HAL_DMA_IRQHandler+0xe50>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d108      	bne.n	800b444 <HAL_DMA_IRQHandler+0xdbc>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 021c 	bic.w	r2, r2, #28
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e007      	b.n	800b454 <HAL_DMA_IRQHandler+0xdcc>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 020e 	bic.w	r2, r2, #14
 800b452:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b458:	f003 031f 	and.w	r3, r3, #31
 800b45c:	2201      	movs	r2, #1
 800b45e:	409a      	lsls	r2, r3
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d009      	beq.n	800b496 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4798      	blx	r3
 800b48a:	e004      	b.n	800b496 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b48c:	bf00      	nop
 800b48e:	e002      	b.n	800b496 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b490:	bf00      	nop
 800b492:	e000      	b.n	800b496 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b494:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b496:	3728      	adds	r7, #40	; 0x28
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	40020010 	.word	0x40020010
 800b4a0:	40020028 	.word	0x40020028
 800b4a4:	40020040 	.word	0x40020040
 800b4a8:	40020058 	.word	0x40020058
 800b4ac:	40020070 	.word	0x40020070
 800b4b0:	40020088 	.word	0x40020088
 800b4b4:	400200a0 	.word	0x400200a0
 800b4b8:	400200b8 	.word	0x400200b8
 800b4bc:	40020410 	.word	0x40020410
 800b4c0:	40020428 	.word	0x40020428
 800b4c4:	40020440 	.word	0x40020440
 800b4c8:	40020458 	.word	0x40020458
 800b4cc:	40020470 	.word	0x40020470
 800b4d0:	40020488 	.word	0x40020488
 800b4d4:	400204a0 	.word	0x400204a0
 800b4d8:	400204b8 	.word	0x400204b8

0800b4dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b4ea:	b2db      	uxtb	r3, r3
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b522:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b528:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a7f      	ldr	r2, [pc, #508]	; (800b72c <DMA_SetConfig+0x21c>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d072      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a7d      	ldr	r2, [pc, #500]	; (800b730 <DMA_SetConfig+0x220>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d06d      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a7c      	ldr	r2, [pc, #496]	; (800b734 <DMA_SetConfig+0x224>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d068      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a7a      	ldr	r2, [pc, #488]	; (800b738 <DMA_SetConfig+0x228>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d063      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a79      	ldr	r2, [pc, #484]	; (800b73c <DMA_SetConfig+0x22c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d05e      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a77      	ldr	r2, [pc, #476]	; (800b740 <DMA_SetConfig+0x230>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d059      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a76      	ldr	r2, [pc, #472]	; (800b744 <DMA_SetConfig+0x234>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d054      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a74      	ldr	r2, [pc, #464]	; (800b748 <DMA_SetConfig+0x238>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d04f      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a73      	ldr	r2, [pc, #460]	; (800b74c <DMA_SetConfig+0x23c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d04a      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a71      	ldr	r2, [pc, #452]	; (800b750 <DMA_SetConfig+0x240>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d045      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a70      	ldr	r2, [pc, #448]	; (800b754 <DMA_SetConfig+0x244>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d040      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a6e      	ldr	r2, [pc, #440]	; (800b758 <DMA_SetConfig+0x248>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d03b      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a6d      	ldr	r2, [pc, #436]	; (800b75c <DMA_SetConfig+0x24c>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d036      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a6b      	ldr	r2, [pc, #428]	; (800b760 <DMA_SetConfig+0x250>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d031      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a6a      	ldr	r2, [pc, #424]	; (800b764 <DMA_SetConfig+0x254>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d02c      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a68      	ldr	r2, [pc, #416]	; (800b768 <DMA_SetConfig+0x258>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d027      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a67      	ldr	r2, [pc, #412]	; (800b76c <DMA_SetConfig+0x25c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d022      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a65      	ldr	r2, [pc, #404]	; (800b770 <DMA_SetConfig+0x260>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d01d      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a64      	ldr	r2, [pc, #400]	; (800b774 <DMA_SetConfig+0x264>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d018      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a62      	ldr	r2, [pc, #392]	; (800b778 <DMA_SetConfig+0x268>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d013      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a61      	ldr	r2, [pc, #388]	; (800b77c <DMA_SetConfig+0x26c>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d00e      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a5f      	ldr	r2, [pc, #380]	; (800b780 <DMA_SetConfig+0x270>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d009      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a5e      	ldr	r2, [pc, #376]	; (800b784 <DMA_SetConfig+0x274>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d004      	beq.n	800b61a <DMA_SetConfig+0x10a>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a5c      	ldr	r2, [pc, #368]	; (800b788 <DMA_SetConfig+0x278>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d101      	bne.n	800b61e <DMA_SetConfig+0x10e>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <DMA_SetConfig+0x110>
 800b61e:	2300      	movs	r3, #0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00d      	beq.n	800b640 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b62c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d004      	beq.n	800b640 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b63e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a39      	ldr	r2, [pc, #228]	; (800b72c <DMA_SetConfig+0x21c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d04a      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a38      	ldr	r2, [pc, #224]	; (800b730 <DMA_SetConfig+0x220>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d045      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a36      	ldr	r2, [pc, #216]	; (800b734 <DMA_SetConfig+0x224>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d040      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a35      	ldr	r2, [pc, #212]	; (800b738 <DMA_SetConfig+0x228>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d03b      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a33      	ldr	r2, [pc, #204]	; (800b73c <DMA_SetConfig+0x22c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d036      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a32      	ldr	r2, [pc, #200]	; (800b740 <DMA_SetConfig+0x230>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d031      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a30      	ldr	r2, [pc, #192]	; (800b744 <DMA_SetConfig+0x234>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d02c      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a2f      	ldr	r2, [pc, #188]	; (800b748 <DMA_SetConfig+0x238>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d027      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a2d      	ldr	r2, [pc, #180]	; (800b74c <DMA_SetConfig+0x23c>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d022      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a2c      	ldr	r2, [pc, #176]	; (800b750 <DMA_SetConfig+0x240>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d01d      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a2a      	ldr	r2, [pc, #168]	; (800b754 <DMA_SetConfig+0x244>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d018      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a29      	ldr	r2, [pc, #164]	; (800b758 <DMA_SetConfig+0x248>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d013      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a27      	ldr	r2, [pc, #156]	; (800b75c <DMA_SetConfig+0x24c>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00e      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a26      	ldr	r2, [pc, #152]	; (800b760 <DMA_SetConfig+0x250>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d009      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a24      	ldr	r2, [pc, #144]	; (800b764 <DMA_SetConfig+0x254>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d004      	beq.n	800b6e0 <DMA_SetConfig+0x1d0>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a23      	ldr	r2, [pc, #140]	; (800b768 <DMA_SetConfig+0x258>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d101      	bne.n	800b6e4 <DMA_SetConfig+0x1d4>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <DMA_SetConfig+0x1d6>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d059      	beq.n	800b79e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ee:	f003 031f 	and.w	r3, r3, #31
 800b6f2:	223f      	movs	r2, #63	; 0x3f
 800b6f4:	409a      	lsls	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b708:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	2b40      	cmp	r3, #64	; 0x40
 800b718:	d138      	bne.n	800b78c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b72a:	e086      	b.n	800b83a <DMA_SetConfig+0x32a>
 800b72c:	40020010 	.word	0x40020010
 800b730:	40020028 	.word	0x40020028
 800b734:	40020040 	.word	0x40020040
 800b738:	40020058 	.word	0x40020058
 800b73c:	40020070 	.word	0x40020070
 800b740:	40020088 	.word	0x40020088
 800b744:	400200a0 	.word	0x400200a0
 800b748:	400200b8 	.word	0x400200b8
 800b74c:	40020410 	.word	0x40020410
 800b750:	40020428 	.word	0x40020428
 800b754:	40020440 	.word	0x40020440
 800b758:	40020458 	.word	0x40020458
 800b75c:	40020470 	.word	0x40020470
 800b760:	40020488 	.word	0x40020488
 800b764:	400204a0 	.word	0x400204a0
 800b768:	400204b8 	.word	0x400204b8
 800b76c:	58025408 	.word	0x58025408
 800b770:	5802541c 	.word	0x5802541c
 800b774:	58025430 	.word	0x58025430
 800b778:	58025444 	.word	0x58025444
 800b77c:	58025458 	.word	0x58025458
 800b780:	5802546c 	.word	0x5802546c
 800b784:	58025480 	.word	0x58025480
 800b788:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	60da      	str	r2, [r3, #12]
}
 800b79c:	e04d      	b.n	800b83a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a29      	ldr	r2, [pc, #164]	; (800b848 <DMA_SetConfig+0x338>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d022      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a27      	ldr	r2, [pc, #156]	; (800b84c <DMA_SetConfig+0x33c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d01d      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a26      	ldr	r2, [pc, #152]	; (800b850 <DMA_SetConfig+0x340>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d018      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a24      	ldr	r2, [pc, #144]	; (800b854 <DMA_SetConfig+0x344>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d013      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a23      	ldr	r2, [pc, #140]	; (800b858 <DMA_SetConfig+0x348>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00e      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a21      	ldr	r2, [pc, #132]	; (800b85c <DMA_SetConfig+0x34c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d009      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a20      	ldr	r2, [pc, #128]	; (800b860 <DMA_SetConfig+0x350>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d004      	beq.n	800b7ee <DMA_SetConfig+0x2de>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <DMA_SetConfig+0x354>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d101      	bne.n	800b7f2 <DMA_SetConfig+0x2e2>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <DMA_SetConfig+0x2e4>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d020      	beq.n	800b83a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	2201      	movs	r2, #1
 800b802:	409a      	lsls	r2, r3
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	d108      	bne.n	800b82a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	60da      	str	r2, [r3, #12]
}
 800b828:	e007      	b.n	800b83a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	60da      	str	r2, [r3, #12]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	58025408 	.word	0x58025408
 800b84c:	5802541c 	.word	0x5802541c
 800b850:	58025430 	.word	0x58025430
 800b854:	58025444 	.word	0x58025444
 800b858:	58025458 	.word	0x58025458
 800b85c:	5802546c 	.word	0x5802546c
 800b860:	58025480 	.word	0x58025480
 800b864:	58025494 	.word	0x58025494

0800b868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a42      	ldr	r2, [pc, #264]	; (800b980 <DMA_CalcBaseAndBitshift+0x118>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d04a      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a41      	ldr	r2, [pc, #260]	; (800b984 <DMA_CalcBaseAndBitshift+0x11c>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d045      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a3f      	ldr	r2, [pc, #252]	; (800b988 <DMA_CalcBaseAndBitshift+0x120>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d040      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a3e      	ldr	r2, [pc, #248]	; (800b98c <DMA_CalcBaseAndBitshift+0x124>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d03b      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a3c      	ldr	r2, [pc, #240]	; (800b990 <DMA_CalcBaseAndBitshift+0x128>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d036      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a3b      	ldr	r2, [pc, #236]	; (800b994 <DMA_CalcBaseAndBitshift+0x12c>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d031      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a39      	ldr	r2, [pc, #228]	; (800b998 <DMA_CalcBaseAndBitshift+0x130>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d02c      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a38      	ldr	r2, [pc, #224]	; (800b99c <DMA_CalcBaseAndBitshift+0x134>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d027      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a36      	ldr	r2, [pc, #216]	; (800b9a0 <DMA_CalcBaseAndBitshift+0x138>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d022      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a35      	ldr	r2, [pc, #212]	; (800b9a4 <DMA_CalcBaseAndBitshift+0x13c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d01d      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a33      	ldr	r2, [pc, #204]	; (800b9a8 <DMA_CalcBaseAndBitshift+0x140>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d018      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a32      	ldr	r2, [pc, #200]	; (800b9ac <DMA_CalcBaseAndBitshift+0x144>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d013      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a30      	ldr	r2, [pc, #192]	; (800b9b0 <DMA_CalcBaseAndBitshift+0x148>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00e      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a2f      	ldr	r2, [pc, #188]	; (800b9b4 <DMA_CalcBaseAndBitshift+0x14c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d009      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a2d      	ldr	r2, [pc, #180]	; (800b9b8 <DMA_CalcBaseAndBitshift+0x150>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <DMA_CalcBaseAndBitshift+0xa8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a2c      	ldr	r2, [pc, #176]	; (800b9bc <DMA_CalcBaseAndBitshift+0x154>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d101      	bne.n	800b914 <DMA_CalcBaseAndBitshift+0xac>
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <DMA_CalcBaseAndBitshift+0xae>
 800b914:	2300      	movs	r3, #0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d024      	beq.n	800b964 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	3b10      	subs	r3, #16
 800b922:	4a27      	ldr	r2, [pc, #156]	; (800b9c0 <DMA_CalcBaseAndBitshift+0x158>)
 800b924:	fba2 2303 	umull	r2, r3, r2, r3
 800b928:	091b      	lsrs	r3, r3, #4
 800b92a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f003 0307 	and.w	r3, r3, #7
 800b932:	4a24      	ldr	r2, [pc, #144]	; (800b9c4 <DMA_CalcBaseAndBitshift+0x15c>)
 800b934:	5cd3      	ldrb	r3, [r2, r3]
 800b936:	461a      	mov	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d908      	bls.n	800b954 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	4b1f      	ldr	r3, [pc, #124]	; (800b9c8 <DMA_CalcBaseAndBitshift+0x160>)
 800b94a:	4013      	ands	r3, r2
 800b94c:	1d1a      	adds	r2, r3, #4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	659a      	str	r2, [r3, #88]	; 0x58
 800b952:	e00d      	b.n	800b970 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <DMA_CalcBaseAndBitshift+0x160>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	6593      	str	r3, [r2, #88]	; 0x58
 800b962:	e005      	b.n	800b970 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	40020010 	.word	0x40020010
 800b984:	40020028 	.word	0x40020028
 800b988:	40020040 	.word	0x40020040
 800b98c:	40020058 	.word	0x40020058
 800b990:	40020070 	.word	0x40020070
 800b994:	40020088 	.word	0x40020088
 800b998:	400200a0 	.word	0x400200a0
 800b99c:	400200b8 	.word	0x400200b8
 800b9a0:	40020410 	.word	0x40020410
 800b9a4:	40020428 	.word	0x40020428
 800b9a8:	40020440 	.word	0x40020440
 800b9ac:	40020458 	.word	0x40020458
 800b9b0:	40020470 	.word	0x40020470
 800b9b4:	40020488 	.word	0x40020488
 800b9b8:	400204a0 	.word	0x400204a0
 800b9bc:	400204b8 	.word	0x400204b8
 800b9c0:	aaaaaaab 	.word	0xaaaaaaab
 800b9c4:	0801c1dc 	.word	0x0801c1dc
 800b9c8:	fffffc00 	.word	0xfffffc00

0800b9cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d120      	bne.n	800ba22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	d858      	bhi.n	800ba9a <DMA_CheckFifoParam+0xce>
 800b9e8:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <DMA_CheckFifoParam+0x24>)
 800b9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ee:	bf00      	nop
 800b9f0:	0800ba01 	.word	0x0800ba01
 800b9f4:	0800ba13 	.word	0x0800ba13
 800b9f8:	0800ba01 	.word	0x0800ba01
 800b9fc:	0800ba9b 	.word	0x0800ba9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d048      	beq.n	800ba9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba10:	e045      	b.n	800ba9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba1a:	d142      	bne.n	800baa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba20:	e03f      	b.n	800baa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba2a:	d123      	bne.n	800ba74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d838      	bhi.n	800baa6 <DMA_CheckFifoParam+0xda>
 800ba34:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <DMA_CheckFifoParam+0x70>)
 800ba36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3a:	bf00      	nop
 800ba3c:	0800ba4d 	.word	0x0800ba4d
 800ba40:	0800ba53 	.word	0x0800ba53
 800ba44:	0800ba4d 	.word	0x0800ba4d
 800ba48:	0800ba65 	.word	0x0800ba65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]
        break;
 800ba50:	e030      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d025      	beq.n	800baaa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba62:	e022      	b.n	800baaa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba6c:	d11f      	bne.n	800baae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba72:	e01c      	b.n	800baae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d902      	bls.n	800ba82 <DMA_CheckFifoParam+0xb6>
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d003      	beq.n	800ba88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ba80:	e018      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	73fb      	strb	r3, [r7, #15]
        break;
 800ba86:	e015      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00e      	beq.n	800bab2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
    break;
 800ba98:	e00b      	b.n	800bab2 <DMA_CheckFifoParam+0xe6>
        break;
 800ba9a:	bf00      	nop
 800ba9c:	e00a      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        break;
 800ba9e:	bf00      	nop
 800baa0:	e008      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        break;
 800baa2:	bf00      	nop
 800baa4:	e006      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        break;
 800baa6:	bf00      	nop
 800baa8:	e004      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        break;
 800baaa:	bf00      	nop
 800baac:	e002      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
        break;
 800baae:	bf00      	nop
 800bab0:	e000      	b.n	800bab4 <DMA_CheckFifoParam+0xe8>
    break;
 800bab2:	bf00      	nop
    }
  }

  return status;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop

0800bac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a38      	ldr	r2, [pc, #224]	; (800bbb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d022      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a36      	ldr	r2, [pc, #216]	; (800bbbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d01d      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a35      	ldr	r2, [pc, #212]	; (800bbc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d018      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a33      	ldr	r2, [pc, #204]	; (800bbc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d013      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a32      	ldr	r2, [pc, #200]	; (800bbc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d00e      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a30      	ldr	r2, [pc, #192]	; (800bbcc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d009      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a2f      	ldr	r2, [pc, #188]	; (800bbd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d004      	beq.n	800bb22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a2d      	ldr	r2, [pc, #180]	; (800bbd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d101      	bne.n	800bb26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e000      	b.n	800bb28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bb26:	2300      	movs	r3, #0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01a      	beq.n	800bb62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	3b08      	subs	r3, #8
 800bb34:	4a28      	ldr	r2, [pc, #160]	; (800bbd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bb36:	fba2 2303 	umull	r2, r3, r2, r3
 800bb3a:	091b      	lsrs	r3, r3, #4
 800bb3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	4b26      	ldr	r3, [pc, #152]	; (800bbdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bb42:	4413      	add	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a24      	ldr	r2, [pc, #144]	; (800bbe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bb50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f003 031f 	and.w	r3, r3, #31
 800bb58:	2201      	movs	r2, #1
 800bb5a:	409a      	lsls	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bb60:	e024      	b.n	800bbac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	3b10      	subs	r3, #16
 800bb6a:	4a1e      	ldr	r2, [pc, #120]	; (800bbe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bb6c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb70:	091b      	lsrs	r3, r3, #4
 800bb72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4a1c      	ldr	r2, [pc, #112]	; (800bbe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d806      	bhi.n	800bb8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	4a1b      	ldr	r2, [pc, #108]	; (800bbec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d902      	bls.n	800bb8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3308      	adds	r3, #8
 800bb88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4b18      	ldr	r3, [pc, #96]	; (800bbf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	461a      	mov	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a16      	ldr	r2, [pc, #88]	; (800bbf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bb9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f003 031f 	and.w	r3, r3, #31
 800bba4:	2201      	movs	r2, #1
 800bba6:	409a      	lsls	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	58025408 	.word	0x58025408
 800bbbc:	5802541c 	.word	0x5802541c
 800bbc0:	58025430 	.word	0x58025430
 800bbc4:	58025444 	.word	0x58025444
 800bbc8:	58025458 	.word	0x58025458
 800bbcc:	5802546c 	.word	0x5802546c
 800bbd0:	58025480 	.word	0x58025480
 800bbd4:	58025494 	.word	0x58025494
 800bbd8:	cccccccd 	.word	0xcccccccd
 800bbdc:	16009600 	.word	0x16009600
 800bbe0:	58025880 	.word	0x58025880
 800bbe4:	aaaaaaab 	.word	0xaaaaaaab
 800bbe8:	400204b8 	.word	0x400204b8
 800bbec:	4002040f 	.word	0x4002040f
 800bbf0:	10008200 	.word	0x10008200
 800bbf4:	40020880 	.word	0x40020880

0800bbf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d04a      	beq.n	800bca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b08      	cmp	r3, #8
 800bc12:	d847      	bhi.n	800bca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a25      	ldr	r2, [pc, #148]	; (800bcb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d022      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a24      	ldr	r2, [pc, #144]	; (800bcb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d01d      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a22      	ldr	r2, [pc, #136]	; (800bcb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d018      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a21      	ldr	r2, [pc, #132]	; (800bcbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d013      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a1f      	ldr	r2, [pc, #124]	; (800bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d00e      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a1e      	ldr	r2, [pc, #120]	; (800bcc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d009      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a1c      	ldr	r2, [pc, #112]	; (800bcc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d004      	beq.n	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a1b      	ldr	r2, [pc, #108]	; (800bccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d101      	bne.n	800bc68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bc64:	2301      	movs	r3, #1
 800bc66:	e000      	b.n	800bc6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	461a      	mov	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a15      	ldr	r2, [pc, #84]	; (800bcd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bc80:	671a      	str	r2, [r3, #112]	; 0x70
 800bc82:	e009      	b.n	800bc98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	4b14      	ldr	r3, [pc, #80]	; (800bcd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a11      	ldr	r2, [pc, #68]	; (800bcdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bc96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	409a      	lsls	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	58025408 	.word	0x58025408
 800bcb4:	5802541c 	.word	0x5802541c
 800bcb8:	58025430 	.word	0x58025430
 800bcbc:	58025444 	.word	0x58025444
 800bcc0:	58025458 	.word	0x58025458
 800bcc4:	5802546c 	.word	0x5802546c
 800bcc8:	58025480 	.word	0x58025480
 800bccc:	58025494 	.word	0x58025494
 800bcd0:	1600963f 	.word	0x1600963f
 800bcd4:	58025940 	.word	0x58025940
 800bcd8:	1000823f 	.word	0x1000823f
 800bcdc:	40020940 	.word	0x40020940

0800bce0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08a      	sub	sp, #40	; 0x28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800bcf4:	2308      	movs	r3, #8
 800bcf6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bcf8:	4b40      	ldr	r3, [pc, #256]	; (800bdfc <HAL_FLASH_Program+0x11c>)
 800bcfa:	7d1b      	ldrb	r3, [r3, #20]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <HAL_FLASH_Program+0x24>
 800bd00:	2302      	movs	r3, #2
 800bd02:	e076      	b.n	800bdf2 <HAL_FLASH_Program+0x112>
 800bd04:	4b3d      	ldr	r3, [pc, #244]	; (800bdfc <HAL_FLASH_Program+0x11c>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd10:	d306      	bcc.n	800bd20 <HAL_FLASH_Program+0x40>
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800bd18:	d202      	bcs.n	800bd20 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800bd1e:	e00c      	b.n	800bd3a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800bd26:	d306      	bcc.n	800bd36 <HAL_FLASH_Program+0x56>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800bd2e:	d202      	bcs.n	800bd36 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800bd30:	2302      	movs	r3, #2
 800bd32:	61bb      	str	r3, [r7, #24]
 800bd34:	e001      	b.n	800bd3a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e05b      	b.n	800bdf2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bd3a:	4b30      	ldr	r3, [pc, #192]	; (800bdfc <HAL_FLASH_Program+0x11c>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800bd40:	69b9      	ldr	r1, [r7, #24]
 800bd42:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd46:	f000 fa5d 	bl	800c204 <FLASH_WaitForLastOperation>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d147      	bne.n	800bde8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d106      	bne.n	800bd6c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800bd5e:	4b28      	ldr	r3, [pc, #160]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	4a27      	ldr	r2, [pc, #156]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bd64:	f043 0302 	orr.w	r3, r3, #2
 800bd68:	60d3      	str	r3, [r2, #12]
 800bd6a:	e007      	b.n	800bd7c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800bd6c:	4b24      	ldr	r3, [pc, #144]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bd6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bd72:	4a23      	ldr	r2, [pc, #140]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bd74:	f043 0302 	orr.w	r3, r3, #2
 800bd78:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800bd7c:	f3bf 8f6f 	isb	sy
}
 800bd80:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800bd82:	f3bf 8f4f 	dsb	sy
}
 800bd86:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	3304      	adds	r3, #4
 800bd94:	623b      	str	r3, [r7, #32]
        src_addr++;
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	61fb      	str	r3, [r7, #28]
        row_index--;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1ef      	bne.n	800bd88 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800bda8:	f3bf 8f6f 	isb	sy
}
 800bdac:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800bdae:	f3bf 8f4f 	dsb	sy
}
 800bdb2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800bdb4:	69b9      	ldr	r1, [r7, #24]
 800bdb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bdba:	f000 fa23 	bl	800c204 <FLASH_WaitForLastOperation>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d106      	bne.n	800bdd8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800bdca:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	4a0c      	ldr	r2, [pc, #48]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bdd0:	f023 0302 	bic.w	r3, r3, #2
 800bdd4:	60d3      	str	r3, [r2, #12]
 800bdd6:	e007      	b.n	800bde8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800bdd8:	4b09      	ldr	r3, [pc, #36]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bdda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bdde:	4a08      	ldr	r2, [pc, #32]	; (800be00 <HAL_FLASH_Program+0x120>)
 800bde0:	f023 0302 	bic.w	r3, r3, #2
 800bde4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bde8:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <HAL_FLASH_Program+0x11c>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	751a      	strb	r2, [r3, #20]

  return status;
 800bdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3728      	adds	r7, #40	; 0x28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	240023f4 	.word	0x240023f4
 800be00:	52002000 	.word	0x52002000

0800be04 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 800be0a:	4b7a      	ldr	r3, [pc, #488]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be16:	d15c      	bne.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 800be18:	4b77      	ldr	r3, [pc, #476]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d132      	bne.n	800be88 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
 800be22:	4b75      	ldr	r3, [pc, #468]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a73      	ldr	r2, [pc, #460]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be2a:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
 800be2c:	4b72      	ldr	r3, [pc, #456]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d018      	beq.n	800be66 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800be34:	4b70      	ldr	r3, [pc, #448]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f995 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800be3e:	4b6d      	ldr	r3, [pc, #436]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800be40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800be44:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
 800be46:	4b6c      	ldr	r3, [pc, #432]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	3301      	adds	r3, #1
 800be4c:	4a6a      	ldr	r2, [pc, #424]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be4e:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800be50:	4b69      	ldr	r3, [pc, #420]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 800be56:	4b68      	ldr	r3, [pc, #416]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	461a      	mov	r2, r3
 800be5c:	2101      	movs	r1, #1
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 fbd0 	bl	800c604 <FLASH_Erase_Sector>
 800be64:	e035      	b.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800be66:	4b64      	ldr	r3, [pc, #400]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be68:	f04f 32ff 	mov.w	r2, #4294967295
 800be6c:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800be6e:	4b62      	ldr	r3, [pc, #392]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800be74:	4b60      	ldr	r3, [pc, #384]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 f975 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800be7e:	4b5d      	ldr	r3, [pc, #372]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800be80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800be84:	615a      	str	r2, [r3, #20]
 800be86:	e024      	b.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800be88:	4b5b      	ldr	r3, [pc, #364]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	2b02      	cmp	r3, #2
 800be92:	d002      	beq.n	800be9a <HAL_FLASH_IRQHandler+0x96>
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	2b07      	cmp	r3, #7
 800be98:	d103      	bne.n	800bea2 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 800be9a:	2001      	movs	r0, #1
 800be9c:	f000 f964 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>
 800bea0:	e007      	b.n	800beb2 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 800bea2:	7afb      	ldrb	r3, [r7, #11]
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d104      	bne.n	800beb2 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bea8:	4b53      	ldr	r3, [pc, #332]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 f95b 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 800beb2:	7afb      	ldrb	r3, [r7, #11]
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d00c      	beq.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	2b05      	cmp	r3, #5
 800bebc:	d009      	beq.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	2b06      	cmp	r3, #6
 800bec2:	d006      	beq.n	800bed2 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bec4:	4b4c      	ldr	r3, [pc, #304]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800beca:	4b4a      	ldr	r3, [pc, #296]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800becc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bed0:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 800bed2:	4b48      	ldr	r3, [pc, #288]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bed4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bee0:	d15f      	bne.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800bee2:	4b45      	ldr	r3, [pc, #276]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d134      	bne.n	800bf56 <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800beec:	4b42      	ldr	r3, [pc, #264]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	4a41      	ldr	r2, [pc, #260]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bef4:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800bef6:	4b40      	ldr	r3, [pc, #256]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d019      	beq.n	800bf32 <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800befe:	4b3e      	ldr	r3, [pc, #248]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f930 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bf08:	4b3a      	ldr	r3, [pc, #232]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bf0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
 800bf12:	4b39      	ldr	r3, [pc, #228]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	3301      	adds	r3, #1
 800bf18:	4a37      	ldr	r2, [pc, #220]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf1a:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800bf1c:	4b36      	ldr	r3, [pc, #216]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 800bf22:	4b35      	ldr	r3, [pc, #212]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	461a      	mov	r2, r3
 800bf28:	2102      	movs	r1, #2
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f000 fb6a 	bl	800c604 <FLASH_Erase_Sector>
 800bf30:	e037      	b.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bf32:	4b31      	ldr	r3, [pc, #196]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf34:	f04f 32ff 	mov.w	r2, #4294967295
 800bf38:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bf3a:	4b2f      	ldr	r3, [pc, #188]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bf40:	4b2d      	ldr	r3, [pc, #180]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 f90f 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bf4a:	4b2a      	ldr	r3, [pc, #168]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bf4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bf54:	e025      	b.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800bf56:	4b28      	ldr	r3, [pc, #160]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d002      	beq.n	800bf68 <HAL_FLASH_IRQHandler+0x164>
 800bf62:	7afb      	ldrb	r3, [r7, #11]
 800bf64:	2b07      	cmp	r3, #7
 800bf66:	d103      	bne.n	800bf70 <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 800bf68:	2002      	movs	r0, #2
 800bf6a:	f000 f8fd 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>
 800bf6e:	e007      	b.n	800bf80 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 800bf70:	7afb      	ldrb	r3, [r7, #11]
 800bf72:	2b06      	cmp	r3, #6
 800bf74:	d104      	bne.n	800bf80 <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bf76:	4b20      	ldr	r3, [pc, #128]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 f8f4 	bl	800c168 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d00d      	beq.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d00a      	beq.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d007      	beq.n	800bfa2 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bf92:	4b19      	ldr	r3, [pc, #100]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bf98:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bf9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 800bfa2:	4b14      	ldr	r3, [pc, #80]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bfaa:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d02d      	beq.n	800c00e <HAL_FLASH_IRQHandler+0x20a>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bfb2:	4b11      	ldr	r3, [pc, #68]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bfb4:	699a      	ldr	r2, [r3, #24]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	4a0f      	ldr	r2, [pc, #60]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bfbc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bfbe:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <HAL_FLASH_IRQHandler+0x1f0>)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
 800bfc4:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d107      	bne.n	800bfe0 <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
 800bfd0:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bfd6:	4b08      	ldr	r3, [pc, #32]	; (800bff8 <HAL_FLASH_IRQHandler+0x1f4>)
 800bfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfdc:	60da      	str	r2, [r3, #12]
 800bfde:	e010      	b.n	800c002 <HAL_FLASH_IRQHandler+0x1fe>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bfe0:	7afb      	ldrb	r3, [r7, #11]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d002      	beq.n	800bfec <HAL_FLASH_IRQHandler+0x1e8>
 800bfe6:	7afb      	ldrb	r3, [r7, #11]
 800bfe8:	2b07      	cmp	r3, #7
 800bfea:	d107      	bne.n	800bffc <HAL_FLASH_IRQHandler+0x1f8>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
 800bfec:	2301      	movs	r3, #1
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	e007      	b.n	800c002 <HAL_FLASH_IRQHandler+0x1fe>
 800bff2:	bf00      	nop
 800bff4:	52002000 	.word	0x52002000
 800bff8:	240023f4 	.word	0x240023f4
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
 800bffc:	4b58      	ldr	r3, [pc, #352]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800c002:	4b57      	ldr	r3, [pc, #348]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c004:	2200      	movs	r2, #0
 800c006:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 f8b7 	bl	800c17c <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank1 ECC single correction error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_SNECCERR_BANK1;
 800c00e:	4b55      	ldr	r3, [pc, #340]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c016:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <HAL_FLASH_IRQHandler+0x230>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800c01e:	4b50      	ldr	r3, [pc, #320]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4313      	orrs	r3, r2
 800c026:	4a4e      	ldr	r2, [pc, #312]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c028:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800c02a:	f7f6 fed1 	bl	8002dd0 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank1 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800c02e:	4a4d      	ldr	r2, [pc, #308]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH Bank1 ECC double detection error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_DBECCERR_BANK1;
 800c034:	4b4b      	ldr	r3, [pc, #300]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c03c:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00a      	beq.n	800c05a <HAL_FLASH_IRQHandler+0x256>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800c044:	4b46      	ldr	r3, [pc, #280]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c046:	699a      	ldr	r2, [r3, #24]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	4a44      	ldr	r2, [pc, #272]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c04e:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800c050:	f7f6 fece 	bl	8002df0 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank1 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800c054:	4a43      	ldr	r2, [pc, #268]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6153      	str	r3, [r2, #20]
#endif /* USE_FLASH_ECC */

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c05c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c060:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800c064:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02d      	beq.n	800c0c8 <HAL_FLASH_IRQHandler+0x2c4>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800c06c:	4b3c      	ldr	r3, [pc, #240]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c06e:	699a      	ldr	r2, [r3, #24]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4313      	orrs	r3, r2
 800c074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c078:	4a39      	ldr	r2, [pc, #228]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c07a:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800c07c:	4a39      	ldr	r2, [pc, #228]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c084:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
 800c088:	4b35      	ldr	r3, [pc, #212]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	2b04      	cmp	r3, #4
 800c092:	d107      	bne.n	800c0a4 <HAL_FLASH_IRQHandler+0x2a0>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
 800c094:	4b32      	ldr	r3, [pc, #200]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800c09a:	4b31      	ldr	r3, [pc, #196]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c09c:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a0:	60da      	str	r2, [r3, #12]
 800c0a2:	e00b      	b.n	800c0bc <HAL_FLASH_IRQHandler+0x2b8>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d002      	beq.n	800c0b0 <HAL_FLASH_IRQHandler+0x2ac>
 800c0aa:	7afb      	ldrb	r3, [r7, #11]
 800c0ac:	2b07      	cmp	r3, #7
 800c0ae:	d102      	bne.n	800c0b6 <HAL_FLASH_IRQHandler+0x2b2>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	e002      	b.n	800c0bc <HAL_FLASH_IRQHandler+0x2b8>
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
 800c0b6:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800c0bc:	4b28      	ldr	r3, [pc, #160]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 f85a 	bl	800c17c <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank2 ECC single correction error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_SNECCERR_BANK2;
 800c0c8:	4b26      	ldr	r3, [pc, #152]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c0ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c0ce:	f003 4302 	and.w	r3, r3, #2181038080	; 0x82000000
 800c0d2:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00f      	beq.n	800c0fa <HAL_FLASH_IRQHandler+0x2f6>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800c0da:	4b21      	ldr	r3, [pc, #132]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c0dc:	699a      	ldr	r2, [r3, #24]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c0e8:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800c0ea:	f7f6 fe71 	bl	8002dd0 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank2 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800c0ee:	4a1d      	ldr	r2, [pc, #116]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

  /* Check FLASH Bank2 ECC double detection error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_DBECCERR_BANK2;
 800c0fa:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c0fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c100:	f003 4304 	and.w	r3, r3, #2214592512	; 0x84000000
 800c104:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00f      	beq.n	800c12c <HAL_FLASH_IRQHandler+0x328>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800c10c:	4b14      	ldr	r3, [pc, #80]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c10e:	699a      	ldr	r2, [r3, #24]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4313      	orrs	r3, r2
 800c114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c118:	4a11      	ldr	r2, [pc, #68]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c11a:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800c11c:	f7f6 fe68 	bl	8002df0 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank2 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800c120:	4a10      	ldr	r2, [pc, #64]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c128:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d110      	bne.n	800c158 <HAL_FLASH_IRQHandler+0x354>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	4a0a      	ldr	r2, [pc, #40]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c13c:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800c140:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800c142:	4b08      	ldr	r3, [pc, #32]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c144:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c148:	4a06      	ldr	r2, [pc, #24]	; (800c164 <HAL_FLASH_IRQHandler+0x360>)
 800c14a:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800c14e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800c152:	4b03      	ldr	r3, [pc, #12]	; (800c160 <HAL_FLASH_IRQHandler+0x35c>)
 800c154:	2200      	movs	r2, #0
 800c156:	751a      	strb	r2, [r3, #20]
  }
}
 800c158:	bf00      	nop
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	240023f4 	.word	0x240023f4
 800c164:	52002000 	.word	0x52002000

0800c168 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c190:	b480      	push	{r7}
 800c192:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800c194:	4b18      	ldr	r3, [pc, #96]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00d      	beq.n	800c1bc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800c1a0:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1a2:	4a16      	ldr	r2, [pc, #88]	; (800c1fc <HAL_FLASH_Unlock+0x6c>)
 800c1a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800c1a6:	4b14      	ldr	r3, [pc, #80]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1a8:	4a15      	ldr	r2, [pc, #84]	; (800c200 <HAL_FLASH_Unlock+0x70>)
 800c1aa:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800c1ac:	4b12      	ldr	r3, [pc, #72]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e018      	b.n	800c1ee <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d010      	beq.n	800c1ec <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800c1ca:	4b0b      	ldr	r3, [pc, #44]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1cc:	4a0b      	ldr	r2, [pc, #44]	; (800c1fc <HAL_FLASH_Unlock+0x6c>)
 800c1ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800c1d2:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1d4:	4a0a      	ldr	r2, [pc, #40]	; (800c200 <HAL_FLASH_Unlock+0x70>)
 800c1d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800c1da:	4b07      	ldr	r3, [pc, #28]	; (800c1f8 <HAL_FLASH_Unlock+0x68>)
 800c1dc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	52002000 	.word	0x52002000
 800c1fc:	45670123 	.word	0x45670123
 800c200:	cdef89ab 	.word	0xcdef89ab

0800c204 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800c20e:	2304      	movs	r3, #4
 800c210:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800c216:	f7fa fbe3 	bl	80069e0 <HAL_GetTick>
 800c21a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d113      	bne.n	800c24a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800c222:	4b41      	ldr	r3, [pc, #260]	; (800c328 <FLASH_WaitForLastOperation+0x124>)
 800c224:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800c226:	e010      	b.n	800c24a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22e:	d00c      	beq.n	800c24a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c230:	f7fa fbd6 	bl	80069e0 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d302      	bcc.n	800c246 <FLASH_WaitForLastOperation+0x42>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	e06a      	b.n	800c320 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	4b37      	ldr	r3, [pc, #220]	; (800c32c <FLASH_WaitForLastOperation+0x128>)
 800c24e:	4013      	ands	r3, r2
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	429a      	cmp	r2, r3
 800c254:	d10a      	bne.n	800c26c <FLASH_WaitForLastOperation+0x68>
 800c256:	4b36      	ldr	r3, [pc, #216]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	4013      	ands	r3, r2
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	429a      	cmp	r2, r3
 800c262:	bf0c      	ite	eq
 800c264:	2301      	moveq	r3, #1
 800c266:	2300      	movne	r3, #0
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	e00c      	b.n	800c286 <FLASH_WaitForLastOperation+0x82>
 800c26c:	4b30      	ldr	r3, [pc, #192]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c26e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c272:	43da      	mvns	r2, r3
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	4013      	ands	r3, r2
 800c278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bf0c      	ite	eq
 800c280:	2301      	moveq	r3, #1
 800c282:	2300      	movne	r3, #0
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1ce      	bne.n	800c228 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d105      	bne.n	800c29c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800c290:	4b27      	ldr	r3, [pc, #156]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c292:	691a      	ldr	r2, [r3, #16]
 800c294:	4b27      	ldr	r3, [pc, #156]	; (800c334 <FLASH_WaitForLastOperation+0x130>)
 800c296:	4013      	ands	r3, r2
 800c298:	613b      	str	r3, [r7, #16]
 800c29a:	e007      	b.n	800c2ac <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800c29c:	4b24      	ldr	r3, [pc, #144]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c29e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <FLASH_WaitForLastOperation+0x130>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2aa:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d017      	beq.n	800c2e6 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800c2b6:	4b20      	ldr	r3, [pc, #128]	; (800c338 <FLASH_WaitForLastOperation+0x134>)
 800c2b8:	699a      	ldr	r2, [r3, #24]
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	4a1e      	ldr	r2, [pc, #120]	; (800c338 <FLASH_WaitForLastOperation+0x134>)
 800c2c0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4b19      	ldr	r3, [pc, #100]	; (800c32c <FLASH_WaitForLastOperation+0x128>)
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d103      	bne.n	800c2d6 <FLASH_WaitForLastOperation+0xd2>
 800c2ce:	4a18      	ldr	r2, [pc, #96]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	6153      	str	r3, [r2, #20]
 800c2d4:	e005      	b.n	800c2e2 <FLASH_WaitForLastOperation+0xde>
 800c2d6:	4a16      	ldr	r2, [pc, #88]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2de:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e01c      	b.n	800c320 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d10b      	bne.n	800c304 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800c2ec:	4b10      	ldr	r3, [pc, #64]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2f8:	d111      	bne.n	800c31e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c2fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c300:	615a      	str	r2, [r3, #20]
 800c302:	e00c      	b.n	800c31e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800c304:	4b0a      	ldr	r3, [pc, #40]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c306:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c30a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c312:	d104      	bne.n	800c31e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800c314:	4b06      	ldr	r3, [pc, #24]	; (800c330 <FLASH_WaitForLastOperation+0x12c>)
 800c316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c31a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	80000004 	.word	0x80000004
 800c32c:	1fef000f 	.word	0x1fef000f
 800c330:	52002000 	.word	0x52002000
 800c334:	17ee0000 	.word	0x17ee0000
 800c338:	240023f4 	.word	0x240023f4

0800c33c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c34a:	4b5e      	ldr	r3, [pc, #376]	; (800c4c4 <HAL_FLASHEx_Erase+0x188>)
 800c34c:	7d1b      	ldrb	r3, [r3, #20]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d101      	bne.n	800c356 <HAL_FLASHEx_Erase+0x1a>
 800c352:	2302      	movs	r3, #2
 800c354:	e0b2      	b.n	800c4bc <HAL_FLASHEx_Erase+0x180>
 800c356:	4b5b      	ldr	r3, [pc, #364]	; (800c4c4 <HAL_FLASHEx_Erase+0x188>)
 800c358:	2201      	movs	r2, #1
 800c35a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c35c:	4b59      	ldr	r3, [pc, #356]	; (800c4c4 <HAL_FLASHEx_Erase+0x188>)
 800c35e:	2200      	movs	r2, #0
 800c360:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d009      	beq.n	800c382 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800c36e:	2101      	movs	r1, #1
 800c370:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c374:	f7ff ff46 	bl	800c204 <FLASH_WaitForLastOperation>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d009      	beq.n	800c3a2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c38e:	2102      	movs	r1, #2
 800c390:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c394:	f7ff ff36 	bl	800c204 <FLASH_WaitForLastOperation>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f040 8085 	bne.w	800c4b4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d136      	bne.n	800c420 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	691a      	ldr	r2, [r3, #16]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4610      	mov	r0, r2
 800c3be:	f000 f8b7 	bl	800c530 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00f      	beq.n	800c3ee <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c3d4:	f7ff ff16 	bl	800c204 <FLASH_WaitForLastOperation>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800c3e2:	4b39      	ldr	r3, [pc, #228]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	4a38      	ldr	r2, [pc, #224]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c3e8:	f023 0308 	bic.w	r3, r3, #8
 800c3ec:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d05c      	beq.n	800c4b4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c3fa:	2102      	movs	r1, #2
 800c3fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c400:	f7ff ff00 	bl	800c204 <FLASH_WaitForLastOperation>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800c40e:	4b2e      	ldr	r3, [pc, #184]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c410:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c414:	4a2c      	ldr	r2, [pc, #176]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c416:	f023 0308 	bic.w	r3, r3, #8
 800c41a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800c41e:	e049      	b.n	800c4b4 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	60bb      	str	r3, [r7, #8]
 800c42e:	e039      	b.n	800c4a4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6859      	ldr	r1, [r3, #4]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	461a      	mov	r2, r3
 800c43a:	68b8      	ldr	r0, [r7, #8]
 800c43c:	f000 f8e2 	bl	800c604 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00c      	beq.n	800c466 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800c44c:	2101      	movs	r1, #1
 800c44e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c452:	f7ff fed7 	bl	800c204 <FLASH_WaitForLastOperation>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c45a:	4b1b      	ldr	r3, [pc, #108]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	491a      	ldr	r1, [pc, #104]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c460:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <HAL_FLASHEx_Erase+0x190>)
 800c462:	4013      	ands	r3, r2
 800c464:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00e      	beq.n	800c490 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800c472:	2102      	movs	r1, #2
 800c474:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c478:	f7ff fec4 	bl	800c204 <FLASH_WaitForLastOperation>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c482:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c486:	4910      	ldr	r1, [pc, #64]	; (800c4c8 <HAL_FLASHEx_Erase+0x18c>)
 800c488:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <HAL_FLASHEx_Erase+0x190>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	601a      	str	r2, [r3, #0]
          break;
 800c49c:	e00a      	b.n	800c4b4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	60bb      	str	r3, [r7, #8]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d3bd      	bcc.n	800c430 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c4b4:	4b03      	ldr	r3, [pc, #12]	; (800c4c4 <HAL_FLASHEx_Erase+0x188>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	751a      	strb	r2, [r3, #20]

  return status;
 800c4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	240023f4 	.word	0x240023f4
 800c4c8:	52002000 	.word	0x52002000
 800c4cc:	fffff8fb 	.word	0xfffff8fb

0800c4d0 <HAL_FLASHEx_EnableEccCorrectionInterrupt>:
  * @brief  Enable ECC correction interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccCorrectionInterrupt(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK1);
 800c4d4:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	4a08      	ldr	r2, [pc, #32]	; (800c4fc <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c4da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4de:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK2);
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c4e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c4e6:	4a05      	ldr	r2, [pc, #20]	; (800c4fc <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c4e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c4f0:	bf00      	nop
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	52002000 	.word	0x52002000

0800c500 <HAL_FLASHEx_EnableEccDetectionInterrupt>:
  * @brief  Enable ECC Detection interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccDetectionInterrupt(void)
{
 800c500:	b480      	push	{r7}
 800c502:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK1);
 800c504:	4b09      	ldr	r3, [pc, #36]	; (800c52c <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	4a08      	ldr	r2, [pc, #32]	; (800c52c <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c50a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c50e:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK2);
 800c510:	4b06      	ldr	r3, [pc, #24]	; (800c52c <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c512:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c516:	4a05      	ldr	r2, [pc, #20]	; (800c52c <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c51c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c520:	bf00      	nop
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	52002000 	.word	0x52002000

0800c530 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	f003 0303 	and.w	r3, r3, #3
 800c540:	2b03      	cmp	r3, #3
 800c542:	d122      	bne.n	800c58a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c544:	4b2e      	ldr	r3, [pc, #184]	; (800c600 <FLASH_MassErase+0xd0>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	4a2d      	ldr	r2, [pc, #180]	; (800c600 <FLASH_MassErase+0xd0>)
 800c54a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c54e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c550:	4b2b      	ldr	r3, [pc, #172]	; (800c600 <FLASH_MassErase+0xd0>)
 800c552:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c556:	4a2a      	ldr	r2, [pc, #168]	; (800c600 <FLASH_MassErase+0xd0>)
 800c558:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c55c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800c560:	4b27      	ldr	r3, [pc, #156]	; (800c600 <FLASH_MassErase+0xd0>)
 800c562:	68da      	ldr	r2, [r3, #12]
 800c564:	4926      	ldr	r1, [pc, #152]	; (800c600 <FLASH_MassErase+0xd0>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800c56c:	4b24      	ldr	r3, [pc, #144]	; (800c600 <FLASH_MassErase+0xd0>)
 800c56e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c572:	4923      	ldr	r1, [pc, #140]	; (800c600 <FLASH_MassErase+0xd0>)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4313      	orrs	r3, r2
 800c578:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800c57c:	4b20      	ldr	r3, [pc, #128]	; (800c600 <FLASH_MassErase+0xd0>)
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <FLASH_MassErase+0xd0>)
 800c582:	f043 0310 	orr.w	r3, r3, #16
 800c586:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800c588:	e033      	b.n	800c5f2 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d011      	beq.n	800c5b8 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c594:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <FLASH_MassErase+0xd0>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4a19      	ldr	r2, [pc, #100]	; (800c600 <FLASH_MassErase+0xd0>)
 800c59a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c59e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800c5a0:	4b17      	ldr	r3, [pc, #92]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	4916      	ldr	r1, [pc, #88]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800c5ac:	4b14      	ldr	r3, [pc, #80]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	4a13      	ldr	r2, [pc, #76]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5b2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c5b6:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d017      	beq.n	800c5f2 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c5c2:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c5c8:	4a0d      	ldr	r2, [pc, #52]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c5ce:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800c5d2:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5d4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c5d8:	4909      	ldr	r1, [pc, #36]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800c5e2:	4b07      	ldr	r3, [pc, #28]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c5e8:	4a05      	ldr	r2, [pc, #20]	; (800c600 <FLASH_MassErase+0xd0>)
 800c5ea:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c5ee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	52002000 	.word	0x52002000

0800c604 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	d010      	beq.n	800c63c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c61a:	4b18      	ldr	r3, [pc, #96]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	4a17      	ldr	r2, [pc, #92]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c620:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c624:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	0219      	lsls	r1, r3, #8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	430b      	orrs	r3, r1
 800c632:	4313      	orrs	r3, r2
 800c634:	4a11      	ldr	r2, [pc, #68]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c636:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c63a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d014      	beq.n	800c670 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c646:	4b0d      	ldr	r3, [pc, #52]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c648:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c64c:	4a0b      	ldr	r2, [pc, #44]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c64e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c652:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c656:	4b09      	ldr	r3, [pc, #36]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c658:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	0219      	lsls	r1, r3, #8
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	430b      	orrs	r3, r1
 800c664:	4313      	orrs	r3, r2
 800c666:	4a05      	ldr	r2, [pc, #20]	; (800c67c <FLASH_Erase_Sector+0x78>)
 800c668:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c66c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800c670:	bf00      	nop
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	52002000 	.word	0x52002000

0800c680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c680:	b480      	push	{r7}
 800c682:	b089      	sub	sp, #36	; 0x24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c68e:	4b89      	ldr	r3, [pc, #548]	; (800c8b4 <HAL_GPIO_Init+0x234>)
 800c690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c692:	e194      	b.n	800c9be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	2101      	movs	r1, #1
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8186 	beq.w	800c9b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d005      	beq.n	800c6c4 <HAL_GPIO_Init+0x44>
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	f003 0303 	and.w	r3, r3, #3
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d130      	bne.n	800c726 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d4:	43db      	mvns	r3, r3
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	4013      	ands	r3, r2
 800c6da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e8:	69ba      	ldr	r2, [r7, #24]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c702:	43db      	mvns	r3, r3
 800c704:	69ba      	ldr	r2, [r7, #24]
 800c706:	4013      	ands	r3, r2
 800c708:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	091b      	lsrs	r3, r3, #4
 800c710:	f003 0201 	and.w	r2, r3, #1
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	fa02 f303 	lsl.w	r3, r2, r3
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f003 0303 	and.w	r3, r3, #3
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d017      	beq.n	800c762 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	2203      	movs	r2, #3
 800c73e:	fa02 f303 	lsl.w	r3, r2, r3
 800c742:	43db      	mvns	r3, r3
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	4013      	ands	r3, r2
 800c748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	689a      	ldr	r2, [r3, #8]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	fa02 f303 	lsl.w	r3, r2, r3
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	4313      	orrs	r3, r2
 800c75a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	69ba      	ldr	r2, [r7, #24]
 800c760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d123      	bne.n	800c7b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	08da      	lsrs	r2, r3, #3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3208      	adds	r2, #8
 800c776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	220f      	movs	r2, #15
 800c786:	fa02 f303 	lsl.w	r3, r2, r3
 800c78a:	43db      	mvns	r3, r3
 800c78c:	69ba      	ldr	r2, [r7, #24]
 800c78e:	4013      	ands	r3, r2
 800c790:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	691a      	ldr	r2, [r3, #16]
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	08da      	lsrs	r2, r3, #3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3208      	adds	r2, #8
 800c7b0:	69b9      	ldr	r1, [r7, #24]
 800c7b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	2203      	movs	r2, #3
 800c7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c6:	43db      	mvns	r3, r3
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f003 0203 	and.w	r2, r3, #3
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	fa02 f303 	lsl.w	r3, r2, r3
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	69ba      	ldr	r2, [r7, #24]
 800c7e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80e0 	beq.w	800c9b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7f8:	4b2f      	ldr	r3, [pc, #188]	; (800c8b8 <HAL_GPIO_Init+0x238>)
 800c7fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c7fe:	4a2e      	ldr	r2, [pc, #184]	; (800c8b8 <HAL_GPIO_Init+0x238>)
 800c800:	f043 0302 	orr.w	r3, r3, #2
 800c804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c808:	4b2b      	ldr	r3, [pc, #172]	; (800c8b8 <HAL_GPIO_Init+0x238>)
 800c80a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c816:	4a29      	ldr	r2, [pc, #164]	; (800c8bc <HAL_GPIO_Init+0x23c>)
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	089b      	lsrs	r3, r3, #2
 800c81c:	3302      	adds	r3, #2
 800c81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	f003 0303 	and.w	r3, r3, #3
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	220f      	movs	r2, #15
 800c82e:	fa02 f303 	lsl.w	r3, r2, r3
 800c832:	43db      	mvns	r3, r3
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	4013      	ands	r3, r2
 800c838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a20      	ldr	r2, [pc, #128]	; (800c8c0 <HAL_GPIO_Init+0x240>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d052      	beq.n	800c8e8 <HAL_GPIO_Init+0x268>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a1f      	ldr	r2, [pc, #124]	; (800c8c4 <HAL_GPIO_Init+0x244>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d031      	beq.n	800c8ae <HAL_GPIO_Init+0x22e>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a1e      	ldr	r2, [pc, #120]	; (800c8c8 <HAL_GPIO_Init+0x248>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d02b      	beq.n	800c8aa <HAL_GPIO_Init+0x22a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a1d      	ldr	r2, [pc, #116]	; (800c8cc <HAL_GPIO_Init+0x24c>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d025      	beq.n	800c8a6 <HAL_GPIO_Init+0x226>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a1c      	ldr	r2, [pc, #112]	; (800c8d0 <HAL_GPIO_Init+0x250>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d01f      	beq.n	800c8a2 <HAL_GPIO_Init+0x222>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a1b      	ldr	r2, [pc, #108]	; (800c8d4 <HAL_GPIO_Init+0x254>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d019      	beq.n	800c89e <HAL_GPIO_Init+0x21e>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a1a      	ldr	r2, [pc, #104]	; (800c8d8 <HAL_GPIO_Init+0x258>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d013      	beq.n	800c89a <HAL_GPIO_Init+0x21a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a19      	ldr	r2, [pc, #100]	; (800c8dc <HAL_GPIO_Init+0x25c>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00d      	beq.n	800c896 <HAL_GPIO_Init+0x216>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a18      	ldr	r2, [pc, #96]	; (800c8e0 <HAL_GPIO_Init+0x260>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d007      	beq.n	800c892 <HAL_GPIO_Init+0x212>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a17      	ldr	r2, [pc, #92]	; (800c8e4 <HAL_GPIO_Init+0x264>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d101      	bne.n	800c88e <HAL_GPIO_Init+0x20e>
 800c88a:	2309      	movs	r3, #9
 800c88c:	e02d      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c88e:	230a      	movs	r3, #10
 800c890:	e02b      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c892:	2308      	movs	r3, #8
 800c894:	e029      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c896:	2307      	movs	r3, #7
 800c898:	e027      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c89a:	2306      	movs	r3, #6
 800c89c:	e025      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c89e:	2305      	movs	r3, #5
 800c8a0:	e023      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c8a2:	2304      	movs	r3, #4
 800c8a4:	e021      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e01f      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	e01d      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e01b      	b.n	800c8ea <HAL_GPIO_Init+0x26a>
 800c8b2:	bf00      	nop
 800c8b4:	58000080 	.word	0x58000080
 800c8b8:	58024400 	.word	0x58024400
 800c8bc:	58000400 	.word	0x58000400
 800c8c0:	58020000 	.word	0x58020000
 800c8c4:	58020400 	.word	0x58020400
 800c8c8:	58020800 	.word	0x58020800
 800c8cc:	58020c00 	.word	0x58020c00
 800c8d0:	58021000 	.word	0x58021000
 800c8d4:	58021400 	.word	0x58021400
 800c8d8:	58021800 	.word	0x58021800
 800c8dc:	58021c00 	.word	0x58021c00
 800c8e0:	58022000 	.word	0x58022000
 800c8e4:	58022400 	.word	0x58022400
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	f002 0203 	and.w	r2, r2, #3
 800c8f0:	0092      	lsls	r2, r2, #2
 800c8f2:	4093      	lsls	r3, r2
 800c8f4:	69ba      	ldr	r2, [r7, #24]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8fa:	4938      	ldr	r1, [pc, #224]	; (800c9dc <HAL_GPIO_Init+0x35c>)
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	089b      	lsrs	r3, r3, #2
 800c900:	3302      	adds	r3, #2
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	43db      	mvns	r3, r3
 800c914:	69ba      	ldr	r2, [r7, #24]
 800c916:	4013      	ands	r3, r2
 800c918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d003      	beq.n	800c92e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c92e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	43db      	mvns	r3, r3
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	4013      	ands	r3, r2
 800c946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d003      	beq.n	800c95c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	4313      	orrs	r3, r2
 800c95a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c95c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	43db      	mvns	r3, r3
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	4013      	ands	r3, r2
 800c972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	4313      	orrs	r3, r2
 800c986:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	43db      	mvns	r3, r3
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	4013      	ands	r3, r2
 800c99c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d003      	beq.n	800c9b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	69ba      	ldr	r2, [r7, #24]
 800c9b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f47f ae63 	bne.w	800c694 <HAL_GPIO_Init+0x14>
  }
}
 800c9ce:	bf00      	nop
 800c9d0:	bf00      	nop
 800c9d2:	3724      	adds	r7, #36	; 0x24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	58000400 	.word	0x58000400

0800c9e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c9ee:	4b75      	ldr	r3, [pc, #468]	; (800cbc4 <HAL_GPIO_DeInit+0x1e4>)
 800c9f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c9f2:	e0d9      	b.n	800cba8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	4013      	ands	r3, r2
 800ca00:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 80cc 	beq.w	800cba2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ca0a:	4a6f      	ldr	r2, [pc, #444]	; (800cbc8 <HAL_GPIO_DeInit+0x1e8>)
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	089b      	lsrs	r3, r3, #2
 800ca10:	3302      	adds	r3, #2
 800ca12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca16:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	220f      	movs	r2, #15
 800ca22:	fa02 f303 	lsl.w	r3, r2, r3
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a67      	ldr	r2, [pc, #412]	; (800cbcc <HAL_GPIO_DeInit+0x1ec>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d037      	beq.n	800caa4 <HAL_GPIO_DeInit+0xc4>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a66      	ldr	r2, [pc, #408]	; (800cbd0 <HAL_GPIO_DeInit+0x1f0>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d031      	beq.n	800caa0 <HAL_GPIO_DeInit+0xc0>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a65      	ldr	r2, [pc, #404]	; (800cbd4 <HAL_GPIO_DeInit+0x1f4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d02b      	beq.n	800ca9c <HAL_GPIO_DeInit+0xbc>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a64      	ldr	r2, [pc, #400]	; (800cbd8 <HAL_GPIO_DeInit+0x1f8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d025      	beq.n	800ca98 <HAL_GPIO_DeInit+0xb8>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a63      	ldr	r2, [pc, #396]	; (800cbdc <HAL_GPIO_DeInit+0x1fc>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d01f      	beq.n	800ca94 <HAL_GPIO_DeInit+0xb4>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a62      	ldr	r2, [pc, #392]	; (800cbe0 <HAL_GPIO_DeInit+0x200>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d019      	beq.n	800ca90 <HAL_GPIO_DeInit+0xb0>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a61      	ldr	r2, [pc, #388]	; (800cbe4 <HAL_GPIO_DeInit+0x204>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d013      	beq.n	800ca8c <HAL_GPIO_DeInit+0xac>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a60      	ldr	r2, [pc, #384]	; (800cbe8 <HAL_GPIO_DeInit+0x208>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00d      	beq.n	800ca88 <HAL_GPIO_DeInit+0xa8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a5f      	ldr	r2, [pc, #380]	; (800cbec <HAL_GPIO_DeInit+0x20c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d007      	beq.n	800ca84 <HAL_GPIO_DeInit+0xa4>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a5e      	ldr	r2, [pc, #376]	; (800cbf0 <HAL_GPIO_DeInit+0x210>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d101      	bne.n	800ca80 <HAL_GPIO_DeInit+0xa0>
 800ca7c:	2309      	movs	r3, #9
 800ca7e:	e012      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca80:	230a      	movs	r3, #10
 800ca82:	e010      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca84:	2308      	movs	r3, #8
 800ca86:	e00e      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca88:	2307      	movs	r3, #7
 800ca8a:	e00c      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca8c:	2306      	movs	r3, #6
 800ca8e:	e00a      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca90:	2305      	movs	r3, #5
 800ca92:	e008      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca94:	2304      	movs	r3, #4
 800ca96:	e006      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e004      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e002      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e000      	b.n	800caa6 <HAL_GPIO_DeInit+0xc6>
 800caa4:	2300      	movs	r3, #0
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	f002 0203 	and.w	r2, r2, #3
 800caac:	0092      	lsls	r2, r2, #2
 800caae:	4093      	lsls	r3, r2
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d136      	bne.n	800cb24 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	43db      	mvns	r3, r3
 800cabe:	401a      	ands	r2, r3
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	43db      	mvns	r3, r3
 800cacc:	401a      	ands	r2, r3
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800cad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	43db      	mvns	r3, r3
 800cadc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cae0:	4013      	ands	r3, r2
 800cae2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800cae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	43db      	mvns	r3, r3
 800caee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800caf2:	4013      	ands	r3, r2
 800caf4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	220f      	movs	r2, #15
 800cb00:	fa02 f303 	lsl.w	r3, r2, r3
 800cb04:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cb06:	4a30      	ldr	r2, [pc, #192]	; (800cbc8 <HAL_GPIO_DeInit+0x1e8>)
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	089b      	lsrs	r3, r3, #2
 800cb0c:	3302      	adds	r3, #2
 800cb0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	43da      	mvns	r2, r3
 800cb16:	482c      	ldr	r0, [pc, #176]	; (800cbc8 <HAL_GPIO_DeInit+0x1e8>)
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	089b      	lsrs	r3, r3, #2
 800cb1c:	400a      	ands	r2, r1
 800cb1e:	3302      	adds	r3, #2
 800cb20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	2103      	movs	r1, #3
 800cb2e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb32:	431a      	orrs	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	08da      	lsrs	r2, r3, #3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3208      	adds	r2, #8
 800cb40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f003 0307 	and.w	r3, r3, #7
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	220f      	movs	r2, #15
 800cb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb52:	43db      	mvns	r3, r3
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	08d2      	lsrs	r2, r2, #3
 800cb58:	4019      	ands	r1, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3208      	adds	r2, #8
 800cb5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68da      	ldr	r2, [r3, #12]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	2103      	movs	r1, #3
 800cb6c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb70:	43db      	mvns	r3, r3
 800cb72:	401a      	ands	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	fa01 f303 	lsl.w	r3, r1, r3
 800cb84:	43db      	mvns	r3, r3
 800cb86:	401a      	ands	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	2103      	movs	r1, #3
 800cb96:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9a:	43db      	mvns	r3, r3
 800cb9c:	401a      	ands	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	3301      	adds	r3, #1
 800cba6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	fa22 f303 	lsr.w	r3, r2, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f47f af1f 	bne.w	800c9f4 <HAL_GPIO_DeInit+0x14>
  }
}
 800cbb6:	bf00      	nop
 800cbb8:	bf00      	nop
 800cbba:	371c      	adds	r7, #28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	58000080 	.word	0x58000080
 800cbc8:	58000400 	.word	0x58000400
 800cbcc:	58020000 	.word	0x58020000
 800cbd0:	58020400 	.word	0x58020400
 800cbd4:	58020800 	.word	0x58020800
 800cbd8:	58020c00 	.word	0x58020c00
 800cbdc:	58021000 	.word	0x58021000
 800cbe0:	58021400 	.word	0x58021400
 800cbe4:	58021800 	.word	0x58021800
 800cbe8:	58021c00 	.word	0x58021c00
 800cbec:	58022000 	.word	0x58022000
 800cbf0:	58022400 	.word	0x58022400

0800cbf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	691a      	ldr	r2, [r3, #16]
 800cc04:	887b      	ldrh	r3, [r7, #2]
 800cc06:	4013      	ands	r3, r2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
 800cc10:	e001      	b.n	800cc16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cc12:	2300      	movs	r3, #0
 800cc14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	807b      	strh	r3, [r7, #2]
 800cc30:	4613      	mov	r3, r2
 800cc32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cc34:	787b      	ldrb	r3, [r7, #1]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc3a:	887a      	ldrh	r2, [r7, #2]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cc40:	e003      	b.n	800cc4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cc42:	887b      	ldrh	r3, [r7, #2]
 800cc44:	041a      	lsls	r2, r3, #16
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	619a      	str	r2, [r3, #24]
}
 800cc4a:	bf00      	nop
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e08b      	b.n	800cd82 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7f5 ff44 	bl	8002b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2224      	movs	r2, #36	; 0x24
 800cc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f022 0201 	bic.w	r2, r2, #1
 800cc9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cca8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ccb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d107      	bne.n	800ccd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	689a      	ldr	r2, [r3, #8]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccce:	609a      	str	r2, [r3, #8]
 800ccd0:	e006      	b.n	800cce0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	689a      	ldr	r2, [r3, #8]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ccde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d108      	bne.n	800ccfa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccf6:	605a      	str	r2, [r3, #4]
 800ccf8:	e007      	b.n	800cd0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6859      	ldr	r1, [r3, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	4b1d      	ldr	r3, [pc, #116]	; (800cd8c <HAL_I2C_Init+0x134>)
 800cd16:	430b      	orrs	r3, r1
 800cd18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68da      	ldr	r2, [r3, #12]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	691a      	ldr	r2, [r3, #16]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	695b      	ldr	r3, [r3, #20]
 800cd32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	430a      	orrs	r2, r1
 800cd42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	69d9      	ldr	r1, [r3, #28]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a1a      	ldr	r2, [r3, #32]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f042 0201 	orr.w	r2, r2, #1
 800cd62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	02008000 	.word	0x02008000

0800cd90 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08a      	sub	sp, #40	; 0x28
 800cd94:	af02      	add	r7, sp, #8
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	607a      	str	r2, [r7, #4]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	817b      	strh	r3, [r7, #10]
 800cda0:	4613      	mov	r3, r2
 800cda2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b20      	cmp	r3, #32
 800cdb2:	f040 80ef 	bne.w	800cf94 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdc4:	d101      	bne.n	800cdca <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	e0e5      	b.n	800cf96 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d101      	bne.n	800cdd8 <HAL_I2C_Master_Transmit_DMA+0x48>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	e0de      	b.n	800cf96 <HAL_I2C_Master_Transmit_DMA+0x206>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2221      	movs	r2, #33	; 0x21
 800cde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2210      	movs	r2, #16
 800cdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	893a      	ldrh	r2, [r7, #8]
 800ce00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4a66      	ldr	r2, [pc, #408]	; (800cfa0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800ce06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	4a66      	ldr	r2, [pc, #408]	; (800cfa4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800ce0c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	2bff      	cmp	r3, #255	; 0xff
 800ce16:	d906      	bls.n	800ce26 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	22ff      	movs	r2, #255	; 0xff
 800ce1c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ce1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e007      	b.n	800ce36 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ce30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce34:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d01a      	beq.n	800ce74 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	781a      	ldrb	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	1c5a      	adds	r2, r3, #1
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce58:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	3b01      	subs	r3, #1
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d074      	beq.n	800cf66 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d022      	beq.n	800ceca <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	4a47      	ldr	r2, [pc, #284]	; (800cfa8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ce8a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	4a46      	ldr	r2, [pc, #280]	; (800cfac <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ce92:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	2200      	movs	r2, #0
 800ce9a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	2200      	movs	r2, #0
 800cea2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ceb4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ceba:	f7fc fc17 	bl	80096ec <HAL_DMA_Start_IT>
 800cebe:	4603      	mov	r3, r0
 800cec0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d13a      	bne.n	800cf3e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800cec8:	e013      	b.n	800cef2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2220      	movs	r2, #32
 800cece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cede:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e051      	b.n	800cf96 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	3301      	adds	r3, #1
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	8979      	ldrh	r1, [r7, #10]
 800cefe:	4b2c      	ldr	r3, [pc, #176]	; (800cfb0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f002 f83b 	bl	800ef80 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cf24:	2110      	movs	r1, #16
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f002 f85c 	bl	800efe4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	e028      	b.n	800cf90 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf52:	f043 0210 	orr.w	r2, r3, #16
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e017      	b.n	800cf96 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4a12      	ldr	r2, [pc, #72]	; (800cfb4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800cf6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	8979      	ldrh	r1, [r7, #10]
 800cf72:	4b0f      	ldr	r3, [pc, #60]	; (800cfb0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f002 f800 	bl	800ef80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cf88:	2101      	movs	r1, #1
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f002 f82a 	bl	800efe4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	e000      	b.n	800cf96 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800cf94:	2302      	movs	r3, #2
  }
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3720      	adds	r7, #32
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	ffff0000 	.word	0xffff0000
 800cfa4:	0800d7eb 	.word	0x0800d7eb
 800cfa8:	0800eba3 	.word	0x0800eba3
 800cfac:	0800ecd1 	.word	0x0800ecd1
 800cfb0:	80002000 	.word	0x80002000
 800cfb4:	0800d37b 	.word	0x0800d37b

0800cfb8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	607a      	str	r2, [r7, #4]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	817b      	strh	r3, [r7, #10]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b20      	cmp	r3, #32
 800cfd6:	f040 80cd 	bne.w	800d174 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfe8:	d101      	bne.n	800cfee <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800cfea:	2302      	movs	r3, #2
 800cfec:	e0c3      	b.n	800d176 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d101      	bne.n	800cffc <HAL_I2C_Master_Receive_DMA+0x44>
 800cff8:	2302      	movs	r3, #2
 800cffa:	e0bc      	b.n	800d176 <HAL_I2C_Master_Receive_DMA+0x1be>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2222      	movs	r2, #34	; 0x22
 800d008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2210      	movs	r2, #16
 800d010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	893a      	ldrh	r2, [r7, #8]
 800d024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	4a55      	ldr	r2, [pc, #340]	; (800d180 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800d02a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4a55      	ldr	r2, [pc, #340]	; (800d184 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800d030:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d036:	b29b      	uxth	r3, r3
 800d038:	2bff      	cmp	r3, #255	; 0xff
 800d03a:	d906      	bls.n	800d04a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	22ff      	movs	r2, #255	; 0xff
 800d040:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800d042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d046:	617b      	str	r3, [r7, #20]
 800d048:	e007      	b.n	800d05a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d04e:	b29a      	uxth	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d058:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d070      	beq.n	800d144 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d020      	beq.n	800d0ac <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06e:	4a46      	ldr	r2, [pc, #280]	; (800d188 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800d070:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	4a45      	ldr	r2, [pc, #276]	; (800d18c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800d078:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07e:	2200      	movs	r2, #0
 800d080:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d086:	2200      	movs	r2, #0
 800d088:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3324      	adds	r3, #36	; 0x24
 800d094:	4619      	mov	r1, r3
 800d096:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d09c:	f7fc fb26 	bl	80096ec <HAL_DMA_Start_IT>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d0a4:	7cfb      	ldrb	r3, [r7, #19]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d138      	bne.n	800d11c <HAL_I2C_Master_Receive_DMA+0x164>
 800d0aa:	e013      	b.n	800d0d4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e050      	b.n	800d176 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	8979      	ldrh	r1, [r7, #10]
 800d0dc:	4b2c      	ldr	r3, [pc, #176]	; (800d190 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f001 ff4c 	bl	800ef80 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d102:	2110      	movs	r1, #16
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f001 ff6d 	bl	800efe4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	e029      	b.n	800d170 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d130:	f043 0210 	orr.w	r2, r3, #16
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e018      	b.n	800d176 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4a13      	ldr	r2, [pc, #76]	; (800d194 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800d148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	8979      	ldrh	r1, [r7, #10]
 800d152:	4b0f      	ldr	r3, [pc, #60]	; (800d190 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f001 ff10 	bl	800ef80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d168:	2102      	movs	r1, #2
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f001 ff3a 	bl	800efe4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d170:	2300      	movs	r3, #0
 800d172:	e000      	b.n	800d176 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800d174:	2302      	movs	r3, #2
  }
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	ffff0000 	.word	0xffff0000
 800d184:	0800d7eb 	.word	0x0800d7eb
 800d188:	0800ec39 	.word	0x0800ec39
 800d18c:	0800ecd1 	.word	0x0800ecd1
 800d190:	80002400 	.word	0x80002400
 800d194:	0800d37b 	.word	0x0800d37b

0800d198 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d005      	beq.n	800d1c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	68f9      	ldr	r1, [r7, #12]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	4798      	blx	r3
  }
}
 800d1c4:	bf00      	nop
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	0a1b      	lsrs	r3, r3, #8
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d010      	beq.n	800d212 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	09db      	lsrs	r3, r3, #7
 800d1f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d200:	f043 0201 	orr.w	r2, r3, #1
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d210:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	0a9b      	lsrs	r3, r3, #10
 800d216:	f003 0301 	and.w	r3, r3, #1
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d010      	beq.n	800d240 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	09db      	lsrs	r3, r3, #7
 800d222:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d22e:	f043 0208 	orr.w	r2, r3, #8
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d23e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	0a5b      	lsrs	r3, r3, #9
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d010      	beq.n	800d26e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	09db      	lsrs	r3, r3, #7
 800d250:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00a      	beq.n	800d26e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d25c:	f043 0202 	orr.w	r2, r3, #2
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d26c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f003 030b 	and.w	r3, r3, #11
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d003      	beq.n	800d286 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800d27e:	68f9      	ldr	r1, [r7, #12]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f001 fb53 	bl	800e92c <I2C_ITError>
  }
}
 800d286:	bf00      	nop
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d2aa:	bf00      	nop
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b083      	sub	sp, #12
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d2be:	bf00      	nop
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d2d2:	bf00      	nop
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b083      	sub	sp, #12
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d2ee:	bf00      	nop
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b083      	sub	sp, #12
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d302:	bf00      	nop
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b083      	sub	sp, #12
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d352:	bf00      	nop
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d36c:	b2db      	uxtb	r3, r3
}
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b088      	sub	sp, #32
 800d37e:	af02      	add	r7, sp, #8
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d390:	2b01      	cmp	r3, #1
 800d392:	d101      	bne.n	800d398 <I2C_Master_ISR_IT+0x1e>
 800d394:	2302      	movs	r3, #2
 800d396:	e120      	b.n	800d5da <I2C_Master_ISR_IT+0x260>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	091b      	lsrs	r3, r3, #4
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d013      	beq.n	800d3d4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	091b      	lsrs	r3, r3, #4
 800d3b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2210      	movs	r2, #16
 800d3be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c4:	f043 0204 	orr.w	r2, r3, #4
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f001 fbc4 	bl	800eb5a <I2C_Flush_TXDR>
 800d3d2:	e0ed      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	089b      	lsrs	r3, r3, #2
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d023      	beq.n	800d428 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	089b      	lsrs	r3, r3, #2
 800d3e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d01d      	beq.n	800d428 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	f023 0304 	bic.w	r3, r3, #4
 800d3f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	b2d2      	uxtb	r2, r2
 800d400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d410:	3b01      	subs	r3, #1
 800d412:	b29a      	uxth	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	3b01      	subs	r3, #1
 800d420:	b29a      	uxth	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d426:	e0c3      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	099b      	lsrs	r3, r3, #6
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b00      	cmp	r3, #0
 800d432:	d12a      	bne.n	800d48a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	085b      	lsrs	r3, r3, #1
 800d438:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d024      	beq.n	800d48a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	085b      	lsrs	r3, r3, #1
 800d444:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01e      	beq.n	800d48a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d450:	b29b      	uxth	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	f000 80ac 	beq.w	800d5b0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d472:	3b01      	subs	r3, #1
 800d474:	b29a      	uxth	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d47e:	b29b      	uxth	r3, r3
 800d480:	3b01      	subs	r3, #1
 800d482:	b29a      	uxth	r2, r3
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800d488:	e092      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	09db      	lsrs	r3, r3, #7
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d05d      	beq.n	800d552 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	099b      	lsrs	r3, r3, #6
 800d49a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d057      	beq.n	800d552 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d040      	beq.n	800d52e <I2C_Master_ISR_IT+0x1b4>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d13c      	bne.n	800d52e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4c0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	2bff      	cmp	r3, #255	; 0xff
 800d4ca:	d90e      	bls.n	800d4ea <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	22ff      	movs	r2, #255	; 0xff
 800d4d0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	8a79      	ldrh	r1, [r7, #18]
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f001 fd4c 	bl	800ef80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4e8:	e032      	b.n	800d550 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d4fc:	d00b      	beq.n	800d516 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d502:	b2da      	uxtb	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	8a79      	ldrh	r1, [r7, #18]
 800d50a:	2000      	movs	r0, #0
 800d50c:	9000      	str	r0, [sp, #0]
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f001 fd36 	bl	800ef80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d514:	e01c      	b.n	800d550 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	8a79      	ldrh	r1, [r7, #18]
 800d51e:	2300      	movs	r3, #0
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f001 fd2a 	bl	800ef80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d52c:	e010      	b.n	800d550 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d53c:	d003      	beq.n	800d546 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 fdde 	bl	800e100 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d544:	e034      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d546:	2140      	movs	r1, #64	; 0x40
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f001 f9ef 	bl	800e92c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d54e:	e02f      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
 800d550:	e02e      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	099b      	lsrs	r3, r3, #6
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d028      	beq.n	800d5b0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	099b      	lsrs	r3, r3, #6
 800d562:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d566:	2b00      	cmp	r3, #0
 800d568:	d022      	beq.n	800d5b0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d56e:	b29b      	uxth	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d119      	bne.n	800d5a8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d582:	d015      	beq.n	800d5b0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d58c:	d108      	bne.n	800d5a0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d59c:	605a      	str	r2, [r3, #4]
 800d59e:	e007      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f000 fdad 	bl	800e100 <I2C_ITMasterSeqCplt>
 800d5a6:	e003      	b.n	800d5b0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d5a8:	2140      	movs	r1, #64	; 0x40
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f001 f9be 	bl	800e92c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d009      	beq.n	800d5d0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	095b      	lsrs	r3, r3, #5
 800d5c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d003      	beq.n	800d5d0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800d5c8:	6979      	ldr	r1, [r7, #20]
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f000 fe34 	bl	800e238 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b086      	sub	sp, #24
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d101      	bne.n	800d606 <I2C_Slave_ISR_IT+0x24>
 800d602:	2302      	movs	r3, #2
 800d604:	e0ed      	b.n	800d7e2 <I2C_Slave_ISR_IT+0x200>
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	095b      	lsrs	r3, r3, #5
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	095b      	lsrs	r3, r3, #5
 800d61e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d622:	2b00      	cmp	r3, #0
 800d624:	d004      	beq.n	800d630 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d626:	6939      	ldr	r1, [r7, #16]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 fecf 	bl	800e3cc <I2C_ITSlaveCplt>
 800d62e:	e0d3      	b.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	091b      	lsrs	r3, r3, #4
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d04d      	beq.n	800d6d8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	091b      	lsrs	r3, r3, #4
 800d640:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d644:	2b00      	cmp	r3, #0
 800d646:	d047      	beq.n	800d6d8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d128      	bne.n	800d6a4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b28      	cmp	r3, #40	; 0x28
 800d65c:	d108      	bne.n	800d670 <I2C_Slave_ISR_IT+0x8e>
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d664:	d104      	bne.n	800d670 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d666:	6939      	ldr	r1, [r7, #16]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f001 f909 	bl	800e880 <I2C_ITListenCplt>
 800d66e:	e032      	b.n	800d6d6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b29      	cmp	r3, #41	; 0x29
 800d67a:	d10e      	bne.n	800d69a <I2C_Slave_ISR_IT+0xb8>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d682:	d00a      	beq.n	800d69a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2210      	movs	r2, #16
 800d68a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f001 fa64 	bl	800eb5a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 fd71 	bl	800e17a <I2C_ITSlaveSeqCplt>
 800d698:	e01d      	b.n	800d6d6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2210      	movs	r2, #16
 800d6a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d6a2:	e096      	b.n	800d7d2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2210      	movs	r2, #16
 800d6aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6b0:	f043 0204 	orr.w	r2, r3, #4
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d004      	beq.n	800d6c8 <I2C_Slave_ISR_IT+0xe6>
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6c4:	f040 8085 	bne.w	800d7d2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f001 f92c 	bl	800e92c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d6d4:	e07d      	b.n	800d7d2 <I2C_Slave_ISR_IT+0x1f0>
 800d6d6:	e07c      	b.n	800d7d2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	089b      	lsrs	r3, r3, #2
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d030      	beq.n	800d746 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	089b      	lsrs	r3, r3, #2
 800d6e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d02a      	beq.n	800d746 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d018      	beq.n	800d72c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d704:	b2d2      	uxtb	r2, r2
 800d706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d716:	3b01      	subs	r3, #1
 800d718:	b29a      	uxth	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d722:	b29b      	uxth	r3, r3
 800d724:	3b01      	subs	r3, #1
 800d726:	b29a      	uxth	r2, r3
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d730:	b29b      	uxth	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d14f      	bne.n	800d7d6 <I2C_Slave_ISR_IT+0x1f4>
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d73c:	d04b      	beq.n	800d7d6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 fd1b 	bl	800e17a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d744:	e047      	b.n	800d7d6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	08db      	lsrs	r3, r3, #3
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00a      	beq.n	800d768 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	08db      	lsrs	r3, r3, #3
 800d756:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d004      	beq.n	800d768 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d75e:	6939      	ldr	r1, [r7, #16]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 fc49 	bl	800dff8 <I2C_ITAddrCplt>
 800d766:	e037      	b.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	085b      	lsrs	r3, r3, #1
 800d76c:	f003 0301 	and.w	r3, r3, #1
 800d770:	2b00      	cmp	r3, #0
 800d772:	d031      	beq.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	085b      	lsrs	r3, r3, #1
 800d778:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d02b      	beq.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d784:	b29b      	uxth	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d018      	beq.n	800d7bc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78e:	781a      	ldrb	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	851a      	strh	r2, [r3, #40]	; 0x28
 800d7ba:	e00d      	b.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d7c2:	d002      	beq.n	800d7ca <I2C_Slave_ISR_IT+0x1e8>
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f000 fcd5 	bl	800e17a <I2C_ITSlaveSeqCplt>
 800d7d0:	e002      	b.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800d7d2:	bf00      	nop
 800d7d4:	e000      	b.n	800d7d8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800d7d6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3718      	adds	r7, #24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af02      	add	r7, sp, #8
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d101      	bne.n	800d804 <I2C_Master_ISR_DMA+0x1a>
 800d800:	2302      	movs	r3, #2
 800d802:	e0e1      	b.n	800d9c8 <I2C_Master_ISR_DMA+0x1de>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	091b      	lsrs	r3, r3, #4
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d017      	beq.n	800d848 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	091b      	lsrs	r3, r3, #4
 800d81c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d820:	2b00      	cmp	r3, #0
 800d822:	d011      	beq.n	800d848 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2210      	movs	r2, #16
 800d82a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d830:	f043 0204 	orr.w	r2, r3, #4
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d838:	2120      	movs	r1, #32
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f001 fbd2 	bl	800efe4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f001 f98a 	bl	800eb5a <I2C_Flush_TXDR>
 800d846:	e0ba      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	09db      	lsrs	r3, r3, #7
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d072      	beq.n	800d93a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	099b      	lsrs	r3, r3, #6
 800d858:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d06c      	beq.n	800d93a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d86e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d874:	b29b      	uxth	r3, r3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d04e      	beq.n	800d918 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	b29b      	uxth	r3, r3
 800d882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d886:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	2bff      	cmp	r3, #255	; 0xff
 800d890:	d906      	bls.n	800d8a0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	22ff      	movs	r2, #255	; 0xff
 800d896:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800d898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d89c:	617b      	str	r3, [r7, #20]
 800d89e:	e010      	b.n	800d8c2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d8b2:	d003      	beq.n	800d8bc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e002      	b.n	800d8c2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d8bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d8c0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	8a79      	ldrh	r1, [r7, #18]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f001 fb55 	bl	800ef80 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	2b22      	cmp	r3, #34	; 0x22
 800d8f2:	d108      	bne.n	800d906 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d902:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d904:	e05b      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d914:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d916:	e052      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d926:	d003      	beq.n	800d930 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f000 fbe9 	bl	800e100 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d92e:	e046      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d930:	2140      	movs	r1, #64	; 0x40
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f000 fffa 	bl	800e92c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d938:	e041      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	099b      	lsrs	r3, r3, #6
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d029      	beq.n	800d99a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	099b      	lsrs	r3, r3, #6
 800d94a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d023      	beq.n	800d99a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d956:	b29b      	uxth	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d119      	bne.n	800d990 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d96a:	d027      	beq.n	800d9bc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d974:	d108      	bne.n	800d988 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d984:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d986:	e019      	b.n	800d9bc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 fbb9 	bl	800e100 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d98e:	e015      	b.n	800d9bc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d990:	2140      	movs	r1, #64	; 0x40
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 ffca 	bl	800e92c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d998:	e010      	b.n	800d9bc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	095b      	lsrs	r3, r3, #5
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	095b      	lsrs	r3, r3, #5
 800d9aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d005      	beq.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 fc3f 	bl	800e238 <I2C_ITMasterCplt>
 800d9ba:	e000      	b.n	800d9be <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800d9bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d9dc:	4b92      	ldr	r3, [pc, #584]	; (800dc28 <I2C_Mem_ISR_DMA+0x258>)
 800d9de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d101      	bne.n	800d9ee <I2C_Mem_ISR_DMA+0x1e>
 800d9ea:	2302      	movs	r3, #2
 800d9ec:	e118      	b.n	800dc20 <I2C_Mem_ISR_DMA+0x250>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	091b      	lsrs	r3, r3, #4
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d017      	beq.n	800da32 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	091b      	lsrs	r3, r3, #4
 800da06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d011      	beq.n	800da32 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2210      	movs	r2, #16
 800da14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1a:	f043 0204 	orr.w	r2, r3, #4
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800da22:	2120      	movs	r1, #32
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f001 fadd 	bl	800efe4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f001 f895 	bl	800eb5a <I2C_Flush_TXDR>
 800da30:	e0f1      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	085b      	lsrs	r3, r3, #1
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00f      	beq.n	800da5e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	085b      	lsrs	r3, r3, #1
 800da42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800da46:	2b00      	cmp	r3, #0
 800da48:	d009      	beq.n	800da5e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800da52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f04f 32ff 	mov.w	r2, #4294967295
 800da5a:	651a      	str	r2, [r3, #80]	; 0x50
 800da5c:	e0db      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	09db      	lsrs	r3, r3, #7
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d060      	beq.n	800db2c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	099b      	lsrs	r3, r3, #6
 800da6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800da72:	2b00      	cmp	r3, #0
 800da74:	d05a      	beq.n	800db2c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800da76:	2101      	movs	r1, #1
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f001 fb37 	bl	800f0ec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800da7e:	2110      	movs	r1, #16
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f001 faaf 	bl	800efe4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d048      	beq.n	800db22 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da94:	b29b      	uxth	r3, r3
 800da96:	2bff      	cmp	r3, #255	; 0xff
 800da98:	d910      	bls.n	800dabc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	22ff      	movs	r2, #255	; 0xff
 800da9e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daa4:	b299      	uxth	r1, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	2300      	movs	r3, #0
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f001 fa63 	bl	800ef80 <I2C_TransferConfig>
 800daba:	e011      	b.n	800dae0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daca:	b299      	uxth	r1, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	2300      	movs	r3, #0
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f001 fa50 	bl	800ef80 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29a      	uxth	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b22      	cmp	r3, #34	; 0x22
 800dafc:	d108      	bne.n	800db10 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800db0e:	e082      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800db20:	e079      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800db22:	2140      	movs	r1, #64	; 0x40
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 ff01 	bl	800e92c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800db2a:	e074      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	099b      	lsrs	r3, r3, #6
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d05e      	beq.n	800dbf6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	099b      	lsrs	r3, r3, #6
 800db3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800db40:	2b00      	cmp	r3, #0
 800db42:	d058      	beq.n	800dbf6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800db44:	2101      	movs	r1, #1
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f001 fad0 	bl	800f0ec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800db4c:	2110      	movs	r1, #16
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f001 fa48 	bl	800efe4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b22      	cmp	r3, #34	; 0x22
 800db5e:	d101      	bne.n	800db64 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800db60:	4b32      	ldr	r3, [pc, #200]	; (800dc2c <I2C_Mem_ISR_DMA+0x25c>)
 800db62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db68:	b29b      	uxth	r3, r3
 800db6a:	2bff      	cmp	r3, #255	; 0xff
 800db6c:	d910      	bls.n	800db90 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	22ff      	movs	r2, #255	; 0xff
 800db72:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db78:	b299      	uxth	r1, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f001 f9f9 	bl	800ef80 <I2C_TransferConfig>
 800db8e:	e011      	b.n	800dbb4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db94:	b29a      	uxth	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db9e:	b299      	uxth	r1, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f001 f9e6 	bl	800ef80 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b22      	cmp	r3, #34	; 0x22
 800dbd0:	d108      	bne.n	800dbe4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbe0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dbe2:	e018      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbf2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dbf4:	e00f      	b.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	095b      	lsrs	r3, r3, #5
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d009      	beq.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	095b      	lsrs	r3, r3, #5
 800dc06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 fb11 	bl	800e238 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3718      	adds	r7, #24
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	80002000 	.word	0x80002000
 800dc2c:	80002400 	.word	0x80002400

0800dc30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b088      	sub	sp, #32
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d101      	bne.n	800dc54 <I2C_Slave_ISR_DMA+0x24>
 800dc50:	2302      	movs	r3, #2
 800dc52:	e1cc      	b.n	800dfee <I2C_Slave_ISR_DMA+0x3be>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	095b      	lsrs	r3, r3, #5
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00a      	beq.n	800dc7e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	095b      	lsrs	r3, r3, #5
 800dc6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d004      	beq.n	800dc7e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800dc74:	68b9      	ldr	r1, [r7, #8]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 fba8 	bl	800e3cc <I2C_ITSlaveCplt>
 800dc7c:	e1b2      	b.n	800dfe4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	091b      	lsrs	r3, r3, #4
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 819c 	beq.w	800dfc4 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	091b      	lsrs	r3, r3, #4
 800dc90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 8195 	beq.w	800dfc4 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	0b9b      	lsrs	r3, r3, #14
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d106      	bne.n	800dcb4 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	0bdb      	lsrs	r3, r3, #15
 800dcaa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f000 8181 	beq.w	800dfb6 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d07c      	beq.n	800ddb6 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	0bdb      	lsrs	r3, r3, #15
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d076      	beq.n	800ddb6 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a75      	ldr	r2, [pc, #468]	; (800dea4 <I2C_Slave_ISR_DMA+0x274>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d059      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a73      	ldr	r2, [pc, #460]	; (800dea8 <I2C_Slave_ISR_DMA+0x278>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d053      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a71      	ldr	r2, [pc, #452]	; (800deac <I2C_Slave_ISR_DMA+0x27c>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d04d      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a6f      	ldr	r2, [pc, #444]	; (800deb0 <I2C_Slave_ISR_DMA+0x280>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d047      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a6d      	ldr	r2, [pc, #436]	; (800deb4 <I2C_Slave_ISR_DMA+0x284>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d041      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a6b      	ldr	r2, [pc, #428]	; (800deb8 <I2C_Slave_ISR_DMA+0x288>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d03b      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a69      	ldr	r2, [pc, #420]	; (800debc <I2C_Slave_ISR_DMA+0x28c>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d035      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a67      	ldr	r2, [pc, #412]	; (800dec0 <I2C_Slave_ISR_DMA+0x290>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d02f      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a65      	ldr	r2, [pc, #404]	; (800dec4 <I2C_Slave_ISR_DMA+0x294>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d029      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a63      	ldr	r2, [pc, #396]	; (800dec8 <I2C_Slave_ISR_DMA+0x298>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d023      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a61      	ldr	r2, [pc, #388]	; (800decc <I2C_Slave_ISR_DMA+0x29c>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d01d      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a5f      	ldr	r2, [pc, #380]	; (800ded0 <I2C_Slave_ISR_DMA+0x2a0>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d017      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a5d      	ldr	r2, [pc, #372]	; (800ded4 <I2C_Slave_ISR_DMA+0x2a4>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d011      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a5b      	ldr	r2, [pc, #364]	; (800ded8 <I2C_Slave_ISR_DMA+0x2a8>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d00b      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a59      	ldr	r2, [pc, #356]	; (800dedc <I2C_Slave_ISR_DMA+0x2ac>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d005      	beq.n	800dd88 <I2C_Slave_ISR_DMA+0x158>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a57      	ldr	r2, [pc, #348]	; (800dee0 <I2C_Slave_ISR_DMA+0x2b0>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d109      	bne.n	800dd9c <I2C_Slave_ISR_DMA+0x16c>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	bf0c      	ite	eq
 800dd94:	2301      	moveq	r3, #1
 800dd96:	2300      	movne	r3, #0
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	e008      	b.n	800ddae <I2C_Slave_ISR_DMA+0x17e>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bf0c      	ite	eq
 800dda8:	2301      	moveq	r3, #1
 800ddaa:	2300      	movne	r3, #0
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 809f 	beq.w	800defe <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	0b9b      	lsrs	r3, r3, #14
 800ddc4:	f003 0301 	and.w	r3, r3, #1
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 8098 	beq.w	800defe <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a33      	ldr	r2, [pc, #204]	; (800dea4 <I2C_Slave_ISR_DMA+0x274>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d059      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a31      	ldr	r2, [pc, #196]	; (800dea8 <I2C_Slave_ISR_DMA+0x278>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d053      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a2f      	ldr	r2, [pc, #188]	; (800deac <I2C_Slave_ISR_DMA+0x27c>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d04d      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a2d      	ldr	r2, [pc, #180]	; (800deb0 <I2C_Slave_ISR_DMA+0x280>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d047      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a2b      	ldr	r2, [pc, #172]	; (800deb4 <I2C_Slave_ISR_DMA+0x284>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d041      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a29      	ldr	r2, [pc, #164]	; (800deb8 <I2C_Slave_ISR_DMA+0x288>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d03b      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a27      	ldr	r2, [pc, #156]	; (800debc <I2C_Slave_ISR_DMA+0x28c>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d035      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a25      	ldr	r2, [pc, #148]	; (800dec0 <I2C_Slave_ISR_DMA+0x290>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d02f      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a23      	ldr	r2, [pc, #140]	; (800dec4 <I2C_Slave_ISR_DMA+0x294>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d029      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a21      	ldr	r2, [pc, #132]	; (800dec8 <I2C_Slave_ISR_DMA+0x298>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d023      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a1f      	ldr	r2, [pc, #124]	; (800decc <I2C_Slave_ISR_DMA+0x29c>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d01d      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a1d      	ldr	r2, [pc, #116]	; (800ded0 <I2C_Slave_ISR_DMA+0x2a0>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d017      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a1b      	ldr	r2, [pc, #108]	; (800ded4 <I2C_Slave_ISR_DMA+0x2a4>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d011      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a19      	ldr	r2, [pc, #100]	; (800ded8 <I2C_Slave_ISR_DMA+0x2a8>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00b      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a17      	ldr	r2, [pc, #92]	; (800dedc <I2C_Slave_ISR_DMA+0x2ac>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d005      	beq.n	800de8e <I2C_Slave_ISR_DMA+0x25e>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a15      	ldr	r2, [pc, #84]	; (800dee0 <I2C_Slave_ISR_DMA+0x2b0>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d12a      	bne.n	800dee4 <I2C_Slave_ISR_DMA+0x2b4>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	bf0c      	ite	eq
 800de9a:	2301      	moveq	r3, #1
 800de9c:	2300      	movne	r3, #0
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	e029      	b.n	800def6 <I2C_Slave_ISR_DMA+0x2c6>
 800dea2:	bf00      	nop
 800dea4:	40020010 	.word	0x40020010
 800dea8:	40020028 	.word	0x40020028
 800deac:	40020040 	.word	0x40020040
 800deb0:	40020058 	.word	0x40020058
 800deb4:	40020070 	.word	0x40020070
 800deb8:	40020088 	.word	0x40020088
 800debc:	400200a0 	.word	0x400200a0
 800dec0:	400200b8 	.word	0x400200b8
 800dec4:	40020410 	.word	0x40020410
 800dec8:	40020428 	.word	0x40020428
 800decc:	40020440 	.word	0x40020440
 800ded0:	40020458 	.word	0x40020458
 800ded4:	40020470 	.word	0x40020470
 800ded8:	40020488 	.word	0x40020488
 800dedc:	400204a0 	.word	0x400204a0
 800dee0:	400204b8 	.word	0x400204b8
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	bf0c      	ite	eq
 800def0:	2301      	moveq	r3, #1
 800def2:	2300      	movne	r3, #0
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800defa:	2301      	movs	r3, #1
 800defc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d128      	bne.n	800df56 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b28      	cmp	r3, #40	; 0x28
 800df0e:	d108      	bne.n	800df22 <I2C_Slave_ISR_DMA+0x2f2>
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df16:	d104      	bne.n	800df22 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800df18:	68b9      	ldr	r1, [r7, #8]
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f000 fcb0 	bl	800e880 <I2C_ITListenCplt>
 800df20:	e048      	b.n	800dfb4 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b29      	cmp	r3, #41	; 0x29
 800df2c:	d10e      	bne.n	800df4c <I2C_Slave_ISR_DMA+0x31c>
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800df34:	d00a      	beq.n	800df4c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2210      	movs	r2, #16
 800df3c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fe0b 	bl	800eb5a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f918 	bl	800e17a <I2C_ITSlaveSeqCplt>
 800df4a:	e033      	b.n	800dfb4 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2210      	movs	r2, #16
 800df52:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800df54:	e034      	b.n	800dfc0 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2210      	movs	r2, #16
 800df5c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df62:	f043 0204 	orr.w	r2, r3, #4
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df70:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <I2C_Slave_ISR_DMA+0x350>
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df7e:	d11f      	bne.n	800dfc0 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	2b21      	cmp	r3, #33	; 0x21
 800df84:	d002      	beq.n	800df8c <I2C_Slave_ISR_DMA+0x35c>
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	2b29      	cmp	r3, #41	; 0x29
 800df8a:	d103      	bne.n	800df94 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2221      	movs	r2, #33	; 0x21
 800df90:	631a      	str	r2, [r3, #48]	; 0x30
 800df92:	e008      	b.n	800dfa6 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800df94:	7dfb      	ldrb	r3, [r7, #23]
 800df96:	2b22      	cmp	r3, #34	; 0x22
 800df98:	d002      	beq.n	800dfa0 <I2C_Slave_ISR_DMA+0x370>
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	2b2a      	cmp	r3, #42	; 0x2a
 800df9e:	d102      	bne.n	800dfa6 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2222      	movs	r2, #34	; 0x22
 800dfa4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfaa:	4619      	mov	r1, r3
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 fcbd 	bl	800e92c <I2C_ITError>
      if (treatdmanack == 1U)
 800dfb2:	e005      	b.n	800dfc0 <I2C_Slave_ISR_DMA+0x390>
 800dfb4:	e004      	b.n	800dfc0 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2210      	movs	r2, #16
 800dfbc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800dfbe:	e011      	b.n	800dfe4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800dfc0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800dfc2:	e00f      	b.n	800dfe4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	08db      	lsrs	r3, r3, #3
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d009      	beq.n	800dfe4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	08db      	lsrs	r3, r3, #3
 800dfd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800dfdc:	68b9      	ldr	r1, [r7, #8]
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f80a 	bl	800dff8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3720      	adds	r7, #32
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop

0800dff8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e00e:	2b28      	cmp	r3, #40	; 0x28
 800e010:	d16a      	bne.n	800e0e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	0c1b      	lsrs	r3, r3, #16
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	f003 0301 	and.w	r3, r3, #1
 800e020:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	0c1b      	lsrs	r3, r3, #16
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e030:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e03e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	b29b      	uxth	r3, r3
 800e048:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e04c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d138      	bne.n	800e0c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e056:	897b      	ldrh	r3, [r7, #10]
 800e058:	09db      	lsrs	r3, r3, #7
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	89bb      	ldrh	r3, [r7, #12]
 800e05e:	4053      	eors	r3, r2
 800e060:	b29b      	uxth	r3, r3
 800e062:	f003 0306 	and.w	r3, r3, #6
 800e066:	2b00      	cmp	r3, #0
 800e068:	d11c      	bne.n	800e0a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800e06a:	897b      	ldrh	r3, [r7, #10]
 800e06c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d13b      	bne.n	800e0f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2208      	movs	r2, #8
 800e08c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e096:	89ba      	ldrh	r2, [r7, #12]
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff f91e 	bl	800d2de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e0a2:	e029      	b.n	800e0f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800e0a4:	893b      	ldrh	r3, [r7, #8]
 800e0a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e0a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f001 f81d 	bl	800f0ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e0ba:	89ba      	ldrh	r2, [r7, #12]
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff f90c 	bl	800d2de <HAL_I2C_AddrCallback>
}
 800e0c6:	e017      	b.n	800e0f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e0c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f001 f80d 	bl	800f0ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e0da:	89ba      	ldrh	r2, [r7, #12]
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff f8fc 	bl	800d2de <HAL_I2C_AddrCallback>
}
 800e0e6:	e007      	b.n	800e0f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2208      	movs	r2, #8
 800e0ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800e0f8:	bf00      	nop
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b21      	cmp	r3, #33	; 0x21
 800e11a:	d115      	bne.n	800e148 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2220      	movs	r2, #32
 800e120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2211      	movs	r2, #17
 800e128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e130:	2101      	movs	r1, #1
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 ffda 	bl	800f0ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7ff f8a4 	bl	800d28e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e146:	e014      	b.n	800e172 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2220      	movs	r2, #32
 800e14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2212      	movs	r2, #18
 800e154:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e15c:	2102      	movs	r1, #2
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 ffc4 	bl	800f0ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff f898 	bl	800d2a2 <HAL_I2C_MasterRxCpltCallback>
}
 800e172:	bf00      	nop
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	0b9b      	lsrs	r3, r3, #14
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d008      	beq.n	800e1b0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e00d      	b.n	800e1cc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	0bdb      	lsrs	r3, r3, #15
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b29      	cmp	r3, #41	; 0x29
 800e1d6:	d112      	bne.n	800e1fe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2228      	movs	r2, #40	; 0x28
 800e1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2221      	movs	r2, #33	; 0x21
 800e1e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 ff7f 	bl	800f0ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff f85d 	bl	800d2b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e1fc:	e017      	b.n	800e22e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b2a      	cmp	r3, #42	; 0x2a
 800e208:	d111      	bne.n	800e22e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2228      	movs	r2, #40	; 0x28
 800e20e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2222      	movs	r2, #34	; 0x22
 800e216:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e218:	2102      	movs	r1, #2
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 ff66 	bl	800f0ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff f84e 	bl	800d2ca <HAL_I2C_SlaveRxCpltCallback>
}
 800e22e:	bf00      	nop
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2220      	movs	r2, #32
 800e24c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b21      	cmp	r3, #33	; 0x21
 800e258:	d107      	bne.n	800e26a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e25a:	2101      	movs	r1, #1
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 ff45 	bl	800f0ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2211      	movs	r2, #17
 800e266:	631a      	str	r2, [r3, #48]	; 0x30
 800e268:	e00c      	b.n	800e284 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b22      	cmp	r3, #34	; 0x22
 800e274:	d106      	bne.n	800e284 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e276:	2102      	movs	r1, #2
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 ff37 	bl	800f0ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2212      	movs	r2, #18
 800e282:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6859      	ldr	r1, [r3, #4]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4b4d      	ldr	r3, [pc, #308]	; (800e3c4 <I2C_ITMasterCplt+0x18c>)
 800e290:	400b      	ands	r3, r1
 800e292:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a4a      	ldr	r2, [pc, #296]	; (800e3c8 <I2C_ITMasterCplt+0x190>)
 800e29e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	091b      	lsrs	r3, r3, #4
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d009      	beq.n	800e2c0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2210      	movs	r2, #16
 800e2b2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b8:	f043 0204 	orr.w	r2, r3, #4
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b60      	cmp	r3, #96	; 0x60
 800e2ca:	d10b      	bne.n	800e2e4 <I2C_ITMasterCplt+0xac>
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	089b      	lsrs	r3, r3, #2
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d005      	beq.n	800e2e4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fc38 	bl	800eb5a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b60      	cmp	r3, #96	; 0x60
 800e2fa:	d002      	beq.n	800e302 <I2C_ITMasterCplt+0xca>
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d006      	beq.n	800e310 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fb0f 	bl	800e92c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e30e:	e054      	b.n	800e3ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b21      	cmp	r3, #33	; 0x21
 800e31a:	d124      	bne.n	800e366 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2220      	movs	r2, #32
 800e320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b40      	cmp	r3, #64	; 0x40
 800e334:	d10b      	bne.n	800e34e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7fe ffe1 	bl	800d30e <HAL_I2C_MemTxCpltCallback>
}
 800e34c:	e035      	b.n	800e3ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7fe ff95 	bl	800d28e <HAL_I2C_MasterTxCpltCallback>
}
 800e364:	e029      	b.n	800e3ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b22      	cmp	r3, #34	; 0x22
 800e370:	d123      	bne.n	800e3ba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2220      	movs	r2, #32
 800e376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b40      	cmp	r3, #64	; 0x40
 800e38a:	d10b      	bne.n	800e3a4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7fe ffc0 	bl	800d322 <HAL_I2C_MemRxCpltCallback>
}
 800e3a2:	e00a      	b.n	800e3ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7fe ff74 	bl	800d2a2 <HAL_I2C_MasterRxCpltCallback>
}
 800e3ba:	bf00      	nop
 800e3bc:	3718      	adds	r7, #24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	fe00e800 	.word	0xfe00e800
 800e3c8:	ffff0000 	.word	0xffff0000

0800e3cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2220      	movs	r2, #32
 800e3f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e3f8:	7afb      	ldrb	r3, [r7, #11]
 800e3fa:	2b21      	cmp	r3, #33	; 0x21
 800e3fc:	d002      	beq.n	800e404 <I2C_ITSlaveCplt+0x38>
 800e3fe:	7afb      	ldrb	r3, [r7, #11]
 800e400:	2b29      	cmp	r3, #41	; 0x29
 800e402:	d108      	bne.n	800e416 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e404:	f248 0101 	movw	r1, #32769	; 0x8001
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 fe6f 	bl	800f0ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2221      	movs	r2, #33	; 0x21
 800e412:	631a      	str	r2, [r3, #48]	; 0x30
 800e414:	e019      	b.n	800e44a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e416:	7afb      	ldrb	r3, [r7, #11]
 800e418:	2b22      	cmp	r3, #34	; 0x22
 800e41a:	d002      	beq.n	800e422 <I2C_ITSlaveCplt+0x56>
 800e41c:	7afb      	ldrb	r3, [r7, #11]
 800e41e:	2b2a      	cmp	r3, #42	; 0x2a
 800e420:	d108      	bne.n	800e434 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e422:	f248 0102 	movw	r1, #32770	; 0x8002
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fe60 	bl	800f0ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2222      	movs	r2, #34	; 0x22
 800e430:	631a      	str	r2, [r3, #48]	; 0x30
 800e432:	e00a      	b.n	800e44a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800e434:	7afb      	ldrb	r3, [r7, #11]
 800e436:	2b28      	cmp	r3, #40	; 0x28
 800e438:	d107      	bne.n	800e44a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800e43a:	f248 0103 	movw	r1, #32771	; 0x8003
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fe54 	bl	800f0ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e458:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6859      	ldr	r1, [r3, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	4b80      	ldr	r3, [pc, #512]	; (800e668 <I2C_ITSlaveCplt+0x29c>)
 800e466:	400b      	ands	r3, r1
 800e468:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fb75 	bl	800eb5a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	0b9b      	lsrs	r3, r3, #14
 800e474:	f003 0301 	and.w	r3, r3, #1
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d07a      	beq.n	800e572 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e48a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 8112 	beq.w	800e6ba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a73      	ldr	r2, [pc, #460]	; (800e66c <I2C_ITSlaveCplt+0x2a0>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d059      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a71      	ldr	r2, [pc, #452]	; (800e670 <I2C_ITSlaveCplt+0x2a4>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d053      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a6f      	ldr	r2, [pc, #444]	; (800e674 <I2C_ITSlaveCplt+0x2a8>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d04d      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a6d      	ldr	r2, [pc, #436]	; (800e678 <I2C_ITSlaveCplt+0x2ac>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d047      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a6b      	ldr	r2, [pc, #428]	; (800e67c <I2C_ITSlaveCplt+0x2b0>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d041      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a69      	ldr	r2, [pc, #420]	; (800e680 <I2C_ITSlaveCplt+0x2b4>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d03b      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a67      	ldr	r2, [pc, #412]	; (800e684 <I2C_ITSlaveCplt+0x2b8>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d035      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a65      	ldr	r2, [pc, #404]	; (800e688 <I2C_ITSlaveCplt+0x2bc>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d02f      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a63      	ldr	r2, [pc, #396]	; (800e68c <I2C_ITSlaveCplt+0x2c0>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d029      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a61      	ldr	r2, [pc, #388]	; (800e690 <I2C_ITSlaveCplt+0x2c4>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d023      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a5f      	ldr	r2, [pc, #380]	; (800e694 <I2C_ITSlaveCplt+0x2c8>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d01d      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a5d      	ldr	r2, [pc, #372]	; (800e698 <I2C_ITSlaveCplt+0x2cc>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d017      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a5b      	ldr	r2, [pc, #364]	; (800e69c <I2C_ITSlaveCplt+0x2d0>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d011      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a59      	ldr	r2, [pc, #356]	; (800e6a0 <I2C_ITSlaveCplt+0x2d4>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00b      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a57      	ldr	r2, [pc, #348]	; (800e6a4 <I2C_ITSlaveCplt+0x2d8>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d005      	beq.n	800e556 <I2C_ITSlaveCplt+0x18a>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a55      	ldr	r2, [pc, #340]	; (800e6a8 <I2C_ITSlaveCplt+0x2dc>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d105      	bne.n	800e562 <I2C_ITSlaveCplt+0x196>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	e004      	b.n	800e56c <I2C_ITSlaveCplt+0x1a0>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800e570:	e0a3      	b.n	800e6ba <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	0bdb      	lsrs	r3, r3, #15
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 809d 	beq.w	800e6ba <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e58e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 8090 	beq.w	800e6ba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a32      	ldr	r2, [pc, #200]	; (800e66c <I2C_ITSlaveCplt+0x2a0>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d059      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a30      	ldr	r2, [pc, #192]	; (800e670 <I2C_ITSlaveCplt+0x2a4>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d053      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a2e      	ldr	r2, [pc, #184]	; (800e674 <I2C_ITSlaveCplt+0x2a8>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d04d      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a2c      	ldr	r2, [pc, #176]	; (800e678 <I2C_ITSlaveCplt+0x2ac>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d047      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a2a      	ldr	r2, [pc, #168]	; (800e67c <I2C_ITSlaveCplt+0x2b0>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d041      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a28      	ldr	r2, [pc, #160]	; (800e680 <I2C_ITSlaveCplt+0x2b4>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d03b      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a26      	ldr	r2, [pc, #152]	; (800e684 <I2C_ITSlaveCplt+0x2b8>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d035      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a24      	ldr	r2, [pc, #144]	; (800e688 <I2C_ITSlaveCplt+0x2bc>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d02f      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a22      	ldr	r2, [pc, #136]	; (800e68c <I2C_ITSlaveCplt+0x2c0>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d029      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a20      	ldr	r2, [pc, #128]	; (800e690 <I2C_ITSlaveCplt+0x2c4>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d023      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a1e      	ldr	r2, [pc, #120]	; (800e694 <I2C_ITSlaveCplt+0x2c8>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d01d      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a1c      	ldr	r2, [pc, #112]	; (800e698 <I2C_ITSlaveCplt+0x2cc>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d017      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a1a      	ldr	r2, [pc, #104]	; (800e69c <I2C_ITSlaveCplt+0x2d0>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d011      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a18      	ldr	r2, [pc, #96]	; (800e6a0 <I2C_ITSlaveCplt+0x2d4>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d00b      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a16      	ldr	r2, [pc, #88]	; (800e6a4 <I2C_ITSlaveCplt+0x2d8>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d005      	beq.n	800e65a <I2C_ITSlaveCplt+0x28e>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a14      	ldr	r2, [pc, #80]	; (800e6a8 <I2C_ITSlaveCplt+0x2dc>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d128      	bne.n	800e6ac <I2C_ITSlaveCplt+0x2e0>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	b29b      	uxth	r3, r3
 800e664:	e027      	b.n	800e6b6 <I2C_ITSlaveCplt+0x2ea>
 800e666:	bf00      	nop
 800e668:	fe00e800 	.word	0xfe00e800
 800e66c:	40020010 	.word	0x40020010
 800e670:	40020028 	.word	0x40020028
 800e674:	40020040 	.word	0x40020040
 800e678:	40020058 	.word	0x40020058
 800e67c:	40020070 	.word	0x40020070
 800e680:	40020088 	.word	0x40020088
 800e684:	400200a0 	.word	0x400200a0
 800e688:	400200b8 	.word	0x400200b8
 800e68c:	40020410 	.word	0x40020410
 800e690:	40020428 	.word	0x40020428
 800e694:	40020440 	.word	0x40020440
 800e698:	40020458 	.word	0x40020458
 800e69c:	40020470 	.word	0x40020470
 800e6a0:	40020488 	.word	0x40020488
 800e6a4:	400204a0 	.word	0x400204a0
 800e6a8:	400204b8 	.word	0x400204b8
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	089b      	lsrs	r3, r3, #2
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d020      	beq.n	800e708 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f023 0304 	bic.w	r3, r3, #4
 800e6cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	b2d2      	uxtb	r2, r2
 800e6da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00c      	beq.n	800e708 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	3b01      	subs	r3, #1
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d005      	beq.n	800e71e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e716:	f043 0204 	orr.w	r2, r3, #4
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	091b      	lsrs	r3, r3, #4
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	d04a      	beq.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	091b      	lsrs	r3, r3, #4
 800e72e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e732:	2b00      	cmp	r3, #0
 800e734:	d044      	beq.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d128      	bne.n	800e792 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b28      	cmp	r3, #40	; 0x28
 800e74a:	d108      	bne.n	800e75e <I2C_ITSlaveCplt+0x392>
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e752:	d104      	bne.n	800e75e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e754:	6979      	ldr	r1, [r7, #20]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f892 	bl	800e880 <I2C_ITListenCplt>
 800e75c:	e030      	b.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b29      	cmp	r3, #41	; 0x29
 800e768:	d10e      	bne.n	800e788 <I2C_ITSlaveCplt+0x3bc>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e770:	d00a      	beq.n	800e788 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2210      	movs	r2, #16
 800e778:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 f9ed 	bl	800eb5a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fcfa 	bl	800e17a <I2C_ITSlaveSeqCplt>
 800e786:	e01b      	b.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2210      	movs	r2, #16
 800e78e:	61da      	str	r2, [r3, #28]
 800e790:	e016      	b.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2210      	movs	r2, #16
 800e798:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e79e:	f043 0204 	orr.w	r2, r3, #4
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <I2C_ITSlaveCplt+0x3e8>
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e7b2:	d105      	bne.n	800e7c0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f8b6 	bl	800e92c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d010      	beq.n	800e7f8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7da:	4619      	mov	r1, r3
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f8a5 	bl	800e92c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b28      	cmp	r3, #40	; 0x28
 800e7ec:	d141      	bne.n	800e872 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e7ee:	6979      	ldr	r1, [r7, #20]
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f845 	bl	800e880 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e7f6:	e03c      	b.n	800e872 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e800:	d014      	beq.n	800e82c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fcb9 	bl	800e17a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a1c      	ldr	r2, [pc, #112]	; (800e87c <I2C_ITSlaveCplt+0x4b0>)
 800e80c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2220      	movs	r2, #32
 800e812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7fe fd68 	bl	800d2fa <HAL_I2C_ListenCpltCallback>
}
 800e82a:	e022      	b.n	800e872 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b22      	cmp	r3, #34	; 0x22
 800e836:	d10e      	bne.n	800e856 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2220      	movs	r2, #32
 800e83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7fe fd3b 	bl	800d2ca <HAL_I2C_SlaveRxCpltCallback>
}
 800e854:	e00d      	b.n	800e872 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2220      	movs	r2, #32
 800e85a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe fd22 	bl	800d2b6 <HAL_I2C_SlaveTxCpltCallback>
}
 800e872:	bf00      	nop
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	ffff0000 	.word	0xffff0000

0800e880 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a26      	ldr	r2, [pc, #152]	; (800e928 <I2C_ITListenCplt+0xa8>)
 800e88e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2220      	movs	r2, #32
 800e89a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	089b      	lsrs	r3, r3, #2
 800e8b0:	f003 0301 	and.w	r3, r3, #1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d022      	beq.n	800e8fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c2:	b2d2      	uxtb	r2, r2
 800e8c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ca:	1c5a      	adds	r2, r3, #1
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d012      	beq.n	800e8fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f6:	f043 0204 	orr.w	r2, r3, #4
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e8fe:	f248 0103 	movw	r1, #32771	; 0x8003
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fbf2 	bl	800f0ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2210      	movs	r2, #16
 800e90e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7fe fcee 	bl	800d2fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e91e:	bf00      	nop
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	ffff0000 	.word	0xffff0000

0800e92c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e93c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a6d      	ldr	r2, [pc, #436]	; (800eb00 <I2C_ITError+0x1d4>)
 800e94a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	431a      	orrs	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	2b28      	cmp	r3, #40	; 0x28
 800e962:	d005      	beq.n	800e970 <I2C_ITError+0x44>
 800e964:	7bfb      	ldrb	r3, [r7, #15]
 800e966:	2b29      	cmp	r3, #41	; 0x29
 800e968:	d002      	beq.n	800e970 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	2b2a      	cmp	r3, #42	; 0x2a
 800e96e:	d10b      	bne.n	800e988 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e970:	2103      	movs	r1, #3
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fbba 	bl	800f0ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2228      	movs	r2, #40	; 0x28
 800e97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4a60      	ldr	r2, [pc, #384]	; (800eb04 <I2C_ITError+0x1d8>)
 800e984:	635a      	str	r2, [r3, #52]	; 0x34
 800e986:	e030      	b.n	800e9ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e988:	f248 0103 	movw	r1, #32771	; 0x8003
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fbad 	bl	800f0ec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 f8e1 	bl	800eb5a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b60      	cmp	r3, #96	; 0x60
 800e9a2:	d01f      	beq.n	800e9e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	f003 0320 	and.w	r3, r3, #32
 800e9b6:	2b20      	cmp	r3, #32
 800e9b8:	d114      	bne.n	800e9e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	f003 0310 	and.w	r3, r3, #16
 800e9c4:	2b10      	cmp	r3, #16
 800e9c6:	d109      	bne.n	800e9dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2210      	movs	r2, #16
 800e9ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d4:	f043 0204 	orr.w	r2, r3, #4
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2220      	movs	r2, #32
 800e9e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d039      	beq.n	800ea6c <I2C_ITError+0x140>
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b11      	cmp	r3, #17
 800e9fc:	d002      	beq.n	800ea04 <I2C_ITError+0xd8>
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b21      	cmp	r3, #33	; 0x21
 800ea02:	d133      	bne.n	800ea6c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea12:	d107      	bne.n	800ea24 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ea22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fc fd57 	bl	800b4dc <HAL_DMA_GetState>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d017      	beq.n	800ea64 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea38:	4a33      	ldr	r2, [pc, #204]	; (800eb08 <I2C_ITError+0x1dc>)
 800ea3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fb fbd7 	bl	800a1fc <HAL_DMA_Abort_IT>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d04d      	beq.n	800eaf0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ea5e:	4610      	mov	r0, r2
 800ea60:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ea62:	e045      	b.n	800eaf0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f851 	bl	800eb0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ea6a:	e041      	b.n	800eaf0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d039      	beq.n	800eae8 <I2C_ITError+0x1bc>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2b12      	cmp	r3, #18
 800ea78:	d002      	beq.n	800ea80 <I2C_ITError+0x154>
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2b22      	cmp	r3, #34	; 0x22
 800ea7e:	d133      	bne.n	800eae8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea8e:	d107      	bne.n	800eaa0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fc fd19 	bl	800b4dc <HAL_DMA_GetState>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d017      	beq.n	800eae0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab4:	4a14      	ldr	r2, [pc, #80]	; (800eb08 <I2C_ITError+0x1dc>)
 800eab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fb fb99 	bl	800a1fc <HAL_DMA_Abort_IT>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d011      	beq.n	800eaf4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800eada:	4610      	mov	r0, r2
 800eadc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eade:	e009      	b.n	800eaf4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 f813 	bl	800eb0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eae6:	e005      	b.n	800eaf4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 f80f 	bl	800eb0c <I2C_TreatErrorCallback>
  }
}
 800eaee:	e002      	b.n	800eaf6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800eaf4:	bf00      	nop
}
 800eaf6:	bf00      	nop
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	ffff0000 	.word	0xffff0000
 800eb04:	0800d5e3 	.word	0x0800d5e3
 800eb08:	0800ef45 	.word	0x0800ef45

0800eb0c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b60      	cmp	r3, #96	; 0x60
 800eb1e:	d10e      	bne.n	800eb3e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2220      	movs	r2, #32
 800eb24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fe fc07 	bl	800d34a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800eb3c:	e009      	b.n	800eb52 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7fe fbf2 	bl	800d336 <HAL_I2C_ErrorCallback>
}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d103      	bne.n	800eb78 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2200      	movs	r2, #0
 800eb76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d007      	beq.n	800eb96 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	699a      	ldr	r2, [r3, #24]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f042 0201 	orr.w	r2, r2, #1
 800eb94:	619a      	str	r2, [r3, #24]
  }
}
 800eb96:	bf00      	nop
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b084      	sub	sp, #16
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ebbe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d104      	bne.n	800ebd4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ebca:	2120      	movs	r1, #32
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	f000 fa09 	bl	800efe4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ebd2:	e02d      	b.n	800ec30 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ebdc:	441a      	add	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	2bff      	cmp	r3, #255	; 0xff
 800ebea:	d903      	bls.n	800ebf4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	22ff      	movs	r2, #255	; 0xff
 800ebf0:	851a      	strh	r2, [r3, #40]	; 0x28
 800ebf2:	e004      	b.n	800ebfe <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec06:	4619      	mov	r1, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3328      	adds	r3, #40	; 0x28
 800ec0e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ec14:	f7fa fd6a 	bl	80096ec <HAL_DMA_Start_IT>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d004      	beq.n	800ec28 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ec1e:	2110      	movs	r1, #16
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff fe83 	bl	800e92c <I2C_ITError>
}
 800ec26:	e003      	b.n	800ec30 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ec28:	2140      	movs	r1, #64	; 0x40
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f000 f9da 	bl	800efe4 <I2C_Enable_IRQ>
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec44:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec54:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d104      	bne.n	800ec6a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ec60:	2120      	movs	r1, #32
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f000 f9be 	bl	800efe4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ec68:	e02d      	b.n	800ecc6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec72:	441a      	add	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	2bff      	cmp	r3, #255	; 0xff
 800ec80:	d903      	bls.n	800ec8a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	22ff      	movs	r2, #255	; 0xff
 800ec86:	851a      	strh	r2, [r3, #40]	; 0x28
 800ec88:	e004      	b.n	800ec94 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3324      	adds	r3, #36	; 0x24
 800ec9e:	4619      	mov	r1, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ecaa:	f7fa fd1f 	bl	80096ec <HAL_DMA_Start_IT>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d004      	beq.n	800ecbe <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ecb4:	2110      	movs	r1, #16
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fe38 	bl	800e92c <I2C_ITError>
}
 800ecbc:	e003      	b.n	800ecc6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ecbe:	2140      	movs	r1, #64	; 0x40
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f000 f98f 	bl	800efe4 <I2C_Enable_IRQ>
}
 800ecc6:	bf00      	nop
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d076      	beq.n	800edd8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a71      	ldr	r2, [pc, #452]	; (800eeb8 <I2C_DMAError+0x1e8>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d059      	beq.n	800edaa <I2C_DMAError+0xda>
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a6f      	ldr	r2, [pc, #444]	; (800eebc <I2C_DMAError+0x1ec>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d053      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a6d      	ldr	r2, [pc, #436]	; (800eec0 <I2C_DMAError+0x1f0>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d04d      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a6b      	ldr	r2, [pc, #428]	; (800eec4 <I2C_DMAError+0x1f4>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d047      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a69      	ldr	r2, [pc, #420]	; (800eec8 <I2C_DMAError+0x1f8>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d041      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a67      	ldr	r2, [pc, #412]	; (800eecc <I2C_DMAError+0x1fc>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d03b      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a65      	ldr	r2, [pc, #404]	; (800eed0 <I2C_DMAError+0x200>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d035      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a63      	ldr	r2, [pc, #396]	; (800eed4 <I2C_DMAError+0x204>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d02f      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a61      	ldr	r2, [pc, #388]	; (800eed8 <I2C_DMAError+0x208>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d029      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a5f      	ldr	r2, [pc, #380]	; (800eedc <I2C_DMAError+0x20c>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d023      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a5d      	ldr	r2, [pc, #372]	; (800eee0 <I2C_DMAError+0x210>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d01d      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a5b      	ldr	r2, [pc, #364]	; (800eee4 <I2C_DMAError+0x214>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d017      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a59      	ldr	r2, [pc, #356]	; (800eee8 <I2C_DMAError+0x218>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d011      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a57      	ldr	r2, [pc, #348]	; (800eeec <I2C_DMAError+0x21c>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d00b      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a55      	ldr	r2, [pc, #340]	; (800eef0 <I2C_DMAError+0x220>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d005      	beq.n	800edaa <I2C_DMAError+0xda>
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a53      	ldr	r2, [pc, #332]	; (800eef4 <I2C_DMAError+0x224>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d109      	bne.n	800edbe <I2C_DMAError+0xee>
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bf0c      	ite	eq
 800edb6:	2301      	moveq	r3, #1
 800edb8:	2300      	movne	r3, #0
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	e008      	b.n	800edd0 <I2C_DMAError+0x100>
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	bf0c      	ite	eq
 800edca:	2301      	moveq	r3, #1
 800edcc:	2300      	movne	r3, #0
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800edd4:	2301      	movs	r3, #1
 800edd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 8098 	beq.w	800ef12 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a33      	ldr	r2, [pc, #204]	; (800eeb8 <I2C_DMAError+0x1e8>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d059      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a31      	ldr	r2, [pc, #196]	; (800eebc <I2C_DMAError+0x1ec>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d053      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a2f      	ldr	r2, [pc, #188]	; (800eec0 <I2C_DMAError+0x1f0>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d04d      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a2d      	ldr	r2, [pc, #180]	; (800eec4 <I2C_DMAError+0x1f4>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d047      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a2b      	ldr	r2, [pc, #172]	; (800eec8 <I2C_DMAError+0x1f8>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d041      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a29      	ldr	r2, [pc, #164]	; (800eecc <I2C_DMAError+0x1fc>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d03b      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a27      	ldr	r2, [pc, #156]	; (800eed0 <I2C_DMAError+0x200>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d035      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a25      	ldr	r2, [pc, #148]	; (800eed4 <I2C_DMAError+0x204>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d02f      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a23      	ldr	r2, [pc, #140]	; (800eed8 <I2C_DMAError+0x208>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d029      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a21      	ldr	r2, [pc, #132]	; (800eedc <I2C_DMAError+0x20c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d023      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a1f      	ldr	r2, [pc, #124]	; (800eee0 <I2C_DMAError+0x210>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d01d      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a1d      	ldr	r2, [pc, #116]	; (800eee4 <I2C_DMAError+0x214>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d017      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a1b      	ldr	r2, [pc, #108]	; (800eee8 <I2C_DMAError+0x218>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d011      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a19      	ldr	r2, [pc, #100]	; (800eeec <I2C_DMAError+0x21c>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d00b      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a17      	ldr	r2, [pc, #92]	; (800eef0 <I2C_DMAError+0x220>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d005      	beq.n	800eea2 <I2C_DMAError+0x1d2>
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a15      	ldr	r2, [pc, #84]	; (800eef4 <I2C_DMAError+0x224>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d12a      	bne.n	800eef8 <I2C_DMAError+0x228>
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	bf0c      	ite	eq
 800eeae:	2301      	moveq	r3, #1
 800eeb0:	2300      	movne	r3, #0
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	e029      	b.n	800ef0a <I2C_DMAError+0x23a>
 800eeb6:	bf00      	nop
 800eeb8:	40020010 	.word	0x40020010
 800eebc:	40020028 	.word	0x40020028
 800eec0:	40020040 	.word	0x40020040
 800eec4:	40020058 	.word	0x40020058
 800eec8:	40020070 	.word	0x40020070
 800eecc:	40020088 	.word	0x40020088
 800eed0:	400200a0 	.word	0x400200a0
 800eed4:	400200b8 	.word	0x400200b8
 800eed8:	40020410 	.word	0x40020410
 800eedc:	40020428 	.word	0x40020428
 800eee0:	40020440 	.word	0x40020440
 800eee4:	40020458 	.word	0x40020458
 800eee8:	40020470 	.word	0x40020470
 800eeec:	40020488 	.word	0x40020488
 800eef0:	400204a0 	.word	0x400204a0
 800eef4:	400204b8 	.word	0x400204b8
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bf0c      	ite	eq
 800ef04:	2301      	moveq	r3, #1
 800ef06:	2300      	movne	r3, #0
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7fc faf0 	bl	800b4f8 <HAL_DMA_GetError>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d00e      	beq.n	800ef3c <I2C_DMAError+0x26c>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00b      	beq.n	800ef3c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	685a      	ldr	r2, [r3, #4]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef32:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ef34:	2110      	movs	r1, #16
 800ef36:	68b8      	ldr	r0, [r7, #8]
 800ef38:	f7ff fcf8 	bl	800e92c <I2C_ITError>
  }
}
 800ef3c:	bf00      	nop
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef50:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d003      	beq.n	800ef62 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef5e:	2200      	movs	r2, #0
 800ef60:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef6e:	2200      	movs	r2, #0
 800ef70:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ef72:	68f8      	ldr	r0, [r7, #12]
 800ef74:	f7ff fdca 	bl	800eb0c <I2C_TreatErrorCallback>
}
 800ef78:	bf00      	nop
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	607b      	str	r3, [r7, #4]
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	817b      	strh	r3, [r7, #10]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ef92:	897b      	ldrh	r3, [r7, #10]
 800ef94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ef98:	7a7b      	ldrb	r3, [r7, #9]
 800ef9a:	041b      	lsls	r3, r3, #16
 800ef9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800efa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	685a      	ldr	r2, [r3, #4]
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	0d5b      	lsrs	r3, r3, #21
 800efba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800efbe:	4b08      	ldr	r3, [pc, #32]	; (800efe0 <I2C_TransferConfig+0x60>)
 800efc0:	430b      	orrs	r3, r1
 800efc2:	43db      	mvns	r3, r3
 800efc4:	ea02 0103 	and.w	r1, r2, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	697a      	ldr	r2, [r7, #20]
 800efce:	430a      	orrs	r2, r1
 800efd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800efd2:	bf00      	nop
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	03ff63ff 	.word	0x03ff63ff

0800efe4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800eff0:	2300      	movs	r3, #0
 800eff2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff8:	4a39      	ldr	r2, [pc, #228]	; (800f0e0 <I2C_Enable_IRQ+0xfc>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d032      	beq.n	800f064 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f002:	4a38      	ldr	r2, [pc, #224]	; (800f0e4 <I2C_Enable_IRQ+0x100>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d02d      	beq.n	800f064 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f00c:	4a36      	ldr	r2, [pc, #216]	; (800f0e8 <I2C_Enable_IRQ+0x104>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d028      	beq.n	800f064 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f016:	2b00      	cmp	r3, #0
 800f018:	da03      	bge.n	800f022 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800f020:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f022:	887b      	ldrh	r3, [r7, #2]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d003      	beq.n	800f034 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800f032:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f034:	887b      	ldrh	r3, [r7, #2]
 800f036:	f003 0302 	and.w	r3, r3, #2
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800f044:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f046:	887b      	ldrh	r3, [r7, #2]
 800f048:	2b10      	cmp	r3, #16
 800f04a:	d103      	bne.n	800f054 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800f052:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f054:	887b      	ldrh	r3, [r7, #2]
 800f056:	2b20      	cmp	r3, #32
 800f058:	d133      	bne.n	800f0c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f043 0320 	orr.w	r3, r3, #32
 800f060:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f062:	e02e      	b.n	800f0c2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f064:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	da03      	bge.n	800f074 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800f072:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f074:	887b      	ldrh	r3, [r7, #2]
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800f084:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f086:	887b      	ldrh	r3, [r7, #2]
 800f088:	f003 0302 	and.w	r3, r3, #2
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800f096:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f098:	887b      	ldrh	r3, [r7, #2]
 800f09a:	2b10      	cmp	r3, #16
 800f09c:	d103      	bne.n	800f0a6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800f0a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f0a6:	887b      	ldrh	r3, [r7, #2]
 800f0a8:	2b20      	cmp	r3, #32
 800f0aa:	d103      	bne.n	800f0b4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f0b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f0b4:	887b      	ldrh	r3, [r7, #2]
 800f0b6:	2b40      	cmp	r3, #64	; 0x40
 800f0b8:	d103      	bne.n	800f0c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6819      	ldr	r1, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	601a      	str	r2, [r3, #0]
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	0800d7eb 	.word	0x0800d7eb
 800f0e4:	0800dc31 	.word	0x0800dc31
 800f0e8:	0800d9d1 	.word	0x0800d9d1

0800f0ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f0fc:	887b      	ldrh	r3, [r7, #2]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00f      	beq.n	800f126 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800f10c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f114:	b2db      	uxtb	r3, r3
 800f116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f11a:	2b28      	cmp	r3, #40	; 0x28
 800f11c:	d003      	beq.n	800f126 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800f124:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f126:	887b      	ldrh	r3, [r7, #2]
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00f      	beq.n	800f150 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800f136:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f144:	2b28      	cmp	r3, #40	; 0x28
 800f146:	d003      	beq.n	800f150 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800f14e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f154:	2b00      	cmp	r3, #0
 800f156:	da03      	bge.n	800f160 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800f15e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f160:	887b      	ldrh	r3, [r7, #2]
 800f162:	2b10      	cmp	r3, #16
 800f164:	d103      	bne.n	800f16e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800f16c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f16e:	887b      	ldrh	r3, [r7, #2]
 800f170:	2b20      	cmp	r3, #32
 800f172:	d103      	bne.n	800f17c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f043 0320 	orr.w	r3, r3, #32
 800f17a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f17c:	887b      	ldrh	r3, [r7, #2]
 800f17e:	2b40      	cmp	r3, #64	; 0x40
 800f180:	d103      	bne.n	800f18a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f188:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6819      	ldr	r1, [r3, #0]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	43da      	mvns	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	400a      	ands	r2, r1
 800f19a:	601a      	str	r2, [r3, #0]
}
 800f19c:	bf00      	nop
 800f19e:	3714      	adds	r7, #20
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d138      	bne.n	800f230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d101      	bne.n	800f1cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f1c8:	2302      	movs	r3, #2
 800f1ca:	e032      	b.n	800f232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2224      	movs	r2, #36	; 0x24
 800f1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f022 0201 	bic.w	r2, r2, #1
 800f1ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f1fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6819      	ldr	r1, [r3, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0201 	orr.w	r2, r2, #1
 800f21a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2220      	movs	r2, #32
 800f220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	e000      	b.n	800f232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f230:	2302      	movs	r3, #2
  }
}
 800f232:	4618      	mov	r0, r3
 800f234:	370c      	adds	r7, #12
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f23e:	b480      	push	{r7}
 800f240:	b085      	sub	sp, #20
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b20      	cmp	r3, #32
 800f252:	d139      	bne.n	800f2c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d101      	bne.n	800f262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f25e:	2302      	movs	r3, #2
 800f260:	e033      	b.n	800f2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2201      	movs	r2, #1
 800f266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2224      	movs	r2, #36	; 0x24
 800f26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f022 0201 	bic.w	r2, r2, #1
 800f280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	021b      	lsls	r3, r3, #8
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0201 	orr.w	r2, r2, #1
 800f2b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2220      	movs	r2, #32
 800f2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	e000      	b.n	800f2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f2c8:	2302      	movs	r3, #2
  }
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
	...

0800f2d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f2e0:	4b0d      	ldr	r3, [pc, #52]	; (800f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800f2e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f2e6:	4a0c      	ldr	r2, [pc, #48]	; (800f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800f2e8:	f043 0302 	orr.w	r3, r3, #2
 800f2ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f2f0:	4b09      	ldr	r3, [pc, #36]	; (800f318 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800f2f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800f2fe:	4b07      	ldr	r3, [pc, #28]	; (800f31c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800f300:	685a      	ldr	r2, [r3, #4]
 800f302:	4906      	ldr	r1, [pc, #24]	; (800f31c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4313      	orrs	r3, r2
 800f308:	604b      	str	r3, [r1, #4]
}
 800f30a:	bf00      	nop
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	58024400 	.word	0x58024400
 800f31c:	58000400 	.word	0x58000400

0800f320 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e041      	b.n	800f3b6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800f33a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f245 5255 	movw	r2, #21845	; 0x5555
 800f344:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	6852      	ldr	r2, [r2, #4]
 800f34e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	6892      	ldr	r2, [r2, #8]
 800f358:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800f35a:	f7f7 fb41 	bl	80069e0 <HAL_GetTick>
 800f35e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f360:	e00f      	b.n	800f382 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800f362:	f7f7 fb3d 	bl	80069e0 <HAL_GetTick>
 800f366:	4602      	mov	r2, r0
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	2b31      	cmp	r3, #49	; 0x31
 800f36e:	d908      	bls.n	800f382 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800f37e:	2303      	movs	r3, #3
 800f380:	e019      	b.n	800f3b6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	f003 0307 	and.w	r3, r3, #7
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1e8      	bne.n	800f362 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	691a      	ldr	r2, [r3, #16]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d005      	beq.n	800f3aa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	68d2      	ldr	r2, [r2, #12]
 800f3a6:	611a      	str	r2, [r3, #16]
 800f3a8:	e004      	b.n	800f3b4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800f3b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800f3ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
	...

0800f3e0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800f3ec:	4b18      	ldr	r3, [pc, #96]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f023 0201 	bic.w	r2, r3, #1
 800f3f4:	4916      	ldr	r1, [pc, #88]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800f3fc:	4b14      	ldr	r3, [pc, #80]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	4a13      	ldr	r2, [pc, #76]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f402:	f023 0305 	bic.w	r3, r3, #5
 800f406:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800f408:	4b11      	ldr	r3, [pc, #68]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	4a10      	ldr	r2, [pc, #64]	; (800f450 <HAL_PWR_EnterSTOPMode+0x70>)
 800f40e:	f023 0302 	bic.w	r3, r3, #2
 800f412:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800f414:	4b0f      	ldr	r3, [pc, #60]	; (800f454 <HAL_PWR_EnterSTOPMode+0x74>)
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	4a0e      	ldr	r2, [pc, #56]	; (800f454 <HAL_PWR_EnterSTOPMode+0x74>)
 800f41a:	f043 0304 	orr.w	r3, r3, #4
 800f41e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800f420:	f3bf 8f4f 	dsb	sy
}
 800f424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f426:	f3bf 8f6f 	isb	sy
}
 800f42a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800f42c:	78fb      	ldrb	r3, [r7, #3]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d101      	bne.n	800f436 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800f432:	bf30      	wfi
 800f434:	e000      	b.n	800f438 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800f436:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800f438:	4b06      	ldr	r3, [pc, #24]	; (800f454 <HAL_PWR_EnterSTOPMode+0x74>)
 800f43a:	691b      	ldr	r3, [r3, #16]
 800f43c:	4a05      	ldr	r2, [pc, #20]	; (800f454 <HAL_PWR_EnterSTOPMode+0x74>)
 800f43e:	f023 0304 	bic.w	r3, r3, #4
 800f442:	6113      	str	r3, [r2, #16]
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	58024800 	.word	0x58024800
 800f454:	e000ed00 	.word	0xe000ed00

0800f458 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800f460:	4b19      	ldr	r3, [pc, #100]	; (800f4c8 <HAL_PWREx_ConfigSupply+0x70>)
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	f003 0304 	and.w	r3, r3, #4
 800f468:	2b04      	cmp	r3, #4
 800f46a:	d00a      	beq.n	800f482 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f46c:	4b16      	ldr	r3, [pc, #88]	; (800f4c8 <HAL_PWREx_ConfigSupply+0x70>)
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	f003 0307 	and.w	r3, r3, #7
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	429a      	cmp	r2, r3
 800f478:	d001      	beq.n	800f47e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	e01f      	b.n	800f4be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	e01d      	b.n	800f4be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f482:	4b11      	ldr	r3, [pc, #68]	; (800f4c8 <HAL_PWREx_ConfigSupply+0x70>)
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	f023 0207 	bic.w	r2, r3, #7
 800f48a:	490f      	ldr	r1, [pc, #60]	; (800f4c8 <HAL_PWREx_ConfigSupply+0x70>)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4313      	orrs	r3, r2
 800f490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f492:	f7f7 faa5 	bl	80069e0 <HAL_GetTick>
 800f496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f498:	e009      	b.n	800f4ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f49a:	f7f7 faa1 	bl	80069e0 <HAL_GetTick>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f4a8:	d901      	bls.n	800f4ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e007      	b.n	800f4be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f4ae:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <HAL_PWREx_ConfigSupply+0x70>)
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4ba:	d1ee      	bne.n	800f49a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	58024800 	.word	0x58024800

0800f4cc <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e030      	b.n	800f540 <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2202      	movs	r2, #2
 800f4e2:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f022 0220 	bic.w	r2, r2, #32
 800f4f2:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	6812      	ldr	r2, [r2, #0]
 800f502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f506:	f023 030f 	bic.w	r3, r3, #15
 800f50a:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f022 021c 	bic.w	r2, r2, #28
 800f51a:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f022 0207 	bic.w	r2, r2, #7
 800f52a:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	370c      	adds	r7, #12
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	791b      	ldrb	r3, [r3, #4]
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d10f      	bne.n	800f57e <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2202      	movs	r2, #2
 800f562:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f042 0220 	orr.w	r2, r2, #32
 800f572:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f57a:	2300      	movs	r3, #0
 800f57c:	e003      	b.n	800f586 <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2202      	movs	r2, #2
 800f582:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f584:	2301      	movs	r3, #1
}
 800f586:	4618      	mov	r0, r3
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
	...

0800f594 <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	791b      	ldrb	r3, [r3, #4]
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d134      	bne.n	800f612 <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	4a1d      	ldr	r2, [pc, #116]	; (800f628 <HAL_RAMECC_EnableNotification+0x94>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d00f      	beq.n	800f5d6 <HAL_RAMECC_EnableNotification+0x42>
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	4a1c      	ldr	r2, [pc, #112]	; (800f62c <HAL_RAMECC_EnableNotification+0x98>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d00b      	beq.n	800f5d6 <HAL_RAMECC_EnableNotification+0x42>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	4a1b      	ldr	r2, [pc, #108]	; (800f630 <HAL_RAMECC_EnableNotification+0x9c>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d007      	beq.n	800f5d6 <HAL_RAMECC_EnableNotification+0x42>
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	4a1a      	ldr	r2, [pc, #104]	; (800f634 <HAL_RAMECC_EnableNotification+0xa0>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d003      	beq.n	800f5d6 <HAL_RAMECC_EnableNotification+0x42>
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	4a19      	ldr	r2, [pc, #100]	; (800f638 <HAL_RAMECC_EnableNotification+0xa4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d10e      	bne.n	800f5f4 <HAL_RAMECC_EnableNotification+0x60>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	6809      	ldr	r1, [r1, #0]
 800f5ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	600b      	str	r3, [r1, #0]
 800f5f2:	e009      	b.n	800f608 <HAL_RAMECC_EnableNotification+0x74>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6819      	ldr	r1, [r3, #0]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	430a      	orrs	r2, r1
 800f606:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2201      	movs	r2, #1
 800f60c:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	e003      	b.n	800f61a <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2202      	movs	r2, #2
 800f616:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f618:	2301      	movs	r3, #1
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	370c      	adds	r7, #12
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	10000001 	.word	0x10000001
 800f62c:	10000002 	.word	0x10000002
 800f630:	10000004 	.word	0x10000004
 800f634:	10000008 	.word	0x10000008
 800f638:	1000000f 	.word	0x1000000f

0800f63c <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	085b      	lsrs	r3, r3, #1
 800f658:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f003 0301 	and.w	r3, r3, #1
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 800f66c:	4b16      	ldr	r3, [pc, #88]	; (800f6c8 <HAL_RAMECC_IRQHandler+0x8c>)
 800f66e:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	2b00      	cmp	r3, #0
 800f678:	d005      	beq.n	800f686 <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	f043 0201 	orr.w	r2, r3, #1
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f003 0306 	and.w	r3, r3, #6
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	f043 0202 	orr.w	r2, r3, #2
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6859      	ldr	r1, [r3, #4]
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	005b      	lsls	r3, r3, #1
 800f6ac:	4013      	ands	r3, r2
 800f6ae:	085b      	lsrs	r3, r3, #1
 800f6b0:	43da      	mvns	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	400a      	ands	r2, r1
 800f6b8:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7f4 ff88 	bl	80045d0 <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800f6c0:	bf00      	nop
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	1000000f 	.word	0x1000000f

0800f6cc <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68db      	ldr	r3, [r3, #12]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b08c      	sub	sp, #48	; 0x30
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	f000 bc48 	b.w	800ff88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 8088 	beq.w	800f816 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f706:	4b99      	ldr	r3, [pc, #612]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f70e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f710:	4b96      	ldr	r3, [pc, #600]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f714:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f718:	2b10      	cmp	r3, #16
 800f71a:	d007      	beq.n	800f72c <HAL_RCC_OscConfig+0x48>
 800f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71e:	2b18      	cmp	r3, #24
 800f720:	d111      	bne.n	800f746 <HAL_RCC_OscConfig+0x62>
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	f003 0303 	and.w	r3, r3, #3
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d10c      	bne.n	800f746 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f72c:	4b8f      	ldr	r3, [pc, #572]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f734:	2b00      	cmp	r3, #0
 800f736:	d06d      	beq.n	800f814 <HAL_RCC_OscConfig+0x130>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d169      	bne.n	800f814 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	f000 bc21 	b.w	800ff88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f74e:	d106      	bne.n	800f75e <HAL_RCC_OscConfig+0x7a>
 800f750:	4b86      	ldr	r3, [pc, #536]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a85      	ldr	r2, [pc, #532]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	e02e      	b.n	800f7bc <HAL_RCC_OscConfig+0xd8>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10c      	bne.n	800f780 <HAL_RCC_OscConfig+0x9c>
 800f766:	4b81      	ldr	r3, [pc, #516]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a80      	ldr	r2, [pc, #512]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f770:	6013      	str	r3, [r2, #0]
 800f772:	4b7e      	ldr	r3, [pc, #504]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4a7d      	ldr	r2, [pc, #500]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	e01d      	b.n	800f7bc <HAL_RCC_OscConfig+0xd8>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f788:	d10c      	bne.n	800f7a4 <HAL_RCC_OscConfig+0xc0>
 800f78a:	4b78      	ldr	r3, [pc, #480]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4a77      	ldr	r2, [pc, #476]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f794:	6013      	str	r3, [r2, #0]
 800f796:	4b75      	ldr	r3, [pc, #468]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a74      	ldr	r2, [pc, #464]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f79c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f7a0:	6013      	str	r3, [r2, #0]
 800f7a2:	e00b      	b.n	800f7bc <HAL_RCC_OscConfig+0xd8>
 800f7a4:	4b71      	ldr	r3, [pc, #452]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a70      	ldr	r2, [pc, #448]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f7aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7ae:	6013      	str	r3, [r2, #0]
 800f7b0:	4b6e      	ldr	r3, [pc, #440]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a6d      	ldr	r2, [pc, #436]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f7b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f7ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d013      	beq.n	800f7ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7c4:	f7f7 f90c 	bl	80069e0 <HAL_GetTick>
 800f7c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f7ca:	e008      	b.n	800f7de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7cc:	f7f7 f908 	bl	80069e0 <HAL_GetTick>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	2b64      	cmp	r3, #100	; 0x64
 800f7d8:	d901      	bls.n	800f7de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f7da:	2303      	movs	r3, #3
 800f7dc:	e3d4      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f7de:	4b63      	ldr	r3, [pc, #396]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0f0      	beq.n	800f7cc <HAL_RCC_OscConfig+0xe8>
 800f7ea:	e014      	b.n	800f816 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7ec:	f7f7 f8f8 	bl	80069e0 <HAL_GetTick>
 800f7f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f7f2:	e008      	b.n	800f806 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7f4:	f7f7 f8f4 	bl	80069e0 <HAL_GetTick>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fc:	1ad3      	subs	r3, r2, r3
 800f7fe:	2b64      	cmp	r3, #100	; 0x64
 800f800:	d901      	bls.n	800f806 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f802:	2303      	movs	r3, #3
 800f804:	e3c0      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f806:	4b59      	ldr	r3, [pc, #356]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1f0      	bne.n	800f7f4 <HAL_RCC_OscConfig+0x110>
 800f812:	e000      	b.n	800f816 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f000 80ca 	beq.w	800f9b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f824:	4b51      	ldr	r3, [pc, #324]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f826:	691b      	ldr	r3, [r3, #16]
 800f828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f82c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f82e:	4b4f      	ldr	r3, [pc, #316]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f832:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d007      	beq.n	800f84a <HAL_RCC_OscConfig+0x166>
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2b18      	cmp	r3, #24
 800f83e:	d156      	bne.n	800f8ee <HAL_RCC_OscConfig+0x20a>
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	f003 0303 	and.w	r3, r3, #3
 800f846:	2b00      	cmp	r3, #0
 800f848:	d151      	bne.n	800f8ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f84a:	4b48      	ldr	r3, [pc, #288]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f003 0304 	and.w	r3, r3, #4
 800f852:	2b00      	cmp	r3, #0
 800f854:	d005      	beq.n	800f862 <HAL_RCC_OscConfig+0x17e>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f85e:	2301      	movs	r3, #1
 800f860:	e392      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f862:	4b42      	ldr	r3, [pc, #264]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f023 0219 	bic.w	r2, r3, #25
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	493f      	ldr	r1, [pc, #252]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f870:	4313      	orrs	r3, r2
 800f872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f874:	f7f7 f8b4 	bl	80069e0 <HAL_GetTick>
 800f878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f87a:	e008      	b.n	800f88e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f87c:	f7f7 f8b0 	bl	80069e0 <HAL_GetTick>
 800f880:	4602      	mov	r2, r0
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	2b02      	cmp	r3, #2
 800f888:	d901      	bls.n	800f88e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f88a:	2303      	movs	r3, #3
 800f88c:	e37c      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f88e:	4b37      	ldr	r3, [pc, #220]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	d0f0      	beq.n	800f87c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f89a:	f7f7 f8ad 	bl	80069f8 <HAL_GetREVID>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d817      	bhi.n	800f8d8 <HAL_RCC_OscConfig+0x1f4>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	2b40      	cmp	r3, #64	; 0x40
 800f8ae:	d108      	bne.n	800f8c2 <HAL_RCC_OscConfig+0x1de>
 800f8b0:	4b2e      	ldr	r3, [pc, #184]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f8b8:	4a2c      	ldr	r2, [pc, #176]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f8c0:	e07a      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f8c2:	4b2a      	ldr	r3, [pc, #168]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	031b      	lsls	r3, r3, #12
 800f8d0:	4926      	ldr	r1, [pc, #152]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f8d6:	e06f      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f8d8:	4b24      	ldr	r3, [pc, #144]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	061b      	lsls	r3, r3, #24
 800f8e6:	4921      	ldr	r1, [pc, #132]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f8ec:	e064      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d047      	beq.n	800f986 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f8f6:	4b1d      	ldr	r3, [pc, #116]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f023 0219 	bic.w	r2, r3, #25
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	491a      	ldr	r1, [pc, #104]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f904:	4313      	orrs	r3, r2
 800f906:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f908:	f7f7 f86a 	bl	80069e0 <HAL_GetTick>
 800f90c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f90e:	e008      	b.n	800f922 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f910:	f7f7 f866 	bl	80069e0 <HAL_GetTick>
 800f914:	4602      	mov	r2, r0
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d901      	bls.n	800f922 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f91e:	2303      	movs	r3, #3
 800f920:	e332      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f922:	4b12      	ldr	r3, [pc, #72]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d0f0      	beq.n	800f910 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f92e:	f7f7 f863 	bl	80069f8 <HAL_GetREVID>
 800f932:	4603      	mov	r3, r0
 800f934:	f241 0203 	movw	r2, #4099	; 0x1003
 800f938:	4293      	cmp	r3, r2
 800f93a:	d819      	bhi.n	800f970 <HAL_RCC_OscConfig+0x28c>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	2b40      	cmp	r3, #64	; 0x40
 800f942:	d108      	bne.n	800f956 <HAL_RCC_OscConfig+0x272>
 800f944:	4b09      	ldr	r3, [pc, #36]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f94c:	4a07      	ldr	r2, [pc, #28]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f94e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f952:	6053      	str	r3, [r2, #4]
 800f954:	e030      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
 800f956:	4b05      	ldr	r3, [pc, #20]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	691b      	ldr	r3, [r3, #16]
 800f962:	031b      	lsls	r3, r3, #12
 800f964:	4901      	ldr	r1, [pc, #4]	; (800f96c <HAL_RCC_OscConfig+0x288>)
 800f966:	4313      	orrs	r3, r2
 800f968:	604b      	str	r3, [r1, #4]
 800f96a:	e025      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
 800f96c:	58024400 	.word	0x58024400
 800f970:	4b9a      	ldr	r3, [pc, #616]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	061b      	lsls	r3, r3, #24
 800f97e:	4997      	ldr	r1, [pc, #604]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f980:	4313      	orrs	r3, r2
 800f982:	604b      	str	r3, [r1, #4]
 800f984:	e018      	b.n	800f9b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f986:	4b95      	ldr	r3, [pc, #596]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a94      	ldr	r2, [pc, #592]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f98c:	f023 0301 	bic.w	r3, r3, #1
 800f990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f992:	f7f7 f825 	bl	80069e0 <HAL_GetTick>
 800f996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f998:	e008      	b.n	800f9ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f99a:	f7f7 f821 	bl	80069e0 <HAL_GetTick>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	d901      	bls.n	800f9ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	e2ed      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f9ac:	4b8b      	ldr	r3, [pc, #556]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f003 0304 	and.w	r3, r3, #4
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1f0      	bne.n	800f99a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f000 80a9 	beq.w	800fb18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9c6:	4b85      	ldr	r3, [pc, #532]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f9d0:	4b82      	ldr	r3, [pc, #520]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	2b08      	cmp	r3, #8
 800f9da:	d007      	beq.n	800f9ec <HAL_RCC_OscConfig+0x308>
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	2b18      	cmp	r3, #24
 800f9e0:	d13a      	bne.n	800fa58 <HAL_RCC_OscConfig+0x374>
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f003 0303 	and.w	r3, r3, #3
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d135      	bne.n	800fa58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f9ec:	4b7b      	ldr	r3, [pc, #492]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d005      	beq.n	800fa04 <HAL_RCC_OscConfig+0x320>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	69db      	ldr	r3, [r3, #28]
 800f9fc:	2b80      	cmp	r3, #128	; 0x80
 800f9fe:	d001      	beq.n	800fa04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	e2c1      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa04:	f7f6 fff8 	bl	80069f8 <HAL_GetREVID>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	f241 0203 	movw	r2, #4099	; 0x1003
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d817      	bhi.n	800fa42 <HAL_RCC_OscConfig+0x35e>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	2b20      	cmp	r3, #32
 800fa18:	d108      	bne.n	800fa2c <HAL_RCC_OscConfig+0x348>
 800fa1a:	4b70      	ldr	r3, [pc, #448]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800fa22:	4a6e      	ldr	r2, [pc, #440]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800fa2a:	e075      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa2c:	4b6b      	ldr	r3, [pc, #428]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a1b      	ldr	r3, [r3, #32]
 800fa38:	069b      	lsls	r3, r3, #26
 800fa3a:	4968      	ldr	r1, [pc, #416]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800fa40:	e06a      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa42:	4b66      	ldr	r3, [pc, #408]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	061b      	lsls	r3, r3, #24
 800fa50:	4962      	ldr	r1, [pc, #392]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa52:	4313      	orrs	r3, r2
 800fa54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800fa56:	e05f      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	69db      	ldr	r3, [r3, #28]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d042      	beq.n	800fae6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800fa60:	4b5e      	ldr	r3, [pc, #376]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a5d      	ldr	r2, [pc, #372]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa6c:	f7f6 ffb8 	bl	80069e0 <HAL_GetTick>
 800fa70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fa72:	e008      	b.n	800fa86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fa74:	f7f6 ffb4 	bl	80069e0 <HAL_GetTick>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	1ad3      	subs	r3, r2, r3
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d901      	bls.n	800fa86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800fa82:	2303      	movs	r3, #3
 800fa84:	e280      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fa86:	4b55      	ldr	r3, [pc, #340]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d0f0      	beq.n	800fa74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa92:	f7f6 ffb1 	bl	80069f8 <HAL_GetREVID>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f241 0203 	movw	r2, #4099	; 0x1003
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d817      	bhi.n	800fad0 <HAL_RCC_OscConfig+0x3ec>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	2b20      	cmp	r3, #32
 800faa6:	d108      	bne.n	800faba <HAL_RCC_OscConfig+0x3d6>
 800faa8:	4b4c      	ldr	r3, [pc, #304]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800fab0:	4a4a      	ldr	r2, [pc, #296]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fab6:	6053      	str	r3, [r2, #4]
 800fab8:	e02e      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
 800faba:	4b48      	ldr	r3, [pc, #288]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	069b      	lsls	r3, r3, #26
 800fac8:	4944      	ldr	r1, [pc, #272]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800faca:	4313      	orrs	r3, r2
 800facc:	604b      	str	r3, [r1, #4]
 800face:	e023      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
 800fad0:	4b42      	ldr	r3, [pc, #264]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a1b      	ldr	r3, [r3, #32]
 800fadc:	061b      	lsls	r3, r3, #24
 800fade:	493f      	ldr	r1, [pc, #252]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60cb      	str	r3, [r1, #12]
 800fae4:	e018      	b.n	800fb18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800fae6:	4b3d      	ldr	r3, [pc, #244]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a3c      	ldr	r2, [pc, #240]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800faec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800faf2:	f7f6 ff75 	bl	80069e0 <HAL_GetTick>
 800faf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800faf8:	e008      	b.n	800fb0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800fafa:	f7f6 ff71 	bl	80069e0 <HAL_GetTick>
 800fafe:	4602      	mov	r2, r0
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	1ad3      	subs	r3, r2, r3
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d901      	bls.n	800fb0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800fb08:	2303      	movs	r3, #3
 800fb0a:	e23d      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fb0c:	4b33      	ldr	r3, [pc, #204]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1f0      	bne.n	800fafa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f003 0308 	and.w	r3, r3, #8
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d036      	beq.n	800fb92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	695b      	ldr	r3, [r3, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d019      	beq.n	800fb60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fb2c:	4b2b      	ldr	r3, [pc, #172]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb30:	4a2a      	ldr	r2, [pc, #168]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb32:	f043 0301 	orr.w	r3, r3, #1
 800fb36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb38:	f7f6 ff52 	bl	80069e0 <HAL_GetTick>
 800fb3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fb3e:	e008      	b.n	800fb52 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fb40:	f7f6 ff4e 	bl	80069e0 <HAL_GetTick>
 800fb44:	4602      	mov	r2, r0
 800fb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	d901      	bls.n	800fb52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e21a      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fb52:	4b22      	ldr	r3, [pc, #136]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb56:	f003 0302 	and.w	r3, r3, #2
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d0f0      	beq.n	800fb40 <HAL_RCC_OscConfig+0x45c>
 800fb5e:	e018      	b.n	800fb92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fb60:	4b1e      	ldr	r3, [pc, #120]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb64:	4a1d      	ldr	r2, [pc, #116]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb66:	f023 0301 	bic.w	r3, r3, #1
 800fb6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb6c:	f7f6 ff38 	bl	80069e0 <HAL_GetTick>
 800fb70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fb72:	e008      	b.n	800fb86 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fb74:	f7f6 ff34 	bl	80069e0 <HAL_GetTick>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	1ad3      	subs	r3, r2, r3
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d901      	bls.n	800fb86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800fb82:	2303      	movs	r3, #3
 800fb84:	e200      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fb86:	4b15      	ldr	r3, [pc, #84]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb8a:	f003 0302 	and.w	r3, r3, #2
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1f0      	bne.n	800fb74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f003 0320 	and.w	r3, r3, #32
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d039      	beq.n	800fc12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	699b      	ldr	r3, [r3, #24]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d01c      	beq.n	800fbe0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fba6:	4b0d      	ldr	r3, [pc, #52]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a0c      	ldr	r2, [pc, #48]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fbac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fbb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fbb2:	f7f6 ff15 	bl	80069e0 <HAL_GetTick>
 800fbb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fbb8:	e008      	b.n	800fbcc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fbba:	f7f6 ff11 	bl	80069e0 <HAL_GetTick>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d901      	bls.n	800fbcc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	e1dd      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fbcc:	4b03      	ldr	r3, [pc, #12]	; (800fbdc <HAL_RCC_OscConfig+0x4f8>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d0f0      	beq.n	800fbba <HAL_RCC_OscConfig+0x4d6>
 800fbd8:	e01b      	b.n	800fc12 <HAL_RCC_OscConfig+0x52e>
 800fbda:	bf00      	nop
 800fbdc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fbe0:	4b9b      	ldr	r3, [pc, #620]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a9a      	ldr	r2, [pc, #616]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fbe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fbec:	f7f6 fef8 	bl	80069e0 <HAL_GetTick>
 800fbf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fbf2:	e008      	b.n	800fc06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fbf4:	f7f6 fef4 	bl	80069e0 <HAL_GetTick>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d901      	bls.n	800fc06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800fc02:	2303      	movs	r3, #3
 800fc04:	e1c0      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fc06:	4b92      	ldr	r3, [pc, #584]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1f0      	bne.n	800fbf4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f003 0304 	and.w	r3, r3, #4
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 8081 	beq.w	800fd22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800fc20:	4b8c      	ldr	r3, [pc, #560]	; (800fe54 <HAL_RCC_OscConfig+0x770>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a8b      	ldr	r2, [pc, #556]	; (800fe54 <HAL_RCC_OscConfig+0x770>)
 800fc26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fc2c:	f7f6 fed8 	bl	80069e0 <HAL_GetTick>
 800fc30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fc32:	e008      	b.n	800fc46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc34:	f7f6 fed4 	bl	80069e0 <HAL_GetTick>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	2b64      	cmp	r3, #100	; 0x64
 800fc40:	d901      	bls.n	800fc46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800fc42:	2303      	movs	r3, #3
 800fc44:	e1a0      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fc46:	4b83      	ldr	r3, [pc, #524]	; (800fe54 <HAL_RCC_OscConfig+0x770>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d0f0      	beq.n	800fc34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d106      	bne.n	800fc68 <HAL_RCC_OscConfig+0x584>
 800fc5a:	4b7d      	ldr	r3, [pc, #500]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc5e:	4a7c      	ldr	r2, [pc, #496]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc60:	f043 0301 	orr.w	r3, r3, #1
 800fc64:	6713      	str	r3, [r2, #112]	; 0x70
 800fc66:	e02d      	b.n	800fcc4 <HAL_RCC_OscConfig+0x5e0>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10c      	bne.n	800fc8a <HAL_RCC_OscConfig+0x5a6>
 800fc70:	4b77      	ldr	r3, [pc, #476]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc74:	4a76      	ldr	r2, [pc, #472]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc76:	f023 0301 	bic.w	r3, r3, #1
 800fc7a:	6713      	str	r3, [r2, #112]	; 0x70
 800fc7c:	4b74      	ldr	r3, [pc, #464]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc80:	4a73      	ldr	r2, [pc, #460]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc82:	f023 0304 	bic.w	r3, r3, #4
 800fc86:	6713      	str	r3, [r2, #112]	; 0x70
 800fc88:	e01c      	b.n	800fcc4 <HAL_RCC_OscConfig+0x5e0>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	2b05      	cmp	r3, #5
 800fc90:	d10c      	bne.n	800fcac <HAL_RCC_OscConfig+0x5c8>
 800fc92:	4b6f      	ldr	r3, [pc, #444]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc96:	4a6e      	ldr	r2, [pc, #440]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fc98:	f043 0304 	orr.w	r3, r3, #4
 800fc9c:	6713      	str	r3, [r2, #112]	; 0x70
 800fc9e:	4b6c      	ldr	r3, [pc, #432]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca2:	4a6b      	ldr	r2, [pc, #428]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fca4:	f043 0301 	orr.w	r3, r3, #1
 800fca8:	6713      	str	r3, [r2, #112]	; 0x70
 800fcaa:	e00b      	b.n	800fcc4 <HAL_RCC_OscConfig+0x5e0>
 800fcac:	4b68      	ldr	r3, [pc, #416]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fcae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcb0:	4a67      	ldr	r2, [pc, #412]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fcb2:	f023 0301 	bic.w	r3, r3, #1
 800fcb6:	6713      	str	r3, [r2, #112]	; 0x70
 800fcb8:	4b65      	ldr	r3, [pc, #404]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcbc:	4a64      	ldr	r2, [pc, #400]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fcbe:	f023 0304 	bic.w	r3, r3, #4
 800fcc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d015      	beq.n	800fcf8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fccc:	f7f6 fe88 	bl	80069e0 <HAL_GetTick>
 800fcd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fcd2:	e00a      	b.n	800fcea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fcd4:	f7f6 fe84 	bl	80069e0 <HAL_GetTick>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	f241 3288 	movw	r2, #5000	; 0x1388
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d901      	bls.n	800fcea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800fce6:	2303      	movs	r3, #3
 800fce8:	e14e      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fcea:	4b59      	ldr	r3, [pc, #356]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fcec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcee:	f003 0302 	and.w	r3, r3, #2
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d0ee      	beq.n	800fcd4 <HAL_RCC_OscConfig+0x5f0>
 800fcf6:	e014      	b.n	800fd22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fcf8:	f7f6 fe72 	bl	80069e0 <HAL_GetTick>
 800fcfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fcfe:	e00a      	b.n	800fd16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fd00:	f7f6 fe6e 	bl	80069e0 <HAL_GetTick>
 800fd04:	4602      	mov	r2, r0
 800fd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d901      	bls.n	800fd16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800fd12:	2303      	movs	r3, #3
 800fd14:	e138      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fd16:	4b4e      	ldr	r3, [pc, #312]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd1a:	f003 0302 	and.w	r3, r3, #2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1ee      	bne.n	800fd00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 812d 	beq.w	800ff86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800fd2c:	4b48      	ldr	r3, [pc, #288]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd34:	2b18      	cmp	r3, #24
 800fd36:	f000 80bd 	beq.w	800feb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	f040 809e 	bne.w	800fe80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd44:	4b42      	ldr	r3, [pc, #264]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a41      	ldr	r2, [pc, #260]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fd4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd50:	f7f6 fe46 	bl	80069e0 <HAL_GetTick>
 800fd54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fd56:	e008      	b.n	800fd6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd58:	f7f6 fe42 	bl	80069e0 <HAL_GetTick>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d901      	bls.n	800fd6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800fd66:	2303      	movs	r3, #3
 800fd68:	e10e      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fd6a:	4b39      	ldr	r3, [pc, #228]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1f0      	bne.n	800fd58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fd76:	4b36      	ldr	r3, [pc, #216]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd7a:	4b37      	ldr	r3, [pc, #220]	; (800fe58 <HAL_RCC_OscConfig+0x774>)
 800fd7c:	4013      	ands	r3, r2
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fd86:	0112      	lsls	r2, r2, #4
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	4931      	ldr	r1, [pc, #196]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	628b      	str	r3, [r1, #40]	; 0x28
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd94:	3b01      	subs	r3, #1
 800fd96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	025b      	lsls	r3, r3, #9
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	431a      	orrs	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	041b      	lsls	r3, r3, #16
 800fdae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	061b      	lsls	r3, r3, #24
 800fdbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fdc0:	4923      	ldr	r1, [pc, #140]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800fdc6:	4b22      	ldr	r3, [pc, #136]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdca:	4a21      	ldr	r2, [pc, #132]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdcc:	f023 0301 	bic.w	r3, r3, #1
 800fdd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fdd2:	4b1f      	ldr	r3, [pc, #124]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdd6:	4b21      	ldr	r3, [pc, #132]	; (800fe5c <HAL_RCC_OscConfig+0x778>)
 800fdd8:	4013      	ands	r3, r2
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fdde:	00d2      	lsls	r2, r2, #3
 800fde0:	491b      	ldr	r1, [pc, #108]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fde2:	4313      	orrs	r3, r2
 800fde4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800fde6:	4b1a      	ldr	r3, [pc, #104]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdea:	f023 020c 	bic.w	r2, r3, #12
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf2:	4917      	ldr	r1, [pc, #92]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fdf8:	4b15      	ldr	r3, [pc, #84]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdfc:	f023 0202 	bic.w	r2, r3, #2
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe04:	4912      	ldr	r1, [pc, #72]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fe0a:	4b11      	ldr	r3, [pc, #68]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0e:	4a10      	ldr	r2, [pc, #64]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe16:	4b0e      	ldr	r3, [pc, #56]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1a:	4a0d      	ldr	r2, [pc, #52]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800fe22:	4b0b      	ldr	r3, [pc, #44]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe26:	4a0a      	ldr	r2, [pc, #40]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fe2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800fe2e:	4b08      	ldr	r3, [pc, #32]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe32:	4a07      	ldr	r2, [pc, #28]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe34:	f043 0301 	orr.w	r3, r3, #1
 800fe38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4a04      	ldr	r2, [pc, #16]	; (800fe50 <HAL_RCC_OscConfig+0x76c>)
 800fe40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fe44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe46:	f7f6 fdcb 	bl	80069e0 <HAL_GetTick>
 800fe4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fe4c:	e011      	b.n	800fe72 <HAL_RCC_OscConfig+0x78e>
 800fe4e:	bf00      	nop
 800fe50:	58024400 	.word	0x58024400
 800fe54:	58024800 	.word	0x58024800
 800fe58:	fffffc0c 	.word	0xfffffc0c
 800fe5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fe60:	f7f6 fdbe 	bl	80069e0 <HAL_GetTick>
 800fe64:	4602      	mov	r2, r0
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d901      	bls.n	800fe72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800fe6e:	2303      	movs	r3, #3
 800fe70:	e08a      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fe72:	4b47      	ldr	r3, [pc, #284]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d0f0      	beq.n	800fe60 <HAL_RCC_OscConfig+0x77c>
 800fe7e:	e082      	b.n	800ff86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe80:	4b43      	ldr	r3, [pc, #268]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a42      	ldr	r2, [pc, #264]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800fe86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe8c:	f7f6 fda8 	bl	80069e0 <HAL_GetTick>
 800fe90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fe92:	e008      	b.n	800fea6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fe94:	f7f6 fda4 	bl	80069e0 <HAL_GetTick>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d901      	bls.n	800fea6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800fea2:	2303      	movs	r3, #3
 800fea4:	e070      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fea6:	4b3a      	ldr	r3, [pc, #232]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1f0      	bne.n	800fe94 <HAL_RCC_OscConfig+0x7b0>
 800feb2:	e068      	b.n	800ff86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800feb4:	4b36      	ldr	r3, [pc, #216]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800feb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800feba:	4b35      	ldr	r3, [pc, #212]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800febc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800febe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d031      	beq.n	800ff2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	f003 0203 	and.w	r2, r3, #3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d12a      	bne.n	800ff2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	091b      	lsrs	r3, r3, #4
 800feda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d122      	bne.n	800ff2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d11a      	bne.n	800ff2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	0a5b      	lsrs	r3, r3, #9
 800fefa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d111      	bne.n	800ff2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	0c1b      	lsrs	r3, r3, #16
 800ff0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d108      	bne.n	800ff2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	0e1b      	lsrs	r3, r3, #24
 800ff1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d001      	beq.n	800ff30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e02b      	b.n	800ff88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ff30:	4b17      	ldr	r3, [pc, #92]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff34:	08db      	lsrs	r3, r3, #3
 800ff36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d01f      	beq.n	800ff86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ff46:	4b12      	ldr	r3, [pc, #72]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4a:	4a11      	ldr	r2, [pc, #68]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff4c:	f023 0301 	bic.w	r3, r3, #1
 800ff50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ff52:	f7f6 fd45 	bl	80069e0 <HAL_GetTick>
 800ff56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ff58:	bf00      	nop
 800ff5a:	f7f6 fd41 	bl	80069e0 <HAL_GetTick>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d0f9      	beq.n	800ff5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ff66:	4b0a      	ldr	r3, [pc, #40]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff6a:	4b0a      	ldr	r3, [pc, #40]	; (800ff94 <HAL_RCC_OscConfig+0x8b0>)
 800ff6c:	4013      	ands	r3, r2
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ff72:	00d2      	lsls	r2, r2, #3
 800ff74:	4906      	ldr	r1, [pc, #24]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff76:	4313      	orrs	r3, r2
 800ff78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ff7a:	4b05      	ldr	r3, [pc, #20]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	4a04      	ldr	r2, [pc, #16]	; (800ff90 <HAL_RCC_OscConfig+0x8ac>)
 800ff80:	f043 0301 	orr.w	r3, r3, #1
 800ff84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3730      	adds	r7, #48	; 0x30
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	58024400 	.word	0x58024400
 800ff94:	ffff0007 	.word	0xffff0007

0800ff98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e19c      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ffac:	4b8a      	ldr	r3, [pc, #552]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f003 030f 	and.w	r3, r3, #15
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d910      	bls.n	800ffdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ffba:	4b87      	ldr	r3, [pc, #540]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f023 020f 	bic.w	r2, r3, #15
 800ffc2:	4985      	ldr	r1, [pc, #532]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ffca:	4b83      	ldr	r3, [pc, #524]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 030f 	and.w	r3, r3, #15
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d001      	beq.n	800ffdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e184      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d010      	beq.n	801000a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	691a      	ldr	r2, [r3, #16]
 800ffec:	4b7b      	ldr	r3, [pc, #492]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d908      	bls.n	801000a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fff8:	4b78      	ldr	r3, [pc, #480]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	4975      	ldr	r1, [pc, #468]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010006:	4313      	orrs	r3, r2
 8010008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f003 0308 	and.w	r3, r3, #8
 8010012:	2b00      	cmp	r3, #0
 8010014:	d010      	beq.n	8010038 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	695a      	ldr	r2, [r3, #20]
 801001a:	4b70      	ldr	r3, [pc, #448]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801001c:	69db      	ldr	r3, [r3, #28]
 801001e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010022:	429a      	cmp	r2, r3
 8010024:	d908      	bls.n	8010038 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010026:	4b6d      	ldr	r3, [pc, #436]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010028:	69db      	ldr	r3, [r3, #28]
 801002a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	496a      	ldr	r1, [pc, #424]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010034:	4313      	orrs	r3, r2
 8010036:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 0310 	and.w	r3, r3, #16
 8010040:	2b00      	cmp	r3, #0
 8010042:	d010      	beq.n	8010066 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	699a      	ldr	r2, [r3, #24]
 8010048:	4b64      	ldr	r3, [pc, #400]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801004a:	69db      	ldr	r3, [r3, #28]
 801004c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010050:	429a      	cmp	r2, r3
 8010052:	d908      	bls.n	8010066 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010054:	4b61      	ldr	r3, [pc, #388]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	699b      	ldr	r3, [r3, #24]
 8010060:	495e      	ldr	r1, [pc, #376]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010062:	4313      	orrs	r3, r2
 8010064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d010      	beq.n	8010094 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	69da      	ldr	r2, [r3, #28]
 8010076:	4b59      	ldr	r3, [pc, #356]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801007e:	429a      	cmp	r2, r3
 8010080:	d908      	bls.n	8010094 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010082:	4b56      	ldr	r3, [pc, #344]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010084:	6a1b      	ldr	r3, [r3, #32]
 8010086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	69db      	ldr	r3, [r3, #28]
 801008e:	4953      	ldr	r1, [pc, #332]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010090:	4313      	orrs	r3, r2
 8010092:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f003 0302 	and.w	r3, r3, #2
 801009c:	2b00      	cmp	r3, #0
 801009e:	d010      	beq.n	80100c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	68da      	ldr	r2, [r3, #12]
 80100a4:	4b4d      	ldr	r3, [pc, #308]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100a6:	699b      	ldr	r3, [r3, #24]
 80100a8:	f003 030f 	and.w	r3, r3, #15
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d908      	bls.n	80100c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100b0:	4b4a      	ldr	r3, [pc, #296]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	f023 020f 	bic.w	r2, r3, #15
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	4947      	ldr	r1, [pc, #284]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100be:	4313      	orrs	r3, r2
 80100c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f003 0301 	and.w	r3, r3, #1
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d055      	beq.n	801017a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80100ce:	4b43      	ldr	r3, [pc, #268]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	4940      	ldr	r1, [pc, #256]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100dc:	4313      	orrs	r3, r2
 80100de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d107      	bne.n	80100f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100e8:	4b3c      	ldr	r3, [pc, #240]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d121      	bne.n	8010138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e0f6      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	d107      	bne.n	8010110 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010100:	4b36      	ldr	r3, [pc, #216]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d115      	bne.n	8010138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801010c:	2301      	movs	r3, #1
 801010e:	e0ea      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d107      	bne.n	8010128 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010118:	4b30      	ldr	r3, [pc, #192]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010120:	2b00      	cmp	r3, #0
 8010122:	d109      	bne.n	8010138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010124:	2301      	movs	r3, #1
 8010126:	e0de      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010128:	4b2c      	ldr	r3, [pc, #176]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0304 	and.w	r3, r3, #4
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	e0d6      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010138:	4b28      	ldr	r3, [pc, #160]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	f023 0207 	bic.w	r2, r3, #7
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	4925      	ldr	r1, [pc, #148]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010146:	4313      	orrs	r3, r2
 8010148:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801014a:	f7f6 fc49 	bl	80069e0 <HAL_GetTick>
 801014e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010150:	e00a      	b.n	8010168 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010152:	f7f6 fc45 	bl	80069e0 <HAL_GetTick>
 8010156:	4602      	mov	r2, r0
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	1ad3      	subs	r3, r2, r3
 801015c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010160:	4293      	cmp	r3, r2
 8010162:	d901      	bls.n	8010168 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010164:	2303      	movs	r3, #3
 8010166:	e0be      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010168:	4b1c      	ldr	r3, [pc, #112]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	00db      	lsls	r3, r3, #3
 8010176:	429a      	cmp	r2, r3
 8010178:	d1eb      	bne.n	8010152 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	2b00      	cmp	r3, #0
 8010184:	d010      	beq.n	80101a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68da      	ldr	r2, [r3, #12]
 801018a:	4b14      	ldr	r3, [pc, #80]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 801018c:	699b      	ldr	r3, [r3, #24]
 801018e:	f003 030f 	and.w	r3, r3, #15
 8010192:	429a      	cmp	r2, r3
 8010194:	d208      	bcs.n	80101a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010196:	4b11      	ldr	r3, [pc, #68]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 8010198:	699b      	ldr	r3, [r3, #24]
 801019a:	f023 020f 	bic.w	r2, r3, #15
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	490e      	ldr	r1, [pc, #56]	; (80101dc <HAL_RCC_ClockConfig+0x244>)
 80101a4:	4313      	orrs	r3, r2
 80101a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80101a8:	4b0b      	ldr	r3, [pc, #44]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f003 030f 	and.w	r3, r3, #15
 80101b0:	683a      	ldr	r2, [r7, #0]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d214      	bcs.n	80101e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101b6:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f023 020f 	bic.w	r2, r3, #15
 80101be:	4906      	ldr	r1, [pc, #24]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	4313      	orrs	r3, r2
 80101c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101c6:	4b04      	ldr	r3, [pc, #16]	; (80101d8 <HAL_RCC_ClockConfig+0x240>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f003 030f 	and.w	r3, r3, #15
 80101ce:	683a      	ldr	r2, [r7, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d005      	beq.n	80101e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e086      	b.n	80102e6 <HAL_RCC_ClockConfig+0x34e>
 80101d8:	52002000 	.word	0x52002000
 80101dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f003 0304 	and.w	r3, r3, #4
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d010      	beq.n	801020e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	691a      	ldr	r2, [r3, #16]
 80101f0:	4b3f      	ldr	r3, [pc, #252]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d208      	bcs.n	801020e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80101fc:	4b3c      	ldr	r3, [pc, #240]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 80101fe:	699b      	ldr	r3, [r3, #24]
 8010200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	4939      	ldr	r1, [pc, #228]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 801020a:	4313      	orrs	r3, r2
 801020c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f003 0308 	and.w	r3, r3, #8
 8010216:	2b00      	cmp	r3, #0
 8010218:	d010      	beq.n	801023c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	695a      	ldr	r2, [r3, #20]
 801021e:	4b34      	ldr	r3, [pc, #208]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 8010220:	69db      	ldr	r3, [r3, #28]
 8010222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010226:	429a      	cmp	r2, r3
 8010228:	d208      	bcs.n	801023c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801022a:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 801022c:	69db      	ldr	r3, [r3, #28]
 801022e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	492e      	ldr	r1, [pc, #184]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 8010238:	4313      	orrs	r3, r2
 801023a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f003 0310 	and.w	r3, r3, #16
 8010244:	2b00      	cmp	r3, #0
 8010246:	d010      	beq.n	801026a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	699a      	ldr	r2, [r3, #24]
 801024c:	4b28      	ldr	r3, [pc, #160]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010254:	429a      	cmp	r2, r3
 8010256:	d208      	bcs.n	801026a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010258:	4b25      	ldr	r3, [pc, #148]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 801025a:	69db      	ldr	r3, [r3, #28]
 801025c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	699b      	ldr	r3, [r3, #24]
 8010264:	4922      	ldr	r1, [pc, #136]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 8010266:	4313      	orrs	r3, r2
 8010268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f003 0320 	and.w	r3, r3, #32
 8010272:	2b00      	cmp	r3, #0
 8010274:	d010      	beq.n	8010298 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	69da      	ldr	r2, [r3, #28]
 801027a:	4b1d      	ldr	r3, [pc, #116]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010282:	429a      	cmp	r2, r3
 8010284:	d208      	bcs.n	8010298 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010286:	4b1a      	ldr	r3, [pc, #104]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 8010288:	6a1b      	ldr	r3, [r3, #32]
 801028a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	69db      	ldr	r3, [r3, #28]
 8010292:	4917      	ldr	r1, [pc, #92]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 8010294:	4313      	orrs	r3, r2
 8010296:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010298:	f000 f834 	bl	8010304 <HAL_RCC_GetSysClockFreq>
 801029c:	4602      	mov	r2, r0
 801029e:	4b14      	ldr	r3, [pc, #80]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 80102a0:	699b      	ldr	r3, [r3, #24]
 80102a2:	0a1b      	lsrs	r3, r3, #8
 80102a4:	f003 030f 	and.w	r3, r3, #15
 80102a8:	4912      	ldr	r1, [pc, #72]	; (80102f4 <HAL_RCC_ClockConfig+0x35c>)
 80102aa:	5ccb      	ldrb	r3, [r1, r3]
 80102ac:	f003 031f 	and.w	r3, r3, #31
 80102b0:	fa22 f303 	lsr.w	r3, r2, r3
 80102b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80102b6:	4b0e      	ldr	r3, [pc, #56]	; (80102f0 <HAL_RCC_ClockConfig+0x358>)
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	f003 030f 	and.w	r3, r3, #15
 80102be:	4a0d      	ldr	r2, [pc, #52]	; (80102f4 <HAL_RCC_ClockConfig+0x35c>)
 80102c0:	5cd3      	ldrb	r3, [r2, r3]
 80102c2:	f003 031f 	and.w	r3, r3, #31
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	fa22 f303 	lsr.w	r3, r2, r3
 80102cc:	4a0a      	ldr	r2, [pc, #40]	; (80102f8 <HAL_RCC_ClockConfig+0x360>)
 80102ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80102d0:	4a0a      	ldr	r2, [pc, #40]	; (80102fc <HAL_RCC_ClockConfig+0x364>)
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80102d6:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <HAL_RCC_ClockConfig+0x368>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7f4 fdc2 	bl	8004e64 <HAL_InitTick>
 80102e0:	4603      	mov	r3, r0
 80102e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3718      	adds	r7, #24
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	58024400 	.word	0x58024400
 80102f4:	0801c1cc 	.word	0x0801c1cc
 80102f8:	240000d0 	.word	0x240000d0
 80102fc:	240000cc 	.word	0x240000cc
 8010300:	240000d4 	.word	0x240000d4

08010304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010304:	b480      	push	{r7}
 8010306:	b089      	sub	sp, #36	; 0x24
 8010308:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801030a:	4bb3      	ldr	r3, [pc, #716]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010312:	2b18      	cmp	r3, #24
 8010314:	f200 8155 	bhi.w	80105c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8010318:	a201      	add	r2, pc, #4	; (adr r2, 8010320 <HAL_RCC_GetSysClockFreq+0x1c>)
 801031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031e:	bf00      	nop
 8010320:	08010385 	.word	0x08010385
 8010324:	080105c3 	.word	0x080105c3
 8010328:	080105c3 	.word	0x080105c3
 801032c:	080105c3 	.word	0x080105c3
 8010330:	080105c3 	.word	0x080105c3
 8010334:	080105c3 	.word	0x080105c3
 8010338:	080105c3 	.word	0x080105c3
 801033c:	080105c3 	.word	0x080105c3
 8010340:	080103ab 	.word	0x080103ab
 8010344:	080105c3 	.word	0x080105c3
 8010348:	080105c3 	.word	0x080105c3
 801034c:	080105c3 	.word	0x080105c3
 8010350:	080105c3 	.word	0x080105c3
 8010354:	080105c3 	.word	0x080105c3
 8010358:	080105c3 	.word	0x080105c3
 801035c:	080105c3 	.word	0x080105c3
 8010360:	080103b1 	.word	0x080103b1
 8010364:	080105c3 	.word	0x080105c3
 8010368:	080105c3 	.word	0x080105c3
 801036c:	080105c3 	.word	0x080105c3
 8010370:	080105c3 	.word	0x080105c3
 8010374:	080105c3 	.word	0x080105c3
 8010378:	080105c3 	.word	0x080105c3
 801037c:	080105c3 	.word	0x080105c3
 8010380:	080103b7 	.word	0x080103b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010384:	4b94      	ldr	r3, [pc, #592]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 0320 	and.w	r3, r3, #32
 801038c:	2b00      	cmp	r3, #0
 801038e:	d009      	beq.n	80103a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010390:	4b91      	ldr	r3, [pc, #580]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	08db      	lsrs	r3, r3, #3
 8010396:	f003 0303 	and.w	r3, r3, #3
 801039a:	4a90      	ldr	r2, [pc, #576]	; (80105dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 801039c:	fa22 f303 	lsr.w	r3, r2, r3
 80103a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80103a2:	e111      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80103a4:	4b8d      	ldr	r3, [pc, #564]	; (80105dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80103a6:	61bb      	str	r3, [r7, #24]
      break;
 80103a8:	e10e      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80103aa:	4b8d      	ldr	r3, [pc, #564]	; (80105e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80103ac:	61bb      	str	r3, [r7, #24]
      break;
 80103ae:	e10b      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80103b0:	4b8c      	ldr	r3, [pc, #560]	; (80105e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80103b2:	61bb      	str	r3, [r7, #24]
      break;
 80103b4:	e108      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80103b6:	4b88      	ldr	r3, [pc, #544]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ba:	f003 0303 	and.w	r3, r3, #3
 80103be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80103c0:	4b85      	ldr	r3, [pc, #532]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c4:	091b      	lsrs	r3, r3, #4
 80103c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80103cc:	4b82      	ldr	r3, [pc, #520]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80103d6:	4b80      	ldr	r3, [pc, #512]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103da:	08db      	lsrs	r3, r3, #3
 80103dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	fb02 f303 	mul.w	r3, r2, r3
 80103e6:	ee07 3a90 	vmov	s15, r3
 80103ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80e1 	beq.w	80105bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	f000 8083 	beq.w	8010508 <HAL_RCC_GetSysClockFreq+0x204>
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	2b02      	cmp	r3, #2
 8010406:	f200 80a1 	bhi.w	801054c <HAL_RCC_GetSysClockFreq+0x248>
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d003      	beq.n	8010418 <HAL_RCC_GetSysClockFreq+0x114>
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	2b01      	cmp	r3, #1
 8010414:	d056      	beq.n	80104c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8010416:	e099      	b.n	801054c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010418:	4b6f      	ldr	r3, [pc, #444]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f003 0320 	and.w	r3, r3, #32
 8010420:	2b00      	cmp	r3, #0
 8010422:	d02d      	beq.n	8010480 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010424:	4b6c      	ldr	r3, [pc, #432]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	08db      	lsrs	r3, r3, #3
 801042a:	f003 0303 	and.w	r3, r3, #3
 801042e:	4a6b      	ldr	r2, [pc, #428]	; (80105dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010430:	fa22 f303 	lsr.w	r3, r2, r3
 8010434:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	ee07 3a90 	vmov	s15, r3
 801043c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	ee07 3a90 	vmov	s15, r3
 8010446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801044a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801044e:	4b62      	ldr	r3, [pc, #392]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010456:	ee07 3a90 	vmov	s15, r3
 801045a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801045e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010462:	eddf 5a61 	vldr	s11, [pc, #388]	; 80105e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801046a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801046e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010476:	ee67 7a27 	vmul.f32	s15, s14, s15
 801047a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801047e:	e087      	b.n	8010590 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	ee07 3a90 	vmov	s15, r3
 8010486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801048a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80105ec <HAL_RCC_GetSysClockFreq+0x2e8>
 801048e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010492:	4b51      	ldr	r3, [pc, #324]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801049a:	ee07 3a90 	vmov	s15, r3
 801049e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80104a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80105e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80104aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80104c2:	e065      	b.n	8010590 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	ee07 3a90 	vmov	s15, r3
 80104ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80105f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80104d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104d6:	4b40      	ldr	r3, [pc, #256]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80104d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104de:	ee07 3a90 	vmov	s15, r3
 80104e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80104ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80105e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80104ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010506:	e043      	b.n	8010590 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	ee07 3a90 	vmov	s15, r3
 801050e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010512:	eddf 6a38 	vldr	s13, [pc, #224]	; 80105f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801051a:	4b2f      	ldr	r3, [pc, #188]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010522:	ee07 3a90 	vmov	s15, r3
 8010526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801052a:	ed97 6a02 	vldr	s12, [r7, #8]
 801052e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80105e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801053a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801053e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801054a:	e021      	b.n	8010590 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	ee07 3a90 	vmov	s15, r3
 8010552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010556:	eddf 6a26 	vldr	s13, [pc, #152]	; 80105f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801055a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801055e:	4b1e      	ldr	r3, [pc, #120]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010566:	ee07 3a90 	vmov	s15, r3
 801056a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801056e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010572:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80105e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801057a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801057e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801058a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801058e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010590:	4b11      	ldr	r3, [pc, #68]	; (80105d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010594:	0a5b      	lsrs	r3, r3, #9
 8010596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801059a:	3301      	adds	r3, #1
 801059c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	ee07 3a90 	vmov	s15, r3
 80105a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80105ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105b4:	ee17 3a90 	vmov	r3, s15
 80105b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80105ba:	e005      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80105bc:	2300      	movs	r3, #0
 80105be:	61bb      	str	r3, [r7, #24]
      break;
 80105c0:	e002      	b.n	80105c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80105c2:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80105c4:	61bb      	str	r3, [r7, #24]
      break;
 80105c6:	bf00      	nop
  }

  return sysclockfreq;
 80105c8:	69bb      	ldr	r3, [r7, #24]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3724      	adds	r7, #36	; 0x24
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	58024400 	.word	0x58024400
 80105dc:	03d09000 	.word	0x03d09000
 80105e0:	003d0900 	.word	0x003d0900
 80105e4:	017d7840 	.word	0x017d7840
 80105e8:	46000000 	.word	0x46000000
 80105ec:	4c742400 	.word	0x4c742400
 80105f0:	4a742400 	.word	0x4a742400
 80105f4:	4bbebc20 	.word	0x4bbebc20

080105f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80105fe:	f7ff fe81 	bl	8010304 <HAL_RCC_GetSysClockFreq>
 8010602:	4602      	mov	r2, r0
 8010604:	4b10      	ldr	r3, [pc, #64]	; (8010648 <HAL_RCC_GetHCLKFreq+0x50>)
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	0a1b      	lsrs	r3, r3, #8
 801060a:	f003 030f 	and.w	r3, r3, #15
 801060e:	490f      	ldr	r1, [pc, #60]	; (801064c <HAL_RCC_GetHCLKFreq+0x54>)
 8010610:	5ccb      	ldrb	r3, [r1, r3]
 8010612:	f003 031f 	and.w	r3, r3, #31
 8010616:	fa22 f303 	lsr.w	r3, r2, r3
 801061a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801061c:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <HAL_RCC_GetHCLKFreq+0x50>)
 801061e:	699b      	ldr	r3, [r3, #24]
 8010620:	f003 030f 	and.w	r3, r3, #15
 8010624:	4a09      	ldr	r2, [pc, #36]	; (801064c <HAL_RCC_GetHCLKFreq+0x54>)
 8010626:	5cd3      	ldrb	r3, [r2, r3]
 8010628:	f003 031f 	and.w	r3, r3, #31
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	fa22 f303 	lsr.w	r3, r2, r3
 8010632:	4a07      	ldr	r2, [pc, #28]	; (8010650 <HAL_RCC_GetHCLKFreq+0x58>)
 8010634:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010636:	4a07      	ldr	r2, [pc, #28]	; (8010654 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801063c:	4b04      	ldr	r3, [pc, #16]	; (8010650 <HAL_RCC_GetHCLKFreq+0x58>)
 801063e:	681b      	ldr	r3, [r3, #0]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	58024400 	.word	0x58024400
 801064c:	0801c1cc 	.word	0x0801c1cc
 8010650:	240000d0 	.word	0x240000d0
 8010654:	240000cc 	.word	0x240000cc

08010658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801065c:	f7ff ffcc 	bl	80105f8 <HAL_RCC_GetHCLKFreq>
 8010660:	4602      	mov	r2, r0
 8010662:	4b06      	ldr	r3, [pc, #24]	; (801067c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010664:	69db      	ldr	r3, [r3, #28]
 8010666:	091b      	lsrs	r3, r3, #4
 8010668:	f003 0307 	and.w	r3, r3, #7
 801066c:	4904      	ldr	r1, [pc, #16]	; (8010680 <HAL_RCC_GetPCLK1Freq+0x28>)
 801066e:	5ccb      	ldrb	r3, [r1, r3]
 8010670:	f003 031f 	and.w	r3, r3, #31
 8010674:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010678:	4618      	mov	r0, r3
 801067a:	bd80      	pop	{r7, pc}
 801067c:	58024400 	.word	0x58024400
 8010680:	0801c1cc 	.word	0x0801c1cc

08010684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010688:	f7ff ffb6 	bl	80105f8 <HAL_RCC_GetHCLKFreq>
 801068c:	4602      	mov	r2, r0
 801068e:	4b06      	ldr	r3, [pc, #24]	; (80106a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	0a1b      	lsrs	r3, r3, #8
 8010694:	f003 0307 	and.w	r3, r3, #7
 8010698:	4904      	ldr	r1, [pc, #16]	; (80106ac <HAL_RCC_GetPCLK2Freq+0x28>)
 801069a:	5ccb      	ldrb	r3, [r1, r3]
 801069c:	f003 031f 	and.w	r3, r3, #31
 80106a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	58024400 	.word	0x58024400
 80106ac:	0801c1cc 	.word	0x0801c1cc

080106b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	223f      	movs	r2, #63	; 0x3f
 80106be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80106c0:	4b1a      	ldr	r3, [pc, #104]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	f003 0207 	and.w	r2, r3, #7
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80106cc:	4b17      	ldr	r3, [pc, #92]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80106d8:	4b14      	ldr	r3, [pc, #80]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106da:	699b      	ldr	r3, [r3, #24]
 80106dc:	f003 020f 	and.w	r2, r3, #15
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80106e4:	4b11      	ldr	r3, [pc, #68]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106e6:	699b      	ldr	r3, [r3, #24]
 80106e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80106f0:	4b0e      	ldr	r3, [pc, #56]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106f2:	69db      	ldr	r3, [r3, #28]
 80106f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80106fc:	4b0b      	ldr	r3, [pc, #44]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 80106fe:	69db      	ldr	r3, [r3, #28]
 8010700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010708:	4b08      	ldr	r3, [pc, #32]	; (801072c <HAL_RCC_GetClockConfig+0x7c>)
 801070a:	6a1b      	ldr	r3, [r3, #32]
 801070c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010714:	4b06      	ldr	r3, [pc, #24]	; (8010730 <HAL_RCC_GetClockConfig+0x80>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f003 020f 	and.w	r2, r3, #15
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	601a      	str	r2, [r3, #0]
}
 8010720:	bf00      	nop
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	58024400 	.word	0x58024400
 8010730:	52002000 	.word	0x52002000

08010734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010738:	b0ca      	sub	sp, #296	; 0x128
 801073a:	af00      	add	r7, sp, #0
 801073c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010740:	2300      	movs	r3, #0
 8010742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010746:	2300      	movs	r3, #0
 8010748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801074c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8010758:	2500      	movs	r5, #0
 801075a:	ea54 0305 	orrs.w	r3, r4, r5
 801075e:	d049      	beq.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8010760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801076a:	d02f      	beq.n	80107cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801076c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010770:	d828      	bhi.n	80107c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8010772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010776:	d01a      	beq.n	80107ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801077c:	d822      	bhi.n	80107c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801077e:	2b00      	cmp	r3, #0
 8010780:	d003      	beq.n	801078a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8010782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010786:	d007      	beq.n	8010798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010788:	e01c      	b.n	80107c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801078a:	4bb8      	ldr	r3, [pc, #736]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078e:	4ab7      	ldr	r2, [pc, #732]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010796:	e01a      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801079c:	3308      	adds	r3, #8
 801079e:	2102      	movs	r1, #2
 80107a0:	4618      	mov	r0, r3
 80107a2:	f002 fb61 	bl	8012e68 <RCCEx_PLL2_Config>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80107ac:	e00f      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80107ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107b2:	3328      	adds	r3, #40	; 0x28
 80107b4:	2102      	movs	r1, #2
 80107b6:	4618      	mov	r0, r3
 80107b8:	f002 fc08 	bl	8012fcc <RCCEx_PLL3_Config>
 80107bc:	4603      	mov	r3, r0
 80107be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80107c2:	e004      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80107ca:	e000      	b.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80107cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10a      	bne.n	80107ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80107d6:	4ba5      	ldr	r3, [pc, #660]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80107d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80107de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107e4:	4aa1      	ldr	r2, [pc, #644]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80107e6:	430b      	orrs	r3, r1
 80107e8:	6513      	str	r3, [r2, #80]	; 0x50
 80107ea:	e003      	b.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80107f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8010800:	f04f 0900 	mov.w	r9, #0
 8010804:	ea58 0309 	orrs.w	r3, r8, r9
 8010808:	d047      	beq.n	801089a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801080a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801080e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010810:	2b04      	cmp	r3, #4
 8010812:	d82a      	bhi.n	801086a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8010814:	a201      	add	r2, pc, #4	; (adr r2, 801081c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8010816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801081a:	bf00      	nop
 801081c:	08010831 	.word	0x08010831
 8010820:	0801083f 	.word	0x0801083f
 8010824:	08010855 	.word	0x08010855
 8010828:	08010873 	.word	0x08010873
 801082c:	08010873 	.word	0x08010873
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010830:	4b8e      	ldr	r3, [pc, #568]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010834:	4a8d      	ldr	r2, [pc, #564]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801083a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801083c:	e01a      	b.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801083e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010842:	3308      	adds	r3, #8
 8010844:	2100      	movs	r1, #0
 8010846:	4618      	mov	r0, r3
 8010848:	f002 fb0e 	bl	8012e68 <RCCEx_PLL2_Config>
 801084c:	4603      	mov	r3, r0
 801084e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010852:	e00f      	b.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010858:	3328      	adds	r3, #40	; 0x28
 801085a:	2100      	movs	r1, #0
 801085c:	4618      	mov	r0, r3
 801085e:	f002 fbb5 	bl	8012fcc <RCCEx_PLL3_Config>
 8010862:	4603      	mov	r3, r0
 8010864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010868:	e004      	b.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010870:	e000      	b.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8010872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010878:	2b00      	cmp	r3, #0
 801087a:	d10a      	bne.n	8010892 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801087c:	4b7b      	ldr	r3, [pc, #492]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801087e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010880:	f023 0107 	bic.w	r1, r3, #7
 8010884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801088a:	4a78      	ldr	r2, [pc, #480]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801088c:	430b      	orrs	r3, r1
 801088e:	6513      	str	r3, [r2, #80]	; 0x50
 8010890:	e003      	b.n	801089a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801089a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80108a6:	f04f 0b00 	mov.w	fp, #0
 80108aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80108ae:	d04c      	beq.n	801094a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80108b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ba:	d030      	beq.n	801091e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80108bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108c0:	d829      	bhi.n	8010916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80108c2:	2bc0      	cmp	r3, #192	; 0xc0
 80108c4:	d02d      	beq.n	8010922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80108c6:	2bc0      	cmp	r3, #192	; 0xc0
 80108c8:	d825      	bhi.n	8010916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80108ca:	2b80      	cmp	r3, #128	; 0x80
 80108cc:	d018      	beq.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80108ce:	2b80      	cmp	r3, #128	; 0x80
 80108d0:	d821      	bhi.n	8010916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80108d6:	2b40      	cmp	r3, #64	; 0x40
 80108d8:	d007      	beq.n	80108ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80108da:	e01c      	b.n	8010916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80108dc:	4b63      	ldr	r3, [pc, #396]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80108de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e0:	4a62      	ldr	r2, [pc, #392]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80108e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80108e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80108e8:	e01c      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80108ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108ee:	3308      	adds	r3, #8
 80108f0:	2100      	movs	r1, #0
 80108f2:	4618      	mov	r0, r3
 80108f4:	f002 fab8 	bl	8012e68 <RCCEx_PLL2_Config>
 80108f8:	4603      	mov	r3, r0
 80108fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80108fe:	e011      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010904:	3328      	adds	r3, #40	; 0x28
 8010906:	2100      	movs	r1, #0
 8010908:	4618      	mov	r0, r3
 801090a:	f002 fb5f 	bl	8012fcc <RCCEx_PLL3_Config>
 801090e:	4603      	mov	r3, r0
 8010910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010914:	e006      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010916:	2301      	movs	r3, #1
 8010918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801091c:	e002      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801091e:	bf00      	nop
 8010920:	e000      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8010922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10a      	bne.n	8010942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801092c:	4b4f      	ldr	r3, [pc, #316]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801092e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010930:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8010934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801093a:	4a4c      	ldr	r2, [pc, #304]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801093c:	430b      	orrs	r3, r1
 801093e:	6513      	str	r3, [r2, #80]	; 0x50
 8010940:	e003      	b.n	801094a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801094a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010952:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8010956:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801095a:	2300      	movs	r3, #0
 801095c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010960:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8010964:	460b      	mov	r3, r1
 8010966:	4313      	orrs	r3, r2
 8010968:	d053      	beq.n	8010a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801096a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801096e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010976:	d035      	beq.n	80109e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8010978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801097c:	d82e      	bhi.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801097e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010982:	d031      	beq.n	80109e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8010984:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010988:	d828      	bhi.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801098a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801098e:	d01a      	beq.n	80109c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8010990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010994:	d822      	bhi.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010996:	2b00      	cmp	r3, #0
 8010998:	d003      	beq.n	80109a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801099a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801099e:	d007      	beq.n	80109b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80109a0:	e01c      	b.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80109a2:	4b32      	ldr	r3, [pc, #200]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80109a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a6:	4a31      	ldr	r2, [pc, #196]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80109a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80109ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80109ae:	e01c      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80109b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109b4:	3308      	adds	r3, #8
 80109b6:	2100      	movs	r1, #0
 80109b8:	4618      	mov	r0, r3
 80109ba:	f002 fa55 	bl	8012e68 <RCCEx_PLL2_Config>
 80109be:	4603      	mov	r3, r0
 80109c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80109c4:	e011      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80109c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109ca:	3328      	adds	r3, #40	; 0x28
 80109cc:	2100      	movs	r1, #0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f002 fafc 	bl	8012fcc <RCCEx_PLL3_Config>
 80109d4:	4603      	mov	r3, r0
 80109d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80109da:	e006      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80109dc:	2301      	movs	r3, #1
 80109de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80109e2:	e002      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80109e4:	bf00      	nop
 80109e6:	e000      	b.n	80109ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80109e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80109ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d10b      	bne.n	8010a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80109f2:	4b1e      	ldr	r3, [pc, #120]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80109f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80109fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010a02:	4a1a      	ldr	r2, [pc, #104]	; (8010a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010a04:	430b      	orrs	r3, r1
 8010a06:	6593      	str	r3, [r2, #88]	; 0x58
 8010a08:	e003      	b.n	8010a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8010a1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010a22:	2300      	movs	r3, #0
 8010a24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010a28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	d056      	beq.n	8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8010a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a3e:	d038      	beq.n	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a44:	d831      	bhi.n	8010aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010a46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010a4a:	d034      	beq.n	8010ab6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8010a4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010a50:	d82b      	bhi.n	8010aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a56:	d01d      	beq.n	8010a94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a5c:	d825      	bhi.n	8010aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d006      	beq.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8010a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010a66:	d00a      	beq.n	8010a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010a68:	e01f      	b.n	8010aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010a6a:	bf00      	nop
 8010a6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a70:	4ba2      	ldr	r3, [pc, #648]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a74:	4aa1      	ldr	r2, [pc, #644]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010a7c:	e01c      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a82:	3308      	adds	r3, #8
 8010a84:	2100      	movs	r1, #0
 8010a86:	4618      	mov	r0, r3
 8010a88:	f002 f9ee 	bl	8012e68 <RCCEx_PLL2_Config>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8010a92:	e011      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a98:	3328      	adds	r3, #40	; 0x28
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f002 fa95 	bl	8012fcc <RCCEx_PLL3_Config>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010aa8:	e006      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010ab0:	e002      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8010ab2:	bf00      	nop
 8010ab4:	e000      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8010ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10b      	bne.n	8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010ac0:	4b8e      	ldr	r3, [pc, #568]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ac4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8010ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010acc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010ad0:	4a8a      	ldr	r2, [pc, #552]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010ad2:	430b      	orrs	r3, r1
 8010ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8010ad6:	e003      	b.n	8010ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010adc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8010aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010af0:	2300      	movs	r3, #0
 8010af2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010af6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010afa:	460b      	mov	r3, r1
 8010afc:	4313      	orrs	r3, r2
 8010afe:	d03a      	beq.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8010b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b06:	2b30      	cmp	r3, #48	; 0x30
 8010b08:	d01f      	beq.n	8010b4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010b0a:	2b30      	cmp	r3, #48	; 0x30
 8010b0c:	d819      	bhi.n	8010b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010b0e:	2b20      	cmp	r3, #32
 8010b10:	d00c      	beq.n	8010b2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8010b12:	2b20      	cmp	r3, #32
 8010b14:	d815      	bhi.n	8010b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d019      	beq.n	8010b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010b1a:	2b10      	cmp	r3, #16
 8010b1c:	d111      	bne.n	8010b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010b1e:	4b77      	ldr	r3, [pc, #476]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b22:	4a76      	ldr	r2, [pc, #472]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010b2a:	e011      	b.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b30:	3308      	adds	r3, #8
 8010b32:	2102      	movs	r1, #2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f002 f997 	bl	8012e68 <RCCEx_PLL2_Config>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010b40:	e006      	b.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010b42:	2301      	movs	r3, #1
 8010b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010b48:	e002      	b.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010b4a:	bf00      	nop
 8010b4c:	e000      	b.n	8010b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d10a      	bne.n	8010b6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010b58:	4b68      	ldr	r3, [pc, #416]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b5c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8010b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b66:	4a65      	ldr	r2, [pc, #404]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010b68:	430b      	orrs	r3, r1
 8010b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010b6c:	e003      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010b72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8010b82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010b86:	2300      	movs	r3, #0
 8010b88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010b8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8010b90:	460b      	mov	r3, r1
 8010b92:	4313      	orrs	r3, r2
 8010b94:	d051      	beq.n	8010c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8010b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ba0:	d035      	beq.n	8010c0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8010ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ba6:	d82e      	bhi.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010bac:	d031      	beq.n	8010c12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8010bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010bb2:	d828      	bhi.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bb8:	d01a      	beq.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bbe:	d822      	bhi.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d003      	beq.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8010bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bc8:	d007      	beq.n	8010bda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8010bca:	e01c      	b.n	8010c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010bcc:	4b4b      	ldr	r3, [pc, #300]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd0:	4a4a      	ldr	r2, [pc, #296]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010bd8:	e01c      	b.n	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bde:	3308      	adds	r3, #8
 8010be0:	2100      	movs	r1, #0
 8010be2:	4618      	mov	r0, r3
 8010be4:	f002 f940 	bl	8012e68 <RCCEx_PLL2_Config>
 8010be8:	4603      	mov	r3, r0
 8010bea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010bee:	e011      	b.n	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bf4:	3328      	adds	r3, #40	; 0x28
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f002 f9e7 	bl	8012fcc <RCCEx_PLL3_Config>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010c04:	e006      	b.n	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010c0c:	e002      	b.n	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010c0e:	bf00      	nop
 8010c10:	e000      	b.n	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010c1c:	4b37      	ldr	r3, [pc, #220]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8010c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c2a:	4a34      	ldr	r2, [pc, #208]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010c2c:	430b      	orrs	r3, r1
 8010c2e:	6513      	str	r3, [r2, #80]	; 0x50
 8010c30:	e003      	b.n	8010c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8010c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010c50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8010c54:	460b      	mov	r3, r1
 8010c56:	4313      	orrs	r3, r2
 8010c58:	d056      	beq.n	8010d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010c64:	d033      	beq.n	8010cce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8010c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010c6a:	d82c      	bhi.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c70:	d02f      	beq.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8010c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c76:	d826      	bhi.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010c7c:	d02b      	beq.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8010c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010c82:	d820      	bhi.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c88:	d012      	beq.n	8010cb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c8e:	d81a      	bhi.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d022      	beq.n	8010cda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8010c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c98:	d115      	bne.n	8010cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c9e:	3308      	adds	r3, #8
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f002 f8e0 	bl	8012e68 <RCCEx_PLL2_Config>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010cae:	e015      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cb4:	3328      	adds	r3, #40	; 0x28
 8010cb6:	2101      	movs	r1, #1
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f002 f987 	bl	8012fcc <RCCEx_PLL3_Config>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010cc4:	e00a      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010ccc:	e006      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010cce:	bf00      	nop
 8010cd0:	e004      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010cd2:	bf00      	nop
 8010cd4:	e002      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010cd6:	bf00      	nop
 8010cd8:	e000      	b.n	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d10d      	bne.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010ce4:	4b05      	ldr	r3, [pc, #20]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ce8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cf2:	4a02      	ldr	r2, [pc, #8]	; (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010cf4:	430b      	orrs	r3, r1
 8010cf6:	6513      	str	r3, [r2, #80]	; 0x50
 8010cf8:	e006      	b.n	8010d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010cfa:	bf00      	nop
 8010cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d10:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8010d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010d18:	2300      	movs	r3, #0
 8010d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010d1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8010d22:	460b      	mov	r3, r1
 8010d24:	4313      	orrs	r3, r2
 8010d26:	d055      	beq.n	8010dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d34:	d033      	beq.n	8010d9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8010d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d3a:	d82c      	bhi.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d40:	d02f      	beq.n	8010da2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8010d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d46:	d826      	bhi.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d4c:	d02b      	beq.n	8010da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8010d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d52:	d820      	bhi.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d58:	d012      	beq.n	8010d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d5e:	d81a      	bhi.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d022      	beq.n	8010daa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8010d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d68:	d115      	bne.n	8010d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d6e:	3308      	adds	r3, #8
 8010d70:	2101      	movs	r1, #1
 8010d72:	4618      	mov	r0, r3
 8010d74:	f002 f878 	bl	8012e68 <RCCEx_PLL2_Config>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010d7e:	e015      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d84:	3328      	adds	r3, #40	; 0x28
 8010d86:	2101      	movs	r1, #1
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f002 f91f 	bl	8012fcc <RCCEx_PLL3_Config>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010d94:	e00a      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010d9c:	e006      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010d9e:	bf00      	nop
 8010da0:	e004      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010da2:	bf00      	nop
 8010da4:	e002      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010da6:	bf00      	nop
 8010da8:	e000      	b.n	8010dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10b      	bne.n	8010dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010db4:	4ba3      	ldr	r3, [pc, #652]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010db8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010dc4:	4a9f      	ldr	r2, [pc, #636]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010dc6:	430b      	orrs	r3, r1
 8010dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8010dca:	e003      	b.n	8010dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8010de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010de4:	2300      	movs	r3, #0
 8010de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010dee:	460b      	mov	r3, r1
 8010df0:	4313      	orrs	r3, r2
 8010df2:	d037      	beq.n	8010e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8010df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dfe:	d00e      	beq.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8010e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e04:	d816      	bhi.n	8010e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d018      	beq.n	8010e3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8010e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e0e:	d111      	bne.n	8010e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e10:	4b8c      	ldr	r3, [pc, #560]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e14:	4a8b      	ldr	r2, [pc, #556]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010e1c:	e00f      	b.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e22:	3308      	adds	r3, #8
 8010e24:	2101      	movs	r1, #1
 8010e26:	4618      	mov	r0, r3
 8010e28:	f002 f81e 	bl	8012e68 <RCCEx_PLL2_Config>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010e32:	e004      	b.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e34:	2301      	movs	r3, #1
 8010e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010e3a:	e000      	b.n	8010e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8010e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10a      	bne.n	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010e46:	4b7f      	ldr	r3, [pc, #508]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e54:	4a7b      	ldr	r2, [pc, #492]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010e56:	430b      	orrs	r3, r1
 8010e58:	6513      	str	r3, [r2, #80]	; 0x50
 8010e5a:	e003      	b.n	8010e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8010e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e74:	2300      	movs	r3, #0
 8010e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4313      	orrs	r3, r2
 8010e82:	d039      	beq.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e8a:	2b03      	cmp	r3, #3
 8010e8c:	d81c      	bhi.n	8010ec8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010ed1 	.word	0x08010ed1
 8010e98:	08010ea5 	.word	0x08010ea5
 8010e9c:	08010eb3 	.word	0x08010eb3
 8010ea0:	08010ed1 	.word	0x08010ed1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ea4:	4b67      	ldr	r3, [pc, #412]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea8:	4a66      	ldr	r2, [pc, #408]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010eb0:	e00f      	b.n	8010ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eb6:	3308      	adds	r3, #8
 8010eb8:	2102      	movs	r1, #2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f001 ffd4 	bl	8012e68 <RCCEx_PLL2_Config>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010ec6:	e004      	b.n	8010ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010ece:	e000      	b.n	8010ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8010ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d10a      	bne.n	8010ef0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010eda:	4b5a      	ldr	r3, [pc, #360]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ede:	f023 0103 	bic.w	r1, r3, #3
 8010ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ee8:	4a56      	ldr	r2, [pc, #344]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010eea:	430b      	orrs	r3, r1
 8010eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010eee:	e003      	b.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8010f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010f0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8010f12:	460b      	mov	r3, r1
 8010f14:	4313      	orrs	r3, r2
 8010f16:	f000 809f 	beq.w	8011058 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010f1a:	4b4b      	ldr	r3, [pc, #300]	; (8011048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a4a      	ldr	r2, [pc, #296]	; (8011048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010f26:	f7f5 fd5b 	bl	80069e0 <HAL_GetTick>
 8010f2a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010f2e:	e00b      	b.n	8010f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f30:	f7f5 fd56 	bl	80069e0 <HAL_GetTick>
 8010f34:	4602      	mov	r2, r0
 8010f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	2b64      	cmp	r3, #100	; 0x64
 8010f3e:	d903      	bls.n	8010f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010f40:	2303      	movs	r3, #3
 8010f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010f46:	e005      	b.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010f48:	4b3f      	ldr	r3, [pc, #252]	; (8011048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d0ed      	beq.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8010f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d179      	bne.n	8011050 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010f5c:	4b39      	ldr	r3, [pc, #228]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010f68:	4053      	eors	r3, r2
 8010f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d015      	beq.n	8010f9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010f72:	4b34      	ldr	r3, [pc, #208]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010f7e:	4b31      	ldr	r3, [pc, #196]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f82:	4a30      	ldr	r2, [pc, #192]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010f8a:	4b2e      	ldr	r3, [pc, #184]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8e:	4a2d      	ldr	r2, [pc, #180]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010f96:	4a2b      	ldr	r2, [pc, #172]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010f9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010faa:	d118      	bne.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fac:	f7f5 fd18 	bl	80069e0 <HAL_GetTick>
 8010fb0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010fb4:	e00d      	b.n	8010fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fb6:	f7f5 fd13 	bl	80069e0 <HAL_GetTick>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010fc0:	1ad2      	subs	r2, r2, r3
 8010fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d903      	bls.n	8010fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8010fca:	2303      	movs	r3, #3
 8010fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8010fd0:	e005      	b.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010fd2:	4b1c      	ldr	r3, [pc, #112]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fd6:	f003 0302 	and.w	r3, r3, #2
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d0eb      	beq.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8010fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d129      	bne.n	801103a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ff6:	d10e      	bne.n	8011016 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8010ff8:	4b12      	ldr	r3, [pc, #72]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8011000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011008:	091a      	lsrs	r2, r3, #4
 801100a:	4b10      	ldr	r3, [pc, #64]	; (801104c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801100c:	4013      	ands	r3, r2
 801100e:	4a0d      	ldr	r2, [pc, #52]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8011010:	430b      	orrs	r3, r1
 8011012:	6113      	str	r3, [r2, #16]
 8011014:	e005      	b.n	8011022 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8011016:	4b0b      	ldr	r3, [pc, #44]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8011018:	691b      	ldr	r3, [r3, #16]
 801101a:	4a0a      	ldr	r2, [pc, #40]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801101c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011020:	6113      	str	r3, [r2, #16]
 8011022:	4b08      	ldr	r3, [pc, #32]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8011024:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801102a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801102e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011032:	4a04      	ldr	r2, [pc, #16]	; (8011044 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8011034:	430b      	orrs	r3, r1
 8011036:	6713      	str	r3, [r2, #112]	; 0x70
 8011038:	e00e      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801103a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801103e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8011042:	e009      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8011044:	58024400 	.word	0x58024400
 8011048:	58024800 	.word	0x58024800
 801104c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011060:	f002 0301 	and.w	r3, r2, #1
 8011064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011068:	2300      	movs	r3, #0
 801106a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801106e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011072:	460b      	mov	r3, r1
 8011074:	4313      	orrs	r3, r2
 8011076:	f000 8089 	beq.w	801118c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801107a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801107e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011080:	2b28      	cmp	r3, #40	; 0x28
 8011082:	d86b      	bhi.n	801115c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8011084:	a201      	add	r2, pc, #4	; (adr r2, 801108c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108a:	bf00      	nop
 801108c:	08011165 	.word	0x08011165
 8011090:	0801115d 	.word	0x0801115d
 8011094:	0801115d 	.word	0x0801115d
 8011098:	0801115d 	.word	0x0801115d
 801109c:	0801115d 	.word	0x0801115d
 80110a0:	0801115d 	.word	0x0801115d
 80110a4:	0801115d 	.word	0x0801115d
 80110a8:	0801115d 	.word	0x0801115d
 80110ac:	08011131 	.word	0x08011131
 80110b0:	0801115d 	.word	0x0801115d
 80110b4:	0801115d 	.word	0x0801115d
 80110b8:	0801115d 	.word	0x0801115d
 80110bc:	0801115d 	.word	0x0801115d
 80110c0:	0801115d 	.word	0x0801115d
 80110c4:	0801115d 	.word	0x0801115d
 80110c8:	0801115d 	.word	0x0801115d
 80110cc:	08011147 	.word	0x08011147
 80110d0:	0801115d 	.word	0x0801115d
 80110d4:	0801115d 	.word	0x0801115d
 80110d8:	0801115d 	.word	0x0801115d
 80110dc:	0801115d 	.word	0x0801115d
 80110e0:	0801115d 	.word	0x0801115d
 80110e4:	0801115d 	.word	0x0801115d
 80110e8:	0801115d 	.word	0x0801115d
 80110ec:	08011165 	.word	0x08011165
 80110f0:	0801115d 	.word	0x0801115d
 80110f4:	0801115d 	.word	0x0801115d
 80110f8:	0801115d 	.word	0x0801115d
 80110fc:	0801115d 	.word	0x0801115d
 8011100:	0801115d 	.word	0x0801115d
 8011104:	0801115d 	.word	0x0801115d
 8011108:	0801115d 	.word	0x0801115d
 801110c:	08011165 	.word	0x08011165
 8011110:	0801115d 	.word	0x0801115d
 8011114:	0801115d 	.word	0x0801115d
 8011118:	0801115d 	.word	0x0801115d
 801111c:	0801115d 	.word	0x0801115d
 8011120:	0801115d 	.word	0x0801115d
 8011124:	0801115d 	.word	0x0801115d
 8011128:	0801115d 	.word	0x0801115d
 801112c:	08011165 	.word	0x08011165
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011134:	3308      	adds	r3, #8
 8011136:	2101      	movs	r1, #1
 8011138:	4618      	mov	r0, r3
 801113a:	f001 fe95 	bl	8012e68 <RCCEx_PLL2_Config>
 801113e:	4603      	mov	r3, r0
 8011140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011144:	e00f      	b.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801114a:	3328      	adds	r3, #40	; 0x28
 801114c:	2101      	movs	r1, #1
 801114e:	4618      	mov	r0, r3
 8011150:	f001 ff3c 	bl	8012fcc <RCCEx_PLL3_Config>
 8011154:	4603      	mov	r3, r0
 8011156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801115a:	e004      	b.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801115c:	2301      	movs	r3, #1
 801115e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011162:	e000      	b.n	8011166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8011164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10a      	bne.n	8011184 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801116e:	4bbf      	ldr	r3, [pc, #764]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011172:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8011176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801117a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801117c:	4abb      	ldr	r2, [pc, #748]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801117e:	430b      	orrs	r3, r1
 8011180:	6553      	str	r3, [r2, #84]	; 0x54
 8011182:	e003      	b.n	801118c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801118c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011194:	f002 0302 	and.w	r3, r2, #2
 8011198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801119c:	2300      	movs	r3, #0
 801119e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80111a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80111a6:	460b      	mov	r3, r1
 80111a8:	4313      	orrs	r3, r2
 80111aa:	d041      	beq.n	8011230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80111ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111b2:	2b05      	cmp	r3, #5
 80111b4:	d824      	bhi.n	8011200 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80111b6:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80111b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111bc:	08011209 	.word	0x08011209
 80111c0:	080111d5 	.word	0x080111d5
 80111c4:	080111eb 	.word	0x080111eb
 80111c8:	08011209 	.word	0x08011209
 80111cc:	08011209 	.word	0x08011209
 80111d0:	08011209 	.word	0x08011209
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80111d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111d8:	3308      	adds	r3, #8
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f001 fe43 	bl	8012e68 <RCCEx_PLL2_Config>
 80111e2:	4603      	mov	r3, r0
 80111e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80111e8:	e00f      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80111ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111ee:	3328      	adds	r3, #40	; 0x28
 80111f0:	2101      	movs	r1, #1
 80111f2:	4618      	mov	r0, r3
 80111f4:	f001 feea 	bl	8012fcc <RCCEx_PLL3_Config>
 80111f8:	4603      	mov	r3, r0
 80111fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80111fe:	e004      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011200:	2301      	movs	r3, #1
 8011202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011206:	e000      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8011208:	bf00      	nop
    }

    if (ret == HAL_OK)
 801120a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011212:	4b96      	ldr	r3, [pc, #600]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011216:	f023 0107 	bic.w	r1, r3, #7
 801121a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801121e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011220:	4a92      	ldr	r2, [pc, #584]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011222:	430b      	orrs	r3, r1
 8011224:	6553      	str	r3, [r2, #84]	; 0x54
 8011226:	e003      	b.n	8011230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801122c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	f002 0304 	and.w	r3, r2, #4
 801123c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011240:	2300      	movs	r3, #0
 8011242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801124a:	460b      	mov	r3, r1
 801124c:	4313      	orrs	r3, r2
 801124e:	d044      	beq.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8011250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011258:	2b05      	cmp	r3, #5
 801125a:	d825      	bhi.n	80112a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801125c:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011262:	bf00      	nop
 8011264:	080112b1 	.word	0x080112b1
 8011268:	0801127d 	.word	0x0801127d
 801126c:	08011293 	.word	0x08011293
 8011270:	080112b1 	.word	0x080112b1
 8011274:	080112b1 	.word	0x080112b1
 8011278:	080112b1 	.word	0x080112b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801127c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011280:	3308      	adds	r3, #8
 8011282:	2101      	movs	r1, #1
 8011284:	4618      	mov	r0, r3
 8011286:	f001 fdef 	bl	8012e68 <RCCEx_PLL2_Config>
 801128a:	4603      	mov	r3, r0
 801128c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011290:	e00f      	b.n	80112b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011296:	3328      	adds	r3, #40	; 0x28
 8011298:	2101      	movs	r1, #1
 801129a:	4618      	mov	r0, r3
 801129c:	f001 fe96 	bl	8012fcc <RCCEx_PLL3_Config>
 80112a0:	4603      	mov	r3, r0
 80112a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80112a6:	e004      	b.n	80112b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80112a8:	2301      	movs	r3, #1
 80112aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80112ae:	e000      	b.n	80112b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80112b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80112b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10b      	bne.n	80112d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80112ba:	4b6c      	ldr	r3, [pc, #432]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80112bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112be:	f023 0107 	bic.w	r1, r3, #7
 80112c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80112ca:	4a68      	ldr	r2, [pc, #416]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80112cc:	430b      	orrs	r3, r1
 80112ce:	6593      	str	r3, [r2, #88]	; 0x58
 80112d0:	e003      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80112d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80112da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e2:	f002 0320 	and.w	r3, r2, #32
 80112e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80112ea:	2300      	movs	r3, #0
 80112ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80112f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80112f4:	460b      	mov	r3, r1
 80112f6:	4313      	orrs	r3, r2
 80112f8:	d055      	beq.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80112fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011306:	d033      	beq.n	8011370 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8011308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801130c:	d82c      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801130e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011312:	d02f      	beq.n	8011374 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8011314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011318:	d826      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801131a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801131e:	d02b      	beq.n	8011378 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8011320:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011324:	d820      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8011326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801132a:	d012      	beq.n	8011352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801132c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011330:	d81a      	bhi.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8011332:	2b00      	cmp	r3, #0
 8011334:	d022      	beq.n	801137c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8011336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801133a:	d115      	bne.n	8011368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801133c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011340:	3308      	adds	r3, #8
 8011342:	2100      	movs	r1, #0
 8011344:	4618      	mov	r0, r3
 8011346:	f001 fd8f 	bl	8012e68 <RCCEx_PLL2_Config>
 801134a:	4603      	mov	r3, r0
 801134c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011350:	e015      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011356:	3328      	adds	r3, #40	; 0x28
 8011358:	2102      	movs	r1, #2
 801135a:	4618      	mov	r0, r3
 801135c:	f001 fe36 	bl	8012fcc <RCCEx_PLL3_Config>
 8011360:	4603      	mov	r3, r0
 8011362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011366:	e00a      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011368:	2301      	movs	r3, #1
 801136a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801136e:	e006      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8011370:	bf00      	nop
 8011372:	e004      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8011374:	bf00      	nop
 8011376:	e002      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8011378:	bf00      	nop
 801137a:	e000      	b.n	801137e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801137c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801137e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011382:	2b00      	cmp	r3, #0
 8011384:	d10b      	bne.n	801139e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011386:	4b39      	ldr	r3, [pc, #228]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801138a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801138e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011396:	4a35      	ldr	r2, [pc, #212]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011398:	430b      	orrs	r3, r1
 801139a:	6553      	str	r3, [r2, #84]	; 0x54
 801139c:	e003      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801139e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80113a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80113a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80113b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80113b6:	2300      	movs	r3, #0
 80113b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80113bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80113c0:	460b      	mov	r3, r1
 80113c2:	4313      	orrs	r3, r2
 80113c4:	d058      	beq.n	8011478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80113c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80113ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80113d2:	d033      	beq.n	801143c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80113d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80113d8:	d82c      	bhi.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80113da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113de:	d02f      	beq.n	8011440 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80113e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113e4:	d826      	bhi.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80113e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80113ea:	d02b      	beq.n	8011444 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80113ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80113f0:	d820      	bhi.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80113f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113f6:	d012      	beq.n	801141e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80113f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113fc:	d81a      	bhi.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d022      	beq.n	8011448 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8011402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011406:	d115      	bne.n	8011434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801140c:	3308      	adds	r3, #8
 801140e:	2100      	movs	r1, #0
 8011410:	4618      	mov	r0, r3
 8011412:	f001 fd29 	bl	8012e68 <RCCEx_PLL2_Config>
 8011416:	4603      	mov	r3, r0
 8011418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801141c:	e015      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801141e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011422:	3328      	adds	r3, #40	; 0x28
 8011424:	2102      	movs	r1, #2
 8011426:	4618      	mov	r0, r3
 8011428:	f001 fdd0 	bl	8012fcc <RCCEx_PLL3_Config>
 801142c:	4603      	mov	r3, r0
 801142e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011432:	e00a      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801143a:	e006      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801143c:	bf00      	nop
 801143e:	e004      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8011440:	bf00      	nop
 8011442:	e002      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8011448:	bf00      	nop
    }

    if (ret == HAL_OK)
 801144a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10e      	bne.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011452:	4b06      	ldr	r3, [pc, #24]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011456:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801145a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801145e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011462:	4a02      	ldr	r2, [pc, #8]	; (801146c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8011464:	430b      	orrs	r3, r1
 8011466:	6593      	str	r3, [r2, #88]	; 0x58
 8011468:	e006      	b.n	8011478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801146a:	bf00      	nop
 801146c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8011484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011488:	2300      	movs	r3, #0
 801148a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801148e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8011492:	460b      	mov	r3, r1
 8011494:	4313      	orrs	r3, r2
 8011496:	d055      	beq.n	8011544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801149c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80114a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80114a4:	d033      	beq.n	801150e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80114a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80114aa:	d82c      	bhi.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80114ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114b0:	d02f      	beq.n	8011512 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80114b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114b6:	d826      	bhi.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80114b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80114bc:	d02b      	beq.n	8011516 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80114be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80114c2:	d820      	bhi.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80114c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114c8:	d012      	beq.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80114ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114ce:	d81a      	bhi.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d022      	beq.n	801151a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80114d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114d8:	d115      	bne.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80114da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114de:	3308      	adds	r3, #8
 80114e0:	2100      	movs	r1, #0
 80114e2:	4618      	mov	r0, r3
 80114e4:	f001 fcc0 	bl	8012e68 <RCCEx_PLL2_Config>
 80114e8:	4603      	mov	r3, r0
 80114ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80114ee:	e015      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80114f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114f4:	3328      	adds	r3, #40	; 0x28
 80114f6:	2102      	movs	r1, #2
 80114f8:	4618      	mov	r0, r3
 80114fa:	f001 fd67 	bl	8012fcc <RCCEx_PLL3_Config>
 80114fe:	4603      	mov	r3, r0
 8011500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011504:	e00a      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011506:	2301      	movs	r3, #1
 8011508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801150c:	e006      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801150e:	bf00      	nop
 8011510:	e004      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8011512:	bf00      	nop
 8011514:	e002      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8011516:	bf00      	nop
 8011518:	e000      	b.n	801151c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801151a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801151c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10b      	bne.n	801153c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011524:	4ba1      	ldr	r3, [pc, #644]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011528:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801152c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011534:	4a9d      	ldr	r2, [pc, #628]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011536:	430b      	orrs	r3, r1
 8011538:	6593      	str	r3, [r2, #88]	; 0x58
 801153a:	e003      	b.n	8011544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801153c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8011544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	f002 0308 	and.w	r3, r2, #8
 8011550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011554:	2300      	movs	r3, #0
 8011556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801155a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801155e:	460b      	mov	r3, r1
 8011560:	4313      	orrs	r3, r2
 8011562:	d01e      	beq.n	80115a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8011564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801156c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011570:	d10c      	bne.n	801158c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011576:	3328      	adds	r3, #40	; 0x28
 8011578:	2102      	movs	r1, #2
 801157a:	4618      	mov	r0, r3
 801157c:	f001 fd26 	bl	8012fcc <RCCEx_PLL3_Config>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8011586:	2301      	movs	r3, #1
 8011588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801158c:	4b87      	ldr	r3, [pc, #540]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011590:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801159c:	4a83      	ldr	r2, [pc, #524]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801159e:	430b      	orrs	r3, r1
 80115a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80115a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115aa:	f002 0310 	and.w	r3, r2, #16
 80115ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80115b2:	2300      	movs	r3, #0
 80115b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80115b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80115bc:	460b      	mov	r3, r1
 80115be:	4313      	orrs	r3, r2
 80115c0:	d01e      	beq.n	8011600 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80115c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80115ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115ce:	d10c      	bne.n	80115ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80115d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115d4:	3328      	adds	r3, #40	; 0x28
 80115d6:	2102      	movs	r1, #2
 80115d8:	4618      	mov	r0, r3
 80115da:	f001 fcf7 	bl	8012fcc <RCCEx_PLL3_Config>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80115ea:	4b70      	ldr	r3, [pc, #448]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80115ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80115f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80115fa:	4a6c      	ldr	r2, [pc, #432]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80115fc:	430b      	orrs	r3, r1
 80115fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801160c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011610:	2300      	movs	r3, #0
 8011612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011616:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801161a:	460b      	mov	r3, r1
 801161c:	4313      	orrs	r3, r2
 801161e:	d03e      	beq.n	801169e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801162c:	d022      	beq.n	8011674 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801162e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011632:	d81b      	bhi.n	801166c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8011634:	2b00      	cmp	r3, #0
 8011636:	d003      	beq.n	8011640 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8011638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801163c:	d00b      	beq.n	8011656 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801163e:	e015      	b.n	801166c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011644:	3308      	adds	r3, #8
 8011646:	2100      	movs	r1, #0
 8011648:	4618      	mov	r0, r3
 801164a:	f001 fc0d 	bl	8012e68 <RCCEx_PLL2_Config>
 801164e:	4603      	mov	r3, r0
 8011650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8011654:	e00f      	b.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801165a:	3328      	adds	r3, #40	; 0x28
 801165c:	2102      	movs	r1, #2
 801165e:	4618      	mov	r0, r3
 8011660:	f001 fcb4 	bl	8012fcc <RCCEx_PLL3_Config>
 8011664:	4603      	mov	r3, r0
 8011666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801166a:	e004      	b.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011672:	e000      	b.n	8011676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8011674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801167a:	2b00      	cmp	r3, #0
 801167c:	d10b      	bne.n	8011696 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801167e:	4b4b      	ldr	r3, [pc, #300]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011682:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8011686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801168a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801168e:	4a47      	ldr	r2, [pc, #284]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011690:	430b      	orrs	r3, r1
 8011692:	6593      	str	r3, [r2, #88]	; 0x58
 8011694:	e003      	b.n	801169e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801169a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801169e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80116aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80116ac:	2300      	movs	r3, #0
 80116ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80116b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80116b4:	460b      	mov	r3, r1
 80116b6:	4313      	orrs	r3, r2
 80116b8:	d03b      	beq.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80116ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80116be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80116c6:	d01f      	beq.n	8011708 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80116c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80116cc:	d818      	bhi.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80116ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80116d2:	d003      	beq.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80116d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80116d8:	d007      	beq.n	80116ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80116da:	e011      	b.n	8011700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80116dc:	4b33      	ldr	r3, [pc, #204]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80116de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e0:	4a32      	ldr	r2, [pc, #200]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80116e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80116e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80116e8:	e00f      	b.n	801170a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80116ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80116ee:	3328      	adds	r3, #40	; 0x28
 80116f0:	2101      	movs	r1, #1
 80116f2:	4618      	mov	r0, r3
 80116f4:	f001 fc6a 	bl	8012fcc <RCCEx_PLL3_Config>
 80116f8:	4603      	mov	r3, r0
 80116fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80116fe:	e004      	b.n	801170a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011706:	e000      	b.n	801170a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8011708:	bf00      	nop
    }

    if (ret == HAL_OK)
 801170a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10b      	bne.n	801172a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011712:	4b26      	ldr	r3, [pc, #152]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011716:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801171a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011722:	4a22      	ldr	r2, [pc, #136]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011724:	430b      	orrs	r3, r1
 8011726:	6553      	str	r3, [r2, #84]	; 0x54
 8011728:	e003      	b.n	8011732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801172a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801172e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801173e:	673b      	str	r3, [r7, #112]	; 0x70
 8011740:	2300      	movs	r3, #0
 8011742:	677b      	str	r3, [r7, #116]	; 0x74
 8011744:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8011748:	460b      	mov	r3, r1
 801174a:	4313      	orrs	r3, r2
 801174c:	d034      	beq.n	80117b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801174e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011754:	2b00      	cmp	r3, #0
 8011756:	d003      	beq.n	8011760 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8011758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801175c:	d007      	beq.n	801176e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801175e:	e011      	b.n	8011784 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011760:	4b12      	ldr	r3, [pc, #72]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011764:	4a11      	ldr	r2, [pc, #68]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801176a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801176c:	e00e      	b.n	801178c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801176e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011772:	3308      	adds	r3, #8
 8011774:	2102      	movs	r1, #2
 8011776:	4618      	mov	r0, r3
 8011778:	f001 fb76 	bl	8012e68 <RCCEx_PLL2_Config>
 801177c:	4603      	mov	r3, r0
 801177e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011782:	e003      	b.n	801178c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8011784:	2301      	movs	r3, #1
 8011786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801178a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801178c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011790:	2b00      	cmp	r3, #0
 8011792:	d10d      	bne.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011794:	4b05      	ldr	r3, [pc, #20]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801179c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80117a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117a2:	4a02      	ldr	r2, [pc, #8]	; (80117ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80117a4:	430b      	orrs	r3, r1
 80117a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80117a8:	e006      	b.n	80117b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80117aa:	bf00      	nop
 80117ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80117b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80117b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80117bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80117c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80117c6:	2300      	movs	r3, #0
 80117c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80117ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80117ce:	460b      	mov	r3, r1
 80117d0:	4313      	orrs	r3, r2
 80117d2:	d00c      	beq.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80117d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80117d8:	3328      	adds	r3, #40	; 0x28
 80117da:	2102      	movs	r1, #2
 80117dc:	4618      	mov	r0, r3
 80117de:	f001 fbf5 	bl	8012fcc <RCCEx_PLL3_Config>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d002      	beq.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80117e8:	2301      	movs	r3, #1
 80117ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80117ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80117fa:	663b      	str	r3, [r7, #96]	; 0x60
 80117fc:	2300      	movs	r3, #0
 80117fe:	667b      	str	r3, [r7, #100]	; 0x64
 8011800:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8011804:	460b      	mov	r3, r1
 8011806:	4313      	orrs	r3, r2
 8011808:	d038      	beq.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011816:	d018      	beq.n	801184a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8011818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801181c:	d811      	bhi.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801181e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011822:	d014      	beq.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8011824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011828:	d80b      	bhi.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801182a:	2b00      	cmp	r3, #0
 801182c:	d011      	beq.n	8011852 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801182e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011832:	d106      	bne.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011834:	4bc3      	ldr	r3, [pc, #780]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011838:	4ac2      	ldr	r2, [pc, #776]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801183a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801183e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011840:	e008      	b.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011842:	2301      	movs	r3, #1
 8011844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011848:	e004      	b.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801184a:	bf00      	nop
 801184c:	e002      	b.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801184e:	bf00      	nop
 8011850:	e000      	b.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8011852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011858:	2b00      	cmp	r3, #0
 801185a:	d10b      	bne.n	8011874 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801185c:	4bb9      	ldr	r3, [pc, #740]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011860:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801186c:	4ab5      	ldr	r2, [pc, #724]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801186e:	430b      	orrs	r3, r1
 8011870:	6553      	str	r3, [r2, #84]	; 0x54
 8011872:	e003      	b.n	801187c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801187c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8011888:	65bb      	str	r3, [r7, #88]	; 0x58
 801188a:	2300      	movs	r3, #0
 801188c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801188e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8011892:	460b      	mov	r3, r1
 8011894:	4313      	orrs	r3, r2
 8011896:	d009      	beq.n	80118ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011898:	4baa      	ldr	r3, [pc, #680]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801189c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80118a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80118a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118a6:	4aa7      	ldr	r2, [pc, #668]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80118a8:	430b      	orrs	r3, r1
 80118aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80118ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80118b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80118b8:	653b      	str	r3, [r7, #80]	; 0x50
 80118ba:	2300      	movs	r3, #0
 80118bc:	657b      	str	r3, [r7, #84]	; 0x54
 80118be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80118c2:	460b      	mov	r3, r1
 80118c4:	4313      	orrs	r3, r2
 80118c6:	d00a      	beq.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80118c8:	4b9e      	ldr	r3, [pc, #632]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80118ca:	691b      	ldr	r3, [r3, #16]
 80118cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80118d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80118d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80118d8:	4a9a      	ldr	r2, [pc, #616]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80118da:	430b      	orrs	r3, r1
 80118dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80118de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80118e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80118ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80118ec:	2300      	movs	r3, #0
 80118ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80118f4:	460b      	mov	r3, r1
 80118f6:	4313      	orrs	r3, r2
 80118f8:	d009      	beq.n	801190e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80118fa:	4b92      	ldr	r3, [pc, #584]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80118fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8011902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011908:	4a8e      	ldr	r2, [pc, #568]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801190a:	430b      	orrs	r3, r1
 801190c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801190e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011916:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801191a:	643b      	str	r3, [r7, #64]	; 0x40
 801191c:	2300      	movs	r3, #0
 801191e:	647b      	str	r3, [r7, #68]	; 0x44
 8011920:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8011924:	460b      	mov	r3, r1
 8011926:	4313      	orrs	r3, r2
 8011928:	d00e      	beq.n	8011948 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801192a:	4b86      	ldr	r3, [pc, #536]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801192c:	691b      	ldr	r3, [r3, #16]
 801192e:	4a85      	ldr	r2, [pc, #532]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011934:	6113      	str	r3, [r2, #16]
 8011936:	4b83      	ldr	r3, [pc, #524]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011938:	6919      	ldr	r1, [r3, #16]
 801193a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801193e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011942:	4a80      	ldr	r2, [pc, #512]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011944:	430b      	orrs	r3, r1
 8011946:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8011954:	63bb      	str	r3, [r7, #56]	; 0x38
 8011956:	2300      	movs	r3, #0
 8011958:	63fb      	str	r3, [r7, #60]	; 0x3c
 801195a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801195e:	460b      	mov	r3, r1
 8011960:	4313      	orrs	r3, r2
 8011962:	d009      	beq.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011964:	4b77      	ldr	r3, [pc, #476]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011968:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801196c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011972:	4a74      	ldr	r2, [pc, #464]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011974:	430b      	orrs	r3, r1
 8011976:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011980:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8011984:	633b      	str	r3, [r7, #48]	; 0x30
 8011986:	2300      	movs	r3, #0
 8011988:	637b      	str	r3, [r7, #52]	; 0x34
 801198a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801198e:	460b      	mov	r3, r1
 8011990:	4313      	orrs	r3, r2
 8011992:	d00a      	beq.n	80119aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011994:	4b6b      	ldr	r3, [pc, #428]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011998:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801199c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80119a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119a4:	4a67      	ldr	r2, [pc, #412]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80119a6:	430b      	orrs	r3, r1
 80119a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80119aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	2100      	movs	r1, #0
 80119b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80119b6:	f003 0301 	and.w	r3, r3, #1
 80119ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80119c0:	460b      	mov	r3, r1
 80119c2:	4313      	orrs	r3, r2
 80119c4:	d011      	beq.n	80119ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80119c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80119ca:	3308      	adds	r3, #8
 80119cc:	2100      	movs	r1, #0
 80119ce:	4618      	mov	r0, r3
 80119d0:	f001 fa4a 	bl	8012e68 <RCCEx_PLL2_Config>
 80119d4:	4603      	mov	r3, r0
 80119d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80119da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d003      	beq.n	80119ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80119e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80119ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80119ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f2:	2100      	movs	r1, #0
 80119f4:	6239      	str	r1, [r7, #32]
 80119f6:	f003 0302 	and.w	r3, r3, #2
 80119fa:	627b      	str	r3, [r7, #36]	; 0x24
 80119fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011a00:	460b      	mov	r3, r1
 8011a02:	4313      	orrs	r3, r2
 8011a04:	d011      	beq.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011a0a:	3308      	adds	r3, #8
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f001 fa2a 	bl	8012e68 <RCCEx_PLL2_Config>
 8011a14:	4603      	mov	r3, r0
 8011a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	2100      	movs	r1, #0
 8011a34:	61b9      	str	r1, [r7, #24]
 8011a36:	f003 0304 	and.w	r3, r3, #4
 8011a3a:	61fb      	str	r3, [r7, #28]
 8011a3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011a40:	460b      	mov	r3, r1
 8011a42:	4313      	orrs	r3, r2
 8011a44:	d011      	beq.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011a4a:	3308      	adds	r3, #8
 8011a4c:	2102      	movs	r1, #2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f001 fa0a 	bl	8012e68 <RCCEx_PLL2_Config>
 8011a54:	4603      	mov	r3, r0
 8011a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d003      	beq.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8011a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a72:	2100      	movs	r1, #0
 8011a74:	6139      	str	r1, [r7, #16]
 8011a76:	f003 0308 	and.w	r3, r3, #8
 8011a7a:	617b      	str	r3, [r7, #20]
 8011a7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011a80:	460b      	mov	r3, r1
 8011a82:	4313      	orrs	r3, r2
 8011a84:	d011      	beq.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011a8a:	3328      	adds	r3, #40	; 0x28
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f001 fa9c 	bl	8012fcc <RCCEx_PLL3_Config>
 8011a94:	4603      	mov	r3, r0
 8011a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8011a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d003      	beq.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	f003 0310 	and.w	r3, r3, #16
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	d011      	beq.n	8011aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011aca:	3328      	adds	r3, #40	; 0x28
 8011acc:	2101      	movs	r1, #1
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f001 fa7c 	bl	8012fcc <RCCEx_PLL3_Config>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d003      	beq.n	8011aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	2100      	movs	r1, #0
 8011af4:	6039      	str	r1, [r7, #0]
 8011af6:	f003 0320 	and.w	r3, r3, #32
 8011afa:	607b      	str	r3, [r7, #4]
 8011afc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011b00:	460b      	mov	r3, r1
 8011b02:	4313      	orrs	r3, r2
 8011b04:	d011      	beq.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011b0a:	3328      	adds	r3, #40	; 0x28
 8011b0c:	2102      	movs	r1, #2
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f001 fa5c 	bl	8012fcc <RCCEx_PLL3_Config>
 8011b14:	4603      	mov	r3, r0
 8011b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d003      	beq.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8011b2a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d101      	bne.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	e000      	b.n	8011b38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b44:	58024400 	.word	0x58024400

08011b48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b090      	sub	sp, #64	; 0x40
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b56:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8011b5a:	430b      	orrs	r3, r1
 8011b5c:	f040 8094 	bne.w	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8011b60:	4b9e      	ldr	r3, [pc, #632]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b64:	f003 0307 	and.w	r3, r3, #7
 8011b68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6c:	2b04      	cmp	r3, #4
 8011b6e:	f200 8087 	bhi.w	8011c80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8011b72:	a201      	add	r2, pc, #4	; (adr r2, 8011b78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8011b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b78:	08011b8d 	.word	0x08011b8d
 8011b7c:	08011bb5 	.word	0x08011bb5
 8011b80:	08011bdd 	.word	0x08011bdd
 8011b84:	08011c79 	.word	0x08011c79
 8011b88:	08011c05 	.word	0x08011c05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011b8c:	4b93      	ldr	r3, [pc, #588]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b98:	d108      	bne.n	8011bac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f001 f810 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ba8:	f000 bd45 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bac:	2300      	movs	r3, #0
 8011bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bb0:	f000 bd41 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011bb4:	4b89      	ldr	r3, [pc, #548]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011bc0:	d108      	bne.n	8011bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bc2:	f107 0318 	add.w	r3, r7, #24
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 fd54 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011bd0:	f000 bd31 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bd8:	f000 bd2d 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011bdc:	4b7f      	ldr	r3, [pc, #508]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011be8:	d108      	bne.n	8011bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bea:	f107 030c 	add.w	r3, r7, #12
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 fe94 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011bf8:	f000 bd1d 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c00:	f000 bd19 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011c04:	4b75      	ldr	r3, [pc, #468]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011c0c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011c0e:	4b73      	ldr	r3, [pc, #460]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f003 0304 	and.w	r3, r3, #4
 8011c16:	2b04      	cmp	r3, #4
 8011c18:	d10c      	bne.n	8011c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8011c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d109      	bne.n	8011c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011c20:	4b6e      	ldr	r3, [pc, #440]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	08db      	lsrs	r3, r3, #3
 8011c26:	f003 0303 	and.w	r3, r3, #3
 8011c2a:	4a6d      	ldr	r2, [pc, #436]	; (8011de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8011c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c32:	e01f      	b.n	8011c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011c34:	4b69      	ldr	r3, [pc, #420]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c40:	d106      	bne.n	8011c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8011c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c48:	d102      	bne.n	8011c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011c4a:	4b66      	ldr	r3, [pc, #408]	; (8011de4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c4e:	e011      	b.n	8011c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011c50:	4b62      	ldr	r3, [pc, #392]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c5c:	d106      	bne.n	8011c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8011c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c64:	d102      	bne.n	8011c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011c66:	4b60      	ldr	r3, [pc, #384]	; (8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c6a:	e003      	b.n	8011c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011c70:	f000 bce1 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011c74:	f000 bcdf 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011c78:	4b5c      	ldr	r3, [pc, #368]	; (8011dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7c:	f000 bcdb 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011c80:	2300      	movs	r3, #0
 8011c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c84:	f000 bcd7 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c8c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8011c90:	430b      	orrs	r3, r1
 8011c92:	f040 80ad 	bne.w	8011df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8011c96:	4b51      	ldr	r3, [pc, #324]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8011c9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ca6:	d056      	beq.n	8011d56 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8011ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cae:	f200 8090 	bhi.w	8011dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8011cb6:	f000 8088 	beq.w	8011dca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8011cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cbc:	2bc0      	cmp	r3, #192	; 0xc0
 8011cbe:	f200 8088 	bhi.w	8011dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc4:	2b80      	cmp	r3, #128	; 0x80
 8011cc6:	d032      	beq.n	8011d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cca:	2b80      	cmp	r3, #128	; 0x80
 8011ccc:	f200 8081 	bhi.w	8011dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d003      	beq.n	8011cde <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8011cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd8:	2b40      	cmp	r3, #64	; 0x40
 8011cda:	d014      	beq.n	8011d06 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8011cdc:	e079      	b.n	8011dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011cde:	4b3f      	ldr	r3, [pc, #252]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011cea:	d108      	bne.n	8011cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f000 ff67 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011cfa:	f000 bc9c 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d02:	f000 bc98 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d06:	4b35      	ldr	r3, [pc, #212]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d12:	d108      	bne.n	8011d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d14:	f107 0318 	add.w	r3, r7, #24
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 fcab 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d22:	f000 bc88 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d2a:	f000 bc84 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d2e:	4b2b      	ldr	r3, [pc, #172]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d3a:	d108      	bne.n	8011d4e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d3c:	f107 030c 	add.w	r3, r7, #12
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 fdeb 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d4a:	f000 bc74 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d52:	f000 bc70 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011d56:	4b21      	ldr	r3, [pc, #132]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011d5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011d60:	4b1e      	ldr	r3, [pc, #120]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f003 0304 	and.w	r3, r3, #4
 8011d68:	2b04      	cmp	r3, #4
 8011d6a:	d10c      	bne.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8011d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d109      	bne.n	8011d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d72:	4b1a      	ldr	r3, [pc, #104]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	08db      	lsrs	r3, r3, #3
 8011d78:	f003 0303 	and.w	r3, r3, #3
 8011d7c:	4a18      	ldr	r2, [pc, #96]	; (8011de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d84:	e01f      	b.n	8011dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011d86:	4b15      	ldr	r3, [pc, #84]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d92:	d106      	bne.n	8011da2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8011d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d9a:	d102      	bne.n	8011da2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011d9c:	4b11      	ldr	r3, [pc, #68]	; (8011de4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011da0:	e011      	b.n	8011dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011da2:	4b0e      	ldr	r3, [pc, #56]	; (8011ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011dae:	d106      	bne.n	8011dbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8011db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011db6:	d102      	bne.n	8011dbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011db8:	4b0b      	ldr	r3, [pc, #44]	; (8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dbc:	e003      	b.n	8011dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011dc2:	f000 bc38 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011dc6:	f000 bc36 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011dca:	4b08      	ldr	r3, [pc, #32]	; (8011dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dce:	f000 bc32 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dd6:	f000 bc2e 	b.w	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011dda:	bf00      	nop
 8011ddc:	58024400 	.word	0x58024400
 8011de0:	03d09000 	.word	0x03d09000
 8011de4:	003d0900 	.word	0x003d0900
 8011de8:	017d7840 	.word	0x017d7840
 8011dec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8011df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011df4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8011df8:	430b      	orrs	r3, r1
 8011dfa:	f040 809c 	bne.w	8011f36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8011dfe:	4b9e      	ldr	r3, [pc, #632]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e02:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8011e06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011e0e:	d054      	beq.n	8011eba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011e16:	f200 808b 	bhi.w	8011f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011e20:	f000 8083 	beq.w	8011f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8011e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011e2a:	f200 8081 	bhi.w	8011f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e34:	d02f      	beq.n	8011e96 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e3c:	d878      	bhi.n	8011f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d004      	beq.n	8011e4e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e4a:	d012      	beq.n	8011e72 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8011e4c:	e070      	b.n	8011f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e4e:	4b8a      	ldr	r3, [pc, #552]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e5a:	d107      	bne.n	8011e6c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e60:	4618      	mov	r0, r3
 8011e62:	f000 feaf 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e6a:	e3e4      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e70:	e3e1      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e72:	4b81      	ldr	r3, [pc, #516]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e7e:	d107      	bne.n	8011e90 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e80:	f107 0318 	add.w	r3, r7, #24
 8011e84:	4618      	mov	r0, r3
 8011e86:	f000 fbf5 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e8e:	e3d2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e94:	e3cf      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011e96:	4b78      	ldr	r3, [pc, #480]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ea2:	d107      	bne.n	8011eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ea4:	f107 030c 	add.w	r3, r7, #12
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f000 fd37 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011eb2:	e3c0      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011eb8:	e3bd      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011eba:	4b6f      	ldr	r3, [pc, #444]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011ec2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011ec4:	4b6c      	ldr	r3, [pc, #432]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f003 0304 	and.w	r3, r3, #4
 8011ecc:	2b04      	cmp	r3, #4
 8011ece:	d10c      	bne.n	8011eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8011ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d109      	bne.n	8011eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011ed6:	4b68      	ldr	r3, [pc, #416]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	08db      	lsrs	r3, r3, #3
 8011edc:	f003 0303 	and.w	r3, r3, #3
 8011ee0:	4a66      	ldr	r2, [pc, #408]	; (801207c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8011ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ee8:	e01e      	b.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011eea:	4b63      	ldr	r3, [pc, #396]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ef6:	d106      	bne.n	8011f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8011ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011efe:	d102      	bne.n	8011f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011f00:	4b5f      	ldr	r3, [pc, #380]	; (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f04:	e010      	b.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011f06:	4b5c      	ldr	r3, [pc, #368]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f12:	d106      	bne.n	8011f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f1a:	d102      	bne.n	8011f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011f1c:	4b59      	ldr	r3, [pc, #356]	; (8012084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f20:	e002      	b.n	8011f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011f26:	e386      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011f28:	e385      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011f2a:	4b57      	ldr	r3, [pc, #348]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f2e:	e382      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f34:	e37f      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f3a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8011f3e:	430b      	orrs	r3, r1
 8011f40:	f040 80a7 	bne.w	8012092 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011f44:	4b4c      	ldr	r3, [pc, #304]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8011f4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011f54:	d055      	beq.n	8012002 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011f5c:	f200 8096 	bhi.w	801208c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011f66:	f000 8084 	beq.w	8012072 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011f70:	f200 808c 	bhi.w	801208c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011f7a:	d030      	beq.n	8011fde <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011f82:	f200 8083 	bhi.w	801208c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d004      	beq.n	8011f96 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011f92:	d012      	beq.n	8011fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8011f94:	e07a      	b.n	801208c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011f96:	4b38      	ldr	r3, [pc, #224]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011fa2:	d107      	bne.n	8011fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f000 fe0b 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fb2:	e340      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fb8:	e33d      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011fba:	4b2f      	ldr	r3, [pc, #188]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011fc6:	d107      	bne.n	8011fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fc8:	f107 0318 	add.w	r3, r7, #24
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f000 fb51 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fd6:	e32e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fdc:	e32b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011fde:	4b26      	ldr	r3, [pc, #152]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011fea:	d107      	bne.n	8011ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011fec:	f107 030c 	add.w	r3, r7, #12
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f000 fc93 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ffa:	e31c      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012000:	e319      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012002:	4b1d      	ldr	r3, [pc, #116]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801200a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801200c:	4b1a      	ldr	r3, [pc, #104]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f003 0304 	and.w	r3, r3, #4
 8012014:	2b04      	cmp	r3, #4
 8012016:	d10c      	bne.n	8012032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8012018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201a:	2b00      	cmp	r3, #0
 801201c:	d109      	bne.n	8012032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801201e:	4b16      	ldr	r3, [pc, #88]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	08db      	lsrs	r3, r3, #3
 8012024:	f003 0303 	and.w	r3, r3, #3
 8012028:	4a14      	ldr	r2, [pc, #80]	; (801207c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801202a:	fa22 f303 	lsr.w	r3, r2, r3
 801202e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012030:	e01e      	b.n	8012070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012032:	4b11      	ldr	r3, [pc, #68]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801203e:	d106      	bne.n	801204e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8012040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012046:	d102      	bne.n	801204e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012048:	4b0d      	ldr	r3, [pc, #52]	; (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801204c:	e010      	b.n	8012070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801205a:	d106      	bne.n	801206a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012062:	d102      	bne.n	801206a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012064:	4b07      	ldr	r3, [pc, #28]	; (8012084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8012066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012068:	e002      	b.n	8012070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801206a:	2300      	movs	r3, #0
 801206c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801206e:	e2e2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012070:	e2e1      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012072:	4b05      	ldr	r3, [pc, #20]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8012074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012076:	e2de      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012078:	58024400 	.word	0x58024400
 801207c:	03d09000 	.word	0x03d09000
 8012080:	003d0900 	.word	0x003d0900
 8012084:	017d7840 	.word	0x017d7840
 8012088:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801208c:	2300      	movs	r3, #0
 801208e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012090:	e2d1      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012096:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801209a:	430b      	orrs	r3, r1
 801209c:	f040 809c 	bne.w	80121d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80120a0:	4b93      	ldr	r3, [pc, #588]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80120a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80120a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80120aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120b0:	d054      	beq.n	801215c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80120b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120b8:	f200 808b 	bhi.w	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80120bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120c2:	f000 8083 	beq.w	80121cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80120c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120cc:	f200 8081 	bhi.w	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80120d6:	d02f      	beq.n	8012138 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80120de:	d878      	bhi.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120ec:	d012      	beq.n	8012114 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80120ee:	e070      	b.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80120f0:	4b7f      	ldr	r3, [pc, #508]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80120f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80120fc:	d107      	bne.n	801210e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80120fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012102:	4618      	mov	r0, r3
 8012104:	f000 fd5e 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801210c:	e293      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012112:	e290      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012114:	4b76      	ldr	r3, [pc, #472]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801211c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012120:	d107      	bne.n	8012132 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012122:	f107 0318 	add.w	r3, r7, #24
 8012126:	4618      	mov	r0, r3
 8012128:	f000 faa4 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012130:	e281      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012132:	2300      	movs	r3, #0
 8012134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012136:	e27e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012138:	4b6d      	ldr	r3, [pc, #436]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012144:	d107      	bne.n	8012156 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012146:	f107 030c 	add.w	r3, r7, #12
 801214a:	4618      	mov	r0, r3
 801214c:	f000 fbe6 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012154:	e26f      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801215a:	e26c      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801215c:	4b64      	ldr	r3, [pc, #400]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012164:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012166:	4b62      	ldr	r3, [pc, #392]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f003 0304 	and.w	r3, r3, #4
 801216e:	2b04      	cmp	r3, #4
 8012170:	d10c      	bne.n	801218c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8012172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012174:	2b00      	cmp	r3, #0
 8012176:	d109      	bne.n	801218c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012178:	4b5d      	ldr	r3, [pc, #372]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	08db      	lsrs	r3, r3, #3
 801217e:	f003 0303 	and.w	r3, r3, #3
 8012182:	4a5c      	ldr	r2, [pc, #368]	; (80122f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8012184:	fa22 f303 	lsr.w	r3, r2, r3
 8012188:	63fb      	str	r3, [r7, #60]	; 0x3c
 801218a:	e01e      	b.n	80121ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801218c:	4b58      	ldr	r3, [pc, #352]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012198:	d106      	bne.n	80121a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121a0:	d102      	bne.n	80121a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80121a2:	4b55      	ldr	r3, [pc, #340]	; (80122f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80121a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121a6:	e010      	b.n	80121ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80121a8:	4b51      	ldr	r3, [pc, #324]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80121b4:	d106      	bne.n	80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80121b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121bc:	d102      	bne.n	80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80121be:	4b4f      	ldr	r3, [pc, #316]	; (80122fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80121c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121c2:	e002      	b.n	80121ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80121c8:	e235      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80121ca:	e234      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80121cc:	4b4c      	ldr	r3, [pc, #304]	; (8012300 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80121ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121d0:	e231      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121d6:	e22e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80121d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121dc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80121e0:	430b      	orrs	r3, r1
 80121e2:	f040 808f 	bne.w	8012304 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80121e6:	4b42      	ldr	r3, [pc, #264]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80121e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80121ee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80121f6:	d06b      	beq.n	80122d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80121f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80121fe:	d874      	bhi.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8012200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012206:	d056      	beq.n	80122b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8012208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801220e:	d86c      	bhi.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8012210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012216:	d03b      	beq.n	8012290 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8012218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801221e:	d864      	bhi.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8012220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012226:	d021      	beq.n	801226c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8012228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801222e:	d85c      	bhi.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8012230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012232:	2b00      	cmp	r3, #0
 8012234:	d004      	beq.n	8012240 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8012236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801223c:	d004      	beq.n	8012248 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801223e:	e054      	b.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8012240:	f7fe fa0a 	bl	8010658 <HAL_RCC_GetPCLK1Freq>
 8012244:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012246:	e1f6      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012248:	4b29      	ldr	r3, [pc, #164]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012254:	d107      	bne.n	8012266 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012256:	f107 0318 	add.w	r3, r7, #24
 801225a:	4618      	mov	r0, r3
 801225c:	f000 fa0a 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012264:	e1e7      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012266:	2300      	movs	r3, #0
 8012268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801226a:	e1e4      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801226c:	4b20      	ldr	r3, [pc, #128]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012278:	d107      	bne.n	801228a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801227a:	f107 030c 	add.w	r3, r7, #12
 801227e:	4618      	mov	r0, r3
 8012280:	f000 fb4c 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012288:	e1d5      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801228a:	2300      	movs	r3, #0
 801228c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801228e:	e1d2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012290:	4b17      	ldr	r3, [pc, #92]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f003 0304 	and.w	r3, r3, #4
 8012298:	2b04      	cmp	r3, #4
 801229a:	d109      	bne.n	80122b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801229c:	4b14      	ldr	r3, [pc, #80]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	08db      	lsrs	r3, r3, #3
 80122a2:	f003 0303 	and.w	r3, r3, #3
 80122a6:	4a13      	ldr	r2, [pc, #76]	; (80122f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80122a8:	fa22 f303 	lsr.w	r3, r2, r3
 80122ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80122ae:	e1c2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80122b0:	2300      	movs	r3, #0
 80122b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122b4:	e1bf      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80122b6:	4b0e      	ldr	r3, [pc, #56]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122c2:	d102      	bne.n	80122ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80122c4:	4b0c      	ldr	r3, [pc, #48]	; (80122f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80122c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80122c8:	e1b5      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80122ca:	2300      	movs	r3, #0
 80122cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122ce:	e1b2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80122d0:	4b07      	ldr	r3, [pc, #28]	; (80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80122dc:	d102      	bne.n	80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80122de:	4b07      	ldr	r3, [pc, #28]	; (80122fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80122e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80122e2:	e1a8      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80122e4:	2300      	movs	r3, #0
 80122e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122e8:	e1a5      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122ee:	e1a2      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80122f0:	58024400 	.word	0x58024400
 80122f4:	03d09000 	.word	0x03d09000
 80122f8:	003d0900 	.word	0x003d0900
 80122fc:	017d7840 	.word	0x017d7840
 8012300:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012308:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801230c:	430b      	orrs	r3, r1
 801230e:	d173      	bne.n	80123f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012310:	4b9c      	ldr	r3, [pc, #624]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012318:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012320:	d02f      	beq.n	8012382 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012328:	d863      	bhi.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	2b00      	cmp	r3, #0
 801232e:	d004      	beq.n	801233a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8012330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012336:	d012      	beq.n	801235e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8012338:	e05b      	b.n	80123f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801233a:	4b92      	ldr	r3, [pc, #584]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012346:	d107      	bne.n	8012358 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012348:	f107 0318 	add.w	r3, r7, #24
 801234c:	4618      	mov	r0, r3
 801234e:	f000 f991 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012356:	e16e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012358:	2300      	movs	r3, #0
 801235a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801235c:	e16b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801235e:	4b89      	ldr	r3, [pc, #548]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801236a:	d107      	bne.n	801237c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801236c:	f107 030c 	add.w	r3, r7, #12
 8012370:	4618      	mov	r0, r3
 8012372:	f000 fad3 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801237a:	e15c      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012380:	e159      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012382:	4b80      	ldr	r3, [pc, #512]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801238a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801238c:	4b7d      	ldr	r3, [pc, #500]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f003 0304 	and.w	r3, r3, #4
 8012394:	2b04      	cmp	r3, #4
 8012396:	d10c      	bne.n	80123b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8012398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239a:	2b00      	cmp	r3, #0
 801239c:	d109      	bne.n	80123b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801239e:	4b79      	ldr	r3, [pc, #484]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	08db      	lsrs	r3, r3, #3
 80123a4:	f003 0303 	and.w	r3, r3, #3
 80123a8:	4a77      	ldr	r2, [pc, #476]	; (8012588 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80123aa:	fa22 f303 	lsr.w	r3, r2, r3
 80123ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123b0:	e01e      	b.n	80123f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80123b2:	4b74      	ldr	r3, [pc, #464]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123be:	d106      	bne.n	80123ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80123c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80123c6:	d102      	bne.n	80123ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80123c8:	4b70      	ldr	r3, [pc, #448]	; (801258c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80123ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123cc:	e010      	b.n	80123f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80123ce:	4b6d      	ldr	r3, [pc, #436]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80123da:	d106      	bne.n	80123ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80123dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123e2:	d102      	bne.n	80123ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80123e4:	4b6a      	ldr	r3, [pc, #424]	; (8012590 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80123e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123e8:	e002      	b.n	80123f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80123ea:	2300      	movs	r3, #0
 80123ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80123ee:	e122      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80123f0:	e121      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123f6:	e11e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80123f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8012400:	430b      	orrs	r3, r1
 8012402:	d133      	bne.n	801246c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8012404:	4b5f      	ldr	r3, [pc, #380]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801240c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012410:	2b00      	cmp	r3, #0
 8012412:	d004      	beq.n	801241e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8012414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801241a:	d012      	beq.n	8012442 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801241c:	e023      	b.n	8012466 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801241e:	4b59      	ldr	r3, [pc, #356]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801242a:	d107      	bne.n	801243c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801242c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012430:	4618      	mov	r0, r3
 8012432:	f000 fbc7 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801243a:	e0fc      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012440:	e0f9      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012442:	4b50      	ldr	r3, [pc, #320]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801244a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801244e:	d107      	bne.n	8012460 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012450:	f107 0318 	add.w	r3, r7, #24
 8012454:	4618      	mov	r0, r3
 8012456:	f000 f90d 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801245a:	6a3b      	ldr	r3, [r7, #32]
 801245c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801245e:	e0ea      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012460:	2300      	movs	r3, #0
 8012462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012464:	e0e7      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801246a:	e0e4      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801246c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012470:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8012474:	430b      	orrs	r3, r1
 8012476:	f040 808d 	bne.w	8012594 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801247a:	4b42      	ldr	r3, [pc, #264]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801247e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8012482:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8012484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801248a:	d06b      	beq.n	8012564 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012492:	d874      	bhi.n	801257e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8012494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801249a:	d056      	beq.n	801254a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124a2:	d86c      	bhi.n	801257e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80124a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80124aa:	d03b      	beq.n	8012524 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80124ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80124b2:	d864      	bhi.n	801257e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80124ba:	d021      	beq.n	8012500 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80124bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80124c2:	d85c      	bhi.n	801257e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d004      	beq.n	80124d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80124ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80124d0:	d004      	beq.n	80124dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80124d2:	e054      	b.n	801257e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80124d4:	f000 f8b8 	bl	8012648 <HAL_RCCEx_GetD3PCLK1Freq>
 80124d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124da:	e0ac      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80124dc:	4b29      	ldr	r3, [pc, #164]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80124e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80124e8:	d107      	bne.n	80124fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124ea:	f107 0318 	add.w	r3, r7, #24
 80124ee:	4618      	mov	r0, r3
 80124f0:	f000 f8c0 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80124f8:	e09d      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124fe:	e09a      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012500:	4b20      	ldr	r3, [pc, #128]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801250c:	d107      	bne.n	801251e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801250e:	f107 030c 	add.w	r3, r7, #12
 8012512:	4618      	mov	r0, r3
 8012514:	f000 fa02 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801251c:	e08b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012522:	e088      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012524:	4b17      	ldr	r3, [pc, #92]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f003 0304 	and.w	r3, r3, #4
 801252c:	2b04      	cmp	r3, #4
 801252e:	d109      	bne.n	8012544 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012530:	4b14      	ldr	r3, [pc, #80]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	08db      	lsrs	r3, r3, #3
 8012536:	f003 0303 	and.w	r3, r3, #3
 801253a:	4a13      	ldr	r2, [pc, #76]	; (8012588 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801253c:	fa22 f303 	lsr.w	r3, r2, r3
 8012540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012542:	e078      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012544:	2300      	movs	r3, #0
 8012546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012548:	e075      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801254a:	4b0e      	ldr	r3, [pc, #56]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012556:	d102      	bne.n	801255e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8012558:	4b0c      	ldr	r3, [pc, #48]	; (801258c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801255a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801255c:	e06b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012562:	e068      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012564:	4b07      	ldr	r3, [pc, #28]	; (8012584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012570:	d102      	bne.n	8012578 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8012572:	4b07      	ldr	r3, [pc, #28]	; (8012590 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8012574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012576:	e05e      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012578:	2300      	movs	r3, #0
 801257a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801257c:	e05b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012582:	e058      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012584:	58024400 	.word	0x58024400
 8012588:	03d09000 	.word	0x03d09000
 801258c:	003d0900 	.word	0x003d0900
 8012590:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012598:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801259c:	430b      	orrs	r3, r1
 801259e:	d148      	bne.n	8012632 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80125a0:	4b27      	ldr	r3, [pc, #156]	; (8012640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80125a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80125a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80125aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125b0:	d02a      	beq.n	8012608 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125b8:	d838      	bhi.n	801262c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80125ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d004      	beq.n	80125ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80125c6:	d00d      	beq.n	80125e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80125c8:	e030      	b.n	801262c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80125ca:	4b1d      	ldr	r3, [pc, #116]	; (8012640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80125d6:	d102      	bne.n	80125de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80125d8:	4b1a      	ldr	r3, [pc, #104]	; (8012644 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80125da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80125dc:	e02b      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125e2:	e028      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80125e4:	4b16      	ldr	r3, [pc, #88]	; (8012640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80125f0:	d107      	bne.n	8012602 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80125f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125f6:	4618      	mov	r0, r3
 80125f8:	f000 fae4 	bl	8012bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012600:	e019      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012606:	e016      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012608:	4b0d      	ldr	r3, [pc, #52]	; (8012640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012614:	d107      	bne.n	8012626 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012616:	f107 0318 	add.w	r3, r7, #24
 801261a:	4618      	mov	r0, r3
 801261c:	f000 f82a 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012624:	e007      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012626:	2300      	movs	r3, #0
 8012628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801262a:	e004      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012630:	e001      	b.n	8012636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8012632:	2300      	movs	r3, #0
 8012634:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8012636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012638:	4618      	mov	r0, r3
 801263a:	3740      	adds	r7, #64	; 0x40
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	58024400 	.word	0x58024400
 8012644:	017d7840 	.word	0x017d7840

08012648 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801264c:	f7fd ffd4 	bl	80105f8 <HAL_RCC_GetHCLKFreq>
 8012650:	4602      	mov	r2, r0
 8012652:	4b06      	ldr	r3, [pc, #24]	; (801266c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	091b      	lsrs	r3, r3, #4
 8012658:	f003 0307 	and.w	r3, r3, #7
 801265c:	4904      	ldr	r1, [pc, #16]	; (8012670 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801265e:	5ccb      	ldrb	r3, [r1, r3]
 8012660:	f003 031f 	and.w	r3, r3, #31
 8012664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012668:	4618      	mov	r0, r3
 801266a:	bd80      	pop	{r7, pc}
 801266c:	58024400 	.word	0x58024400
 8012670:	0801c1cc 	.word	0x0801c1cc

08012674 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012674:	b480      	push	{r7}
 8012676:	b089      	sub	sp, #36	; 0x24
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801267c:	4ba1      	ldr	r3, [pc, #644]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012680:	f003 0303 	and.w	r3, r3, #3
 8012684:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8012686:	4b9f      	ldr	r3, [pc, #636]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801268a:	0b1b      	lsrs	r3, r3, #12
 801268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012690:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012692:	4b9c      	ldr	r3, [pc, #624]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012696:	091b      	lsrs	r3, r3, #4
 8012698:	f003 0301 	and.w	r3, r3, #1
 801269c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801269e:	4b99      	ldr	r3, [pc, #612]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126a2:	08db      	lsrs	r3, r3, #3
 80126a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126a8:	693a      	ldr	r2, [r7, #16]
 80126aa:	fb02 f303 	mul.w	r3, r2, r3
 80126ae:	ee07 3a90 	vmov	s15, r3
 80126b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f000 8111 	beq.w	80128e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	f000 8083 	beq.w	80127d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80126ca:	69bb      	ldr	r3, [r7, #24]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	f200 80a1 	bhi.w	8012814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d003      	beq.n	80126e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d056      	beq.n	801278c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80126de:	e099      	b.n	8012814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80126e0:	4b88      	ldr	r3, [pc, #544]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	f003 0320 	and.w	r3, r3, #32
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d02d      	beq.n	8012748 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80126ec:	4b85      	ldr	r3, [pc, #532]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	08db      	lsrs	r3, r3, #3
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	4a84      	ldr	r2, [pc, #528]	; (8012908 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80126f8:	fa22 f303 	lsr.w	r3, r2, r3
 80126fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	ee07 3a90 	vmov	s15, r3
 8012704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	ee07 3a90 	vmov	s15, r3
 801270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012716:	4b7b      	ldr	r3, [pc, #492]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801271a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801271e:	ee07 3a90 	vmov	s15, r3
 8012722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012726:	ed97 6a03 	vldr	s12, [r7, #12]
 801272a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801290c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801272e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801273a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012746:	e087      	b.n	8012858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	ee07 3a90 	vmov	s15, r3
 801274e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012752:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012910 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801275a:	4b6a      	ldr	r3, [pc, #424]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012762:	ee07 3a90 	vmov	s15, r3
 8012766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801276a:	ed97 6a03 	vldr	s12, [r7, #12]
 801276e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801290c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801277a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801277e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801278a:	e065      	b.n	8012858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	ee07 3a90 	vmov	s15, r3
 8012792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012796:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801279a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801279e:	4b59      	ldr	r3, [pc, #356]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80127a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127a6:	ee07 3a90 	vmov	s15, r3
 80127aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80127b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801290c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80127b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80127ce:	e043      	b.n	8012858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	ee07 3a90 	vmov	s15, r3
 80127d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80127de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127e2:	4b48      	ldr	r3, [pc, #288]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80127e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127ea:	ee07 3a90 	vmov	s15, r3
 80127ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80127f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801290c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80127fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801280e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012812:	e021      	b.n	8012858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	ee07 3a90 	vmov	s15, r3
 801281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801281e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012826:	4b37      	ldr	r3, [pc, #220]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801282e:	ee07 3a90 	vmov	s15, r3
 8012832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012836:	ed97 6a03 	vldr	s12, [r7, #12]
 801283a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801290c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801283e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801284a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012856:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8012858:	4b2a      	ldr	r3, [pc, #168]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801285c:	0a5b      	lsrs	r3, r3, #9
 801285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012862:	ee07 3a90 	vmov	s15, r3
 8012866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801286a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801286e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012872:	edd7 6a07 	vldr	s13, [r7, #28]
 8012876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801287a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801287e:	ee17 2a90 	vmov	r2, s15
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8012886:	4b1f      	ldr	r3, [pc, #124]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801288a:	0c1b      	lsrs	r3, r3, #16
 801288c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012890:	ee07 3a90 	vmov	s15, r3
 8012894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801289c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80128a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128ac:	ee17 2a90 	vmov	r2, s15
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80128b4:	4b13      	ldr	r3, [pc, #76]	; (8012904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80128b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128b8:	0e1b      	lsrs	r3, r3, #24
 80128ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128be:	ee07 3a90 	vmov	s15, r3
 80128c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80128ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80128d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128da:	ee17 2a90 	vmov	r2, s15
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80128e2:	e008      	b.n	80128f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2200      	movs	r2, #0
 80128e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	609a      	str	r2, [r3, #8]
}
 80128f6:	bf00      	nop
 80128f8:	3724      	adds	r7, #36	; 0x24
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	58024400 	.word	0x58024400
 8012908:	03d09000 	.word	0x03d09000
 801290c:	46000000 	.word	0x46000000
 8012910:	4c742400 	.word	0x4c742400
 8012914:	4a742400 	.word	0x4a742400
 8012918:	4bbebc20 	.word	0x4bbebc20

0801291c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801291c:	b480      	push	{r7}
 801291e:	b089      	sub	sp, #36	; 0x24
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012924:	4ba1      	ldr	r3, [pc, #644]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012928:	f003 0303 	and.w	r3, r3, #3
 801292c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801292e:	4b9f      	ldr	r3, [pc, #636]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012932:	0d1b      	lsrs	r3, r3, #20
 8012934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012938:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801293a:	4b9c      	ldr	r3, [pc, #624]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293e:	0a1b      	lsrs	r3, r3, #8
 8012940:	f003 0301 	and.w	r3, r3, #1
 8012944:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8012946:	4b99      	ldr	r3, [pc, #612]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801294a:	08db      	lsrs	r3, r3, #3
 801294c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012950:	693a      	ldr	r2, [r7, #16]
 8012952:	fb02 f303 	mul.w	r3, r2, r3
 8012956:	ee07 3a90 	vmov	s15, r3
 801295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801295e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	f000 8111 	beq.w	8012b8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	2b02      	cmp	r3, #2
 801296e:	f000 8083 	beq.w	8012a78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	2b02      	cmp	r3, #2
 8012976:	f200 80a1 	bhi.w	8012abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d003      	beq.n	8012988 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d056      	beq.n	8012a34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012986:	e099      	b.n	8012abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012988:	4b88      	ldr	r3, [pc, #544]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f003 0320 	and.w	r3, r3, #32
 8012990:	2b00      	cmp	r3, #0
 8012992:	d02d      	beq.n	80129f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012994:	4b85      	ldr	r3, [pc, #532]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	08db      	lsrs	r3, r3, #3
 801299a:	f003 0303 	and.w	r3, r3, #3
 801299e:	4a84      	ldr	r2, [pc, #528]	; (8012bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80129a0:	fa22 f303 	lsr.w	r3, r2, r3
 80129a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	ee07 3a90 	vmov	s15, r3
 80129ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	ee07 3a90 	vmov	s15, r3
 80129b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129be:	4b7b      	ldr	r3, [pc, #492]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80129c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129c6:	ee07 3a90 	vmov	s15, r3
 80129ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80129d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80129d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80129ee:	e087      	b.n	8012b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	ee07 3a90 	vmov	s15, r3
 80129f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80129fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a02:	4b6a      	ldr	r3, [pc, #424]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a0a:	ee07 3a90 	vmov	s15, r3
 8012a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a32:	e065      	b.n	8012b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	ee07 3a90 	vmov	s15, r3
 8012a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a46:	4b59      	ldr	r3, [pc, #356]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a4e:	ee07 3a90 	vmov	s15, r3
 8012a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a76:	e043      	b.n	8012b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	ee07 3a90 	vmov	s15, r3
 8012a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a8a:	4b48      	ldr	r3, [pc, #288]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a92:	ee07 3a90 	vmov	s15, r3
 8012a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012aba:	e021      	b.n	8012b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	ee07 3a90 	vmov	s15, r3
 8012ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012ace:	4b37      	ldr	r3, [pc, #220]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ad6:	ee07 3a90 	vmov	s15, r3
 8012ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8012ae2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012afe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012b00:	4b2a      	ldr	r3, [pc, #168]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b04:	0a5b      	lsrs	r3, r3, #9
 8012b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b0a:	ee07 3a90 	vmov	s15, r3
 8012b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b26:	ee17 2a90 	vmov	r2, s15
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8012b2e:	4b1f      	ldr	r3, [pc, #124]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b32:	0c1b      	lsrs	r3, r3, #16
 8012b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b38:	ee07 3a90 	vmov	s15, r3
 8012b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b54:	ee17 2a90 	vmov	r2, s15
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8012b5c:	4b13      	ldr	r3, [pc, #76]	; (8012bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b60:	0e1b      	lsrs	r3, r3, #24
 8012b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b66:	ee07 3a90 	vmov	s15, r3
 8012b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b82:	ee17 2a90 	vmov	r2, s15
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012b8a:	e008      	b.n	8012b9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	609a      	str	r2, [r3, #8]
}
 8012b9e:	bf00      	nop
 8012ba0:	3724      	adds	r7, #36	; 0x24
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba8:	4770      	bx	lr
 8012baa:	bf00      	nop
 8012bac:	58024400 	.word	0x58024400
 8012bb0:	03d09000 	.word	0x03d09000
 8012bb4:	46000000 	.word	0x46000000
 8012bb8:	4c742400 	.word	0x4c742400
 8012bbc:	4a742400 	.word	0x4a742400
 8012bc0:	4bbebc20 	.word	0x4bbebc20

08012bc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b089      	sub	sp, #36	; 0x24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012bcc:	4ba0      	ldr	r3, [pc, #640]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd0:	f003 0303 	and.w	r3, r3, #3
 8012bd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8012bd6:	4b9e      	ldr	r3, [pc, #632]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bda:	091b      	lsrs	r3, r3, #4
 8012bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012be0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8012be2:	4b9b      	ldr	r3, [pc, #620]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be6:	f003 0301 	and.w	r3, r3, #1
 8012bea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8012bec:	4b98      	ldr	r3, [pc, #608]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf0:	08db      	lsrs	r3, r3, #3
 8012bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bf6:	693a      	ldr	r2, [r7, #16]
 8012bf8:	fb02 f303 	mul.w	r3, r2, r3
 8012bfc:	ee07 3a90 	vmov	s15, r3
 8012c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 8111 	beq.w	8012e32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	2b02      	cmp	r3, #2
 8012c14:	f000 8083 	beq.w	8012d1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	2b02      	cmp	r3, #2
 8012c1c:	f200 80a1 	bhi.w	8012d62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d003      	beq.n	8012c2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d056      	beq.n	8012cda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012c2c:	e099      	b.n	8012d62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c2e:	4b88      	ldr	r3, [pc, #544]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f003 0320 	and.w	r3, r3, #32
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d02d      	beq.n	8012c96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c3a:	4b85      	ldr	r3, [pc, #532]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	08db      	lsrs	r3, r3, #3
 8012c40:	f003 0303 	and.w	r3, r3, #3
 8012c44:	4a83      	ldr	r2, [pc, #524]	; (8012e54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012c46:	fa22 f303 	lsr.w	r3, r2, r3
 8012c4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	ee07 3a90 	vmov	s15, r3
 8012c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	ee07 3a90 	vmov	s15, r3
 8012c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c64:	4b7a      	ldr	r3, [pc, #488]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c6c:	ee07 3a90 	vmov	s15, r3
 8012c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c74:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8012e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012c94:	e087      	b.n	8012da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	ee07 3a90 	vmov	s15, r3
 8012c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ca0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8012e5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012ca8:	4b69      	ldr	r3, [pc, #420]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cb0:	ee07 3a90 	vmov	s15, r3
 8012cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8012cbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8012e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012cd8:	e065      	b.n	8012da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	ee07 3a90 	vmov	s15, r3
 8012ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ce4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8012e60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cec:	4b58      	ldr	r3, [pc, #352]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cf4:	ee07 3a90 	vmov	s15, r3
 8012cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8012e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d1c:	e043      	b.n	8012da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	ee07 3a90 	vmov	s15, r3
 8012d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8012e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d30:	4b47      	ldr	r3, [pc, #284]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d38:	ee07 3a90 	vmov	s15, r3
 8012d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8012e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d60:	e021      	b.n	8012da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	ee07 3a90 	vmov	s15, r3
 8012d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012e5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d74:	4b36      	ldr	r3, [pc, #216]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d7c:	ee07 3a90 	vmov	s15, r3
 8012d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012da4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8012da6:	4b2a      	ldr	r3, [pc, #168]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012daa:	0a5b      	lsrs	r3, r3, #9
 8012dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012db0:	ee07 3a90 	vmov	s15, r3
 8012db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dcc:	ee17 2a90 	vmov	r2, s15
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8012dd4:	4b1e      	ldr	r3, [pc, #120]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd8:	0c1b      	lsrs	r3, r3, #16
 8012dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dde:	ee07 3a90 	vmov	s15, r3
 8012de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8012df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dfa:	ee17 2a90 	vmov	r2, s15
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8012e02:	4b13      	ldr	r3, [pc, #76]	; (8012e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e06:	0e1b      	lsrs	r3, r3, #24
 8012e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e0c:	ee07 3a90 	vmov	s15, r3
 8012e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e28:	ee17 2a90 	vmov	r2, s15
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012e30:	e008      	b.n	8012e44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2200      	movs	r2, #0
 8012e36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2200      	movs	r2, #0
 8012e42:	609a      	str	r2, [r3, #8]
}
 8012e44:	bf00      	nop
 8012e46:	3724      	adds	r7, #36	; 0x24
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr
 8012e50:	58024400 	.word	0x58024400
 8012e54:	03d09000 	.word	0x03d09000
 8012e58:	46000000 	.word	0x46000000
 8012e5c:	4c742400 	.word	0x4c742400
 8012e60:	4a742400 	.word	0x4a742400
 8012e64:	4bbebc20 	.word	0x4bbebc20

08012e68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012e72:	2300      	movs	r3, #0
 8012e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012e76:	4b53      	ldr	r3, [pc, #332]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e7a:	f003 0303 	and.w	r3, r3, #3
 8012e7e:	2b03      	cmp	r3, #3
 8012e80:	d101      	bne.n	8012e86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012e82:	2301      	movs	r3, #1
 8012e84:	e099      	b.n	8012fba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012e86:	4b4f      	ldr	r3, [pc, #316]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a4e      	ldr	r2, [pc, #312]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012e92:	f7f3 fda5 	bl	80069e0 <HAL_GetTick>
 8012e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012e98:	e008      	b.n	8012eac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012e9a:	f7f3 fda1 	bl	80069e0 <HAL_GetTick>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	d901      	bls.n	8012eac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e086      	b.n	8012fba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012eac:	4b45      	ldr	r3, [pc, #276]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d1f0      	bne.n	8012e9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012eb8:	4b42      	ldr	r3, [pc, #264]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ebc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	031b      	lsls	r3, r3, #12
 8012ec6:	493f      	ldr	r1, [pc, #252]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012ec8:	4313      	orrs	r3, r2
 8012eca:	628b      	str	r3, [r1, #40]	; 0x28
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	3b01      	subs	r3, #1
 8012edc:	025b      	lsls	r3, r3, #9
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	431a      	orrs	r2, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	041b      	lsls	r3, r3, #16
 8012eea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012eee:	431a      	orrs	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	061b      	lsls	r3, r3, #24
 8012ef8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012efc:	4931      	ldr	r1, [pc, #196]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012efe:	4313      	orrs	r3, r2
 8012f00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012f02:	4b30      	ldr	r3, [pc, #192]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	695b      	ldr	r3, [r3, #20]
 8012f0e:	492d      	ldr	r1, [pc, #180]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f10:	4313      	orrs	r3, r2
 8012f12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012f14:	4b2b      	ldr	r3, [pc, #172]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f18:	f023 0220 	bic.w	r2, r3, #32
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	699b      	ldr	r3, [r3, #24]
 8012f20:	4928      	ldr	r1, [pc, #160]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f22:	4313      	orrs	r3, r2
 8012f24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012f26:	4b27      	ldr	r3, [pc, #156]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f2a:	4a26      	ldr	r2, [pc, #152]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f2c:	f023 0310 	bic.w	r3, r3, #16
 8012f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012f32:	4b24      	ldr	r3, [pc, #144]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f36:	4b24      	ldr	r3, [pc, #144]	; (8012fc8 <RCCEx_PLL2_Config+0x160>)
 8012f38:	4013      	ands	r3, r2
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	69d2      	ldr	r2, [r2, #28]
 8012f3e:	00d2      	lsls	r2, r2, #3
 8012f40:	4920      	ldr	r1, [pc, #128]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f42:	4313      	orrs	r3, r2
 8012f44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012f46:	4b1f      	ldr	r3, [pc, #124]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4a:	4a1e      	ldr	r2, [pc, #120]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f4c:	f043 0310 	orr.w	r3, r3, #16
 8012f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d106      	bne.n	8012f66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012f58:	4b1a      	ldr	r3, [pc, #104]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5c:	4a19      	ldr	r2, [pc, #100]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012f64:	e00f      	b.n	8012f86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d106      	bne.n	8012f7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012f6c:	4b15      	ldr	r3, [pc, #84]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f70:	4a14      	ldr	r2, [pc, #80]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012f78:	e005      	b.n	8012f86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012f7a:	4b12      	ldr	r3, [pc, #72]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f7e:	4a11      	ldr	r2, [pc, #68]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012f84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012f86:	4b0f      	ldr	r3, [pc, #60]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a0e      	ldr	r2, [pc, #56]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012f92:	f7f3 fd25 	bl	80069e0 <HAL_GetTick>
 8012f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012f98:	e008      	b.n	8012fac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012f9a:	f7f3 fd21 	bl	80069e0 <HAL_GetTick>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	2b02      	cmp	r3, #2
 8012fa6:	d901      	bls.n	8012fac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012fa8:	2303      	movs	r3, #3
 8012faa:	e006      	b.n	8012fba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012fac:	4b05      	ldr	r3, [pc, #20]	; (8012fc4 <RCCEx_PLL2_Config+0x15c>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d0f0      	beq.n	8012f9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	58024400 	.word	0x58024400
 8012fc8:	ffff0007 	.word	0xffff0007

08012fcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012fda:	4b53      	ldr	r3, [pc, #332]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8012fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fde:	f003 0303 	and.w	r3, r3, #3
 8012fe2:	2b03      	cmp	r3, #3
 8012fe4:	d101      	bne.n	8012fea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e099      	b.n	801311e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012fea:	4b4f      	ldr	r3, [pc, #316]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a4e      	ldr	r2, [pc, #312]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8012ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ff6:	f7f3 fcf3 	bl	80069e0 <HAL_GetTick>
 8012ffa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012ffc:	e008      	b.n	8013010 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012ffe:	f7f3 fcef 	bl	80069e0 <HAL_GetTick>
 8013002:	4602      	mov	r2, r0
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	2b02      	cmp	r3, #2
 801300a:	d901      	bls.n	8013010 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801300c:	2303      	movs	r3, #3
 801300e:	e086      	b.n	801311e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013010:	4b45      	ldr	r3, [pc, #276]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1f0      	bne.n	8012ffe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801301c:	4b42      	ldr	r3, [pc, #264]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 801301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013020:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	051b      	lsls	r3, r3, #20
 801302a:	493f      	ldr	r1, [pc, #252]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 801302c:	4313      	orrs	r3, r2
 801302e:	628b      	str	r3, [r1, #40]	; 0x28
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	3b01      	subs	r3, #1
 8013036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	689b      	ldr	r3, [r3, #8]
 801303e:	3b01      	subs	r3, #1
 8013040:	025b      	lsls	r3, r3, #9
 8013042:	b29b      	uxth	r3, r3
 8013044:	431a      	orrs	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	3b01      	subs	r3, #1
 801304c:	041b      	lsls	r3, r3, #16
 801304e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013052:	431a      	orrs	r2, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	3b01      	subs	r3, #1
 801305a:	061b      	lsls	r3, r3, #24
 801305c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013060:	4931      	ldr	r1, [pc, #196]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013062:	4313      	orrs	r3, r2
 8013064:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013066:	4b30      	ldr	r3, [pc, #192]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	695b      	ldr	r3, [r3, #20]
 8013072:	492d      	ldr	r1, [pc, #180]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013074:	4313      	orrs	r3, r2
 8013076:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013078:	4b2b      	ldr	r3, [pc, #172]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 801307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	4928      	ldr	r1, [pc, #160]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013086:	4313      	orrs	r3, r2
 8013088:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801308a:	4b27      	ldr	r3, [pc, #156]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 801308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801308e:	4a26      	ldr	r2, [pc, #152]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013096:	4b24      	ldr	r3, [pc, #144]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801309a:	4b24      	ldr	r3, [pc, #144]	; (801312c <RCCEx_PLL3_Config+0x160>)
 801309c:	4013      	ands	r3, r2
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	69d2      	ldr	r2, [r2, #28]
 80130a2:	00d2      	lsls	r2, r2, #3
 80130a4:	4920      	ldr	r1, [pc, #128]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130a6:	4313      	orrs	r3, r2
 80130a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80130aa:	4b1f      	ldr	r3, [pc, #124]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ae:	4a1e      	ldr	r2, [pc, #120]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d106      	bne.n	80130ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80130bc:	4b1a      	ldr	r3, [pc, #104]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c0:	4a19      	ldr	r2, [pc, #100]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80130c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80130c8:	e00f      	b.n	80130ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d106      	bne.n	80130de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80130d0:	4b15      	ldr	r3, [pc, #84]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d4:	4a14      	ldr	r2, [pc, #80]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80130da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80130dc:	e005      	b.n	80130ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80130de:	4b12      	ldr	r3, [pc, #72]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e2:	4a11      	ldr	r2, [pc, #68]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80130e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80130ea:	4b0f      	ldr	r3, [pc, #60]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	4a0e      	ldr	r2, [pc, #56]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 80130f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80130f6:	f7f3 fc73 	bl	80069e0 <HAL_GetTick>
 80130fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80130fc:	e008      	b.n	8013110 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80130fe:	f7f3 fc6f 	bl	80069e0 <HAL_GetTick>
 8013102:	4602      	mov	r2, r0
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	1ad3      	subs	r3, r2, r3
 8013108:	2b02      	cmp	r3, #2
 801310a:	d901      	bls.n	8013110 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801310c:	2303      	movs	r3, #3
 801310e:	e006      	b.n	801311e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013110:	4b05      	ldr	r3, [pc, #20]	; (8013128 <RCCEx_PLL3_Config+0x15c>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013118:	2b00      	cmp	r3, #0
 801311a:	d0f0      	beq.n	80130fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801311c:	7bfb      	ldrb	r3, [r7, #15]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3710      	adds	r7, #16
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	58024400 	.word	0x58024400
 801312c:	ffff0007 	.word	0xffff0007

08013130 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013138:	2301      	movs	r3, #1
 801313a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d071      	beq.n	8013226 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013148:	b2db      	uxtb	r3, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d106      	bne.n	801315c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f7f1 fabc 	bl	80046d4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2202      	movs	r2, #2
 8013160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	f003 0310 	and.w	r3, r3, #16
 801316e:	2b10      	cmp	r3, #16
 8013170:	d050      	beq.n	8013214 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	22ca      	movs	r2, #202	; 0xca
 8013178:	625a      	str	r2, [r3, #36]	; 0x24
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2253      	movs	r2, #83	; 0x53
 8013180:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f000 fa4a 	bl	801361c <RTC_EnterInitMode>
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801318c:	7bfb      	ldrb	r3, [r7, #15]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d124      	bne.n	80131dc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	6899      	ldr	r1, [r3, #8]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b24      	ldr	r3, [pc, #144]	; (8013230 <HAL_RTC_Init+0x100>)
 801319e:	400b      	ands	r3, r1
 80131a0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	6899      	ldr	r1, [r3, #8]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	685a      	ldr	r2, [r3, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	431a      	orrs	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	431a      	orrs	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	430a      	orrs	r2, r1
 80131be:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	0419      	lsls	r1, r3, #16
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68da      	ldr	r2, [r3, #12]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	430a      	orrs	r2, r1
 80131d0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 fa56 	bl	8013684 <RTC_ExitInitMode>
 80131d8:	4603      	mov	r3, r0
 80131da:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80131dc:	7bfb      	ldrb	r3, [r7, #15]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d113      	bne.n	801320a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f022 0203 	bic.w	r2, r2, #3
 80131f0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	69da      	ldr	r2, [r3, #28]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	695b      	ldr	r3, [r3, #20]
 8013200:	431a      	orrs	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	430a      	orrs	r2, r1
 8013208:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	22ff      	movs	r2, #255	; 0xff
 8013210:	625a      	str	r2, [r3, #36]	; 0x24
 8013212:	e001      	b.n	8013218 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8013214:	2300      	movs	r3, #0
 8013216:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013218:	7bfb      	ldrb	r3, [r7, #15]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d103      	bne.n	8013226 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2201      	movs	r2, #1
 8013222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8013226:	7bfb      	ldrb	r3, [r7, #15]
}
 8013228:	4618      	mov	r0, r3
 801322a:	3710      	adds	r7, #16
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	ff8fffbf 	.word	0xff8fffbf

08013234 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013234:	b590      	push	{r4, r7, lr}
 8013236:	b087      	sub	sp, #28
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d101      	bne.n	801324e <HAL_RTC_SetTime+0x1a>
 801324a:	2302      	movs	r3, #2
 801324c:	e089      	b.n	8013362 <HAL_RTC_SetTime+0x12e>
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2201      	movs	r2, #1
 8013252:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2202      	movs	r2, #2
 801325a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	22ca      	movs	r2, #202	; 0xca
 8013264:	625a      	str	r2, [r3, #36]	; 0x24
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2253      	movs	r2, #83	; 0x53
 801326c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f000 f9d4 	bl	801361c <RTC_EnterInitMode>
 8013274:	4603      	mov	r3, r0
 8013276:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013278:	7cfb      	ldrb	r3, [r7, #19]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d161      	bne.n	8013342 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d126      	bne.n	80132d2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801328e:	2b00      	cmp	r3, #0
 8013290:	d102      	bne.n	8013298 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	2200      	movs	r2, #0
 8013296:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	4618      	mov	r0, r3
 801329e:	f000 fa2f 	bl	8013700 <RTC_ByteToBcd2>
 80132a2:	4603      	mov	r3, r0
 80132a4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	785b      	ldrb	r3, [r3, #1]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f000 fa28 	bl	8013700 <RTC_ByteToBcd2>
 80132b0:	4603      	mov	r3, r0
 80132b2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80132b4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	789b      	ldrb	r3, [r3, #2]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 fa20 	bl	8013700 <RTC_ByteToBcd2>
 80132c0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80132c2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	78db      	ldrb	r3, [r3, #3]
 80132ca:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80132cc:	4313      	orrs	r3, r2
 80132ce:	617b      	str	r3, [r7, #20]
 80132d0:	e018      	b.n	8013304 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d102      	bne.n	80132e6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	2200      	movs	r2, #0
 80132e4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	785b      	ldrb	r3, [r3, #1]
 80132f0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80132f2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80132f8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	78db      	ldrb	r3, [r3, #3]
 80132fe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013300:	4313      	orrs	r3, r2
 8013302:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	6979      	ldr	r1, [r7, #20]
 801330a:	4b18      	ldr	r3, [pc, #96]	; (801336c <HAL_RTC_SetTime+0x138>)
 801330c:	400b      	ands	r3, r1
 801330e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	689a      	ldr	r2, [r3, #8]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801331e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	6899      	ldr	r1, [r3, #8]
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	68da      	ldr	r2, [r3, #12]
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	431a      	orrs	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	430a      	orrs	r2, r1
 8013336:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f000 f9a3 	bl	8013684 <RTC_ExitInitMode>
 801333e:	4603      	mov	r3, r0
 8013340:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	22ff      	movs	r2, #255	; 0xff
 8013348:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801334a:	7cfb      	ldrb	r3, [r7, #19]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d103      	bne.n	8013358 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2201      	movs	r2, #1
 8013354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2200      	movs	r2, #0
 801335c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013360:	7cfb      	ldrb	r3, [r7, #19]
}
 8013362:	4618      	mov	r0, r3
 8013364:	371c      	adds	r7, #28
 8013366:	46bd      	mov	sp, r7
 8013368:	bd90      	pop	{r4, r7, pc}
 801336a:	bf00      	nop
 801336c:	007f7f7f 	.word	0x007f7f7f

08013370 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	691b      	ldr	r3, [r3, #16]
 801338c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	4b22      	ldr	r3, [pc, #136]	; (8013424 <HAL_RTC_GetTime+0xb4>)
 801339c:	4013      	ands	r3, r2
 801339e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	0c1b      	lsrs	r3, r3, #16
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	0a1b      	lsrs	r3, r3, #8
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133c8:	b2da      	uxtb	r2, r3
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	0d9b      	lsrs	r3, r3, #22
 80133d2:	b2db      	uxtb	r3, r3
 80133d4:	f003 0301 	and.w	r3, r3, #1
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d11a      	bne.n	801341a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f000 f9a9 	bl	8013740 <RTC_Bcd2ToByte>
 80133ee:	4603      	mov	r3, r0
 80133f0:	461a      	mov	r2, r3
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	785b      	ldrb	r3, [r3, #1]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f000 f9a0 	bl	8013740 <RTC_Bcd2ToByte>
 8013400:	4603      	mov	r3, r0
 8013402:	461a      	mov	r2, r3
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	789b      	ldrb	r3, [r3, #2]
 801340c:	4618      	mov	r0, r3
 801340e:	f000 f997 	bl	8013740 <RTC_Bcd2ToByte>
 8013412:	4603      	mov	r3, r0
 8013414:	461a      	mov	r2, r3
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801341a:	2300      	movs	r3, #0
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	007f7f7f 	.word	0x007f7f7f

08013428 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013428:	b590      	push	{r4, r7, lr}
 801342a:	b087      	sub	sp, #28
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f893 3020 	ldrb.w	r3, [r3, #32]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d101      	bne.n	8013442 <HAL_RTC_SetDate+0x1a>
 801343e:	2302      	movs	r3, #2
 8013440:	e073      	b.n	801352a <HAL_RTC_SetDate+0x102>
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2201      	movs	r2, #1
 8013446:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2202      	movs	r2, #2
 801344e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d10e      	bne.n	8013476 <HAL_RTC_SetDate+0x4e>
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	785b      	ldrb	r3, [r3, #1]
 801345c:	f003 0310 	and.w	r3, r3, #16
 8013460:	2b00      	cmp	r3, #0
 8013462:	d008      	beq.n	8013476 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	785b      	ldrb	r3, [r3, #1]
 8013468:	f023 0310 	bic.w	r3, r3, #16
 801346c:	b2db      	uxtb	r3, r3
 801346e:	330a      	adds	r3, #10
 8013470:	b2da      	uxtb	r2, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d11c      	bne.n	80134b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	78db      	ldrb	r3, [r3, #3]
 8013480:	4618      	mov	r0, r3
 8013482:	f000 f93d 	bl	8013700 <RTC_ByteToBcd2>
 8013486:	4603      	mov	r3, r0
 8013488:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	785b      	ldrb	r3, [r3, #1]
 801348e:	4618      	mov	r0, r3
 8013490:	f000 f936 	bl	8013700 <RTC_ByteToBcd2>
 8013494:	4603      	mov	r3, r0
 8013496:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013498:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	789b      	ldrb	r3, [r3, #2]
 801349e:	4618      	mov	r0, r3
 80134a0:	f000 f92e 	bl	8013700 <RTC_ByteToBcd2>
 80134a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80134a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80134b0:	4313      	orrs	r3, r2
 80134b2:	617b      	str	r3, [r7, #20]
 80134b4:	e00e      	b.n	80134d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	78db      	ldrb	r3, [r3, #3]
 80134ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	785b      	ldrb	r3, [r3, #1]
 80134c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80134c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80134c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80134d0:	4313      	orrs	r3, r2
 80134d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	22ca      	movs	r2, #202	; 0xca
 80134da:	625a      	str	r2, [r3, #36]	; 0x24
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2253      	movs	r2, #83	; 0x53
 80134e2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80134e4:	68f8      	ldr	r0, [r7, #12]
 80134e6:	f000 f899 	bl	801361c <RTC_EnterInitMode>
 80134ea:	4603      	mov	r3, r0
 80134ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80134ee:	7cfb      	ldrb	r3, [r7, #19]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d10a      	bne.n	801350a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	6979      	ldr	r1, [r7, #20]
 80134fa:	4b0e      	ldr	r3, [pc, #56]	; (8013534 <HAL_RTC_SetDate+0x10c>)
 80134fc:	400b      	ands	r3, r1
 80134fe:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f000 f8bf 	bl	8013684 <RTC_ExitInitMode>
 8013506:	4603      	mov	r3, r0
 8013508:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	22ff      	movs	r2, #255	; 0xff
 8013510:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8013512:	7cfb      	ldrb	r3, [r7, #19]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d103      	bne.n	8013520 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2201      	movs	r2, #1
 801351c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2200      	movs	r2, #0
 8013524:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013528:	7cfb      	ldrb	r3, [r7, #19]


}
 801352a:	4618      	mov	r0, r3
 801352c:	371c      	adds	r7, #28
 801352e:	46bd      	mov	sp, r7
 8013530:	bd90      	pop	{r4, r7, pc}
 8013532:	bf00      	nop
 8013534:	00ffff3f 	.word	0x00ffff3f

08013538 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b086      	sub	sp, #24
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	685a      	ldr	r2, [r3, #4]
 801354a:	4b21      	ldr	r3, [pc, #132]	; (80135d0 <HAL_RTC_GetDate+0x98>)
 801354c:	4013      	ands	r3, r2
 801354e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	0c1b      	lsrs	r3, r3, #16
 8013554:	b2da      	uxtb	r2, r3
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	0a1b      	lsrs	r3, r3, #8
 801355e:	b2db      	uxtb	r3, r3
 8013560:	f003 031f 	and.w	r3, r3, #31
 8013564:	b2da      	uxtb	r2, r3
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	b2db      	uxtb	r3, r3
 801356e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013572:	b2da      	uxtb	r2, r3
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	0b5b      	lsrs	r3, r3, #13
 801357c:	b2db      	uxtb	r3, r3
 801357e:	f003 0307 	and.w	r3, r3, #7
 8013582:	b2da      	uxtb	r2, r3
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d11a      	bne.n	80135c4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	78db      	ldrb	r3, [r3, #3]
 8013592:	4618      	mov	r0, r3
 8013594:	f000 f8d4 	bl	8013740 <RTC_Bcd2ToByte>
 8013598:	4603      	mov	r3, r0
 801359a:	461a      	mov	r2, r3
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	785b      	ldrb	r3, [r3, #1]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f000 f8cb 	bl	8013740 <RTC_Bcd2ToByte>
 80135aa:	4603      	mov	r3, r0
 80135ac:	461a      	mov	r2, r3
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	789b      	ldrb	r3, [r3, #2]
 80135b6:	4618      	mov	r0, r3
 80135b8:	f000 f8c2 	bl	8013740 <RTC_Bcd2ToByte>
 80135bc:	4603      	mov	r3, r0
 80135be:	461a      	mov	r2, r3
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3718      	adds	r7, #24
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	00ffff3f 	.word	0x00ffff3f

080135d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4a0d      	ldr	r2, [pc, #52]	; (8013618 <HAL_RTC_WaitForSynchro+0x44>)
 80135e2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80135e4:	f7f3 f9fc 	bl	80069e0 <HAL_GetTick>
 80135e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80135ea:	e009      	b.n	8013600 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80135ec:	f7f3 f9f8 	bl	80069e0 <HAL_GetTick>
 80135f0:	4602      	mov	r2, r0
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80135fa:	d901      	bls.n	8013600 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80135fc:	2303      	movs	r3, #3
 80135fe:	e007      	b.n	8013610 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	f003 0320 	and.w	r3, r3, #32
 801360a:	2b00      	cmp	r3, #0
 801360c:	d0ee      	beq.n	80135ec <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 801360e:	2300      	movs	r3, #0
}
 8013610:	4618      	mov	r0, r3
 8013612:	3710      	adds	r7, #16
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	0003ff5f 	.word	0x0003ff5f

0801361c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013624:	2300      	movs	r3, #0
 8013626:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013632:	2b00      	cmp	r3, #0
 8013634:	d120      	bne.n	8013678 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f04f 32ff 	mov.w	r2, #4294967295
 801363e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013640:	f7f3 f9ce 	bl	80069e0 <HAL_GetTick>
 8013644:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013646:	e00d      	b.n	8013664 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013648:	f7f3 f9ca 	bl	80069e0 <HAL_GetTick>
 801364c:	4602      	mov	r2, r0
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013656:	d905      	bls.n	8013664 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8013658:	2303      	movs	r3, #3
 801365a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2203      	movs	r2, #3
 8013660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801366e:	2b00      	cmp	r3, #0
 8013670:	d102      	bne.n	8013678 <RTC_EnterInitMode+0x5c>
 8013672:	7bfb      	ldrb	r3, [r7, #15]
 8013674:	2b03      	cmp	r3, #3
 8013676:	d1e7      	bne.n	8013648 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8013678:	7bfb      	ldrb	r3, [r7, #15]
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
	...

08013684 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801368c:	2300      	movs	r3, #0
 801368e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8013690:	4b1a      	ldr	r3, [pc, #104]	; (80136fc <RTC_ExitInitMode+0x78>)
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	4a19      	ldr	r2, [pc, #100]	; (80136fc <RTC_ExitInitMode+0x78>)
 8013696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801369a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801369c:	4b17      	ldr	r3, [pc, #92]	; (80136fc <RTC_ExitInitMode+0x78>)
 801369e:	689b      	ldr	r3, [r3, #8]
 80136a0:	f003 0320 	and.w	r3, r3, #32
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10c      	bne.n	80136c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff ff93 	bl	80135d4 <HAL_RTC_WaitForSynchro>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d01e      	beq.n	80136f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2203      	movs	r2, #3
 80136b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80136bc:	2303      	movs	r3, #3
 80136be:	73fb      	strb	r3, [r7, #15]
 80136c0:	e017      	b.n	80136f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80136c2:	4b0e      	ldr	r3, [pc, #56]	; (80136fc <RTC_ExitInitMode+0x78>)
 80136c4:	689b      	ldr	r3, [r3, #8]
 80136c6:	4a0d      	ldr	r2, [pc, #52]	; (80136fc <RTC_ExitInitMode+0x78>)
 80136c8:	f023 0320 	bic.w	r3, r3, #32
 80136cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7ff ff80 	bl	80135d4 <HAL_RTC_WaitForSynchro>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d005      	beq.n	80136e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2203      	movs	r2, #3
 80136de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80136e2:	2303      	movs	r3, #3
 80136e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80136e6:	4b05      	ldr	r3, [pc, #20]	; (80136fc <RTC_ExitInitMode+0x78>)
 80136e8:	689b      	ldr	r3, [r3, #8]
 80136ea:	4a04      	ldr	r2, [pc, #16]	; (80136fc <RTC_ExitInitMode+0x78>)
 80136ec:	f043 0320 	orr.w	r3, r3, #32
 80136f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80136f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3710      	adds	r7, #16
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	58004000 	.word	0x58004000

08013700 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013700:	b480      	push	{r7}
 8013702:	b085      	sub	sp, #20
 8013704:	af00      	add	r7, sp, #0
 8013706:	4603      	mov	r3, r0
 8013708:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801370a:	2300      	movs	r3, #0
 801370c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801370e:	79fb      	ldrb	r3, [r7, #7]
 8013710:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8013712:	e005      	b.n	8013720 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	3301      	adds	r3, #1
 8013718:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 801371a:	7afb      	ldrb	r3, [r7, #11]
 801371c:	3b0a      	subs	r3, #10
 801371e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8013720:	7afb      	ldrb	r3, [r7, #11]
 8013722:	2b09      	cmp	r3, #9
 8013724:	d8f6      	bhi.n	8013714 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	b2db      	uxtb	r3, r3
 801372a:	011b      	lsls	r3, r3, #4
 801372c:	b2da      	uxtb	r2, r3
 801372e:	7afb      	ldrb	r3, [r7, #11]
 8013730:	4313      	orrs	r3, r2
 8013732:	b2db      	uxtb	r3, r3
}
 8013734:	4618      	mov	r0, r3
 8013736:	3714      	adds	r7, #20
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr

08013740 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013740:	b480      	push	{r7}
 8013742:	b085      	sub	sp, #20
 8013744:	af00      	add	r7, sp, #0
 8013746:	4603      	mov	r3, r0
 8013748:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801374a:	79fb      	ldrb	r3, [r7, #7]
 801374c:	091b      	lsrs	r3, r3, #4
 801374e:	b2db      	uxtb	r3, r3
 8013750:	461a      	mov	r2, r3
 8013752:	0092      	lsls	r2, r2, #2
 8013754:	4413      	add	r3, r2
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801375a:	79fb      	ldrb	r3, [r7, #7]
 801375c:	f003 030f 	and.w	r3, r3, #15
 8013760:	b2da      	uxtb	r2, r3
 8013762:	7bfb      	ldrb	r3, [r7, #15]
 8013764:	4413      	add	r3, r2
 8013766:	b2db      	uxtb	r3, r3
}
 8013768:	4618      	mov	r0, r3
 801376a:	3714      	adds	r7, #20
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr

08013774 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d101      	bne.n	8013786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013782:	2301      	movs	r3, #1
 8013784:	e10f      	b.n	80139a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a87      	ldr	r2, [pc, #540]	; (80139b0 <HAL_SPI_Init+0x23c>)
 8013792:	4293      	cmp	r3, r2
 8013794:	d00f      	beq.n	80137b6 <HAL_SPI_Init+0x42>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	4a86      	ldr	r2, [pc, #536]	; (80139b4 <HAL_SPI_Init+0x240>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d00a      	beq.n	80137b6 <HAL_SPI_Init+0x42>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	4a84      	ldr	r2, [pc, #528]	; (80139b8 <HAL_SPI_Init+0x244>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d005      	beq.n	80137b6 <HAL_SPI_Init+0x42>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	2b0f      	cmp	r3, #15
 80137b0:	d901      	bls.n	80137b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80137b2:	2301      	movs	r3, #1
 80137b4:	e0f7      	b.n	80139a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f000 fd60 	bl	801427c <SPI_GetPacketSize>
 80137bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4a7b      	ldr	r2, [pc, #492]	; (80139b0 <HAL_SPI_Init+0x23c>)
 80137c4:	4293      	cmp	r3, r2
 80137c6:	d00c      	beq.n	80137e2 <HAL_SPI_Init+0x6e>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4a79      	ldr	r2, [pc, #484]	; (80139b4 <HAL_SPI_Init+0x240>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d007      	beq.n	80137e2 <HAL_SPI_Init+0x6e>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	4a78      	ldr	r2, [pc, #480]	; (80139b8 <HAL_SPI_Init+0x244>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d002      	beq.n	80137e2 <HAL_SPI_Init+0x6e>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2b08      	cmp	r3, #8
 80137e0:	d811      	bhi.n	8013806 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80137e6:	4a72      	ldr	r2, [pc, #456]	; (80139b0 <HAL_SPI_Init+0x23c>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d009      	beq.n	8013800 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a70      	ldr	r2, [pc, #448]	; (80139b4 <HAL_SPI_Init+0x240>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d004      	beq.n	8013800 <HAL_SPI_Init+0x8c>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a6f      	ldr	r2, [pc, #444]	; (80139b8 <HAL_SPI_Init+0x244>)
 80137fc:	4293      	cmp	r3, r2
 80137fe:	d104      	bne.n	801380a <HAL_SPI_Init+0x96>
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	2b10      	cmp	r3, #16
 8013804:	d901      	bls.n	801380a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8013806:	2301      	movs	r3, #1
 8013808:	e0cd      	b.n	80139a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d106      	bne.n	8013824 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2200      	movs	r2, #0
 801381a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7f1 f9ce 	bl	8004bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2202      	movs	r2, #2
 8013828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f022 0201 	bic.w	r2, r2, #1
 801383a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8013846:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	699b      	ldr	r3, [r3, #24]
 801384c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013850:	d119      	bne.n	8013886 <HAL_SPI_Init+0x112>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801385a:	d103      	bne.n	8013864 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013860:	2b00      	cmp	r3, #0
 8013862:	d008      	beq.n	8013876 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013868:	2b00      	cmp	r3, #0
 801386a:	d10c      	bne.n	8013886 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013874:	d107      	bne.n	8013886 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00f      	beq.n	80138b2 <HAL_SPI_Init+0x13e>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	2b06      	cmp	r3, #6
 8013898:	d90b      	bls.n	80138b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	430a      	orrs	r2, r1
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	e007      	b.n	80138c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80138c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	69da      	ldr	r2, [r3, #28]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ca:	431a      	orrs	r2, r3
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	431a      	orrs	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138d4:	ea42 0103 	orr.w	r1, r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	68da      	ldr	r2, [r3, #12]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	430a      	orrs	r2, r1
 80138e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ec:	431a      	orrs	r2, r3
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f2:	431a      	orrs	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	699b      	ldr	r3, [r3, #24]
 80138f8:	431a      	orrs	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	691b      	ldr	r3, [r3, #16]
 80138fe:	431a      	orrs	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	695b      	ldr	r3, [r3, #20]
 8013904:	431a      	orrs	r2, r3
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a1b      	ldr	r3, [r3, #32]
 801390a:	431a      	orrs	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	431a      	orrs	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013916:	431a      	orrs	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	689b      	ldr	r3, [r3, #8]
 801391c:	431a      	orrs	r2, r3
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013922:	ea42 0103 	orr.w	r1, r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	430a      	orrs	r2, r1
 8013930:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d113      	bne.n	8013962 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801394c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013960:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f022 0201 	bic.w	r2, r2, #1
 8013970:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00a      	beq.n	8013994 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	430a      	orrs	r2, r1
 8013992:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2200      	movs	r2, #0
 8013998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2201      	movs	r2, #1
 80139a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80139a4:	2300      	movs	r3, #0
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3710      	adds	r7, #16
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	40013000 	.word	0x40013000
 80139b4:	40003800 	.word	0x40003800
 80139b8:	40003c00 	.word	0x40003c00

080139bc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	4613      	mov	r3, r2
 80139c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d005      	beq.n	80139e2 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2200      	movs	r2, #0
 80139da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80139de:	2302      	movs	r3, #2
 80139e0:	e127      	b.n	8013c32 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d002      	beq.n	80139ee <HAL_SPI_Receive_DMA+0x32>
 80139e8:	88fb      	ldrh	r3, [r7, #6]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d105      	bne.n	80139fa <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80139f6:	2301      	movs	r3, #1
 80139f8:	e11b      	b.n	8013c32 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d101      	bne.n	8013a08 <HAL_SPI_Receive_DMA+0x4c>
 8013a04:	2302      	movs	r3, #2
 8013a06:	e114      	b.n	8013c32 <HAL_SPI_Receive_DMA+0x276>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2204      	movs	r2, #4
 8013a14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	68ba      	ldr	r2, [r7, #8]
 8013a24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	88fa      	ldrh	r2, [r7, #6]
 8013a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	88fa      	ldrh	r2, [r7, #6]
 8013a32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	689b      	ldr	r3, [r3, #8]
 8013a56:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8013a5a:	d108      	bne.n	8013a6e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	e009      	b.n	8013a82 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8013a80:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	2b0f      	cmp	r3, #15
 8013a88:	d905      	bls.n	8013a96 <HAL_SPI_Receive_DMA+0xda>
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8e:	699b      	ldr	r3, [r3, #24]
 8013a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a94:	d10f      	bne.n	8013ab6 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8013a9a:	2b07      	cmp	r3, #7
 8013a9c:	d911      	bls.n	8013ac2 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aa2:	699b      	ldr	r3, [r3, #24]
 8013aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013aa8:	d00b      	beq.n	8013ac2 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aae:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ab4:	d005      	beq.n	8013ac2 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	e0b7      	b.n	8013c32 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	689a      	ldr	r2, [r3, #8]
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013ad0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	2b07      	cmp	r3, #7
 8013ad8:	d820      	bhi.n	8013b1c <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ade:	699b      	ldr	r3, [r3, #24]
 8013ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ae4:	d109      	bne.n	8013afa <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	3301      	adds	r3, #1
 8013af0:	105b      	asrs	r3, r3, #1
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b04:	d11e      	bne.n	8013b44 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	3303      	adds	r3, #3
 8013b10:	109b      	asrs	r3, r3, #2
 8013b12:	b29a      	uxth	r2, r3
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013b1a:	e013      	b.n	8013b44 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	2b0f      	cmp	r3, #15
 8013b22:	d80f      	bhi.n	8013b44 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b28:	699b      	ldr	r3, [r3, #24]
 8013b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b2e:	d109      	bne.n	8013b44 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	3301      	adds	r3, #1
 8013b3a:	105b      	asrs	r3, r3, #1
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b48:	4a3c      	ldr	r2, [pc, #240]	; (8013c3c <HAL_SPI_Receive_DMA+0x280>)
 8013b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b50:	4a3b      	ldr	r2, [pc, #236]	; (8013c40 <HAL_SPI_Receive_DMA+0x284>)
 8013b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b58:	4a3a      	ldr	r2, [pc, #232]	; (8013c44 <HAL_SPI_Receive_DMA+0x288>)
 8013b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b60:	2200      	movs	r2, #0
 8013b62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	3330      	adds	r3, #48	; 0x30
 8013b6e:	4619      	mov	r1, r3
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013b74:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8013b7e:	f7f5 fdb5 	bl	80096ec <HAL_DMA_Start_IT>
 8013b82:	4603      	mov	r3, r0
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d011      	beq.n	8013bac <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b8e:	f043 0210 	orr.w	r2, r3, #16
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8013ba8:	2301      	movs	r3, #1
 8013baa:	e042      	b.n	8013c32 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013bb0:	69db      	ldr	r3, [r3, #28]
 8013bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bb6:	d108      	bne.n	8013bca <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	6859      	ldr	r1, [r3, #4]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	4b21      	ldr	r3, [pc, #132]	; (8013c48 <HAL_SPI_Receive_DMA+0x28c>)
 8013bc4:	400b      	ands	r3, r1
 8013bc6:	6053      	str	r3, [r2, #4]
 8013bc8:	e009      	b.n	8013bde <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	4b1d      	ldr	r3, [pc, #116]	; (8013c48 <HAL_SPI_Receive_DMA+0x28c>)
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	88f9      	ldrh	r1, [r7, #6]
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	6812      	ldr	r2, [r2, #0]
 8013bda:	430b      	orrs	r3, r1
 8013bdc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	689a      	ldr	r2, [r3, #8]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013bec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	691a      	ldr	r2, [r3, #16]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8013bfc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f042 0201 	orr.w	r2, r2, #1
 8013c0c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013c16:	d107      	bne.n	8013c28 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c26:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	080140a7 	.word	0x080140a7
 8013c40:	08014061 	.word	0x08014061
 8013c44:	080140c3 	.word	0x080140c3
 8013c48:	ffff0000 	.word	0xffff0000

08013c4c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b08a      	sub	sp, #40	; 0x28
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	691b      	ldr	r3, [r3, #16]
 8013c5a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	695b      	ldr	r3, [r3, #20]
 8013c62:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8013c64:	6a3a      	ldr	r2, [r7, #32]
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	4013      	ands	r3, r2
 8013c6a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8013c74:	2300      	movs	r3, #0
 8013c76:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013c7e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	3330      	adds	r3, #48	; 0x30
 8013c86:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d010      	beq.n	8013cb4 <HAL_SPI_IRQHandler+0x68>
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	f003 0308 	and.w	r3, r3, #8
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00b      	beq.n	8013cb4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	699a      	ldr	r2, [r3, #24]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013caa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 f9cd 	bl	801404c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8013cb2:	e192      	b.n	8013fda <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d113      	bne.n	8013ce6 <HAL_SPI_IRQHandler+0x9a>
 8013cbe:	69bb      	ldr	r3, [r7, #24]
 8013cc0:	f003 0320 	and.w	r3, r3, #32
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10e      	bne.n	8013ce6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d009      	beq.n	8013ce6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	4798      	blx	r3
    handled = 1UL;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d10f      	bne.n	8013d10 <HAL_SPI_IRQHandler+0xc4>
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	f003 0301 	and.w	r3, r3, #1
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00a      	beq.n	8013d10 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d105      	bne.n	8013d10 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	4798      	blx	r3
    handled = 1UL;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013d10:	69bb      	ldr	r3, [r7, #24]
 8013d12:	f003 0320 	and.w	r3, r3, #32
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d10f      	bne.n	8013d3a <HAL_SPI_IRQHandler+0xee>
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	f003 0302 	and.w	r3, r3, #2
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d00a      	beq.n	8013d3a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013d24:	69bb      	ldr	r3, [r7, #24]
 8013d26:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d105      	bne.n	8013d3a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	4798      	blx	r3
    handled = 1UL;
 8013d36:	2301      	movs	r3, #1
 8013d38:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8013d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	f040 8147 	bne.w	8013fd0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	f003 0308 	and.w	r3, r3, #8
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f000 808b 	beq.w	8013e64 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	699a      	ldr	r2, [r3, #24]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f042 0208 	orr.w	r2, r2, #8
 8013d5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	699a      	ldr	r2, [r3, #24]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f042 0210 	orr.w	r2, r2, #16
 8013d6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	699a      	ldr	r2, [r3, #24]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013d7c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	691a      	ldr	r2, [r3, #16]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	f022 0208 	bic.w	r2, r2, #8
 8013d8c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	689b      	ldr	r3, [r3, #8]
 8013d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d13d      	bne.n	8013e18 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8013d9c:	e036      	b.n	8013e0c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	2b0f      	cmp	r3, #15
 8013da4:	d90b      	bls.n	8013dbe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013db0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013db6:	1d1a      	adds	r2, r3, #4
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	665a      	str	r2, [r3, #100]	; 0x64
 8013dbc:	e01d      	b.n	8013dfa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	2b07      	cmp	r3, #7
 8013dc4:	d90b      	bls.n	8013dde <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013dca:	68fa      	ldr	r2, [r7, #12]
 8013dcc:	8812      	ldrh	r2, [r2, #0]
 8013dce:	b292      	uxth	r2, r2
 8013dd0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013dd6:	1c9a      	adds	r2, r3, #2
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	665a      	str	r2, [r3, #100]	; 0x64
 8013ddc:	e00d      	b.n	8013dfa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013dea:	7812      	ldrb	r2, [r2, #0]
 8013dec:	b2d2      	uxtb	r2, r2
 8013dee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	3b01      	subs	r3, #1
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1c2      	bne.n	8013d9e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 f98f 	bl	801413c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2201      	movs	r2, #1
 8013e22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d003      	beq.n	8013e38 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 f901 	bl	8014038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013e36:	e0d0      	b.n	8013fda <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8013e38:	7cfb      	ldrb	r3, [r7, #19]
 8013e3a:	2b05      	cmp	r3, #5
 8013e3c:	d103      	bne.n	8013e46 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 f8e6 	bl	8014010 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8013e44:	e0c6      	b.n	8013fd4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8013e46:	7cfb      	ldrb	r3, [r7, #19]
 8013e48:	2b04      	cmp	r3, #4
 8013e4a:	d103      	bne.n	8013e54 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 f8d5 	bl	8013ffc <HAL_SPI_RxCpltCallback>
    return;
 8013e52:	e0bf      	b.n	8013fd4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8013e54:	7cfb      	ldrb	r3, [r7, #19]
 8013e56:	2b03      	cmp	r3, #3
 8013e58:	f040 80bc 	bne.w	8013fd4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 f8c3 	bl	8013fe8 <HAL_SPI_TxCpltCallback>
    return;
 8013e62:	e0b7      	b.n	8013fd4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 80b5 	beq.w	8013fda <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d00f      	beq.n	8013e9a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e80:	f043 0204 	orr.w	r2, r3, #4
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	699a      	ldr	r2, [r3, #24]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d00f      	beq.n	8013ec4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013eaa:	f043 0201 	orr.w	r2, r3, #1
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	699a      	ldr	r2, [r3, #24]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ec2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8013ec4:	69bb      	ldr	r3, [r7, #24]
 8013ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d00f      	beq.n	8013eee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ed4:	f043 0208 	orr.w	r2, r3, #8
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	699a      	ldr	r2, [r3, #24]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013eec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	f003 0320 	and.w	r3, r3, #32
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00f      	beq.n	8013f18 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013efe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	699a      	ldr	r2, [r3, #24]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f042 0220 	orr.w	r2, r2, #32
 8013f16:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d05a      	beq.n	8013fd8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f022 0201 	bic.w	r2, r2, #1
 8013f30:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	6919      	ldr	r1, [r3, #16]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	4b28      	ldr	r3, [pc, #160]	; (8013fe0 <HAL_SPI_IRQHandler+0x394>)
 8013f3e:	400b      	ands	r3, r1
 8013f40:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013f48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013f4c:	d138      	bne.n	8013fc0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	689a      	ldr	r2, [r3, #8]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013f5c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d013      	beq.n	8013f8e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f6a:	4a1e      	ldr	r2, [pc, #120]	; (8013fe4 <HAL_SPI_IRQHandler+0x398>)
 8013f6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7f6 f942 	bl	800a1fc <HAL_DMA_Abort_IT>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d007      	beq.n	8013f8e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d020      	beq.n	8013fd8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f9a:	4a12      	ldr	r2, [pc, #72]	; (8013fe4 <HAL_SPI_IRQHandler+0x398>)
 8013f9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7f6 f92a 	bl	800a1fc <HAL_DMA_Abort_IT>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d014      	beq.n	8013fd8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013fb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013fbe:	e00b      	b.n	8013fd8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f000 f835 	bl	8014038 <HAL_SPI_ErrorCallback>
    return;
 8013fce:	e003      	b.n	8013fd8 <HAL_SPI_IRQHandler+0x38c>
    return;
 8013fd0:	bf00      	nop
 8013fd2:	e002      	b.n	8013fda <HAL_SPI_IRQHandler+0x38e>
    return;
 8013fd4:	bf00      	nop
 8013fd6:	e000      	b.n	8013fda <HAL_SPI_IRQHandler+0x38e>
    return;
 8013fd8:	bf00      	nop
  }
}
 8013fda:	3728      	adds	r7, #40	; 0x28
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	fffffc94 	.word	0xfffffc94
 8013fe4:	08014109 	.word	0x08014109

08013fe8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013ff0:	bf00      	nop
 8013ff2:	370c      	adds	r7, #12
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr

08013ffc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b083      	sub	sp, #12
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014004:	bf00      	nop
 8014006:	370c      	adds	r7, #12
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014024:	b480      	push	{r7}
 8014026:	b083      	sub	sp, #12
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801402c:	bf00      	nop
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014038:	b480      	push	{r7}
 801403a:	b083      	sub	sp, #12
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014040:	bf00      	nop
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr

0801404c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801404c:	b480      	push	{r7}
 801404e:	b083      	sub	sp, #12
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8014054:	bf00      	nop
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr

08014060 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801406c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014074:	b2db      	uxtb	r3, r3
 8014076:	2b07      	cmp	r3, #7
 8014078:	d011      	beq.n	801409e <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801407e:	69db      	ldr	r3, [r3, #28]
 8014080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014084:	d103      	bne.n	801408e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014086:	68f8      	ldr	r0, [r7, #12]
 8014088:	f7ff ffb8 	bl	8013ffc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801408c:	e007      	b.n	801409e <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	691a      	ldr	r2, [r3, #16]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f042 0208 	orr.w	r2, r2, #8
 801409c:	611a      	str	r2, [r3, #16]
}
 801409e:	bf00      	nop
 80140a0:	3710      	adds	r7, #16
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}

080140a6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80140a6:	b580      	push	{r7, lr}
 80140a8:	b084      	sub	sp, #16
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	f7ff ffb5 	bl	8014024 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80140ba:	bf00      	nop
 80140bc:	3710      	adds	r7, #16
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80140c2:	b580      	push	{r7, lr}
 80140c4:	b084      	sub	sp, #16
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140ce:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f7f7 fa11 	bl	800b4f8 <HAL_DMA_GetError>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b02      	cmp	r3, #2
 80140da:	d011      	beq.n	8014100 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80140dc:	68f8      	ldr	r0, [r7, #12]
 80140de:	f000 f82d 	bl	801413c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140e8:	f043 0210 	orr.w	r2, r3, #16
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2201      	movs	r2, #1
 80140f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f7ff ff9c 	bl	8014038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014100:	bf00      	nop
 8014102:	3710      	adds	r7, #16
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014114:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2200      	movs	r2, #0
 801411a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2200      	movs	r2, #0
 8014122:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2201      	movs	r2, #1
 801412a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f7ff ff82 	bl	8014038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014134:	bf00      	nop
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	695b      	ldr	r3, [r3, #20]
 801414a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	699a      	ldr	r2, [r3, #24]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	f042 0208 	orr.w	r2, r2, #8
 801415a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	699a      	ldr	r2, [r3, #24]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f042 0210 	orr.w	r2, r2, #16
 801416a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	f022 0201 	bic.w	r2, r2, #1
 801417a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	6919      	ldr	r1, [r3, #16]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	4b3c      	ldr	r3, [pc, #240]	; (8014278 <SPI_CloseTransfer+0x13c>)
 8014188:	400b      	ands	r3, r1
 801418a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	689a      	ldr	r2, [r3, #8]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801419a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	2b04      	cmp	r3, #4
 80141a6:	d014      	beq.n	80141d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f003 0320 	and.w	r3, r3, #32
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d00f      	beq.n	80141d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	699a      	ldr	r2, [r3, #24]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	f042 0220 	orr.w	r2, r2, #32
 80141d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b03      	cmp	r3, #3
 80141dc:	d014      	beq.n	8014208 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d00f      	beq.n	8014208 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80141ee:	f043 0204 	orr.w	r2, r3, #4
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	699a      	ldr	r2, [r3, #24]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014206:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801420e:	2b00      	cmp	r3, #0
 8014210:	d00f      	beq.n	8014232 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014218:	f043 0201 	orr.w	r2, r3, #1
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	699a      	ldr	r2, [r3, #24]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014230:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00f      	beq.n	801425c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014242:	f043 0208 	orr.w	r2, r3, #8
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	699a      	ldr	r2, [r3, #24]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801425a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2200      	movs	r2, #0
 8014260:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801426c:	bf00      	nop
 801426e:	3714      	adds	r7, #20
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr
 8014278:	fffffc90 	.word	0xfffffc90

0801427c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801427c:	b480      	push	{r7}
 801427e:	b085      	sub	sp, #20
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014288:	095b      	lsrs	r3, r3, #5
 801428a:	3301      	adds	r3, #1
 801428c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	3301      	adds	r3, #1
 8014294:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	3307      	adds	r3, #7
 801429a:	08db      	lsrs	r3, r3, #3
 801429c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3714      	adds	r7, #20
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr

080142b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80142b2:	b580      	push	{r7, lr}
 80142b4:	b082      	sub	sp, #8
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d101      	bne.n	80142c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80142c0:	2301      	movs	r3, #1
 80142c2:	e049      	b.n	8014358 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d106      	bne.n	80142de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7f1 f9e3 	bl	80056a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2202      	movs	r2, #2
 80142e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681a      	ldr	r2, [r3, #0]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3304      	adds	r3, #4
 80142ee:	4619      	mov	r1, r3
 80142f0:	4610      	mov	r0, r2
 80142f2:	f000 fe7d 	bl	8014ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2201      	movs	r2, #1
 80142fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2201      	movs	r2, #1
 8014302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2201      	movs	r2, #1
 801430a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2201      	movs	r2, #1
 8014312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2201      	movs	r2, #1
 801431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2201      	movs	r2, #1
 8014322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2201      	movs	r2, #1
 801432a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2201      	movs	r2, #1
 8014332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2201      	movs	r2, #1
 801433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2201      	movs	r2, #1
 8014342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2201      	movs	r2, #1
 801434a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2201      	movs	r2, #1
 8014352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014356:	2300      	movs	r3, #0
}
 8014358:	4618      	mov	r0, r3
 801435a:	3708      	adds	r7, #8
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014360:	b480      	push	{r7}
 8014362:	b085      	sub	sp, #20
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801436e:	b2db      	uxtb	r3, r3
 8014370:	2b01      	cmp	r3, #1
 8014372:	d001      	beq.n	8014378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014374:	2301      	movs	r3, #1
 8014376:	e054      	b.n	8014422 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2202      	movs	r2, #2
 801437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	68da      	ldr	r2, [r3, #12]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f042 0201 	orr.w	r2, r2, #1
 801438e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a26      	ldr	r2, [pc, #152]	; (8014430 <HAL_TIM_Base_Start_IT+0xd0>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d022      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143a2:	d01d      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a22      	ldr	r2, [pc, #136]	; (8014434 <HAL_TIM_Base_Start_IT+0xd4>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d018      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	4a21      	ldr	r2, [pc, #132]	; (8014438 <HAL_TIM_Base_Start_IT+0xd8>)
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d013      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4a1f      	ldr	r2, [pc, #124]	; (801443c <HAL_TIM_Base_Start_IT+0xdc>)
 80143be:	4293      	cmp	r3, r2
 80143c0:	d00e      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	4a1e      	ldr	r2, [pc, #120]	; (8014440 <HAL_TIM_Base_Start_IT+0xe0>)
 80143c8:	4293      	cmp	r3, r2
 80143ca:	d009      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a1c      	ldr	r2, [pc, #112]	; (8014444 <HAL_TIM_Base_Start_IT+0xe4>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d004      	beq.n	80143e0 <HAL_TIM_Base_Start_IT+0x80>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a1b      	ldr	r2, [pc, #108]	; (8014448 <HAL_TIM_Base_Start_IT+0xe8>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d115      	bne.n	801440c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	689a      	ldr	r2, [r3, #8]
 80143e6:	4b19      	ldr	r3, [pc, #100]	; (801444c <HAL_TIM_Base_Start_IT+0xec>)
 80143e8:	4013      	ands	r3, r2
 80143ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b06      	cmp	r3, #6
 80143f0:	d015      	beq.n	801441e <HAL_TIM_Base_Start_IT+0xbe>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143f8:	d011      	beq.n	801441e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	681a      	ldr	r2, [r3, #0]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	f042 0201 	orr.w	r2, r2, #1
 8014408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801440a:	e008      	b.n	801441e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	f042 0201 	orr.w	r2, r2, #1
 801441a:	601a      	str	r2, [r3, #0]
 801441c:	e000      	b.n	8014420 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801441e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3714      	adds	r7, #20
 8014426:	46bd      	mov	sp, r7
 8014428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442c:	4770      	bx	lr
 801442e:	bf00      	nop
 8014430:	40010000 	.word	0x40010000
 8014434:	40000400 	.word	0x40000400
 8014438:	40000800 	.word	0x40000800
 801443c:	40000c00 	.word	0x40000c00
 8014440:	40010400 	.word	0x40010400
 8014444:	40001800 	.word	0x40001800
 8014448:	40014000 	.word	0x40014000
 801444c:	00010007 	.word	0x00010007

08014450 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801445a:	2300      	movs	r3, #0
 801445c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d109      	bne.n	8014478 <HAL_TIM_OC_Start_IT+0x28>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801446a:	b2db      	uxtb	r3, r3
 801446c:	2b01      	cmp	r3, #1
 801446e:	bf14      	ite	ne
 8014470:	2301      	movne	r3, #1
 8014472:	2300      	moveq	r3, #0
 8014474:	b2db      	uxtb	r3, r3
 8014476:	e03c      	b.n	80144f2 <HAL_TIM_OC_Start_IT+0xa2>
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	2b04      	cmp	r3, #4
 801447c:	d109      	bne.n	8014492 <HAL_TIM_OC_Start_IT+0x42>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014484:	b2db      	uxtb	r3, r3
 8014486:	2b01      	cmp	r3, #1
 8014488:	bf14      	ite	ne
 801448a:	2301      	movne	r3, #1
 801448c:	2300      	moveq	r3, #0
 801448e:	b2db      	uxtb	r3, r3
 8014490:	e02f      	b.n	80144f2 <HAL_TIM_OC_Start_IT+0xa2>
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	2b08      	cmp	r3, #8
 8014496:	d109      	bne.n	80144ac <HAL_TIM_OC_Start_IT+0x5c>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	bf14      	ite	ne
 80144a4:	2301      	movne	r3, #1
 80144a6:	2300      	moveq	r3, #0
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	e022      	b.n	80144f2 <HAL_TIM_OC_Start_IT+0xa2>
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	2b0c      	cmp	r3, #12
 80144b0:	d109      	bne.n	80144c6 <HAL_TIM_OC_Start_IT+0x76>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	bf14      	ite	ne
 80144be:	2301      	movne	r3, #1
 80144c0:	2300      	moveq	r3, #0
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	e015      	b.n	80144f2 <HAL_TIM_OC_Start_IT+0xa2>
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	2b10      	cmp	r3, #16
 80144ca:	d109      	bne.n	80144e0 <HAL_TIM_OC_Start_IT+0x90>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	bf14      	ite	ne
 80144d8:	2301      	movne	r3, #1
 80144da:	2300      	moveq	r3, #0
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	e008      	b.n	80144f2 <HAL_TIM_OC_Start_IT+0xa2>
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	bf14      	ite	ne
 80144ec:	2301      	movne	r3, #1
 80144ee:	2300      	moveq	r3, #0
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d001      	beq.n	80144fa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80144f6:	2301      	movs	r3, #1
 80144f8:	e0ec      	b.n	80146d4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d104      	bne.n	801450a <HAL_TIM_OC_Start_IT+0xba>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2202      	movs	r2, #2
 8014504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014508:	e023      	b.n	8014552 <HAL_TIM_OC_Start_IT+0x102>
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	2b04      	cmp	r3, #4
 801450e:	d104      	bne.n	801451a <HAL_TIM_OC_Start_IT+0xca>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2202      	movs	r2, #2
 8014514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014518:	e01b      	b.n	8014552 <HAL_TIM_OC_Start_IT+0x102>
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	2b08      	cmp	r3, #8
 801451e:	d104      	bne.n	801452a <HAL_TIM_OC_Start_IT+0xda>
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2202      	movs	r2, #2
 8014524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014528:	e013      	b.n	8014552 <HAL_TIM_OC_Start_IT+0x102>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	2b0c      	cmp	r3, #12
 801452e:	d104      	bne.n	801453a <HAL_TIM_OC_Start_IT+0xea>
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2202      	movs	r2, #2
 8014534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014538:	e00b      	b.n	8014552 <HAL_TIM_OC_Start_IT+0x102>
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	2b10      	cmp	r3, #16
 801453e:	d104      	bne.n	801454a <HAL_TIM_OC_Start_IT+0xfa>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2202      	movs	r2, #2
 8014544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014548:	e003      	b.n	8014552 <HAL_TIM_OC_Start_IT+0x102>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2202      	movs	r2, #2
 801454e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	2b0c      	cmp	r3, #12
 8014556:	d841      	bhi.n	80145dc <HAL_TIM_OC_Start_IT+0x18c>
 8014558:	a201      	add	r2, pc, #4	; (adr r2, 8014560 <HAL_TIM_OC_Start_IT+0x110>)
 801455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801455e:	bf00      	nop
 8014560:	08014595 	.word	0x08014595
 8014564:	080145dd 	.word	0x080145dd
 8014568:	080145dd 	.word	0x080145dd
 801456c:	080145dd 	.word	0x080145dd
 8014570:	080145a7 	.word	0x080145a7
 8014574:	080145dd 	.word	0x080145dd
 8014578:	080145dd 	.word	0x080145dd
 801457c:	080145dd 	.word	0x080145dd
 8014580:	080145b9 	.word	0x080145b9
 8014584:	080145dd 	.word	0x080145dd
 8014588:	080145dd 	.word	0x080145dd
 801458c:	080145dd 	.word	0x080145dd
 8014590:	080145cb 	.word	0x080145cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	68da      	ldr	r2, [r3, #12]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f042 0202 	orr.w	r2, r2, #2
 80145a2:	60da      	str	r2, [r3, #12]
      break;
 80145a4:	e01d      	b.n	80145e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	68da      	ldr	r2, [r3, #12]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f042 0204 	orr.w	r2, r2, #4
 80145b4:	60da      	str	r2, [r3, #12]
      break;
 80145b6:	e014      	b.n	80145e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	68da      	ldr	r2, [r3, #12]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f042 0208 	orr.w	r2, r2, #8
 80145c6:	60da      	str	r2, [r3, #12]
      break;
 80145c8:	e00b      	b.n	80145e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	68da      	ldr	r2, [r3, #12]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	f042 0210 	orr.w	r2, r2, #16
 80145d8:	60da      	str	r2, [r3, #12]
      break;
 80145da:	e002      	b.n	80145e2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80145dc:	2301      	movs	r3, #1
 80145de:	73fb      	strb	r3, [r7, #15]
      break;
 80145e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d174      	bne.n	80146d2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2201      	movs	r2, #1
 80145ee:	6839      	ldr	r1, [r7, #0]
 80145f0:	4618      	mov	r0, r3
 80145f2:	f001 f917 	bl	8015824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	4a38      	ldr	r2, [pc, #224]	; (80146dc <HAL_TIM_OC_Start_IT+0x28c>)
 80145fc:	4293      	cmp	r3, r2
 80145fe:	d013      	beq.n	8014628 <HAL_TIM_OC_Start_IT+0x1d8>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	4a36      	ldr	r2, [pc, #216]	; (80146e0 <HAL_TIM_OC_Start_IT+0x290>)
 8014606:	4293      	cmp	r3, r2
 8014608:	d00e      	beq.n	8014628 <HAL_TIM_OC_Start_IT+0x1d8>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4a35      	ldr	r2, [pc, #212]	; (80146e4 <HAL_TIM_OC_Start_IT+0x294>)
 8014610:	4293      	cmp	r3, r2
 8014612:	d009      	beq.n	8014628 <HAL_TIM_OC_Start_IT+0x1d8>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	4a33      	ldr	r2, [pc, #204]	; (80146e8 <HAL_TIM_OC_Start_IT+0x298>)
 801461a:	4293      	cmp	r3, r2
 801461c:	d004      	beq.n	8014628 <HAL_TIM_OC_Start_IT+0x1d8>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	4a32      	ldr	r2, [pc, #200]	; (80146ec <HAL_TIM_OC_Start_IT+0x29c>)
 8014624:	4293      	cmp	r3, r2
 8014626:	d101      	bne.n	801462c <HAL_TIM_OC_Start_IT+0x1dc>
 8014628:	2301      	movs	r3, #1
 801462a:	e000      	b.n	801462e <HAL_TIM_OC_Start_IT+0x1de>
 801462c:	2300      	movs	r3, #0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d007      	beq.n	8014642 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	4a25      	ldr	r2, [pc, #148]	; (80146dc <HAL_TIM_OC_Start_IT+0x28c>)
 8014648:	4293      	cmp	r3, r2
 801464a:	d022      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014654:	d01d      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	4a25      	ldr	r2, [pc, #148]	; (80146f0 <HAL_TIM_OC_Start_IT+0x2a0>)
 801465c:	4293      	cmp	r3, r2
 801465e:	d018      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	4a23      	ldr	r2, [pc, #140]	; (80146f4 <HAL_TIM_OC_Start_IT+0x2a4>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d013      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	4a22      	ldr	r2, [pc, #136]	; (80146f8 <HAL_TIM_OC_Start_IT+0x2a8>)
 8014670:	4293      	cmp	r3, r2
 8014672:	d00e      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a19      	ldr	r2, [pc, #100]	; (80146e0 <HAL_TIM_OC_Start_IT+0x290>)
 801467a:	4293      	cmp	r3, r2
 801467c:	d009      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	4a1e      	ldr	r2, [pc, #120]	; (80146fc <HAL_TIM_OC_Start_IT+0x2ac>)
 8014684:	4293      	cmp	r3, r2
 8014686:	d004      	beq.n	8014692 <HAL_TIM_OC_Start_IT+0x242>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	4a15      	ldr	r2, [pc, #84]	; (80146e4 <HAL_TIM_OC_Start_IT+0x294>)
 801468e:	4293      	cmp	r3, r2
 8014690:	d115      	bne.n	80146be <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	689a      	ldr	r2, [r3, #8]
 8014698:	4b19      	ldr	r3, [pc, #100]	; (8014700 <HAL_TIM_OC_Start_IT+0x2b0>)
 801469a:	4013      	ands	r3, r2
 801469c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	2b06      	cmp	r3, #6
 80146a2:	d015      	beq.n	80146d0 <HAL_TIM_OC_Start_IT+0x280>
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146aa:	d011      	beq.n	80146d0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f042 0201 	orr.w	r2, r2, #1
 80146ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146bc:	e008      	b.n	80146d0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f042 0201 	orr.w	r2, r2, #1
 80146cc:	601a      	str	r2, [r3, #0]
 80146ce:	e000      	b.n	80146d2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80146d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}
 80146dc:	40010000 	.word	0x40010000
 80146e0:	40010400 	.word	0x40010400
 80146e4:	40014000 	.word	0x40014000
 80146e8:	40014400 	.word	0x40014400
 80146ec:	40014800 	.word	0x40014800
 80146f0:	40000400 	.word	0x40000400
 80146f4:	40000800 	.word	0x40000800
 80146f8:	40000c00 	.word	0x40000c00
 80146fc:	40001800 	.word	0x40001800
 8014700:	00010007 	.word	0x00010007

08014704 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801470e:	2300      	movs	r3, #0
 8014710:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	2b0c      	cmp	r3, #12
 8014716:	d841      	bhi.n	801479c <HAL_TIM_OC_Stop_IT+0x98>
 8014718:	a201      	add	r2, pc, #4	; (adr r2, 8014720 <HAL_TIM_OC_Stop_IT+0x1c>)
 801471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801471e:	bf00      	nop
 8014720:	08014755 	.word	0x08014755
 8014724:	0801479d 	.word	0x0801479d
 8014728:	0801479d 	.word	0x0801479d
 801472c:	0801479d 	.word	0x0801479d
 8014730:	08014767 	.word	0x08014767
 8014734:	0801479d 	.word	0x0801479d
 8014738:	0801479d 	.word	0x0801479d
 801473c:	0801479d 	.word	0x0801479d
 8014740:	08014779 	.word	0x08014779
 8014744:	0801479d 	.word	0x0801479d
 8014748:	0801479d 	.word	0x0801479d
 801474c:	0801479d 	.word	0x0801479d
 8014750:	0801478b 	.word	0x0801478b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	68da      	ldr	r2, [r3, #12]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f022 0202 	bic.w	r2, r2, #2
 8014762:	60da      	str	r2, [r3, #12]
      break;
 8014764:	e01d      	b.n	80147a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	68da      	ldr	r2, [r3, #12]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f022 0204 	bic.w	r2, r2, #4
 8014774:	60da      	str	r2, [r3, #12]
      break;
 8014776:	e014      	b.n	80147a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	68da      	ldr	r2, [r3, #12]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	f022 0208 	bic.w	r2, r2, #8
 8014786:	60da      	str	r2, [r3, #12]
      break;
 8014788:	e00b      	b.n	80147a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	68da      	ldr	r2, [r3, #12]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	f022 0210 	bic.w	r2, r2, #16
 8014798:	60da      	str	r2, [r3, #12]
      break;
 801479a:	e002      	b.n	80147a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 801479c:	2301      	movs	r3, #1
 801479e:	73fb      	strb	r3, [r7, #15]
      break;
 80147a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80147a2:	7bfb      	ldrb	r3, [r7, #15]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f040 8081 	bne.w	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	2200      	movs	r2, #0
 80147b0:	6839      	ldr	r1, [r7, #0]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f001 f836 	bl	8015824 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4a3e      	ldr	r2, [pc, #248]	; (80148b8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80147be:	4293      	cmp	r3, r2
 80147c0:	d013      	beq.n	80147ea <HAL_TIM_OC_Stop_IT+0xe6>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	4a3d      	ldr	r2, [pc, #244]	; (80148bc <HAL_TIM_OC_Stop_IT+0x1b8>)
 80147c8:	4293      	cmp	r3, r2
 80147ca:	d00e      	beq.n	80147ea <HAL_TIM_OC_Stop_IT+0xe6>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4a3b      	ldr	r2, [pc, #236]	; (80148c0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80147d2:	4293      	cmp	r3, r2
 80147d4:	d009      	beq.n	80147ea <HAL_TIM_OC_Stop_IT+0xe6>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4a3a      	ldr	r2, [pc, #232]	; (80148c4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d004      	beq.n	80147ea <HAL_TIM_OC_Stop_IT+0xe6>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a38      	ldr	r2, [pc, #224]	; (80148c8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d101      	bne.n	80147ee <HAL_TIM_OC_Stop_IT+0xea>
 80147ea:	2301      	movs	r3, #1
 80147ec:	e000      	b.n	80147f0 <HAL_TIM_OC_Stop_IT+0xec>
 80147ee:	2300      	movs	r3, #0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d017      	beq.n	8014824 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	6a1a      	ldr	r2, [r3, #32]
 80147fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80147fe:	4013      	ands	r3, r2
 8014800:	2b00      	cmp	r3, #0
 8014802:	d10f      	bne.n	8014824 <HAL_TIM_OC_Stop_IT+0x120>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	6a1a      	ldr	r2, [r3, #32]
 801480a:	f240 4344 	movw	r3, #1092	; 0x444
 801480e:	4013      	ands	r3, r2
 8014810:	2b00      	cmp	r3, #0
 8014812:	d107      	bne.n	8014824 <HAL_TIM_OC_Stop_IT+0x120>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014822:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	6a1a      	ldr	r2, [r3, #32]
 801482a:	f241 1311 	movw	r3, #4369	; 0x1111
 801482e:	4013      	ands	r3, r2
 8014830:	2b00      	cmp	r3, #0
 8014832:	d10f      	bne.n	8014854 <HAL_TIM_OC_Stop_IT+0x150>
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	6a1a      	ldr	r2, [r3, #32]
 801483a:	f240 4344 	movw	r3, #1092	; 0x444
 801483e:	4013      	ands	r3, r2
 8014840:	2b00      	cmp	r3, #0
 8014842:	d107      	bne.n	8014854 <HAL_TIM_OC_Stop_IT+0x150>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	f022 0201 	bic.w	r2, r2, #1
 8014852:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d104      	bne.n	8014864 <HAL_TIM_OC_Stop_IT+0x160>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2201      	movs	r2, #1
 801485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014862:	e023      	b.n	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	2b04      	cmp	r3, #4
 8014868:	d104      	bne.n	8014874 <HAL_TIM_OC_Stop_IT+0x170>
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2201      	movs	r2, #1
 801486e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014872:	e01b      	b.n	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	2b08      	cmp	r3, #8
 8014878:	d104      	bne.n	8014884 <HAL_TIM_OC_Stop_IT+0x180>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2201      	movs	r2, #1
 801487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014882:	e013      	b.n	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	2b0c      	cmp	r3, #12
 8014888:	d104      	bne.n	8014894 <HAL_TIM_OC_Stop_IT+0x190>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2201      	movs	r2, #1
 801488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014892:	e00b      	b.n	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	2b10      	cmp	r3, #16
 8014898:	d104      	bne.n	80148a4 <HAL_TIM_OC_Stop_IT+0x1a0>
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2201      	movs	r2, #1
 801489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80148a2:	e003      	b.n	80148ac <HAL_TIM_OC_Stop_IT+0x1a8>
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80148ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3710      	adds	r7, #16
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	40010000 	.word	0x40010000
 80148bc:	40010400 	.word	0x40010400
 80148c0:	40014000 	.word	0x40014000
 80148c4:	40014400 	.word	0x40014400
 80148c8:	40014800 	.word	0x40014800

080148cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80148da:	2301      	movs	r3, #1
 80148dc:	e049      	b.n	8014972 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2200      	movs	r2, #0
 80148ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 f841 	bl	801497a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2202      	movs	r2, #2
 80148fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	3304      	adds	r3, #4
 8014908:	4619      	mov	r1, r3
 801490a:	4610      	mov	r0, r2
 801490c:	f000 fb70 	bl	8014ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2201      	movs	r2, #1
 8014914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2201      	movs	r2, #1
 801491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2201      	movs	r2, #1
 8014924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2201      	movs	r2, #1
 801492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2201      	movs	r2, #1
 8014934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2201      	movs	r2, #1
 801493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2201      	movs	r2, #1
 8014944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2201      	movs	r2, #1
 801494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2201      	movs	r2, #1
 8014954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2201      	movs	r2, #1
 801495c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2201      	movs	r2, #1
 8014964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2201      	movs	r2, #1
 801496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014970:	2300      	movs	r3, #0
}
 8014972:	4618      	mov	r0, r3
 8014974:	3708      	adds	r7, #8
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}

0801497a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801497a:	b480      	push	{r7}
 801497c:	b083      	sub	sp, #12
 801497e:	af00      	add	r7, sp, #0
 8014980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014982:	bf00      	nop
 8014984:	370c      	adds	r7, #12
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr

0801498e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801498e:	b580      	push	{r7, lr}
 8014990:	b084      	sub	sp, #16
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	691b      	ldr	r3, [r3, #16]
 80149a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	f003 0302 	and.w	r3, r3, #2
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d020      	beq.n	80149f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f003 0302 	and.w	r3, r3, #2
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d01b      	beq.n	80149f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f06f 0202 	mvn.w	r2, #2
 80149c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2201      	movs	r2, #1
 80149c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	699b      	ldr	r3, [r3, #24]
 80149d0:	f003 0303 	and.w	r3, r3, #3
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d003      	beq.n	80149e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 faeb 	bl	8014fb4 <HAL_TIM_IC_CaptureCallback>
 80149de:	e005      	b.n	80149ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f7ee fa15 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 faee 	bl	8014fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2200      	movs	r2, #0
 80149f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	f003 0304 	and.w	r3, r3, #4
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d020      	beq.n	8014a3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f003 0304 	and.w	r3, r3, #4
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d01b      	beq.n	8014a3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f06f 0204 	mvn.w	r2, #4
 8014a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2202      	movs	r2, #2
 8014a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	699b      	ldr	r3, [r3, #24]
 8014a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d003      	beq.n	8014a2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f000 fac5 	bl	8014fb4 <HAL_TIM_IC_CaptureCallback>
 8014a2a:	e005      	b.n	8014a38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ee f9ef 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fac8 	bl	8014fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	f003 0308 	and.w	r3, r3, #8
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d020      	beq.n	8014a8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f003 0308 	and.w	r3, r3, #8
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d01b      	beq.n	8014a8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f06f 0208 	mvn.w	r2, #8
 8014a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2204      	movs	r2, #4
 8014a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	69db      	ldr	r3, [r3, #28]
 8014a68:	f003 0303 	and.w	r3, r3, #3
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d003      	beq.n	8014a78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f000 fa9f 	bl	8014fb4 <HAL_TIM_IC_CaptureCallback>
 8014a76:	e005      	b.n	8014a84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7ee f9c9 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f000 faa2 	bl	8014fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2200      	movs	r2, #0
 8014a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	f003 0310 	and.w	r3, r3, #16
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d020      	beq.n	8014ad6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f003 0310 	and.w	r3, r3, #16
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d01b      	beq.n	8014ad6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f06f 0210 	mvn.w	r2, #16
 8014aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2208      	movs	r2, #8
 8014aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	69db      	ldr	r3, [r3, #28]
 8014ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d003      	beq.n	8014ac4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f000 fa79 	bl	8014fb4 <HAL_TIM_IC_CaptureCallback>
 8014ac2:	e005      	b.n	8014ad0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f7ee f9a3 	bl	8002e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 fa7c 	bl	8014fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00c      	beq.n	8014afa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f003 0301 	and.w	r3, r3, #1
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d007      	beq.n	8014afa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	f06f 0201 	mvn.w	r2, #1
 8014af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f7ef f851 	bl	8003b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d104      	bne.n	8014b0e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d00c      	beq.n	8014b28 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d007      	beq.n	8014b28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8014b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 ffba 	bl	8015a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00c      	beq.n	8014b4c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d007      	beq.n	8014b4c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 ffb2 	bl	8015ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d00c      	beq.n	8014b70 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d007      	beq.n	8014b70 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fa36 	bl	8014fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f003 0320 	and.w	r3, r3, #32
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00c      	beq.n	8014b94 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f003 0320 	and.w	r3, r3, #32
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d007      	beq.n	8014b94 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f06f 0220 	mvn.w	r2, #32
 8014b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 ff7a 	bl	8015a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d101      	bne.n	8014bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014bb6:	2302      	movs	r3, #2
 8014bb8:	e0ff      	b.n	8014dba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2b14      	cmp	r3, #20
 8014bc6:	f200 80f0 	bhi.w	8014daa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8014bca:	a201      	add	r2, pc, #4	; (adr r2, 8014bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bd0:	08014c25 	.word	0x08014c25
 8014bd4:	08014dab 	.word	0x08014dab
 8014bd8:	08014dab 	.word	0x08014dab
 8014bdc:	08014dab 	.word	0x08014dab
 8014be0:	08014c65 	.word	0x08014c65
 8014be4:	08014dab 	.word	0x08014dab
 8014be8:	08014dab 	.word	0x08014dab
 8014bec:	08014dab 	.word	0x08014dab
 8014bf0:	08014ca7 	.word	0x08014ca7
 8014bf4:	08014dab 	.word	0x08014dab
 8014bf8:	08014dab 	.word	0x08014dab
 8014bfc:	08014dab 	.word	0x08014dab
 8014c00:	08014ce7 	.word	0x08014ce7
 8014c04:	08014dab 	.word	0x08014dab
 8014c08:	08014dab 	.word	0x08014dab
 8014c0c:	08014dab 	.word	0x08014dab
 8014c10:	08014d29 	.word	0x08014d29
 8014c14:	08014dab 	.word	0x08014dab
 8014c18:	08014dab 	.word	0x08014dab
 8014c1c:	08014dab 	.word	0x08014dab
 8014c20:	08014d69 	.word	0x08014d69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	68b9      	ldr	r1, [r7, #8]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f000 fa86 	bl	801513c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	699a      	ldr	r2, [r3, #24]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	f042 0208 	orr.w	r2, r2, #8
 8014c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	699a      	ldr	r2, [r3, #24]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	f022 0204 	bic.w	r2, r2, #4
 8014c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	6999      	ldr	r1, [r3, #24]
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	691a      	ldr	r2, [r3, #16]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	430a      	orrs	r2, r1
 8014c60:	619a      	str	r2, [r3, #24]
      break;
 8014c62:	e0a5      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	68b9      	ldr	r1, [r7, #8]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f000 faf6 	bl	801525c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	699a      	ldr	r2, [r3, #24]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	699a      	ldr	r2, [r3, #24]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	6999      	ldr	r1, [r3, #24]
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	691b      	ldr	r3, [r3, #16]
 8014c9a:	021a      	lsls	r2, r3, #8
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	430a      	orrs	r2, r1
 8014ca2:	619a      	str	r2, [r3, #24]
      break;
 8014ca4:	e084      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	68b9      	ldr	r1, [r7, #8]
 8014cac:	4618      	mov	r0, r3
 8014cae:	f000 fb5f 	bl	8015370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	69da      	ldr	r2, [r3, #28]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f042 0208 	orr.w	r2, r2, #8
 8014cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	69da      	ldr	r2, [r3, #28]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f022 0204 	bic.w	r2, r2, #4
 8014cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	69d9      	ldr	r1, [r3, #28]
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	691a      	ldr	r2, [r3, #16]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	430a      	orrs	r2, r1
 8014ce2:	61da      	str	r2, [r3, #28]
      break;
 8014ce4:	e064      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	68b9      	ldr	r1, [r7, #8]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 fbc7 	bl	8015480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	69da      	ldr	r2, [r3, #28]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	69da      	ldr	r2, [r3, #28]
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	69d9      	ldr	r1, [r3, #28]
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	691b      	ldr	r3, [r3, #16]
 8014d1c:	021a      	lsls	r2, r3, #8
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	430a      	orrs	r2, r1
 8014d24:	61da      	str	r2, [r3, #28]
      break;
 8014d26:	e043      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	68b9      	ldr	r1, [r7, #8]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f000 fc10 	bl	8015554 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	f042 0208 	orr.w	r2, r2, #8
 8014d42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f022 0204 	bic.w	r2, r2, #4
 8014d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	691a      	ldr	r2, [r3, #16]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	430a      	orrs	r2, r1
 8014d64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014d66:	e023      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68b9      	ldr	r1, [r7, #8]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f000 fc54 	bl	801561c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014d82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014d92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	691b      	ldr	r3, [r3, #16]
 8014d9e:	021a      	lsls	r2, r3, #8
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	430a      	orrs	r2, r1
 8014da6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014da8:	e002      	b.n	8014db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	75fb      	strb	r3, [r7, #23]
      break;
 8014dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3718      	adds	r7, #24
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop

08014dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d101      	bne.n	8014de0 <HAL_TIM_ConfigClockSource+0x1c>
 8014ddc:	2302      	movs	r3, #2
 8014dde:	e0dc      	b.n	8014f9a <HAL_TIM_ConfigClockSource+0x1d6>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2201      	movs	r2, #1
 8014de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2202      	movs	r2, #2
 8014dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	689b      	ldr	r3, [r3, #8]
 8014df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014df8:	68ba      	ldr	r2, [r7, #8]
 8014dfa:	4b6a      	ldr	r3, [pc, #424]	; (8014fa4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8014dfc:	4013      	ands	r3, r2
 8014dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68ba      	ldr	r2, [r7, #8]
 8014e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4a64      	ldr	r2, [pc, #400]	; (8014fa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8014e16:	4293      	cmp	r3, r2
 8014e18:	f000 80a9 	beq.w	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014e1c:	4a62      	ldr	r2, [pc, #392]	; (8014fa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	f200 80ae 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e24:	4a61      	ldr	r2, [pc, #388]	; (8014fac <HAL_TIM_ConfigClockSource+0x1e8>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	f000 80a1 	beq.w	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014e2c:	4a5f      	ldr	r2, [pc, #380]	; (8014fac <HAL_TIM_ConfigClockSource+0x1e8>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	f200 80a6 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e34:	4a5e      	ldr	r2, [pc, #376]	; (8014fb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014e36:	4293      	cmp	r3, r2
 8014e38:	f000 8099 	beq.w	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014e3c:	4a5c      	ldr	r2, [pc, #368]	; (8014fb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014e3e:	4293      	cmp	r3, r2
 8014e40:	f200 809e 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014e48:	f000 8091 	beq.w	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014e4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014e50:	f200 8096 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014e58:	f000 8089 	beq.w	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014e60:	f200 808e 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e68:	d03e      	beq.n	8014ee8 <HAL_TIM_ConfigClockSource+0x124>
 8014e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014e6e:	f200 8087 	bhi.w	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e76:	f000 8086 	beq.w	8014f86 <HAL_TIM_ConfigClockSource+0x1c2>
 8014e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e7e:	d87f      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e80:	2b70      	cmp	r3, #112	; 0x70
 8014e82:	d01a      	beq.n	8014eba <HAL_TIM_ConfigClockSource+0xf6>
 8014e84:	2b70      	cmp	r3, #112	; 0x70
 8014e86:	d87b      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e88:	2b60      	cmp	r3, #96	; 0x60
 8014e8a:	d050      	beq.n	8014f2e <HAL_TIM_ConfigClockSource+0x16a>
 8014e8c:	2b60      	cmp	r3, #96	; 0x60
 8014e8e:	d877      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e90:	2b50      	cmp	r3, #80	; 0x50
 8014e92:	d03c      	beq.n	8014f0e <HAL_TIM_ConfigClockSource+0x14a>
 8014e94:	2b50      	cmp	r3, #80	; 0x50
 8014e96:	d873      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014e98:	2b40      	cmp	r3, #64	; 0x40
 8014e9a:	d058      	beq.n	8014f4e <HAL_TIM_ConfigClockSource+0x18a>
 8014e9c:	2b40      	cmp	r3, #64	; 0x40
 8014e9e:	d86f      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014ea0:	2b30      	cmp	r3, #48	; 0x30
 8014ea2:	d064      	beq.n	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014ea4:	2b30      	cmp	r3, #48	; 0x30
 8014ea6:	d86b      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014ea8:	2b20      	cmp	r3, #32
 8014eaa:	d060      	beq.n	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014eac:	2b20      	cmp	r3, #32
 8014eae:	d867      	bhi.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d05c      	beq.n	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014eb4:	2b10      	cmp	r3, #16
 8014eb6:	d05a      	beq.n	8014f6e <HAL_TIM_ConfigClockSource+0x1aa>
 8014eb8:	e062      	b.n	8014f80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6818      	ldr	r0, [r3, #0]
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	6899      	ldr	r1, [r3, #8]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	f000 fc8b 	bl	80157e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	68ba      	ldr	r2, [r7, #8]
 8014ee4:	609a      	str	r2, [r3, #8]
      break;
 8014ee6:	e04f      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6818      	ldr	r0, [r3, #0]
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	6899      	ldr	r1, [r3, #8]
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	f000 fc74 	bl	80157e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	689a      	ldr	r2, [r3, #8]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014f0a:	609a      	str	r2, [r3, #8]
      break;
 8014f0c:	e03c      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6818      	ldr	r0, [r3, #0]
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	6859      	ldr	r1, [r3, #4]
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	f000 fbe4 	bl	80156e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2150      	movs	r1, #80	; 0x50
 8014f26:	4618      	mov	r0, r3
 8014f28:	f000 fc3e 	bl	80157a8 <TIM_ITRx_SetConfig>
      break;
 8014f2c:	e02c      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	6859      	ldr	r1, [r3, #4]
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	f000 fc03 	bl	8015746 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2160      	movs	r1, #96	; 0x60
 8014f46:	4618      	mov	r0, r3
 8014f48:	f000 fc2e 	bl	80157a8 <TIM_ITRx_SetConfig>
      break;
 8014f4c:	e01c      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6818      	ldr	r0, [r3, #0]
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	6859      	ldr	r1, [r3, #4]
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	f000 fbc4 	bl	80156e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2140      	movs	r1, #64	; 0x40
 8014f66:	4618      	mov	r0, r3
 8014f68:	f000 fc1e 	bl	80157a8 <TIM_ITRx_SetConfig>
      break;
 8014f6c:	e00c      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4619      	mov	r1, r3
 8014f78:	4610      	mov	r0, r2
 8014f7a:	f000 fc15 	bl	80157a8 <TIM_ITRx_SetConfig>
      break;
 8014f7e:	e003      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8014f80:	2301      	movs	r3, #1
 8014f82:	73fb      	strb	r3, [r7, #15]
      break;
 8014f84:	e000      	b.n	8014f88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8014f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2200      	movs	r2, #0
 8014f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3710      	adds	r7, #16
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	ffceff88 	.word	0xffceff88
 8014fa8:	00100040 	.word	0x00100040
 8014fac:	00100030 	.word	0x00100030
 8014fb0:	00100020 	.word	0x00100020

08014fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014fbc:	bf00      	nop
 8014fbe:	370c      	adds	r7, #12
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr

08014fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014fd0:	bf00      	nop
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b083      	sub	sp, #12
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014fe4:	bf00      	nop
 8014fe6:	370c      	adds	r7, #12
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b085      	sub	sp, #20
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	4a46      	ldr	r2, [pc, #280]	; (801511c <TIM_Base_SetConfig+0x12c>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d013      	beq.n	8015030 <TIM_Base_SetConfig+0x40>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801500e:	d00f      	beq.n	8015030 <TIM_Base_SetConfig+0x40>
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	4a43      	ldr	r2, [pc, #268]	; (8015120 <TIM_Base_SetConfig+0x130>)
 8015014:	4293      	cmp	r3, r2
 8015016:	d00b      	beq.n	8015030 <TIM_Base_SetConfig+0x40>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	4a42      	ldr	r2, [pc, #264]	; (8015124 <TIM_Base_SetConfig+0x134>)
 801501c:	4293      	cmp	r3, r2
 801501e:	d007      	beq.n	8015030 <TIM_Base_SetConfig+0x40>
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	4a41      	ldr	r2, [pc, #260]	; (8015128 <TIM_Base_SetConfig+0x138>)
 8015024:	4293      	cmp	r3, r2
 8015026:	d003      	beq.n	8015030 <TIM_Base_SetConfig+0x40>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	4a40      	ldr	r2, [pc, #256]	; (801512c <TIM_Base_SetConfig+0x13c>)
 801502c:	4293      	cmp	r3, r2
 801502e:	d108      	bne.n	8015042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	68fa      	ldr	r2, [r7, #12]
 801503e:	4313      	orrs	r3, r2
 8015040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4a35      	ldr	r2, [pc, #212]	; (801511c <TIM_Base_SetConfig+0x12c>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d01f      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015050:	d01b      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4a32      	ldr	r2, [pc, #200]	; (8015120 <TIM_Base_SetConfig+0x130>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d017      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4a31      	ldr	r2, [pc, #196]	; (8015124 <TIM_Base_SetConfig+0x134>)
 801505e:	4293      	cmp	r3, r2
 8015060:	d013      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	4a30      	ldr	r2, [pc, #192]	; (8015128 <TIM_Base_SetConfig+0x138>)
 8015066:	4293      	cmp	r3, r2
 8015068:	d00f      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4a2f      	ldr	r2, [pc, #188]	; (801512c <TIM_Base_SetConfig+0x13c>)
 801506e:	4293      	cmp	r3, r2
 8015070:	d00b      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	4a2e      	ldr	r2, [pc, #184]	; (8015130 <TIM_Base_SetConfig+0x140>)
 8015076:	4293      	cmp	r3, r2
 8015078:	d007      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	4a2d      	ldr	r2, [pc, #180]	; (8015134 <TIM_Base_SetConfig+0x144>)
 801507e:	4293      	cmp	r3, r2
 8015080:	d003      	beq.n	801508a <TIM_Base_SetConfig+0x9a>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4a2c      	ldr	r2, [pc, #176]	; (8015138 <TIM_Base_SetConfig+0x148>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d108      	bne.n	801509c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	4313      	orrs	r3, r2
 801509a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	4313      	orrs	r3, r2
 80150a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	689a      	ldr	r2, [r3, #8]
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4a16      	ldr	r2, [pc, #88]	; (801511c <TIM_Base_SetConfig+0x12c>)
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d00f      	beq.n	80150e8 <TIM_Base_SetConfig+0xf8>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	4a18      	ldr	r2, [pc, #96]	; (801512c <TIM_Base_SetConfig+0x13c>)
 80150cc:	4293      	cmp	r3, r2
 80150ce:	d00b      	beq.n	80150e8 <TIM_Base_SetConfig+0xf8>
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	4a17      	ldr	r2, [pc, #92]	; (8015130 <TIM_Base_SetConfig+0x140>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d007      	beq.n	80150e8 <TIM_Base_SetConfig+0xf8>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4a16      	ldr	r2, [pc, #88]	; (8015134 <TIM_Base_SetConfig+0x144>)
 80150dc:	4293      	cmp	r3, r2
 80150de:	d003      	beq.n	80150e8 <TIM_Base_SetConfig+0xf8>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4a15      	ldr	r2, [pc, #84]	; (8015138 <TIM_Base_SetConfig+0x148>)
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d103      	bne.n	80150f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	691a      	ldr	r2, [r3, #16]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2201      	movs	r2, #1
 80150f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	691b      	ldr	r3, [r3, #16]
 80150fa:	f003 0301 	and.w	r3, r3, #1
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d105      	bne.n	801510e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	691b      	ldr	r3, [r3, #16]
 8015106:	f023 0201 	bic.w	r2, r3, #1
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	611a      	str	r2, [r3, #16]
  }
}
 801510e:	bf00      	nop
 8015110:	3714      	adds	r7, #20
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
 801511a:	bf00      	nop
 801511c:	40010000 	.word	0x40010000
 8015120:	40000400 	.word	0x40000400
 8015124:	40000800 	.word	0x40000800
 8015128:	40000c00 	.word	0x40000c00
 801512c:	40010400 	.word	0x40010400
 8015130:	40014000 	.word	0x40014000
 8015134:	40014400 	.word	0x40014400
 8015138:	40014800 	.word	0x40014800

0801513c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801513c:	b480      	push	{r7}
 801513e:	b087      	sub	sp, #28
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6a1b      	ldr	r3, [r3, #32]
 801514a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	f023 0201 	bic.w	r2, r3, #1
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	699b      	ldr	r3, [r3, #24]
 8015162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015164:	68fa      	ldr	r2, [r7, #12]
 8015166:	4b37      	ldr	r3, [pc, #220]	; (8015244 <TIM_OC1_SetConfig+0x108>)
 8015168:	4013      	ands	r3, r2
 801516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f023 0303 	bic.w	r3, r3, #3
 8015172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	68fa      	ldr	r2, [r7, #12]
 801517a:	4313      	orrs	r3, r2
 801517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	f023 0302 	bic.w	r3, r3, #2
 8015184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	689b      	ldr	r3, [r3, #8]
 801518a:	697a      	ldr	r2, [r7, #20]
 801518c:	4313      	orrs	r3, r2
 801518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	4a2d      	ldr	r2, [pc, #180]	; (8015248 <TIM_OC1_SetConfig+0x10c>)
 8015194:	4293      	cmp	r3, r2
 8015196:	d00f      	beq.n	80151b8 <TIM_OC1_SetConfig+0x7c>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	4a2c      	ldr	r2, [pc, #176]	; (801524c <TIM_OC1_SetConfig+0x110>)
 801519c:	4293      	cmp	r3, r2
 801519e:	d00b      	beq.n	80151b8 <TIM_OC1_SetConfig+0x7c>
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	4a2b      	ldr	r2, [pc, #172]	; (8015250 <TIM_OC1_SetConfig+0x114>)
 80151a4:	4293      	cmp	r3, r2
 80151a6:	d007      	beq.n	80151b8 <TIM_OC1_SetConfig+0x7c>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	4a2a      	ldr	r2, [pc, #168]	; (8015254 <TIM_OC1_SetConfig+0x118>)
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d003      	beq.n	80151b8 <TIM_OC1_SetConfig+0x7c>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	4a29      	ldr	r2, [pc, #164]	; (8015258 <TIM_OC1_SetConfig+0x11c>)
 80151b4:	4293      	cmp	r3, r2
 80151b6:	d10c      	bne.n	80151d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	f023 0308 	bic.w	r3, r3, #8
 80151be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	697a      	ldr	r2, [r7, #20]
 80151c6:	4313      	orrs	r3, r2
 80151c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	f023 0304 	bic.w	r3, r3, #4
 80151d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4a1c      	ldr	r2, [pc, #112]	; (8015248 <TIM_OC1_SetConfig+0x10c>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d00f      	beq.n	80151fa <TIM_OC1_SetConfig+0xbe>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	4a1b      	ldr	r2, [pc, #108]	; (801524c <TIM_OC1_SetConfig+0x110>)
 80151de:	4293      	cmp	r3, r2
 80151e0:	d00b      	beq.n	80151fa <TIM_OC1_SetConfig+0xbe>
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	4a1a      	ldr	r2, [pc, #104]	; (8015250 <TIM_OC1_SetConfig+0x114>)
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d007      	beq.n	80151fa <TIM_OC1_SetConfig+0xbe>
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	4a19      	ldr	r2, [pc, #100]	; (8015254 <TIM_OC1_SetConfig+0x118>)
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d003      	beq.n	80151fa <TIM_OC1_SetConfig+0xbe>
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	4a18      	ldr	r2, [pc, #96]	; (8015258 <TIM_OC1_SetConfig+0x11c>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d111      	bne.n	801521e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	695b      	ldr	r3, [r3, #20]
 801520e:	693a      	ldr	r2, [r7, #16]
 8015210:	4313      	orrs	r3, r2
 8015212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	699b      	ldr	r3, [r3, #24]
 8015218:	693a      	ldr	r2, [r7, #16]
 801521a:	4313      	orrs	r3, r2
 801521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	693a      	ldr	r2, [r7, #16]
 8015222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	685a      	ldr	r2, [r3, #4]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	697a      	ldr	r2, [r7, #20]
 8015236:	621a      	str	r2, [r3, #32]
}
 8015238:	bf00      	nop
 801523a:	371c      	adds	r7, #28
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	fffeff8f 	.word	0xfffeff8f
 8015248:	40010000 	.word	0x40010000
 801524c:	40010400 	.word	0x40010400
 8015250:	40014000 	.word	0x40014000
 8015254:	40014400 	.word	0x40014400
 8015258:	40014800 	.word	0x40014800

0801525c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801525c:	b480      	push	{r7}
 801525e:	b087      	sub	sp, #28
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6a1b      	ldr	r3, [r3, #32]
 801526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a1b      	ldr	r3, [r3, #32]
 8015270:	f023 0210 	bic.w	r2, r3, #16
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	699b      	ldr	r3, [r3, #24]
 8015282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	4b34      	ldr	r3, [pc, #208]	; (8015358 <TIM_OC2_SetConfig+0xfc>)
 8015288:	4013      	ands	r3, r2
 801528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	021b      	lsls	r3, r3, #8
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	4313      	orrs	r3, r2
 801529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	f023 0320 	bic.w	r3, r3, #32
 80152a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	689b      	ldr	r3, [r3, #8]
 80152ac:	011b      	lsls	r3, r3, #4
 80152ae:	697a      	ldr	r2, [r7, #20]
 80152b0:	4313      	orrs	r3, r2
 80152b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	4a29      	ldr	r2, [pc, #164]	; (801535c <TIM_OC2_SetConfig+0x100>)
 80152b8:	4293      	cmp	r3, r2
 80152ba:	d003      	beq.n	80152c4 <TIM_OC2_SetConfig+0x68>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	4a28      	ldr	r2, [pc, #160]	; (8015360 <TIM_OC2_SetConfig+0x104>)
 80152c0:	4293      	cmp	r3, r2
 80152c2:	d10d      	bne.n	80152e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80152ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	011b      	lsls	r3, r3, #4
 80152d2:	697a      	ldr	r2, [r7, #20]
 80152d4:	4313      	orrs	r3, r2
 80152d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	4a1e      	ldr	r2, [pc, #120]	; (801535c <TIM_OC2_SetConfig+0x100>)
 80152e4:	4293      	cmp	r3, r2
 80152e6:	d00f      	beq.n	8015308 <TIM_OC2_SetConfig+0xac>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	4a1d      	ldr	r2, [pc, #116]	; (8015360 <TIM_OC2_SetConfig+0x104>)
 80152ec:	4293      	cmp	r3, r2
 80152ee:	d00b      	beq.n	8015308 <TIM_OC2_SetConfig+0xac>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	4a1c      	ldr	r2, [pc, #112]	; (8015364 <TIM_OC2_SetConfig+0x108>)
 80152f4:	4293      	cmp	r3, r2
 80152f6:	d007      	beq.n	8015308 <TIM_OC2_SetConfig+0xac>
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4a1b      	ldr	r2, [pc, #108]	; (8015368 <TIM_OC2_SetConfig+0x10c>)
 80152fc:	4293      	cmp	r3, r2
 80152fe:	d003      	beq.n	8015308 <TIM_OC2_SetConfig+0xac>
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4a1a      	ldr	r2, [pc, #104]	; (801536c <TIM_OC2_SetConfig+0x110>)
 8015304:	4293      	cmp	r3, r2
 8015306:	d113      	bne.n	8015330 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801530e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	695b      	ldr	r3, [r3, #20]
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	693a      	ldr	r2, [r7, #16]
 8015320:	4313      	orrs	r3, r2
 8015322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	699b      	ldr	r3, [r3, #24]
 8015328:	009b      	lsls	r3, r3, #2
 801532a:	693a      	ldr	r2, [r7, #16]
 801532c:	4313      	orrs	r3, r2
 801532e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	693a      	ldr	r2, [r7, #16]
 8015334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	685a      	ldr	r2, [r3, #4]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	697a      	ldr	r2, [r7, #20]
 8015348:	621a      	str	r2, [r3, #32]
}
 801534a:	bf00      	nop
 801534c:	371c      	adds	r7, #28
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr
 8015356:	bf00      	nop
 8015358:	feff8fff 	.word	0xfeff8fff
 801535c:	40010000 	.word	0x40010000
 8015360:	40010400 	.word	0x40010400
 8015364:	40014000 	.word	0x40014000
 8015368:	40014400 	.word	0x40014400
 801536c:	40014800 	.word	0x40014800

08015370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015370:	b480      	push	{r7}
 8015372:	b087      	sub	sp, #28
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6a1b      	ldr	r3, [r3, #32]
 801537e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6a1b      	ldr	r3, [r3, #32]
 8015384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	69db      	ldr	r3, [r3, #28]
 8015396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	4b33      	ldr	r3, [pc, #204]	; (8015468 <TIM_OC3_SetConfig+0xf8>)
 801539c:	4013      	ands	r3, r2
 801539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	f023 0303 	bic.w	r3, r3, #3
 80153a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	4313      	orrs	r3, r2
 80153b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80153b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	689b      	ldr	r3, [r3, #8]
 80153be:	021b      	lsls	r3, r3, #8
 80153c0:	697a      	ldr	r2, [r7, #20]
 80153c2:	4313      	orrs	r3, r2
 80153c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	4a28      	ldr	r2, [pc, #160]	; (801546c <TIM_OC3_SetConfig+0xfc>)
 80153ca:	4293      	cmp	r3, r2
 80153cc:	d003      	beq.n	80153d6 <TIM_OC3_SetConfig+0x66>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4a27      	ldr	r2, [pc, #156]	; (8015470 <TIM_OC3_SetConfig+0x100>)
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d10d      	bne.n	80153f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80153dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	021b      	lsls	r3, r3, #8
 80153e4:	697a      	ldr	r2, [r7, #20]
 80153e6:	4313      	orrs	r3, r2
 80153e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80153f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4a1d      	ldr	r2, [pc, #116]	; (801546c <TIM_OC3_SetConfig+0xfc>)
 80153f6:	4293      	cmp	r3, r2
 80153f8:	d00f      	beq.n	801541a <TIM_OC3_SetConfig+0xaa>
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	4a1c      	ldr	r2, [pc, #112]	; (8015470 <TIM_OC3_SetConfig+0x100>)
 80153fe:	4293      	cmp	r3, r2
 8015400:	d00b      	beq.n	801541a <TIM_OC3_SetConfig+0xaa>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4a1b      	ldr	r2, [pc, #108]	; (8015474 <TIM_OC3_SetConfig+0x104>)
 8015406:	4293      	cmp	r3, r2
 8015408:	d007      	beq.n	801541a <TIM_OC3_SetConfig+0xaa>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4a1a      	ldr	r2, [pc, #104]	; (8015478 <TIM_OC3_SetConfig+0x108>)
 801540e:	4293      	cmp	r3, r2
 8015410:	d003      	beq.n	801541a <TIM_OC3_SetConfig+0xaa>
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4a19      	ldr	r2, [pc, #100]	; (801547c <TIM_OC3_SetConfig+0x10c>)
 8015416:	4293      	cmp	r3, r2
 8015418:	d113      	bne.n	8015442 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	695b      	ldr	r3, [r3, #20]
 801542e:	011b      	lsls	r3, r3, #4
 8015430:	693a      	ldr	r2, [r7, #16]
 8015432:	4313      	orrs	r3, r2
 8015434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	699b      	ldr	r3, [r3, #24]
 801543a:	011b      	lsls	r3, r3, #4
 801543c:	693a      	ldr	r2, [r7, #16]
 801543e:	4313      	orrs	r3, r2
 8015440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	693a      	ldr	r2, [r7, #16]
 8015446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	68fa      	ldr	r2, [r7, #12]
 801544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	685a      	ldr	r2, [r3, #4]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	697a      	ldr	r2, [r7, #20]
 801545a:	621a      	str	r2, [r3, #32]
}
 801545c:	bf00      	nop
 801545e:	371c      	adds	r7, #28
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr
 8015468:	fffeff8f 	.word	0xfffeff8f
 801546c:	40010000 	.word	0x40010000
 8015470:	40010400 	.word	0x40010400
 8015474:	40014000 	.word	0x40014000
 8015478:	40014400 	.word	0x40014400
 801547c:	40014800 	.word	0x40014800

08015480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015480:	b480      	push	{r7}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6a1b      	ldr	r3, [r3, #32]
 801548e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6a1b      	ldr	r3, [r3, #32]
 8015494:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	69db      	ldr	r3, [r3, #28]
 80154a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80154a8:	68fa      	ldr	r2, [r7, #12]
 80154aa:	4b24      	ldr	r3, [pc, #144]	; (801553c <TIM_OC4_SetConfig+0xbc>)
 80154ac:	4013      	ands	r3, r2
 80154ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80154b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	021b      	lsls	r3, r3, #8
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	4313      	orrs	r3, r2
 80154c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80154ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	031b      	lsls	r3, r3, #12
 80154d2:	693a      	ldr	r2, [r7, #16]
 80154d4:	4313      	orrs	r3, r2
 80154d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4a19      	ldr	r2, [pc, #100]	; (8015540 <TIM_OC4_SetConfig+0xc0>)
 80154dc:	4293      	cmp	r3, r2
 80154de:	d00f      	beq.n	8015500 <TIM_OC4_SetConfig+0x80>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	4a18      	ldr	r2, [pc, #96]	; (8015544 <TIM_OC4_SetConfig+0xc4>)
 80154e4:	4293      	cmp	r3, r2
 80154e6:	d00b      	beq.n	8015500 <TIM_OC4_SetConfig+0x80>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	4a17      	ldr	r2, [pc, #92]	; (8015548 <TIM_OC4_SetConfig+0xc8>)
 80154ec:	4293      	cmp	r3, r2
 80154ee:	d007      	beq.n	8015500 <TIM_OC4_SetConfig+0x80>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	4a16      	ldr	r2, [pc, #88]	; (801554c <TIM_OC4_SetConfig+0xcc>)
 80154f4:	4293      	cmp	r3, r2
 80154f6:	d003      	beq.n	8015500 <TIM_OC4_SetConfig+0x80>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	4a15      	ldr	r2, [pc, #84]	; (8015550 <TIM_OC4_SetConfig+0xd0>)
 80154fc:	4293      	cmp	r3, r2
 80154fe:	d109      	bne.n	8015514 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	695b      	ldr	r3, [r3, #20]
 801550c:	019b      	lsls	r3, r3, #6
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	4313      	orrs	r3, r2
 8015512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	697a      	ldr	r2, [r7, #20]
 8015518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	68fa      	ldr	r2, [r7, #12]
 801551e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	685a      	ldr	r2, [r3, #4]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	621a      	str	r2, [r3, #32]
}
 801552e:	bf00      	nop
 8015530:	371c      	adds	r7, #28
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	feff8fff 	.word	0xfeff8fff
 8015540:	40010000 	.word	0x40010000
 8015544:	40010400 	.word	0x40010400
 8015548:	40014000 	.word	0x40014000
 801554c:	40014400 	.word	0x40014400
 8015550:	40014800 	.word	0x40014800

08015554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015554:	b480      	push	{r7}
 8015556:	b087      	sub	sp, #28
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6a1b      	ldr	r3, [r3, #32]
 8015562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6a1b      	ldr	r3, [r3, #32]
 8015568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	4b21      	ldr	r3, [pc, #132]	; (8015604 <TIM_OC5_SetConfig+0xb0>)
 8015580:	4013      	ands	r3, r2
 8015582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	68fa      	ldr	r2, [r7, #12]
 801558a:	4313      	orrs	r3, r2
 801558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8015594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	689b      	ldr	r3, [r3, #8]
 801559a:	041b      	lsls	r3, r3, #16
 801559c:	693a      	ldr	r2, [r7, #16]
 801559e:	4313      	orrs	r3, r2
 80155a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	4a18      	ldr	r2, [pc, #96]	; (8015608 <TIM_OC5_SetConfig+0xb4>)
 80155a6:	4293      	cmp	r3, r2
 80155a8:	d00f      	beq.n	80155ca <TIM_OC5_SetConfig+0x76>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	4a17      	ldr	r2, [pc, #92]	; (801560c <TIM_OC5_SetConfig+0xb8>)
 80155ae:	4293      	cmp	r3, r2
 80155b0:	d00b      	beq.n	80155ca <TIM_OC5_SetConfig+0x76>
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	4a16      	ldr	r2, [pc, #88]	; (8015610 <TIM_OC5_SetConfig+0xbc>)
 80155b6:	4293      	cmp	r3, r2
 80155b8:	d007      	beq.n	80155ca <TIM_OC5_SetConfig+0x76>
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	4a15      	ldr	r2, [pc, #84]	; (8015614 <TIM_OC5_SetConfig+0xc0>)
 80155be:	4293      	cmp	r3, r2
 80155c0:	d003      	beq.n	80155ca <TIM_OC5_SetConfig+0x76>
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	4a14      	ldr	r2, [pc, #80]	; (8015618 <TIM_OC5_SetConfig+0xc4>)
 80155c6:	4293      	cmp	r3, r2
 80155c8:	d109      	bne.n	80155de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80155d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	021b      	lsls	r3, r3, #8
 80155d8:	697a      	ldr	r2, [r7, #20]
 80155da:	4313      	orrs	r3, r2
 80155dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	697a      	ldr	r2, [r7, #20]
 80155e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	685a      	ldr	r2, [r3, #4]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	693a      	ldr	r2, [r7, #16]
 80155f6:	621a      	str	r2, [r3, #32]
}
 80155f8:	bf00      	nop
 80155fa:	371c      	adds	r7, #28
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr
 8015604:	fffeff8f 	.word	0xfffeff8f
 8015608:	40010000 	.word	0x40010000
 801560c:	40010400 	.word	0x40010400
 8015610:	40014000 	.word	0x40014000
 8015614:	40014400 	.word	0x40014400
 8015618:	40014800 	.word	0x40014800

0801561c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801561c:	b480      	push	{r7}
 801561e:	b087      	sub	sp, #28
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6a1b      	ldr	r3, [r3, #32]
 801562a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6a1b      	ldr	r3, [r3, #32]
 8015630:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8015644:	68fa      	ldr	r2, [r7, #12]
 8015646:	4b22      	ldr	r3, [pc, #136]	; (80156d0 <TIM_OC6_SetConfig+0xb4>)
 8015648:	4013      	ands	r3, r2
 801564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	021b      	lsls	r3, r3, #8
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	4313      	orrs	r3, r2
 8015656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8015658:	693b      	ldr	r3, [r7, #16]
 801565a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801565e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	689b      	ldr	r3, [r3, #8]
 8015664:	051b      	lsls	r3, r3, #20
 8015666:	693a      	ldr	r2, [r7, #16]
 8015668:	4313      	orrs	r3, r2
 801566a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	4a19      	ldr	r2, [pc, #100]	; (80156d4 <TIM_OC6_SetConfig+0xb8>)
 8015670:	4293      	cmp	r3, r2
 8015672:	d00f      	beq.n	8015694 <TIM_OC6_SetConfig+0x78>
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	4a18      	ldr	r2, [pc, #96]	; (80156d8 <TIM_OC6_SetConfig+0xbc>)
 8015678:	4293      	cmp	r3, r2
 801567a:	d00b      	beq.n	8015694 <TIM_OC6_SetConfig+0x78>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	4a17      	ldr	r2, [pc, #92]	; (80156dc <TIM_OC6_SetConfig+0xc0>)
 8015680:	4293      	cmp	r3, r2
 8015682:	d007      	beq.n	8015694 <TIM_OC6_SetConfig+0x78>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	4a16      	ldr	r2, [pc, #88]	; (80156e0 <TIM_OC6_SetConfig+0xc4>)
 8015688:	4293      	cmp	r3, r2
 801568a:	d003      	beq.n	8015694 <TIM_OC6_SetConfig+0x78>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	4a15      	ldr	r2, [pc, #84]	; (80156e4 <TIM_OC6_SetConfig+0xc8>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d109      	bne.n	80156a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801569a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	695b      	ldr	r3, [r3, #20]
 80156a0:	029b      	lsls	r3, r3, #10
 80156a2:	697a      	ldr	r2, [r7, #20]
 80156a4:	4313      	orrs	r3, r2
 80156a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	697a      	ldr	r2, [r7, #20]
 80156ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	68fa      	ldr	r2, [r7, #12]
 80156b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	685a      	ldr	r2, [r3, #4]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	693a      	ldr	r2, [r7, #16]
 80156c0:	621a      	str	r2, [r3, #32]
}
 80156c2:	bf00      	nop
 80156c4:	371c      	adds	r7, #28
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	feff8fff 	.word	0xfeff8fff
 80156d4:	40010000 	.word	0x40010000
 80156d8:	40010400 	.word	0x40010400
 80156dc:	40014000 	.word	0x40014000
 80156e0:	40014400 	.word	0x40014400
 80156e4:	40014800 	.word	0x40014800

080156e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80156e8:	b480      	push	{r7}
 80156ea:	b087      	sub	sp, #28
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	60f8      	str	r0, [r7, #12]
 80156f0:	60b9      	str	r1, [r7, #8]
 80156f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	6a1b      	ldr	r3, [r3, #32]
 80156f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6a1b      	ldr	r3, [r3, #32]
 80156fe:	f023 0201 	bic.w	r2, r3, #1
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	699b      	ldr	r3, [r3, #24]
 801570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	011b      	lsls	r3, r3, #4
 8015718:	693a      	ldr	r2, [r7, #16]
 801571a:	4313      	orrs	r3, r2
 801571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f023 030a 	bic.w	r3, r3, #10
 8015724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015726:	697a      	ldr	r2, [r7, #20]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	4313      	orrs	r3, r2
 801572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	693a      	ldr	r2, [r7, #16]
 8015732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	697a      	ldr	r2, [r7, #20]
 8015738:	621a      	str	r2, [r3, #32]
}
 801573a:	bf00      	nop
 801573c:	371c      	adds	r7, #28
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr

08015746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015746:	b480      	push	{r7}
 8015748:	b087      	sub	sp, #28
 801574a:	af00      	add	r7, sp, #0
 801574c:	60f8      	str	r0, [r7, #12]
 801574e:	60b9      	str	r1, [r7, #8]
 8015750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6a1b      	ldr	r3, [r3, #32]
 8015756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6a1b      	ldr	r3, [r3, #32]
 801575c:	f023 0210 	bic.w	r2, r3, #16
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	031b      	lsls	r3, r3, #12
 8015776:	693a      	ldr	r2, [r7, #16]
 8015778:	4313      	orrs	r3, r2
 801577a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	011b      	lsls	r3, r3, #4
 8015788:	697a      	ldr	r2, [r7, #20]
 801578a:	4313      	orrs	r3, r2
 801578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	693a      	ldr	r2, [r7, #16]
 8015792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	697a      	ldr	r2, [r7, #20]
 8015798:	621a      	str	r2, [r3, #32]
}
 801579a:	bf00      	nop
 801579c:	371c      	adds	r7, #28
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr
	...

080157a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80157a8:	b480      	push	{r7}
 80157aa:	b085      	sub	sp, #20
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80157b8:	68fa      	ldr	r2, [r7, #12]
 80157ba:	4b09      	ldr	r3, [pc, #36]	; (80157e0 <TIM_ITRx_SetConfig+0x38>)
 80157bc:	4013      	ands	r3, r2
 80157be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	4313      	orrs	r3, r2
 80157c6:	f043 0307 	orr.w	r3, r3, #7
 80157ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	68fa      	ldr	r2, [r7, #12]
 80157d0:	609a      	str	r2, [r3, #8]
}
 80157d2:	bf00      	nop
 80157d4:	3714      	adds	r7, #20
 80157d6:	46bd      	mov	sp, r7
 80157d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	ffcfff8f 	.word	0xffcfff8f

080157e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b087      	sub	sp, #28
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	689b      	ldr	r3, [r3, #8]
 80157f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80157fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	021a      	lsls	r2, r3, #8
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	431a      	orrs	r2, r3
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	4313      	orrs	r3, r2
 801580c:	697a      	ldr	r2, [r7, #20]
 801580e:	4313      	orrs	r3, r2
 8015810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	697a      	ldr	r2, [r7, #20]
 8015816:	609a      	str	r2, [r3, #8]
}
 8015818:	bf00      	nop
 801581a:	371c      	adds	r7, #28
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015824:	b480      	push	{r7}
 8015826:	b087      	sub	sp, #28
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	f003 031f 	and.w	r3, r3, #31
 8015836:	2201      	movs	r2, #1
 8015838:	fa02 f303 	lsl.w	r3, r2, r3
 801583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	6a1a      	ldr	r2, [r3, #32]
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	43db      	mvns	r3, r3
 8015846:	401a      	ands	r2, r3
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	6a1a      	ldr	r2, [r3, #32]
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	f003 031f 	and.w	r3, r3, #31
 8015856:	6879      	ldr	r1, [r7, #4]
 8015858:	fa01 f303 	lsl.w	r3, r1, r3
 801585c:	431a      	orrs	r2, r3
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	621a      	str	r2, [r3, #32]
}
 8015862:	bf00      	nop
 8015864:	371c      	adds	r7, #28
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr
	...

08015870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015880:	2b01      	cmp	r3, #1
 8015882:	d101      	bne.n	8015888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015884:	2302      	movs	r3, #2
 8015886:	e06d      	b.n	8015964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2201      	movs	r2, #1
 801588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2202      	movs	r2, #2
 8015894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	4a30      	ldr	r2, [pc, #192]	; (8015970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80158ae:	4293      	cmp	r3, r2
 80158b0:	d004      	beq.n	80158bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	4a2f      	ldr	r2, [pc, #188]	; (8015974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80158b8:	4293      	cmp	r3, r2
 80158ba:	d108      	bne.n	80158ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80158c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	68fa      	ldr	r2, [r7, #12]
 80158ca:	4313      	orrs	r3, r2
 80158cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	68fa      	ldr	r2, [r7, #12]
 80158dc:	4313      	orrs	r3, r2
 80158de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	68fa      	ldr	r2, [r7, #12]
 80158e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	4a20      	ldr	r2, [pc, #128]	; (8015970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80158ee:	4293      	cmp	r3, r2
 80158f0:	d022      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158fa:	d01d      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	4a1d      	ldr	r2, [pc, #116]	; (8015978 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d018      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	4a1c      	ldr	r2, [pc, #112]	; (801597c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801590c:	4293      	cmp	r3, r2
 801590e:	d013      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	4a1a      	ldr	r2, [pc, #104]	; (8015980 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8015916:	4293      	cmp	r3, r2
 8015918:	d00e      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	4a15      	ldr	r2, [pc, #84]	; (8015974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015920:	4293      	cmp	r3, r2
 8015922:	d009      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	4a16      	ldr	r2, [pc, #88]	; (8015984 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801592a:	4293      	cmp	r3, r2
 801592c:	d004      	beq.n	8015938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	4a15      	ldr	r2, [pc, #84]	; (8015988 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8015934:	4293      	cmp	r3, r2
 8015936:	d10c      	bne.n	8015952 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801593e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	689b      	ldr	r3, [r3, #8]
 8015944:	68ba      	ldr	r2, [r7, #8]
 8015946:	4313      	orrs	r3, r2
 8015948:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2201      	movs	r2, #1
 8015956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2200      	movs	r2, #0
 801595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015962:	2300      	movs	r3, #0
}
 8015964:	4618      	mov	r0, r3
 8015966:	3714      	adds	r7, #20
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr
 8015970:	40010000 	.word	0x40010000
 8015974:	40010400 	.word	0x40010400
 8015978:	40000400 	.word	0x40000400
 801597c:	40000800 	.word	0x40000800
 8015980:	40000c00 	.word	0x40000c00
 8015984:	40001800 	.word	0x40001800
 8015988:	40014000 	.word	0x40014000

0801598c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801598c:	b480      	push	{r7}
 801598e:	b085      	sub	sp, #20
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015996:	2300      	movs	r3, #0
 8015998:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	d101      	bne.n	80159a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80159a4:	2302      	movs	r3, #2
 80159a6:	e065      	b.n	8015a74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2201      	movs	r2, #1
 80159ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	68db      	ldr	r3, [r3, #12]
 80159ba:	4313      	orrs	r3, r2
 80159bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	689b      	ldr	r3, [r3, #8]
 80159c8:	4313      	orrs	r3, r2
 80159ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	4313      	orrs	r3, r2
 80159d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	4313      	orrs	r3, r2
 80159e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	691b      	ldr	r3, [r3, #16]
 80159f2:	4313      	orrs	r3, r2
 80159f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	695b      	ldr	r3, [r3, #20]
 8015a00:	4313      	orrs	r3, r2
 8015a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	041b      	lsls	r3, r3, #16
 8015a1e:	4313      	orrs	r3, r2
 8015a20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	4a16      	ldr	r2, [pc, #88]	; (8015a80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d004      	beq.n	8015a36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	4a14      	ldr	r2, [pc, #80]	; (8015a84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8015a32:	4293      	cmp	r3, r2
 8015a34:	d115      	bne.n	8015a62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a40:	051b      	lsls	r3, r3, #20
 8015a42:	4313      	orrs	r3, r2
 8015a44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	69db      	ldr	r3, [r3, #28]
 8015a50:	4313      	orrs	r3, r2
 8015a52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	6a1b      	ldr	r3, [r3, #32]
 8015a5e:	4313      	orrs	r3, r2
 8015a60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	68fa      	ldr	r2, [r7, #12]
 8015a68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015a72:	2300      	movs	r3, #0
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3714      	adds	r7, #20
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr
 8015a80:	40010000 	.word	0x40010000
 8015a84:	40010400 	.word	0x40010400

08015a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b083      	sub	sp, #12
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015a90:	bf00      	nop
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015aa4:	bf00      	nop
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015ab8:	bf00      	nop
 8015aba:	370c      	adds	r7, #12
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr

08015ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d101      	bne.n	8015ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	e042      	b.n	8015b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d106      	bne.n	8015aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f7f0 f96f 	bl	8005dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2224      	movs	r2, #36	; 0x24
 8015af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681a      	ldr	r2, [r3, #0]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	f022 0201 	bic.w	r2, r2, #1
 8015b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d002      	beq.n	8015b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f001 fc02 	bl	8017318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f000 fe97 	bl	8016848 <UART_SetConfig>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d101      	bne.n	8015b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015b20:	2301      	movs	r3, #1
 8015b22:	e01b      	b.n	8015b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	685a      	ldr	r2, [r3, #4]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	689a      	ldr	r2, [r3, #8]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f042 0201 	orr.w	r2, r2, #1
 8015b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f001 fc81 	bl	801745c <UART_CheckIdleState>
 8015b5a:	4603      	mov	r3, r0
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3708      	adds	r7, #8
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d101      	bne.n	8015b76 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015b72:	2301      	movs	r3, #1
 8015b74:	e031      	b.n	8015bda <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2224      	movs	r2, #36	; 0x24
 8015b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	681a      	ldr	r2, [r3, #0]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f022 0201 	bic.w	r2, r2, #1
 8015b8c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2200      	movs	r2, #0
 8015b94:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7f0 f9b2 	bl	8005f10 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015bd8:	2300      	movs	r3, #0
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3708      	adds	r7, #8
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b08a      	sub	sp, #40	; 0x28
 8015be6:	af02      	add	r7, sp, #8
 8015be8:	60f8      	str	r0, [r7, #12]
 8015bea:	60b9      	str	r1, [r7, #8]
 8015bec:	603b      	str	r3, [r7, #0]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bf8:	2b20      	cmp	r3, #32
 8015bfa:	d17b      	bne.n	8015cf4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <HAL_UART_Transmit+0x26>
 8015c02:	88fb      	ldrh	r3, [r7, #6]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d101      	bne.n	8015c0c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	e074      	b.n	8015cf6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2221      	movs	r2, #33	; 0x21
 8015c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015c1c:	f7f0 fee0 	bl	80069e0 <HAL_GetTick>
 8015c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	88fa      	ldrh	r2, [r7, #6]
 8015c26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	88fa      	ldrh	r2, [r7, #6]
 8015c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	689b      	ldr	r3, [r3, #8]
 8015c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c3a:	d108      	bne.n	8015c4e <HAL_UART_Transmit+0x6c>
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	691b      	ldr	r3, [r3, #16]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d104      	bne.n	8015c4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8015c44:	2300      	movs	r3, #0
 8015c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	61bb      	str	r3, [r7, #24]
 8015c4c:	e003      	b.n	8015c56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015c52:	2300      	movs	r3, #0
 8015c54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015c56:	e030      	b.n	8015cba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	2180      	movs	r1, #128	; 0x80
 8015c62:	68f8      	ldr	r0, [r7, #12]
 8015c64:	f001 fca4 	bl	80175b0 <UART_WaitOnFlagUntilTimeout>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d005      	beq.n	8015c7a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2220      	movs	r2, #32
 8015c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8015c76:	2303      	movs	r3, #3
 8015c78:	e03d      	b.n	8015cf6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d10b      	bne.n	8015c98 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015c80:	69bb      	ldr	r3, [r7, #24]
 8015c82:	881b      	ldrh	r3, [r3, #0]
 8015c84:	461a      	mov	r2, r3
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	3302      	adds	r3, #2
 8015c94:	61bb      	str	r3, [r7, #24]
 8015c96:	e007      	b.n	8015ca8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	781a      	ldrb	r2, [r3, #0]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015ca2:	69fb      	ldr	r3, [r7, #28]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	3b01      	subs	r3, #1
 8015cb2:	b29a      	uxth	r2, r3
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d1c8      	bne.n	8015c58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	2140      	movs	r1, #64	; 0x40
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f001 fc6d 	bl	80175b0 <UART_WaitOnFlagUntilTimeout>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d005      	beq.n	8015ce8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2220      	movs	r2, #32
 8015ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8015ce4:	2303      	movs	r3, #3
 8015ce6:	e006      	b.n	8015cf6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	2220      	movs	r2, #32
 8015cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	e000      	b.n	8015cf6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8015cf4:	2302      	movs	r3, #2
  }
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3720      	adds	r7, #32
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	b08a      	sub	sp, #40	; 0x28
 8015d02:	af02      	add	r7, sp, #8
 8015d04:	60f8      	str	r0, [r7, #12]
 8015d06:	60b9      	str	r1, [r7, #8]
 8015d08:	603b      	str	r3, [r7, #0]
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d14:	2b20      	cmp	r3, #32
 8015d16:	f040 80b5 	bne.w	8015e84 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d002      	beq.n	8015d26 <HAL_UART_Receive+0x28>
 8015d20:	88fb      	ldrh	r3, [r7, #6]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d101      	bne.n	8015d2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015d26:	2301      	movs	r3, #1
 8015d28:	e0ad      	b.n	8015e86 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	2222      	movs	r2, #34	; 0x22
 8015d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015d40:	f7f0 fe4e 	bl	80069e0 <HAL_GetTick>
 8015d44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	88fa      	ldrh	r2, [r7, #6]
 8015d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	88fa      	ldrh	r2, [r7, #6]
 8015d52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	689b      	ldr	r3, [r3, #8]
 8015d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015d5e:	d10e      	bne.n	8015d7e <HAL_UART_Receive+0x80>
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	691b      	ldr	r3, [r3, #16]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d105      	bne.n	8015d74 <HAL_UART_Receive+0x76>
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015d72:	e02d      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	22ff      	movs	r2, #255	; 0xff
 8015d78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015d7c:	e028      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	689b      	ldr	r3, [r3, #8]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d10d      	bne.n	8015da2 <HAL_UART_Receive+0xa4>
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	691b      	ldr	r3, [r3, #16]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d104      	bne.n	8015d98 <HAL_UART_Receive+0x9a>
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	22ff      	movs	r2, #255	; 0xff
 8015d92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015d96:	e01b      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	227f      	movs	r2, #127	; 0x7f
 8015d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015da0:	e016      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015daa:	d10d      	bne.n	8015dc8 <HAL_UART_Receive+0xca>
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	691b      	ldr	r3, [r3, #16]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d104      	bne.n	8015dbe <HAL_UART_Receive+0xc0>
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	227f      	movs	r2, #127	; 0x7f
 8015db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015dbc:	e008      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	223f      	movs	r2, #63	; 0x3f
 8015dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015dc6:	e003      	b.n	8015dd0 <HAL_UART_Receive+0xd2>
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015dd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015de0:	d108      	bne.n	8015df4 <HAL_UART_Receive+0xf6>
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	691b      	ldr	r3, [r3, #16]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d104      	bne.n	8015df4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8015dea:	2300      	movs	r3, #0
 8015dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	61bb      	str	r3, [r7, #24]
 8015df2:	e003      	b.n	8015dfc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015dfc:	e036      	b.n	8015e6c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	9300      	str	r3, [sp, #0]
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	2200      	movs	r2, #0
 8015e06:	2120      	movs	r1, #32
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f001 fbd1 	bl	80175b0 <UART_WaitOnFlagUntilTimeout>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d005      	beq.n	8015e20 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2220      	movs	r2, #32
 8015e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8015e1c:	2303      	movs	r3, #3
 8015e1e:	e032      	b.n	8015e86 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8015e20:	69fb      	ldr	r3, [r7, #28]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d10c      	bne.n	8015e40 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2c:	b29a      	uxth	r2, r3
 8015e2e:	8a7b      	ldrh	r3, [r7, #18]
 8015e30:	4013      	ands	r3, r2
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015e38:	69bb      	ldr	r3, [r7, #24]
 8015e3a:	3302      	adds	r3, #2
 8015e3c:	61bb      	str	r3, [r7, #24]
 8015e3e:	e00c      	b.n	8015e5a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	8a7b      	ldrh	r3, [r7, #18]
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	4013      	ands	r3, r2
 8015e4e:	b2da      	uxtb	r2, r3
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	3301      	adds	r3, #1
 8015e58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	3b01      	subs	r3, #1
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d1c2      	bne.n	8015dfe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	2220      	movs	r2, #32
 8015e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8015e80:	2300      	movs	r3, #0
 8015e82:	e000      	b.n	8015e86 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8015e84:	2302      	movs	r3, #2
  }
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3720      	adds	r7, #32
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
	...

08015e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b08a      	sub	sp, #40	; 0x28
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ea4:	2b20      	cmp	r3, #32
 8015ea6:	d137      	bne.n	8015f18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d002      	beq.n	8015eb4 <HAL_UART_Receive_IT+0x24>
 8015eae:	88fb      	ldrh	r3, [r7, #6]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d101      	bne.n	8015eb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e030      	b.n	8015f1a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4a18      	ldr	r2, [pc, #96]	; (8015f24 <HAL_UART_Receive_IT+0x94>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d01f      	beq.n	8015f08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d018      	beq.n	8015f08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	e853 3f00 	ldrex	r3, [r3]
 8015ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015eea:	627b      	str	r3, [r7, #36]	; 0x24
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	623b      	str	r3, [r7, #32]
 8015ef6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef8:	69f9      	ldr	r1, [r7, #28]
 8015efa:	6a3a      	ldr	r2, [r7, #32]
 8015efc:	e841 2300 	strex	r3, r2, [r1]
 8015f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8015f02:	69bb      	ldr	r3, [r7, #24]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1e6      	bne.n	8015ed6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015f08:	88fb      	ldrh	r3, [r7, #6]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	68b9      	ldr	r1, [r7, #8]
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	f001 fbbc 	bl	801768c <UART_Start_Receive_IT>
 8015f14:	4603      	mov	r3, r0
 8015f16:	e000      	b.n	8015f1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015f18:	2302      	movs	r3, #2
  }
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3728      	adds	r7, #40	; 0x28
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	58000c00 	.word	0x58000c00

08015f28 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b09a      	sub	sp, #104	; 0x68
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f38:	e853 3f00 	ldrex	r3, [r3]
 8015f3c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015f44:	667b      	str	r3, [r7, #100]	; 0x64
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8015f50:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f56:	e841 2300 	strex	r3, r2, [r1]
 8015f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1e6      	bne.n	8015f30 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	3308      	adds	r3, #8
 8015f68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f6c:	e853 3f00 	ldrex	r3, [r3]
 8015f70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f74:	4b46      	ldr	r3, [pc, #280]	; (8016090 <HAL_UART_AbortReceive+0x168>)
 8015f76:	4013      	ands	r3, r2
 8015f78:	663b      	str	r3, [r7, #96]	; 0x60
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	3308      	adds	r3, #8
 8015f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f82:	643a      	str	r2, [r7, #64]	; 0x40
 8015f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f8a:	e841 2300 	strex	r3, r2, [r1]
 8015f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d1e5      	bne.n	8015f62 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	d118      	bne.n	8015fd0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	e853 3f00 	ldrex	r3, [r3]
 8015faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fac:	69fb      	ldr	r3, [r7, #28]
 8015fae:	f023 0310 	bic.w	r3, r3, #16
 8015fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	461a      	mov	r2, r3
 8015fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fc4:	e841 2300 	strex	r3, r2, [r1]
 8015fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d1e6      	bne.n	8015f9e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	689b      	ldr	r3, [r3, #8]
 8015fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fda:	2b40      	cmp	r3, #64	; 0x40
 8015fdc:	d13b      	bne.n	8016056 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	3308      	adds	r3, #8
 8015fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	e853 3f00 	ldrex	r3, [r3]
 8015fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	3308      	adds	r3, #8
 8015ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015ffe:	61ba      	str	r2, [r7, #24]
 8016000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016002:	6979      	ldr	r1, [r7, #20]
 8016004:	69ba      	ldr	r2, [r7, #24]
 8016006:	e841 2300 	strex	r3, r2, [r1]
 801600a:	613b      	str	r3, [r7, #16]
   return(result);
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d1e5      	bne.n	8015fde <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016018:	2b00      	cmp	r3, #0
 801601a:	d01c      	beq.n	8016056 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016022:	2200      	movs	r2, #0
 8016024:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801602c:	4618      	mov	r0, r3
 801602e:	f7f3 fdc7 	bl	8009bc0 <HAL_DMA_Abort>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d00e      	beq.n	8016056 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801603e:	4618      	mov	r0, r3
 8016040:	f7f5 fa5a 	bl	800b4f8 <HAL_DMA_GetError>
 8016044:	4603      	mov	r3, r0
 8016046:	2b20      	cmp	r3, #32
 8016048:	d105      	bne.n	8016056 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2210      	movs	r2, #16
 801604e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8016052:	2303      	movs	r3, #3
 8016054:	e017      	b.n	8016086 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2200      	movs	r2, #0
 801605a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	220f      	movs	r2, #15
 8016064:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	699a      	ldr	r2, [r3, #24]
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	f042 0208 	orr.w	r2, r2, #8
 8016074:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2220      	movs	r2, #32
 801607a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2200      	movs	r2, #0
 8016082:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3768      	adds	r7, #104	; 0x68
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	effffffe 	.word	0xeffffffe

08016094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b0ba      	sub	sp, #232	; 0xe8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	69db      	ldr	r3, [r3, #28]
 80160a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	689b      	ldr	r3, [r3, #8]
 80160b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80160ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80160be:	f640 030f 	movw	r3, #2063	; 0x80f
 80160c2:	4013      	ands	r3, r2
 80160c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80160c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d11b      	bne.n	8016108 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80160d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160d4:	f003 0320 	and.w	r3, r3, #32
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d015      	beq.n	8016108 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80160dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80160e0:	f003 0320 	and.w	r3, r3, #32
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d105      	bne.n	80160f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80160e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80160ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d009      	beq.n	8016108 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	f000 8377 	beq.w	80167ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	4798      	blx	r3
      }
      return;
 8016106:	e371      	b.n	80167ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801610c:	2b00      	cmp	r3, #0
 801610e:	f000 8123 	beq.w	8016358 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016112:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016116:	4b8d      	ldr	r3, [pc, #564]	; (801634c <HAL_UART_IRQHandler+0x2b8>)
 8016118:	4013      	ands	r3, r2
 801611a:	2b00      	cmp	r3, #0
 801611c:	d106      	bne.n	801612c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801611e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016122:	4b8b      	ldr	r3, [pc, #556]	; (8016350 <HAL_UART_IRQHandler+0x2bc>)
 8016124:	4013      	ands	r3, r2
 8016126:	2b00      	cmp	r3, #0
 8016128:	f000 8116 	beq.w	8016358 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016130:	f003 0301 	and.w	r3, r3, #1
 8016134:	2b00      	cmp	r3, #0
 8016136:	d011      	beq.n	801615c <HAL_UART_IRQHandler+0xc8>
 8016138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016140:	2b00      	cmp	r3, #0
 8016142:	d00b      	beq.n	801615c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	2201      	movs	r2, #1
 801614a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016152:	f043 0201 	orr.w	r2, r3, #1
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016160:	f003 0302 	and.w	r3, r3, #2
 8016164:	2b00      	cmp	r3, #0
 8016166:	d011      	beq.n	801618c <HAL_UART_IRQHandler+0xf8>
 8016168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801616c:	f003 0301 	and.w	r3, r3, #1
 8016170:	2b00      	cmp	r3, #0
 8016172:	d00b      	beq.n	801618c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	2202      	movs	r2, #2
 801617a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016182:	f043 0204 	orr.w	r2, r3, #4
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801618c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016190:	f003 0304 	and.w	r3, r3, #4
 8016194:	2b00      	cmp	r3, #0
 8016196:	d011      	beq.n	80161bc <HAL_UART_IRQHandler+0x128>
 8016198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801619c:	f003 0301 	and.w	r3, r3, #1
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00b      	beq.n	80161bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2204      	movs	r2, #4
 80161aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161b2:	f043 0202 	orr.w	r2, r3, #2
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80161bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161c0:	f003 0308 	and.w	r3, r3, #8
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d017      	beq.n	80161f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80161c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161cc:	f003 0320 	and.w	r3, r3, #32
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d105      	bne.n	80161e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80161d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80161d8:	4b5c      	ldr	r3, [pc, #368]	; (801634c <HAL_UART_IRQHandler+0x2b8>)
 80161da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d00b      	beq.n	80161f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2208      	movs	r2, #8
 80161e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161ee:	f043 0208 	orr.w	r2, r3, #8
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80161f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016200:	2b00      	cmp	r3, #0
 8016202:	d012      	beq.n	801622a <HAL_UART_IRQHandler+0x196>
 8016204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00c      	beq.n	801622a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016220:	f043 0220 	orr.w	r2, r3, #32
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016230:	2b00      	cmp	r3, #0
 8016232:	f000 82dd 	beq.w	80167f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801623a:	f003 0320 	and.w	r3, r3, #32
 801623e:	2b00      	cmp	r3, #0
 8016240:	d013      	beq.n	801626a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016246:	f003 0320 	and.w	r3, r3, #32
 801624a:	2b00      	cmp	r3, #0
 801624c:	d105      	bne.n	801625a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801624e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016256:	2b00      	cmp	r3, #0
 8016258:	d007      	beq.n	801626a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801625e:	2b00      	cmp	r3, #0
 8016260:	d003      	beq.n	801626a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016270:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	689b      	ldr	r3, [r3, #8]
 801627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801627e:	2b40      	cmp	r3, #64	; 0x40
 8016280:	d005      	beq.n	801628e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016286:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801628a:	2b00      	cmp	r3, #0
 801628c:	d054      	beq.n	8016338 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f001 fb1e 	bl	80178d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	689b      	ldr	r3, [r3, #8]
 801629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801629e:	2b40      	cmp	r3, #64	; 0x40
 80162a0:	d146      	bne.n	8016330 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	3308      	adds	r3, #8
 80162a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162b0:	e853 3f00 	ldrex	r3, [r3]
 80162b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80162b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80162c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	3308      	adds	r3, #8
 80162ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80162ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80162d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80162da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80162de:	e841 2300 	strex	r3, r2, [r1]
 80162e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80162e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d1d9      	bne.n	80162a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d017      	beq.n	8016328 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162fe:	4a15      	ldr	r2, [pc, #84]	; (8016354 <HAL_UART_IRQHandler+0x2c0>)
 8016300:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016308:	4618      	mov	r0, r3
 801630a:	f7f3 ff77 	bl	800a1fc <HAL_DMA_Abort_IT>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d019      	beq.n	8016348 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8016322:	4610      	mov	r0, r2
 8016324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016326:	e00f      	b.n	8016348 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f000 fa77 	bl	801681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801632e:	e00b      	b.n	8016348 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 fa73 	bl	801681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016336:	e007      	b.n	8016348 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 fa6f 	bl	801681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2200      	movs	r2, #0
 8016342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8016346:	e253      	b.n	80167f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016348:	bf00      	nop
    return;
 801634a:	e251      	b.n	80167f0 <HAL_UART_IRQHandler+0x75c>
 801634c:	10000001 	.word	0x10000001
 8016350:	04000120 	.word	0x04000120
 8016354:	0801799d 	.word	0x0801799d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801635c:	2b01      	cmp	r3, #1
 801635e:	f040 81e7 	bne.w	8016730 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016366:	f003 0310 	and.w	r3, r3, #16
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 81e0 	beq.w	8016730 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016374:	f003 0310 	and.w	r3, r3, #16
 8016378:	2b00      	cmp	r3, #0
 801637a:	f000 81d9 	beq.w	8016730 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2210      	movs	r2, #16
 8016384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	689b      	ldr	r3, [r3, #8]
 801638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016390:	2b40      	cmp	r3, #64	; 0x40
 8016392:	f040 8151 	bne.w	8016638 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	4a96      	ldr	r2, [pc, #600]	; (80165f8 <HAL_UART_IRQHandler+0x564>)
 80163a0:	4293      	cmp	r3, r2
 80163a2:	d068      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	4a93      	ldr	r2, [pc, #588]	; (80165fc <HAL_UART_IRQHandler+0x568>)
 80163ae:	4293      	cmp	r3, r2
 80163b0:	d061      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	4a91      	ldr	r2, [pc, #580]	; (8016600 <HAL_UART_IRQHandler+0x56c>)
 80163bc:	4293      	cmp	r3, r2
 80163be:	d05a      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	4a8e      	ldr	r2, [pc, #568]	; (8016604 <HAL_UART_IRQHandler+0x570>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d053      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4a8c      	ldr	r2, [pc, #560]	; (8016608 <HAL_UART_IRQHandler+0x574>)
 80163d8:	4293      	cmp	r3, r2
 80163da:	d04c      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	4a89      	ldr	r2, [pc, #548]	; (801660c <HAL_UART_IRQHandler+0x578>)
 80163e6:	4293      	cmp	r3, r2
 80163e8:	d045      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	4a87      	ldr	r2, [pc, #540]	; (8016610 <HAL_UART_IRQHandler+0x57c>)
 80163f4:	4293      	cmp	r3, r2
 80163f6:	d03e      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	4a84      	ldr	r2, [pc, #528]	; (8016614 <HAL_UART_IRQHandler+0x580>)
 8016402:	4293      	cmp	r3, r2
 8016404:	d037      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4a82      	ldr	r2, [pc, #520]	; (8016618 <HAL_UART_IRQHandler+0x584>)
 8016410:	4293      	cmp	r3, r2
 8016412:	d030      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4a7f      	ldr	r2, [pc, #508]	; (801661c <HAL_UART_IRQHandler+0x588>)
 801641e:	4293      	cmp	r3, r2
 8016420:	d029      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a7d      	ldr	r2, [pc, #500]	; (8016620 <HAL_UART_IRQHandler+0x58c>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d022      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	4a7a      	ldr	r2, [pc, #488]	; (8016624 <HAL_UART_IRQHandler+0x590>)
 801643a:	4293      	cmp	r3, r2
 801643c:	d01b      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4a78      	ldr	r2, [pc, #480]	; (8016628 <HAL_UART_IRQHandler+0x594>)
 8016448:	4293      	cmp	r3, r2
 801644a:	d014      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4a75      	ldr	r2, [pc, #468]	; (801662c <HAL_UART_IRQHandler+0x598>)
 8016456:	4293      	cmp	r3, r2
 8016458:	d00d      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4a73      	ldr	r2, [pc, #460]	; (8016630 <HAL_UART_IRQHandler+0x59c>)
 8016464:	4293      	cmp	r3, r2
 8016466:	d006      	beq.n	8016476 <HAL_UART_IRQHandler+0x3e2>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	4a70      	ldr	r2, [pc, #448]	; (8016634 <HAL_UART_IRQHandler+0x5a0>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d106      	bne.n	8016484 <HAL_UART_IRQHandler+0x3f0>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	b29b      	uxth	r3, r3
 8016482:	e005      	b.n	8016490 <HAL_UART_IRQHandler+0x3fc>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	b29b      	uxth	r3, r3
 8016490:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016498:	2b00      	cmp	r3, #0
 801649a:	f000 81ab 	beq.w	80167f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80164a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80164a8:	429a      	cmp	r2, r3
 80164aa:	f080 81a3 	bcs.w	80167f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80164b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80164be:	69db      	ldr	r3, [r3, #28]
 80164c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164c4:	f000 8087 	beq.w	80165d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80164d4:	e853 3f00 	ldrex	r3, [r3]
 80164d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80164dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80164e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	461a      	mov	r2, r3
 80164ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80164f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80164f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80164fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016502:	e841 2300 	strex	r3, r2, [r1]
 8016506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801650a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801650e:	2b00      	cmp	r3, #0
 8016510:	d1da      	bne.n	80164c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	3308      	adds	r3, #8
 8016518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801651a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801651c:	e853 3f00 	ldrex	r3, [r3]
 8016520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016524:	f023 0301 	bic.w	r3, r3, #1
 8016528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	3308      	adds	r3, #8
 8016532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801653a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801653c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801653e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016542:	e841 2300 	strex	r3, r2, [r1]
 8016546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801654a:	2b00      	cmp	r3, #0
 801654c:	d1e1      	bne.n	8016512 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	3308      	adds	r3, #8
 8016554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016558:	e853 3f00 	ldrex	r3, [r3]
 801655c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801655e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	3308      	adds	r3, #8
 801656e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801657a:	e841 2300 	strex	r3, r2, [r1]
 801657e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016582:	2b00      	cmp	r3, #0
 8016584:	d1e3      	bne.n	801654e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2220      	movs	r2, #32
 801658a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2200      	movs	r2, #0
 8016592:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801659c:	e853 3f00 	ldrex	r3, [r3]
 80165a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80165a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165a4:	f023 0310 	bic.w	r3, r3, #16
 80165a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	461a      	mov	r2, r3
 80165b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80165b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80165bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80165be:	e841 2300 	strex	r3, r2, [r1]
 80165c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80165c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d1e4      	bne.n	8016594 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f3 faf5 	bl	8009bc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2202      	movs	r2, #2
 80165da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	1ad3      	subs	r3, r2, r3
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	4619      	mov	r1, r3
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f000 f91d 	bl	8016830 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80165f6:	e0fd      	b.n	80167f4 <HAL_UART_IRQHandler+0x760>
 80165f8:	40020010 	.word	0x40020010
 80165fc:	40020028 	.word	0x40020028
 8016600:	40020040 	.word	0x40020040
 8016604:	40020058 	.word	0x40020058
 8016608:	40020070 	.word	0x40020070
 801660c:	40020088 	.word	0x40020088
 8016610:	400200a0 	.word	0x400200a0
 8016614:	400200b8 	.word	0x400200b8
 8016618:	40020410 	.word	0x40020410
 801661c:	40020428 	.word	0x40020428
 8016620:	40020440 	.word	0x40020440
 8016624:	40020458 	.word	0x40020458
 8016628:	40020470 	.word	0x40020470
 801662c:	40020488 	.word	0x40020488
 8016630:	400204a0 	.word	0x400204a0
 8016634:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016644:	b29b      	uxth	r3, r3
 8016646:	1ad3      	subs	r3, r2, r3
 8016648:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016652:	b29b      	uxth	r3, r3
 8016654:	2b00      	cmp	r3, #0
 8016656:	f000 80cf 	beq.w	80167f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801665a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801665e:	2b00      	cmp	r3, #0
 8016660:	f000 80ca 	beq.w	80167f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801666c:	e853 3f00 	ldrex	r3, [r3]
 8016670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	461a      	mov	r2, r3
 8016682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016686:	647b      	str	r3, [r7, #68]	; 0x44
 8016688:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801668a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801668c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801668e:	e841 2300 	strex	r3, r2, [r1]
 8016692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016696:	2b00      	cmp	r3, #0
 8016698:	d1e4      	bne.n	8016664 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	3308      	adds	r3, #8
 80166a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a4:	e853 3f00 	ldrex	r3, [r3]
 80166a8:	623b      	str	r3, [r7, #32]
   return(result);
 80166aa:	6a3a      	ldr	r2, [r7, #32]
 80166ac:	4b55      	ldr	r3, [pc, #340]	; (8016804 <HAL_UART_IRQHandler+0x770>)
 80166ae:	4013      	ands	r3, r2
 80166b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	3308      	adds	r3, #8
 80166ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166be:	633a      	str	r2, [r7, #48]	; 0x30
 80166c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166c6:	e841 2300 	strex	r3, r2, [r1]
 80166ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80166cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1e3      	bne.n	801669a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2220      	movs	r2, #32
 80166d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2200      	movs	r2, #0
 80166de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2200      	movs	r2, #0
 80166e4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	e853 3f00 	ldrex	r3, [r3]
 80166f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	f023 0310 	bic.w	r3, r3, #16
 80166fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	461a      	mov	r2, r3
 8016704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016708:	61fb      	str	r3, [r7, #28]
 801670a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801670c:	69b9      	ldr	r1, [r7, #24]
 801670e:	69fa      	ldr	r2, [r7, #28]
 8016710:	e841 2300 	strex	r3, r2, [r1]
 8016714:	617b      	str	r3, [r7, #20]
   return(result);
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1e4      	bne.n	80166e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2202      	movs	r2, #2
 8016720:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016726:	4619      	mov	r1, r3
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	f000 f881 	bl	8016830 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801672e:	e063      	b.n	80167f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016738:	2b00      	cmp	r3, #0
 801673a:	d00e      	beq.n	801675a <HAL_UART_IRQHandler+0x6c6>
 801673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016744:	2b00      	cmp	r3, #0
 8016746:	d008      	beq.n	801675a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016750:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f001 fe80 	bl	8018458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016758:	e051      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016762:	2b00      	cmp	r3, #0
 8016764:	d014      	beq.n	8016790 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801676a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801676e:	2b00      	cmp	r3, #0
 8016770:	d105      	bne.n	801677e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801677a:	2b00      	cmp	r3, #0
 801677c:	d008      	beq.n	8016790 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016782:	2b00      	cmp	r3, #0
 8016784:	d03a      	beq.n	80167fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	4798      	blx	r3
    }
    return;
 801678e:	e035      	b.n	80167fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016798:	2b00      	cmp	r3, #0
 801679a:	d009      	beq.n	80167b0 <HAL_UART_IRQHandler+0x71c>
 801679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d003      	beq.n	80167b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f001 f90d 	bl	80179c8 <UART_EndTransmit_IT>
    return;
 80167ae:	e026      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80167b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d009      	beq.n	80167d0 <HAL_UART_IRQHandler+0x73c>
 80167bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d003      	beq.n	80167d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f001 fe59 	bl	8018480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80167ce:	e016      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80167d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d010      	beq.n	80167fe <HAL_UART_IRQHandler+0x76a>
 80167dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	da0c      	bge.n	80167fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f001 fe41 	bl	801846c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80167ea:	e008      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
      return;
 80167ec:	bf00      	nop
 80167ee:	e006      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
    return;
 80167f0:	bf00      	nop
 80167f2:	e004      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
      return;
 80167f4:	bf00      	nop
 80167f6:	e002      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
      return;
 80167f8:	bf00      	nop
 80167fa:	e000      	b.n	80167fe <HAL_UART_IRQHandler+0x76a>
    return;
 80167fc:	bf00      	nop
  }
}
 80167fe:	37e8      	adds	r7, #232	; 0xe8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}
 8016804:	effffffe 	.word	0xeffffffe

08016808 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016808:	b480      	push	{r7}
 801680a:	b083      	sub	sp, #12
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016810:	bf00      	nop
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016824:	bf00      	nop
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682e:	4770      	bx	lr

08016830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	460b      	mov	r3, r1
 801683a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801683c:	bf00      	nop
 801683e:	370c      	adds	r7, #12
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801684c:	b092      	sub	sp, #72	; 0x48
 801684e:	af00      	add	r7, sp, #0
 8016850:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016852:	2300      	movs	r3, #0
 8016854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	689a      	ldr	r2, [r3, #8]
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	691b      	ldr	r3, [r3, #16]
 8016860:	431a      	orrs	r2, r3
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	695b      	ldr	r3, [r3, #20]
 8016866:	431a      	orrs	r2, r3
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	69db      	ldr	r3, [r3, #28]
 801686c:	4313      	orrs	r3, r2
 801686e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	4bbe      	ldr	r3, [pc, #760]	; (8016b70 <UART_SetConfig+0x328>)
 8016878:	4013      	ands	r3, r2
 801687a:	697a      	ldr	r2, [r7, #20]
 801687c:	6812      	ldr	r2, [r2, #0]
 801687e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016880:	430b      	orrs	r3, r1
 8016882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	68da      	ldr	r2, [r3, #12]
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	430a      	orrs	r2, r1
 8016898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	699b      	ldr	r3, [r3, #24]
 801689e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4ab3      	ldr	r2, [pc, #716]	; (8016b74 <UART_SetConfig+0x32c>)
 80168a6:	4293      	cmp	r3, r2
 80168a8:	d004      	beq.n	80168b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	6a1b      	ldr	r3, [r3, #32]
 80168ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168b0:	4313      	orrs	r3, r2
 80168b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	689a      	ldr	r2, [r3, #8]
 80168ba:	4baf      	ldr	r3, [pc, #700]	; (8016b78 <UART_SetConfig+0x330>)
 80168bc:	4013      	ands	r3, r2
 80168be:	697a      	ldr	r2, [r7, #20]
 80168c0:	6812      	ldr	r2, [r2, #0]
 80168c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80168c4:	430b      	orrs	r3, r1
 80168c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ce:	f023 010f 	bic.w	r1, r3, #15
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80168d6:	697b      	ldr	r3, [r7, #20]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	430a      	orrs	r2, r1
 80168dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	4aa6      	ldr	r2, [pc, #664]	; (8016b7c <UART_SetConfig+0x334>)
 80168e4:	4293      	cmp	r3, r2
 80168e6:	d177      	bne.n	80169d8 <UART_SetConfig+0x190>
 80168e8:	4ba5      	ldr	r3, [pc, #660]	; (8016b80 <UART_SetConfig+0x338>)
 80168ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80168f0:	2b28      	cmp	r3, #40	; 0x28
 80168f2:	d86d      	bhi.n	80169d0 <UART_SetConfig+0x188>
 80168f4:	a201      	add	r2, pc, #4	; (adr r2, 80168fc <UART_SetConfig+0xb4>)
 80168f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168fa:	bf00      	nop
 80168fc:	080169a1 	.word	0x080169a1
 8016900:	080169d1 	.word	0x080169d1
 8016904:	080169d1 	.word	0x080169d1
 8016908:	080169d1 	.word	0x080169d1
 801690c:	080169d1 	.word	0x080169d1
 8016910:	080169d1 	.word	0x080169d1
 8016914:	080169d1 	.word	0x080169d1
 8016918:	080169d1 	.word	0x080169d1
 801691c:	080169a9 	.word	0x080169a9
 8016920:	080169d1 	.word	0x080169d1
 8016924:	080169d1 	.word	0x080169d1
 8016928:	080169d1 	.word	0x080169d1
 801692c:	080169d1 	.word	0x080169d1
 8016930:	080169d1 	.word	0x080169d1
 8016934:	080169d1 	.word	0x080169d1
 8016938:	080169d1 	.word	0x080169d1
 801693c:	080169b1 	.word	0x080169b1
 8016940:	080169d1 	.word	0x080169d1
 8016944:	080169d1 	.word	0x080169d1
 8016948:	080169d1 	.word	0x080169d1
 801694c:	080169d1 	.word	0x080169d1
 8016950:	080169d1 	.word	0x080169d1
 8016954:	080169d1 	.word	0x080169d1
 8016958:	080169d1 	.word	0x080169d1
 801695c:	080169b9 	.word	0x080169b9
 8016960:	080169d1 	.word	0x080169d1
 8016964:	080169d1 	.word	0x080169d1
 8016968:	080169d1 	.word	0x080169d1
 801696c:	080169d1 	.word	0x080169d1
 8016970:	080169d1 	.word	0x080169d1
 8016974:	080169d1 	.word	0x080169d1
 8016978:	080169d1 	.word	0x080169d1
 801697c:	080169c1 	.word	0x080169c1
 8016980:	080169d1 	.word	0x080169d1
 8016984:	080169d1 	.word	0x080169d1
 8016988:	080169d1 	.word	0x080169d1
 801698c:	080169d1 	.word	0x080169d1
 8016990:	080169d1 	.word	0x080169d1
 8016994:	080169d1 	.word	0x080169d1
 8016998:	080169d1 	.word	0x080169d1
 801699c:	080169c9 	.word	0x080169c9
 80169a0:	2301      	movs	r3, #1
 80169a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169a6:	e222      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169a8:	2304      	movs	r3, #4
 80169aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169ae:	e21e      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169b0:	2308      	movs	r3, #8
 80169b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169b6:	e21a      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169b8:	2310      	movs	r3, #16
 80169ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169be:	e216      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169c0:	2320      	movs	r3, #32
 80169c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169c6:	e212      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169c8:	2340      	movs	r3, #64	; 0x40
 80169ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169ce:	e20e      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169d0:	2380      	movs	r3, #128	; 0x80
 80169d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169d6:	e20a      	b.n	8016dee <UART_SetConfig+0x5a6>
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	4a69      	ldr	r2, [pc, #420]	; (8016b84 <UART_SetConfig+0x33c>)
 80169de:	4293      	cmp	r3, r2
 80169e0:	d130      	bne.n	8016a44 <UART_SetConfig+0x1fc>
 80169e2:	4b67      	ldr	r3, [pc, #412]	; (8016b80 <UART_SetConfig+0x338>)
 80169e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169e6:	f003 0307 	and.w	r3, r3, #7
 80169ea:	2b05      	cmp	r3, #5
 80169ec:	d826      	bhi.n	8016a3c <UART_SetConfig+0x1f4>
 80169ee:	a201      	add	r2, pc, #4	; (adr r2, 80169f4 <UART_SetConfig+0x1ac>)
 80169f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169f4:	08016a0d 	.word	0x08016a0d
 80169f8:	08016a15 	.word	0x08016a15
 80169fc:	08016a1d 	.word	0x08016a1d
 8016a00:	08016a25 	.word	0x08016a25
 8016a04:	08016a2d 	.word	0x08016a2d
 8016a08:	08016a35 	.word	0x08016a35
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a12:	e1ec      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a14:	2304      	movs	r3, #4
 8016a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a1a:	e1e8      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a1c:	2308      	movs	r3, #8
 8016a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a22:	e1e4      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a24:	2310      	movs	r3, #16
 8016a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a2a:	e1e0      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a2c:	2320      	movs	r3, #32
 8016a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a32:	e1dc      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a34:	2340      	movs	r3, #64	; 0x40
 8016a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a3a:	e1d8      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a3c:	2380      	movs	r3, #128	; 0x80
 8016a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a42:	e1d4      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4a4f      	ldr	r2, [pc, #316]	; (8016b88 <UART_SetConfig+0x340>)
 8016a4a:	4293      	cmp	r3, r2
 8016a4c:	d130      	bne.n	8016ab0 <UART_SetConfig+0x268>
 8016a4e:	4b4c      	ldr	r3, [pc, #304]	; (8016b80 <UART_SetConfig+0x338>)
 8016a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a52:	f003 0307 	and.w	r3, r3, #7
 8016a56:	2b05      	cmp	r3, #5
 8016a58:	d826      	bhi.n	8016aa8 <UART_SetConfig+0x260>
 8016a5a:	a201      	add	r2, pc, #4	; (adr r2, 8016a60 <UART_SetConfig+0x218>)
 8016a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a60:	08016a79 	.word	0x08016a79
 8016a64:	08016a81 	.word	0x08016a81
 8016a68:	08016a89 	.word	0x08016a89
 8016a6c:	08016a91 	.word	0x08016a91
 8016a70:	08016a99 	.word	0x08016a99
 8016a74:	08016aa1 	.word	0x08016aa1
 8016a78:	2300      	movs	r3, #0
 8016a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a7e:	e1b6      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a80:	2304      	movs	r3, #4
 8016a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a86:	e1b2      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a88:	2308      	movs	r3, #8
 8016a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a8e:	e1ae      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a90:	2310      	movs	r3, #16
 8016a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a96:	e1aa      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016a98:	2320      	movs	r3, #32
 8016a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a9e:	e1a6      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016aa0:	2340      	movs	r3, #64	; 0x40
 8016aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016aa6:	e1a2      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016aa8:	2380      	movs	r3, #128	; 0x80
 8016aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016aae:	e19e      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4a35      	ldr	r2, [pc, #212]	; (8016b8c <UART_SetConfig+0x344>)
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	d130      	bne.n	8016b1c <UART_SetConfig+0x2d4>
 8016aba:	4b31      	ldr	r3, [pc, #196]	; (8016b80 <UART_SetConfig+0x338>)
 8016abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016abe:	f003 0307 	and.w	r3, r3, #7
 8016ac2:	2b05      	cmp	r3, #5
 8016ac4:	d826      	bhi.n	8016b14 <UART_SetConfig+0x2cc>
 8016ac6:	a201      	add	r2, pc, #4	; (adr r2, 8016acc <UART_SetConfig+0x284>)
 8016ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016acc:	08016ae5 	.word	0x08016ae5
 8016ad0:	08016aed 	.word	0x08016aed
 8016ad4:	08016af5 	.word	0x08016af5
 8016ad8:	08016afd 	.word	0x08016afd
 8016adc:	08016b05 	.word	0x08016b05
 8016ae0:	08016b0d 	.word	0x08016b0d
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016aea:	e180      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016aec:	2304      	movs	r3, #4
 8016aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016af2:	e17c      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016af4:	2308      	movs	r3, #8
 8016af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016afa:	e178      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016afc:	2310      	movs	r3, #16
 8016afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b02:	e174      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b04:	2320      	movs	r3, #32
 8016b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b0a:	e170      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b0c:	2340      	movs	r3, #64	; 0x40
 8016b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b12:	e16c      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b14:	2380      	movs	r3, #128	; 0x80
 8016b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b1a:	e168      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	4a1b      	ldr	r2, [pc, #108]	; (8016b90 <UART_SetConfig+0x348>)
 8016b22:	4293      	cmp	r3, r2
 8016b24:	d142      	bne.n	8016bac <UART_SetConfig+0x364>
 8016b26:	4b16      	ldr	r3, [pc, #88]	; (8016b80 <UART_SetConfig+0x338>)
 8016b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b2a:	f003 0307 	and.w	r3, r3, #7
 8016b2e:	2b05      	cmp	r3, #5
 8016b30:	d838      	bhi.n	8016ba4 <UART_SetConfig+0x35c>
 8016b32:	a201      	add	r2, pc, #4	; (adr r2, 8016b38 <UART_SetConfig+0x2f0>)
 8016b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b38:	08016b51 	.word	0x08016b51
 8016b3c:	08016b59 	.word	0x08016b59
 8016b40:	08016b61 	.word	0x08016b61
 8016b44:	08016b69 	.word	0x08016b69
 8016b48:	08016b95 	.word	0x08016b95
 8016b4c:	08016b9d 	.word	0x08016b9d
 8016b50:	2300      	movs	r3, #0
 8016b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b56:	e14a      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b58:	2304      	movs	r3, #4
 8016b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b5e:	e146      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b60:	2308      	movs	r3, #8
 8016b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b66:	e142      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b68:	2310      	movs	r3, #16
 8016b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b6e:	e13e      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b70:	cfff69f3 	.word	0xcfff69f3
 8016b74:	58000c00 	.word	0x58000c00
 8016b78:	11fff4ff 	.word	0x11fff4ff
 8016b7c:	40011000 	.word	0x40011000
 8016b80:	58024400 	.word	0x58024400
 8016b84:	40004400 	.word	0x40004400
 8016b88:	40004800 	.word	0x40004800
 8016b8c:	40004c00 	.word	0x40004c00
 8016b90:	40005000 	.word	0x40005000
 8016b94:	2320      	movs	r3, #32
 8016b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b9a:	e128      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016b9c:	2340      	movs	r3, #64	; 0x40
 8016b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ba2:	e124      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016ba4:	2380      	movs	r3, #128	; 0x80
 8016ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016baa:	e120      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	4acb      	ldr	r2, [pc, #812]	; (8016ee0 <UART_SetConfig+0x698>)
 8016bb2:	4293      	cmp	r3, r2
 8016bb4:	d176      	bne.n	8016ca4 <UART_SetConfig+0x45c>
 8016bb6:	4bcb      	ldr	r3, [pc, #812]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016bbe:	2b28      	cmp	r3, #40	; 0x28
 8016bc0:	d86c      	bhi.n	8016c9c <UART_SetConfig+0x454>
 8016bc2:	a201      	add	r2, pc, #4	; (adr r2, 8016bc8 <UART_SetConfig+0x380>)
 8016bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bc8:	08016c6d 	.word	0x08016c6d
 8016bcc:	08016c9d 	.word	0x08016c9d
 8016bd0:	08016c9d 	.word	0x08016c9d
 8016bd4:	08016c9d 	.word	0x08016c9d
 8016bd8:	08016c9d 	.word	0x08016c9d
 8016bdc:	08016c9d 	.word	0x08016c9d
 8016be0:	08016c9d 	.word	0x08016c9d
 8016be4:	08016c9d 	.word	0x08016c9d
 8016be8:	08016c75 	.word	0x08016c75
 8016bec:	08016c9d 	.word	0x08016c9d
 8016bf0:	08016c9d 	.word	0x08016c9d
 8016bf4:	08016c9d 	.word	0x08016c9d
 8016bf8:	08016c9d 	.word	0x08016c9d
 8016bfc:	08016c9d 	.word	0x08016c9d
 8016c00:	08016c9d 	.word	0x08016c9d
 8016c04:	08016c9d 	.word	0x08016c9d
 8016c08:	08016c7d 	.word	0x08016c7d
 8016c0c:	08016c9d 	.word	0x08016c9d
 8016c10:	08016c9d 	.word	0x08016c9d
 8016c14:	08016c9d 	.word	0x08016c9d
 8016c18:	08016c9d 	.word	0x08016c9d
 8016c1c:	08016c9d 	.word	0x08016c9d
 8016c20:	08016c9d 	.word	0x08016c9d
 8016c24:	08016c9d 	.word	0x08016c9d
 8016c28:	08016c85 	.word	0x08016c85
 8016c2c:	08016c9d 	.word	0x08016c9d
 8016c30:	08016c9d 	.word	0x08016c9d
 8016c34:	08016c9d 	.word	0x08016c9d
 8016c38:	08016c9d 	.word	0x08016c9d
 8016c3c:	08016c9d 	.word	0x08016c9d
 8016c40:	08016c9d 	.word	0x08016c9d
 8016c44:	08016c9d 	.word	0x08016c9d
 8016c48:	08016c8d 	.word	0x08016c8d
 8016c4c:	08016c9d 	.word	0x08016c9d
 8016c50:	08016c9d 	.word	0x08016c9d
 8016c54:	08016c9d 	.word	0x08016c9d
 8016c58:	08016c9d 	.word	0x08016c9d
 8016c5c:	08016c9d 	.word	0x08016c9d
 8016c60:	08016c9d 	.word	0x08016c9d
 8016c64:	08016c9d 	.word	0x08016c9d
 8016c68:	08016c95 	.word	0x08016c95
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c72:	e0bc      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c74:	2304      	movs	r3, #4
 8016c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c7a:	e0b8      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c7c:	2308      	movs	r3, #8
 8016c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c82:	e0b4      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c84:	2310      	movs	r3, #16
 8016c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c8a:	e0b0      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c8c:	2320      	movs	r3, #32
 8016c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c92:	e0ac      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c94:	2340      	movs	r3, #64	; 0x40
 8016c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c9a:	e0a8      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016c9c:	2380      	movs	r3, #128	; 0x80
 8016c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ca2:	e0a4      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4a8f      	ldr	r2, [pc, #572]	; (8016ee8 <UART_SetConfig+0x6a0>)
 8016caa:	4293      	cmp	r3, r2
 8016cac:	d130      	bne.n	8016d10 <UART_SetConfig+0x4c8>
 8016cae:	4b8d      	ldr	r3, [pc, #564]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016cb2:	f003 0307 	and.w	r3, r3, #7
 8016cb6:	2b05      	cmp	r3, #5
 8016cb8:	d826      	bhi.n	8016d08 <UART_SetConfig+0x4c0>
 8016cba:	a201      	add	r2, pc, #4	; (adr r2, 8016cc0 <UART_SetConfig+0x478>)
 8016cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cc0:	08016cd9 	.word	0x08016cd9
 8016cc4:	08016ce1 	.word	0x08016ce1
 8016cc8:	08016ce9 	.word	0x08016ce9
 8016ccc:	08016cf1 	.word	0x08016cf1
 8016cd0:	08016cf9 	.word	0x08016cf9
 8016cd4:	08016d01 	.word	0x08016d01
 8016cd8:	2300      	movs	r3, #0
 8016cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cde:	e086      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016ce0:	2304      	movs	r3, #4
 8016ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ce6:	e082      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016ce8:	2308      	movs	r3, #8
 8016cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cee:	e07e      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016cf0:	2310      	movs	r3, #16
 8016cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cf6:	e07a      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016cf8:	2320      	movs	r3, #32
 8016cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cfe:	e076      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d00:	2340      	movs	r3, #64	; 0x40
 8016d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d06:	e072      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d08:	2380      	movs	r3, #128	; 0x80
 8016d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d0e:	e06e      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d10:	697b      	ldr	r3, [r7, #20]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4a75      	ldr	r2, [pc, #468]	; (8016eec <UART_SetConfig+0x6a4>)
 8016d16:	4293      	cmp	r3, r2
 8016d18:	d130      	bne.n	8016d7c <UART_SetConfig+0x534>
 8016d1a:	4b72      	ldr	r3, [pc, #456]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d1e:	f003 0307 	and.w	r3, r3, #7
 8016d22:	2b05      	cmp	r3, #5
 8016d24:	d826      	bhi.n	8016d74 <UART_SetConfig+0x52c>
 8016d26:	a201      	add	r2, pc, #4	; (adr r2, 8016d2c <UART_SetConfig+0x4e4>)
 8016d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d2c:	08016d45 	.word	0x08016d45
 8016d30:	08016d4d 	.word	0x08016d4d
 8016d34:	08016d55 	.word	0x08016d55
 8016d38:	08016d5d 	.word	0x08016d5d
 8016d3c:	08016d65 	.word	0x08016d65
 8016d40:	08016d6d 	.word	0x08016d6d
 8016d44:	2300      	movs	r3, #0
 8016d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d4a:	e050      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d4c:	2304      	movs	r3, #4
 8016d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d52:	e04c      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d54:	2308      	movs	r3, #8
 8016d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d5a:	e048      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d5c:	2310      	movs	r3, #16
 8016d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d62:	e044      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d64:	2320      	movs	r3, #32
 8016d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d6a:	e040      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d6c:	2340      	movs	r3, #64	; 0x40
 8016d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d72:	e03c      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d74:	2380      	movs	r3, #128	; 0x80
 8016d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d7a:	e038      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4a5b      	ldr	r2, [pc, #364]	; (8016ef0 <UART_SetConfig+0x6a8>)
 8016d82:	4293      	cmp	r3, r2
 8016d84:	d130      	bne.n	8016de8 <UART_SetConfig+0x5a0>
 8016d86:	4b57      	ldr	r3, [pc, #348]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d8a:	f003 0307 	and.w	r3, r3, #7
 8016d8e:	2b05      	cmp	r3, #5
 8016d90:	d826      	bhi.n	8016de0 <UART_SetConfig+0x598>
 8016d92:	a201      	add	r2, pc, #4	; (adr r2, 8016d98 <UART_SetConfig+0x550>)
 8016d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d98:	08016db1 	.word	0x08016db1
 8016d9c:	08016db9 	.word	0x08016db9
 8016da0:	08016dc1 	.word	0x08016dc1
 8016da4:	08016dc9 	.word	0x08016dc9
 8016da8:	08016dd1 	.word	0x08016dd1
 8016dac:	08016dd9 	.word	0x08016dd9
 8016db0:	2302      	movs	r3, #2
 8016db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016db6:	e01a      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016db8:	2304      	movs	r3, #4
 8016dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dbe:	e016      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016dc0:	2308      	movs	r3, #8
 8016dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dc6:	e012      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016dc8:	2310      	movs	r3, #16
 8016dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dce:	e00e      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016dd0:	2320      	movs	r3, #32
 8016dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dd6:	e00a      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016dd8:	2340      	movs	r3, #64	; 0x40
 8016dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016dde:	e006      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016de0:	2380      	movs	r3, #128	; 0x80
 8016de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016de6:	e002      	b.n	8016dee <UART_SetConfig+0x5a6>
 8016de8:	2380      	movs	r3, #128	; 0x80
 8016dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	4a3f      	ldr	r2, [pc, #252]	; (8016ef0 <UART_SetConfig+0x6a8>)
 8016df4:	4293      	cmp	r3, r2
 8016df6:	f040 80f8 	bne.w	8016fea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016dfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016dfe:	2b20      	cmp	r3, #32
 8016e00:	dc46      	bgt.n	8016e90 <UART_SetConfig+0x648>
 8016e02:	2b02      	cmp	r3, #2
 8016e04:	f2c0 8082 	blt.w	8016f0c <UART_SetConfig+0x6c4>
 8016e08:	3b02      	subs	r3, #2
 8016e0a:	2b1e      	cmp	r3, #30
 8016e0c:	d87e      	bhi.n	8016f0c <UART_SetConfig+0x6c4>
 8016e0e:	a201      	add	r2, pc, #4	; (adr r2, 8016e14 <UART_SetConfig+0x5cc>)
 8016e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e14:	08016e97 	.word	0x08016e97
 8016e18:	08016f0d 	.word	0x08016f0d
 8016e1c:	08016e9f 	.word	0x08016e9f
 8016e20:	08016f0d 	.word	0x08016f0d
 8016e24:	08016f0d 	.word	0x08016f0d
 8016e28:	08016f0d 	.word	0x08016f0d
 8016e2c:	08016eaf 	.word	0x08016eaf
 8016e30:	08016f0d 	.word	0x08016f0d
 8016e34:	08016f0d 	.word	0x08016f0d
 8016e38:	08016f0d 	.word	0x08016f0d
 8016e3c:	08016f0d 	.word	0x08016f0d
 8016e40:	08016f0d 	.word	0x08016f0d
 8016e44:	08016f0d 	.word	0x08016f0d
 8016e48:	08016f0d 	.word	0x08016f0d
 8016e4c:	08016ebf 	.word	0x08016ebf
 8016e50:	08016f0d 	.word	0x08016f0d
 8016e54:	08016f0d 	.word	0x08016f0d
 8016e58:	08016f0d 	.word	0x08016f0d
 8016e5c:	08016f0d 	.word	0x08016f0d
 8016e60:	08016f0d 	.word	0x08016f0d
 8016e64:	08016f0d 	.word	0x08016f0d
 8016e68:	08016f0d 	.word	0x08016f0d
 8016e6c:	08016f0d 	.word	0x08016f0d
 8016e70:	08016f0d 	.word	0x08016f0d
 8016e74:	08016f0d 	.word	0x08016f0d
 8016e78:	08016f0d 	.word	0x08016f0d
 8016e7c:	08016f0d 	.word	0x08016f0d
 8016e80:	08016f0d 	.word	0x08016f0d
 8016e84:	08016f0d 	.word	0x08016f0d
 8016e88:	08016f0d 	.word	0x08016f0d
 8016e8c:	08016eff 	.word	0x08016eff
 8016e90:	2b40      	cmp	r3, #64	; 0x40
 8016e92:	d037      	beq.n	8016f04 <UART_SetConfig+0x6bc>
 8016e94:	e03a      	b.n	8016f0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8016e96:	f7fb fbd7 	bl	8012648 <HAL_RCCEx_GetD3PCLK1Freq>
 8016e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016e9c:	e03c      	b.n	8016f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fb fbe6 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016eac:	e034      	b.n	8016f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016eae:	f107 0318 	add.w	r3, r7, #24
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fb fd32 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ebc:	e02c      	b.n	8016f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016ebe:	4b09      	ldr	r3, [pc, #36]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	f003 0320 	and.w	r3, r3, #32
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d016      	beq.n	8016ef8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016eca:	4b06      	ldr	r3, [pc, #24]	; (8016ee4 <UART_SetConfig+0x69c>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	08db      	lsrs	r3, r3, #3
 8016ed0:	f003 0303 	and.w	r3, r3, #3
 8016ed4:	4a07      	ldr	r2, [pc, #28]	; (8016ef4 <UART_SetConfig+0x6ac>)
 8016ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8016eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016edc:	e01c      	b.n	8016f18 <UART_SetConfig+0x6d0>
 8016ede:	bf00      	nop
 8016ee0:	40011400 	.word	0x40011400
 8016ee4:	58024400 	.word	0x58024400
 8016ee8:	40007800 	.word	0x40007800
 8016eec:	40007c00 	.word	0x40007c00
 8016ef0:	58000c00 	.word	0x58000c00
 8016ef4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8016ef8:	4b9d      	ldr	r3, [pc, #628]	; (8017170 <UART_SetConfig+0x928>)
 8016efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016efc:	e00c      	b.n	8016f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016efe:	4b9d      	ldr	r3, [pc, #628]	; (8017174 <UART_SetConfig+0x92c>)
 8016f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016f02:	e009      	b.n	8016f18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016f0a:	e005      	b.n	8016f18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016f10:	2301      	movs	r3, #1
 8016f12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016f16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	f000 81de 	beq.w	80172dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f24:	4a94      	ldr	r2, [pc, #592]	; (8017178 <UART_SetConfig+0x930>)
 8016f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016f32:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016f34:	697b      	ldr	r3, [r7, #20]
 8016f36:	685a      	ldr	r2, [r3, #4]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	4413      	add	r3, r2
 8016f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d305      	bcc.n	8016f50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f4c:	429a      	cmp	r2, r3
 8016f4e:	d903      	bls.n	8016f58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8016f50:	2301      	movs	r3, #1
 8016f52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016f56:	e1c1      	b.n	80172dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	60bb      	str	r3, [r7, #8]
 8016f5e:	60fa      	str	r2, [r7, #12]
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f64:	4a84      	ldr	r2, [pc, #528]	; (8017178 <UART_SetConfig+0x930>)
 8016f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	603b      	str	r3, [r7, #0]
 8016f70:	607a      	str	r2, [r7, #4]
 8016f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016f7a:	f7e9 f9b9 	bl	80002f0 <__aeabi_uldivmod>
 8016f7e:	4602      	mov	r2, r0
 8016f80:	460b      	mov	r3, r1
 8016f82:	4610      	mov	r0, r2
 8016f84:	4619      	mov	r1, r3
 8016f86:	f04f 0200 	mov.w	r2, #0
 8016f8a:	f04f 0300 	mov.w	r3, #0
 8016f8e:	020b      	lsls	r3, r1, #8
 8016f90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016f94:	0202      	lsls	r2, r0, #8
 8016f96:	6979      	ldr	r1, [r7, #20]
 8016f98:	6849      	ldr	r1, [r1, #4]
 8016f9a:	0849      	lsrs	r1, r1, #1
 8016f9c:	2000      	movs	r0, #0
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	4605      	mov	r5, r0
 8016fa2:	eb12 0804 	adds.w	r8, r2, r4
 8016fa6:	eb43 0905 	adc.w	r9, r3, r5
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	469a      	mov	sl, r3
 8016fb2:	4693      	mov	fp, r2
 8016fb4:	4652      	mov	r2, sl
 8016fb6:	465b      	mov	r3, fp
 8016fb8:	4640      	mov	r0, r8
 8016fba:	4649      	mov	r1, r9
 8016fbc:	f7e9 f998 	bl	80002f0 <__aeabi_uldivmod>
 8016fc0:	4602      	mov	r2, r0
 8016fc2:	460b      	mov	r3, r1
 8016fc4:	4613      	mov	r3, r2
 8016fc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016fce:	d308      	bcc.n	8016fe2 <UART_SetConfig+0x79a>
 8016fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016fd6:	d204      	bcs.n	8016fe2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016fde:	60da      	str	r2, [r3, #12]
 8016fe0:	e17c      	b.n	80172dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016fe8:	e178      	b.n	80172dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	69db      	ldr	r3, [r3, #28]
 8016fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ff2:	f040 80c5 	bne.w	8017180 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8016ff6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016ffa:	2b20      	cmp	r3, #32
 8016ffc:	dc48      	bgt.n	8017090 <UART_SetConfig+0x848>
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	db7b      	blt.n	80170fa <UART_SetConfig+0x8b2>
 8017002:	2b20      	cmp	r3, #32
 8017004:	d879      	bhi.n	80170fa <UART_SetConfig+0x8b2>
 8017006:	a201      	add	r2, pc, #4	; (adr r2, 801700c <UART_SetConfig+0x7c4>)
 8017008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801700c:	08017097 	.word	0x08017097
 8017010:	0801709f 	.word	0x0801709f
 8017014:	080170fb 	.word	0x080170fb
 8017018:	080170fb 	.word	0x080170fb
 801701c:	080170a7 	.word	0x080170a7
 8017020:	080170fb 	.word	0x080170fb
 8017024:	080170fb 	.word	0x080170fb
 8017028:	080170fb 	.word	0x080170fb
 801702c:	080170b7 	.word	0x080170b7
 8017030:	080170fb 	.word	0x080170fb
 8017034:	080170fb 	.word	0x080170fb
 8017038:	080170fb 	.word	0x080170fb
 801703c:	080170fb 	.word	0x080170fb
 8017040:	080170fb 	.word	0x080170fb
 8017044:	080170fb 	.word	0x080170fb
 8017048:	080170fb 	.word	0x080170fb
 801704c:	080170c7 	.word	0x080170c7
 8017050:	080170fb 	.word	0x080170fb
 8017054:	080170fb 	.word	0x080170fb
 8017058:	080170fb 	.word	0x080170fb
 801705c:	080170fb 	.word	0x080170fb
 8017060:	080170fb 	.word	0x080170fb
 8017064:	080170fb 	.word	0x080170fb
 8017068:	080170fb 	.word	0x080170fb
 801706c:	080170fb 	.word	0x080170fb
 8017070:	080170fb 	.word	0x080170fb
 8017074:	080170fb 	.word	0x080170fb
 8017078:	080170fb 	.word	0x080170fb
 801707c:	080170fb 	.word	0x080170fb
 8017080:	080170fb 	.word	0x080170fb
 8017084:	080170fb 	.word	0x080170fb
 8017088:	080170fb 	.word	0x080170fb
 801708c:	080170ed 	.word	0x080170ed
 8017090:	2b40      	cmp	r3, #64	; 0x40
 8017092:	d02e      	beq.n	80170f2 <UART_SetConfig+0x8aa>
 8017094:	e031      	b.n	80170fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017096:	f7f9 fadf 	bl	8010658 <HAL_RCC_GetPCLK1Freq>
 801709a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801709c:	e033      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801709e:	f7f9 faf1 	bl	8010684 <HAL_RCC_GetPCLK2Freq>
 80170a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80170a4:	e02f      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80170a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fb fae2 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80170b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170b4:	e027      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80170b6:	f107 0318 	add.w	r3, r7, #24
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7fb fc2e 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170c4:	e01f      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80170c6:	4b2d      	ldr	r3, [pc, #180]	; (801717c <UART_SetConfig+0x934>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	f003 0320 	and.w	r3, r3, #32
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d009      	beq.n	80170e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80170d2:	4b2a      	ldr	r3, [pc, #168]	; (801717c <UART_SetConfig+0x934>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	08db      	lsrs	r3, r3, #3
 80170d8:	f003 0303 	and.w	r3, r3, #3
 80170dc:	4a24      	ldr	r2, [pc, #144]	; (8017170 <UART_SetConfig+0x928>)
 80170de:	fa22 f303 	lsr.w	r3, r2, r3
 80170e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80170e4:	e00f      	b.n	8017106 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80170e6:	4b22      	ldr	r3, [pc, #136]	; (8017170 <UART_SetConfig+0x928>)
 80170e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170ea:	e00c      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80170ec:	4b21      	ldr	r3, [pc, #132]	; (8017174 <UART_SetConfig+0x92c>)
 80170ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170f0:	e009      	b.n	8017106 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80170f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80170f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170f8:	e005      	b.n	8017106 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80170fa:	2300      	movs	r3, #0
 80170fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80170fe:	2301      	movs	r3, #1
 8017100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8017104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017108:	2b00      	cmp	r3, #0
 801710a:	f000 80e7 	beq.w	80172dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017112:	4a19      	ldr	r2, [pc, #100]	; (8017178 <UART_SetConfig+0x930>)
 8017114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017118:	461a      	mov	r2, r3
 801711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801711c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017120:	005a      	lsls	r2, r3, #1
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	085b      	lsrs	r3, r3, #1
 8017128:	441a      	add	r2, r3
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	685b      	ldr	r3, [r3, #4]
 801712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017132:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017136:	2b0f      	cmp	r3, #15
 8017138:	d916      	bls.n	8017168 <UART_SetConfig+0x920>
 801713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801713c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017140:	d212      	bcs.n	8017168 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017144:	b29b      	uxth	r3, r3
 8017146:	f023 030f 	bic.w	r3, r3, #15
 801714a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801714e:	085b      	lsrs	r3, r3, #1
 8017150:	b29b      	uxth	r3, r3
 8017152:	f003 0307 	and.w	r3, r3, #7
 8017156:	b29a      	uxth	r2, r3
 8017158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801715a:	4313      	orrs	r3, r2
 801715c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017164:	60da      	str	r2, [r3, #12]
 8017166:	e0b9      	b.n	80172dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8017168:	2301      	movs	r3, #1
 801716a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801716e:	e0b5      	b.n	80172dc <UART_SetConfig+0xa94>
 8017170:	03d09000 	.word	0x03d09000
 8017174:	003d0900 	.word	0x003d0900
 8017178:	0801c1e4 	.word	0x0801c1e4
 801717c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8017180:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017184:	2b20      	cmp	r3, #32
 8017186:	dc49      	bgt.n	801721c <UART_SetConfig+0x9d4>
 8017188:	2b00      	cmp	r3, #0
 801718a:	db7c      	blt.n	8017286 <UART_SetConfig+0xa3e>
 801718c:	2b20      	cmp	r3, #32
 801718e:	d87a      	bhi.n	8017286 <UART_SetConfig+0xa3e>
 8017190:	a201      	add	r2, pc, #4	; (adr r2, 8017198 <UART_SetConfig+0x950>)
 8017192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017196:	bf00      	nop
 8017198:	08017223 	.word	0x08017223
 801719c:	0801722b 	.word	0x0801722b
 80171a0:	08017287 	.word	0x08017287
 80171a4:	08017287 	.word	0x08017287
 80171a8:	08017233 	.word	0x08017233
 80171ac:	08017287 	.word	0x08017287
 80171b0:	08017287 	.word	0x08017287
 80171b4:	08017287 	.word	0x08017287
 80171b8:	08017243 	.word	0x08017243
 80171bc:	08017287 	.word	0x08017287
 80171c0:	08017287 	.word	0x08017287
 80171c4:	08017287 	.word	0x08017287
 80171c8:	08017287 	.word	0x08017287
 80171cc:	08017287 	.word	0x08017287
 80171d0:	08017287 	.word	0x08017287
 80171d4:	08017287 	.word	0x08017287
 80171d8:	08017253 	.word	0x08017253
 80171dc:	08017287 	.word	0x08017287
 80171e0:	08017287 	.word	0x08017287
 80171e4:	08017287 	.word	0x08017287
 80171e8:	08017287 	.word	0x08017287
 80171ec:	08017287 	.word	0x08017287
 80171f0:	08017287 	.word	0x08017287
 80171f4:	08017287 	.word	0x08017287
 80171f8:	08017287 	.word	0x08017287
 80171fc:	08017287 	.word	0x08017287
 8017200:	08017287 	.word	0x08017287
 8017204:	08017287 	.word	0x08017287
 8017208:	08017287 	.word	0x08017287
 801720c:	08017287 	.word	0x08017287
 8017210:	08017287 	.word	0x08017287
 8017214:	08017287 	.word	0x08017287
 8017218:	08017279 	.word	0x08017279
 801721c:	2b40      	cmp	r3, #64	; 0x40
 801721e:	d02e      	beq.n	801727e <UART_SetConfig+0xa36>
 8017220:	e031      	b.n	8017286 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017222:	f7f9 fa19 	bl	8010658 <HAL_RCC_GetPCLK1Freq>
 8017226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017228:	e033      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801722a:	f7f9 fa2b 	bl	8010684 <HAL_RCC_GetPCLK2Freq>
 801722e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017230:	e02f      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017236:	4618      	mov	r0, r3
 8017238:	f7fb fa1c 	bl	8012674 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801723e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017240:	e027      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017242:	f107 0318 	add.w	r3, r7, #24
 8017246:	4618      	mov	r0, r3
 8017248:	f7fb fb68 	bl	801291c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801724c:	69fb      	ldr	r3, [r7, #28]
 801724e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017250:	e01f      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017252:	4b2d      	ldr	r3, [pc, #180]	; (8017308 <UART_SetConfig+0xac0>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	f003 0320 	and.w	r3, r3, #32
 801725a:	2b00      	cmp	r3, #0
 801725c:	d009      	beq.n	8017272 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801725e:	4b2a      	ldr	r3, [pc, #168]	; (8017308 <UART_SetConfig+0xac0>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	08db      	lsrs	r3, r3, #3
 8017264:	f003 0303 	and.w	r3, r3, #3
 8017268:	4a28      	ldr	r2, [pc, #160]	; (801730c <UART_SetConfig+0xac4>)
 801726a:	fa22 f303 	lsr.w	r3, r2, r3
 801726e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017270:	e00f      	b.n	8017292 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8017272:	4b26      	ldr	r3, [pc, #152]	; (801730c <UART_SetConfig+0xac4>)
 8017274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017276:	e00c      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017278:	4b25      	ldr	r3, [pc, #148]	; (8017310 <UART_SetConfig+0xac8>)
 801727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801727c:	e009      	b.n	8017292 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801727e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017284:	e005      	b.n	8017292 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8017286:	2300      	movs	r3, #0
 8017288:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801728a:	2301      	movs	r3, #1
 801728c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8017290:	bf00      	nop
    }

    if (pclk != 0U)
 8017292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017294:	2b00      	cmp	r3, #0
 8017296:	d021      	beq.n	80172dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801729c:	4a1d      	ldr	r2, [pc, #116]	; (8017314 <UART_SetConfig+0xacc>)
 801729e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80172a2:	461a      	mov	r2, r3
 80172a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	085b      	lsrs	r3, r3, #1
 80172b0:	441a      	add	r2, r3
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80172ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80172bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172be:	2b0f      	cmp	r3, #15
 80172c0:	d909      	bls.n	80172d6 <UART_SetConfig+0xa8e>
 80172c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172c8:	d205      	bcs.n	80172d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80172ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	60da      	str	r2, [r3, #12]
 80172d4:	e002      	b.n	80172dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80172d6:	2301      	movs	r3, #1
 80172d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	2201      	movs	r2, #1
 80172e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	2201      	movs	r2, #1
 80172e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	2200      	movs	r2, #0
 80172f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	2200      	movs	r2, #0
 80172f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80172f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3748      	adds	r7, #72	; 0x48
 8017300:	46bd      	mov	sp, r7
 8017302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017306:	bf00      	nop
 8017308:	58024400 	.word	0x58024400
 801730c:	03d09000 	.word	0x03d09000
 8017310:	003d0900 	.word	0x003d0900
 8017314:	0801c1e4 	.word	0x0801c1e4

08017318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017318:	b480      	push	{r7}
 801731a:	b083      	sub	sp, #12
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017324:	f003 0308 	and.w	r3, r3, #8
 8017328:	2b00      	cmp	r3, #0
 801732a:	d00a      	beq.n	8017342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	430a      	orrs	r2, r1
 8017340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017346:	f003 0301 	and.w	r3, r3, #1
 801734a:	2b00      	cmp	r3, #0
 801734c:	d00a      	beq.n	8017364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	430a      	orrs	r2, r1
 8017362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017368:	f003 0302 	and.w	r3, r3, #2
 801736c:	2b00      	cmp	r3, #0
 801736e:	d00a      	beq.n	8017386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	430a      	orrs	r2, r1
 8017384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801738a:	f003 0304 	and.w	r3, r3, #4
 801738e:	2b00      	cmp	r3, #0
 8017390:	d00a      	beq.n	80173a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	685b      	ldr	r3, [r3, #4]
 8017398:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	430a      	orrs	r2, r1
 80173a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ac:	f003 0310 	and.w	r3, r3, #16
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00a      	beq.n	80173ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	689b      	ldr	r3, [r3, #8]
 80173ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	430a      	orrs	r2, r1
 80173c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ce:	f003 0320 	and.w	r3, r3, #32
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d00a      	beq.n	80173ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	689b      	ldr	r3, [r3, #8]
 80173dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	430a      	orrs	r2, r1
 80173ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d01a      	beq.n	801742e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	430a      	orrs	r2, r1
 801740c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017416:	d10a      	bne.n	801742e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	430a      	orrs	r2, r1
 801742c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00a      	beq.n	8017450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	430a      	orrs	r2, r1
 801744e:	605a      	str	r2, [r3, #4]
  }
}
 8017450:	bf00      	nop
 8017452:	370c      	adds	r7, #12
 8017454:	46bd      	mov	sp, r7
 8017456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745a:	4770      	bx	lr

0801745c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b098      	sub	sp, #96	; 0x60
 8017460:	af02      	add	r7, sp, #8
 8017462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2200      	movs	r2, #0
 8017468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801746c:	f7ef fab8 	bl	80069e0 <HAL_GetTick>
 8017470:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f003 0308 	and.w	r3, r3, #8
 801747c:	2b08      	cmp	r3, #8
 801747e:	d12f      	bne.n	80174e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017484:	9300      	str	r3, [sp, #0]
 8017486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017488:	2200      	movs	r2, #0
 801748a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f000 f88e 	bl	80175b0 <UART_WaitOnFlagUntilTimeout>
 8017494:	4603      	mov	r3, r0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d022      	beq.n	80174e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a2:	e853 3f00 	ldrex	r3, [r3]
 80174a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80174a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80174ae:	653b      	str	r3, [r7, #80]	; 0x50
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	461a      	mov	r2, r3
 80174b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174b8:	647b      	str	r3, [r7, #68]	; 0x44
 80174ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80174be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174c0:	e841 2300 	strex	r3, r2, [r1]
 80174c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80174c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d1e6      	bne.n	801749a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2220      	movs	r2, #32
 80174d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80174dc:	2303      	movs	r3, #3
 80174de:	e063      	b.n	80175a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	f003 0304 	and.w	r3, r3, #4
 80174ea:	2b04      	cmp	r3, #4
 80174ec:	d149      	bne.n	8017582 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80174ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80174f2:	9300      	str	r3, [sp, #0]
 80174f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174f6:	2200      	movs	r2, #0
 80174f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f000 f857 	bl	80175b0 <UART_WaitOnFlagUntilTimeout>
 8017502:	4603      	mov	r3, r0
 8017504:	2b00      	cmp	r3, #0
 8017506:	d03c      	beq.n	8017582 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017510:	e853 3f00 	ldrex	r3, [r3]
 8017514:	623b      	str	r3, [r7, #32]
   return(result);
 8017516:	6a3b      	ldr	r3, [r7, #32]
 8017518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801751c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	461a      	mov	r2, r3
 8017524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017526:	633b      	str	r3, [r7, #48]	; 0x30
 8017528:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801752a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801752e:	e841 2300 	strex	r3, r2, [r1]
 8017532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017536:	2b00      	cmp	r3, #0
 8017538:	d1e6      	bne.n	8017508 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	3308      	adds	r3, #8
 8017540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	e853 3f00 	ldrex	r3, [r3]
 8017548:	60fb      	str	r3, [r7, #12]
   return(result);
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	f023 0301 	bic.w	r3, r3, #1
 8017550:	64bb      	str	r3, [r7, #72]	; 0x48
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	3308      	adds	r3, #8
 8017558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801755a:	61fa      	str	r2, [r7, #28]
 801755c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801755e:	69b9      	ldr	r1, [r7, #24]
 8017560:	69fa      	ldr	r2, [r7, #28]
 8017562:	e841 2300 	strex	r3, r2, [r1]
 8017566:	617b      	str	r3, [r7, #20]
   return(result);
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d1e5      	bne.n	801753a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	2220      	movs	r2, #32
 8017572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	2200      	movs	r2, #0
 801757a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801757e:	2303      	movs	r3, #3
 8017580:	e012      	b.n	80175a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2220      	movs	r2, #32
 8017586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2220      	movs	r2, #32
 801758e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2200      	movs	r2, #0
 8017596:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2200      	movs	r2, #0
 801759c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2200      	movs	r2, #0
 80175a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80175a6:	2300      	movs	r3, #0
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3758      	adds	r7, #88	; 0x58
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b084      	sub	sp, #16
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	60f8      	str	r0, [r7, #12]
 80175b8:	60b9      	str	r1, [r7, #8]
 80175ba:	603b      	str	r3, [r7, #0]
 80175bc:	4613      	mov	r3, r2
 80175be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80175c0:	e04f      	b.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175c8:	d04b      	beq.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80175ca:	f7ef fa09 	bl	80069e0 <HAL_GetTick>
 80175ce:	4602      	mov	r2, r0
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	1ad3      	subs	r3, r2, r3
 80175d4:	69ba      	ldr	r2, [r7, #24]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d302      	bcc.n	80175e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d101      	bne.n	80175e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80175e0:	2303      	movs	r3, #3
 80175e2:	e04e      	b.n	8017682 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	f003 0304 	and.w	r3, r3, #4
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d037      	beq.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	2b80      	cmp	r3, #128	; 0x80
 80175f6:	d034      	beq.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	2b40      	cmp	r3, #64	; 0x40
 80175fc:	d031      	beq.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	69db      	ldr	r3, [r3, #28]
 8017604:	f003 0308 	and.w	r3, r3, #8
 8017608:	2b08      	cmp	r3, #8
 801760a:	d110      	bne.n	801762e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2208      	movs	r2, #8
 8017612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f000 f95b 	bl	80178d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	2208      	movs	r2, #8
 801761e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2200      	movs	r2, #0
 8017626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801762a:	2301      	movs	r3, #1
 801762c:	e029      	b.n	8017682 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	69db      	ldr	r3, [r3, #28]
 8017634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801763c:	d111      	bne.n	8017662 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017648:	68f8      	ldr	r0, [r7, #12]
 801764a:	f000 f941 	bl	80178d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	2220      	movs	r2, #32
 8017652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2200      	movs	r2, #0
 801765a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801765e:	2303      	movs	r3, #3
 8017660:	e00f      	b.n	8017682 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	69da      	ldr	r2, [r3, #28]
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	4013      	ands	r3, r2
 801766c:	68ba      	ldr	r2, [r7, #8]
 801766e:	429a      	cmp	r2, r3
 8017670:	bf0c      	ite	eq
 8017672:	2301      	moveq	r3, #1
 8017674:	2300      	movne	r3, #0
 8017676:	b2db      	uxtb	r3, r3
 8017678:	461a      	mov	r2, r3
 801767a:	79fb      	ldrb	r3, [r7, #7]
 801767c:	429a      	cmp	r2, r3
 801767e:	d0a0      	beq.n	80175c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017680:	2300      	movs	r3, #0
}
 8017682:	4618      	mov	r0, r3
 8017684:	3710      	adds	r7, #16
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
	...

0801768c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801768c:	b480      	push	{r7}
 801768e:	b0a3      	sub	sp, #140	; 0x8c
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	4613      	mov	r3, r2
 8017698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	68ba      	ldr	r2, [r7, #8]
 801769e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	88fa      	ldrh	r2, [r7, #6]
 80176a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	88fa      	ldrh	r2, [r7, #6]
 80176ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	2200      	movs	r2, #0
 80176b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	689b      	ldr	r3, [r3, #8]
 80176ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80176be:	d10e      	bne.n	80176de <UART_Start_Receive_IT+0x52>
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	691b      	ldr	r3, [r3, #16]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d105      	bne.n	80176d4 <UART_Start_Receive_IT+0x48>
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80176ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80176d2:	e02d      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	22ff      	movs	r2, #255	; 0xff
 80176d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80176dc:	e028      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	689b      	ldr	r3, [r3, #8]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d10d      	bne.n	8017702 <UART_Start_Receive_IT+0x76>
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	691b      	ldr	r3, [r3, #16]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d104      	bne.n	80176f8 <UART_Start_Receive_IT+0x6c>
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	22ff      	movs	r2, #255	; 0xff
 80176f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80176f6:	e01b      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	227f      	movs	r2, #127	; 0x7f
 80176fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017700:	e016      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	689b      	ldr	r3, [r3, #8]
 8017706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801770a:	d10d      	bne.n	8017728 <UART_Start_Receive_IT+0x9c>
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	691b      	ldr	r3, [r3, #16]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d104      	bne.n	801771e <UART_Start_Receive_IT+0x92>
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	227f      	movs	r2, #127	; 0x7f
 8017718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801771c:	e008      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	223f      	movs	r2, #63	; 0x3f
 8017722:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017726:	e003      	b.n	8017730 <UART_Start_Receive_IT+0xa4>
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2200      	movs	r2, #0
 801772c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2200      	movs	r2, #0
 8017734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	2222      	movs	r2, #34	; 0x22
 801773c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	3308      	adds	r3, #8
 8017746:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801774a:	e853 3f00 	ldrex	r3, [r3]
 801774e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017752:	f043 0301 	orr.w	r3, r3, #1
 8017756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	3308      	adds	r3, #8
 8017760:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017764:	673a      	str	r2, [r7, #112]	; 0x70
 8017766:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017768:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801776a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801776c:	e841 2300 	strex	r3, r2, [r1]
 8017770:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017774:	2b00      	cmp	r3, #0
 8017776:	d1e3      	bne.n	8017740 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801777c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017780:	d14f      	bne.n	8017822 <UART_Start_Receive_IT+0x196>
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017788:	88fa      	ldrh	r2, [r7, #6]
 801778a:	429a      	cmp	r2, r3
 801778c:	d349      	bcc.n	8017822 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	689b      	ldr	r3, [r3, #8]
 8017792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017796:	d107      	bne.n	80177a8 <UART_Start_Receive_IT+0x11c>
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	691b      	ldr	r3, [r3, #16]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d103      	bne.n	80177a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	4a47      	ldr	r2, [pc, #284]	; (80178c0 <UART_Start_Receive_IT+0x234>)
 80177a4:	675a      	str	r2, [r3, #116]	; 0x74
 80177a6:	e002      	b.n	80177ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	4a46      	ldr	r2, [pc, #280]	; (80178c4 <UART_Start_Receive_IT+0x238>)
 80177ac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	691b      	ldr	r3, [r3, #16]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d01a      	beq.n	80177ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177be:	e853 3f00 	ldrex	r3, [r3]
 80177c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80177c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80177ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	461a      	mov	r2, r3
 80177d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80177d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80177da:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80177de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177e0:	e841 2300 	strex	r3, r2, [r1]
 80177e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80177e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1e4      	bne.n	80177b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	3308      	adds	r3, #8
 80177f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177f6:	e853 3f00 	ldrex	r3, [r3]
 80177fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80177fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	3308      	adds	r3, #8
 801780a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801780c:	64ba      	str	r2, [r7, #72]	; 0x48
 801780e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017814:	e841 2300 	strex	r3, r2, [r1]
 8017818:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801781a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801781c:	2b00      	cmp	r3, #0
 801781e:	d1e5      	bne.n	80177ec <UART_Start_Receive_IT+0x160>
 8017820:	e046      	b.n	80178b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	689b      	ldr	r3, [r3, #8]
 8017826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801782a:	d107      	bne.n	801783c <UART_Start_Receive_IT+0x1b0>
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	691b      	ldr	r3, [r3, #16]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d103      	bne.n	801783c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	4a24      	ldr	r2, [pc, #144]	; (80178c8 <UART_Start_Receive_IT+0x23c>)
 8017838:	675a      	str	r2, [r3, #116]	; 0x74
 801783a:	e002      	b.n	8017842 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	4a23      	ldr	r2, [pc, #140]	; (80178cc <UART_Start_Receive_IT+0x240>)
 8017840:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	691b      	ldr	r3, [r3, #16]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d019      	beq.n	801787e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017852:	e853 3f00 	ldrex	r3, [r3]
 8017856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801785e:	677b      	str	r3, [r7, #116]	; 0x74
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	461a      	mov	r2, r3
 8017866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017868:	637b      	str	r3, [r7, #52]	; 0x34
 801786a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801786c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801786e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017870:	e841 2300 	strex	r3, r2, [r1]
 8017874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017878:	2b00      	cmp	r3, #0
 801787a:	d1e6      	bne.n	801784a <UART_Start_Receive_IT+0x1be>
 801787c:	e018      	b.n	80178b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	e853 3f00 	ldrex	r3, [r3]
 801788a:	613b      	str	r3, [r7, #16]
   return(result);
 801788c:	693b      	ldr	r3, [r7, #16]
 801788e:	f043 0320 	orr.w	r3, r3, #32
 8017892:	67bb      	str	r3, [r7, #120]	; 0x78
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	461a      	mov	r2, r3
 801789a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801789c:	623b      	str	r3, [r7, #32]
 801789e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178a0:	69f9      	ldr	r1, [r7, #28]
 80178a2:	6a3a      	ldr	r2, [r7, #32]
 80178a4:	e841 2300 	strex	r3, r2, [r1]
 80178a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80178aa:	69bb      	ldr	r3, [r7, #24]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d1e6      	bne.n	801787e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80178b0:	2300      	movs	r3, #0
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	378c      	adds	r7, #140	; 0x8c
 80178b6:	46bd      	mov	sp, r7
 80178b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop
 80178c0:	080180f1 	.word	0x080180f1
 80178c4:	08017d91 	.word	0x08017d91
 80178c8:	08017bd9 	.word	0x08017bd9
 80178cc:	08017a21 	.word	0x08017a21

080178d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80178d0:	b480      	push	{r7}
 80178d2:	b095      	sub	sp, #84	; 0x54
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178e0:	e853 3f00 	ldrex	r3, [r3]
 80178e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80178e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80178ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	461a      	mov	r2, r3
 80178f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178f6:	643b      	str	r3, [r7, #64]	; 0x40
 80178f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80178fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80178fe:	e841 2300 	strex	r3, r2, [r1]
 8017902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017906:	2b00      	cmp	r3, #0
 8017908:	d1e6      	bne.n	80178d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	3308      	adds	r3, #8
 8017910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017912:	6a3b      	ldr	r3, [r7, #32]
 8017914:	e853 3f00 	ldrex	r3, [r3]
 8017918:	61fb      	str	r3, [r7, #28]
   return(result);
 801791a:	69fa      	ldr	r2, [r7, #28]
 801791c:	4b1e      	ldr	r3, [pc, #120]	; (8017998 <UART_EndRxTransfer+0xc8>)
 801791e:	4013      	ands	r3, r2
 8017920:	64bb      	str	r3, [r7, #72]	; 0x48
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	3308      	adds	r3, #8
 8017928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801792a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801792c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801792e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017932:	e841 2300 	strex	r3, r2, [r1]
 8017936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1e5      	bne.n	801790a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017942:	2b01      	cmp	r3, #1
 8017944:	d118      	bne.n	8017978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	e853 3f00 	ldrex	r3, [r3]
 8017952:	60bb      	str	r3, [r7, #8]
   return(result);
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	f023 0310 	bic.w	r3, r3, #16
 801795a:	647b      	str	r3, [r7, #68]	; 0x44
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	461a      	mov	r2, r3
 8017962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017964:	61bb      	str	r3, [r7, #24]
 8017966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017968:	6979      	ldr	r1, [r7, #20]
 801796a:	69ba      	ldr	r2, [r7, #24]
 801796c:	e841 2300 	strex	r3, r2, [r1]
 8017970:	613b      	str	r3, [r7, #16]
   return(result);
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d1e6      	bne.n	8017946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2220      	movs	r2, #32
 801797c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2200      	movs	r2, #0
 8017984:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	2200      	movs	r2, #0
 801798a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801798c:	bf00      	nop
 801798e:	3754      	adds	r7, #84	; 0x54
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr
 8017998:	effffffe 	.word	0xeffffffe

0801799c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	2200      	movs	r2, #0
 80179ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	2200      	movs	r2, #0
 80179b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80179ba:	68f8      	ldr	r0, [r7, #12]
 80179bc:	f7fe ff2e 	bl	801681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179c0:	bf00      	nop
 80179c2:	3710      	adds	r7, #16
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}

080179c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b088      	sub	sp, #32
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	e853 3f00 	ldrex	r3, [r3]
 80179dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80179e4:	61fb      	str	r3, [r7, #28]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	461a      	mov	r2, r3
 80179ec:	69fb      	ldr	r3, [r7, #28]
 80179ee:	61bb      	str	r3, [r7, #24]
 80179f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179f2:	6979      	ldr	r1, [r7, #20]
 80179f4:	69ba      	ldr	r2, [r7, #24]
 80179f6:	e841 2300 	strex	r3, r2, [r1]
 80179fa:	613b      	str	r3, [r7, #16]
   return(result);
 80179fc:	693b      	ldr	r3, [r7, #16]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d1e6      	bne.n	80179d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2220      	movs	r2, #32
 8017a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f7fe fef9 	bl	8016808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017a16:	bf00      	nop
 8017a18:	3720      	adds	r7, #32
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
	...

08017a20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b09c      	sub	sp, #112	; 0x70
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017a38:	2b22      	cmp	r3, #34	; 0x22
 8017a3a:	f040 80be 	bne.w	8017bba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8017a4c:	b2d9      	uxtb	r1, r3
 8017a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017a52:	b2da      	uxtb	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a58:	400a      	ands	r2, r1
 8017a5a:	b2d2      	uxtb	r2, r2
 8017a5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a62:	1c5a      	adds	r2, r3, #1
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	3b01      	subs	r3, #1
 8017a72:	b29a      	uxth	r2, r3
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017a80:	b29b      	uxth	r3, r3
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	f040 80a1 	bne.w	8017bca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a90:	e853 3f00 	ldrex	r3, [r3]
 8017a94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8017aa8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017aae:	e841 2300 	strex	r3, r2, [r1]
 8017ab2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1e6      	bne.n	8017a88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	3308      	adds	r3, #8
 8017ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac4:	e853 3f00 	ldrex	r3, [r3]
 8017ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017acc:	f023 0301 	bic.w	r3, r3, #1
 8017ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	3308      	adds	r3, #8
 8017ad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017ada:	647a      	str	r2, [r7, #68]	; 0x44
 8017adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ae2:	e841 2300 	strex	r3, r2, [r1]
 8017ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1e5      	bne.n	8017aba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2220      	movs	r2, #32
 8017af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	2200      	movs	r2, #0
 8017afa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2200      	movs	r2, #0
 8017b00:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	4a33      	ldr	r2, [pc, #204]	; (8017bd4 <UART_RxISR_8BIT+0x1b4>)
 8017b08:	4293      	cmp	r3, r2
 8017b0a:	d01f      	beq.n	8017b4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	685b      	ldr	r3, [r3, #4]
 8017b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d018      	beq.n	8017b4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b22:	e853 3f00 	ldrex	r3, [r3]
 8017b26:	623b      	str	r3, [r7, #32]
   return(result);
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	461a      	mov	r2, r3
 8017b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017b38:	633b      	str	r3, [r7, #48]	; 0x30
 8017b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b40:	e841 2300 	strex	r3, r2, [r1]
 8017b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d1e6      	bne.n	8017b1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b50:	2b01      	cmp	r3, #1
 8017b52:	d12e      	bne.n	8017bb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2200      	movs	r2, #0
 8017b58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	e853 3f00 	ldrex	r3, [r3]
 8017b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	f023 0310 	bic.w	r3, r3, #16
 8017b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	461a      	mov	r2, r3
 8017b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b78:	61fb      	str	r3, [r7, #28]
 8017b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b7c:	69b9      	ldr	r1, [r7, #24]
 8017b7e:	69fa      	ldr	r2, [r7, #28]
 8017b80:	e841 2300 	strex	r3, r2, [r1]
 8017b84:	617b      	str	r3, [r7, #20]
   return(result);
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d1e6      	bne.n	8017b5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	69db      	ldr	r3, [r3, #28]
 8017b92:	f003 0310 	and.w	r3, r3, #16
 8017b96:	2b10      	cmp	r3, #16
 8017b98:	d103      	bne.n	8017ba2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2210      	movs	r2, #16
 8017ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017ba8:	4619      	mov	r1, r3
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f7fe fe40 	bl	8016830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017bb0:	e00b      	b.n	8017bca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f7eb f97c 	bl	8002eb0 <HAL_UART_RxCpltCallback>
}
 8017bb8:	e007      	b.n	8017bca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	699a      	ldr	r2, [r3, #24]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	f042 0208 	orr.w	r2, r2, #8
 8017bc8:	619a      	str	r2, [r3, #24]
}
 8017bca:	bf00      	nop
 8017bcc:	3770      	adds	r7, #112	; 0x70
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
 8017bd2:	bf00      	nop
 8017bd4:	58000c00 	.word	0x58000c00

08017bd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b09c      	sub	sp, #112	; 0x70
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017be6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017bf0:	2b22      	cmp	r3, #34	; 0x22
 8017bf2:	f040 80be 	bne.w	8017d72 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c04:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8017c06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8017c0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017c0e:	4013      	ands	r3, r2
 8017c10:	b29a      	uxth	r2, r3
 8017c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c1a:	1c9a      	adds	r2, r3, #2
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	b29a      	uxth	r2, r3
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	f040 80a1 	bne.w	8017d82 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c48:	e853 3f00 	ldrex	r3, [r3]
 8017c4c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017c54:	667b      	str	r3, [r7, #100]	; 0x64
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	461a      	mov	r2, r3
 8017c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8017c60:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c66:	e841 2300 	strex	r3, r2, [r1]
 8017c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d1e6      	bne.n	8017c40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	3308      	adds	r3, #8
 8017c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c7c:	e853 3f00 	ldrex	r3, [r3]
 8017c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c84:	f023 0301 	bic.w	r3, r3, #1
 8017c88:	663b      	str	r3, [r7, #96]	; 0x60
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	3308      	adds	r3, #8
 8017c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017c92:	643a      	str	r2, [r7, #64]	; 0x40
 8017c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c9a:	e841 2300 	strex	r3, r2, [r1]
 8017c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d1e5      	bne.n	8017c72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	2220      	movs	r2, #32
 8017caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	4a33      	ldr	r2, [pc, #204]	; (8017d8c <UART_RxISR_16BIT+0x1b4>)
 8017cc0:	4293      	cmp	r3, r2
 8017cc2:	d01f      	beq.n	8017d04 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d018      	beq.n	8017d04 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cd8:	6a3b      	ldr	r3, [r7, #32]
 8017cda:	e853 3f00 	ldrex	r3, [r3]
 8017cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	461a      	mov	r2, r3
 8017cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cf2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cf8:	e841 2300 	strex	r3, r2, [r1]
 8017cfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1e6      	bne.n	8017cd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d12e      	bne.n	8017d6a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	e853 3f00 	ldrex	r3, [r3]
 8017d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	f023 0310 	bic.w	r3, r3, #16
 8017d26:	65bb      	str	r3, [r7, #88]	; 0x58
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	461a      	mov	r2, r3
 8017d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017d30:	61bb      	str	r3, [r7, #24]
 8017d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d34:	6979      	ldr	r1, [r7, #20]
 8017d36:	69ba      	ldr	r2, [r7, #24]
 8017d38:	e841 2300 	strex	r3, r2, [r1]
 8017d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d1e6      	bne.n	8017d12 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	69db      	ldr	r3, [r3, #28]
 8017d4a:	f003 0310 	and.w	r3, r3, #16
 8017d4e:	2b10      	cmp	r3, #16
 8017d50:	d103      	bne.n	8017d5a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	2210      	movs	r2, #16
 8017d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017d60:	4619      	mov	r1, r3
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7fe fd64 	bl	8016830 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017d68:	e00b      	b.n	8017d82 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7eb f8a0 	bl	8002eb0 <HAL_UART_RxCpltCallback>
}
 8017d70:	e007      	b.n	8017d82 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	699a      	ldr	r2, [r3, #24]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f042 0208 	orr.w	r2, r2, #8
 8017d80:	619a      	str	r2, [r3, #24]
}
 8017d82:	bf00      	nop
 8017d84:	3770      	adds	r7, #112	; 0x70
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	58000c00 	.word	0x58000c00

08017d90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b0ac      	sub	sp, #176	; 0xb0
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	69db      	ldr	r3, [r3, #28]
 8017da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017dc6:	2b22      	cmp	r3, #34	; 0x22
 8017dc8:	f040 8180 	bne.w	80180cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017dd2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017dd6:	e123      	b.n	8018020 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dde:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017de2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8017de6:	b2d9      	uxtb	r1, r3
 8017de8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8017dec:	b2da      	uxtb	r2, r3
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017df2:	400a      	ands	r2, r1
 8017df4:	b2d2      	uxtb	r2, r2
 8017df6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dfc:	1c5a      	adds	r2, r3, #1
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017e08:	b29b      	uxth	r3, r3
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	b29a      	uxth	r2, r3
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	69db      	ldr	r3, [r3, #28]
 8017e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e22:	f003 0307 	and.w	r3, r3, #7
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d053      	beq.n	8017ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e2e:	f003 0301 	and.w	r3, r3, #1
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d011      	beq.n	8017e5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8017e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d00b      	beq.n	8017e5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	2201      	movs	r2, #1
 8017e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e50:	f043 0201 	orr.w	r2, r3, #1
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e5e:	f003 0302 	and.w	r3, r3, #2
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d011      	beq.n	8017e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8017e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017e6a:	f003 0301 	and.w	r3, r3, #1
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d00b      	beq.n	8017e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	2202      	movs	r2, #2
 8017e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e80:	f043 0204 	orr.w	r2, r3, #4
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e8e:	f003 0304 	and.w	r3, r3, #4
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d011      	beq.n	8017eba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8017e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017e9a:	f003 0301 	and.w	r3, r3, #1
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d00b      	beq.n	8017eba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2204      	movs	r2, #4
 8017ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017eb0:	f043 0202 	orr.w	r2, r3, #2
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d006      	beq.n	8017ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7fe fca9 	bl	801681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	f040 80a0 	bne.w	8018020 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017ee8:	e853 3f00 	ldrex	r3, [r3]
 8017eec:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8017eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	461a      	mov	r2, r3
 8017efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017f04:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f06:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017f08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017f0a:	e841 2300 	strex	r3, r2, [r1]
 8017f0e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8017f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d1e4      	bne.n	8017ee0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	3308      	adds	r3, #8
 8017f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017f20:	e853 3f00 	ldrex	r3, [r3]
 8017f24:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8017f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f28:	4b6e      	ldr	r3, [pc, #440]	; (80180e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8017f2a:	4013      	ands	r3, r2
 8017f2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	3308      	adds	r3, #8
 8017f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017f3a:	66ba      	str	r2, [r7, #104]	; 0x68
 8017f3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017f40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017f42:	e841 2300 	strex	r3, r2, [r1]
 8017f46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d1e3      	bne.n	8017f16 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	2220      	movs	r2, #32
 8017f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	4a60      	ldr	r2, [pc, #384]	; (80180e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	d021      	beq.n	8017fb0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	685b      	ldr	r3, [r3, #4]
 8017f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d01a      	beq.n	8017fb0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f82:	e853 3f00 	ldrex	r3, [r3]
 8017f86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	461a      	mov	r2, r3
 8017f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8017f9e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017fa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017fa4:	e841 2300 	strex	r3, r2, [r1]
 8017fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d1e4      	bne.n	8017f7a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fb4:	2b01      	cmp	r3, #1
 8017fb6:	d130      	bne.n	801801a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fc6:	e853 3f00 	ldrex	r3, [r3]
 8017fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fce:	f023 0310 	bic.w	r3, r3, #16
 8017fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	461a      	mov	r2, r3
 8017fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8017fe2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017fe8:	e841 2300 	strex	r3, r2, [r1]
 8017fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d1e4      	bne.n	8017fbe <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	69db      	ldr	r3, [r3, #28]
 8017ffa:	f003 0310 	and.w	r3, r3, #16
 8017ffe:	2b10      	cmp	r3, #16
 8018000:	d103      	bne.n	801800a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	2210      	movs	r2, #16
 8018008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018010:	4619      	mov	r1, r3
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f7fe fc0c 	bl	8016830 <HAL_UARTEx_RxEventCallback>
 8018018:	e002      	b.n	8018020 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	f7ea ff48 	bl	8002eb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018020:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8018024:	2b00      	cmp	r3, #0
 8018026:	d006      	beq.n	8018036 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8018028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801802c:	f003 0320 	and.w	r3, r3, #32
 8018030:	2b00      	cmp	r3, #0
 8018032:	f47f aed1 	bne.w	8017dd8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801803c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018040:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8018044:	2b00      	cmp	r3, #0
 8018046:	d049      	beq.n	80180dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801804e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018052:	429a      	cmp	r2, r3
 8018054:	d242      	bcs.n	80180dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	3308      	adds	r3, #8
 801805c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801805e:	6a3b      	ldr	r3, [r7, #32]
 8018060:	e853 3f00 	ldrex	r3, [r3]
 8018064:	61fb      	str	r3, [r7, #28]
   return(result);
 8018066:	69fb      	ldr	r3, [r7, #28]
 8018068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801806c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	3308      	adds	r3, #8
 8018076:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801807a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801807c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801807e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018082:	e841 2300 	strex	r3, r2, [r1]
 8018086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808a:	2b00      	cmp	r3, #0
 801808c:	d1e3      	bne.n	8018056 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	4a16      	ldr	r2, [pc, #88]	; (80180ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8018092:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	e853 3f00 	ldrex	r3, [r3]
 80180a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	f043 0320 	orr.w	r3, r3, #32
 80180a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	461a      	mov	r2, r3
 80180b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80180b6:	61bb      	str	r3, [r7, #24]
 80180b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180ba:	6979      	ldr	r1, [r7, #20]
 80180bc:	69ba      	ldr	r2, [r7, #24]
 80180be:	e841 2300 	strex	r3, r2, [r1]
 80180c2:	613b      	str	r3, [r7, #16]
   return(result);
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d1e4      	bne.n	8018094 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80180ca:	e007      	b.n	80180dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	699a      	ldr	r2, [r3, #24]
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	f042 0208 	orr.w	r2, r2, #8
 80180da:	619a      	str	r2, [r3, #24]
}
 80180dc:	bf00      	nop
 80180de:	37b0      	adds	r7, #176	; 0xb0
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	effffffe 	.word	0xeffffffe
 80180e8:	58000c00 	.word	0x58000c00
 80180ec:	08017a21 	.word	0x08017a21

080180f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b0ae      	sub	sp, #184	; 0xb8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	69db      	ldr	r3, [r3, #28]
 8018108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	689b      	ldr	r3, [r3, #8]
 801811c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018126:	2b22      	cmp	r3, #34	; 0x22
 8018128:	f040 8184 	bne.w	8018434 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018132:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018136:	e127      	b.n	8018388 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801813e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801814a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801814e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8018152:	4013      	ands	r3, r2
 8018154:	b29a      	uxth	r2, r3
 8018156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801815a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018160:	1c9a      	adds	r2, r3, #2
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801816c:	b29b      	uxth	r3, r3
 801816e:	3b01      	subs	r3, #1
 8018170:	b29a      	uxth	r2, r3
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	69db      	ldr	r3, [r3, #28]
 801817e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018186:	f003 0307 	and.w	r3, r3, #7
 801818a:	2b00      	cmp	r3, #0
 801818c:	d053      	beq.n	8018236 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801818e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018192:	f003 0301 	and.w	r3, r3, #1
 8018196:	2b00      	cmp	r3, #0
 8018198:	d011      	beq.n	80181be <UART_RxISR_16BIT_FIFOEN+0xce>
 801819a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801819e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d00b      	beq.n	80181be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2201      	movs	r2, #1
 80181ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181b4:	f043 0201 	orr.w	r2, r3, #1
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80181be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181c2:	f003 0302 	and.w	r3, r3, #2
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d011      	beq.n	80181ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80181ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80181ce:	f003 0301 	and.w	r3, r3, #1
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d00b      	beq.n	80181ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2202      	movs	r2, #2
 80181dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181e4:	f043 0204 	orr.w	r2, r3, #4
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80181ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181f2:	f003 0304 	and.w	r3, r3, #4
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d011      	beq.n	801821e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80181fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80181fe:	f003 0301 	and.w	r3, r3, #1
 8018202:	2b00      	cmp	r3, #0
 8018204:	d00b      	beq.n	801821e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	2204      	movs	r2, #4
 801820c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018214:	f043 0202 	orr.w	r2, r3, #2
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018224:	2b00      	cmp	r3, #0
 8018226:	d006      	beq.n	8018236 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f7fe faf7 	bl	801681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2200      	movs	r2, #0
 8018232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801823c:	b29b      	uxth	r3, r3
 801823e:	2b00      	cmp	r3, #0
 8018240:	f040 80a2 	bne.w	8018388 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801824a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801824c:	e853 3f00 	ldrex	r3, [r3]
 8018250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	461a      	mov	r2, r3
 8018262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018266:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801826a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801826c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801826e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018272:	e841 2300 	strex	r3, r2, [r1]
 8018276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801827a:	2b00      	cmp	r3, #0
 801827c:	d1e2      	bne.n	8018244 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	3308      	adds	r3, #8
 8018284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018288:	e853 3f00 	ldrex	r3, [r3]
 801828c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801828e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018290:	4b6e      	ldr	r3, [pc, #440]	; (801844c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8018292:	4013      	ands	r3, r2
 8018294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	3308      	adds	r3, #8
 801829e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80182a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80182a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80182a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80182aa:	e841 2300 	strex	r3, r2, [r1]
 80182ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80182b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1e3      	bne.n	801827e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2220      	movs	r2, #32
 80182ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2200      	movs	r2, #0
 80182c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2200      	movs	r2, #0
 80182c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	4a60      	ldr	r2, [pc, #384]	; (8018450 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80182d0:	4293      	cmp	r3, r2
 80182d2:	d021      	beq.n	8018318 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	685b      	ldr	r3, [r3, #4]
 80182da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d01a      	beq.n	8018318 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182ea:	e853 3f00 	ldrex	r3, [r3]
 80182ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80182f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80182f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	461a      	mov	r2, r3
 8018300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018304:	65bb      	str	r3, [r7, #88]	; 0x58
 8018306:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801830a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801830c:	e841 2300 	strex	r3, r2, [r1]
 8018310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018314:	2b00      	cmp	r3, #0
 8018316:	d1e4      	bne.n	80182e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801831c:	2b01      	cmp	r3, #1
 801831e:	d130      	bne.n	8018382 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	2200      	movs	r2, #0
 8018324:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801832e:	e853 3f00 	ldrex	r3, [r3]
 8018332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018336:	f023 0310 	bic.w	r3, r3, #16
 801833a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	461a      	mov	r2, r3
 8018344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018348:	647b      	str	r3, [r7, #68]	; 0x44
 801834a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801834c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801834e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018350:	e841 2300 	strex	r3, r2, [r1]
 8018354:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018358:	2b00      	cmp	r3, #0
 801835a:	d1e4      	bne.n	8018326 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	69db      	ldr	r3, [r3, #28]
 8018362:	f003 0310 	and.w	r3, r3, #16
 8018366:	2b10      	cmp	r3, #16
 8018368:	d103      	bne.n	8018372 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2210      	movs	r2, #16
 8018370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018378:	4619      	mov	r1, r3
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f7fe fa58 	bl	8016830 <HAL_UARTEx_RxEventCallback>
 8018380:	e002      	b.n	8018388 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f7ea fd94 	bl	8002eb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018388:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801838c:	2b00      	cmp	r3, #0
 801838e:	d006      	beq.n	801839e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8018390:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018394:	f003 0320 	and.w	r3, r3, #32
 8018398:	2b00      	cmp	r3, #0
 801839a:	f47f aecd 	bne.w	8018138 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80183a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80183a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d049      	beq.n	8018444 <UART_RxISR_16BIT_FIFOEN+0x354>
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80183b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d242      	bcs.n	8018444 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	3308      	adds	r3, #8
 80183c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	e853 3f00 	ldrex	r3, [r3]
 80183cc:	623b      	str	r3, [r7, #32]
   return(result);
 80183ce:	6a3b      	ldr	r3, [r7, #32]
 80183d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80183d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	3308      	adds	r3, #8
 80183de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80183e2:	633a      	str	r2, [r7, #48]	; 0x30
 80183e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183ea:	e841 2300 	strex	r3, r2, [r1]
 80183ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80183f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d1e3      	bne.n	80183be <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	4a16      	ldr	r2, [pc, #88]	; (8018454 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80183fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018402:	693b      	ldr	r3, [r7, #16]
 8018404:	e853 3f00 	ldrex	r3, [r3]
 8018408:	60fb      	str	r3, [r7, #12]
   return(result);
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	f043 0320 	orr.w	r3, r3, #32
 8018410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	461a      	mov	r2, r3
 801841a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801841e:	61fb      	str	r3, [r7, #28]
 8018420:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018422:	69b9      	ldr	r1, [r7, #24]
 8018424:	69fa      	ldr	r2, [r7, #28]
 8018426:	e841 2300 	strex	r3, r2, [r1]
 801842a:	617b      	str	r3, [r7, #20]
   return(result);
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d1e4      	bne.n	80183fc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018432:	e007      	b.n	8018444 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	699a      	ldr	r2, [r3, #24]
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f042 0208 	orr.w	r2, r2, #8
 8018442:	619a      	str	r2, [r3, #24]
}
 8018444:	bf00      	nop
 8018446:	37b8      	adds	r7, #184	; 0xb8
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}
 801844c:	effffffe 	.word	0xeffffffe
 8018450:	58000c00 	.word	0x58000c00
 8018454:	08017bd9 	.word	0x08017bd9

08018458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018458:	b480      	push	{r7}
 801845a:	b083      	sub	sp, #12
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018460:	bf00      	nop
 8018462:	370c      	adds	r7, #12
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr

0801846c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801846c:	b480      	push	{r7}
 801846e:	b083      	sub	sp, #12
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018474:	bf00      	nop
 8018476:	370c      	adds	r7, #12
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018480:	b480      	push	{r7}
 8018482:	b083      	sub	sp, #12
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018488:	bf00      	nop
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018492:	4770      	bx	lr

08018494 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8018494:	b480      	push	{r7}
 8018496:	b089      	sub	sp, #36	; 0x24
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80184a2:	2b01      	cmp	r3, #1
 80184a4:	d101      	bne.n	80184aa <HAL_UARTEx_EnableStopMode+0x16>
 80184a6:	2302      	movs	r3, #2
 80184a8:	e021      	b.n	80184ee <HAL_UARTEx_EnableStopMode+0x5a>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2201      	movs	r2, #1
 80184ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	e853 3f00 	ldrex	r3, [r3]
 80184be:	60bb      	str	r3, [r7, #8]
   return(result);
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	f043 0302 	orr.w	r3, r3, #2
 80184c6:	61fb      	str	r3, [r7, #28]
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	461a      	mov	r2, r3
 80184ce:	69fb      	ldr	r3, [r7, #28]
 80184d0:	61bb      	str	r3, [r7, #24]
 80184d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184d4:	6979      	ldr	r1, [r7, #20]
 80184d6:	69ba      	ldr	r2, [r7, #24]
 80184d8:	e841 2300 	strex	r3, r2, [r1]
 80184dc:	613b      	str	r3, [r7, #16]
   return(result);
 80184de:	693b      	ldr	r3, [r7, #16]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d1e6      	bne.n	80184b2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2200      	movs	r2, #0
 80184e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80184ec:	2300      	movs	r3, #0
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3724      	adds	r7, #36	; 0x24
 80184f2:	46bd      	mov	sp, r7
 80184f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f8:	4770      	bx	lr

080184fa <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80184fa:	b580      	push	{r7, lr}
 80184fc:	b084      	sub	sp, #16
 80184fe:	af00      	add	r7, sp, #0
 8018500:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018508:	2b01      	cmp	r3, #1
 801850a:	d101      	bne.n	8018510 <HAL_UARTEx_EnableFifoMode+0x16>
 801850c:	2302      	movs	r3, #2
 801850e:	e02b      	b.n	8018568 <HAL_UARTEx_EnableFifoMode+0x6e>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2201      	movs	r2, #1
 8018514:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	2224      	movs	r2, #36	; 0x24
 801851c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	f022 0201 	bic.w	r2, r2, #1
 8018536:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801853e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8018546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f000 f8c3 	bl	80186dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	2220      	movs	r2, #32
 801855a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	2200      	movs	r2, #0
 8018562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018566:	2300      	movs	r3, #0
}
 8018568:	4618      	mov	r0, r3
 801856a:	3710      	adds	r7, #16
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018570:	b480      	push	{r7}
 8018572:	b085      	sub	sp, #20
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801857e:	2b01      	cmp	r3, #1
 8018580:	d101      	bne.n	8018586 <HAL_UARTEx_DisableFifoMode+0x16>
 8018582:	2302      	movs	r3, #2
 8018584:	e027      	b.n	80185d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2201      	movs	r2, #1
 801858a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2224      	movs	r2, #36	; 0x24
 8018592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	681a      	ldr	r2, [r3, #0]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	f022 0201 	bic.w	r2, r2, #1
 80185ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80185b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2200      	movs	r2, #0
 80185ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	68fa      	ldr	r2, [r7, #12]
 80185c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2220      	movs	r2, #32
 80185c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2200      	movs	r2, #0
 80185d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3714      	adds	r7, #20
 80185da:	46bd      	mov	sp, r7
 80185dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e0:	4770      	bx	lr

080185e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b084      	sub	sp, #16
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	6078      	str	r0, [r7, #4]
 80185ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80185f2:	2b01      	cmp	r3, #1
 80185f4:	d101      	bne.n	80185fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80185f6:	2302      	movs	r3, #2
 80185f8:	e02d      	b.n	8018656 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2201      	movs	r2, #1
 80185fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2224      	movs	r2, #36	; 0x24
 8018606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	f022 0201 	bic.w	r2, r2, #1
 8018620:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	689b      	ldr	r3, [r3, #8]
 8018628:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	683a      	ldr	r2, [r7, #0]
 8018632:	430a      	orrs	r2, r1
 8018634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f000 f850 	bl	80186dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	68fa      	ldr	r2, [r7, #12]
 8018642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2220      	movs	r2, #32
 8018648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2200      	movs	r2, #0
 8018650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018654:	2300      	movs	r3, #0
}
 8018656:	4618      	mov	r0, r3
 8018658:	3710      	adds	r7, #16
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}

0801865e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801865e:	b580      	push	{r7, lr}
 8018660:	b084      	sub	sp, #16
 8018662:	af00      	add	r7, sp, #0
 8018664:	6078      	str	r0, [r7, #4]
 8018666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801866e:	2b01      	cmp	r3, #1
 8018670:	d101      	bne.n	8018676 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018672:	2302      	movs	r3, #2
 8018674:	e02d      	b.n	80186d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2201      	movs	r2, #1
 801867a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2224      	movs	r2, #36	; 0x24
 8018682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	681a      	ldr	r2, [r3, #0]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	f022 0201 	bic.w	r2, r2, #1
 801869c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	689b      	ldr	r3, [r3, #8]
 80186a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	683a      	ldr	r2, [r7, #0]
 80186ae:	430a      	orrs	r2, r1
 80186b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80186b2:	6878      	ldr	r0, [r7, #4]
 80186b4:	f000 f812 	bl	80186dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	68fa      	ldr	r2, [r7, #12]
 80186be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2220      	movs	r2, #32
 80186c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2200      	movs	r2, #0
 80186cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80186d0:	2300      	movs	r3, #0
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	3710      	adds	r7, #16
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
	...

080186dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80186dc:	b480      	push	{r7}
 80186de:	b085      	sub	sp, #20
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d108      	bne.n	80186fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2201      	movs	r2, #1
 80186f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2201      	movs	r2, #1
 80186f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80186fc:	e031      	b.n	8018762 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80186fe:	2310      	movs	r3, #16
 8018700:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018702:	2310      	movs	r3, #16
 8018704:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	689b      	ldr	r3, [r3, #8]
 801870c:	0e5b      	lsrs	r3, r3, #25
 801870e:	b2db      	uxtb	r3, r3
 8018710:	f003 0307 	and.w	r3, r3, #7
 8018714:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	689b      	ldr	r3, [r3, #8]
 801871c:	0f5b      	lsrs	r3, r3, #29
 801871e:	b2db      	uxtb	r3, r3
 8018720:	f003 0307 	and.w	r3, r3, #7
 8018724:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018726:	7bbb      	ldrb	r3, [r7, #14]
 8018728:	7b3a      	ldrb	r2, [r7, #12]
 801872a:	4911      	ldr	r1, [pc, #68]	; (8018770 <UARTEx_SetNbDataToProcess+0x94>)
 801872c:	5c8a      	ldrb	r2, [r1, r2]
 801872e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018732:	7b3a      	ldrb	r2, [r7, #12]
 8018734:	490f      	ldr	r1, [pc, #60]	; (8018774 <UARTEx_SetNbDataToProcess+0x98>)
 8018736:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018738:	fb93 f3f2 	sdiv	r3, r3, r2
 801873c:	b29a      	uxth	r2, r3
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018744:	7bfb      	ldrb	r3, [r7, #15]
 8018746:	7b7a      	ldrb	r2, [r7, #13]
 8018748:	4909      	ldr	r1, [pc, #36]	; (8018770 <UARTEx_SetNbDataToProcess+0x94>)
 801874a:	5c8a      	ldrb	r2, [r1, r2]
 801874c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018750:	7b7a      	ldrb	r2, [r7, #13]
 8018752:	4908      	ldr	r1, [pc, #32]	; (8018774 <UARTEx_SetNbDataToProcess+0x98>)
 8018754:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018756:	fb93 f3f2 	sdiv	r3, r3, r2
 801875a:	b29a      	uxth	r2, r3
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018762:	bf00      	nop
 8018764:	3714      	adds	r7, #20
 8018766:	46bd      	mov	sp, r7
 8018768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801876c:	4770      	bx	lr
 801876e:	bf00      	nop
 8018770:	0801c1fc 	.word	0x0801c1fc
 8018774:	0801c204 	.word	0x0801c204

08018778 <__NVIC_SetPriority>:
{
 8018778:	b480      	push	{r7}
 801877a:	b083      	sub	sp, #12
 801877c:	af00      	add	r7, sp, #0
 801877e:	4603      	mov	r3, r0
 8018780:	6039      	str	r1, [r7, #0]
 8018782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018788:	2b00      	cmp	r3, #0
 801878a:	db0a      	blt.n	80187a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801878c:	683b      	ldr	r3, [r7, #0]
 801878e:	b2da      	uxtb	r2, r3
 8018790:	490c      	ldr	r1, [pc, #48]	; (80187c4 <__NVIC_SetPriority+0x4c>)
 8018792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018796:	0112      	lsls	r2, r2, #4
 8018798:	b2d2      	uxtb	r2, r2
 801879a:	440b      	add	r3, r1
 801879c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80187a0:	e00a      	b.n	80187b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	4908      	ldr	r1, [pc, #32]	; (80187c8 <__NVIC_SetPriority+0x50>)
 80187a8:	88fb      	ldrh	r3, [r7, #6]
 80187aa:	f003 030f 	and.w	r3, r3, #15
 80187ae:	3b04      	subs	r3, #4
 80187b0:	0112      	lsls	r2, r2, #4
 80187b2:	b2d2      	uxtb	r2, r2
 80187b4:	440b      	add	r3, r1
 80187b6:	761a      	strb	r2, [r3, #24]
}
 80187b8:	bf00      	nop
 80187ba:	370c      	adds	r7, #12
 80187bc:	46bd      	mov	sp, r7
 80187be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c2:	4770      	bx	lr
 80187c4:	e000e100 	.word	0xe000e100
 80187c8:	e000ed00 	.word	0xe000ed00

080187cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80187cc:	b580      	push	{r7, lr}
 80187ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80187d0:	4b05      	ldr	r3, [pc, #20]	; (80187e8 <SysTick_Handler+0x1c>)
 80187d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80187d4:	f002 faa0 	bl	801ad18 <xTaskGetSchedulerState>
 80187d8:	4603      	mov	r3, r0
 80187da:	2b01      	cmp	r3, #1
 80187dc:	d001      	beq.n	80187e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80187de:	f003 f8c3 	bl	801b968 <xPortSysTickHandler>
  }
}
 80187e2:	bf00      	nop
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	e000e010 	.word	0xe000e010

080187ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80187ec:	b580      	push	{r7, lr}
 80187ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80187f0:	2100      	movs	r1, #0
 80187f2:	f06f 0004 	mvn.w	r0, #4
 80187f6:	f7ff ffbf 	bl	8018778 <__NVIC_SetPriority>
#endif
}
 80187fa:	bf00      	nop
 80187fc:	bd80      	pop	{r7, pc}
	...

08018800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018800:	b480      	push	{r7}
 8018802:	b083      	sub	sp, #12
 8018804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018806:	f3ef 8305 	mrs	r3, IPSR
 801880a:	603b      	str	r3, [r7, #0]
  return(result);
 801880c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801880e:	2b00      	cmp	r3, #0
 8018810:	d003      	beq.n	801881a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018812:	f06f 0305 	mvn.w	r3, #5
 8018816:	607b      	str	r3, [r7, #4]
 8018818:	e00c      	b.n	8018834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801881a:	4b0a      	ldr	r3, [pc, #40]	; (8018844 <osKernelInitialize+0x44>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d105      	bne.n	801882e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018822:	4b08      	ldr	r3, [pc, #32]	; (8018844 <osKernelInitialize+0x44>)
 8018824:	2201      	movs	r2, #1
 8018826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018828:	2300      	movs	r3, #0
 801882a:	607b      	str	r3, [r7, #4]
 801882c:	e002      	b.n	8018834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801882e:	f04f 33ff 	mov.w	r3, #4294967295
 8018832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018834:	687b      	ldr	r3, [r7, #4]
}
 8018836:	4618      	mov	r0, r3
 8018838:	370c      	adds	r7, #12
 801883a:	46bd      	mov	sp, r7
 801883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop
 8018844:	24002410 	.word	0x24002410

08018848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801884e:	f3ef 8305 	mrs	r3, IPSR
 8018852:	603b      	str	r3, [r7, #0]
  return(result);
 8018854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018856:	2b00      	cmp	r3, #0
 8018858:	d003      	beq.n	8018862 <osKernelStart+0x1a>
    stat = osErrorISR;
 801885a:	f06f 0305 	mvn.w	r3, #5
 801885e:	607b      	str	r3, [r7, #4]
 8018860:	e010      	b.n	8018884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018862:	4b0b      	ldr	r3, [pc, #44]	; (8018890 <osKernelStart+0x48>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2b01      	cmp	r3, #1
 8018868:	d109      	bne.n	801887e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801886a:	f7ff ffbf 	bl	80187ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801886e:	4b08      	ldr	r3, [pc, #32]	; (8018890 <osKernelStart+0x48>)
 8018870:	2202      	movs	r2, #2
 8018872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018874:	f001 fd54 	bl	801a320 <vTaskStartScheduler>
      stat = osOK;
 8018878:	2300      	movs	r3, #0
 801887a:	607b      	str	r3, [r7, #4]
 801887c:	e002      	b.n	8018884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801887e:	f04f 33ff 	mov.w	r3, #4294967295
 8018882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018884:	687b      	ldr	r3, [r7, #4]
}
 8018886:	4618      	mov	r0, r3
 8018888:	3708      	adds	r7, #8
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	24002410 	.word	0x24002410

08018894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018894:	b580      	push	{r7, lr}
 8018896:	b08e      	sub	sp, #56	; 0x38
 8018898:	af04      	add	r7, sp, #16
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80188a0:	2300      	movs	r3, #0
 80188a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80188a4:	f3ef 8305 	mrs	r3, IPSR
 80188a8:	617b      	str	r3, [r7, #20]
  return(result);
 80188aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d17e      	bne.n	80189ae <osThreadNew+0x11a>
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d07b      	beq.n	80189ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80188b6:	2380      	movs	r3, #128	; 0x80
 80188b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80188ba:	2318      	movs	r3, #24
 80188bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80188be:	2300      	movs	r3, #0
 80188c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80188c2:	f04f 33ff 	mov.w	r3, #4294967295
 80188c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d045      	beq.n	801895a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d002      	beq.n	80188dc <osThreadNew+0x48>
        name = attr->name;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	699b      	ldr	r3, [r3, #24]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d002      	beq.n	80188ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	699b      	ldr	r3, [r3, #24]
 80188e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80188ea:	69fb      	ldr	r3, [r7, #28]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d008      	beq.n	8018902 <osThreadNew+0x6e>
 80188f0:	69fb      	ldr	r3, [r7, #28]
 80188f2:	2b38      	cmp	r3, #56	; 0x38
 80188f4:	d805      	bhi.n	8018902 <osThreadNew+0x6e>
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	f003 0301 	and.w	r3, r3, #1
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d001      	beq.n	8018906 <osThreadNew+0x72>
        return (NULL);
 8018902:	2300      	movs	r3, #0
 8018904:	e054      	b.n	80189b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	695b      	ldr	r3, [r3, #20]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d003      	beq.n	8018916 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	695b      	ldr	r3, [r3, #20]
 8018912:	089b      	lsrs	r3, r3, #2
 8018914:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	689b      	ldr	r3, [r3, #8]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d00e      	beq.n	801893c <osThreadNew+0xa8>
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	68db      	ldr	r3, [r3, #12]
 8018922:	2b5b      	cmp	r3, #91	; 0x5b
 8018924:	d90a      	bls.n	801893c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801892a:	2b00      	cmp	r3, #0
 801892c:	d006      	beq.n	801893c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	695b      	ldr	r3, [r3, #20]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d002      	beq.n	801893c <osThreadNew+0xa8>
        mem = 1;
 8018936:	2301      	movs	r3, #1
 8018938:	61bb      	str	r3, [r7, #24]
 801893a:	e010      	b.n	801895e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	689b      	ldr	r3, [r3, #8]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d10c      	bne.n	801895e <osThreadNew+0xca>
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	68db      	ldr	r3, [r3, #12]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d108      	bne.n	801895e <osThreadNew+0xca>
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	691b      	ldr	r3, [r3, #16]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d104      	bne.n	801895e <osThreadNew+0xca>
          mem = 0;
 8018954:	2300      	movs	r3, #0
 8018956:	61bb      	str	r3, [r7, #24]
 8018958:	e001      	b.n	801895e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801895a:	2300      	movs	r3, #0
 801895c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801895e:	69bb      	ldr	r3, [r7, #24]
 8018960:	2b01      	cmp	r3, #1
 8018962:	d110      	bne.n	8018986 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018968:	687a      	ldr	r2, [r7, #4]
 801896a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801896c:	9202      	str	r2, [sp, #8]
 801896e:	9301      	str	r3, [sp, #4]
 8018970:	69fb      	ldr	r3, [r7, #28]
 8018972:	9300      	str	r3, [sp, #0]
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	6a3a      	ldr	r2, [r7, #32]
 8018978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801897a:	68f8      	ldr	r0, [r7, #12]
 801897c:	f001 f9f4 	bl	8019d68 <xTaskCreateStatic>
 8018980:	4603      	mov	r3, r0
 8018982:	613b      	str	r3, [r7, #16]
 8018984:	e013      	b.n	80189ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018986:	69bb      	ldr	r3, [r7, #24]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d110      	bne.n	80189ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801898c:	6a3b      	ldr	r3, [r7, #32]
 801898e:	b29a      	uxth	r2, r3
 8018990:	f107 0310 	add.w	r3, r7, #16
 8018994:	9301      	str	r3, [sp, #4]
 8018996:	69fb      	ldr	r3, [r7, #28]
 8018998:	9300      	str	r3, [sp, #0]
 801899a:	68bb      	ldr	r3, [r7, #8]
 801899c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801899e:	68f8      	ldr	r0, [r7, #12]
 80189a0:	f001 fa3f 	bl	8019e22 <xTaskCreate>
 80189a4:	4603      	mov	r3, r0
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d001      	beq.n	80189ae <osThreadNew+0x11a>
            hTask = NULL;
 80189aa:	2300      	movs	r3, #0
 80189ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80189ae:	693b      	ldr	r3, [r7, #16]
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	3728      	adds	r7, #40	; 0x28
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}

080189b8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80189b8:	b480      	push	{r7}
 80189ba:	b083      	sub	sp, #12
 80189bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80189be:	f3ef 8305 	mrs	r3, IPSR
 80189c2:	603b      	str	r3, [r7, #0]
  return(result);
 80189c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d003      	beq.n	80189d2 <osThreadYield+0x1a>
    stat = osErrorISR;
 80189ca:	f06f 0305 	mvn.w	r3, #5
 80189ce:	607b      	str	r3, [r7, #4]
 80189d0:	e009      	b.n	80189e6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80189d2:	2300      	movs	r3, #0
 80189d4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80189d6:	4b07      	ldr	r3, [pc, #28]	; (80189f4 <osThreadYield+0x3c>)
 80189d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189dc:	601a      	str	r2, [r3, #0]
 80189de:	f3bf 8f4f 	dsb	sy
 80189e2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80189e6:	687b      	ldr	r3, [r7, #4]
}
 80189e8:	4618      	mov	r0, r3
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr
 80189f4:	e000ed04 	.word	0xe000ed04

080189f8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b086      	sub	sp, #24
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018a04:	f3ef 8305 	mrs	r3, IPSR
 8018a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a0a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d003      	beq.n	8018a18 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8018a10:	f06f 0305 	mvn.w	r3, #5
 8018a14:	617b      	str	r3, [r7, #20]
 8018a16:	e00b      	b.n	8018a30 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8018a18:	693b      	ldr	r3, [r7, #16]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d103      	bne.n	8018a26 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8018a1e:	f06f 0303 	mvn.w	r3, #3
 8018a22:	617b      	str	r3, [r7, #20]
 8018a24:	e004      	b.n	8018a30 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8018a26:	2300      	movs	r3, #0
 8018a28:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8018a2a:	6938      	ldr	r0, [r7, #16]
 8018a2c:	f001 fb72 	bl	801a114 <vTaskSuspend>
  }

  return (stat);
 8018a30:	697b      	ldr	r3, [r7, #20]
}
 8018a32:	4618      	mov	r0, r3
 8018a34:	3718      	adds	r7, #24
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}

08018a3a <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8018a3a:	b580      	push	{r7, lr}
 8018a3c:	b086      	sub	sp, #24
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018a46:	f3ef 8305 	mrs	r3, IPSR
 8018a4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a4c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d003      	beq.n	8018a5a <osThreadResume+0x20>
    stat = osErrorISR;
 8018a52:	f06f 0305 	mvn.w	r3, #5
 8018a56:	617b      	str	r3, [r7, #20]
 8018a58:	e00b      	b.n	8018a72 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8018a5a:	693b      	ldr	r3, [r7, #16]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d103      	bne.n	8018a68 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8018a60:	f06f 0303 	mvn.w	r3, #3
 8018a64:	617b      	str	r3, [r7, #20]
 8018a66:	e004      	b.n	8018a72 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8018a6c:	6938      	ldr	r0, [r7, #16]
 8018a6e:	f001 fbf9 	bl	801a264 <vTaskResume>
  }

  return (stat);
 8018a72:	697b      	ldr	r3, [r7, #20]
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3718      	adds	r7, #24
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}

08018a7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b084      	sub	sp, #16
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018a84:	f3ef 8305 	mrs	r3, IPSR
 8018a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d003      	beq.n	8018a98 <osDelay+0x1c>
    stat = osErrorISR;
 8018a90:	f06f 0305 	mvn.w	r3, #5
 8018a94:	60fb      	str	r3, [r7, #12]
 8018a96:	e007      	b.n	8018aa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d002      	beq.n	8018aa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018aa2:	6878      	ldr	r0, [r7, #4]
 8018aa4:	f001 fb02 	bl	801a0ac <vTaskDelay>
    }
  }

  return (stat);
 8018aa8:	68fb      	ldr	r3, [r7, #12]
}
 8018aaa:	4618      	mov	r0, r3
 8018aac:	3710      	adds	r7, #16
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	bd80      	pop	{r7, pc}

08018ab2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8018ab2:	b580      	push	{r7, lr}
 8018ab4:	b086      	sub	sp, #24
 8018ab6:	af00      	add	r7, sp, #0
 8018ab8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8018aba:	2300      	movs	r3, #0
 8018abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018abe:	f3ef 8305 	mrs	r3, IPSR
 8018ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ac4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d12d      	bne.n	8018b26 <osEventFlagsNew+0x74>
    mem = -1;
 8018aca:	f04f 33ff 	mov.w	r3, #4294967295
 8018ace:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d015      	beq.n	8018b02 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	689b      	ldr	r3, [r3, #8]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d006      	beq.n	8018aec <osEventFlagsNew+0x3a>
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	68db      	ldr	r3, [r3, #12]
 8018ae2:	2b1f      	cmp	r3, #31
 8018ae4:	d902      	bls.n	8018aec <osEventFlagsNew+0x3a>
        mem = 1;
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	613b      	str	r3, [r7, #16]
 8018aea:	e00c      	b.n	8018b06 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	689b      	ldr	r3, [r3, #8]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d108      	bne.n	8018b06 <osEventFlagsNew+0x54>
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	68db      	ldr	r3, [r3, #12]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d104      	bne.n	8018b06 <osEventFlagsNew+0x54>
          mem = 0;
 8018afc:	2300      	movs	r3, #0
 8018afe:	613b      	str	r3, [r7, #16]
 8018b00:	e001      	b.n	8018b06 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8018b02:	2300      	movs	r3, #0
 8018b04:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8018b06:	693b      	ldr	r3, [r7, #16]
 8018b08:	2b01      	cmp	r3, #1
 8018b0a:	d106      	bne.n	8018b1a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	689b      	ldr	r3, [r3, #8]
 8018b10:	4618      	mov	r0, r3
 8018b12:	f000 f91d 	bl	8018d50 <xEventGroupCreateStatic>
 8018b16:	6178      	str	r0, [r7, #20]
 8018b18:	e005      	b.n	8018b26 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d102      	bne.n	8018b26 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8018b20:	f000 f94d 	bl	8018dbe <xEventGroupCreate>
 8018b24:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8018b26:	697b      	ldr	r3, [r7, #20]
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3718      	adds	r7, #24
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b086      	sub	sp, #24
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018b3e:	693b      	ldr	r3, [r7, #16]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d004      	beq.n	8018b4e <osEventFlagsSet+0x1e>
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d003      	beq.n	8018b56 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018b4e:	f06f 0303 	mvn.w	r3, #3
 8018b52:	617b      	str	r3, [r7, #20]
 8018b54:	e028      	b.n	8018ba8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b56:	f3ef 8305 	mrs	r3, IPSR
 8018b5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b5c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d01d      	beq.n	8018b9e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8018b62:	2300      	movs	r3, #0
 8018b64:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8018b66:	f107 0308 	add.w	r3, r7, #8
 8018b6a:	461a      	mov	r2, r3
 8018b6c:	6839      	ldr	r1, [r7, #0]
 8018b6e:	6938      	ldr	r0, [r7, #16]
 8018b70:	f000 fb46 	bl	8019200 <xEventGroupSetBitsFromISR>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d103      	bne.n	8018b82 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8018b7a:	f06f 0302 	mvn.w	r3, #2
 8018b7e:	617b      	str	r3, [r7, #20]
 8018b80:	e012      	b.n	8018ba8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d00d      	beq.n	8018ba8 <osEventFlagsSet+0x78>
 8018b8c:	4b09      	ldr	r3, [pc, #36]	; (8018bb4 <osEventFlagsSet+0x84>)
 8018b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b92:	601a      	str	r2, [r3, #0]
 8018b94:	f3bf 8f4f 	dsb	sy
 8018b98:	f3bf 8f6f 	isb	sy
 8018b9c:	e004      	b.n	8018ba8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8018b9e:	6839      	ldr	r1, [r7, #0]
 8018ba0:	6938      	ldr	r0, [r7, #16]
 8018ba2:	f000 fa65 	bl	8019070 <xEventGroupSetBits>
 8018ba6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018ba8:	697b      	ldr	r3, [r7, #20]
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3718      	adds	r7, #24
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	e000ed04 	.word	0xe000ed04

08018bb8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b086      	sub	sp, #24
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d004      	beq.n	8018bd6 <osEventFlagsClear+0x1e>
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d003      	beq.n	8018bde <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018bd6:	f06f 0303 	mvn.w	r3, #3
 8018bda:	617b      	str	r3, [r7, #20]
 8018bdc:	e019      	b.n	8018c12 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018bde:	f3ef 8305 	mrs	r3, IPSR
 8018be2:	60fb      	str	r3, [r7, #12]
  return(result);
 8018be4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d00e      	beq.n	8018c08 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8018bea:	6938      	ldr	r0, [r7, #16]
 8018bec:	f000 fa1c 	bl	8019028 <xEventGroupGetBitsFromISR>
 8018bf0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8018bf2:	6839      	ldr	r1, [r7, #0]
 8018bf4:	6938      	ldr	r0, [r7, #16]
 8018bf6:	f000 fa03 	bl	8019000 <xEventGroupClearBitsFromISR>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d108      	bne.n	8018c12 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8018c00:	f06f 0302 	mvn.w	r3, #2
 8018c04:	617b      	str	r3, [r7, #20]
 8018c06:	e004      	b.n	8018c12 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8018c08:	6839      	ldr	r1, [r7, #0]
 8018c0a:	6938      	ldr	r0, [r7, #16]
 8018c0c:	f000 f9c0 	bl	8018f90 <xEventGroupClearBits>
 8018c10:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018c12:	697b      	ldr	r3, [r7, #20]
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3718      	adds	r7, #24
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}

08018c1c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b08c      	sub	sp, #48	; 0x30
 8018c20:	af02      	add	r7, sp, #8
 8018c22:	60f8      	str	r0, [r7, #12]
 8018c24:	60b9      	str	r1, [r7, #8]
 8018c26:	607a      	str	r2, [r7, #4]
 8018c28:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018c2e:	69bb      	ldr	r3, [r7, #24]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d004      	beq.n	8018c3e <osEventFlagsWait+0x22>
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d003      	beq.n	8018c46 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8018c3e:	f06f 0303 	mvn.w	r3, #3
 8018c42:	61fb      	str	r3, [r7, #28]
 8018c44:	e04b      	b.n	8018cde <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018c46:	f3ef 8305 	mrs	r3, IPSR
 8018c4a:	617b      	str	r3, [r7, #20]
  return(result);
 8018c4c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d003      	beq.n	8018c5a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8018c52:	f06f 0305 	mvn.w	r3, #5
 8018c56:	61fb      	str	r3, [r7, #28]
 8018c58:	e041      	b.n	8018cde <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f003 0301 	and.w	r3, r3, #1
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d002      	beq.n	8018c6a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8018c64:	2301      	movs	r3, #1
 8018c66:	627b      	str	r3, [r7, #36]	; 0x24
 8018c68:	e001      	b.n	8018c6e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	f003 0302 	and.w	r3, r3, #2
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d002      	beq.n	8018c7e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	623b      	str	r3, [r7, #32]
 8018c7c:	e001      	b.n	8018c82 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8018c7e:	2301      	movs	r3, #1
 8018c80:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	9300      	str	r3, [sp, #0]
 8018c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c88:	6a3a      	ldr	r2, [r7, #32]
 8018c8a:	68b9      	ldr	r1, [r7, #8]
 8018c8c:	69b8      	ldr	r0, [r7, #24]
 8018c8e:	f000 f8b1 	bl	8018df4 <xEventGroupWaitBits>
 8018c92:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f003 0301 	and.w	r3, r3, #1
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d010      	beq.n	8018cc0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8018c9e:	68ba      	ldr	r2, [r7, #8]
 8018ca0:	69fb      	ldr	r3, [r7, #28]
 8018ca2:	4013      	ands	r3, r2
 8018ca4:	68ba      	ldr	r2, [r7, #8]
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d019      	beq.n	8018cde <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d003      	beq.n	8018cb8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8018cb0:	f06f 0301 	mvn.w	r3, #1
 8018cb4:	61fb      	str	r3, [r7, #28]
 8018cb6:	e012      	b.n	8018cde <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018cb8:	f06f 0302 	mvn.w	r3, #2
 8018cbc:	61fb      	str	r3, [r7, #28]
 8018cbe:	e00e      	b.n	8018cde <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8018cc0:	68ba      	ldr	r2, [r7, #8]
 8018cc2:	69fb      	ldr	r3, [r7, #28]
 8018cc4:	4013      	ands	r3, r2
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d109      	bne.n	8018cde <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d003      	beq.n	8018cd8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8018cd0:	f06f 0301 	mvn.w	r3, #1
 8018cd4:	61fb      	str	r3, [r7, #28]
 8018cd6:	e002      	b.n	8018cde <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018cd8:	f06f 0302 	mvn.w	r3, #2
 8018cdc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8018cde:	69fb      	ldr	r3, [r7, #28]
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3728      	adds	r7, #40	; 0x28
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018ce8:	b480      	push	{r7}
 8018cea:	b085      	sub	sp, #20
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	60f8      	str	r0, [r7, #12]
 8018cf0:	60b9      	str	r1, [r7, #8]
 8018cf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	4a07      	ldr	r2, [pc, #28]	; (8018d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8018cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018cfa:	68bb      	ldr	r3, [r7, #8]
 8018cfc:	4a06      	ldr	r2, [pc, #24]	; (8018d18 <vApplicationGetIdleTaskMemory+0x30>)
 8018cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	2280      	movs	r2, #128	; 0x80
 8018d04:	601a      	str	r2, [r3, #0]
}
 8018d06:	bf00      	nop
 8018d08:	3714      	adds	r7, #20
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr
 8018d12:	bf00      	nop
 8018d14:	24002414 	.word	0x24002414
 8018d18:	24002470 	.word	0x24002470

08018d1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	4a07      	ldr	r2, [pc, #28]	; (8018d48 <vApplicationGetTimerTaskMemory+0x2c>)
 8018d2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018d2e:	68bb      	ldr	r3, [r7, #8]
 8018d30:	4a06      	ldr	r2, [pc, #24]	; (8018d4c <vApplicationGetTimerTaskMemory+0x30>)
 8018d32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d3a:	601a      	str	r2, [r3, #0]
}
 8018d3c:	bf00      	nop
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr
 8018d48:	24002670 	.word	0x24002670
 8018d4c:	240026cc 	.word	0x240026cc

08018d50 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b086      	sub	sp, #24
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d10a      	bne.n	8018d74 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d62:	f383 8811 	msr	BASEPRI, r3
 8018d66:	f3bf 8f6f 	isb	sy
 8018d6a:	f3bf 8f4f 	dsb	sy
 8018d6e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018d70:	bf00      	nop
 8018d72:	e7fe      	b.n	8018d72 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8018d74:	2320      	movs	r3, #32
 8018d76:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8018d78:	68bb      	ldr	r3, [r7, #8]
 8018d7a:	2b20      	cmp	r3, #32
 8018d7c:	d00a      	beq.n	8018d94 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8018d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d82:	f383 8811 	msr	BASEPRI, r3
 8018d86:	f3bf 8f6f 	isb	sy
 8018d8a:	f3bf 8f4f 	dsb	sy
 8018d8e:	60fb      	str	r3, [r7, #12]
}
 8018d90:	bf00      	nop
 8018d92:	e7fe      	b.n	8018d92 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8018d98:	697b      	ldr	r3, [r7, #20]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d00a      	beq.n	8018db4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2200      	movs	r2, #0
 8018da2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	3304      	adds	r3, #4
 8018da8:	4618      	mov	r0, r3
 8018daa:	f000 fa3d 	bl	8019228 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	2201      	movs	r2, #1
 8018db2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8018db4:	697b      	ldr	r3, [r7, #20]
	}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}

08018dbe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8018dbe:	b580      	push	{r7, lr}
 8018dc0:	b082      	sub	sp, #8
 8018dc2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8018dc4:	2020      	movs	r0, #32
 8018dc6:	f002 fe5f 	bl	801ba88 <pvPortMalloc>
 8018dca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d00a      	beq.n	8018de8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	3304      	adds	r3, #4
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f000 fa23 	bl	8019228 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2200      	movs	r2, #0
 8018de6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8018de8:	687b      	ldr	r3, [r7, #4]
	}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3708      	adds	r7, #8
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
	...

08018df4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b090      	sub	sp, #64	; 0x40
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
 8018e00:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d10a      	bne.n	8018e2a <xEventGroupWaitBits+0x36>
	__asm volatile
 8018e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e18:	f383 8811 	msr	BASEPRI, r3
 8018e1c:	f3bf 8f6f 	isb	sy
 8018e20:	f3bf 8f4f 	dsb	sy
 8018e24:	623b      	str	r3, [r7, #32]
}
 8018e26:	bf00      	nop
 8018e28:	e7fe      	b.n	8018e28 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018e2a:	68bb      	ldr	r3, [r7, #8]
 8018e2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d00a      	beq.n	8018e4a <xEventGroupWaitBits+0x56>
	__asm volatile
 8018e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e38:	f383 8811 	msr	BASEPRI, r3
 8018e3c:	f3bf 8f6f 	isb	sy
 8018e40:	f3bf 8f4f 	dsb	sy
 8018e44:	61fb      	str	r3, [r7, #28]
}
 8018e46:	bf00      	nop
 8018e48:	e7fe      	b.n	8018e48 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d10a      	bne.n	8018e66 <xEventGroupWaitBits+0x72>
	__asm volatile
 8018e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e54:	f383 8811 	msr	BASEPRI, r3
 8018e58:	f3bf 8f6f 	isb	sy
 8018e5c:	f3bf 8f4f 	dsb	sy
 8018e60:	61bb      	str	r3, [r7, #24]
}
 8018e62:	bf00      	nop
 8018e64:	e7fe      	b.n	8018e64 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018e66:	f001 ff57 	bl	801ad18 <xTaskGetSchedulerState>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d102      	bne.n	8018e76 <xEventGroupWaitBits+0x82>
 8018e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d101      	bne.n	8018e7a <xEventGroupWaitBits+0x86>
 8018e76:	2301      	movs	r3, #1
 8018e78:	e000      	b.n	8018e7c <xEventGroupWaitBits+0x88>
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d10a      	bne.n	8018e96 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8018e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e84:	f383 8811 	msr	BASEPRI, r3
 8018e88:	f3bf 8f6f 	isb	sy
 8018e8c:	f3bf 8f4f 	dsb	sy
 8018e90:	617b      	str	r3, [r7, #20]
}
 8018e92:	bf00      	nop
 8018e94:	e7fe      	b.n	8018e94 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8018e96:	f001 faa9 	bl	801a3ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8018e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8018ea0:	683a      	ldr	r2, [r7, #0]
 8018ea2:	68b9      	ldr	r1, [r7, #8]
 8018ea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018ea6:	f000 f988 	bl	80191ba <prvTestWaitCondition>
 8018eaa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8018eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d00e      	beq.n	8018ed0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8018eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d028      	beq.n	8018f12 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8018ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ec2:	681a      	ldr	r2, [r3, #0]
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	43db      	mvns	r3, r3
 8018ec8:	401a      	ands	r2, r3
 8018eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ecc:	601a      	str	r2, [r3, #0]
 8018ece:	e020      	b.n	8018f12 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8018ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d104      	bne.n	8018ee0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8018ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8018eda:	2301      	movs	r3, #1
 8018edc:	633b      	str	r3, [r7, #48]	; 0x30
 8018ede:	e018      	b.n	8018f12 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d003      	beq.n	8018eee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8018ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018eec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d003      	beq.n	8018efc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8018ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018efa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8018efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018efe:	1d18      	adds	r0, r3, #4
 8018f00:	68ba      	ldr	r2, [r7, #8]
 8018f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f04:	4313      	orrs	r3, r2
 8018f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018f08:	4619      	mov	r1, r3
 8018f0a:	f001 fc7d 	bl	801a808 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8018f12:	f001 fa79 	bl	801a408 <xTaskResumeAll>
 8018f16:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8018f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d031      	beq.n	8018f82 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8018f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d107      	bne.n	8018f34 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8018f24:	4b19      	ldr	r3, [pc, #100]	; (8018f8c <xEventGroupWaitBits+0x198>)
 8018f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f2a:	601a      	str	r2, [r3, #0]
 8018f2c:	f3bf 8f4f 	dsb	sy
 8018f30:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8018f34:	f001 ff7c 	bl	801ae30 <uxTaskResetEventItemValue>
 8018f38:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8018f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d11a      	bne.n	8018f7a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8018f44:	f002 fc7e 	bl	801b844 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8018f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8018f4e:	683a      	ldr	r2, [r7, #0]
 8018f50:	68b9      	ldr	r1, [r7, #8]
 8018f52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018f54:	f000 f931 	bl	80191ba <prvTestWaitCondition>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d009      	beq.n	8018f72 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d006      	beq.n	8018f72 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8018f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f66:	681a      	ldr	r2, [r3, #0]
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	43db      	mvns	r3, r3
 8018f6c:	401a      	ands	r2, r3
 8018f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f70:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8018f72:	2301      	movs	r3, #1
 8018f74:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8018f76:	f002 fc95 	bl	801b8a4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8018f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018f80:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8018f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3740      	adds	r7, #64	; 0x40
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	e000ed04 	.word	0xe000ed04

08018f90 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d10a      	bne.n	8018fba <xEventGroupClearBits+0x2a>
	__asm volatile
 8018fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa8:	f383 8811 	msr	BASEPRI, r3
 8018fac:	f3bf 8f6f 	isb	sy
 8018fb0:	f3bf 8f4f 	dsb	sy
 8018fb4:	60fb      	str	r3, [r7, #12]
}
 8018fb6:	bf00      	nop
 8018fb8:	e7fe      	b.n	8018fb8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d00a      	beq.n	8018fda <xEventGroupClearBits+0x4a>
	__asm volatile
 8018fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fc8:	f383 8811 	msr	BASEPRI, r3
 8018fcc:	f3bf 8f6f 	isb	sy
 8018fd0:	f3bf 8f4f 	dsb	sy
 8018fd4:	60bb      	str	r3, [r7, #8]
}
 8018fd6:	bf00      	nop
 8018fd8:	e7fe      	b.n	8018fd8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8018fda:	f002 fc33 	bl	801b844 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	681a      	ldr	r2, [r3, #0]
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	43db      	mvns	r3, r3
 8018fec:	401a      	ands	r2, r3
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8018ff2:	f002 fc57 	bl	801b8a4 <vPortExitCritical>

	return uxReturn;
 8018ff6:	693b      	ldr	r3, [r7, #16]
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3718      	adds	r7, #24
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}

08019000 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801900a:	2300      	movs	r3, #0
 801900c:	683a      	ldr	r2, [r7, #0]
 801900e:	6879      	ldr	r1, [r7, #4]
 8019010:	4804      	ldr	r0, [pc, #16]	; (8019024 <xEventGroupClearBitsFromISR+0x24>)
 8019012:	f002 fac7 	bl	801b5a4 <xTimerPendFunctionCallFromISR>
 8019016:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8019018:	68fb      	ldr	r3, [r7, #12]
	}
 801901a:	4618      	mov	r0, r3
 801901c:	3710      	adds	r7, #16
 801901e:	46bd      	mov	sp, r7
 8019020:	bd80      	pop	{r7, pc}
 8019022:	bf00      	nop
 8019024:	080191a1 	.word	0x080191a1

08019028 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8019028:	b480      	push	{r7}
 801902a:	b089      	sub	sp, #36	; 0x24
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019034:	f3ef 8211 	mrs	r2, BASEPRI
 8019038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801903c:	f383 8811 	msr	BASEPRI, r3
 8019040:	f3bf 8f6f 	isb	sy
 8019044:	f3bf 8f4f 	dsb	sy
 8019048:	60fa      	str	r2, [r7, #12]
 801904a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801904c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801904e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8019050:	69fb      	ldr	r3, [r7, #28]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	617b      	str	r3, [r7, #20]
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801905a:	693b      	ldr	r3, [r7, #16]
 801905c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019060:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8019062:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8019064:	4618      	mov	r0, r3
 8019066:	3724      	adds	r7, #36	; 0x24
 8019068:	46bd      	mov	sp, r7
 801906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906e:	4770      	bx	lr

08019070 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b08e      	sub	sp, #56	; 0x38
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801907a:	2300      	movs	r3, #0
 801907c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8019082:	2300      	movs	r3, #0
 8019084:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d10a      	bne.n	80190a2 <xEventGroupSetBits+0x32>
	__asm volatile
 801908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019090:	f383 8811 	msr	BASEPRI, r3
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	f3bf 8f4f 	dsb	sy
 801909c:	613b      	str	r3, [r7, #16]
}
 801909e:	bf00      	nop
 80190a0:	e7fe      	b.n	80190a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d00a      	beq.n	80190c2 <xEventGroupSetBits+0x52>
	__asm volatile
 80190ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190b0:	f383 8811 	msr	BASEPRI, r3
 80190b4:	f3bf 8f6f 	isb	sy
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	60fb      	str	r3, [r7, #12]
}
 80190be:	bf00      	nop
 80190c0:	e7fe      	b.n	80190c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80190c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c4:	3304      	adds	r3, #4
 80190c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80190c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190ca:	3308      	adds	r3, #8
 80190cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80190ce:	f001 f98d 	bl	801a3ec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80190d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d4:	68db      	ldr	r3, [r3, #12]
 80190d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80190d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190da:	681a      	ldr	r2, [r3, #0]
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	431a      	orrs	r2, r3
 80190e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80190e4:	e03c      	b.n	8019160 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80190e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80190ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80190f2:	2300      	movs	r3, #0
 80190f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80190f6:	69bb      	ldr	r3, [r7, #24]
 80190f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80190fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80190fe:	69bb      	ldr	r3, [r7, #24]
 8019100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019104:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801910c:	2b00      	cmp	r3, #0
 801910e:	d108      	bne.n	8019122 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8019110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019112:	681a      	ldr	r2, [r3, #0]
 8019114:	69bb      	ldr	r3, [r7, #24]
 8019116:	4013      	ands	r3, r2
 8019118:	2b00      	cmp	r3, #0
 801911a:	d00b      	beq.n	8019134 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801911c:	2301      	movs	r3, #1
 801911e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019120:	e008      	b.n	8019134 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8019122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019124:	681a      	ldr	r2, [r3, #0]
 8019126:	69bb      	ldr	r3, [r7, #24]
 8019128:	4013      	ands	r3, r2
 801912a:	69ba      	ldr	r2, [r7, #24]
 801912c:	429a      	cmp	r2, r3
 801912e:	d101      	bne.n	8019134 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8019130:	2301      	movs	r3, #1
 8019132:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8019134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019136:	2b00      	cmp	r3, #0
 8019138:	d010      	beq.n	801915c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019140:	2b00      	cmp	r3, #0
 8019142:	d003      	beq.n	801914c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8019144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019146:	69bb      	ldr	r3, [r7, #24]
 8019148:	4313      	orrs	r3, r2
 801914a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019154:	4619      	mov	r1, r3
 8019156:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019158:	f001 fc22 	bl	801a9a0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801915c:	69fb      	ldr	r3, [r7, #28]
 801915e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8019160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019162:	6a3b      	ldr	r3, [r7, #32]
 8019164:	429a      	cmp	r2, r3
 8019166:	d1be      	bne.n	80190e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8019168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801916e:	43db      	mvns	r3, r3
 8019170:	401a      	ands	r2, r3
 8019172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019174:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8019176:	f001 f947 	bl	801a408 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	681b      	ldr	r3, [r3, #0]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3738      	adds	r7, #56	; 0x38
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b082      	sub	sp, #8
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
 801918e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8019190:	6839      	ldr	r1, [r7, #0]
 8019192:	6878      	ldr	r0, [r7, #4]
 8019194:	f7ff ff6c 	bl	8019070 <xEventGroupSetBits>
}
 8019198:	bf00      	nop
 801919a:	3708      	adds	r7, #8
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}

080191a0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b082      	sub	sp, #8
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80191aa:	6839      	ldr	r1, [r7, #0]
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f7ff feef 	bl	8018f90 <xEventGroupClearBits>
}
 80191b2:	bf00      	nop
 80191b4:	3708      	adds	r7, #8
 80191b6:	46bd      	mov	sp, r7
 80191b8:	bd80      	pop	{r7, pc}

080191ba <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80191ba:	b480      	push	{r7}
 80191bc:	b087      	sub	sp, #28
 80191be:	af00      	add	r7, sp, #0
 80191c0:	60f8      	str	r0, [r7, #12]
 80191c2:	60b9      	str	r1, [r7, #8]
 80191c4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80191c6:	2300      	movs	r3, #0
 80191c8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d107      	bne.n	80191e0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	68bb      	ldr	r3, [r7, #8]
 80191d4:	4013      	ands	r3, r2
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d00a      	beq.n	80191f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80191da:	2301      	movs	r3, #1
 80191dc:	617b      	str	r3, [r7, #20]
 80191de:	e007      	b.n	80191f0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80191e0:	68fa      	ldr	r2, [r7, #12]
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	4013      	ands	r3, r2
 80191e6:	68ba      	ldr	r2, [r7, #8]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	d101      	bne.n	80191f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80191ec:	2301      	movs	r3, #1
 80191ee:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80191f0:	697b      	ldr	r3, [r7, #20]
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	371c      	adds	r7, #28
 80191f6:	46bd      	mov	sp, r7
 80191f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fc:	4770      	bx	lr
	...

08019200 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019200:	b580      	push	{r7, lr}
 8019202:	b086      	sub	sp, #24
 8019204:	af00      	add	r7, sp, #0
 8019206:	60f8      	str	r0, [r7, #12]
 8019208:	60b9      	str	r1, [r7, #8]
 801920a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	68ba      	ldr	r2, [r7, #8]
 8019210:	68f9      	ldr	r1, [r7, #12]
 8019212:	4804      	ldr	r0, [pc, #16]	; (8019224 <xEventGroupSetBitsFromISR+0x24>)
 8019214:	f002 f9c6 	bl	801b5a4 <xTimerPendFunctionCallFromISR>
 8019218:	6178      	str	r0, [r7, #20]

		return xReturn;
 801921a:	697b      	ldr	r3, [r7, #20]
	}
 801921c:	4618      	mov	r0, r3
 801921e:	3718      	adds	r7, #24
 8019220:	46bd      	mov	sp, r7
 8019222:	bd80      	pop	{r7, pc}
 8019224:	08019187 	.word	0x08019187

08019228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019228:	b480      	push	{r7}
 801922a:	b083      	sub	sp, #12
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	f103 0208 	add.w	r2, r3, #8
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f04f 32ff 	mov.w	r2, #4294967295
 8019240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	f103 0208 	add.w	r2, r3, #8
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f103 0208 	add.w	r2, r3, #8
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2200      	movs	r2, #0
 801925a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801925c:	bf00      	nop
 801925e:	370c      	adds	r7, #12
 8019260:	46bd      	mov	sp, r7
 8019262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019266:	4770      	bx	lr

08019268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019268:	b480      	push	{r7}
 801926a:	b083      	sub	sp, #12
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	2200      	movs	r2, #0
 8019274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019276:	bf00      	nop
 8019278:	370c      	adds	r7, #12
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr

08019282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019282:	b480      	push	{r7}
 8019284:	b085      	sub	sp, #20
 8019286:	af00      	add	r7, sp, #0
 8019288:	6078      	str	r0, [r7, #4]
 801928a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	685b      	ldr	r3, [r3, #4]
 8019290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	68fa      	ldr	r2, [r7, #12]
 8019296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	689a      	ldr	r2, [r3, #8]
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	689b      	ldr	r3, [r3, #8]
 80192a4:	683a      	ldr	r2, [r7, #0]
 80192a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	683a      	ldr	r2, [r7, #0]
 80192ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	1c5a      	adds	r2, r3, #1
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	601a      	str	r2, [r3, #0]
}
 80192be:	bf00      	nop
 80192c0:	3714      	adds	r7, #20
 80192c2:	46bd      	mov	sp, r7
 80192c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c8:	4770      	bx	lr

080192ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80192ca:	b480      	push	{r7}
 80192cc:	b085      	sub	sp, #20
 80192ce:	af00      	add	r7, sp, #0
 80192d0:	6078      	str	r0, [r7, #4]
 80192d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192e0:	d103      	bne.n	80192ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	691b      	ldr	r3, [r3, #16]
 80192e6:	60fb      	str	r3, [r7, #12]
 80192e8:	e00c      	b.n	8019304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	3308      	adds	r3, #8
 80192ee:	60fb      	str	r3, [r7, #12]
 80192f0:	e002      	b.n	80192f8 <vListInsert+0x2e>
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	60fb      	str	r3, [r7, #12]
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	685b      	ldr	r3, [r3, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	68ba      	ldr	r2, [r7, #8]
 8019300:	429a      	cmp	r2, r3
 8019302:	d2f6      	bcs.n	80192f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	685a      	ldr	r2, [r3, #4]
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	683a      	ldr	r2, [r7, #0]
 8019312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	68fa      	ldr	r2, [r7, #12]
 8019318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	683a      	ldr	r2, [r7, #0]
 801931e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	1c5a      	adds	r2, r3, #1
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	601a      	str	r2, [r3, #0]
}
 8019330:	bf00      	nop
 8019332:	3714      	adds	r7, #20
 8019334:	46bd      	mov	sp, r7
 8019336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933a:	4770      	bx	lr

0801933c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801933c:	b480      	push	{r7}
 801933e:	b085      	sub	sp, #20
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	691b      	ldr	r3, [r3, #16]
 8019348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	687a      	ldr	r2, [r7, #4]
 8019350:	6892      	ldr	r2, [r2, #8]
 8019352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	689b      	ldr	r3, [r3, #8]
 8019358:	687a      	ldr	r2, [r7, #4]
 801935a:	6852      	ldr	r2, [r2, #4]
 801935c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	685b      	ldr	r3, [r3, #4]
 8019362:	687a      	ldr	r2, [r7, #4]
 8019364:	429a      	cmp	r2, r3
 8019366:	d103      	bne.n	8019370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	689a      	ldr	r2, [r3, #8]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2200      	movs	r2, #0
 8019374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	1e5a      	subs	r2, r3, #1
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	681b      	ldr	r3, [r3, #0]
}
 8019384:	4618      	mov	r0, r3
 8019386:	3714      	adds	r7, #20
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b084      	sub	sp, #16
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d10a      	bne.n	80193ba <xQueueGenericReset+0x2a>
	__asm volatile
 80193a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193a8:	f383 8811 	msr	BASEPRI, r3
 80193ac:	f3bf 8f6f 	isb	sy
 80193b0:	f3bf 8f4f 	dsb	sy
 80193b4:	60bb      	str	r3, [r7, #8]
}
 80193b6:	bf00      	nop
 80193b8:	e7fe      	b.n	80193b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80193ba:	f002 fa43 	bl	801b844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	681a      	ldr	r2, [r3, #0]
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193c6:	68f9      	ldr	r1, [r7, #12]
 80193c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80193ca:	fb01 f303 	mul.w	r3, r1, r3
 80193ce:	441a      	add	r2, r3
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	2200      	movs	r2, #0
 80193d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	681a      	ldr	r2, [r3, #0]
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681a      	ldr	r2, [r3, #0]
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193ea:	3b01      	subs	r3, #1
 80193ec:	68f9      	ldr	r1, [r7, #12]
 80193ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80193f0:	fb01 f303 	mul.w	r3, r1, r3
 80193f4:	441a      	add	r2, r3
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	22ff      	movs	r2, #255	; 0xff
 80193fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	22ff      	movs	r2, #255	; 0xff
 8019406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d114      	bne.n	801943a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	691b      	ldr	r3, [r3, #16]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d01a      	beq.n	801944e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	3310      	adds	r3, #16
 801941c:	4618      	mov	r0, r3
 801941e:	f001 fa5b 	bl	801a8d8 <xTaskRemoveFromEventList>
 8019422:	4603      	mov	r3, r0
 8019424:	2b00      	cmp	r3, #0
 8019426:	d012      	beq.n	801944e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019428:	4b0c      	ldr	r3, [pc, #48]	; (801945c <xQueueGenericReset+0xcc>)
 801942a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801942e:	601a      	str	r2, [r3, #0]
 8019430:	f3bf 8f4f 	dsb	sy
 8019434:	f3bf 8f6f 	isb	sy
 8019438:	e009      	b.n	801944e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	3310      	adds	r3, #16
 801943e:	4618      	mov	r0, r3
 8019440:	f7ff fef2 	bl	8019228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	3324      	adds	r3, #36	; 0x24
 8019448:	4618      	mov	r0, r3
 801944a:	f7ff feed 	bl	8019228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801944e:	f002 fa29 	bl	801b8a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019452:	2301      	movs	r3, #1
}
 8019454:	4618      	mov	r0, r3
 8019456:	3710      	adds	r7, #16
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	e000ed04 	.word	0xe000ed04

08019460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019460:	b580      	push	{r7, lr}
 8019462:	b08e      	sub	sp, #56	; 0x38
 8019464:	af02      	add	r7, sp, #8
 8019466:	60f8      	str	r0, [r7, #12]
 8019468:	60b9      	str	r1, [r7, #8]
 801946a:	607a      	str	r2, [r7, #4]
 801946c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d10a      	bne.n	801948a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019478:	f383 8811 	msr	BASEPRI, r3
 801947c:	f3bf 8f6f 	isb	sy
 8019480:	f3bf 8f4f 	dsb	sy
 8019484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019486:	bf00      	nop
 8019488:	e7fe      	b.n	8019488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d10a      	bne.n	80194a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019494:	f383 8811 	msr	BASEPRI, r3
 8019498:	f3bf 8f6f 	isb	sy
 801949c:	f3bf 8f4f 	dsb	sy
 80194a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80194a2:	bf00      	nop
 80194a4:	e7fe      	b.n	80194a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d002      	beq.n	80194b2 <xQueueGenericCreateStatic+0x52>
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d001      	beq.n	80194b6 <xQueueGenericCreateStatic+0x56>
 80194b2:	2301      	movs	r3, #1
 80194b4:	e000      	b.n	80194b8 <xQueueGenericCreateStatic+0x58>
 80194b6:	2300      	movs	r3, #0
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d10a      	bne.n	80194d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80194bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194c0:	f383 8811 	msr	BASEPRI, r3
 80194c4:	f3bf 8f6f 	isb	sy
 80194c8:	f3bf 8f4f 	dsb	sy
 80194cc:	623b      	str	r3, [r7, #32]
}
 80194ce:	bf00      	nop
 80194d0:	e7fe      	b.n	80194d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d102      	bne.n	80194de <xQueueGenericCreateStatic+0x7e>
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d101      	bne.n	80194e2 <xQueueGenericCreateStatic+0x82>
 80194de:	2301      	movs	r3, #1
 80194e0:	e000      	b.n	80194e4 <xQueueGenericCreateStatic+0x84>
 80194e2:	2300      	movs	r3, #0
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d10a      	bne.n	80194fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80194e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ec:	f383 8811 	msr	BASEPRI, r3
 80194f0:	f3bf 8f6f 	isb	sy
 80194f4:	f3bf 8f4f 	dsb	sy
 80194f8:	61fb      	str	r3, [r7, #28]
}
 80194fa:	bf00      	nop
 80194fc:	e7fe      	b.n	80194fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80194fe:	2350      	movs	r3, #80	; 0x50
 8019500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	2b50      	cmp	r3, #80	; 0x50
 8019506:	d00a      	beq.n	801951e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8019508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801950c:	f383 8811 	msr	BASEPRI, r3
 8019510:	f3bf 8f6f 	isb	sy
 8019514:	f3bf 8f4f 	dsb	sy
 8019518:	61bb      	str	r3, [r7, #24]
}
 801951a:	bf00      	nop
 801951c:	e7fe      	b.n	801951c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801951e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019526:	2b00      	cmp	r3, #0
 8019528:	d00d      	beq.n	8019546 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952c:	2201      	movs	r2, #1
 801952e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019538:	9300      	str	r3, [sp, #0]
 801953a:	4613      	mov	r3, r2
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	68b9      	ldr	r1, [r7, #8]
 8019540:	68f8      	ldr	r0, [r7, #12]
 8019542:	f000 f805 	bl	8019550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019548:	4618      	mov	r0, r3
 801954a:	3730      	adds	r7, #48	; 0x30
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}

08019550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b084      	sub	sp, #16
 8019554:	af00      	add	r7, sp, #0
 8019556:	60f8      	str	r0, [r7, #12]
 8019558:	60b9      	str	r1, [r7, #8]
 801955a:	607a      	str	r2, [r7, #4]
 801955c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d103      	bne.n	801956c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019564:	69bb      	ldr	r3, [r7, #24]
 8019566:	69ba      	ldr	r2, [r7, #24]
 8019568:	601a      	str	r2, [r3, #0]
 801956a:	e002      	b.n	8019572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801956c:	69bb      	ldr	r3, [r7, #24]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019572:	69bb      	ldr	r3, [r7, #24]
 8019574:	68fa      	ldr	r2, [r7, #12]
 8019576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019578:	69bb      	ldr	r3, [r7, #24]
 801957a:	68ba      	ldr	r2, [r7, #8]
 801957c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801957e:	2101      	movs	r1, #1
 8019580:	69b8      	ldr	r0, [r7, #24]
 8019582:	f7ff ff05 	bl	8019390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019586:	69bb      	ldr	r3, [r7, #24]
 8019588:	78fa      	ldrb	r2, [r7, #3]
 801958a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801958e:	bf00      	nop
 8019590:	3710      	adds	r7, #16
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
	...

08019598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08e      	sub	sp, #56	; 0x38
 801959c:	af00      	add	r7, sp, #0
 801959e:	60f8      	str	r0, [r7, #12]
 80195a0:	60b9      	str	r1, [r7, #8]
 80195a2:	607a      	str	r2, [r7, #4]
 80195a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80195a6:	2300      	movs	r3, #0
 80195a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80195ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d10a      	bne.n	80195ca <xQueueGenericSend+0x32>
	__asm volatile
 80195b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195b8:	f383 8811 	msr	BASEPRI, r3
 80195bc:	f3bf 8f6f 	isb	sy
 80195c0:	f3bf 8f4f 	dsb	sy
 80195c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80195c6:	bf00      	nop
 80195c8:	e7fe      	b.n	80195c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d103      	bne.n	80195d8 <xQueueGenericSend+0x40>
 80195d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d101      	bne.n	80195dc <xQueueGenericSend+0x44>
 80195d8:	2301      	movs	r3, #1
 80195da:	e000      	b.n	80195de <xQueueGenericSend+0x46>
 80195dc:	2300      	movs	r3, #0
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d10a      	bne.n	80195f8 <xQueueGenericSend+0x60>
	__asm volatile
 80195e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e6:	f383 8811 	msr	BASEPRI, r3
 80195ea:	f3bf 8f6f 	isb	sy
 80195ee:	f3bf 8f4f 	dsb	sy
 80195f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80195f4:	bf00      	nop
 80195f6:	e7fe      	b.n	80195f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	2b02      	cmp	r3, #2
 80195fc:	d103      	bne.n	8019606 <xQueueGenericSend+0x6e>
 80195fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019602:	2b01      	cmp	r3, #1
 8019604:	d101      	bne.n	801960a <xQueueGenericSend+0x72>
 8019606:	2301      	movs	r3, #1
 8019608:	e000      	b.n	801960c <xQueueGenericSend+0x74>
 801960a:	2300      	movs	r3, #0
 801960c:	2b00      	cmp	r3, #0
 801960e:	d10a      	bne.n	8019626 <xQueueGenericSend+0x8e>
	__asm volatile
 8019610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019614:	f383 8811 	msr	BASEPRI, r3
 8019618:	f3bf 8f6f 	isb	sy
 801961c:	f3bf 8f4f 	dsb	sy
 8019620:	623b      	str	r3, [r7, #32]
}
 8019622:	bf00      	nop
 8019624:	e7fe      	b.n	8019624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019626:	f001 fb77 	bl	801ad18 <xTaskGetSchedulerState>
 801962a:	4603      	mov	r3, r0
 801962c:	2b00      	cmp	r3, #0
 801962e:	d102      	bne.n	8019636 <xQueueGenericSend+0x9e>
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d101      	bne.n	801963a <xQueueGenericSend+0xa2>
 8019636:	2301      	movs	r3, #1
 8019638:	e000      	b.n	801963c <xQueueGenericSend+0xa4>
 801963a:	2300      	movs	r3, #0
 801963c:	2b00      	cmp	r3, #0
 801963e:	d10a      	bne.n	8019656 <xQueueGenericSend+0xbe>
	__asm volatile
 8019640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019644:	f383 8811 	msr	BASEPRI, r3
 8019648:	f3bf 8f6f 	isb	sy
 801964c:	f3bf 8f4f 	dsb	sy
 8019650:	61fb      	str	r3, [r7, #28]
}
 8019652:	bf00      	nop
 8019654:	e7fe      	b.n	8019654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019656:	f002 f8f5 	bl	801b844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019662:	429a      	cmp	r2, r3
 8019664:	d302      	bcc.n	801966c <xQueueGenericSend+0xd4>
 8019666:	683b      	ldr	r3, [r7, #0]
 8019668:	2b02      	cmp	r3, #2
 801966a:	d129      	bne.n	80196c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801966c:	683a      	ldr	r2, [r7, #0]
 801966e:	68b9      	ldr	r1, [r7, #8]
 8019670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019672:	f000 fa0b 	bl	8019a8c <prvCopyDataToQueue>
 8019676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801967c:	2b00      	cmp	r3, #0
 801967e:	d010      	beq.n	80196a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019682:	3324      	adds	r3, #36	; 0x24
 8019684:	4618      	mov	r0, r3
 8019686:	f001 f927 	bl	801a8d8 <xTaskRemoveFromEventList>
 801968a:	4603      	mov	r3, r0
 801968c:	2b00      	cmp	r3, #0
 801968e:	d013      	beq.n	80196b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019690:	4b3f      	ldr	r3, [pc, #252]	; (8019790 <xQueueGenericSend+0x1f8>)
 8019692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019696:	601a      	str	r2, [r3, #0]
 8019698:	f3bf 8f4f 	dsb	sy
 801969c:	f3bf 8f6f 	isb	sy
 80196a0:	e00a      	b.n	80196b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80196a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d007      	beq.n	80196b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80196a8:	4b39      	ldr	r3, [pc, #228]	; (8019790 <xQueueGenericSend+0x1f8>)
 80196aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196ae:	601a      	str	r2, [r3, #0]
 80196b0:	f3bf 8f4f 	dsb	sy
 80196b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80196b8:	f002 f8f4 	bl	801b8a4 <vPortExitCritical>
				return pdPASS;
 80196bc:	2301      	movs	r3, #1
 80196be:	e063      	b.n	8019788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d103      	bne.n	80196ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80196c6:	f002 f8ed 	bl	801b8a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80196ca:	2300      	movs	r3, #0
 80196cc:	e05c      	b.n	8019788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80196ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d106      	bne.n	80196e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80196d4:	f107 0314 	add.w	r3, r7, #20
 80196d8:	4618      	mov	r0, r3
 80196da:	f001 f9c3 	bl	801aa64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80196de:	2301      	movs	r3, #1
 80196e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80196e2:	f002 f8df 	bl	801b8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80196e6:	f000 fe81 	bl	801a3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80196ea:	f002 f8ab 	bl	801b844 <vPortEnterCritical>
 80196ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80196f4:	b25b      	sxtb	r3, r3
 80196f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196fa:	d103      	bne.n	8019704 <xQueueGenericSend+0x16c>
 80196fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196fe:	2200      	movs	r2, #0
 8019700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801970a:	b25b      	sxtb	r3, r3
 801970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019710:	d103      	bne.n	801971a <xQueueGenericSend+0x182>
 8019712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019714:	2200      	movs	r2, #0
 8019716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801971a:	f002 f8c3 	bl	801b8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801971e:	1d3a      	adds	r2, r7, #4
 8019720:	f107 0314 	add.w	r3, r7, #20
 8019724:	4611      	mov	r1, r2
 8019726:	4618      	mov	r0, r3
 8019728:	f001 f9b2 	bl	801aa90 <xTaskCheckForTimeOut>
 801972c:	4603      	mov	r3, r0
 801972e:	2b00      	cmp	r3, #0
 8019730:	d124      	bne.n	801977c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019734:	f000 faa2 	bl	8019c7c <prvIsQueueFull>
 8019738:	4603      	mov	r3, r0
 801973a:	2b00      	cmp	r3, #0
 801973c:	d018      	beq.n	8019770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019740:	3310      	adds	r3, #16
 8019742:	687a      	ldr	r2, [r7, #4]
 8019744:	4611      	mov	r1, r2
 8019746:	4618      	mov	r0, r3
 8019748:	f001 f83a 	bl	801a7c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801974c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801974e:	f000 fa2d 	bl	8019bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019752:	f000 fe59 	bl	801a408 <xTaskResumeAll>
 8019756:	4603      	mov	r3, r0
 8019758:	2b00      	cmp	r3, #0
 801975a:	f47f af7c 	bne.w	8019656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801975e:	4b0c      	ldr	r3, [pc, #48]	; (8019790 <xQueueGenericSend+0x1f8>)
 8019760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019764:	601a      	str	r2, [r3, #0]
 8019766:	f3bf 8f4f 	dsb	sy
 801976a:	f3bf 8f6f 	isb	sy
 801976e:	e772      	b.n	8019656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019772:	f000 fa1b 	bl	8019bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019776:	f000 fe47 	bl	801a408 <xTaskResumeAll>
 801977a:	e76c      	b.n	8019656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801977c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801977e:	f000 fa15 	bl	8019bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019782:	f000 fe41 	bl	801a408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019788:	4618      	mov	r0, r3
 801978a:	3738      	adds	r7, #56	; 0x38
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}
 8019790:	e000ed04 	.word	0xe000ed04

08019794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b090      	sub	sp, #64	; 0x40
 8019798:	af00      	add	r7, sp, #0
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	607a      	str	r2, [r7, #4]
 80197a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80197a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d10a      	bne.n	80197c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80197ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b0:	f383 8811 	msr	BASEPRI, r3
 80197b4:	f3bf 8f6f 	isb	sy
 80197b8:	f3bf 8f4f 	dsb	sy
 80197bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80197be:	bf00      	nop
 80197c0:	e7fe      	b.n	80197c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d103      	bne.n	80197d0 <xQueueGenericSendFromISR+0x3c>
 80197c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d101      	bne.n	80197d4 <xQueueGenericSendFromISR+0x40>
 80197d0:	2301      	movs	r3, #1
 80197d2:	e000      	b.n	80197d6 <xQueueGenericSendFromISR+0x42>
 80197d4:	2300      	movs	r3, #0
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d10a      	bne.n	80197f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80197da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197de:	f383 8811 	msr	BASEPRI, r3
 80197e2:	f3bf 8f6f 	isb	sy
 80197e6:	f3bf 8f4f 	dsb	sy
 80197ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80197ec:	bf00      	nop
 80197ee:	e7fe      	b.n	80197ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80197f0:	683b      	ldr	r3, [r7, #0]
 80197f2:	2b02      	cmp	r3, #2
 80197f4:	d103      	bne.n	80197fe <xQueueGenericSendFromISR+0x6a>
 80197f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197fa:	2b01      	cmp	r3, #1
 80197fc:	d101      	bne.n	8019802 <xQueueGenericSendFromISR+0x6e>
 80197fe:	2301      	movs	r3, #1
 8019800:	e000      	b.n	8019804 <xQueueGenericSendFromISR+0x70>
 8019802:	2300      	movs	r3, #0
 8019804:	2b00      	cmp	r3, #0
 8019806:	d10a      	bne.n	801981e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801980c:	f383 8811 	msr	BASEPRI, r3
 8019810:	f3bf 8f6f 	isb	sy
 8019814:	f3bf 8f4f 	dsb	sy
 8019818:	623b      	str	r3, [r7, #32]
}
 801981a:	bf00      	nop
 801981c:	e7fe      	b.n	801981c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801981e:	f002 f8f3 	bl	801ba08 <vPortValidateInterruptPriority>
	__asm volatile
 8019822:	f3ef 8211 	mrs	r2, BASEPRI
 8019826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801982a:	f383 8811 	msr	BASEPRI, r3
 801982e:	f3bf 8f6f 	isb	sy
 8019832:	f3bf 8f4f 	dsb	sy
 8019836:	61fa      	str	r2, [r7, #28]
 8019838:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801983a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801983c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019846:	429a      	cmp	r2, r3
 8019848:	d302      	bcc.n	8019850 <xQueueGenericSendFromISR+0xbc>
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	2b02      	cmp	r3, #2
 801984e:	d12f      	bne.n	80198b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801985e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019860:	683a      	ldr	r2, [r7, #0]
 8019862:	68b9      	ldr	r1, [r7, #8]
 8019864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019866:	f000 f911 	bl	8019a8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801986a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801986e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019872:	d112      	bne.n	801989a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019878:	2b00      	cmp	r3, #0
 801987a:	d016      	beq.n	80198aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801987e:	3324      	adds	r3, #36	; 0x24
 8019880:	4618      	mov	r0, r3
 8019882:	f001 f829 	bl	801a8d8 <xTaskRemoveFromEventList>
 8019886:	4603      	mov	r3, r0
 8019888:	2b00      	cmp	r3, #0
 801988a:	d00e      	beq.n	80198aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d00b      	beq.n	80198aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2201      	movs	r2, #1
 8019896:	601a      	str	r2, [r3, #0]
 8019898:	e007      	b.n	80198aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801989a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801989e:	3301      	adds	r3, #1
 80198a0:	b2db      	uxtb	r3, r3
 80198a2:	b25a      	sxtb	r2, r3
 80198a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80198aa:	2301      	movs	r3, #1
 80198ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80198ae:	e001      	b.n	80198b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80198b0:	2300      	movs	r3, #0
 80198b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80198b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198b6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	f383 8811 	msr	BASEPRI, r3
}
 80198be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80198c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	3740      	adds	r7, #64	; 0x40
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}
	...

080198cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b08c      	sub	sp, #48	; 0x30
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80198d8:	2300      	movs	r3, #0
 80198da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80198e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d10a      	bne.n	80198fc <xQueueReceive+0x30>
	__asm volatile
 80198e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198ea:	f383 8811 	msr	BASEPRI, r3
 80198ee:	f3bf 8f6f 	isb	sy
 80198f2:	f3bf 8f4f 	dsb	sy
 80198f6:	623b      	str	r3, [r7, #32]
}
 80198f8:	bf00      	nop
 80198fa:	e7fe      	b.n	80198fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d103      	bne.n	801990a <xQueueReceive+0x3e>
 8019902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019906:	2b00      	cmp	r3, #0
 8019908:	d101      	bne.n	801990e <xQueueReceive+0x42>
 801990a:	2301      	movs	r3, #1
 801990c:	e000      	b.n	8019910 <xQueueReceive+0x44>
 801990e:	2300      	movs	r3, #0
 8019910:	2b00      	cmp	r3, #0
 8019912:	d10a      	bne.n	801992a <xQueueReceive+0x5e>
	__asm volatile
 8019914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019918:	f383 8811 	msr	BASEPRI, r3
 801991c:	f3bf 8f6f 	isb	sy
 8019920:	f3bf 8f4f 	dsb	sy
 8019924:	61fb      	str	r3, [r7, #28]
}
 8019926:	bf00      	nop
 8019928:	e7fe      	b.n	8019928 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801992a:	f001 f9f5 	bl	801ad18 <xTaskGetSchedulerState>
 801992e:	4603      	mov	r3, r0
 8019930:	2b00      	cmp	r3, #0
 8019932:	d102      	bne.n	801993a <xQueueReceive+0x6e>
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d101      	bne.n	801993e <xQueueReceive+0x72>
 801993a:	2301      	movs	r3, #1
 801993c:	e000      	b.n	8019940 <xQueueReceive+0x74>
 801993e:	2300      	movs	r3, #0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d10a      	bne.n	801995a <xQueueReceive+0x8e>
	__asm volatile
 8019944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019948:	f383 8811 	msr	BASEPRI, r3
 801994c:	f3bf 8f6f 	isb	sy
 8019950:	f3bf 8f4f 	dsb	sy
 8019954:	61bb      	str	r3, [r7, #24]
}
 8019956:	bf00      	nop
 8019958:	e7fe      	b.n	8019958 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801995a:	f001 ff73 	bl	801b844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019962:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019966:	2b00      	cmp	r3, #0
 8019968:	d01f      	beq.n	80199aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801996a:	68b9      	ldr	r1, [r7, #8]
 801996c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801996e:	f000 f8f7 	bl	8019b60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019974:	1e5a      	subs	r2, r3, #1
 8019976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019978:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801997c:	691b      	ldr	r3, [r3, #16]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d00f      	beq.n	80199a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019984:	3310      	adds	r3, #16
 8019986:	4618      	mov	r0, r3
 8019988:	f000 ffa6 	bl	801a8d8 <xTaskRemoveFromEventList>
 801998c:	4603      	mov	r3, r0
 801998e:	2b00      	cmp	r3, #0
 8019990:	d007      	beq.n	80199a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019992:	4b3d      	ldr	r3, [pc, #244]	; (8019a88 <xQueueReceive+0x1bc>)
 8019994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019998:	601a      	str	r2, [r3, #0]
 801999a:	f3bf 8f4f 	dsb	sy
 801999e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80199a2:	f001 ff7f 	bl	801b8a4 <vPortExitCritical>
				return pdPASS;
 80199a6:	2301      	movs	r3, #1
 80199a8:	e069      	b.n	8019a7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d103      	bne.n	80199b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80199b0:	f001 ff78 	bl	801b8a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80199b4:	2300      	movs	r3, #0
 80199b6:	e062      	b.n	8019a7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80199b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d106      	bne.n	80199cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80199be:	f107 0310 	add.w	r3, r7, #16
 80199c2:	4618      	mov	r0, r3
 80199c4:	f001 f84e 	bl	801aa64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80199c8:	2301      	movs	r3, #1
 80199ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80199cc:	f001 ff6a 	bl	801b8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80199d0:	f000 fd0c 	bl	801a3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80199d4:	f001 ff36 	bl	801b844 <vPortEnterCritical>
 80199d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80199de:	b25b      	sxtb	r3, r3
 80199e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199e4:	d103      	bne.n	80199ee <xQueueReceive+0x122>
 80199e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e8:	2200      	movs	r2, #0
 80199ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80199ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80199f4:	b25b      	sxtb	r3, r3
 80199f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199fa:	d103      	bne.n	8019a04 <xQueueReceive+0x138>
 80199fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199fe:	2200      	movs	r2, #0
 8019a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019a04:	f001 ff4e 	bl	801b8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019a08:	1d3a      	adds	r2, r7, #4
 8019a0a:	f107 0310 	add.w	r3, r7, #16
 8019a0e:	4611      	mov	r1, r2
 8019a10:	4618      	mov	r0, r3
 8019a12:	f001 f83d 	bl	801aa90 <xTaskCheckForTimeOut>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d123      	bne.n	8019a64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a1e:	f000 f917 	bl	8019c50 <prvIsQueueEmpty>
 8019a22:	4603      	mov	r3, r0
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d017      	beq.n	8019a58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a2a:	3324      	adds	r3, #36	; 0x24
 8019a2c:	687a      	ldr	r2, [r7, #4]
 8019a2e:	4611      	mov	r1, r2
 8019a30:	4618      	mov	r0, r3
 8019a32:	f000 fec5 	bl	801a7c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a38:	f000 f8b8 	bl	8019bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019a3c:	f000 fce4 	bl	801a408 <xTaskResumeAll>
 8019a40:	4603      	mov	r3, r0
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d189      	bne.n	801995a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8019a46:	4b10      	ldr	r3, [pc, #64]	; (8019a88 <xQueueReceive+0x1bc>)
 8019a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a4c:	601a      	str	r2, [r3, #0]
 8019a4e:	f3bf 8f4f 	dsb	sy
 8019a52:	f3bf 8f6f 	isb	sy
 8019a56:	e780      	b.n	801995a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a5a:	f000 f8a7 	bl	8019bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019a5e:	f000 fcd3 	bl	801a408 <xTaskResumeAll>
 8019a62:	e77a      	b.n	801995a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a66:	f000 f8a1 	bl	8019bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019a6a:	f000 fccd 	bl	801a408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a70:	f000 f8ee 	bl	8019c50 <prvIsQueueEmpty>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	f43f af6f 	beq.w	801995a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019a7e:	4618      	mov	r0, r3
 8019a80:	3730      	adds	r7, #48	; 0x30
 8019a82:	46bd      	mov	sp, r7
 8019a84:	bd80      	pop	{r7, pc}
 8019a86:	bf00      	nop
 8019a88:	e000ed04 	.word	0xe000ed04

08019a8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b086      	sub	sp, #24
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	60f8      	str	r0, [r7, #12]
 8019a94:	60b9      	str	r1, [r7, #8]
 8019a96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d10d      	bne.n	8019ac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d14d      	bne.n	8019b4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	689b      	ldr	r3, [r3, #8]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f001 f94c 	bl	801ad54 <xTaskPriorityDisinherit>
 8019abc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	609a      	str	r2, [r3, #8]
 8019ac4:	e043      	b.n	8019b4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d119      	bne.n	8019b00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	6858      	ldr	r0, [r3, #4]
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ad4:	461a      	mov	r2, r3
 8019ad6:	68b9      	ldr	r1, [r7, #8]
 8019ad8:	f002 f9e4 	bl	801bea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	685a      	ldr	r2, [r3, #4]
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ae4:	441a      	add	r2, r3
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	685a      	ldr	r2, [r3, #4]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	689b      	ldr	r3, [r3, #8]
 8019af2:	429a      	cmp	r2, r3
 8019af4:	d32b      	bcc.n	8019b4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	681a      	ldr	r2, [r3, #0]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	605a      	str	r2, [r3, #4]
 8019afe:	e026      	b.n	8019b4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	68d8      	ldr	r0, [r3, #12]
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b08:	461a      	mov	r2, r3
 8019b0a:	68b9      	ldr	r1, [r7, #8]
 8019b0c:	f002 f9ca 	bl	801bea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	68da      	ldr	r2, [r3, #12]
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b18:	425b      	negs	r3, r3
 8019b1a:	441a      	add	r2, r3
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	68da      	ldr	r2, [r3, #12]
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d207      	bcs.n	8019b3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	689a      	ldr	r2, [r3, #8]
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b34:	425b      	negs	r3, r3
 8019b36:	441a      	add	r2, r3
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2b02      	cmp	r3, #2
 8019b40:	d105      	bne.n	8019b4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d002      	beq.n	8019b4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	3b01      	subs	r3, #1
 8019b4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	1c5a      	adds	r2, r3, #1
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019b56:	697b      	ldr	r3, [r7, #20]
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3718      	adds	r7, #24
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}

08019b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d018      	beq.n	8019ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	68da      	ldr	r2, [r3, #12]
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b7a:	441a      	add	r2, r3
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	68da      	ldr	r2, [r3, #12]
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	689b      	ldr	r3, [r3, #8]
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d303      	bcc.n	8019b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681a      	ldr	r2, [r3, #0]
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	68d9      	ldr	r1, [r3, #12]
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b9c:	461a      	mov	r2, r3
 8019b9e:	6838      	ldr	r0, [r7, #0]
 8019ba0:	f002 f980 	bl	801bea4 <memcpy>
	}
}
 8019ba4:	bf00      	nop
 8019ba6:	3708      	adds	r7, #8
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019bb4:	f001 fe46 	bl	801b844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019bbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019bc0:	e011      	b.n	8019be6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d012      	beq.n	8019bf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	3324      	adds	r3, #36	; 0x24
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f000 fe82 	bl	801a8d8 <xTaskRemoveFromEventList>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d001      	beq.n	8019bde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019bda:	f000 ffbb 	bl	801ab54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019bde:	7bfb      	ldrb	r3, [r7, #15]
 8019be0:	3b01      	subs	r3, #1
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	dce9      	bgt.n	8019bc2 <prvUnlockQueue+0x16>
 8019bee:	e000      	b.n	8019bf2 <prvUnlockQueue+0x46>
					break;
 8019bf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	22ff      	movs	r2, #255	; 0xff
 8019bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019bfa:	f001 fe53 	bl	801b8a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019bfe:	f001 fe21 	bl	801b844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019c08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019c0a:	e011      	b.n	8019c30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	691b      	ldr	r3, [r3, #16]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d012      	beq.n	8019c3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	3310      	adds	r3, #16
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f000 fe5d 	bl	801a8d8 <xTaskRemoveFromEventList>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d001      	beq.n	8019c28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019c24:	f000 ff96 	bl	801ab54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019c28:	7bbb      	ldrb	r3, [r7, #14]
 8019c2a:	3b01      	subs	r3, #1
 8019c2c:	b2db      	uxtb	r3, r3
 8019c2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	dce9      	bgt.n	8019c0c <prvUnlockQueue+0x60>
 8019c38:	e000      	b.n	8019c3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019c3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	22ff      	movs	r2, #255	; 0xff
 8019c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019c44:	f001 fe2e 	bl	801b8a4 <vPortExitCritical>
}
 8019c48:	bf00      	nop
 8019c4a:	3710      	adds	r7, #16
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}

08019c50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b084      	sub	sp, #16
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019c58:	f001 fdf4 	bl	801b844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d102      	bne.n	8019c6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019c64:	2301      	movs	r3, #1
 8019c66:	60fb      	str	r3, [r7, #12]
 8019c68:	e001      	b.n	8019c6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019c6e:	f001 fe19 	bl	801b8a4 <vPortExitCritical>

	return xReturn;
 8019c72:	68fb      	ldr	r3, [r7, #12]
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3710      	adds	r7, #16
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b084      	sub	sp, #16
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019c84:	f001 fdde 	bl	801b844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d102      	bne.n	8019c9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019c94:	2301      	movs	r3, #1
 8019c96:	60fb      	str	r3, [r7, #12]
 8019c98:	e001      	b.n	8019c9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019c9e:	f001 fe01 	bl	801b8a4 <vPortExitCritical>

	return xReturn;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019cac:	b480      	push	{r7}
 8019cae:	b085      	sub	sp, #20
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	60fb      	str	r3, [r7, #12]
 8019cba:	e014      	b.n	8019ce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019cbc:	4a0f      	ldr	r2, [pc, #60]	; (8019cfc <vQueueAddToRegistry+0x50>)
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d10b      	bne.n	8019ce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019cc8:	490c      	ldr	r1, [pc, #48]	; (8019cfc <vQueueAddToRegistry+0x50>)
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	683a      	ldr	r2, [r7, #0]
 8019cce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019cd2:	4a0a      	ldr	r2, [pc, #40]	; (8019cfc <vQueueAddToRegistry+0x50>)
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	00db      	lsls	r3, r3, #3
 8019cd8:	4413      	add	r3, r2
 8019cda:	687a      	ldr	r2, [r7, #4]
 8019cdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019cde:	e006      	b.n	8019cee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	60fb      	str	r3, [r7, #12]
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	2b07      	cmp	r3, #7
 8019cea:	d9e7      	bls.n	8019cbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019cec:	bf00      	nop
 8019cee:	bf00      	nop
 8019cf0:	3714      	adds	r7, #20
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop
 8019cfc:	24002acc 	.word	0x24002acc

08019d00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	60f8      	str	r0, [r7, #12]
 8019d08:	60b9      	str	r1, [r7, #8]
 8019d0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019d10:	f001 fd98 	bl	801b844 <vPortEnterCritical>
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019d1a:	b25b      	sxtb	r3, r3
 8019d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d20:	d103      	bne.n	8019d2a <vQueueWaitForMessageRestricted+0x2a>
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	2200      	movs	r2, #0
 8019d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019d30:	b25b      	sxtb	r3, r3
 8019d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d36:	d103      	bne.n	8019d40 <vQueueWaitForMessageRestricted+0x40>
 8019d38:	697b      	ldr	r3, [r7, #20]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019d40:	f001 fdb0 	bl	801b8a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d106      	bne.n	8019d5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	3324      	adds	r3, #36	; 0x24
 8019d50:	687a      	ldr	r2, [r7, #4]
 8019d52:	68b9      	ldr	r1, [r7, #8]
 8019d54:	4618      	mov	r0, r3
 8019d56:	f000 fd93 	bl	801a880 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019d5a:	6978      	ldr	r0, [r7, #20]
 8019d5c:	f7ff ff26 	bl	8019bac <prvUnlockQueue>
	}
 8019d60:	bf00      	nop
 8019d62:	3718      	adds	r7, #24
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b08e      	sub	sp, #56	; 0x38
 8019d6c:	af04      	add	r7, sp, #16
 8019d6e:	60f8      	str	r0, [r7, #12]
 8019d70:	60b9      	str	r1, [r7, #8]
 8019d72:	607a      	str	r2, [r7, #4]
 8019d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d10a      	bne.n	8019d92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8019d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d80:	f383 8811 	msr	BASEPRI, r3
 8019d84:	f3bf 8f6f 	isb	sy
 8019d88:	f3bf 8f4f 	dsb	sy
 8019d8c:	623b      	str	r3, [r7, #32]
}
 8019d8e:	bf00      	nop
 8019d90:	e7fe      	b.n	8019d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d10a      	bne.n	8019dae <xTaskCreateStatic+0x46>
	__asm volatile
 8019d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d9c:	f383 8811 	msr	BASEPRI, r3
 8019da0:	f3bf 8f6f 	isb	sy
 8019da4:	f3bf 8f4f 	dsb	sy
 8019da8:	61fb      	str	r3, [r7, #28]
}
 8019daa:	bf00      	nop
 8019dac:	e7fe      	b.n	8019dac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019dae:	235c      	movs	r3, #92	; 0x5c
 8019db0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019db2:	693b      	ldr	r3, [r7, #16]
 8019db4:	2b5c      	cmp	r3, #92	; 0x5c
 8019db6:	d00a      	beq.n	8019dce <xTaskCreateStatic+0x66>
	__asm volatile
 8019db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dbc:	f383 8811 	msr	BASEPRI, r3
 8019dc0:	f3bf 8f6f 	isb	sy
 8019dc4:	f3bf 8f4f 	dsb	sy
 8019dc8:	61bb      	str	r3, [r7, #24]
}
 8019dca:	bf00      	nop
 8019dcc:	e7fe      	b.n	8019dcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019dce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d01e      	beq.n	8019e14 <xTaskCreateStatic+0xac>
 8019dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d01b      	beq.n	8019e14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de8:	2202      	movs	r2, #2
 8019dea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019dee:	2300      	movs	r3, #0
 8019df0:	9303      	str	r3, [sp, #12]
 8019df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df4:	9302      	str	r3, [sp, #8]
 8019df6:	f107 0314 	add.w	r3, r7, #20
 8019dfa:	9301      	str	r3, [sp, #4]
 8019dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dfe:	9300      	str	r3, [sp, #0]
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	687a      	ldr	r2, [r7, #4]
 8019e04:	68b9      	ldr	r1, [r7, #8]
 8019e06:	68f8      	ldr	r0, [r7, #12]
 8019e08:	f000 f850 	bl	8019eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e0e:	f000 f8dd 	bl	8019fcc <prvAddNewTaskToReadyList>
 8019e12:	e001      	b.n	8019e18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019e14:	2300      	movs	r3, #0
 8019e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019e18:	697b      	ldr	r3, [r7, #20]
	}
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	3728      	adds	r7, #40	; 0x28
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}

08019e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019e22:	b580      	push	{r7, lr}
 8019e24:	b08c      	sub	sp, #48	; 0x30
 8019e26:	af04      	add	r7, sp, #16
 8019e28:	60f8      	str	r0, [r7, #12]
 8019e2a:	60b9      	str	r1, [r7, #8]
 8019e2c:	603b      	str	r3, [r7, #0]
 8019e2e:	4613      	mov	r3, r2
 8019e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019e32:	88fb      	ldrh	r3, [r7, #6]
 8019e34:	009b      	lsls	r3, r3, #2
 8019e36:	4618      	mov	r0, r3
 8019e38:	f001 fe26 	bl	801ba88 <pvPortMalloc>
 8019e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d00e      	beq.n	8019e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019e44:	205c      	movs	r0, #92	; 0x5c
 8019e46:	f001 fe1f 	bl	801ba88 <pvPortMalloc>
 8019e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019e4c:	69fb      	ldr	r3, [r7, #28]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d003      	beq.n	8019e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019e52:	69fb      	ldr	r3, [r7, #28]
 8019e54:	697a      	ldr	r2, [r7, #20]
 8019e56:	631a      	str	r2, [r3, #48]	; 0x30
 8019e58:	e005      	b.n	8019e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019e5a:	6978      	ldr	r0, [r7, #20]
 8019e5c:	f001 fee0 	bl	801bc20 <vPortFree>
 8019e60:	e001      	b.n	8019e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019e62:	2300      	movs	r3, #0
 8019e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d017      	beq.n	8019e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019e6c:	69fb      	ldr	r3, [r7, #28]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019e74:	88fa      	ldrh	r2, [r7, #6]
 8019e76:	2300      	movs	r3, #0
 8019e78:	9303      	str	r3, [sp, #12]
 8019e7a:	69fb      	ldr	r3, [r7, #28]
 8019e7c:	9302      	str	r3, [sp, #8]
 8019e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e80:	9301      	str	r3, [sp, #4]
 8019e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e84:	9300      	str	r3, [sp, #0]
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	68b9      	ldr	r1, [r7, #8]
 8019e8a:	68f8      	ldr	r0, [r7, #12]
 8019e8c:	f000 f80e 	bl	8019eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019e90:	69f8      	ldr	r0, [r7, #28]
 8019e92:	f000 f89b 	bl	8019fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019e96:	2301      	movs	r3, #1
 8019e98:	61bb      	str	r3, [r7, #24]
 8019e9a:	e002      	b.n	8019ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	3720      	adds	r7, #32
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}

08019eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b088      	sub	sp, #32
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	60f8      	str	r0, [r7, #12]
 8019eb4:	60b9      	str	r1, [r7, #8]
 8019eb6:	607a      	str	r2, [r7, #4]
 8019eb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ebc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	009b      	lsls	r3, r3, #2
 8019ec2:	461a      	mov	r2, r3
 8019ec4:	21a5      	movs	r1, #165	; 0xa5
 8019ec6:	f001 fffb 	bl	801bec0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019ed4:	440b      	add	r3, r1
 8019ed6:	009b      	lsls	r3, r3, #2
 8019ed8:	4413      	add	r3, r2
 8019eda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019edc:	69bb      	ldr	r3, [r7, #24]
 8019ede:	f023 0307 	bic.w	r3, r3, #7
 8019ee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019ee4:	69bb      	ldr	r3, [r7, #24]
 8019ee6:	f003 0307 	and.w	r3, r3, #7
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00a      	beq.n	8019f04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8019eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef2:	f383 8811 	msr	BASEPRI, r3
 8019ef6:	f3bf 8f6f 	isb	sy
 8019efa:	f3bf 8f4f 	dsb	sy
 8019efe:	617b      	str	r3, [r7, #20]
}
 8019f00:	bf00      	nop
 8019f02:	e7fe      	b.n	8019f02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d01f      	beq.n	8019f4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	61fb      	str	r3, [r7, #28]
 8019f0e:	e012      	b.n	8019f36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019f10:	68ba      	ldr	r2, [r7, #8]
 8019f12:	69fb      	ldr	r3, [r7, #28]
 8019f14:	4413      	add	r3, r2
 8019f16:	7819      	ldrb	r1, [r3, #0]
 8019f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f1a:	69fb      	ldr	r3, [r7, #28]
 8019f1c:	4413      	add	r3, r2
 8019f1e:	3334      	adds	r3, #52	; 0x34
 8019f20:	460a      	mov	r2, r1
 8019f22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019f24:	68ba      	ldr	r2, [r7, #8]
 8019f26:	69fb      	ldr	r3, [r7, #28]
 8019f28:	4413      	add	r3, r2
 8019f2a:	781b      	ldrb	r3, [r3, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d006      	beq.n	8019f3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	3301      	adds	r3, #1
 8019f34:	61fb      	str	r3, [r7, #28]
 8019f36:	69fb      	ldr	r3, [r7, #28]
 8019f38:	2b0f      	cmp	r3, #15
 8019f3a:	d9e9      	bls.n	8019f10 <prvInitialiseNewTask+0x64>
 8019f3c:	e000      	b.n	8019f40 <prvInitialiseNewTask+0x94>
			{
				break;
 8019f3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f42:	2200      	movs	r2, #0
 8019f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019f48:	e003      	b.n	8019f52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f54:	2b37      	cmp	r3, #55	; 0x37
 8019f56:	d901      	bls.n	8019f5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019f58:	2337      	movs	r3, #55	; 0x37
 8019f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f70:	3304      	adds	r3, #4
 8019f72:	4618      	mov	r0, r3
 8019f74:	f7ff f978 	bl	8019268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f7a:	3318      	adds	r3, #24
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f7ff f973 	bl	8019268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019fa6:	683a      	ldr	r2, [r7, #0]
 8019fa8:	68f9      	ldr	r1, [r7, #12]
 8019faa:	69b8      	ldr	r0, [r7, #24]
 8019fac:	f001 fb1a 	bl	801b5e4 <pxPortInitialiseStack>
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d002      	beq.n	8019fc2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019fc2:	bf00      	nop
 8019fc4:	3720      	adds	r7, #32
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}
	...

08019fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b082      	sub	sp, #8
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019fd4:	f001 fc36 	bl	801b844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019fd8:	4b2d      	ldr	r3, [pc, #180]	; (801a090 <prvAddNewTaskToReadyList+0xc4>)
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	3301      	adds	r3, #1
 8019fde:	4a2c      	ldr	r2, [pc, #176]	; (801a090 <prvAddNewTaskToReadyList+0xc4>)
 8019fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019fe2:	4b2c      	ldr	r3, [pc, #176]	; (801a094 <prvAddNewTaskToReadyList+0xc8>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d109      	bne.n	8019ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019fea:	4a2a      	ldr	r2, [pc, #168]	; (801a094 <prvAddNewTaskToReadyList+0xc8>)
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019ff0:	4b27      	ldr	r3, [pc, #156]	; (801a090 <prvAddNewTaskToReadyList+0xc4>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d110      	bne.n	801a01a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019ff8:	f000 fdd0 	bl	801ab9c <prvInitialiseTaskLists>
 8019ffc:	e00d      	b.n	801a01a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019ffe:	4b26      	ldr	r3, [pc, #152]	; (801a098 <prvAddNewTaskToReadyList+0xcc>)
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d109      	bne.n	801a01a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a006:	4b23      	ldr	r3, [pc, #140]	; (801a094 <prvAddNewTaskToReadyList+0xc8>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a010:	429a      	cmp	r2, r3
 801a012:	d802      	bhi.n	801a01a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a014:	4a1f      	ldr	r2, [pc, #124]	; (801a094 <prvAddNewTaskToReadyList+0xc8>)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a01a:	4b20      	ldr	r3, [pc, #128]	; (801a09c <prvAddNewTaskToReadyList+0xd0>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	3301      	adds	r3, #1
 801a020:	4a1e      	ldr	r2, [pc, #120]	; (801a09c <prvAddNewTaskToReadyList+0xd0>)
 801a022:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a024:	4b1d      	ldr	r3, [pc, #116]	; (801a09c <prvAddNewTaskToReadyList+0xd0>)
 801a026:	681a      	ldr	r2, [r3, #0]
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a030:	4b1b      	ldr	r3, [pc, #108]	; (801a0a0 <prvAddNewTaskToReadyList+0xd4>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	429a      	cmp	r2, r3
 801a036:	d903      	bls.n	801a040 <prvAddNewTaskToReadyList+0x74>
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a03c:	4a18      	ldr	r2, [pc, #96]	; (801a0a0 <prvAddNewTaskToReadyList+0xd4>)
 801a03e:	6013      	str	r3, [r2, #0]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a044:	4613      	mov	r3, r2
 801a046:	009b      	lsls	r3, r3, #2
 801a048:	4413      	add	r3, r2
 801a04a:	009b      	lsls	r3, r3, #2
 801a04c:	4a15      	ldr	r2, [pc, #84]	; (801a0a4 <prvAddNewTaskToReadyList+0xd8>)
 801a04e:	441a      	add	r2, r3
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	3304      	adds	r3, #4
 801a054:	4619      	mov	r1, r3
 801a056:	4610      	mov	r0, r2
 801a058:	f7ff f913 	bl	8019282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a05c:	f001 fc22 	bl	801b8a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a060:	4b0d      	ldr	r3, [pc, #52]	; (801a098 <prvAddNewTaskToReadyList+0xcc>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d00e      	beq.n	801a086 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a068:	4b0a      	ldr	r3, [pc, #40]	; (801a094 <prvAddNewTaskToReadyList+0xc8>)
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a072:	429a      	cmp	r2, r3
 801a074:	d207      	bcs.n	801a086 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a076:	4b0c      	ldr	r3, [pc, #48]	; (801a0a8 <prvAddNewTaskToReadyList+0xdc>)
 801a078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a07c:	601a      	str	r2, [r3, #0]
 801a07e:	f3bf 8f4f 	dsb	sy
 801a082:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a086:	bf00      	nop
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	24002fe0 	.word	0x24002fe0
 801a094:	24002b0c 	.word	0x24002b0c
 801a098:	24002fec 	.word	0x24002fec
 801a09c:	24002ffc 	.word	0x24002ffc
 801a0a0:	24002fe8 	.word	0x24002fe8
 801a0a4:	24002b10 	.word	0x24002b10
 801a0a8:	e000ed04 	.word	0xe000ed04

0801a0ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b084      	sub	sp, #16
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d017      	beq.n	801a0ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a0be:	4b13      	ldr	r3, [pc, #76]	; (801a10c <vTaskDelay+0x60>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d00a      	beq.n	801a0dc <vTaskDelay+0x30>
	__asm volatile
 801a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ca:	f383 8811 	msr	BASEPRI, r3
 801a0ce:	f3bf 8f6f 	isb	sy
 801a0d2:	f3bf 8f4f 	dsb	sy
 801a0d6:	60bb      	str	r3, [r7, #8]
}
 801a0d8:	bf00      	nop
 801a0da:	e7fe      	b.n	801a0da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a0dc:	f000 f986 	bl	801a3ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a0e0:	2100      	movs	r1, #0
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f000 febc 	bl	801ae60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a0e8:	f000 f98e 	bl	801a408 <xTaskResumeAll>
 801a0ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d107      	bne.n	801a104 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801a0f4:	4b06      	ldr	r3, [pc, #24]	; (801a110 <vTaskDelay+0x64>)
 801a0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0fa:	601a      	str	r2, [r3, #0]
 801a0fc:	f3bf 8f4f 	dsb	sy
 801a100:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a104:	bf00      	nop
 801a106:	3710      	adds	r7, #16
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}
 801a10c:	24003008 	.word	0x24003008
 801a110:	e000ed04 	.word	0xe000ed04

0801a114 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801a114:	b580      	push	{r7, lr}
 801a116:	b084      	sub	sp, #16
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801a11c:	f001 fb92 	bl	801b844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d102      	bne.n	801a12c <vTaskSuspend+0x18>
 801a126:	4b30      	ldr	r3, [pc, #192]	; (801a1e8 <vTaskSuspend+0xd4>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	e000      	b.n	801a12e <vTaskSuspend+0x1a>
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	3304      	adds	r3, #4
 801a134:	4618      	mov	r0, r3
 801a136:	f7ff f901 	bl	801933c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d004      	beq.n	801a14c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	3318      	adds	r3, #24
 801a146:	4618      	mov	r0, r3
 801a148:	f7ff f8f8 	bl	801933c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	3304      	adds	r3, #4
 801a150:	4619      	mov	r1, r3
 801a152:	4826      	ldr	r0, [pc, #152]	; (801a1ec <vTaskSuspend+0xd8>)
 801a154:	f7ff f895 	bl	8019282 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a15e:	b2db      	uxtb	r3, r3
 801a160:	2b01      	cmp	r3, #1
 801a162:	d103      	bne.n	801a16c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	2200      	movs	r2, #0
 801a168:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801a16c:	f001 fb9a 	bl	801b8a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801a170:	4b1f      	ldr	r3, [pc, #124]	; (801a1f0 <vTaskSuspend+0xdc>)
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d005      	beq.n	801a184 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801a178:	f001 fb64 	bl	801b844 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801a17c:	f000 fdac 	bl	801acd8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801a180:	f001 fb90 	bl	801b8a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801a184:	4b18      	ldr	r3, [pc, #96]	; (801a1e8 <vTaskSuspend+0xd4>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	68fa      	ldr	r2, [r7, #12]
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d127      	bne.n	801a1de <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801a18e:	4b18      	ldr	r3, [pc, #96]	; (801a1f0 <vTaskSuspend+0xdc>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d017      	beq.n	801a1c6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801a196:	4b17      	ldr	r3, [pc, #92]	; (801a1f4 <vTaskSuspend+0xe0>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d00a      	beq.n	801a1b4 <vTaskSuspend+0xa0>
	__asm volatile
 801a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1a2:	f383 8811 	msr	BASEPRI, r3
 801a1a6:	f3bf 8f6f 	isb	sy
 801a1aa:	f3bf 8f4f 	dsb	sy
 801a1ae:	60bb      	str	r3, [r7, #8]
}
 801a1b0:	bf00      	nop
 801a1b2:	e7fe      	b.n	801a1b2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801a1b4:	4b10      	ldr	r3, [pc, #64]	; (801a1f8 <vTaskSuspend+0xe4>)
 801a1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1ba:	601a      	str	r2, [r3, #0]
 801a1bc:	f3bf 8f4f 	dsb	sy
 801a1c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a1c4:	e00b      	b.n	801a1de <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801a1c6:	4b09      	ldr	r3, [pc, #36]	; (801a1ec <vTaskSuspend+0xd8>)
 801a1c8:	681a      	ldr	r2, [r3, #0]
 801a1ca:	4b0c      	ldr	r3, [pc, #48]	; (801a1fc <vTaskSuspend+0xe8>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	d103      	bne.n	801a1da <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801a1d2:	4b05      	ldr	r3, [pc, #20]	; (801a1e8 <vTaskSuspend+0xd4>)
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	601a      	str	r2, [r3, #0]
	}
 801a1d8:	e001      	b.n	801a1de <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801a1da:	f000 fa85 	bl	801a6e8 <vTaskSwitchContext>
	}
 801a1de:	bf00      	nop
 801a1e0:	3710      	adds	r7, #16
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}
 801a1e6:	bf00      	nop
 801a1e8:	24002b0c 	.word	0x24002b0c
 801a1ec:	24002fcc 	.word	0x24002fcc
 801a1f0:	24002fec 	.word	0x24002fec
 801a1f4:	24003008 	.word	0x24003008
 801a1f8:	e000ed04 	.word	0xe000ed04
 801a1fc:	24002fe0 	.word	0x24002fe0

0801a200 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801a200:	b480      	push	{r7}
 801a202:	b087      	sub	sp, #28
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801a208:	2300      	movs	r3, #0
 801a20a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d10a      	bne.n	801a22c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a21a:	f383 8811 	msr	BASEPRI, r3
 801a21e:	f3bf 8f6f 	isb	sy
 801a222:	f3bf 8f4f 	dsb	sy
 801a226:	60fb      	str	r3, [r7, #12]
}
 801a228:	bf00      	nop
 801a22a:	e7fe      	b.n	801a22a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a22c:	693b      	ldr	r3, [r7, #16]
 801a22e:	695b      	ldr	r3, [r3, #20]
 801a230:	4a0a      	ldr	r2, [pc, #40]	; (801a25c <prvTaskIsTaskSuspended+0x5c>)
 801a232:	4293      	cmp	r3, r2
 801a234:	d10a      	bne.n	801a24c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801a236:	693b      	ldr	r3, [r7, #16]
 801a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a23a:	4a09      	ldr	r2, [pc, #36]	; (801a260 <prvTaskIsTaskSuspended+0x60>)
 801a23c:	4293      	cmp	r3, r2
 801a23e:	d005      	beq.n	801a24c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801a240:	693b      	ldr	r3, [r7, #16]
 801a242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a244:	2b00      	cmp	r3, #0
 801a246:	d101      	bne.n	801a24c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801a248:	2301      	movs	r3, #1
 801a24a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a24c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801a24e:	4618      	mov	r0, r3
 801a250:	371c      	adds	r7, #28
 801a252:	46bd      	mov	sp, r7
 801a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a258:	4770      	bx	lr
 801a25a:	bf00      	nop
 801a25c:	24002fcc 	.word	0x24002fcc
 801a260:	24002fa0 	.word	0x24002fa0

0801a264 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801a264:	b580      	push	{r7, lr}
 801a266:	b084      	sub	sp, #16
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d10a      	bne.n	801a28c <vTaskResume+0x28>
	__asm volatile
 801a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a27a:	f383 8811 	msr	BASEPRI, r3
 801a27e:	f3bf 8f6f 	isb	sy
 801a282:	f3bf 8f4f 	dsb	sy
 801a286:	60bb      	str	r3, [r7, #8]
}
 801a288:	bf00      	nop
 801a28a:	e7fe      	b.n	801a28a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801a28c:	4b20      	ldr	r3, [pc, #128]	; (801a310 <vTaskResume+0xac>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	68fa      	ldr	r2, [r7, #12]
 801a292:	429a      	cmp	r2, r3
 801a294:	d038      	beq.n	801a308 <vTaskResume+0xa4>
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d035      	beq.n	801a308 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801a29c:	f001 fad2 	bl	801b844 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a2a0:	68f8      	ldr	r0, [r7, #12]
 801a2a2:	f7ff ffad 	bl	801a200 <prvTaskIsTaskSuspended>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d02b      	beq.n	801a304 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	3304      	adds	r3, #4
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f7ff f843 	bl	801933c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2ba:	4b16      	ldr	r3, [pc, #88]	; (801a314 <vTaskResume+0xb0>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	d903      	bls.n	801a2ca <vTaskResume+0x66>
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2c6:	4a13      	ldr	r2, [pc, #76]	; (801a314 <vTaskResume+0xb0>)
 801a2c8:	6013      	str	r3, [r2, #0]
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2ce:	4613      	mov	r3, r2
 801a2d0:	009b      	lsls	r3, r3, #2
 801a2d2:	4413      	add	r3, r2
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	4a10      	ldr	r2, [pc, #64]	; (801a318 <vTaskResume+0xb4>)
 801a2d8:	441a      	add	r2, r3
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	3304      	adds	r3, #4
 801a2de:	4619      	mov	r1, r3
 801a2e0:	4610      	mov	r0, r2
 801a2e2:	f7fe ffce 	bl	8019282 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2ea:	4b09      	ldr	r3, [pc, #36]	; (801a310 <vTaskResume+0xac>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2f0:	429a      	cmp	r2, r3
 801a2f2:	d307      	bcc.n	801a304 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801a2f4:	4b09      	ldr	r3, [pc, #36]	; (801a31c <vTaskResume+0xb8>)
 801a2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a2fa:	601a      	str	r2, [r3, #0]
 801a2fc:	f3bf 8f4f 	dsb	sy
 801a300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801a304:	f001 face 	bl	801b8a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a308:	bf00      	nop
 801a30a:	3710      	adds	r7, #16
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	24002b0c 	.word	0x24002b0c
 801a314:	24002fe8 	.word	0x24002fe8
 801a318:	24002b10 	.word	0x24002b10
 801a31c:	e000ed04 	.word	0xe000ed04

0801a320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a320:	b580      	push	{r7, lr}
 801a322:	b08a      	sub	sp, #40	; 0x28
 801a324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a326:	2300      	movs	r3, #0
 801a328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a32a:	2300      	movs	r3, #0
 801a32c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a32e:	463a      	mov	r2, r7
 801a330:	1d39      	adds	r1, r7, #4
 801a332:	f107 0308 	add.w	r3, r7, #8
 801a336:	4618      	mov	r0, r3
 801a338:	f7fe fcd6 	bl	8018ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a33c:	6839      	ldr	r1, [r7, #0]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	68ba      	ldr	r2, [r7, #8]
 801a342:	9202      	str	r2, [sp, #8]
 801a344:	9301      	str	r3, [sp, #4]
 801a346:	2300      	movs	r3, #0
 801a348:	9300      	str	r3, [sp, #0]
 801a34a:	2300      	movs	r3, #0
 801a34c:	460a      	mov	r2, r1
 801a34e:	4921      	ldr	r1, [pc, #132]	; (801a3d4 <vTaskStartScheduler+0xb4>)
 801a350:	4821      	ldr	r0, [pc, #132]	; (801a3d8 <vTaskStartScheduler+0xb8>)
 801a352:	f7ff fd09 	bl	8019d68 <xTaskCreateStatic>
 801a356:	4603      	mov	r3, r0
 801a358:	4a20      	ldr	r2, [pc, #128]	; (801a3dc <vTaskStartScheduler+0xbc>)
 801a35a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a35c:	4b1f      	ldr	r3, [pc, #124]	; (801a3dc <vTaskStartScheduler+0xbc>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d002      	beq.n	801a36a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a364:	2301      	movs	r3, #1
 801a366:	617b      	str	r3, [r7, #20]
 801a368:	e001      	b.n	801a36e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a36a:	2300      	movs	r3, #0
 801a36c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	2b01      	cmp	r3, #1
 801a372:	d102      	bne.n	801a37a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a374:	f000 fdc8 	bl	801af08 <xTimerCreateTimerTask>
 801a378:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	2b01      	cmp	r3, #1
 801a37e:	d116      	bne.n	801a3ae <vTaskStartScheduler+0x8e>
	__asm volatile
 801a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a384:	f383 8811 	msr	BASEPRI, r3
 801a388:	f3bf 8f6f 	isb	sy
 801a38c:	f3bf 8f4f 	dsb	sy
 801a390:	613b      	str	r3, [r7, #16]
}
 801a392:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a394:	4b12      	ldr	r3, [pc, #72]	; (801a3e0 <vTaskStartScheduler+0xc0>)
 801a396:	f04f 32ff 	mov.w	r2, #4294967295
 801a39a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a39c:	4b11      	ldr	r3, [pc, #68]	; (801a3e4 <vTaskStartScheduler+0xc4>)
 801a39e:	2201      	movs	r2, #1
 801a3a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a3a2:	4b11      	ldr	r3, [pc, #68]	; (801a3e8 <vTaskStartScheduler+0xc8>)
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a3a8:	f001 f9aa 	bl	801b700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a3ac:	e00e      	b.n	801a3cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a3ae:	697b      	ldr	r3, [r7, #20]
 801a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3b4:	d10a      	bne.n	801a3cc <vTaskStartScheduler+0xac>
	__asm volatile
 801a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ba:	f383 8811 	msr	BASEPRI, r3
 801a3be:	f3bf 8f6f 	isb	sy
 801a3c2:	f3bf 8f4f 	dsb	sy
 801a3c6:	60fb      	str	r3, [r7, #12]
}
 801a3c8:	bf00      	nop
 801a3ca:	e7fe      	b.n	801a3ca <vTaskStartScheduler+0xaa>
}
 801a3cc:	bf00      	nop
 801a3ce:	3718      	adds	r7, #24
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	0801c004 	.word	0x0801c004
 801a3d8:	0801ab6d 	.word	0x0801ab6d
 801a3dc:	24003004 	.word	0x24003004
 801a3e0:	24003000 	.word	0x24003000
 801a3e4:	24002fec 	.word	0x24002fec
 801a3e8:	24002fe4 	.word	0x24002fe4

0801a3ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a3ec:	b480      	push	{r7}
 801a3ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a3f0:	4b04      	ldr	r3, [pc, #16]	; (801a404 <vTaskSuspendAll+0x18>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	3301      	adds	r3, #1
 801a3f6:	4a03      	ldr	r2, [pc, #12]	; (801a404 <vTaskSuspendAll+0x18>)
 801a3f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a3fa:	bf00      	nop
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a402:	4770      	bx	lr
 801a404:	24003008 	.word	0x24003008

0801a408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b084      	sub	sp, #16
 801a40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a40e:	2300      	movs	r3, #0
 801a410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a412:	2300      	movs	r3, #0
 801a414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a416:	4b42      	ldr	r3, [pc, #264]	; (801a520 <xTaskResumeAll+0x118>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d10a      	bne.n	801a434 <xTaskResumeAll+0x2c>
	__asm volatile
 801a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a422:	f383 8811 	msr	BASEPRI, r3
 801a426:	f3bf 8f6f 	isb	sy
 801a42a:	f3bf 8f4f 	dsb	sy
 801a42e:	603b      	str	r3, [r7, #0]
}
 801a430:	bf00      	nop
 801a432:	e7fe      	b.n	801a432 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a434:	f001 fa06 	bl	801b844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a438:	4b39      	ldr	r3, [pc, #228]	; (801a520 <xTaskResumeAll+0x118>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	3b01      	subs	r3, #1
 801a43e:	4a38      	ldr	r2, [pc, #224]	; (801a520 <xTaskResumeAll+0x118>)
 801a440:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a442:	4b37      	ldr	r3, [pc, #220]	; (801a520 <xTaskResumeAll+0x118>)
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d162      	bne.n	801a510 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a44a:	4b36      	ldr	r3, [pc, #216]	; (801a524 <xTaskResumeAll+0x11c>)
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d05e      	beq.n	801a510 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a452:	e02f      	b.n	801a4b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a454:	4b34      	ldr	r3, [pc, #208]	; (801a528 <xTaskResumeAll+0x120>)
 801a456:	68db      	ldr	r3, [r3, #12]
 801a458:	68db      	ldr	r3, [r3, #12]
 801a45a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	3318      	adds	r3, #24
 801a460:	4618      	mov	r0, r3
 801a462:	f7fe ff6b 	bl	801933c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	3304      	adds	r3, #4
 801a46a:	4618      	mov	r0, r3
 801a46c:	f7fe ff66 	bl	801933c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a474:	4b2d      	ldr	r3, [pc, #180]	; (801a52c <xTaskResumeAll+0x124>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d903      	bls.n	801a484 <xTaskResumeAll+0x7c>
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a480:	4a2a      	ldr	r2, [pc, #168]	; (801a52c <xTaskResumeAll+0x124>)
 801a482:	6013      	str	r3, [r2, #0]
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a488:	4613      	mov	r3, r2
 801a48a:	009b      	lsls	r3, r3, #2
 801a48c:	4413      	add	r3, r2
 801a48e:	009b      	lsls	r3, r3, #2
 801a490:	4a27      	ldr	r2, [pc, #156]	; (801a530 <xTaskResumeAll+0x128>)
 801a492:	441a      	add	r2, r3
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	3304      	adds	r3, #4
 801a498:	4619      	mov	r1, r3
 801a49a:	4610      	mov	r0, r2
 801a49c:	f7fe fef1 	bl	8019282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a4a4:	4b23      	ldr	r3, [pc, #140]	; (801a534 <xTaskResumeAll+0x12c>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	d302      	bcc.n	801a4b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801a4ae:	4b22      	ldr	r3, [pc, #136]	; (801a538 <xTaskResumeAll+0x130>)
 801a4b0:	2201      	movs	r2, #1
 801a4b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a4b4:	4b1c      	ldr	r3, [pc, #112]	; (801a528 <xTaskResumeAll+0x120>)
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d1cb      	bne.n	801a454 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d001      	beq.n	801a4c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a4c2:	f000 fc09 	bl	801acd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a4c6:	4b1d      	ldr	r3, [pc, #116]	; (801a53c <xTaskResumeAll+0x134>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d010      	beq.n	801a4f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a4d2:	f000 f847 	bl	801a564 <xTaskIncrementTick>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d002      	beq.n	801a4e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a4dc:	4b16      	ldr	r3, [pc, #88]	; (801a538 <xTaskResumeAll+0x130>)
 801a4de:	2201      	movs	r2, #1
 801a4e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	3b01      	subs	r3, #1
 801a4e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d1f1      	bne.n	801a4d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a4ee:	4b13      	ldr	r3, [pc, #76]	; (801a53c <xTaskResumeAll+0x134>)
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a4f4:	4b10      	ldr	r3, [pc, #64]	; (801a538 <xTaskResumeAll+0x130>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d009      	beq.n	801a510 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a500:	4b0f      	ldr	r3, [pc, #60]	; (801a540 <xTaskResumeAll+0x138>)
 801a502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a506:	601a      	str	r2, [r3, #0]
 801a508:	f3bf 8f4f 	dsb	sy
 801a50c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a510:	f001 f9c8 	bl	801b8a4 <vPortExitCritical>

	return xAlreadyYielded;
 801a514:	68bb      	ldr	r3, [r7, #8]
}
 801a516:	4618      	mov	r0, r3
 801a518:	3710      	adds	r7, #16
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
 801a51e:	bf00      	nop
 801a520:	24003008 	.word	0x24003008
 801a524:	24002fe0 	.word	0x24002fe0
 801a528:	24002fa0 	.word	0x24002fa0
 801a52c:	24002fe8 	.word	0x24002fe8
 801a530:	24002b10 	.word	0x24002b10
 801a534:	24002b0c 	.word	0x24002b0c
 801a538:	24002ff4 	.word	0x24002ff4
 801a53c:	24002ff0 	.word	0x24002ff0
 801a540:	e000ed04 	.word	0xe000ed04

0801a544 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a544:	b480      	push	{r7}
 801a546:	b083      	sub	sp, #12
 801a548:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a54a:	4b05      	ldr	r3, [pc, #20]	; (801a560 <xTaskGetTickCount+0x1c>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a550:	687b      	ldr	r3, [r7, #4]
}
 801a552:	4618      	mov	r0, r3
 801a554:	370c      	adds	r7, #12
 801a556:	46bd      	mov	sp, r7
 801a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55c:	4770      	bx	lr
 801a55e:	bf00      	nop
 801a560:	24002fe4 	.word	0x24002fe4

0801a564 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b086      	sub	sp, #24
 801a568:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a56a:	2300      	movs	r3, #0
 801a56c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a56e:	4b53      	ldr	r3, [pc, #332]	; (801a6bc <xTaskIncrementTick+0x158>)
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	f040 8095 	bne.w	801a6a2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a578:	4b51      	ldr	r3, [pc, #324]	; (801a6c0 <xTaskIncrementTick+0x15c>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	3301      	adds	r3, #1
 801a57e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a580:	4a4f      	ldr	r2, [pc, #316]	; (801a6c0 <xTaskIncrementTick+0x15c>)
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d120      	bne.n	801a5ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a58c:	4b4d      	ldr	r3, [pc, #308]	; (801a6c4 <xTaskIncrementTick+0x160>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d00a      	beq.n	801a5ac <xTaskIncrementTick+0x48>
	__asm volatile
 801a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a59a:	f383 8811 	msr	BASEPRI, r3
 801a59e:	f3bf 8f6f 	isb	sy
 801a5a2:	f3bf 8f4f 	dsb	sy
 801a5a6:	603b      	str	r3, [r7, #0]
}
 801a5a8:	bf00      	nop
 801a5aa:	e7fe      	b.n	801a5aa <xTaskIncrementTick+0x46>
 801a5ac:	4b45      	ldr	r3, [pc, #276]	; (801a6c4 <xTaskIncrementTick+0x160>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	60fb      	str	r3, [r7, #12]
 801a5b2:	4b45      	ldr	r3, [pc, #276]	; (801a6c8 <xTaskIncrementTick+0x164>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4a43      	ldr	r2, [pc, #268]	; (801a6c4 <xTaskIncrementTick+0x160>)
 801a5b8:	6013      	str	r3, [r2, #0]
 801a5ba:	4a43      	ldr	r2, [pc, #268]	; (801a6c8 <xTaskIncrementTick+0x164>)
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	6013      	str	r3, [r2, #0]
 801a5c0:	4b42      	ldr	r3, [pc, #264]	; (801a6cc <xTaskIncrementTick+0x168>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	3301      	adds	r3, #1
 801a5c6:	4a41      	ldr	r2, [pc, #260]	; (801a6cc <xTaskIncrementTick+0x168>)
 801a5c8:	6013      	str	r3, [r2, #0]
 801a5ca:	f000 fb85 	bl	801acd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a5ce:	4b40      	ldr	r3, [pc, #256]	; (801a6d0 <xTaskIncrementTick+0x16c>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	693a      	ldr	r2, [r7, #16]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d349      	bcc.n	801a66c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a5d8:	4b3a      	ldr	r3, [pc, #232]	; (801a6c4 <xTaskIncrementTick+0x160>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d104      	bne.n	801a5ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a5e2:	4b3b      	ldr	r3, [pc, #236]	; (801a6d0 <xTaskIncrementTick+0x16c>)
 801a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 801a5e8:	601a      	str	r2, [r3, #0]
					break;
 801a5ea:	e03f      	b.n	801a66c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a5ec:	4b35      	ldr	r3, [pc, #212]	; (801a6c4 <xTaskIncrementTick+0x160>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	68db      	ldr	r3, [r3, #12]
 801a5f2:	68db      	ldr	r3, [r3, #12]
 801a5f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a5fc:	693a      	ldr	r2, [r7, #16]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	429a      	cmp	r2, r3
 801a602:	d203      	bcs.n	801a60c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a604:	4a32      	ldr	r2, [pc, #200]	; (801a6d0 <xTaskIncrementTick+0x16c>)
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a60a:	e02f      	b.n	801a66c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	3304      	adds	r3, #4
 801a610:	4618      	mov	r0, r3
 801a612:	f7fe fe93 	bl	801933c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d004      	beq.n	801a628 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	3318      	adds	r3, #24
 801a622:	4618      	mov	r0, r3
 801a624:	f7fe fe8a 	bl	801933c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a628:	68bb      	ldr	r3, [r7, #8]
 801a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a62c:	4b29      	ldr	r3, [pc, #164]	; (801a6d4 <xTaskIncrementTick+0x170>)
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	429a      	cmp	r2, r3
 801a632:	d903      	bls.n	801a63c <xTaskIncrementTick+0xd8>
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a638:	4a26      	ldr	r2, [pc, #152]	; (801a6d4 <xTaskIncrementTick+0x170>)
 801a63a:	6013      	str	r3, [r2, #0]
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a640:	4613      	mov	r3, r2
 801a642:	009b      	lsls	r3, r3, #2
 801a644:	4413      	add	r3, r2
 801a646:	009b      	lsls	r3, r3, #2
 801a648:	4a23      	ldr	r2, [pc, #140]	; (801a6d8 <xTaskIncrementTick+0x174>)
 801a64a:	441a      	add	r2, r3
 801a64c:	68bb      	ldr	r3, [r7, #8]
 801a64e:	3304      	adds	r3, #4
 801a650:	4619      	mov	r1, r3
 801a652:	4610      	mov	r0, r2
 801a654:	f7fe fe15 	bl	8019282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a658:	68bb      	ldr	r3, [r7, #8]
 801a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a65c:	4b1f      	ldr	r3, [pc, #124]	; (801a6dc <xTaskIncrementTick+0x178>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a662:	429a      	cmp	r2, r3
 801a664:	d3b8      	bcc.n	801a5d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a666:	2301      	movs	r3, #1
 801a668:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a66a:	e7b5      	b.n	801a5d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a66c:	4b1b      	ldr	r3, [pc, #108]	; (801a6dc <xTaskIncrementTick+0x178>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a672:	4919      	ldr	r1, [pc, #100]	; (801a6d8 <xTaskIncrementTick+0x174>)
 801a674:	4613      	mov	r3, r2
 801a676:	009b      	lsls	r3, r3, #2
 801a678:	4413      	add	r3, r2
 801a67a:	009b      	lsls	r3, r3, #2
 801a67c:	440b      	add	r3, r1
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	2b01      	cmp	r3, #1
 801a682:	d901      	bls.n	801a688 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a684:	2301      	movs	r3, #1
 801a686:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801a688:	4b15      	ldr	r3, [pc, #84]	; (801a6e0 <xTaskIncrementTick+0x17c>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d101      	bne.n	801a694 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801a690:	f7e7 fe92 	bl	80023b8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a694:	4b13      	ldr	r3, [pc, #76]	; (801a6e4 <xTaskIncrementTick+0x180>)
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d009      	beq.n	801a6b0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801a69c:	2301      	movs	r3, #1
 801a69e:	617b      	str	r3, [r7, #20]
 801a6a0:	e006      	b.n	801a6b0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a6a2:	4b0f      	ldr	r3, [pc, #60]	; (801a6e0 <xTaskIncrementTick+0x17c>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	4a0d      	ldr	r2, [pc, #52]	; (801a6e0 <xTaskIncrementTick+0x17c>)
 801a6aa:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801a6ac:	f7e7 fe84 	bl	80023b8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801a6b0:	697b      	ldr	r3, [r7, #20]
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	3718      	adds	r7, #24
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd80      	pop	{r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	24003008 	.word	0x24003008
 801a6c0:	24002fe4 	.word	0x24002fe4
 801a6c4:	24002f98 	.word	0x24002f98
 801a6c8:	24002f9c 	.word	0x24002f9c
 801a6cc:	24002ff8 	.word	0x24002ff8
 801a6d0:	24003000 	.word	0x24003000
 801a6d4:	24002fe8 	.word	0x24002fe8
 801a6d8:	24002b10 	.word	0x24002b10
 801a6dc:	24002b0c 	.word	0x24002b0c
 801a6e0:	24002ff0 	.word	0x24002ff0
 801a6e4:	24002ff4 	.word	0x24002ff4

0801a6e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a6ee:	4b2f      	ldr	r3, [pc, #188]	; (801a7ac <vTaskSwitchContext+0xc4>)
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d003      	beq.n	801a6fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a6f6:	4b2e      	ldr	r3, [pc, #184]	; (801a7b0 <vTaskSwitchContext+0xc8>)
 801a6f8:	2201      	movs	r2, #1
 801a6fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a6fc:	e052      	b.n	801a7a4 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801a6fe:	4b2c      	ldr	r3, [pc, #176]	; (801a7b0 <vTaskSwitchContext+0xc8>)
 801a700:	2200      	movs	r2, #0
 801a702:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a704:	4b2b      	ldr	r3, [pc, #172]	; (801a7b4 <vTaskSwitchContext+0xcc>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	681a      	ldr	r2, [r3, #0]
 801a70a:	4b2a      	ldr	r3, [pc, #168]	; (801a7b4 <vTaskSwitchContext+0xcc>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a710:	429a      	cmp	r2, r3
 801a712:	d808      	bhi.n	801a726 <vTaskSwitchContext+0x3e>
 801a714:	4b27      	ldr	r3, [pc, #156]	; (801a7b4 <vTaskSwitchContext+0xcc>)
 801a716:	681a      	ldr	r2, [r3, #0]
 801a718:	4b26      	ldr	r3, [pc, #152]	; (801a7b4 <vTaskSwitchContext+0xcc>)
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	3334      	adds	r3, #52	; 0x34
 801a71e:	4619      	mov	r1, r3
 801a720:	4610      	mov	r0, r2
 801a722:	f7e7 fe57 	bl	80023d4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a726:	4b24      	ldr	r3, [pc, #144]	; (801a7b8 <vTaskSwitchContext+0xd0>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	60fb      	str	r3, [r7, #12]
 801a72c:	e010      	b.n	801a750 <vTaskSwitchContext+0x68>
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d10a      	bne.n	801a74a <vTaskSwitchContext+0x62>
	__asm volatile
 801a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a738:	f383 8811 	msr	BASEPRI, r3
 801a73c:	f3bf 8f6f 	isb	sy
 801a740:	f3bf 8f4f 	dsb	sy
 801a744:	607b      	str	r3, [r7, #4]
}
 801a746:	bf00      	nop
 801a748:	e7fe      	b.n	801a748 <vTaskSwitchContext+0x60>
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	3b01      	subs	r3, #1
 801a74e:	60fb      	str	r3, [r7, #12]
 801a750:	491a      	ldr	r1, [pc, #104]	; (801a7bc <vTaskSwitchContext+0xd4>)
 801a752:	68fa      	ldr	r2, [r7, #12]
 801a754:	4613      	mov	r3, r2
 801a756:	009b      	lsls	r3, r3, #2
 801a758:	4413      	add	r3, r2
 801a75a:	009b      	lsls	r3, r3, #2
 801a75c:	440b      	add	r3, r1
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d0e4      	beq.n	801a72e <vTaskSwitchContext+0x46>
 801a764:	68fa      	ldr	r2, [r7, #12]
 801a766:	4613      	mov	r3, r2
 801a768:	009b      	lsls	r3, r3, #2
 801a76a:	4413      	add	r3, r2
 801a76c:	009b      	lsls	r3, r3, #2
 801a76e:	4a13      	ldr	r2, [pc, #76]	; (801a7bc <vTaskSwitchContext+0xd4>)
 801a770:	4413      	add	r3, r2
 801a772:	60bb      	str	r3, [r7, #8]
 801a774:	68bb      	ldr	r3, [r7, #8]
 801a776:	685b      	ldr	r3, [r3, #4]
 801a778:	685a      	ldr	r2, [r3, #4]
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	605a      	str	r2, [r3, #4]
 801a77e:	68bb      	ldr	r3, [r7, #8]
 801a780:	685a      	ldr	r2, [r3, #4]
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	3308      	adds	r3, #8
 801a786:	429a      	cmp	r2, r3
 801a788:	d104      	bne.n	801a794 <vTaskSwitchContext+0xac>
 801a78a:	68bb      	ldr	r3, [r7, #8]
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	685a      	ldr	r2, [r3, #4]
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	605a      	str	r2, [r3, #4]
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	685b      	ldr	r3, [r3, #4]
 801a798:	68db      	ldr	r3, [r3, #12]
 801a79a:	4a06      	ldr	r2, [pc, #24]	; (801a7b4 <vTaskSwitchContext+0xcc>)
 801a79c:	6013      	str	r3, [r2, #0]
 801a79e:	4a06      	ldr	r2, [pc, #24]	; (801a7b8 <vTaskSwitchContext+0xd0>)
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	6013      	str	r3, [r2, #0]
}
 801a7a4:	bf00      	nop
 801a7a6:	3710      	adds	r7, #16
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bd80      	pop	{r7, pc}
 801a7ac:	24003008 	.word	0x24003008
 801a7b0:	24002ff4 	.word	0x24002ff4
 801a7b4:	24002b0c 	.word	0x24002b0c
 801a7b8:	24002fe8 	.word	0x24002fe8
 801a7bc:	24002b10 	.word	0x24002b10

0801a7c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b084      	sub	sp, #16
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d10a      	bne.n	801a7e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d4:	f383 8811 	msr	BASEPRI, r3
 801a7d8:	f3bf 8f6f 	isb	sy
 801a7dc:	f3bf 8f4f 	dsb	sy
 801a7e0:	60fb      	str	r3, [r7, #12]
}
 801a7e2:	bf00      	nop
 801a7e4:	e7fe      	b.n	801a7e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a7e6:	4b07      	ldr	r3, [pc, #28]	; (801a804 <vTaskPlaceOnEventList+0x44>)
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	3318      	adds	r3, #24
 801a7ec:	4619      	mov	r1, r3
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f7fe fd6b 	bl	80192ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a7f4:	2101      	movs	r1, #1
 801a7f6:	6838      	ldr	r0, [r7, #0]
 801a7f8:	f000 fb32 	bl	801ae60 <prvAddCurrentTaskToDelayedList>
}
 801a7fc:	bf00      	nop
 801a7fe:	3710      	adds	r7, #16
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}
 801a804:	24002b0c 	.word	0x24002b0c

0801a808 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b086      	sub	sp, #24
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d10a      	bne.n	801a830 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a81e:	f383 8811 	msr	BASEPRI, r3
 801a822:	f3bf 8f6f 	isb	sy
 801a826:	f3bf 8f4f 	dsb	sy
 801a82a:	617b      	str	r3, [r7, #20]
}
 801a82c:	bf00      	nop
 801a82e:	e7fe      	b.n	801a82e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801a830:	4b11      	ldr	r3, [pc, #68]	; (801a878 <vTaskPlaceOnUnorderedEventList+0x70>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d10a      	bne.n	801a84e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a83c:	f383 8811 	msr	BASEPRI, r3
 801a840:	f3bf 8f6f 	isb	sy
 801a844:	f3bf 8f4f 	dsb	sy
 801a848:	613b      	str	r3, [r7, #16]
}
 801a84a:	bf00      	nop
 801a84c:	e7fe      	b.n	801a84c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a84e:	4b0b      	ldr	r3, [pc, #44]	; (801a87c <vTaskPlaceOnUnorderedEventList+0x74>)
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	68ba      	ldr	r2, [r7, #8]
 801a854:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801a858:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a85a:	4b08      	ldr	r3, [pc, #32]	; (801a87c <vTaskPlaceOnUnorderedEventList+0x74>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	3318      	adds	r3, #24
 801a860:	4619      	mov	r1, r3
 801a862:	68f8      	ldr	r0, [r7, #12]
 801a864:	f7fe fd0d 	bl	8019282 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a868:	2101      	movs	r1, #1
 801a86a:	6878      	ldr	r0, [r7, #4]
 801a86c:	f000 faf8 	bl	801ae60 <prvAddCurrentTaskToDelayedList>
}
 801a870:	bf00      	nop
 801a872:	3718      	adds	r7, #24
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}
 801a878:	24003008 	.word	0x24003008
 801a87c:	24002b0c 	.word	0x24002b0c

0801a880 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a880:	b580      	push	{r7, lr}
 801a882:	b086      	sub	sp, #24
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d10a      	bne.n	801a8a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a896:	f383 8811 	msr	BASEPRI, r3
 801a89a:	f3bf 8f6f 	isb	sy
 801a89e:	f3bf 8f4f 	dsb	sy
 801a8a2:	617b      	str	r3, [r7, #20]
}
 801a8a4:	bf00      	nop
 801a8a6:	e7fe      	b.n	801a8a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a8a8:	4b0a      	ldr	r3, [pc, #40]	; (801a8d4 <vTaskPlaceOnEventListRestricted+0x54>)
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	3318      	adds	r3, #24
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	68f8      	ldr	r0, [r7, #12]
 801a8b2:	f7fe fce6 	bl	8019282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d002      	beq.n	801a8c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a8bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a8c2:	6879      	ldr	r1, [r7, #4]
 801a8c4:	68b8      	ldr	r0, [r7, #8]
 801a8c6:	f000 facb 	bl	801ae60 <prvAddCurrentTaskToDelayedList>
	}
 801a8ca:	bf00      	nop
 801a8cc:	3718      	adds	r7, #24
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bd80      	pop	{r7, pc}
 801a8d2:	bf00      	nop
 801a8d4:	24002b0c 	.word	0x24002b0c

0801a8d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b086      	sub	sp, #24
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	68db      	ldr	r3, [r3, #12]
 801a8e4:	68db      	ldr	r3, [r3, #12]
 801a8e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a8e8:	693b      	ldr	r3, [r7, #16]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d10a      	bne.n	801a904 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8f2:	f383 8811 	msr	BASEPRI, r3
 801a8f6:	f3bf 8f6f 	isb	sy
 801a8fa:	f3bf 8f4f 	dsb	sy
 801a8fe:	60fb      	str	r3, [r7, #12]
}
 801a900:	bf00      	nop
 801a902:	e7fe      	b.n	801a902 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a904:	693b      	ldr	r3, [r7, #16]
 801a906:	3318      	adds	r3, #24
 801a908:	4618      	mov	r0, r3
 801a90a:	f7fe fd17 	bl	801933c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a90e:	4b1e      	ldr	r3, [pc, #120]	; (801a988 <xTaskRemoveFromEventList+0xb0>)
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d11d      	bne.n	801a952 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a916:	693b      	ldr	r3, [r7, #16]
 801a918:	3304      	adds	r3, #4
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7fe fd0e 	bl	801933c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a924:	4b19      	ldr	r3, [pc, #100]	; (801a98c <xTaskRemoveFromEventList+0xb4>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	429a      	cmp	r2, r3
 801a92a:	d903      	bls.n	801a934 <xTaskRemoveFromEventList+0x5c>
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a930:	4a16      	ldr	r2, [pc, #88]	; (801a98c <xTaskRemoveFromEventList+0xb4>)
 801a932:	6013      	str	r3, [r2, #0]
 801a934:	693b      	ldr	r3, [r7, #16]
 801a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a938:	4613      	mov	r3, r2
 801a93a:	009b      	lsls	r3, r3, #2
 801a93c:	4413      	add	r3, r2
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	4a13      	ldr	r2, [pc, #76]	; (801a990 <xTaskRemoveFromEventList+0xb8>)
 801a942:	441a      	add	r2, r3
 801a944:	693b      	ldr	r3, [r7, #16]
 801a946:	3304      	adds	r3, #4
 801a948:	4619      	mov	r1, r3
 801a94a:	4610      	mov	r0, r2
 801a94c:	f7fe fc99 	bl	8019282 <vListInsertEnd>
 801a950:	e005      	b.n	801a95e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	3318      	adds	r3, #24
 801a956:	4619      	mov	r1, r3
 801a958:	480e      	ldr	r0, [pc, #56]	; (801a994 <xTaskRemoveFromEventList+0xbc>)
 801a95a:	f7fe fc92 	bl	8019282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a95e:	693b      	ldr	r3, [r7, #16]
 801a960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a962:	4b0d      	ldr	r3, [pc, #52]	; (801a998 <xTaskRemoveFromEventList+0xc0>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a968:	429a      	cmp	r2, r3
 801a96a:	d905      	bls.n	801a978 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a96c:	2301      	movs	r3, #1
 801a96e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a970:	4b0a      	ldr	r3, [pc, #40]	; (801a99c <xTaskRemoveFromEventList+0xc4>)
 801a972:	2201      	movs	r2, #1
 801a974:	601a      	str	r2, [r3, #0]
 801a976:	e001      	b.n	801a97c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a978:	2300      	movs	r3, #0
 801a97a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a97c:	697b      	ldr	r3, [r7, #20]
}
 801a97e:	4618      	mov	r0, r3
 801a980:	3718      	adds	r7, #24
 801a982:	46bd      	mov	sp, r7
 801a984:	bd80      	pop	{r7, pc}
 801a986:	bf00      	nop
 801a988:	24003008 	.word	0x24003008
 801a98c:	24002fe8 	.word	0x24002fe8
 801a990:	24002b10 	.word	0x24002b10
 801a994:	24002fa0 	.word	0x24002fa0
 801a998:	24002b0c 	.word	0x24002b0c
 801a99c:	24002ff4 	.word	0x24002ff4

0801a9a0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b086      	sub	sp, #24
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801a9aa:	4b29      	ldr	r3, [pc, #164]	; (801aa50 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d10a      	bne.n	801a9c8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9b6:	f383 8811 	msr	BASEPRI, r3
 801a9ba:	f3bf 8f6f 	isb	sy
 801a9be:	f3bf 8f4f 	dsb	sy
 801a9c2:	613b      	str	r3, [r7, #16]
}
 801a9c4:	bf00      	nop
 801a9c6:	e7fe      	b.n	801a9c6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	68db      	ldr	r3, [r3, #12]
 801a9d6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d10a      	bne.n	801a9f4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9e2:	f383 8811 	msr	BASEPRI, r3
 801a9e6:	f3bf 8f6f 	isb	sy
 801a9ea:	f3bf 8f4f 	dsb	sy
 801a9ee:	60fb      	str	r3, [r7, #12]
}
 801a9f0:	bf00      	nop
 801a9f2:	e7fe      	b.n	801a9f2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801a9f4:	6878      	ldr	r0, [r7, #4]
 801a9f6:	f7fe fca1 	bl	801933c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a9fa:	697b      	ldr	r3, [r7, #20]
 801a9fc:	3304      	adds	r3, #4
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f7fe fc9c 	bl	801933c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801aa04:	697b      	ldr	r3, [r7, #20]
 801aa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa08:	4b12      	ldr	r3, [pc, #72]	; (801aa54 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	429a      	cmp	r2, r3
 801aa0e:	d903      	bls.n	801aa18 <vTaskRemoveFromUnorderedEventList+0x78>
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa14:	4a0f      	ldr	r2, [pc, #60]	; (801aa54 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801aa16:	6013      	str	r3, [r2, #0]
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa1c:	4613      	mov	r3, r2
 801aa1e:	009b      	lsls	r3, r3, #2
 801aa20:	4413      	add	r3, r2
 801aa22:	009b      	lsls	r3, r3, #2
 801aa24:	4a0c      	ldr	r2, [pc, #48]	; (801aa58 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801aa26:	441a      	add	r2, r3
 801aa28:	697b      	ldr	r3, [r7, #20]
 801aa2a:	3304      	adds	r3, #4
 801aa2c:	4619      	mov	r1, r3
 801aa2e:	4610      	mov	r0, r2
 801aa30:	f7fe fc27 	bl	8019282 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801aa34:	697b      	ldr	r3, [r7, #20]
 801aa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa38:	4b08      	ldr	r3, [pc, #32]	; (801aa5c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa3e:	429a      	cmp	r2, r3
 801aa40:	d902      	bls.n	801aa48 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801aa42:	4b07      	ldr	r3, [pc, #28]	; (801aa60 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801aa44:	2201      	movs	r2, #1
 801aa46:	601a      	str	r2, [r3, #0]
	}
}
 801aa48:	bf00      	nop
 801aa4a:	3718      	adds	r7, #24
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	bd80      	pop	{r7, pc}
 801aa50:	24003008 	.word	0x24003008
 801aa54:	24002fe8 	.word	0x24002fe8
 801aa58:	24002b10 	.word	0x24002b10
 801aa5c:	24002b0c 	.word	0x24002b0c
 801aa60:	24002ff4 	.word	0x24002ff4

0801aa64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801aa6c:	4b06      	ldr	r3, [pc, #24]	; (801aa88 <vTaskInternalSetTimeOutState+0x24>)
 801aa6e:	681a      	ldr	r2, [r3, #0]
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801aa74:	4b05      	ldr	r3, [pc, #20]	; (801aa8c <vTaskInternalSetTimeOutState+0x28>)
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	605a      	str	r2, [r3, #4]
}
 801aa7c:	bf00      	nop
 801aa7e:	370c      	adds	r7, #12
 801aa80:	46bd      	mov	sp, r7
 801aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa86:	4770      	bx	lr
 801aa88:	24002ff8 	.word	0x24002ff8
 801aa8c:	24002fe4 	.word	0x24002fe4

0801aa90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b088      	sub	sp, #32
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
 801aa98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d10a      	bne.n	801aab6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaa4:	f383 8811 	msr	BASEPRI, r3
 801aaa8:	f3bf 8f6f 	isb	sy
 801aaac:	f3bf 8f4f 	dsb	sy
 801aab0:	613b      	str	r3, [r7, #16]
}
 801aab2:	bf00      	nop
 801aab4:	e7fe      	b.n	801aab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d10a      	bne.n	801aad2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aac0:	f383 8811 	msr	BASEPRI, r3
 801aac4:	f3bf 8f6f 	isb	sy
 801aac8:	f3bf 8f4f 	dsb	sy
 801aacc:	60fb      	str	r3, [r7, #12]
}
 801aace:	bf00      	nop
 801aad0:	e7fe      	b.n	801aad0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801aad2:	f000 feb7 	bl	801b844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801aad6:	4b1d      	ldr	r3, [pc, #116]	; (801ab4c <xTaskCheckForTimeOut+0xbc>)
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	685b      	ldr	r3, [r3, #4]
 801aae0:	69ba      	ldr	r2, [r7, #24]
 801aae2:	1ad3      	subs	r3, r2, r3
 801aae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801aae6:	683b      	ldr	r3, [r7, #0]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaee:	d102      	bne.n	801aaf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	61fb      	str	r3, [r7, #28]
 801aaf4:	e023      	b.n	801ab3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	4b15      	ldr	r3, [pc, #84]	; (801ab50 <xTaskCheckForTimeOut+0xc0>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d007      	beq.n	801ab12 <xTaskCheckForTimeOut+0x82>
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	69ba      	ldr	r2, [r7, #24]
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	d302      	bcc.n	801ab12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	61fb      	str	r3, [r7, #28]
 801ab10:	e015      	b.n	801ab3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	697a      	ldr	r2, [r7, #20]
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d20b      	bcs.n	801ab34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	681a      	ldr	r2, [r3, #0]
 801ab20:	697b      	ldr	r3, [r7, #20]
 801ab22:	1ad2      	subs	r2, r2, r3
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801ab28:	6878      	ldr	r0, [r7, #4]
 801ab2a:	f7ff ff9b 	bl	801aa64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	61fb      	str	r3, [r7, #28]
 801ab32:	e004      	b.n	801ab3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	2200      	movs	r2, #0
 801ab38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801ab3a:	2301      	movs	r3, #1
 801ab3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801ab3e:	f000 feb1 	bl	801b8a4 <vPortExitCritical>

	return xReturn;
 801ab42:	69fb      	ldr	r3, [r7, #28]
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3720      	adds	r7, #32
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	24002fe4 	.word	0x24002fe4
 801ab50:	24002ff8 	.word	0x24002ff8

0801ab54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801ab54:	b480      	push	{r7}
 801ab56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801ab58:	4b03      	ldr	r3, [pc, #12]	; (801ab68 <vTaskMissedYield+0x14>)
 801ab5a:	2201      	movs	r2, #1
 801ab5c:	601a      	str	r2, [r3, #0]
}
 801ab5e:	bf00      	nop
 801ab60:	46bd      	mov	sp, r7
 801ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab66:	4770      	bx	lr
 801ab68:	24002ff4 	.word	0x24002ff4

0801ab6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801ab74:	f000 f852 	bl	801ac1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801ab78:	4b06      	ldr	r3, [pc, #24]	; (801ab94 <prvIdleTask+0x28>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b01      	cmp	r3, #1
 801ab7e:	d9f9      	bls.n	801ab74 <prvIdleTask+0x8>
			{
				taskYIELD();
 801ab80:	4b05      	ldr	r3, [pc, #20]	; (801ab98 <prvIdleTask+0x2c>)
 801ab82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab86:	601a      	str	r2, [r3, #0]
 801ab88:	f3bf 8f4f 	dsb	sy
 801ab8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801ab90:	e7f0      	b.n	801ab74 <prvIdleTask+0x8>
 801ab92:	bf00      	nop
 801ab94:	24002b10 	.word	0x24002b10
 801ab98:	e000ed04 	.word	0xe000ed04

0801ab9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b082      	sub	sp, #8
 801aba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801aba2:	2300      	movs	r3, #0
 801aba4:	607b      	str	r3, [r7, #4]
 801aba6:	e00c      	b.n	801abc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801aba8:	687a      	ldr	r2, [r7, #4]
 801abaa:	4613      	mov	r3, r2
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	4413      	add	r3, r2
 801abb0:	009b      	lsls	r3, r3, #2
 801abb2:	4a12      	ldr	r2, [pc, #72]	; (801abfc <prvInitialiseTaskLists+0x60>)
 801abb4:	4413      	add	r3, r2
 801abb6:	4618      	mov	r0, r3
 801abb8:	f7fe fb36 	bl	8019228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	3301      	adds	r3, #1
 801abc0:	607b      	str	r3, [r7, #4]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2b37      	cmp	r3, #55	; 0x37
 801abc6:	d9ef      	bls.n	801aba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801abc8:	480d      	ldr	r0, [pc, #52]	; (801ac00 <prvInitialiseTaskLists+0x64>)
 801abca:	f7fe fb2d 	bl	8019228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801abce:	480d      	ldr	r0, [pc, #52]	; (801ac04 <prvInitialiseTaskLists+0x68>)
 801abd0:	f7fe fb2a 	bl	8019228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801abd4:	480c      	ldr	r0, [pc, #48]	; (801ac08 <prvInitialiseTaskLists+0x6c>)
 801abd6:	f7fe fb27 	bl	8019228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801abda:	480c      	ldr	r0, [pc, #48]	; (801ac0c <prvInitialiseTaskLists+0x70>)
 801abdc:	f7fe fb24 	bl	8019228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801abe0:	480b      	ldr	r0, [pc, #44]	; (801ac10 <prvInitialiseTaskLists+0x74>)
 801abe2:	f7fe fb21 	bl	8019228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801abe6:	4b0b      	ldr	r3, [pc, #44]	; (801ac14 <prvInitialiseTaskLists+0x78>)
 801abe8:	4a05      	ldr	r2, [pc, #20]	; (801ac00 <prvInitialiseTaskLists+0x64>)
 801abea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801abec:	4b0a      	ldr	r3, [pc, #40]	; (801ac18 <prvInitialiseTaskLists+0x7c>)
 801abee:	4a05      	ldr	r2, [pc, #20]	; (801ac04 <prvInitialiseTaskLists+0x68>)
 801abf0:	601a      	str	r2, [r3, #0]
}
 801abf2:	bf00      	nop
 801abf4:	3708      	adds	r7, #8
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
 801abfa:	bf00      	nop
 801abfc:	24002b10 	.word	0x24002b10
 801ac00:	24002f70 	.word	0x24002f70
 801ac04:	24002f84 	.word	0x24002f84
 801ac08:	24002fa0 	.word	0x24002fa0
 801ac0c:	24002fb4 	.word	0x24002fb4
 801ac10:	24002fcc 	.word	0x24002fcc
 801ac14:	24002f98 	.word	0x24002f98
 801ac18:	24002f9c 	.word	0x24002f9c

0801ac1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b082      	sub	sp, #8
 801ac20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ac22:	e019      	b.n	801ac58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801ac24:	f000 fe0e 	bl	801b844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac28:	4b10      	ldr	r3, [pc, #64]	; (801ac6c <prvCheckTasksWaitingTermination+0x50>)
 801ac2a:	68db      	ldr	r3, [r3, #12]
 801ac2c:	68db      	ldr	r3, [r3, #12]
 801ac2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	3304      	adds	r3, #4
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7fe fb81 	bl	801933c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801ac3a:	4b0d      	ldr	r3, [pc, #52]	; (801ac70 <prvCheckTasksWaitingTermination+0x54>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	3b01      	subs	r3, #1
 801ac40:	4a0b      	ldr	r2, [pc, #44]	; (801ac70 <prvCheckTasksWaitingTermination+0x54>)
 801ac42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801ac44:	4b0b      	ldr	r3, [pc, #44]	; (801ac74 <prvCheckTasksWaitingTermination+0x58>)
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	3b01      	subs	r3, #1
 801ac4a:	4a0a      	ldr	r2, [pc, #40]	; (801ac74 <prvCheckTasksWaitingTermination+0x58>)
 801ac4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801ac4e:	f000 fe29 	bl	801b8a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801ac52:	6878      	ldr	r0, [r7, #4]
 801ac54:	f000 f810 	bl	801ac78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ac58:	4b06      	ldr	r3, [pc, #24]	; (801ac74 <prvCheckTasksWaitingTermination+0x58>)
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d1e1      	bne.n	801ac24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801ac60:	bf00      	nop
 801ac62:	bf00      	nop
 801ac64:	3708      	adds	r7, #8
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}
 801ac6a:	bf00      	nop
 801ac6c:	24002fb4 	.word	0x24002fb4
 801ac70:	24002fe0 	.word	0x24002fe0
 801ac74:	24002fc8 	.word	0x24002fc8

0801ac78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d108      	bne.n	801ac9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f000 ffc6 	bl	801bc20 <vPortFree>
				vPortFree( pxTCB );
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f000 ffc3 	bl	801bc20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801ac9a:	e018      	b.n	801acce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d103      	bne.n	801acae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801aca6:	6878      	ldr	r0, [r7, #4]
 801aca8:	f000 ffba 	bl	801bc20 <vPortFree>
	}
 801acac:	e00f      	b.n	801acce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d00a      	beq.n	801acce <prvDeleteTCB+0x56>
	__asm volatile
 801acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acbc:	f383 8811 	msr	BASEPRI, r3
 801acc0:	f3bf 8f6f 	isb	sy
 801acc4:	f3bf 8f4f 	dsb	sy
 801acc8:	60fb      	str	r3, [r7, #12]
}
 801acca:	bf00      	nop
 801accc:	e7fe      	b.n	801accc <prvDeleteTCB+0x54>
	}
 801acce:	bf00      	nop
 801acd0:	3710      	adds	r7, #16
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
	...

0801acd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801acd8:	b480      	push	{r7}
 801acda:	b083      	sub	sp, #12
 801acdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801acde:	4b0c      	ldr	r3, [pc, #48]	; (801ad10 <prvResetNextTaskUnblockTime+0x38>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d104      	bne.n	801acf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801ace8:	4b0a      	ldr	r3, [pc, #40]	; (801ad14 <prvResetNextTaskUnblockTime+0x3c>)
 801acea:	f04f 32ff 	mov.w	r2, #4294967295
 801acee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801acf0:	e008      	b.n	801ad04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801acf2:	4b07      	ldr	r3, [pc, #28]	; (801ad10 <prvResetNextTaskUnblockTime+0x38>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	68db      	ldr	r3, [r3, #12]
 801acf8:	68db      	ldr	r3, [r3, #12]
 801acfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	4a04      	ldr	r2, [pc, #16]	; (801ad14 <prvResetNextTaskUnblockTime+0x3c>)
 801ad02:	6013      	str	r3, [r2, #0]
}
 801ad04:	bf00      	nop
 801ad06:	370c      	adds	r7, #12
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0e:	4770      	bx	lr
 801ad10:	24002f98 	.word	0x24002f98
 801ad14:	24003000 	.word	0x24003000

0801ad18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801ad18:	b480      	push	{r7}
 801ad1a:	b083      	sub	sp, #12
 801ad1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801ad1e:	4b0b      	ldr	r3, [pc, #44]	; (801ad4c <xTaskGetSchedulerState+0x34>)
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d102      	bne.n	801ad2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801ad26:	2301      	movs	r3, #1
 801ad28:	607b      	str	r3, [r7, #4]
 801ad2a:	e008      	b.n	801ad3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ad2c:	4b08      	ldr	r3, [pc, #32]	; (801ad50 <xTaskGetSchedulerState+0x38>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d102      	bne.n	801ad3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801ad34:	2302      	movs	r3, #2
 801ad36:	607b      	str	r3, [r7, #4]
 801ad38:	e001      	b.n	801ad3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801ad3e:	687b      	ldr	r3, [r7, #4]
	}
 801ad40:	4618      	mov	r0, r3
 801ad42:	370c      	adds	r7, #12
 801ad44:	46bd      	mov	sp, r7
 801ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad4a:	4770      	bx	lr
 801ad4c:	24002fec 	.word	0x24002fec
 801ad50:	24003008 	.word	0x24003008

0801ad54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b086      	sub	sp, #24
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801ad60:	2300      	movs	r3, #0
 801ad62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d056      	beq.n	801ae18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801ad6a:	4b2e      	ldr	r3, [pc, #184]	; (801ae24 <xTaskPriorityDisinherit+0xd0>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	693a      	ldr	r2, [r7, #16]
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d00a      	beq.n	801ad8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad78:	f383 8811 	msr	BASEPRI, r3
 801ad7c:	f3bf 8f6f 	isb	sy
 801ad80:	f3bf 8f4f 	dsb	sy
 801ad84:	60fb      	str	r3, [r7, #12]
}
 801ad86:	bf00      	nop
 801ad88:	e7fe      	b.n	801ad88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801ad8a:	693b      	ldr	r3, [r7, #16]
 801ad8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d10a      	bne.n	801ada8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad96:	f383 8811 	msr	BASEPRI, r3
 801ad9a:	f3bf 8f6f 	isb	sy
 801ad9e:	f3bf 8f4f 	dsb	sy
 801ada2:	60bb      	str	r3, [r7, #8]
}
 801ada4:	bf00      	nop
 801ada6:	e7fe      	b.n	801ada6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801ada8:	693b      	ldr	r3, [r7, #16]
 801adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adac:	1e5a      	subs	r2, r3, #1
 801adae:	693b      	ldr	r3, [r7, #16]
 801adb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adb6:	693b      	ldr	r3, [r7, #16]
 801adb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801adba:	429a      	cmp	r2, r3
 801adbc:	d02c      	beq.n	801ae18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801adbe:	693b      	ldr	r3, [r7, #16]
 801adc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d128      	bne.n	801ae18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801adc6:	693b      	ldr	r3, [r7, #16]
 801adc8:	3304      	adds	r3, #4
 801adca:	4618      	mov	r0, r3
 801adcc:	f7fe fab6 	bl	801933c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801add0:	693b      	ldr	r3, [r7, #16]
 801add2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801add4:	693b      	ldr	r3, [r7, #16]
 801add6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801add8:	693b      	ldr	r3, [r7, #16]
 801adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801addc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ade0:	693b      	ldr	r3, [r7, #16]
 801ade2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ade4:	693b      	ldr	r3, [r7, #16]
 801ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ade8:	4b0f      	ldr	r3, [pc, #60]	; (801ae28 <xTaskPriorityDisinherit+0xd4>)
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	429a      	cmp	r2, r3
 801adee:	d903      	bls.n	801adf8 <xTaskPriorityDisinherit+0xa4>
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adf4:	4a0c      	ldr	r2, [pc, #48]	; (801ae28 <xTaskPriorityDisinherit+0xd4>)
 801adf6:	6013      	str	r3, [r2, #0]
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adfc:	4613      	mov	r3, r2
 801adfe:	009b      	lsls	r3, r3, #2
 801ae00:	4413      	add	r3, r2
 801ae02:	009b      	lsls	r3, r3, #2
 801ae04:	4a09      	ldr	r2, [pc, #36]	; (801ae2c <xTaskPriorityDisinherit+0xd8>)
 801ae06:	441a      	add	r2, r3
 801ae08:	693b      	ldr	r3, [r7, #16]
 801ae0a:	3304      	adds	r3, #4
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	4610      	mov	r0, r2
 801ae10:	f7fe fa37 	bl	8019282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ae14:	2301      	movs	r3, #1
 801ae16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ae18:	697b      	ldr	r3, [r7, #20]
	}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3718      	adds	r7, #24
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
 801ae22:	bf00      	nop
 801ae24:	24002b0c 	.word	0x24002b0c
 801ae28:	24002fe8 	.word	0x24002fe8
 801ae2c:	24002b10 	.word	0x24002b10

0801ae30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801ae30:	b480      	push	{r7}
 801ae32:	b083      	sub	sp, #12
 801ae34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801ae36:	4b09      	ldr	r3, [pc, #36]	; (801ae5c <uxTaskResetEventItemValue+0x2c>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	699b      	ldr	r3, [r3, #24]
 801ae3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae3e:	4b07      	ldr	r3, [pc, #28]	; (801ae5c <uxTaskResetEventItemValue+0x2c>)
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae44:	4b05      	ldr	r3, [pc, #20]	; (801ae5c <uxTaskResetEventItemValue+0x2c>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801ae4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801ae4e:	687b      	ldr	r3, [r7, #4]
}
 801ae50:	4618      	mov	r0, r3
 801ae52:	370c      	adds	r7, #12
 801ae54:	46bd      	mov	sp, r7
 801ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5a:	4770      	bx	lr
 801ae5c:	24002b0c 	.word	0x24002b0c

0801ae60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b084      	sub	sp, #16
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
 801ae68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ae6a:	4b21      	ldr	r3, [pc, #132]	; (801aef0 <prvAddCurrentTaskToDelayedList+0x90>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ae70:	4b20      	ldr	r3, [pc, #128]	; (801aef4 <prvAddCurrentTaskToDelayedList+0x94>)
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	3304      	adds	r3, #4
 801ae76:	4618      	mov	r0, r3
 801ae78:	f7fe fa60 	bl	801933c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae82:	d10a      	bne.n	801ae9a <prvAddCurrentTaskToDelayedList+0x3a>
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d007      	beq.n	801ae9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ae8a:	4b1a      	ldr	r3, [pc, #104]	; (801aef4 <prvAddCurrentTaskToDelayedList+0x94>)
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	3304      	adds	r3, #4
 801ae90:	4619      	mov	r1, r3
 801ae92:	4819      	ldr	r0, [pc, #100]	; (801aef8 <prvAddCurrentTaskToDelayedList+0x98>)
 801ae94:	f7fe f9f5 	bl	8019282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ae98:	e026      	b.n	801aee8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ae9a:	68fa      	ldr	r2, [r7, #12]
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	4413      	add	r3, r2
 801aea0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801aea2:	4b14      	ldr	r3, [pc, #80]	; (801aef4 <prvAddCurrentTaskToDelayedList+0x94>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	68ba      	ldr	r2, [r7, #8]
 801aea8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801aeaa:	68ba      	ldr	r2, [r7, #8]
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	429a      	cmp	r2, r3
 801aeb0:	d209      	bcs.n	801aec6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aeb2:	4b12      	ldr	r3, [pc, #72]	; (801aefc <prvAddCurrentTaskToDelayedList+0x9c>)
 801aeb4:	681a      	ldr	r2, [r3, #0]
 801aeb6:	4b0f      	ldr	r3, [pc, #60]	; (801aef4 <prvAddCurrentTaskToDelayedList+0x94>)
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	3304      	adds	r3, #4
 801aebc:	4619      	mov	r1, r3
 801aebe:	4610      	mov	r0, r2
 801aec0:	f7fe fa03 	bl	80192ca <vListInsert>
}
 801aec4:	e010      	b.n	801aee8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aec6:	4b0e      	ldr	r3, [pc, #56]	; (801af00 <prvAddCurrentTaskToDelayedList+0xa0>)
 801aec8:	681a      	ldr	r2, [r3, #0]
 801aeca:	4b0a      	ldr	r3, [pc, #40]	; (801aef4 <prvAddCurrentTaskToDelayedList+0x94>)
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	3304      	adds	r3, #4
 801aed0:	4619      	mov	r1, r3
 801aed2:	4610      	mov	r0, r2
 801aed4:	f7fe f9f9 	bl	80192ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801aed8:	4b0a      	ldr	r3, [pc, #40]	; (801af04 <prvAddCurrentTaskToDelayedList+0xa4>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	68ba      	ldr	r2, [r7, #8]
 801aede:	429a      	cmp	r2, r3
 801aee0:	d202      	bcs.n	801aee8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801aee2:	4a08      	ldr	r2, [pc, #32]	; (801af04 <prvAddCurrentTaskToDelayedList+0xa4>)
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	6013      	str	r3, [r2, #0]
}
 801aee8:	bf00      	nop
 801aeea:	3710      	adds	r7, #16
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}
 801aef0:	24002fe4 	.word	0x24002fe4
 801aef4:	24002b0c 	.word	0x24002b0c
 801aef8:	24002fcc 	.word	0x24002fcc
 801aefc:	24002f9c 	.word	0x24002f9c
 801af00:	24002f98 	.word	0x24002f98
 801af04:	24003000 	.word	0x24003000

0801af08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b08a      	sub	sp, #40	; 0x28
 801af0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801af0e:	2300      	movs	r3, #0
 801af10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801af12:	f000 fb07 	bl	801b524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801af16:	4b1c      	ldr	r3, [pc, #112]	; (801af88 <xTimerCreateTimerTask+0x80>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d021      	beq.n	801af62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801af1e:	2300      	movs	r3, #0
 801af20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801af22:	2300      	movs	r3, #0
 801af24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801af26:	1d3a      	adds	r2, r7, #4
 801af28:	f107 0108 	add.w	r1, r7, #8
 801af2c:	f107 030c 	add.w	r3, r7, #12
 801af30:	4618      	mov	r0, r3
 801af32:	f7fd fef3 	bl	8018d1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801af36:	6879      	ldr	r1, [r7, #4]
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	68fa      	ldr	r2, [r7, #12]
 801af3c:	9202      	str	r2, [sp, #8]
 801af3e:	9301      	str	r3, [sp, #4]
 801af40:	2302      	movs	r3, #2
 801af42:	9300      	str	r3, [sp, #0]
 801af44:	2300      	movs	r3, #0
 801af46:	460a      	mov	r2, r1
 801af48:	4910      	ldr	r1, [pc, #64]	; (801af8c <xTimerCreateTimerTask+0x84>)
 801af4a:	4811      	ldr	r0, [pc, #68]	; (801af90 <xTimerCreateTimerTask+0x88>)
 801af4c:	f7fe ff0c 	bl	8019d68 <xTaskCreateStatic>
 801af50:	4603      	mov	r3, r0
 801af52:	4a10      	ldr	r2, [pc, #64]	; (801af94 <xTimerCreateTimerTask+0x8c>)
 801af54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801af56:	4b0f      	ldr	r3, [pc, #60]	; (801af94 <xTimerCreateTimerTask+0x8c>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d001      	beq.n	801af62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801af5e:	2301      	movs	r3, #1
 801af60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d10a      	bne.n	801af7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 801af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af6c:	f383 8811 	msr	BASEPRI, r3
 801af70:	f3bf 8f6f 	isb	sy
 801af74:	f3bf 8f4f 	dsb	sy
 801af78:	613b      	str	r3, [r7, #16]
}
 801af7a:	bf00      	nop
 801af7c:	e7fe      	b.n	801af7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801af7e:	697b      	ldr	r3, [r7, #20]
}
 801af80:	4618      	mov	r0, r3
 801af82:	3718      	adds	r7, #24
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}
 801af88:	2400303c 	.word	0x2400303c
 801af8c:	0801c00c 	.word	0x0801c00c
 801af90:	0801b0cd 	.word	0x0801b0cd
 801af94:	24003040 	.word	0x24003040

0801af98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b08a      	sub	sp, #40	; 0x28
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	60f8      	str	r0, [r7, #12]
 801afa0:	60b9      	str	r1, [r7, #8]
 801afa2:	607a      	str	r2, [r7, #4]
 801afa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801afa6:	2300      	movs	r3, #0
 801afa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d10a      	bne.n	801afc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 801afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afb4:	f383 8811 	msr	BASEPRI, r3
 801afb8:	f3bf 8f6f 	isb	sy
 801afbc:	f3bf 8f4f 	dsb	sy
 801afc0:	623b      	str	r3, [r7, #32]
}
 801afc2:	bf00      	nop
 801afc4:	e7fe      	b.n	801afc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801afc6:	4b1a      	ldr	r3, [pc, #104]	; (801b030 <xTimerGenericCommand+0x98>)
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d02a      	beq.n	801b024 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801afda:	68bb      	ldr	r3, [r7, #8]
 801afdc:	2b05      	cmp	r3, #5
 801afde:	dc18      	bgt.n	801b012 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801afe0:	f7ff fe9a 	bl	801ad18 <xTaskGetSchedulerState>
 801afe4:	4603      	mov	r3, r0
 801afe6:	2b02      	cmp	r3, #2
 801afe8:	d109      	bne.n	801affe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801afea:	4b11      	ldr	r3, [pc, #68]	; (801b030 <xTimerGenericCommand+0x98>)
 801afec:	6818      	ldr	r0, [r3, #0]
 801afee:	f107 0110 	add.w	r1, r7, #16
 801aff2:	2300      	movs	r3, #0
 801aff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aff6:	f7fe facf 	bl	8019598 <xQueueGenericSend>
 801affa:	6278      	str	r0, [r7, #36]	; 0x24
 801affc:	e012      	b.n	801b024 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801affe:	4b0c      	ldr	r3, [pc, #48]	; (801b030 <xTimerGenericCommand+0x98>)
 801b000:	6818      	ldr	r0, [r3, #0]
 801b002:	f107 0110 	add.w	r1, r7, #16
 801b006:	2300      	movs	r3, #0
 801b008:	2200      	movs	r2, #0
 801b00a:	f7fe fac5 	bl	8019598 <xQueueGenericSend>
 801b00e:	6278      	str	r0, [r7, #36]	; 0x24
 801b010:	e008      	b.n	801b024 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b012:	4b07      	ldr	r3, [pc, #28]	; (801b030 <xTimerGenericCommand+0x98>)
 801b014:	6818      	ldr	r0, [r3, #0]
 801b016:	f107 0110 	add.w	r1, r7, #16
 801b01a:	2300      	movs	r3, #0
 801b01c:	683a      	ldr	r2, [r7, #0]
 801b01e:	f7fe fbb9 	bl	8019794 <xQueueGenericSendFromISR>
 801b022:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b026:	4618      	mov	r0, r3
 801b028:	3728      	adds	r7, #40	; 0x28
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bd80      	pop	{r7, pc}
 801b02e:	bf00      	nop
 801b030:	2400303c 	.word	0x2400303c

0801b034 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b088      	sub	sp, #32
 801b038:	af02      	add	r7, sp, #8
 801b03a:	6078      	str	r0, [r7, #4]
 801b03c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b03e:	4b22      	ldr	r3, [pc, #136]	; (801b0c8 <prvProcessExpiredTimer+0x94>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	68db      	ldr	r3, [r3, #12]
 801b044:	68db      	ldr	r3, [r3, #12]
 801b046:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b048:	697b      	ldr	r3, [r7, #20]
 801b04a:	3304      	adds	r3, #4
 801b04c:	4618      	mov	r0, r3
 801b04e:	f7fe f975 	bl	801933c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b058:	f003 0304 	and.w	r3, r3, #4
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d022      	beq.n	801b0a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	699a      	ldr	r2, [r3, #24]
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	18d1      	adds	r1, r2, r3
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	683a      	ldr	r2, [r7, #0]
 801b06c:	6978      	ldr	r0, [r7, #20]
 801b06e:	f000 f8d1 	bl	801b214 <prvInsertTimerInActiveList>
 801b072:	4603      	mov	r3, r0
 801b074:	2b00      	cmp	r3, #0
 801b076:	d01f      	beq.n	801b0b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b078:	2300      	movs	r3, #0
 801b07a:	9300      	str	r3, [sp, #0]
 801b07c:	2300      	movs	r3, #0
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	2100      	movs	r1, #0
 801b082:	6978      	ldr	r0, [r7, #20]
 801b084:	f7ff ff88 	bl	801af98 <xTimerGenericCommand>
 801b088:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b08a:	693b      	ldr	r3, [r7, #16]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d113      	bne.n	801b0b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b094:	f383 8811 	msr	BASEPRI, r3
 801b098:	f3bf 8f6f 	isb	sy
 801b09c:	f3bf 8f4f 	dsb	sy
 801b0a0:	60fb      	str	r3, [r7, #12]
}
 801b0a2:	bf00      	nop
 801b0a4:	e7fe      	b.n	801b0a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b0a6:	697b      	ldr	r3, [r7, #20]
 801b0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b0ac:	f023 0301 	bic.w	r3, r3, #1
 801b0b0:	b2da      	uxtb	r2, r3
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b0b8:	697b      	ldr	r3, [r7, #20]
 801b0ba:	6a1b      	ldr	r3, [r3, #32]
 801b0bc:	6978      	ldr	r0, [r7, #20]
 801b0be:	4798      	blx	r3
}
 801b0c0:	bf00      	nop
 801b0c2:	3718      	adds	r7, #24
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	24003034 	.word	0x24003034

0801b0cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b084      	sub	sp, #16
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b0d4:	f107 0308 	add.w	r3, r7, #8
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f000 f857 	bl	801b18c <prvGetNextExpireTime>
 801b0de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	4619      	mov	r1, r3
 801b0e4:	68f8      	ldr	r0, [r7, #12]
 801b0e6:	f000 f803 	bl	801b0f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b0ea:	f000 f8d5 	bl	801b298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b0ee:	e7f1      	b.n	801b0d4 <prvTimerTask+0x8>

0801b0f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b084      	sub	sp, #16
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
 801b0f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b0fa:	f7ff f977 	bl	801a3ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b0fe:	f107 0308 	add.w	r3, r7, #8
 801b102:	4618      	mov	r0, r3
 801b104:	f000 f866 	bl	801b1d4 <prvSampleTimeNow>
 801b108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d130      	bne.n	801b172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b110:	683b      	ldr	r3, [r7, #0]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d10a      	bne.n	801b12c <prvProcessTimerOrBlockTask+0x3c>
 801b116:	687a      	ldr	r2, [r7, #4]
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	429a      	cmp	r2, r3
 801b11c:	d806      	bhi.n	801b12c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b11e:	f7ff f973 	bl	801a408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b122:	68f9      	ldr	r1, [r7, #12]
 801b124:	6878      	ldr	r0, [r7, #4]
 801b126:	f7ff ff85 	bl	801b034 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b12a:	e024      	b.n	801b176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d008      	beq.n	801b144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b132:	4b13      	ldr	r3, [pc, #76]	; (801b180 <prvProcessTimerOrBlockTask+0x90>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d101      	bne.n	801b140 <prvProcessTimerOrBlockTask+0x50>
 801b13c:	2301      	movs	r3, #1
 801b13e:	e000      	b.n	801b142 <prvProcessTimerOrBlockTask+0x52>
 801b140:	2300      	movs	r3, #0
 801b142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b144:	4b0f      	ldr	r3, [pc, #60]	; (801b184 <prvProcessTimerOrBlockTask+0x94>)
 801b146:	6818      	ldr	r0, [r3, #0]
 801b148:	687a      	ldr	r2, [r7, #4]
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	1ad3      	subs	r3, r2, r3
 801b14e:	683a      	ldr	r2, [r7, #0]
 801b150:	4619      	mov	r1, r3
 801b152:	f7fe fdd5 	bl	8019d00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b156:	f7ff f957 	bl	801a408 <xTaskResumeAll>
 801b15a:	4603      	mov	r3, r0
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d10a      	bne.n	801b176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b160:	4b09      	ldr	r3, [pc, #36]	; (801b188 <prvProcessTimerOrBlockTask+0x98>)
 801b162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b166:	601a      	str	r2, [r3, #0]
 801b168:	f3bf 8f4f 	dsb	sy
 801b16c:	f3bf 8f6f 	isb	sy
}
 801b170:	e001      	b.n	801b176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b172:	f7ff f949 	bl	801a408 <xTaskResumeAll>
}
 801b176:	bf00      	nop
 801b178:	3710      	adds	r7, #16
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bd80      	pop	{r7, pc}
 801b17e:	bf00      	nop
 801b180:	24003038 	.word	0x24003038
 801b184:	2400303c 	.word	0x2400303c
 801b188:	e000ed04 	.word	0xe000ed04

0801b18c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b18c:	b480      	push	{r7}
 801b18e:	b085      	sub	sp, #20
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b194:	4b0e      	ldr	r3, [pc, #56]	; (801b1d0 <prvGetNextExpireTime+0x44>)
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d101      	bne.n	801b1a2 <prvGetNextExpireTime+0x16>
 801b19e:	2201      	movs	r2, #1
 801b1a0:	e000      	b.n	801b1a4 <prvGetNextExpireTime+0x18>
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d105      	bne.n	801b1bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b1b0:	4b07      	ldr	r3, [pc, #28]	; (801b1d0 <prvGetNextExpireTime+0x44>)
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	68db      	ldr	r3, [r3, #12]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	60fb      	str	r3, [r7, #12]
 801b1ba:	e001      	b.n	801b1c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b1c0:	68fb      	ldr	r3, [r7, #12]
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	3714      	adds	r7, #20
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1cc:	4770      	bx	lr
 801b1ce:	bf00      	nop
 801b1d0:	24003034 	.word	0x24003034

0801b1d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b084      	sub	sp, #16
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b1dc:	f7ff f9b2 	bl	801a544 <xTaskGetTickCount>
 801b1e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b1e2:	4b0b      	ldr	r3, [pc, #44]	; (801b210 <prvSampleTimeNow+0x3c>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	68fa      	ldr	r2, [r7, #12]
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d205      	bcs.n	801b1f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b1ec:	f000 f936 	bl	801b45c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	2201      	movs	r2, #1
 801b1f4:	601a      	str	r2, [r3, #0]
 801b1f6:	e002      	b.n	801b1fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b1fe:	4a04      	ldr	r2, [pc, #16]	; (801b210 <prvSampleTimeNow+0x3c>)
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b204:	68fb      	ldr	r3, [r7, #12]
}
 801b206:	4618      	mov	r0, r3
 801b208:	3710      	adds	r7, #16
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}
 801b20e:	bf00      	nop
 801b210:	24003044 	.word	0x24003044

0801b214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b086      	sub	sp, #24
 801b218:	af00      	add	r7, sp, #0
 801b21a:	60f8      	str	r0, [r7, #12]
 801b21c:	60b9      	str	r1, [r7, #8]
 801b21e:	607a      	str	r2, [r7, #4]
 801b220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b222:	2300      	movs	r3, #0
 801b224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	68ba      	ldr	r2, [r7, #8]
 801b22a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	68fa      	ldr	r2, [r7, #12]
 801b230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b232:	68ba      	ldr	r2, [r7, #8]
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	429a      	cmp	r2, r3
 801b238:	d812      	bhi.n	801b260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	683b      	ldr	r3, [r7, #0]
 801b23e:	1ad2      	subs	r2, r2, r3
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	699b      	ldr	r3, [r3, #24]
 801b244:	429a      	cmp	r2, r3
 801b246:	d302      	bcc.n	801b24e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b248:	2301      	movs	r3, #1
 801b24a:	617b      	str	r3, [r7, #20]
 801b24c:	e01b      	b.n	801b286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b24e:	4b10      	ldr	r3, [pc, #64]	; (801b290 <prvInsertTimerInActiveList+0x7c>)
 801b250:	681a      	ldr	r2, [r3, #0]
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	3304      	adds	r3, #4
 801b256:	4619      	mov	r1, r3
 801b258:	4610      	mov	r0, r2
 801b25a:	f7fe f836 	bl	80192ca <vListInsert>
 801b25e:	e012      	b.n	801b286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b260:	687a      	ldr	r2, [r7, #4]
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	429a      	cmp	r2, r3
 801b266:	d206      	bcs.n	801b276 <prvInsertTimerInActiveList+0x62>
 801b268:	68ba      	ldr	r2, [r7, #8]
 801b26a:	683b      	ldr	r3, [r7, #0]
 801b26c:	429a      	cmp	r2, r3
 801b26e:	d302      	bcc.n	801b276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b270:	2301      	movs	r3, #1
 801b272:	617b      	str	r3, [r7, #20]
 801b274:	e007      	b.n	801b286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b276:	4b07      	ldr	r3, [pc, #28]	; (801b294 <prvInsertTimerInActiveList+0x80>)
 801b278:	681a      	ldr	r2, [r3, #0]
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	3304      	adds	r3, #4
 801b27e:	4619      	mov	r1, r3
 801b280:	4610      	mov	r0, r2
 801b282:	f7fe f822 	bl	80192ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b286:	697b      	ldr	r3, [r7, #20]
}
 801b288:	4618      	mov	r0, r3
 801b28a:	3718      	adds	r7, #24
 801b28c:	46bd      	mov	sp, r7
 801b28e:	bd80      	pop	{r7, pc}
 801b290:	24003038 	.word	0x24003038
 801b294:	24003034 	.word	0x24003034

0801b298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b08e      	sub	sp, #56	; 0x38
 801b29c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b29e:	e0ca      	b.n	801b436 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	da18      	bge.n	801b2d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b2a6:	1d3b      	adds	r3, r7, #4
 801b2a8:	3304      	adds	r3, #4
 801b2aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d10a      	bne.n	801b2c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2b6:	f383 8811 	msr	BASEPRI, r3
 801b2ba:	f3bf 8f6f 	isb	sy
 801b2be:	f3bf 8f4f 	dsb	sy
 801b2c2:	61fb      	str	r3, [r7, #28]
}
 801b2c4:	bf00      	nop
 801b2c6:	e7fe      	b.n	801b2c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b2ce:	6850      	ldr	r0, [r2, #4]
 801b2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b2d2:	6892      	ldr	r2, [r2, #8]
 801b2d4:	4611      	mov	r1, r2
 801b2d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	f2c0 80aa 	blt.w	801b434 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2e6:	695b      	ldr	r3, [r3, #20]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d004      	beq.n	801b2f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ee:	3304      	adds	r3, #4
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f7fe f823 	bl	801933c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b2f6:	463b      	mov	r3, r7
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f7ff ff6b 	bl	801b1d4 <prvSampleTimeNow>
 801b2fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2b09      	cmp	r3, #9
 801b304:	f200 8097 	bhi.w	801b436 <prvProcessReceivedCommands+0x19e>
 801b308:	a201      	add	r2, pc, #4	; (adr r2, 801b310 <prvProcessReceivedCommands+0x78>)
 801b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b30e:	bf00      	nop
 801b310:	0801b339 	.word	0x0801b339
 801b314:	0801b339 	.word	0x0801b339
 801b318:	0801b339 	.word	0x0801b339
 801b31c:	0801b3ad 	.word	0x0801b3ad
 801b320:	0801b3c1 	.word	0x0801b3c1
 801b324:	0801b40b 	.word	0x0801b40b
 801b328:	0801b339 	.word	0x0801b339
 801b32c:	0801b339 	.word	0x0801b339
 801b330:	0801b3ad 	.word	0x0801b3ad
 801b334:	0801b3c1 	.word	0x0801b3c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b33a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b33e:	f043 0301 	orr.w	r3, r3, #1
 801b342:	b2da      	uxtb	r2, r3
 801b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b34a:	68ba      	ldr	r2, [r7, #8]
 801b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b34e:	699b      	ldr	r3, [r3, #24]
 801b350:	18d1      	adds	r1, r2, r3
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b358:	f7ff ff5c 	bl	801b214 <prvInsertTimerInActiveList>
 801b35c:	4603      	mov	r3, r0
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d069      	beq.n	801b436 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b364:	6a1b      	ldr	r3, [r3, #32]
 801b366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b368:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b370:	f003 0304 	and.w	r3, r3, #4
 801b374:	2b00      	cmp	r3, #0
 801b376:	d05e      	beq.n	801b436 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b378:	68ba      	ldr	r2, [r7, #8]
 801b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b37c:	699b      	ldr	r3, [r3, #24]
 801b37e:	441a      	add	r2, r3
 801b380:	2300      	movs	r3, #0
 801b382:	9300      	str	r3, [sp, #0]
 801b384:	2300      	movs	r3, #0
 801b386:	2100      	movs	r1, #0
 801b388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b38a:	f7ff fe05 	bl	801af98 <xTimerGenericCommand>
 801b38e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b390:	6a3b      	ldr	r3, [r7, #32]
 801b392:	2b00      	cmp	r3, #0
 801b394:	d14f      	bne.n	801b436 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b39a:	f383 8811 	msr	BASEPRI, r3
 801b39e:	f3bf 8f6f 	isb	sy
 801b3a2:	f3bf 8f4f 	dsb	sy
 801b3a6:	61bb      	str	r3, [r7, #24]
}
 801b3a8:	bf00      	nop
 801b3aa:	e7fe      	b.n	801b3aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b3b2:	f023 0301 	bic.w	r3, r3, #1
 801b3b6:	b2da      	uxtb	r2, r3
 801b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b3be:	e03a      	b.n	801b436 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b3c6:	f043 0301 	orr.w	r3, r3, #1
 801b3ca:	b2da      	uxtb	r2, r3
 801b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b3d2:	68ba      	ldr	r2, [r7, #8]
 801b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3da:	699b      	ldr	r3, [r3, #24]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d10a      	bne.n	801b3f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3e4:	f383 8811 	msr	BASEPRI, r3
 801b3e8:	f3bf 8f6f 	isb	sy
 801b3ec:	f3bf 8f4f 	dsb	sy
 801b3f0:	617b      	str	r3, [r7, #20]
}
 801b3f2:	bf00      	nop
 801b3f4:	e7fe      	b.n	801b3f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3f8:	699a      	ldr	r2, [r3, #24]
 801b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3fc:	18d1      	adds	r1, r2, r3
 801b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b404:	f7ff ff06 	bl	801b214 <prvInsertTimerInActiveList>
					break;
 801b408:	e015      	b.n	801b436 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b410:	f003 0302 	and.w	r3, r3, #2
 801b414:	2b00      	cmp	r3, #0
 801b416:	d103      	bne.n	801b420 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b41a:	f000 fc01 	bl	801bc20 <vPortFree>
 801b41e:	e00a      	b.n	801b436 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b426:	f023 0301 	bic.w	r3, r3, #1
 801b42a:	b2da      	uxtb	r2, r3
 801b42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b432:	e000      	b.n	801b436 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b436:	4b08      	ldr	r3, [pc, #32]	; (801b458 <prvProcessReceivedCommands+0x1c0>)
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	1d39      	adds	r1, r7, #4
 801b43c:	2200      	movs	r2, #0
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fe fa44 	bl	80198cc <xQueueReceive>
 801b444:	4603      	mov	r3, r0
 801b446:	2b00      	cmp	r3, #0
 801b448:	f47f af2a 	bne.w	801b2a0 <prvProcessReceivedCommands+0x8>
	}
}
 801b44c:	bf00      	nop
 801b44e:	bf00      	nop
 801b450:	3730      	adds	r7, #48	; 0x30
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
 801b456:	bf00      	nop
 801b458:	2400303c 	.word	0x2400303c

0801b45c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b088      	sub	sp, #32
 801b460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b462:	e048      	b.n	801b4f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b464:	4b2d      	ldr	r3, [pc, #180]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	68db      	ldr	r3, [r3, #12]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b46e:	4b2b      	ldr	r3, [pc, #172]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	68db      	ldr	r3, [r3, #12]
 801b474:	68db      	ldr	r3, [r3, #12]
 801b476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	3304      	adds	r3, #4
 801b47c:	4618      	mov	r0, r3
 801b47e:	f7fd ff5d 	bl	801933c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	6a1b      	ldr	r3, [r3, #32]
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b490:	f003 0304 	and.w	r3, r3, #4
 801b494:	2b00      	cmp	r3, #0
 801b496:	d02e      	beq.n	801b4f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	699b      	ldr	r3, [r3, #24]
 801b49c:	693a      	ldr	r2, [r7, #16]
 801b49e:	4413      	add	r3, r2
 801b4a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b4a2:	68ba      	ldr	r2, [r7, #8]
 801b4a4:	693b      	ldr	r3, [r7, #16]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d90e      	bls.n	801b4c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	68ba      	ldr	r2, [r7, #8]
 801b4ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	68fa      	ldr	r2, [r7, #12]
 801b4b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b4b6:	4b19      	ldr	r3, [pc, #100]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b4b8:	681a      	ldr	r2, [r3, #0]
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	3304      	adds	r3, #4
 801b4be:	4619      	mov	r1, r3
 801b4c0:	4610      	mov	r0, r2
 801b4c2:	f7fd ff02 	bl	80192ca <vListInsert>
 801b4c6:	e016      	b.n	801b4f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	9300      	str	r3, [sp, #0]
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	693a      	ldr	r2, [r7, #16]
 801b4d0:	2100      	movs	r1, #0
 801b4d2:	68f8      	ldr	r0, [r7, #12]
 801b4d4:	f7ff fd60 	bl	801af98 <xTimerGenericCommand>
 801b4d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d10a      	bne.n	801b4f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4e4:	f383 8811 	msr	BASEPRI, r3
 801b4e8:	f3bf 8f6f 	isb	sy
 801b4ec:	f3bf 8f4f 	dsb	sy
 801b4f0:	603b      	str	r3, [r7, #0]
}
 801b4f2:	bf00      	nop
 801b4f4:	e7fe      	b.n	801b4f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b4f6:	4b09      	ldr	r3, [pc, #36]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d1b1      	bne.n	801b464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b500:	4b06      	ldr	r3, [pc, #24]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b506:	4b06      	ldr	r3, [pc, #24]	; (801b520 <prvSwitchTimerLists+0xc4>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	4a04      	ldr	r2, [pc, #16]	; (801b51c <prvSwitchTimerLists+0xc0>)
 801b50c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b50e:	4a04      	ldr	r2, [pc, #16]	; (801b520 <prvSwitchTimerLists+0xc4>)
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	6013      	str	r3, [r2, #0]
}
 801b514:	bf00      	nop
 801b516:	3718      	adds	r7, #24
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}
 801b51c:	24003034 	.word	0x24003034
 801b520:	24003038 	.word	0x24003038

0801b524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b52a:	f000 f98b 	bl	801b844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b52e:	4b15      	ldr	r3, [pc, #84]	; (801b584 <prvCheckForValidListAndQueue+0x60>)
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d120      	bne.n	801b578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b536:	4814      	ldr	r0, [pc, #80]	; (801b588 <prvCheckForValidListAndQueue+0x64>)
 801b538:	f7fd fe76 	bl	8019228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b53c:	4813      	ldr	r0, [pc, #76]	; (801b58c <prvCheckForValidListAndQueue+0x68>)
 801b53e:	f7fd fe73 	bl	8019228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b542:	4b13      	ldr	r3, [pc, #76]	; (801b590 <prvCheckForValidListAndQueue+0x6c>)
 801b544:	4a10      	ldr	r2, [pc, #64]	; (801b588 <prvCheckForValidListAndQueue+0x64>)
 801b546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b548:	4b12      	ldr	r3, [pc, #72]	; (801b594 <prvCheckForValidListAndQueue+0x70>)
 801b54a:	4a10      	ldr	r2, [pc, #64]	; (801b58c <prvCheckForValidListAndQueue+0x68>)
 801b54c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b54e:	2300      	movs	r3, #0
 801b550:	9300      	str	r3, [sp, #0]
 801b552:	4b11      	ldr	r3, [pc, #68]	; (801b598 <prvCheckForValidListAndQueue+0x74>)
 801b554:	4a11      	ldr	r2, [pc, #68]	; (801b59c <prvCheckForValidListAndQueue+0x78>)
 801b556:	2110      	movs	r1, #16
 801b558:	200a      	movs	r0, #10
 801b55a:	f7fd ff81 	bl	8019460 <xQueueGenericCreateStatic>
 801b55e:	4603      	mov	r3, r0
 801b560:	4a08      	ldr	r2, [pc, #32]	; (801b584 <prvCheckForValidListAndQueue+0x60>)
 801b562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b564:	4b07      	ldr	r3, [pc, #28]	; (801b584 <prvCheckForValidListAndQueue+0x60>)
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d005      	beq.n	801b578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b56c:	4b05      	ldr	r3, [pc, #20]	; (801b584 <prvCheckForValidListAndQueue+0x60>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	490b      	ldr	r1, [pc, #44]	; (801b5a0 <prvCheckForValidListAndQueue+0x7c>)
 801b572:	4618      	mov	r0, r3
 801b574:	f7fe fb9a 	bl	8019cac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b578:	f000 f994 	bl	801b8a4 <vPortExitCritical>
}
 801b57c:	bf00      	nop
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}
 801b582:	bf00      	nop
 801b584:	2400303c 	.word	0x2400303c
 801b588:	2400300c 	.word	0x2400300c
 801b58c:	24003020 	.word	0x24003020
 801b590:	24003034 	.word	0x24003034
 801b594:	24003038 	.word	0x24003038
 801b598:	240030e8 	.word	0x240030e8
 801b59c:	24003048 	.word	0x24003048
 801b5a0:	0801c014 	.word	0x0801c014

0801b5a4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b08a      	sub	sp, #40	; 0x28
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	60f8      	str	r0, [r7, #12]
 801b5ac:	60b9      	str	r1, [r7, #8]
 801b5ae:	607a      	str	r2, [r7, #4]
 801b5b0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801b5b2:	f06f 0301 	mvn.w	r3, #1
 801b5b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801b5bc:	68bb      	ldr	r3, [r7, #8]
 801b5be:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b5c4:	4b06      	ldr	r3, [pc, #24]	; (801b5e0 <xTimerPendFunctionCallFromISR+0x3c>)
 801b5c6:	6818      	ldr	r0, [r3, #0]
 801b5c8:	f107 0114 	add.w	r1, r7, #20
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	683a      	ldr	r2, [r7, #0]
 801b5d0:	f7fe f8e0 	bl	8019794 <xQueueGenericSendFromISR>
 801b5d4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3728      	adds	r7, #40	; 0x28
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	2400303c 	.word	0x2400303c

0801b5e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b5e4:	b480      	push	{r7}
 801b5e6:	b085      	sub	sp, #20
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	60f8      	str	r0, [r7, #12]
 801b5ec:	60b9      	str	r1, [r7, #8]
 801b5ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	3b04      	subs	r3, #4
 801b5f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b5fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	3b04      	subs	r3, #4
 801b602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	f023 0201 	bic.w	r2, r3, #1
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	3b04      	subs	r3, #4
 801b612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b614:	4a0c      	ldr	r2, [pc, #48]	; (801b648 <pxPortInitialiseStack+0x64>)
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	3b14      	subs	r3, #20
 801b61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b620:	687a      	ldr	r2, [r7, #4]
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	3b04      	subs	r3, #4
 801b62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	f06f 0202 	mvn.w	r2, #2
 801b632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	3b20      	subs	r3, #32
 801b638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b63a:	68fb      	ldr	r3, [r7, #12]
}
 801b63c:	4618      	mov	r0, r3
 801b63e:	3714      	adds	r7, #20
 801b640:	46bd      	mov	sp, r7
 801b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b646:	4770      	bx	lr
 801b648:	0801b64d 	.word	0x0801b64d

0801b64c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b64c:	b480      	push	{r7}
 801b64e:	b085      	sub	sp, #20
 801b650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b652:	2300      	movs	r3, #0
 801b654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b656:	4b12      	ldr	r3, [pc, #72]	; (801b6a0 <prvTaskExitError+0x54>)
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b65e:	d00a      	beq.n	801b676 <prvTaskExitError+0x2a>
	__asm volatile
 801b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b664:	f383 8811 	msr	BASEPRI, r3
 801b668:	f3bf 8f6f 	isb	sy
 801b66c:	f3bf 8f4f 	dsb	sy
 801b670:	60fb      	str	r3, [r7, #12]
}
 801b672:	bf00      	nop
 801b674:	e7fe      	b.n	801b674 <prvTaskExitError+0x28>
	__asm volatile
 801b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b67a:	f383 8811 	msr	BASEPRI, r3
 801b67e:	f3bf 8f6f 	isb	sy
 801b682:	f3bf 8f4f 	dsb	sy
 801b686:	60bb      	str	r3, [r7, #8]
}
 801b688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b68a:	bf00      	nop
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d0fc      	beq.n	801b68c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b692:	bf00      	nop
 801b694:	bf00      	nop
 801b696:	3714      	adds	r7, #20
 801b698:	46bd      	mov	sp, r7
 801b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69e:	4770      	bx	lr
 801b6a0:	240000dc 	.word	0x240000dc
	...

0801b6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b6b0:	4b07      	ldr	r3, [pc, #28]	; (801b6d0 <pxCurrentTCBConst2>)
 801b6b2:	6819      	ldr	r1, [r3, #0]
 801b6b4:	6808      	ldr	r0, [r1, #0]
 801b6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6ba:	f380 8809 	msr	PSP, r0
 801b6be:	f3bf 8f6f 	isb	sy
 801b6c2:	f04f 0000 	mov.w	r0, #0
 801b6c6:	f380 8811 	msr	BASEPRI, r0
 801b6ca:	4770      	bx	lr
 801b6cc:	f3af 8000 	nop.w

0801b6d0 <pxCurrentTCBConst2>:
 801b6d0:	24002b0c 	.word	0x24002b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b6d4:	bf00      	nop
 801b6d6:	bf00      	nop

0801b6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b6d8:	4808      	ldr	r0, [pc, #32]	; (801b6fc <prvPortStartFirstTask+0x24>)
 801b6da:	6800      	ldr	r0, [r0, #0]
 801b6dc:	6800      	ldr	r0, [r0, #0]
 801b6de:	f380 8808 	msr	MSP, r0
 801b6e2:	f04f 0000 	mov.w	r0, #0
 801b6e6:	f380 8814 	msr	CONTROL, r0
 801b6ea:	b662      	cpsie	i
 801b6ec:	b661      	cpsie	f
 801b6ee:	f3bf 8f4f 	dsb	sy
 801b6f2:	f3bf 8f6f 	isb	sy
 801b6f6:	df00      	svc	0
 801b6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b6fa:	bf00      	nop
 801b6fc:	e000ed08 	.word	0xe000ed08

0801b700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b700:	b580      	push	{r7, lr}
 801b702:	b086      	sub	sp, #24
 801b704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b706:	4b46      	ldr	r3, [pc, #280]	; (801b820 <xPortStartScheduler+0x120>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	4a46      	ldr	r2, [pc, #280]	; (801b824 <xPortStartScheduler+0x124>)
 801b70c:	4293      	cmp	r3, r2
 801b70e:	d10a      	bne.n	801b726 <xPortStartScheduler+0x26>
	__asm volatile
 801b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b714:	f383 8811 	msr	BASEPRI, r3
 801b718:	f3bf 8f6f 	isb	sy
 801b71c:	f3bf 8f4f 	dsb	sy
 801b720:	613b      	str	r3, [r7, #16]
}
 801b722:	bf00      	nop
 801b724:	e7fe      	b.n	801b724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b726:	4b3e      	ldr	r3, [pc, #248]	; (801b820 <xPortStartScheduler+0x120>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4a3f      	ldr	r2, [pc, #252]	; (801b828 <xPortStartScheduler+0x128>)
 801b72c:	4293      	cmp	r3, r2
 801b72e:	d10a      	bne.n	801b746 <xPortStartScheduler+0x46>
	__asm volatile
 801b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b734:	f383 8811 	msr	BASEPRI, r3
 801b738:	f3bf 8f6f 	isb	sy
 801b73c:	f3bf 8f4f 	dsb	sy
 801b740:	60fb      	str	r3, [r7, #12]
}
 801b742:	bf00      	nop
 801b744:	e7fe      	b.n	801b744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b746:	4b39      	ldr	r3, [pc, #228]	; (801b82c <xPortStartScheduler+0x12c>)
 801b748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	781b      	ldrb	r3, [r3, #0]
 801b74e:	b2db      	uxtb	r3, r3
 801b750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b752:	697b      	ldr	r3, [r7, #20]
 801b754:	22ff      	movs	r2, #255	; 0xff
 801b756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b758:	697b      	ldr	r3, [r7, #20]
 801b75a:	781b      	ldrb	r3, [r3, #0]
 801b75c:	b2db      	uxtb	r3, r3
 801b75e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b760:	78fb      	ldrb	r3, [r7, #3]
 801b762:	b2db      	uxtb	r3, r3
 801b764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b768:	b2da      	uxtb	r2, r3
 801b76a:	4b31      	ldr	r3, [pc, #196]	; (801b830 <xPortStartScheduler+0x130>)
 801b76c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b76e:	4b31      	ldr	r3, [pc, #196]	; (801b834 <xPortStartScheduler+0x134>)
 801b770:	2207      	movs	r2, #7
 801b772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b774:	e009      	b.n	801b78a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b776:	4b2f      	ldr	r3, [pc, #188]	; (801b834 <xPortStartScheduler+0x134>)
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	3b01      	subs	r3, #1
 801b77c:	4a2d      	ldr	r2, [pc, #180]	; (801b834 <xPortStartScheduler+0x134>)
 801b77e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b780:	78fb      	ldrb	r3, [r7, #3]
 801b782:	b2db      	uxtb	r3, r3
 801b784:	005b      	lsls	r3, r3, #1
 801b786:	b2db      	uxtb	r3, r3
 801b788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b78a:	78fb      	ldrb	r3, [r7, #3]
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b792:	2b80      	cmp	r3, #128	; 0x80
 801b794:	d0ef      	beq.n	801b776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b796:	4b27      	ldr	r3, [pc, #156]	; (801b834 <xPortStartScheduler+0x134>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	f1c3 0307 	rsb	r3, r3, #7
 801b79e:	2b04      	cmp	r3, #4
 801b7a0:	d00a      	beq.n	801b7b8 <xPortStartScheduler+0xb8>
	__asm volatile
 801b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7a6:	f383 8811 	msr	BASEPRI, r3
 801b7aa:	f3bf 8f6f 	isb	sy
 801b7ae:	f3bf 8f4f 	dsb	sy
 801b7b2:	60bb      	str	r3, [r7, #8]
}
 801b7b4:	bf00      	nop
 801b7b6:	e7fe      	b.n	801b7b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b7b8:	4b1e      	ldr	r3, [pc, #120]	; (801b834 <xPortStartScheduler+0x134>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	021b      	lsls	r3, r3, #8
 801b7be:	4a1d      	ldr	r2, [pc, #116]	; (801b834 <xPortStartScheduler+0x134>)
 801b7c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b7c2:	4b1c      	ldr	r3, [pc, #112]	; (801b834 <xPortStartScheduler+0x134>)
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b7ca:	4a1a      	ldr	r2, [pc, #104]	; (801b834 <xPortStartScheduler+0x134>)
 801b7cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	b2da      	uxtb	r2, r3
 801b7d2:	697b      	ldr	r3, [r7, #20]
 801b7d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b7d6:	4b18      	ldr	r3, [pc, #96]	; (801b838 <xPortStartScheduler+0x138>)
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	4a17      	ldr	r2, [pc, #92]	; (801b838 <xPortStartScheduler+0x138>)
 801b7dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b7e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b7e2:	4b15      	ldr	r3, [pc, #84]	; (801b838 <xPortStartScheduler+0x138>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	4a14      	ldr	r2, [pc, #80]	; (801b838 <xPortStartScheduler+0x138>)
 801b7e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b7ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b7ee:	f000 f8dd 	bl	801b9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b7f2:	4b12      	ldr	r3, [pc, #72]	; (801b83c <xPortStartScheduler+0x13c>)
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b7f8:	f000 f8fc 	bl	801b9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b7fc:	4b10      	ldr	r3, [pc, #64]	; (801b840 <xPortStartScheduler+0x140>)
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	4a0f      	ldr	r2, [pc, #60]	; (801b840 <xPortStartScheduler+0x140>)
 801b802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b808:	f7ff ff66 	bl	801b6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b80c:	f7fe ff6c 	bl	801a6e8 <vTaskSwitchContext>
	prvTaskExitError();
 801b810:	f7ff ff1c 	bl	801b64c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b814:	2300      	movs	r3, #0
}
 801b816:	4618      	mov	r0, r3
 801b818:	3718      	adds	r7, #24
 801b81a:	46bd      	mov	sp, r7
 801b81c:	bd80      	pop	{r7, pc}
 801b81e:	bf00      	nop
 801b820:	e000ed00 	.word	0xe000ed00
 801b824:	410fc271 	.word	0x410fc271
 801b828:	410fc270 	.word	0x410fc270
 801b82c:	e000e400 	.word	0xe000e400
 801b830:	24003138 	.word	0x24003138
 801b834:	2400313c 	.word	0x2400313c
 801b838:	e000ed20 	.word	0xe000ed20
 801b83c:	240000dc 	.word	0x240000dc
 801b840:	e000ef34 	.word	0xe000ef34

0801b844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b844:	b480      	push	{r7}
 801b846:	b083      	sub	sp, #12
 801b848:	af00      	add	r7, sp, #0
	__asm volatile
 801b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b84e:	f383 8811 	msr	BASEPRI, r3
 801b852:	f3bf 8f6f 	isb	sy
 801b856:	f3bf 8f4f 	dsb	sy
 801b85a:	607b      	str	r3, [r7, #4]
}
 801b85c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b85e:	4b0f      	ldr	r3, [pc, #60]	; (801b89c <vPortEnterCritical+0x58>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	3301      	adds	r3, #1
 801b864:	4a0d      	ldr	r2, [pc, #52]	; (801b89c <vPortEnterCritical+0x58>)
 801b866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b868:	4b0c      	ldr	r3, [pc, #48]	; (801b89c <vPortEnterCritical+0x58>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	2b01      	cmp	r3, #1
 801b86e:	d10f      	bne.n	801b890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b870:	4b0b      	ldr	r3, [pc, #44]	; (801b8a0 <vPortEnterCritical+0x5c>)
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	b2db      	uxtb	r3, r3
 801b876:	2b00      	cmp	r3, #0
 801b878:	d00a      	beq.n	801b890 <vPortEnterCritical+0x4c>
	__asm volatile
 801b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b87e:	f383 8811 	msr	BASEPRI, r3
 801b882:	f3bf 8f6f 	isb	sy
 801b886:	f3bf 8f4f 	dsb	sy
 801b88a:	603b      	str	r3, [r7, #0]
}
 801b88c:	bf00      	nop
 801b88e:	e7fe      	b.n	801b88e <vPortEnterCritical+0x4a>
	}
}
 801b890:	bf00      	nop
 801b892:	370c      	adds	r7, #12
 801b894:	46bd      	mov	sp, r7
 801b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89a:	4770      	bx	lr
 801b89c:	240000dc 	.word	0x240000dc
 801b8a0:	e000ed04 	.word	0xe000ed04

0801b8a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b8a4:	b480      	push	{r7}
 801b8a6:	b083      	sub	sp, #12
 801b8a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b8aa:	4b12      	ldr	r3, [pc, #72]	; (801b8f4 <vPortExitCritical+0x50>)
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d10a      	bne.n	801b8c8 <vPortExitCritical+0x24>
	__asm volatile
 801b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8b6:	f383 8811 	msr	BASEPRI, r3
 801b8ba:	f3bf 8f6f 	isb	sy
 801b8be:	f3bf 8f4f 	dsb	sy
 801b8c2:	607b      	str	r3, [r7, #4]
}
 801b8c4:	bf00      	nop
 801b8c6:	e7fe      	b.n	801b8c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b8c8:	4b0a      	ldr	r3, [pc, #40]	; (801b8f4 <vPortExitCritical+0x50>)
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	3b01      	subs	r3, #1
 801b8ce:	4a09      	ldr	r2, [pc, #36]	; (801b8f4 <vPortExitCritical+0x50>)
 801b8d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b8d2:	4b08      	ldr	r3, [pc, #32]	; (801b8f4 <vPortExitCritical+0x50>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d105      	bne.n	801b8e6 <vPortExitCritical+0x42>
 801b8da:	2300      	movs	r3, #0
 801b8dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	f383 8811 	msr	BASEPRI, r3
}
 801b8e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b8e6:	bf00      	nop
 801b8e8:	370c      	adds	r7, #12
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f0:	4770      	bx	lr
 801b8f2:	bf00      	nop
 801b8f4:	240000dc 	.word	0x240000dc
	...

0801b900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b900:	f3ef 8009 	mrs	r0, PSP
 801b904:	f3bf 8f6f 	isb	sy
 801b908:	4b15      	ldr	r3, [pc, #84]	; (801b960 <pxCurrentTCBConst>)
 801b90a:	681a      	ldr	r2, [r3, #0]
 801b90c:	f01e 0f10 	tst.w	lr, #16
 801b910:	bf08      	it	eq
 801b912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91a:	6010      	str	r0, [r2, #0]
 801b91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b920:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b924:	f380 8811 	msr	BASEPRI, r0
 801b928:	f3bf 8f4f 	dsb	sy
 801b92c:	f3bf 8f6f 	isb	sy
 801b930:	f7fe feda 	bl	801a6e8 <vTaskSwitchContext>
 801b934:	f04f 0000 	mov.w	r0, #0
 801b938:	f380 8811 	msr	BASEPRI, r0
 801b93c:	bc09      	pop	{r0, r3}
 801b93e:	6819      	ldr	r1, [r3, #0]
 801b940:	6808      	ldr	r0, [r1, #0]
 801b942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b946:	f01e 0f10 	tst.w	lr, #16
 801b94a:	bf08      	it	eq
 801b94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b950:	f380 8809 	msr	PSP, r0
 801b954:	f3bf 8f6f 	isb	sy
 801b958:	4770      	bx	lr
 801b95a:	bf00      	nop
 801b95c:	f3af 8000 	nop.w

0801b960 <pxCurrentTCBConst>:
 801b960:	24002b0c 	.word	0x24002b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b964:	bf00      	nop
 801b966:	bf00      	nop

0801b968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b082      	sub	sp, #8
 801b96c:	af00      	add	r7, sp, #0
	__asm volatile
 801b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b972:	f383 8811 	msr	BASEPRI, r3
 801b976:	f3bf 8f6f 	isb	sy
 801b97a:	f3bf 8f4f 	dsb	sy
 801b97e:	607b      	str	r3, [r7, #4]
}
 801b980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b982:	f7fe fdef 	bl	801a564 <xTaskIncrementTick>
 801b986:	4603      	mov	r3, r0
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d003      	beq.n	801b994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b98c:	4b06      	ldr	r3, [pc, #24]	; (801b9a8 <xPortSysTickHandler+0x40>)
 801b98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b992:	601a      	str	r2, [r3, #0]
 801b994:	2300      	movs	r3, #0
 801b996:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b998:	683b      	ldr	r3, [r7, #0]
 801b99a:	f383 8811 	msr	BASEPRI, r3
}
 801b99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b9a0:	bf00      	nop
 801b9a2:	3708      	adds	r7, #8
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	e000ed04 	.word	0xe000ed04

0801b9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b9ac:	b480      	push	{r7}
 801b9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b9b0:	4b0b      	ldr	r3, [pc, #44]	; (801b9e0 <vPortSetupTimerInterrupt+0x34>)
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b9b6:	4b0b      	ldr	r3, [pc, #44]	; (801b9e4 <vPortSetupTimerInterrupt+0x38>)
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b9bc:	4b0a      	ldr	r3, [pc, #40]	; (801b9e8 <vPortSetupTimerInterrupt+0x3c>)
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	4a0a      	ldr	r2, [pc, #40]	; (801b9ec <vPortSetupTimerInterrupt+0x40>)
 801b9c2:	fba2 2303 	umull	r2, r3, r2, r3
 801b9c6:	099b      	lsrs	r3, r3, #6
 801b9c8:	4a09      	ldr	r2, [pc, #36]	; (801b9f0 <vPortSetupTimerInterrupt+0x44>)
 801b9ca:	3b01      	subs	r3, #1
 801b9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b9ce:	4b04      	ldr	r3, [pc, #16]	; (801b9e0 <vPortSetupTimerInterrupt+0x34>)
 801b9d0:	2207      	movs	r2, #7
 801b9d2:	601a      	str	r2, [r3, #0]
}
 801b9d4:	bf00      	nop
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9dc:	4770      	bx	lr
 801b9de:	bf00      	nop
 801b9e0:	e000e010 	.word	0xe000e010
 801b9e4:	e000e018 	.word	0xe000e018
 801b9e8:	240000cc 	.word	0x240000cc
 801b9ec:	10624dd3 	.word	0x10624dd3
 801b9f0:	e000e014 	.word	0xe000e014

0801b9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ba04 <vPortEnableVFP+0x10>
 801b9f8:	6801      	ldr	r1, [r0, #0]
 801b9fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b9fe:	6001      	str	r1, [r0, #0]
 801ba00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ba02:	bf00      	nop
 801ba04:	e000ed88 	.word	0xe000ed88

0801ba08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ba08:	b480      	push	{r7}
 801ba0a:	b085      	sub	sp, #20
 801ba0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ba0e:	f3ef 8305 	mrs	r3, IPSR
 801ba12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	2b0f      	cmp	r3, #15
 801ba18:	d914      	bls.n	801ba44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ba1a:	4a17      	ldr	r2, [pc, #92]	; (801ba78 <vPortValidateInterruptPriority+0x70>)
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	4413      	add	r3, r2
 801ba20:	781b      	ldrb	r3, [r3, #0]
 801ba22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ba24:	4b15      	ldr	r3, [pc, #84]	; (801ba7c <vPortValidateInterruptPriority+0x74>)
 801ba26:	781b      	ldrb	r3, [r3, #0]
 801ba28:	7afa      	ldrb	r2, [r7, #11]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d20a      	bcs.n	801ba44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba32:	f383 8811 	msr	BASEPRI, r3
 801ba36:	f3bf 8f6f 	isb	sy
 801ba3a:	f3bf 8f4f 	dsb	sy
 801ba3e:	607b      	str	r3, [r7, #4]
}
 801ba40:	bf00      	nop
 801ba42:	e7fe      	b.n	801ba42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ba44:	4b0e      	ldr	r3, [pc, #56]	; (801ba80 <vPortValidateInterruptPriority+0x78>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ba4c:	4b0d      	ldr	r3, [pc, #52]	; (801ba84 <vPortValidateInterruptPriority+0x7c>)
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	429a      	cmp	r2, r3
 801ba52:	d90a      	bls.n	801ba6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba58:	f383 8811 	msr	BASEPRI, r3
 801ba5c:	f3bf 8f6f 	isb	sy
 801ba60:	f3bf 8f4f 	dsb	sy
 801ba64:	603b      	str	r3, [r7, #0]
}
 801ba66:	bf00      	nop
 801ba68:	e7fe      	b.n	801ba68 <vPortValidateInterruptPriority+0x60>
	}
 801ba6a:	bf00      	nop
 801ba6c:	3714      	adds	r7, #20
 801ba6e:	46bd      	mov	sp, r7
 801ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba74:	4770      	bx	lr
 801ba76:	bf00      	nop
 801ba78:	e000e3f0 	.word	0xe000e3f0
 801ba7c:	24003138 	.word	0x24003138
 801ba80:	e000ed0c 	.word	0xe000ed0c
 801ba84:	2400313c 	.word	0x2400313c

0801ba88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b08a      	sub	sp, #40	; 0x28
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801ba90:	2300      	movs	r3, #0
 801ba92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801ba94:	f7fe fcaa 	bl	801a3ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801ba98:	4b5b      	ldr	r3, [pc, #364]	; (801bc08 <pvPortMalloc+0x180>)
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d101      	bne.n	801baa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801baa0:	f000 f920 	bl	801bce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801baa4:	4b59      	ldr	r3, [pc, #356]	; (801bc0c <pvPortMalloc+0x184>)
 801baa6:	681a      	ldr	r2, [r3, #0]
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	4013      	ands	r3, r2
 801baac:	2b00      	cmp	r3, #0
 801baae:	f040 8093 	bne.w	801bbd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d01d      	beq.n	801baf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801bab8:	2208      	movs	r2, #8
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	4413      	add	r3, r2
 801babe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	f003 0307 	and.w	r3, r3, #7
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d014      	beq.n	801baf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	f023 0307 	bic.w	r3, r3, #7
 801bad0:	3308      	adds	r3, #8
 801bad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	f003 0307 	and.w	r3, r3, #7
 801bada:	2b00      	cmp	r3, #0
 801badc:	d00a      	beq.n	801baf4 <pvPortMalloc+0x6c>
	__asm volatile
 801bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bae2:	f383 8811 	msr	BASEPRI, r3
 801bae6:	f3bf 8f6f 	isb	sy
 801baea:	f3bf 8f4f 	dsb	sy
 801baee:	617b      	str	r3, [r7, #20]
}
 801baf0:	bf00      	nop
 801baf2:	e7fe      	b.n	801baf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d06e      	beq.n	801bbd8 <pvPortMalloc+0x150>
 801bafa:	4b45      	ldr	r3, [pc, #276]	; (801bc10 <pvPortMalloc+0x188>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	687a      	ldr	r2, [r7, #4]
 801bb00:	429a      	cmp	r2, r3
 801bb02:	d869      	bhi.n	801bbd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801bb04:	4b43      	ldr	r3, [pc, #268]	; (801bc14 <pvPortMalloc+0x18c>)
 801bb06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801bb08:	4b42      	ldr	r3, [pc, #264]	; (801bc14 <pvPortMalloc+0x18c>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bb0e:	e004      	b.n	801bb1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb1c:	685b      	ldr	r3, [r3, #4]
 801bb1e:	687a      	ldr	r2, [r7, #4]
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d903      	bls.n	801bb2c <pvPortMalloc+0xa4>
 801bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d1f1      	bne.n	801bb10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801bb2c:	4b36      	ldr	r3, [pc, #216]	; (801bc08 <pvPortMalloc+0x180>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d050      	beq.n	801bbd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801bb36:	6a3b      	ldr	r3, [r7, #32]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	2208      	movs	r2, #8
 801bb3c:	4413      	add	r3, r2
 801bb3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb42:	681a      	ldr	r2, [r3, #0]
 801bb44:	6a3b      	ldr	r3, [r7, #32]
 801bb46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb4a:	685a      	ldr	r2, [r3, #4]
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	1ad2      	subs	r2, r2, r3
 801bb50:	2308      	movs	r3, #8
 801bb52:	005b      	lsls	r3, r3, #1
 801bb54:	429a      	cmp	r2, r3
 801bb56:	d91f      	bls.n	801bb98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801bb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	4413      	add	r3, r2
 801bb5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bb60:	69bb      	ldr	r3, [r7, #24]
 801bb62:	f003 0307 	and.w	r3, r3, #7
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d00a      	beq.n	801bb80 <pvPortMalloc+0xf8>
	__asm volatile
 801bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb6e:	f383 8811 	msr	BASEPRI, r3
 801bb72:	f3bf 8f6f 	isb	sy
 801bb76:	f3bf 8f4f 	dsb	sy
 801bb7a:	613b      	str	r3, [r7, #16]
}
 801bb7c:	bf00      	nop
 801bb7e:	e7fe      	b.n	801bb7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb82:	685a      	ldr	r2, [r3, #4]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	1ad2      	subs	r2, r2, r3
 801bb88:	69bb      	ldr	r3, [r7, #24]
 801bb8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb8e:	687a      	ldr	r2, [r7, #4]
 801bb90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801bb92:	69b8      	ldr	r0, [r7, #24]
 801bb94:	f000 f908 	bl	801bda8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801bb98:	4b1d      	ldr	r3, [pc, #116]	; (801bc10 <pvPortMalloc+0x188>)
 801bb9a:	681a      	ldr	r2, [r3, #0]
 801bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	1ad3      	subs	r3, r2, r3
 801bba2:	4a1b      	ldr	r2, [pc, #108]	; (801bc10 <pvPortMalloc+0x188>)
 801bba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801bba6:	4b1a      	ldr	r3, [pc, #104]	; (801bc10 <pvPortMalloc+0x188>)
 801bba8:	681a      	ldr	r2, [r3, #0]
 801bbaa:	4b1b      	ldr	r3, [pc, #108]	; (801bc18 <pvPortMalloc+0x190>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d203      	bcs.n	801bbba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801bbb2:	4b17      	ldr	r3, [pc, #92]	; (801bc10 <pvPortMalloc+0x188>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	4a18      	ldr	r2, [pc, #96]	; (801bc18 <pvPortMalloc+0x190>)
 801bbb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbbc:	685a      	ldr	r2, [r3, #4]
 801bbbe:	4b13      	ldr	r3, [pc, #76]	; (801bc0c <pvPortMalloc+0x184>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	431a      	orrs	r2, r3
 801bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbca:	2200      	movs	r2, #0
 801bbcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801bbce:	4b13      	ldr	r3, [pc, #76]	; (801bc1c <pvPortMalloc+0x194>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	3301      	adds	r3, #1
 801bbd4:	4a11      	ldr	r2, [pc, #68]	; (801bc1c <pvPortMalloc+0x194>)
 801bbd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801bbd8:	f7fe fc16 	bl	801a408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801bbdc:	69fb      	ldr	r3, [r7, #28]
 801bbde:	f003 0307 	and.w	r3, r3, #7
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d00a      	beq.n	801bbfc <pvPortMalloc+0x174>
	__asm volatile
 801bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbea:	f383 8811 	msr	BASEPRI, r3
 801bbee:	f3bf 8f6f 	isb	sy
 801bbf2:	f3bf 8f4f 	dsb	sy
 801bbf6:	60fb      	str	r3, [r7, #12]
}
 801bbf8:	bf00      	nop
 801bbfa:	e7fe      	b.n	801bbfa <pvPortMalloc+0x172>
	return pvReturn;
 801bbfc:	69fb      	ldr	r3, [r7, #28]
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3728      	adds	r7, #40	; 0x28
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	24006d48 	.word	0x24006d48
 801bc0c:	24006d5c 	.word	0x24006d5c
 801bc10:	24006d4c 	.word	0x24006d4c
 801bc14:	24006d40 	.word	0x24006d40
 801bc18:	24006d50 	.word	0x24006d50
 801bc1c:	24006d54 	.word	0x24006d54

0801bc20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b086      	sub	sp, #24
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d04d      	beq.n	801bcce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801bc32:	2308      	movs	r3, #8
 801bc34:	425b      	negs	r3, r3
 801bc36:	697a      	ldr	r2, [r7, #20]
 801bc38:	4413      	add	r3, r2
 801bc3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	685a      	ldr	r2, [r3, #4]
 801bc44:	4b24      	ldr	r3, [pc, #144]	; (801bcd8 <vPortFree+0xb8>)
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	4013      	ands	r3, r2
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d10a      	bne.n	801bc64 <vPortFree+0x44>
	__asm volatile
 801bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc52:	f383 8811 	msr	BASEPRI, r3
 801bc56:	f3bf 8f6f 	isb	sy
 801bc5a:	f3bf 8f4f 	dsb	sy
 801bc5e:	60fb      	str	r3, [r7, #12]
}
 801bc60:	bf00      	nop
 801bc62:	e7fe      	b.n	801bc62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801bc64:	693b      	ldr	r3, [r7, #16]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d00a      	beq.n	801bc82 <vPortFree+0x62>
	__asm volatile
 801bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc70:	f383 8811 	msr	BASEPRI, r3
 801bc74:	f3bf 8f6f 	isb	sy
 801bc78:	f3bf 8f4f 	dsb	sy
 801bc7c:	60bb      	str	r3, [r7, #8]
}
 801bc7e:	bf00      	nop
 801bc80:	e7fe      	b.n	801bc80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	685a      	ldr	r2, [r3, #4]
 801bc86:	4b14      	ldr	r3, [pc, #80]	; (801bcd8 <vPortFree+0xb8>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	4013      	ands	r3, r2
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d01e      	beq.n	801bcce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d11a      	bne.n	801bcce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801bc98:	693b      	ldr	r3, [r7, #16]
 801bc9a:	685a      	ldr	r2, [r3, #4]
 801bc9c:	4b0e      	ldr	r3, [pc, #56]	; (801bcd8 <vPortFree+0xb8>)
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	43db      	mvns	r3, r3
 801bca2:	401a      	ands	r2, r3
 801bca4:	693b      	ldr	r3, [r7, #16]
 801bca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801bca8:	f7fe fba0 	bl	801a3ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	685a      	ldr	r2, [r3, #4]
 801bcb0:	4b0a      	ldr	r3, [pc, #40]	; (801bcdc <vPortFree+0xbc>)
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	4413      	add	r3, r2
 801bcb6:	4a09      	ldr	r2, [pc, #36]	; (801bcdc <vPortFree+0xbc>)
 801bcb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801bcba:	6938      	ldr	r0, [r7, #16]
 801bcbc:	f000 f874 	bl	801bda8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801bcc0:	4b07      	ldr	r3, [pc, #28]	; (801bce0 <vPortFree+0xc0>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	4a06      	ldr	r2, [pc, #24]	; (801bce0 <vPortFree+0xc0>)
 801bcc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801bcca:	f7fe fb9d 	bl	801a408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801bcce:	bf00      	nop
 801bcd0:	3718      	adds	r7, #24
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	bd80      	pop	{r7, pc}
 801bcd6:	bf00      	nop
 801bcd8:	24006d5c 	.word	0x24006d5c
 801bcdc:	24006d4c 	.word	0x24006d4c
 801bce0:	24006d58 	.word	0x24006d58

0801bce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801bce4:	b480      	push	{r7}
 801bce6:	b085      	sub	sp, #20
 801bce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801bcea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801bcee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bcf0:	4b27      	ldr	r3, [pc, #156]	; (801bd90 <prvHeapInit+0xac>)
 801bcf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	f003 0307 	and.w	r3, r3, #7
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d00c      	beq.n	801bd18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	3307      	adds	r3, #7
 801bd02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	f023 0307 	bic.w	r3, r3, #7
 801bd0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bd0c:	68ba      	ldr	r2, [r7, #8]
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	1ad3      	subs	r3, r2, r3
 801bd12:	4a1f      	ldr	r2, [pc, #124]	; (801bd90 <prvHeapInit+0xac>)
 801bd14:	4413      	add	r3, r2
 801bd16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bd1c:	4a1d      	ldr	r2, [pc, #116]	; (801bd94 <prvHeapInit+0xb0>)
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bd22:	4b1c      	ldr	r3, [pc, #112]	; (801bd94 <prvHeapInit+0xb0>)
 801bd24:	2200      	movs	r2, #0
 801bd26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	68ba      	ldr	r2, [r7, #8]
 801bd2c:	4413      	add	r3, r2
 801bd2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801bd30:	2208      	movs	r2, #8
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	1a9b      	subs	r3, r3, r2
 801bd36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	f023 0307 	bic.w	r3, r3, #7
 801bd3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	4a15      	ldr	r2, [pc, #84]	; (801bd98 <prvHeapInit+0xb4>)
 801bd44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801bd46:	4b14      	ldr	r3, [pc, #80]	; (801bd98 <prvHeapInit+0xb4>)
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bd4e:	4b12      	ldr	r3, [pc, #72]	; (801bd98 <prvHeapInit+0xb4>)
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	2200      	movs	r2, #0
 801bd54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	68fa      	ldr	r2, [r7, #12]
 801bd5e:	1ad2      	subs	r2, r2, r3
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bd64:	4b0c      	ldr	r3, [pc, #48]	; (801bd98 <prvHeapInit+0xb4>)
 801bd66:	681a      	ldr	r2, [r3, #0]
 801bd68:	683b      	ldr	r3, [r7, #0]
 801bd6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	685b      	ldr	r3, [r3, #4]
 801bd70:	4a0a      	ldr	r2, [pc, #40]	; (801bd9c <prvHeapInit+0xb8>)
 801bd72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	685b      	ldr	r3, [r3, #4]
 801bd78:	4a09      	ldr	r2, [pc, #36]	; (801bda0 <prvHeapInit+0xbc>)
 801bd7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bd7c:	4b09      	ldr	r3, [pc, #36]	; (801bda4 <prvHeapInit+0xc0>)
 801bd7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bd82:	601a      	str	r2, [r3, #0]
}
 801bd84:	bf00      	nop
 801bd86:	3714      	adds	r7, #20
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8e:	4770      	bx	lr
 801bd90:	24003140 	.word	0x24003140
 801bd94:	24006d40 	.word	0x24006d40
 801bd98:	24006d48 	.word	0x24006d48
 801bd9c:	24006d50 	.word	0x24006d50
 801bda0:	24006d4c 	.word	0x24006d4c
 801bda4:	24006d5c 	.word	0x24006d5c

0801bda8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801bda8:	b480      	push	{r7}
 801bdaa:	b085      	sub	sp, #20
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bdb0:	4b28      	ldr	r3, [pc, #160]	; (801be54 <prvInsertBlockIntoFreeList+0xac>)
 801bdb2:	60fb      	str	r3, [r7, #12]
 801bdb4:	e002      	b.n	801bdbc <prvInsertBlockIntoFreeList+0x14>
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	60fb      	str	r3, [r7, #12]
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	687a      	ldr	r2, [r7, #4]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d8f7      	bhi.n	801bdb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	68ba      	ldr	r2, [r7, #8]
 801bdd0:	4413      	add	r3, r2
 801bdd2:	687a      	ldr	r2, [r7, #4]
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	d108      	bne.n	801bdea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	685a      	ldr	r2, [r3, #4]
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	685b      	ldr	r3, [r3, #4]
 801bde0:	441a      	add	r2, r3
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	68ba      	ldr	r2, [r7, #8]
 801bdf4:	441a      	add	r2, r3
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d118      	bne.n	801be30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	681a      	ldr	r2, [r3, #0]
 801be02:	4b15      	ldr	r3, [pc, #84]	; (801be58 <prvInsertBlockIntoFreeList+0xb0>)
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	429a      	cmp	r2, r3
 801be08:	d00d      	beq.n	801be26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	685a      	ldr	r2, [r3, #4]
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	685b      	ldr	r3, [r3, #4]
 801be14:	441a      	add	r2, r3
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	681a      	ldr	r2, [r3, #0]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	601a      	str	r2, [r3, #0]
 801be24:	e008      	b.n	801be38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801be26:	4b0c      	ldr	r3, [pc, #48]	; (801be58 <prvInsertBlockIntoFreeList+0xb0>)
 801be28:	681a      	ldr	r2, [r3, #0]
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	601a      	str	r2, [r3, #0]
 801be2e:	e003      	b.n	801be38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	681a      	ldr	r2, [r3, #0]
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801be38:	68fa      	ldr	r2, [r7, #12]
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	429a      	cmp	r2, r3
 801be3e:	d002      	beq.n	801be46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801be46:	bf00      	nop
 801be48:	3714      	adds	r7, #20
 801be4a:	46bd      	mov	sp, r7
 801be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be50:	4770      	bx	lr
 801be52:	bf00      	nop
 801be54:	24006d40 	.word	0x24006d40
 801be58:	24006d48 	.word	0x24006d48

0801be5c <__libc_init_array>:
 801be5c:	b570      	push	{r4, r5, r6, lr}
 801be5e:	4d0d      	ldr	r5, [pc, #52]	; (801be94 <__libc_init_array+0x38>)
 801be60:	4c0d      	ldr	r4, [pc, #52]	; (801be98 <__libc_init_array+0x3c>)
 801be62:	1b64      	subs	r4, r4, r5
 801be64:	10a4      	asrs	r4, r4, #2
 801be66:	2600      	movs	r6, #0
 801be68:	42a6      	cmp	r6, r4
 801be6a:	d109      	bne.n	801be80 <__libc_init_array+0x24>
 801be6c:	4d0b      	ldr	r5, [pc, #44]	; (801be9c <__libc_init_array+0x40>)
 801be6e:	4c0c      	ldr	r4, [pc, #48]	; (801bea0 <__libc_init_array+0x44>)
 801be70:	f000 f83e 	bl	801bef0 <_init>
 801be74:	1b64      	subs	r4, r4, r5
 801be76:	10a4      	asrs	r4, r4, #2
 801be78:	2600      	movs	r6, #0
 801be7a:	42a6      	cmp	r6, r4
 801be7c:	d105      	bne.n	801be8a <__libc_init_array+0x2e>
 801be7e:	bd70      	pop	{r4, r5, r6, pc}
 801be80:	f855 3b04 	ldr.w	r3, [r5], #4
 801be84:	4798      	blx	r3
 801be86:	3601      	adds	r6, #1
 801be88:	e7ee      	b.n	801be68 <__libc_init_array+0xc>
 801be8a:	f855 3b04 	ldr.w	r3, [r5], #4
 801be8e:	4798      	blx	r3
 801be90:	3601      	adds	r6, #1
 801be92:	e7f2      	b.n	801be7a <__libc_init_array+0x1e>
 801be94:	0801c214 	.word	0x0801c214
 801be98:	0801c214 	.word	0x0801c214
 801be9c:	0801c214 	.word	0x0801c214
 801bea0:	0801c218 	.word	0x0801c218

0801bea4 <memcpy>:
 801bea4:	440a      	add	r2, r1
 801bea6:	4291      	cmp	r1, r2
 801bea8:	f100 33ff 	add.w	r3, r0, #4294967295
 801beac:	d100      	bne.n	801beb0 <memcpy+0xc>
 801beae:	4770      	bx	lr
 801beb0:	b510      	push	{r4, lr}
 801beb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801beb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801beba:	4291      	cmp	r1, r2
 801bebc:	d1f9      	bne.n	801beb2 <memcpy+0xe>
 801bebe:	bd10      	pop	{r4, pc}

0801bec0 <memset>:
 801bec0:	4402      	add	r2, r0
 801bec2:	4603      	mov	r3, r0
 801bec4:	4293      	cmp	r3, r2
 801bec6:	d100      	bne.n	801beca <memset+0xa>
 801bec8:	4770      	bx	lr
 801beca:	f803 1b01 	strb.w	r1, [r3], #1
 801bece:	e7f9      	b.n	801bec4 <memset+0x4>

0801bed0 <strcat>:
 801bed0:	b510      	push	{r4, lr}
 801bed2:	4602      	mov	r2, r0
 801bed4:	7814      	ldrb	r4, [r2, #0]
 801bed6:	4613      	mov	r3, r2
 801bed8:	3201      	adds	r2, #1
 801beda:	2c00      	cmp	r4, #0
 801bedc:	d1fa      	bne.n	801bed4 <strcat+0x4>
 801bede:	3b01      	subs	r3, #1
 801bee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bee4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bee8:	2a00      	cmp	r2, #0
 801beea:	d1f9      	bne.n	801bee0 <strcat+0x10>
 801beec:	bd10      	pop	{r4, pc}
	...

0801bef0 <_init>:
 801bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bef2:	bf00      	nop
 801bef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bef6:	bc08      	pop	{r3}
 801bef8:	469e      	mov	lr, r3
 801befa:	4770      	bx	lr

0801befc <_fini>:
 801befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801befe:	bf00      	nop
 801bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf02:	bc08      	pop	{r3}
 801bf04:	469e      	mov	lr, r3
 801bf06:	4770      	bx	lr
