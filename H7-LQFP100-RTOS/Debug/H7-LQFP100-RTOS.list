
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016aa0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016d40  08016d40  00026d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171d8  080171d8  000271d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080171e0  080171e0  000271e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080171e4  080171e4  000271e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  080171e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050f0  24000100  080172e4  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240051f0  080172e4  000351f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b081  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070b6  00000000  00000000  0006b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028d0  00000000  00000000  00072268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025e8  00000000  00000000  00074b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044ab0  00000000  00000000  00077120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c932  00000000  00000000  000bbbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194df8  00000000  00000000  000f8502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028d2fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b214  00000000  00000000  0028d34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d28 	.word	0x08016d28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016d28 	.word	0x08016d28

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ff93 	bl	8004594 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fda4 	bl	80021c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f8ae 	bl	80057e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd97 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f9f1 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd7e 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f9e3 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd70 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f9d5 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd62 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f9c7 	bl	8004a9c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd54 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f9b8 	bl	8004a9c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd45 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f9a9 	bl	8004a9c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd36 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f99a 	bl	8004a9c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd27 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f98b 	bl	8004a9c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd18 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f97c 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd09 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f96d 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcfa 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f95e 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fceb 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fe7b 	bl	8004594 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc8c 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f8e6 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc73 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f8d8 	bl	8004a9c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc65 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f8ca 	bl	8004a9c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc57 	bl	80021c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f8bc 	bl	8004a9c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc49 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fafe 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 faf2 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fae6 	bl	8008ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fc79 	bl	800636c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb9e 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb34 	bl	800414c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fb2e 	bl	800414c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fc19 	bl	800636c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb3e 	bl	80021c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fbc5 	bl	801631c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ffe1 	bl	8005b60 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb0c 	bl	80021c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f9fc 	bl	8005fc0 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 faf7 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f9d1 	bl	8008ffc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb64 	bl	800636c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa89 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 ff26 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ff3d 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fefd 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 ff14 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fef5 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 ff0c 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 feed 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 ff04 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 fee5 	bl	8005b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fefc 	bl	8005b44 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000428 	.word	0x24000428

08000d74 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_FREERTOS_Init+0x98>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_FREERTOS_Init+0x9c>)
 8000d96:	f012 f8df 	bl	8012f58 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_FREERTOS_Init+0xa0>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_FREERTOS_Init+0xa4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_FREERTOS_Init+0xa8>)
 8000da6:	f012 f8d7 	bl	8012f58 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_FREERTOS_Init+0xac>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_FREERTOS_Init+0xb0>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_FREERTOS_Init+0xb4>)
 8000db6:	f012 f8cf 	bl	8012f58 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_FREERTOS_Init+0xb8>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_FREERTOS_Init+0xbc>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_FREERTOS_Init+0xc0>)
 8000dc6:	f012 f8c7 	bl	8012f58 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <MX_FREERTOS_Init+0xc4>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <MX_FREERTOS_Init+0xc8>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <MX_FREERTOS_Init+0xcc>)
 8000dd6:	f012 f8bf 	bl	8012f58 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_FREERTOS_Init+0xd0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_FREERTOS_Init+0xd4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_FREERTOS_Init+0xd8>)
 8000de6:	f012 f8b7 	bl	8012f58 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_FREERTOS_Init+0xdc>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_FREERTOS_Init+0xe0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	481e      	ldr	r0, [pc, #120]	; (8000e70 <MX_FREERTOS_Init+0xe4>)
 8000df6:	f012 f8af 	bl	8012f58 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_FREERTOS_Init+0xe8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <MX_FREERTOS_Init+0xec>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481d      	ldr	r0, [pc, #116]	; (8000e7c <MX_FREERTOS_Init+0xf0>)
 8000e06:	f012 f8a7 	bl	8012f58 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_FREERTOS_Init+0xf4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <MX_FREERTOS_Init+0xf8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <MX_FREERTOS_Init+0xfc>)
 8000e16:	f012 f89f 	bl	8012f58 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <MX_FREERTOS_Init+0x100>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08016fa8 	.word	0x08016fa8
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	24000360 	.word	0x24000360
 8000e30:	08016fcc 	.word	0x08016fcc
 8000e34:	08000eb9 	.word	0x08000eb9
 8000e38:	24000364 	.word	0x24000364
 8000e3c:	08016ff0 	.word	0x08016ff0
 8000e40:	08000ee1 	.word	0x08000ee1
 8000e44:	24000368 	.word	0x24000368
 8000e48:	08017014 	.word	0x08017014
 8000e4c:	08000f09 	.word	0x08000f09
 8000e50:	2400036c 	.word	0x2400036c
 8000e54:	08017038 	.word	0x08017038
 8000e58:	08000f81 	.word	0x08000f81
 8000e5c:	24000370 	.word	0x24000370
 8000e60:	0801705c 	.word	0x0801705c
 8000e64:	08000ff9 	.word	0x08000ff9
 8000e68:	24000374 	.word	0x24000374
 8000e6c:	08017080 	.word	0x08017080
 8000e70:	080010a5 	.word	0x080010a5
 8000e74:	24000378 	.word	0x24000378
 8000e78:	080170a4 	.word	0x080170a4
 8000e7c:	080010d5 	.word	0x080010d5
 8000e80:	2400037c 	.word	0x2400037c
 8000e84:	080170c8 	.word	0x080170c8
 8000e88:	080011b5 	.word	0x080011b5
 8000e8c:	24000380 	.word	0x24000380

08000e90 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PMT_init+0x24>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f012 f9da 	bl	801325c <osEventFlagsWait>

		create_pmt_packet();
 8000ea8:	f001 f990 	bl	80021cc <create_pmt_packet>

		osThreadYield();
 8000eac:	f012 f8e6 	bl	801307c <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb0:	e7f2      	b.n	8000e98 <PMT_init+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	240003d8 	.word	0x240003d8

08000eb8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <ERPA_init+0x24>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f012 f9c6 	bl	801325c <osEventFlagsWait>

		create_erpa_packet();
 8000ed0:	f001 f9c2 	bl	8002258 <create_erpa_packet>

		osThreadYield();
 8000ed4:	f012 f8d2 	bl	801307c <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	e7f2      	b.n	8000ec0 <ERPA_init+0x8>
 8000eda:	bf00      	nop
 8000edc:	240003d8 	.word	0x240003d8

08000ee0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HK_init+0x24>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	f012 f9b2 	bl	801325c <osEventFlagsWait>

		create_hk_packet();
 8000ef8:	f001 fa0c 	bl	8002314 <create_hk_packet>

		osThreadYield();
 8000efc:	f012 f8be 	bl	801307c <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	e7f2      	b.n	8000ee8 <HK_init+0x8>
 8000f02:	bf00      	nop
 8000f04:	240003d8 	.word	0x240003d8

08000f08 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <AUTOINIT_init+0x70>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f012 f99e 	bl	801325c <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e012      	b.n	8000f4c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <AUTOINIT_init+0x74>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f008 fa26 	bl	800938c <HAL_GPIO_WritePin>
			osDelay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f012 f8bb 	bl	80130bc <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dde9      	ble.n	8000f26 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f52:	2308      	movs	r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e008      	b.n	8000f6a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 ff92 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	ddf3      	ble.n	8000f58 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f70:	f012 f884 	bl	801307c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f74:	e7cc      	b.n	8000f10 <AUTOINIT_init+0x8>
 8000f76:	bf00      	nop
 8000f78:	240003dc 	.word	0x240003dc
 8000f7c:	080170ec 	.word	0x080170ec

08000f80 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <AUTODEINIT_init+0x70>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f012 f962 	bl	801325c <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f98:	230d      	movs	r3, #13
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e008      	b.n	8000fb0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 ff6f 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dcf3      	bgt.n	8000f9e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e012      	b.n	8000fe2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <AUTODEINIT_init+0x74>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	889b      	ldrh	r3, [r3, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f008 f9db 	bl	800938c <HAL_GPIO_WritePin>
			osDelay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f012 f870 	bl	80130bc <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dae9      	bge.n	8000fbc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fe8:	f012 f848 	bl	801307c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fec:	e7cc      	b.n	8000f88 <AUTODEINIT_init+0x8>
 8000fee:	bf00      	nop
 8000ff0:	240003dc 	.word	0x240003dc
 8000ff4:	080170ec 	.word	0x080170ec

08000ff8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <Voltage_Monitor_init+0xa8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	f012 f926 	bl	801325c <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001010:	f002 ff64 	bl	8003edc <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001014:	f002 ff58 	bl	8003ec8 <get_rail_monitor>
 8001018:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e03b      	b.n	8001098 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	789b      	ldrb	r3, [r3, #2]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02d      	beq.n	8001092 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	461a      	mov	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	8898      	ldrh	r0, [r3, #4]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	461a      	mov	r2, r3
 8001070:	f002 ffc2 	bl	8003ff8 <in_range>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	785a      	ldrb	r2, [r3, #1]
 800108c:	3201      	adds	r2, #1
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b11      	cmp	r3, #17
 800109c:	ddc0      	ble.n	8001020 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800109e:	e7af      	b.n	8001000 <Voltage_Monitor_init+0x8>
 80010a0:	240003dc 	.word	0x240003dc

080010a4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <STOP_init+0x2c>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	f012 f8d0 	bl	801325c <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <STOP_init+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f012 f898 	bl	80131f8 <osEventFlagsClear>

	  enter_stop();
 80010c8:	f001 f85c 	bl	8002184 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010cc:	e7ee      	b.n	80010ac <STOP_init+0x8>
 80010ce:	bf00      	nop
 80010d0:	240003dc 	.word	0x240003dc

080010d4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <Science_init+0xc0>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	f012 f8b8 	bl	801325c <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <Science_init+0xc4>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <Science_init+0xc4>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f008 f940 	bl	800938c <HAL_GPIO_WritePin>
			osDelay(200);
 800110c:	20c8      	movs	r0, #200	; 0xc8
 800110e:	f011 ffd5 	bl	80130bc <osDelay>
		for (int i = 0; i < 9; i++) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b08      	cmp	r3, #8
 800111c:	dde9      	ble.n	80010f2 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800111e:	2308      	movs	r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	e008      	b.n	8001136 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f002 feac 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b10      	cmp	r3, #16
 800113a:	ddf3      	ble.n	8001124 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <Science_init+0xc8>)
 8001148:	2100      	movs	r1, #0
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <Science_init+0xcc>)
 800114c:	f004 fd82 	bl	8005c54 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <Science_init+0xd0>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001156:	210c      	movs	r1, #12
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <Science_init+0xd4>)
 800115a:	f00d fd1b 	bl	800eb94 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800115e:	2100      	movs	r1, #0
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <Science_init+0xd8>)
 8001162:	f00d fd17 	bl	800eb94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <Science_init+0xdc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2104      	movs	r1, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f011 ffff 	bl	8013170 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <Science_init+0xdc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f011 fff9 	bl	8013170 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <Science_init+0xdc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f011 fff3 	bl	8013170 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 800118a:	b662      	cpsie	i
}
 800118c:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800118e:	f011 ff75 	bl	801307c <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001192:	e7a3      	b.n	80010dc <Science_init+0x8>
 8001194:	240003e0 	.word	0x240003e0
 8001198:	080170ec 	.word	0x080170ec
 800119c:	24000000 	.word	0x24000000
 80011a0:	240002d4 	.word	0x240002d4
 80011a4:	24000424 	.word	0x24000424
 80011a8:	24000634 	.word	0x24000634
 80011ac:	240005e8 	.word	0x240005e8
 80011b0:	240003d8 	.word	0x240003d8

080011b4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <Idle_init+0x8c>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c4:	2200      	movs	r2, #0
 80011c6:	2102      	movs	r1, #2
 80011c8:	f012 f848 	bl	801325c <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011cc:	210c      	movs	r1, #12
 80011ce:	481d      	ldr	r0, [pc, #116]	; (8001244 <Idle_init+0x90>)
 80011d0:	f00d fe3a 	bl	800ee48 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011d4:	2100      	movs	r1, #0
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <Idle_init+0x94>)
 80011d8:	f00d fe36 	bl	800ee48 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <Idle_init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011e2:	2100      	movs	r1, #0
 80011e4:	481a      	ldr	r0, [pc, #104]	; (8001250 <Idle_init+0x9c>)
 80011e6:	f004 fdf5 	bl	8005dd4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011ea:	2310      	movs	r3, #16
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e008      	b.n	8001202 <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe46 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3b01      	subs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b07      	cmp	r3, #7
 8001206:	dcf3      	bgt.n	80011f0 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001208:	2308      	movs	r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e012      	b.n	8001234 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <Idle_init+0xa0>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <Idle_init+0xa0>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f008 f8b2 	bl	800938c <HAL_GPIO_WritePin>
			osDelay(200);
 8001228:	20c8      	movs	r0, #200	; 0xc8
 800122a:	f011 ff47 	bl	80130bc <osDelay>
		for (int i = 8; i >= 0; i--) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3b01      	subs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dae9      	bge.n	800120e <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 800123a:	f011 ff1f 	bl	801307c <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800123e:	e7bd      	b.n	80011bc <Idle_init+0x8>
 8001240:	240003e0 	.word	0x240003e0
 8001244:	24000634 	.word	0x24000634
 8001248:	240005e8 	.word	0x240005e8
 800124c:	24000424 	.word	0x24000424
 8001250:	240002d4 	.word	0x240002d4
 8001254:	080170ec 	.word	0x080170ec

08001258 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_GPIO_Init+0xe8>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <MX_GPIO_Init+0xe8>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_GPIO_Init+0xe8>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a23      	ldr	r2, [pc, #140]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_GPIO_Init+0xe8>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_GPIO_Init+0xec>)
 80012ee:	f008 f84d 	bl	800938c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2164      	movs	r1, #100	; 0x64
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0xf0>)
 80012f8:	f008 f848 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012fc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001300:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <MX_GPIO_Init+0xec>)
 8001316:	f007 fe71 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_GPIO_Init+0xf0>)
 8001332:	f007 fe63 	bl	8008ffc <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	58020800 	.word	0x58020800
 8001348:	58020400 	.word	0x58020400

0800134c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <MX_I2C1_Init+0x7c>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_I2C1_Init+0x80>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_I2C1_Init+0x78>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_I2C1_Init+0x78>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x78>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001388:	f008 f81a 	bl	80093c0 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 ff15 	bl	80021c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <MX_I2C1_Init+0x78>)
 800139a:	f008 fd61 	bl	8009e60 <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 ff0c 	bl	80021c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_I2C1_Init+0x78>)
 80013ac:	f008 fda3 	bl	8009ef6 <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 ff03 	bl	80021c0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f008 fde8 	bl	8009f90 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	24000384 	.word	0x24000384
 80013c8:	40005400 	.word	0x40005400
 80013cc:	0020081f 	.word	0x0020081f

080013d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ba      	sub	sp, #232	; 0xe8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	22c0      	movs	r2, #192	; 0xc0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f014 ff93 	bl	801631c <memset>
  if(i2cHandle->Instance==I2C1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d146      	bne.n	800148e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001400:	f04f 0208 	mov.w	r2, #8
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f009 fe7c 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001422:	f000 fecd 	bl	80021c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_I2C_MspInit+0xcc>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HAL_I2C_MspInit+0xd0>)
 800146c:	f007 fdc6 	bl	8008ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	37e8      	adds	r7, #232	; 0xe8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40005400 	.word	0x40005400
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020400 	.word	0x58020400

080014a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a8:	f3bf 8f4f 	dsb	sy
}
 80014ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <__NVIC_SystemReset+0x24>)
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_SystemReset+0x28>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014be:	f3bf 8f4f 	dsb	sy
}
 80014c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <__NVIC_SystemReset+0x20>
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0004 	.word	0x05fa0004

080014d0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d106      	bne.n	80014ee <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f011 fe42 	bl	8013170 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014ec:	e023      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d106      	bne.n	8001504 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f011 fe37 	bl	8013170 <osEventFlagsSet>
}
 8001502:	e018      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f011 fe2c 	bl	8013170 <osEventFlagsSet>
		if (HK_ENABLED){
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2104      	movs	r1, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f011 fe21 	bl	8013170 <osEventFlagsSet>
}
 800152e:	e002      	b.n	8001536 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8001530:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001532:	f015 f849 	bl	80165c8 <puts>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240005e8 	.word	0x240005e8
 8001544:	240003d8 	.word	0x240003d8
 8001548:	24000634 	.word	0x24000634
 800154c:	24000680 	.word	0x24000680
 8001550:	240003dc 	.word	0x240003dc
 8001554:	24000424 	.word	0x24000424
 8001558:	08016db8 	.word	0x08016db8

0800155c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	49f2      	ldr	r1, [pc, #968]	; (8001930 <HAL_UART_RxCpltCallback+0x3d4>)
 8001568:	48f2      	ldr	r0, [pc, #968]	; (8001934 <HAL_UART_RxCpltCallback+0x3d8>)
 800156a:	f00e fff3 	bl	8010554 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800156e:	4bf0      	ldr	r3, [pc, #960]	; (8001930 <HAL_UART_RxCpltCallback+0x3d4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2be0      	cmp	r3, #224	; 0xe0
 8001578:	f200 8419 	bhi.w	8001dae <HAL_UART_RxCpltCallback+0x852>
 800157c:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_UART_RxCpltCallback+0x28>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	0800191d 	.word	0x0800191d
 8001588:	08001961 	.word	0x08001961
 800158c:	080019d1 	.word	0x080019d1
 8001590:	08001a0b 	.word	0x08001a0b
 8001594:	08001a43 	.word	0x08001a43
 8001598:	08001a7d 	.word	0x08001a7d
 800159c:	08001ab9 	.word	0x08001ab9
 80015a0:	08001af5 	.word	0x08001af5
 80015a4:	08001b2f 	.word	0x08001b2f
 80015a8:	08001b63 	.word	0x08001b63
 80015ac:	08001b8f 	.word	0x08001b8f
 80015b0:	08001bbb 	.word	0x08001bbb
 80015b4:	08001be5 	.word	0x08001be5
 80015b8:	08001cc1 	.word	0x08001cc1
 80015bc:	08001d29 	.word	0x08001d29
 80015c0:	08001d51 	.word	0x08001d51
 80015c4:	08001909 	.word	0x08001909
 80015c8:	08001945 	.word	0x08001945
 80015cc:	080019b3 	.word	0x080019b3
 80015d0:	080019ef 	.word	0x080019ef
 80015d4:	08001a27 	.word	0x08001a27
 80015d8:	08001a5f 	.word	0x08001a5f
 80015dc:	08001a9b 	.word	0x08001a9b
 80015e0:	08001ad7 	.word	0x08001ad7
 80015e4:	08001b13 	.word	0x08001b13
 80015e8:	08001b4b 	.word	0x08001b4b
 80015ec:	08001b73 	.word	0x08001b73
 80015f0:	08001b9f 	.word	0x08001b9f
 80015f4:	08001bcb 	.word	0x08001bcb
 80015f8:	08001bf3 	.word	0x08001bf3
 80015fc:	08001d01 	.word	0x08001d01
 8001600:	08001daf 	.word	0x08001daf
 8001604:	08001daf 	.word	0x08001daf
 8001608:	08001daf 	.word	0x08001daf
 800160c:	08001daf 	.word	0x08001daf
 8001610:	08001daf 	.word	0x08001daf
 8001614:	08001daf 	.word	0x08001daf
 8001618:	08001daf 	.word	0x08001daf
 800161c:	08001daf 	.word	0x08001daf
 8001620:	08001daf 	.word	0x08001daf
 8001624:	08001daf 	.word	0x08001daf
 8001628:	08001daf 	.word	0x08001daf
 800162c:	08001daf 	.word	0x08001daf
 8001630:	08001daf 	.word	0x08001daf
 8001634:	08001daf 	.word	0x08001daf
 8001638:	08001daf 	.word	0x08001daf
 800163c:	08001daf 	.word	0x08001daf
 8001640:	08001daf 	.word	0x08001daf
 8001644:	08001daf 	.word	0x08001daf
 8001648:	08001daf 	.word	0x08001daf
 800164c:	08001daf 	.word	0x08001daf
 8001650:	08001daf 	.word	0x08001daf
 8001654:	08001daf 	.word	0x08001daf
 8001658:	08001daf 	.word	0x08001daf
 800165c:	08001daf 	.word	0x08001daf
 8001660:	08001daf 	.word	0x08001daf
 8001664:	08001daf 	.word	0x08001daf
 8001668:	08001daf 	.word	0x08001daf
 800166c:	08001daf 	.word	0x08001daf
 8001670:	08001daf 	.word	0x08001daf
 8001674:	08001daf 	.word	0x08001daf
 8001678:	08001daf 	.word	0x08001daf
 800167c:	08001daf 	.word	0x08001daf
 8001680:	08001daf 	.word	0x08001daf
 8001684:	08001daf 	.word	0x08001daf
 8001688:	08001daf 	.word	0x08001daf
 800168c:	08001daf 	.word	0x08001daf
 8001690:	08001daf 	.word	0x08001daf
 8001694:	08001daf 	.word	0x08001daf
 8001698:	08001daf 	.word	0x08001daf
 800169c:	08001daf 	.word	0x08001daf
 80016a0:	08001daf 	.word	0x08001daf
 80016a4:	08001daf 	.word	0x08001daf
 80016a8:	08001daf 	.word	0x08001daf
 80016ac:	08001daf 	.word	0x08001daf
 80016b0:	08001daf 	.word	0x08001daf
 80016b4:	08001daf 	.word	0x08001daf
 80016b8:	08001daf 	.word	0x08001daf
 80016bc:	08001daf 	.word	0x08001daf
 80016c0:	08001daf 	.word	0x08001daf
 80016c4:	08001daf 	.word	0x08001daf
 80016c8:	08001daf 	.word	0x08001daf
 80016cc:	08001daf 	.word	0x08001daf
 80016d0:	08001daf 	.word	0x08001daf
 80016d4:	08001daf 	.word	0x08001daf
 80016d8:	08001daf 	.word	0x08001daf
 80016dc:	08001daf 	.word	0x08001daf
 80016e0:	08001daf 	.word	0x08001daf
 80016e4:	08001daf 	.word	0x08001daf
 80016e8:	08001daf 	.word	0x08001daf
 80016ec:	08001daf 	.word	0x08001daf
 80016f0:	08001daf 	.word	0x08001daf
 80016f4:	08001daf 	.word	0x08001daf
 80016f8:	08001daf 	.word	0x08001daf
 80016fc:	08001daf 	.word	0x08001daf
 8001700:	08001daf 	.word	0x08001daf
 8001704:	08001daf 	.word	0x08001daf
 8001708:	08001daf 	.word	0x08001daf
 800170c:	08001daf 	.word	0x08001daf
 8001710:	08001daf 	.word	0x08001daf
 8001714:	08001daf 	.word	0x08001daf
 8001718:	08001daf 	.word	0x08001daf
 800171c:	08001daf 	.word	0x08001daf
 8001720:	08001daf 	.word	0x08001daf
 8001724:	08001daf 	.word	0x08001daf
 8001728:	08001daf 	.word	0x08001daf
 800172c:	08001daf 	.word	0x08001daf
 8001730:	08001daf 	.word	0x08001daf
 8001734:	08001daf 	.word	0x08001daf
 8001738:	08001daf 	.word	0x08001daf
 800173c:	08001daf 	.word	0x08001daf
 8001740:	08001daf 	.word	0x08001daf
 8001744:	08001daf 	.word	0x08001daf
 8001748:	08001daf 	.word	0x08001daf
 800174c:	08001daf 	.word	0x08001daf
 8001750:	08001daf 	.word	0x08001daf
 8001754:	08001daf 	.word	0x08001daf
 8001758:	08001daf 	.word	0x08001daf
 800175c:	08001daf 	.word	0x08001daf
 8001760:	08001daf 	.word	0x08001daf
 8001764:	08001daf 	.word	0x08001daf
 8001768:	08001daf 	.word	0x08001daf
 800176c:	08001daf 	.word	0x08001daf
 8001770:	08001daf 	.word	0x08001daf
 8001774:	08001daf 	.word	0x08001daf
 8001778:	08001daf 	.word	0x08001daf
 800177c:	08001daf 	.word	0x08001daf
 8001780:	08001daf 	.word	0x08001daf
 8001784:	08001daf 	.word	0x08001daf
 8001788:	08001daf 	.word	0x08001daf
 800178c:	08001daf 	.word	0x08001daf
 8001790:	08001daf 	.word	0x08001daf
 8001794:	08001daf 	.word	0x08001daf
 8001798:	08001daf 	.word	0x08001daf
 800179c:	08001daf 	.word	0x08001daf
 80017a0:	08001daf 	.word	0x08001daf
 80017a4:	08001daf 	.word	0x08001daf
 80017a8:	08001daf 	.word	0x08001daf
 80017ac:	08001daf 	.word	0x08001daf
 80017b0:	08001daf 	.word	0x08001daf
 80017b4:	08001daf 	.word	0x08001daf
 80017b8:	08001daf 	.word	0x08001daf
 80017bc:	08001daf 	.word	0x08001daf
 80017c0:	08001daf 	.word	0x08001daf
 80017c4:	08001daf 	.word	0x08001daf
 80017c8:	08001daf 	.word	0x08001daf
 80017cc:	08001daf 	.word	0x08001daf
 80017d0:	08001daf 	.word	0x08001daf
 80017d4:	08001daf 	.word	0x08001daf
 80017d8:	08001daf 	.word	0x08001daf
 80017dc:	08001daf 	.word	0x08001daf
 80017e0:	08001daf 	.word	0x08001daf
 80017e4:	08001daf 	.word	0x08001daf
 80017e8:	08001daf 	.word	0x08001daf
 80017ec:	08001daf 	.word	0x08001daf
 80017f0:	08001daf 	.word	0x08001daf
 80017f4:	08001daf 	.word	0x08001daf
 80017f8:	08001daf 	.word	0x08001daf
 80017fc:	08001daf 	.word	0x08001daf
 8001800:	08001daf 	.word	0x08001daf
 8001804:	08001daf 	.word	0x08001daf
 8001808:	08001daf 	.word	0x08001daf
 800180c:	08001daf 	.word	0x08001daf
 8001810:	08001daf 	.word	0x08001daf
 8001814:	08001daf 	.word	0x08001daf
 8001818:	08001daf 	.word	0x08001daf
 800181c:	08001daf 	.word	0x08001daf
 8001820:	08001daf 	.word	0x08001daf
 8001824:	08001daf 	.word	0x08001daf
 8001828:	08001daf 	.word	0x08001daf
 800182c:	08001daf 	.word	0x08001daf
 8001830:	08001daf 	.word	0x08001daf
 8001834:	08001daf 	.word	0x08001daf
 8001838:	08001daf 	.word	0x08001daf
 800183c:	08001daf 	.word	0x08001daf
 8001840:	08001d8d 	.word	0x08001d8d
 8001844:	08001daf 	.word	0x08001daf
 8001848:	08001daf 	.word	0x08001daf
 800184c:	08001daf 	.word	0x08001daf
 8001850:	08001daf 	.word	0x08001daf
 8001854:	08001daf 	.word	0x08001daf
 8001858:	08001daf 	.word	0x08001daf
 800185c:	08001daf 	.word	0x08001daf
 8001860:	08001daf 	.word	0x08001daf
 8001864:	08001daf 	.word	0x08001daf
 8001868:	08001daf 	.word	0x08001daf
 800186c:	08001daf 	.word	0x08001daf
 8001870:	08001daf 	.word	0x08001daf
 8001874:	08001daf 	.word	0x08001daf
 8001878:	08001daf 	.word	0x08001daf
 800187c:	08001daf 	.word	0x08001daf
 8001880:	08001d93 	.word	0x08001d93
 8001884:	08001daf 	.word	0x08001daf
 8001888:	08001daf 	.word	0x08001daf
 800188c:	08001daf 	.word	0x08001daf
 8001890:	08001daf 	.word	0x08001daf
 8001894:	08001daf 	.word	0x08001daf
 8001898:	08001daf 	.word	0x08001daf
 800189c:	08001daf 	.word	0x08001daf
 80018a0:	08001daf 	.word	0x08001daf
 80018a4:	08001daf 	.word	0x08001daf
 80018a8:	08001daf 	.word	0x08001daf
 80018ac:	08001daf 	.word	0x08001daf
 80018b0:	08001daf 	.word	0x08001daf
 80018b4:	08001daf 	.word	0x08001daf
 80018b8:	08001daf 	.word	0x08001daf
 80018bc:	08001daf 	.word	0x08001daf
 80018c0:	08001da1 	.word	0x08001da1
 80018c4:	08001d79 	.word	0x08001d79
 80018c8:	08001daf 	.word	0x08001daf
 80018cc:	08001daf 	.word	0x08001daf
 80018d0:	08001daf 	.word	0x08001daf
 80018d4:	08001daf 	.word	0x08001daf
 80018d8:	08001daf 	.word	0x08001daf
 80018dc:	08001daf 	.word	0x08001daf
 80018e0:	08001daf 	.word	0x08001daf
 80018e4:	08001daf 	.word	0x08001daf
 80018e8:	08001daf 	.word	0x08001daf
 80018ec:	08001daf 	.word	0x08001daf
 80018f0:	08001daf 	.word	0x08001daf
 80018f4:	08001daf 	.word	0x08001daf
 80018f8:	08001daf 	.word	0x08001daf
 80018fc:	08001daf 	.word	0x08001daf
 8001900:	08001daf 	.word	0x08001daf
 8001904:	08001d65 	.word	0x08001d65
	case 0x10: {
		printf("SDN1 ON\n");
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_UART_RxCpltCallback+0x3dc>)
 800190a:	f014 fe5d 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_UART_RxCpltCallback+0x3e0>)
 8001910:	2104      	movs	r1, #4
 8001912:	2201      	movs	r2, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f007 fd39 	bl	800938c <HAL_GPIO_WritePin>
		break;
 800191a:	e253      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <HAL_UART_RxCpltCallback+0x3e4>)
 800191e:	f014 fe53 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_UART_RxCpltCallback+0x3e0>)
 8001924:	2104      	movs	r1, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fd2f 	bl	800938c <HAL_GPIO_WritePin>
		break;
 800192e:	e249      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
 8001930:	240003e4 	.word	0x240003e4
 8001934:	240006cc 	.word	0x240006cc
 8001938:	08016dd0 	.word	0x08016dd0
 800193c:	58020400 	.word	0x58020400
 8001940:	08016dd8 	.word	0x08016dd8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001944:	48bb      	ldr	r0, [pc, #748]	; (8001c34 <HAL_UART_RxCpltCallback+0x6d8>)
 8001946:	f014 fe3f 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800194a:	4bbb      	ldr	r3, [pc, #748]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 800194c:	2120      	movs	r1, #32
 800194e:	2201      	movs	r2, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f007 fd1b 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001956:	2101      	movs	r1, #1
 8001958:	2008      	movs	r0, #8
 800195a:	f002 fa95 	bl	8003e88 <set_rail_monitor_enable>
		break;
 800195e:	e231      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001960:	48b6      	ldr	r0, [pc, #728]	; (8001c3c <HAL_UART_RxCpltCallback+0x6e0>)
 8001962:	f014 fe31 	bl	80165c8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001966:	2308      	movs	r3, #8
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e00f      	b.n	800198c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800196c:	4ab4      	ldr	r2, [pc, #720]	; (8001c40 <HAL_UART_RxCpltCallback+0x6e4>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001974:	4ab2      	ldr	r2, [pc, #712]	; (8001c40 <HAL_UART_RxCpltCallback+0x6e4>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	f007 fd03 	bl	800938c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3b01      	subs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	dcec      	bgt.n	800196c <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001992:	2310      	movs	r3, #16
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e008      	b.n	80019aa <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fa72 	bl	8003e88 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	dcf3      	bgt.n	8001998 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80019b0:	e208      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80019b2:	48a4      	ldr	r0, [pc, #656]	; (8001c44 <HAL_UART_RxCpltCallback+0x6e8>)
 80019b4:	f014 fe08 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80019b8:	4ba3      	ldr	r3, [pc, #652]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f007 fce3 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019c6:	2101      	movs	r1, #1
 80019c8:	2009      	movs	r0, #9
 80019ca:	f002 fa5d 	bl	8003e88 <set_rail_monitor_enable>

		break;
 80019ce:	e1f9      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019d0:	489e      	ldr	r0, [pc, #632]	; (8001c4c <HAL_UART_RxCpltCallback+0x6f0>)
 80019d2:	f014 fdf9 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019d6:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	2200      	movs	r2, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f007 fcd4 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	2009      	movs	r0, #9
 80019e8:	f002 fa4e 	bl	8003e88 <set_rail_monitor_enable>
		break;
 80019ec:	e1ea      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80019ee:	4898      	ldr	r0, [pc, #608]	; (8001c50 <HAL_UART_RxCpltCallback+0x6f4>)
 80019f0:	f014 fdea 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80019f4:	4b94      	ldr	r3, [pc, #592]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	2201      	movs	r2, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fcc6 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a00:	2101      	movs	r1, #1
 8001a02:	200a      	movs	r0, #10
 8001a04:	f002 fa40 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a08:	e1dc      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a0a:	4892      	ldr	r0, [pc, #584]	; (8001c54 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a0c:	f014 fddc 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a10:	4b8d      	ldr	r3, [pc, #564]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	2200      	movs	r2, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fcb8 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f002 fa32 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a24:	e1ce      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a26:	488c      	ldr	r0, [pc, #560]	; (8001c58 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a28:	f014 fdce 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a2c:	4b86      	ldr	r3, [pc, #536]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a2e:	2140      	movs	r1, #64	; 0x40
 8001a30:	2201      	movs	r2, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f007 fcaa 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	200b      	movs	r0, #11
 8001a3c:	f002 fa24 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a40:	e1c0      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a42:	4886      	ldr	r0, [pc, #536]	; (8001c5c <HAL_UART_RxCpltCallback+0x700>)
 8001a44:	f014 fdc0 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a48:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fc9c 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	200b      	movs	r0, #11
 8001a58:	f002 fa16 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a5c:	e1b2      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a5e:	4880      	ldr	r0, [pc, #512]	; (8001c60 <HAL_UART_RxCpltCallback+0x704>)
 8001a60:	f014 fdb2 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a64:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fc8d 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a72:	2101      	movs	r1, #1
 8001a74:	200c      	movs	r0, #12
 8001a76:	f002 fa07 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001a7a:	e1a3      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a7c:	4879      	ldr	r0, [pc, #484]	; (8001c64 <HAL_UART_RxCpltCallback+0x708>)
 8001a7e:	f014 fda3 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a82:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 fc7e 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	200c      	movs	r0, #12
 8001a94:	f002 f9f8 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001a98:	e194      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001a9a:	4873      	ldr	r0, [pc, #460]	; (8001c68 <HAL_UART_RxCpltCallback+0x70c>)
 8001a9c:	f014 fd94 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 fc6f 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	200d      	movs	r0, #13
 8001ab2:	f002 f9e9 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001ab6:	e185      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001ab8:	486c      	ldr	r0, [pc, #432]	; (8001c6c <HAL_UART_RxCpltCallback+0x710>)
 8001aba:	f014 fd85 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 fc60 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001acc:	2100      	movs	r1, #0
 8001ace:	200d      	movs	r0, #13
 8001ad0:	f002 f9da 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001ad4:	e176      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001ad6:	4866      	ldr	r0, [pc, #408]	; (8001c70 <HAL_UART_RxCpltCallback+0x714>)
 8001ad8:	f014 fd76 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001adc:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fc51 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001aea:	2101      	movs	r1, #1
 8001aec:	200f      	movs	r0, #15
 8001aee:	f002 f9cb 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001af2:	e167      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001af4:	485f      	ldr	r0, [pc, #380]	; (8001c74 <HAL_UART_RxCpltCallback+0x718>)
 8001af6:	f014 fd67 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001afa:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_UART_RxCpltCallback+0x6ec>)
 8001afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b00:	2200      	movs	r2, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fc42 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f002 f9bc 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001b10:	e158      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b12:	4859      	ldr	r0, [pc, #356]	; (8001c78 <HAL_UART_RxCpltCallback+0x71c>)
 8001b14:	f014 fd58 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fc34 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b24:	2101      	movs	r1, #1
 8001b26:	2010      	movs	r0, #16
 8001b28:	f002 f9ae 	bl	8003e88 <set_rail_monitor_enable>

		break;
 8001b2c:	e14a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b2e:	4853      	ldr	r0, [pc, #332]	; (8001c7c <HAL_UART_RxCpltCallback+0x720>)
 8001b30:	f014 fd4a 	bl	80165c8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fc26 	bl	800938c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	2010      	movs	r0, #16
 8001b44:	f002 f9a0 	bl	8003e88 <set_rail_monitor_enable>
		break;
 8001b48:	e13c      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b4a:	484d      	ldr	r0, [pc, #308]	; (8001c80 <HAL_UART_RxCpltCallback+0x724>)
 8001b4c:	f014 fd3c 	bl	80165c8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2320      	movs	r3, #32
 8001b56:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_UART_RxCpltCallback+0x728>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	484b      	ldr	r0, [pc, #300]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001b5c:	f004 f87a 	bl	8005c54 <HAL_DAC_Start_DMA>
		break;
 8001b60:	e130      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b62:	484a      	ldr	r0, [pc, #296]	; (8001c8c <HAL_UART_RxCpltCallback+0x730>)
 8001b64:	f014 fd30 	bl	80165c8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4847      	ldr	r0, [pc, #284]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001b6c:	f004 f932 	bl	8005dd4 <HAL_DAC_Stop_DMA>
		break;
 8001b70:	e128      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b72:	4847      	ldr	r0, [pc, #284]	; (8001c90 <HAL_UART_RxCpltCallback+0x734>)
 8001b74:	f014 fd28 	bl	80165c8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b78:	210c      	movs	r1, #12
 8001b7a:	4846      	ldr	r0, [pc, #280]	; (8001c94 <HAL_UART_RxCpltCallback+0x738>)
 8001b7c:	f00d f80a 	bl	800eb94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f011 faf2 	bl	8013170 <osEventFlagsSet>
		break;
 8001b8c:	e11a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001b8e:	4843      	ldr	r0, [pc, #268]	; (8001c9c <HAL_UART_RxCpltCallback+0x740>)
 8001b90:	f014 fd1a 	bl	80165c8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001b94:	210c      	movs	r1, #12
 8001b96:	483f      	ldr	r0, [pc, #252]	; (8001c94 <HAL_UART_RxCpltCallback+0x738>)
 8001b98:	f00d f956 	bl	800ee48 <HAL_TIM_OC_Stop_IT>
		break;
 8001b9c:	e112      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001b9e:	4840      	ldr	r0, [pc, #256]	; (8001ca0 <HAL_UART_RxCpltCallback+0x744>)
 8001ba0:	f014 fd12 	bl	80165c8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <HAL_UART_RxCpltCallback+0x748>)
 8001ba8:	f00c fff4 	bl	800eb94 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f011 fadc 	bl	8013170 <osEventFlagsSet>
		break;
 8001bb8:	e104      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001bba:	483b      	ldr	r0, [pc, #236]	; (8001ca8 <HAL_UART_RxCpltCallback+0x74c>)
 8001bbc:	f014 fd04 	bl	80165c8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <HAL_UART_RxCpltCallback+0x748>)
 8001bc4:	f00d f940 	bl	800ee48 <HAL_TIM_OC_Stop_IT>
		break;
 8001bc8:	e0fc      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001bca:	4838      	ldr	r0, [pc, #224]	; (8001cac <HAL_UART_RxCpltCallback+0x750>)
 8001bcc:	f014 fcfc 	bl	80165c8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_UART_RxCpltCallback+0x73c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f011 faca 	bl	8013170 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_UART_RxCpltCallback+0x754>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
		break;
 8001be2:	e0ef      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001be4:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <HAL_UART_RxCpltCallback+0x758>)
 8001be6:	f014 fcef 	bl	80165c8 <puts>
		HK_ENABLED = 0;
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_RxCpltCallback+0x754>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		break;
 8001bf0:	e0e8      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001bf2:	4831      	ldr	r0, [pc, #196]	; (8001cb8 <HAL_UART_RxCpltCallback+0x75c>)
 8001bf4:	f014 fce8 	bl	80165c8 <puts>
		if (step < 14) {
 8001bf8:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b0d      	cmp	r3, #13
 8001c00:	f200 80d9 	bhi.w	8001db6 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c10:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_UART_RxCpltCallback+0x760>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_UART_RxCpltCallback+0x728>)
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4818      	ldr	r0, [pc, #96]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001c26:	f004 f978 	bl	8005f1a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <HAL_UART_RxCpltCallback+0x72c>)
 8001c2e:	f003 ffb9 	bl	8005ba4 <HAL_DAC_Start>
		}
		break;
 8001c32:	e0c0      	b.n	8001db6 <HAL_UART_RxCpltCallback+0x85a>
 8001c34:	08016de4 	.word	0x08016de4
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	08016df0 	.word	0x08016df0
 8001c40:	080170ec 	.word	0x080170ec
 8001c44:	08016dfc 	.word	0x08016dfc
 8001c48:	58020800 	.word	0x58020800
 8001c4c:	08016e08 	.word	0x08016e08
 8001c50:	08016e18 	.word	0x08016e18
 8001c54:	08016e24 	.word	0x08016e24
 8001c58:	08016e30 	.word	0x08016e30
 8001c5c:	08016e3c 	.word	0x08016e3c
 8001c60:	08016e4c 	.word	0x08016e4c
 8001c64:	08016e58 	.word	0x08016e58
 8001c68:	08016e64 	.word	0x08016e64
 8001c6c:	08016e70 	.word	0x08016e70
 8001c70:	08016e7c 	.word	0x08016e7c
 8001c74:	08016e8c 	.word	0x08016e8c
 8001c78:	08016e9c 	.word	0x08016e9c
 8001c7c:	08016ea8 	.word	0x08016ea8
 8001c80:	08016eb8 	.word	0x08016eb8
 8001c84:	24000000 	.word	0x24000000
 8001c88:	240002d4 	.word	0x240002d4
 8001c8c:	08016ec8 	.word	0x08016ec8
 8001c90:	08016ed8 	.word	0x08016ed8
 8001c94:	24000634 	.word	0x24000634
 8001c98:	240003d8 	.word	0x240003d8
 8001c9c:	08016ee0 	.word	0x08016ee0
 8001ca0:	08016eec 	.word	0x08016eec
 8001ca4:	240005e8 	.word	0x240005e8
 8001ca8:	08016ef4 	.word	0x08016ef4
 8001cac:	08016efc 	.word	0x08016efc
 8001cb0:	24000424 	.word	0x24000424
 8001cb4:	08016f04 	.word	0x08016f04
 8001cb8:	08016f0c 	.word	0x08016f0c
 8001cbc:	24000425 	.word	0x24000425
	}
	case 0x0D: {
		printf("Step Down\n");
 8001cc0:	4842      	ldr	r0, [pc, #264]	; (8001dcc <HAL_UART_RxCpltCallback+0x870>)
 8001cc2:	f014 fc81 	bl	80165c8 <puts>
		if (step > 1) {
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d974      	bls.n	8001dba <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3b02      	subs	r3, #2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001cdc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_UART_RxCpltCallback+0x874>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_UART_RxCpltCallback+0x878>)
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <HAL_UART_RxCpltCallback+0x87c>)
 8001cf2:	f004 f912 	bl	8005f1a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4837      	ldr	r0, [pc, #220]	; (8001dd8 <HAL_UART_RxCpltCallback+0x87c>)
 8001cfa:	f003 ff53 	bl	8005ba4 <HAL_DAC_Start>
		}
		break;
 8001cfe:	e05c      	b.n	8001dba <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d00:	4836      	ldr	r0, [pc, #216]	; (8001ddc <HAL_UART_RxCpltCallback+0x880>)
 8001d02:	f014 fc61 	bl	80165c8 <puts>
		if (cadence <= 50000) {
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d855      	bhi.n	8001dbe <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d26:	e04a      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d28:	482e      	ldr	r0, [pc, #184]	; (8001de4 <HAL_UART_RxCpltCallback+0x888>)
 8001d2a:	f014 fc4d 	bl	80165c8 <puts>
		if (cadence >= 6250) {
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d943      	bls.n	8001dc2 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d42:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_UART_RxCpltCallback+0x884>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d4e:	e038      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d50:	4825      	ldr	r0, [pc, #148]	; (8001de8 <HAL_UART_RxCpltCallback+0x88c>)
 8001d52:	f014 fc39 	bl	80165c8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f011 fa07 	bl	8013170 <osEventFlagsSet>
		break;
 8001d62:	e02f      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d64:	4822      	ldr	r0, [pc, #136]	; (8001df0 <HAL_UART_RxCpltCallback+0x894>)
 8001d66:	f014 fc2f 	bl	80165c8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f011 f9fd 	bl	8013170 <osEventFlagsSet>
		break;
 8001d76:	e025      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d78:	481e      	ldr	r0, [pc, #120]	; (8001df4 <HAL_UART_RxCpltCallback+0x898>)
 8001d7a:	f014 fc25 	bl	80165c8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_UART_RxCpltCallback+0x890>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2108      	movs	r1, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f011 f9f3 	bl	8013170 <osEventFlagsSet>
		break;
 8001d8a:	e01b      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001d8c:	f000 f960 	bl	8002050 <sync>
		break;
 8001d90:	e018      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_UART_RxCpltCallback+0x89c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f011 f9e9 	bl	8013170 <osEventFlagsSet>
		break;
 8001d9e:	e011      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_RxCpltCallback+0x89c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2102      	movs	r1, #2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f011 f9e2 	bl	8013170 <osEventFlagsSet>
		break;
 8001dac:	e00a      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001dae:	4813      	ldr	r0, [pc, #76]	; (8001dfc <HAL_UART_RxCpltCallback+0x8a0>)
 8001db0:	f014 fc0a 	bl	80165c8 <puts>
		break;
 8001db4:	e006      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001db6:	bf00      	nop
 8001db8:	e004      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dba:	bf00      	nop
 8001dbc:	e002      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dbe:	bf00      	nop
 8001dc0:	e000      	b.n	8001dc4 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dc2:	bf00      	nop
	}
	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08016f14 	.word	0x08016f14
 8001dd0:	24000425 	.word	0x24000425
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	240002d4 	.word	0x240002d4
 8001ddc:	08016f20 	.word	0x08016f20
 8001de0:	24000080 	.word	0x24000080
 8001de4:	08016f2c 	.word	0x08016f2c
 8001de8:	08016f38 	.word	0x08016f38
 8001dec:	240003dc 	.word	0x240003dc
 8001df0:	08016f48 	.word	0x08016f48
 8001df4:	08016f54 	.word	0x08016f54
 8001df8:	240003e0 	.word	0x240003e0
 8001dfc:	08016f60 	.word	0x08016f60

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e04:	f002 f93a 	bl	800407c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e08:	f000 f826 	bl	8001e58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e0c:	f000 f8a4 	bl	8001f58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e10:	f7ff fa22 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e14:	f7fe ff68 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001e18:	f001 fae4 	bl	80033e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e1c:	f001 fd6c 	bl	80038f8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e20:	f7ff fa94 	bl	800134c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e24:	f000 fe36 	bl	8002a94 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e28:	f001 fa66 	bl	80032f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e2c:	f001 f9b6 	bl	800319c <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e30:	f7fe fcfa 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e34:	f7fe fbd6 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e38:	f7fe fea2 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e3c:	f000 fdd2 	bl	80029e4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e40:	f000 fbb6 	bl	80025b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e44:	f000 f8b8 	bl	8001fb8 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e48:	f011 f83c 	bl	8012ec4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e4c:	f7fe ff9e 	bl	8000d8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e50:	f011 f85c 	bl	8012f0c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e54:	e7fe      	b.n	8001e54 <main+0x54>
	...

08001e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09c      	sub	sp, #112	; 0x70
 8001e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e62:	224c      	movs	r2, #76	; 0x4c
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 fa58 	bl	801631c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2220      	movs	r2, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f014 fa52 	bl	801631c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f008 f8e9 	bl	800a050 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	4a32      	ldr	r2, [pc, #200]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <SystemClock_Config+0xf8>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <SystemClock_Config+0xfc>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea0:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <SystemClock_Config+0xfc>)
 8001ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <SystemClock_Config+0xfc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001eb4:	bf00      	nop
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <SystemClock_Config+0xfc>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec2:	d1f8      	bne.n	8001eb6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ece:	2309      	movs	r3, #9
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eda:	2302      	movs	r3, #2
 8001edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 f8de 	bl	800a0c4 <HAL_RCC_OscConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f0e:	f000 f957 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f12:	233f      	movs	r3, #63	; 0x3f
 8001f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f16:	2303      	movs	r3, #3
 8001f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2102      	movs	r1, #2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f008 fd1e 	bl	800a978 <HAL_RCC_ClockConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f42:	f000 f93d 	bl	80021c0 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3770      	adds	r7, #112	; 0x70
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	58000400 	.word	0x58000400
 8001f54:	58024800 	.word	0x58024800

08001f58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b0      	sub	sp, #192	; 0xc0
 8001f5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5e:	463b      	mov	r3, r7
 8001f60:	22c0      	movs	r2, #192	; 0xc0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f014 f9d9 	bl	801631c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f009 f8b8 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001faa:	f000 f909 	bl	80021c0 <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	37c0      	adds	r7, #192	; 0xc0
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f011 f898 	bl	80130f2 <osEventFlagsNew>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <system_setup+0x80>)
 8001fc6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <system_setup+0x80>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <system_setup+0x1a>
        while (1);
 8001fd0:	e7fe      	b.n	8001fd0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f011 f88d 	bl	80130f2 <osEventFlagsNew>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <system_setup+0x84>)
 8001fdc:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <system_setup+0x84>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <system_setup+0x30>
        while (1);
 8001fe6:	e7fe      	b.n	8001fe6 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f011 f882 	bl	80130f2 <osEventFlagsNew>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <system_setup+0x88>)
 8001ff2:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <system_setup+0x88>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <system_setup+0x46>
        while (1);
 8001ffc:	e7fe      	b.n	8001ffc <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001ffe:	f001 fd85 	bl	8003b0c <voltage_monitor_init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d100      	bne.n	800200a <system_setup+0x52>
		while (1);
 8002008:	e7fe      	b.n	8002008 <system_setup+0x50>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800200a:	2100      	movs	r1, #0
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <system_setup+0x8c>)
 800200e:	f00c fdc1 	bl	800eb94 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8002012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002016:	f44f 729c 	mov.w	r2, #312	; 0x138
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 800201c:	f000 fb5a 	bl	80026d4 <init_adc_dma>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d100      	bne.n	8002028 <system_setup+0x70>
		while (1);
 8002026:	e7fe      	b.n	8002026 <system_setup+0x6e>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	4907      	ldr	r1, [pc, #28]	; (8002048 <system_setup+0x90>)
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <system_setup+0x94>)
 800202e:	f00e fa91 	bl	8010554 <HAL_UART_Receive_IT>

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	240003d8 	.word	0x240003d8
 800203c:	240003dc 	.word	0x240003dc
 8002040:	240003e0 	.word	0x240003e0
 8002044:	24000680 	.word	0x24000680
 8002048:	240003e4 	.word	0x240003e4
 800204c:	240006cc 	.word	0x240006cc

08002050 <sync>:

void sync() {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	send_ACK();
 8002056:	f000 f821 	bl	800209c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <sync+0x44>)
 800205c:	f00e fac6 	bl	80105ec <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002060:	2364      	movs	r3, #100	; 0x64
 8002062:	2209      	movs	r2, #9
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <sync+0x48>)
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <sync+0x44>)
 8002068:	f00e f9ac 	bl	80103c4 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <sync+0x48>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d1f3      	bne.n	8002060 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <sync+0x48>)
 800207a:	f001 fb7b 	bl	8003774 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800207e:	2201      	movs	r2, #1
 8002080:	4905      	ldr	r1, [pc, #20]	; (8002098 <sync+0x48>)
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <sync+0x44>)
 8002084:	f00e fa66 	bl	8010554 <HAL_UART_Receive_IT>

	send_ACK();
 8002088:	f000 f808 	bl	800209c <send_ACK>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	240006cc 	.word	0x240006cc
 8002098:	240003e4 	.word	0x240003e4

0800209c <send_ACK>:

void send_ACK() {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <send_ACK+0x1c>)
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	2201      	movs	r2, #1
 80020aa:	4903      	ldr	r1, [pc, #12]	; (80020b8 <send_ACK+0x1c>)
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <send_ACK+0x20>)
 80020ae:	f00e f8fb 	bl	80102a8 <HAL_UART_Transmit>
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2400042c 	.word	0x2400042c
 80020bc:	240006cc 	.word	0x240006cc

080020c0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <get_current_step+0xc0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d04a      	beq.n	800216c <get_current_step+0xac>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	da48      	bge.n	8002170 <get_current_step+0xb0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03f      	beq.n	8002168 <get_current_step+0xa8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020ee:	4293      	cmp	r3, r2
 80020f0:	dc3e      	bgt.n	8002170 <get_current_step+0xb0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d033      	beq.n	8002164 <get_current_step+0xa4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002102:	da35      	bge.n	8002170 <get_current_step+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800210a:	4293      	cmp	r3, r2
 800210c:	d028      	beq.n	8002160 <get_current_step+0xa0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002114:	4293      	cmp	r3, r2
 8002116:	dc2b      	bgt.n	8002170 <get_current_step+0xb0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f240 7245 	movw	r2, #1861	; 0x745
 800211e:	4293      	cmp	r3, r2
 8002120:	d01c      	beq.n	800215c <get_current_step+0x9c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f240 7245 	movw	r2, #1861	; 0x745
 8002128:	4293      	cmp	r3, r2
 800212a:	dc21      	bgt.n	8002170 <get_current_step+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002132:	4293      	cmp	r3, r2
 8002134:	d010      	beq.n	8002158 <get_current_step+0x98>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800213c:	4293      	cmp	r3, r2
 800213e:	dc17      	bgt.n	8002170 <get_current_step+0xb0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <get_current_step+0x90>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800214c:	d002      	beq.n	8002154 <get_current_step+0x94>
 800214e:	e00f      	b.n	8002170 <get_current_step+0xb0>
	case 0:
		return 0;
 8002150:	2300      	movs	r3, #0
 8002152:	e00e      	b.n	8002172 <get_current_step+0xb2>
	case 620:
		return 1;
 8002154:	2301      	movs	r3, #1
 8002156:	e00c      	b.n	8002172 <get_current_step+0xb2>
	case 1241:
		return 2;
 8002158:	2302      	movs	r3, #2
 800215a:	e00a      	b.n	8002172 <get_current_step+0xb2>
	case 1861:
		return 3;
 800215c:	2303      	movs	r3, #3
 800215e:	e008      	b.n	8002172 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002160:	2304      	movs	r3, #4
 8002162:	e006      	b.n	8002172 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002164:	2305      	movs	r3, #5
 8002166:	e004      	b.n	8002172 <get_current_step+0xb2>
	case 3723:
		return 6;
 8002168:	2306      	movs	r3, #6
 800216a:	e002      	b.n	8002172 <get_current_step+0xb2>
	case 4095:
		return 7;
 800216c:	2307      	movs	r3, #7
 800216e:	e000      	b.n	8002172 <get_current_step+0xb2>
	default:
		return -1;
 8002170:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007400 	.word	0x40007400

08002184 <enter_stop>:

void enter_stop() {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	  send_ACK();
 8002188:	f7ff ff88 	bl	800209c <send_ACK>

	  vTaskSuspendAll();
 800218c:	f012 fb48 	bl	8014820 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002190:	2101      	movs	r1, #1
 8002192:	2001      	movs	r0, #1
 8002194:	f007 ff20 	bl	8009fd8 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002198:	f7ff f984 	bl	80014a4 <__NVIC_SystemReset>

0800219c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ae:	f001 ffa1 	bl	80040f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40001000 	.word	0x40001000

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021d2:	bf00      	nop
 80021d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d8:	481c      	ldr	r0, [pc, #112]	; (800224c <create_pmt_packet+0x80>)
 80021da:	f007 f8bf 	bl	800935c <HAL_GPIO_ReadPin>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f7      	bne.n	80021d4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fa2a 	bl	8003640 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 faaf 	bl	8002754 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021f6:	23bb      	movs	r3, #187	; 0xbb
 80021f8:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80021fa:	23bb      	movs	r3, #187	; 0xbb
 80021fc:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <create_pmt_packet+0x84>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b29b      	uxth	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <create_pmt_packet+0x84>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002212:	7a3b      	ldrb	r3, [r7, #8]
 8002214:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002216:	7a7b      	ldrb	r3, [r7, #9]
 8002218:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800222a:	f107 010c 	add.w	r1, r7, #12
 800222e:	2364      	movs	r3, #100	; 0x64
 8002230:	220a      	movs	r2, #10
 8002232:	4808      	ldr	r0, [pc, #32]	; (8002254 <create_pmt_packet+0x88>)
 8002234:	f00e f838 	bl	80102a8 <HAL_UART_Transmit>

	pmt_seq++;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <create_pmt_packet+0x84>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <create_pmt_packet+0x84>)
 8002242:	801a      	strh	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	58020000 	.word	0x58020000
 8002250:	2400042e 	.word	0x2400042e
 8002254:	240006cc 	.word	0x240006cc

08002258 <create_erpa_packet>:


void create_erpa_packet() {
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800225e:	bf00      	nop
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4828      	ldr	r0, [pc, #160]	; (8002308 <create_erpa_packet+0xb0>)
 8002266:	f007 f879 	bl	800935c <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f7      	bne.n	8002260 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002270:	23ff      	movs	r3, #255	; 0xff
 8002272:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f001 f9e2 	bl	8003640 <get_uptime>
	sweep_step = get_current_step();
 800227c:	f7ff ff20 	bl	80020c0 <get_current_step>
 8002280:	4603      	mov	r3, r0
 8002282:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa87 	bl	800279c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	4618      	mov	r0, r3
 8002294:	f000 faa6 	bl	80027e4 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002298:	23aa      	movs	r3, #170	; 0xaa
 800229a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 800229c:	23aa      	movs	r3, #170	; 0xaa
 800229e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <create_erpa_packet+0xb4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <create_erpa_packet+0xb4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <create_erpa_packet+0xb4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
 80022be:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022d0:	7b3b      	ldrb	r3, [r7, #12]
 80022d2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022d8:	793b      	ldrb	r3, [r7, #4]
 80022da:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022dc:	797b      	ldrb	r3, [r7, #5]
 80022de:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022e8:	f107 0110 	add.w	r1, r7, #16
 80022ec:	2364      	movs	r3, #100	; 0x64
 80022ee:	220e      	movs	r2, #14
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <create_erpa_packet+0xb8>)
 80022f2:	f00d ffd9 	bl	80102a8 <HAL_UART_Transmit>

	erpa_seq++;
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <create_erpa_packet+0xb4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <create_erpa_packet+0xb4>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58020400 	.word	0x58020400
 800230c:	24000430 	.word	0x24000430
 8002310:	240006cc 	.word	0x240006cc

08002314 <create_hk_packet>:


void create_hk_packet() {
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	; 0x50
 8002318:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4618      	mov	r0, r3
 800231e:	f001 f98f 	bl	8003640 <get_uptime>
	get_timestamp(timestamp);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f9d4 	bl	80036d4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 800232c:	f001 fdcc 	bl	8003ec8 <get_rail_monitor>
 8002330:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002332:	23cc      	movs	r3, #204	; 0xcc
 8002334:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002336:	23cc      	movs	r3, #204	; 0xcc
 8002338:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800233a:	4b9b      	ldr	r3, [pc, #620]	; (80025a8 <create_hk_packet+0x294>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002346:	4b98      	ldr	r3, [pc, #608]	; (80025a8 <create_hk_packet+0x294>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	889b      	ldrh	r3, [r3, #4]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	330a      	adds	r3, #10
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002372:	330a      	adds	r3, #10
 8002374:	889b      	ldrh	r3, [r3, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 800237a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237c:	3314      	adds	r3, #20
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b29b      	uxth	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238a:	3314      	adds	r3, #20
 800238c:	889b      	ldrh	r3, [r3, #4]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	331e      	adds	r3, #30
 8002396:	889b      	ldrh	r3, [r3, #4]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80023a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a2:	331e      	adds	r3, #30
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	3328      	adds	r3, #40	; 0x28
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	889b      	ldrh	r3, [r3, #4]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	3332      	adds	r3, #50	; 0x32
 80023da:	889b      	ldrh	r3, [r3, #4]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	333c      	adds	r3, #60	; 0x3c
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	333c      	adds	r3, #60	; 0x3c
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	3346      	adds	r3, #70	; 0x46
 8002402:	889b      	ldrh	r3, [r3, #4]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002410:	3346      	adds	r3, #70	; 0x46
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	3350      	adds	r3, #80	; 0x50
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	889b      	ldrh	r3, [r3, #4]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002438:	335a      	adds	r3, #90	; 0x5a
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	335a      	adds	r3, #90	; 0x5a
 800244a:	889b      	ldrh	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002454:	3364      	adds	r3, #100	; 0x64
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	3364      	adds	r3, #100	; 0x64
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	336e      	adds	r3, #110	; 0x6e
 8002472:	889b      	ldrh	r3, [r3, #4]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	336e      	adds	r3, #110	; 0x6e
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 800248a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248c:	3378      	adds	r3, #120	; 0x78
 800248e:	889b      	ldrh	r3, [r3, #4]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	3378      	adds	r3, #120	; 0x78
 800249e:	889b      	ldrh	r3, [r3, #4]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	3382      	adds	r3, #130	; 0x82
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	3382      	adds	r3, #130	; 0x82
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	338c      	adds	r3, #140	; 0x8c
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	338c      	adds	r3, #140	; 0x8c
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	3396      	adds	r3, #150	; 0x96
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	3396      	adds	r3, #150	; 0x96
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	33a0      	adds	r3, #160	; 0xa0
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	33a0      	adds	r3, #160	; 0xa0
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	33aa      	adds	r3, #170	; 0xaa
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b29b      	uxth	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	33aa      	adds	r3, #170	; 0xaa
 800252a:	889b      	ldrh	r3, [r3, #4]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002532:	7a3b      	ldrb	r3, [r7, #8]
 8002534:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002538:	7a7b      	ldrb	r3, [r7, #9]
 800253a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 800253e:	7abb      	ldrb	r3, [r7, #10]
 8002540:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800254a:	7b3b      	ldrb	r3, [r7, #12]
 800254c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8002556:	7bbb      	ldrb	r3, [r7, #14]
 8002558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002568:	7c7b      	ldrb	r3, [r7, #17]
 800256a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 800256e:	793b      	ldrb	r3, [r7, #4]
 8002570:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8002574:	797b      	ldrb	r3, [r7, #5]
 8002576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8002586:	f107 0114 	add.w	r1, r7, #20
 800258a:	2364      	movs	r3, #100	; 0x64
 800258c:	2236      	movs	r2, #54	; 0x36
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <create_hk_packet+0x298>)
 8002590:	f00d fe8a 	bl	80102a8 <HAL_UART_Transmit>

	hk_seq++;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <create_hk_packet+0x294>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <create_hk_packet+0x294>)
 800259e:	801a      	strh	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3750      	adds	r7, #80	; 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	24000434 	.word	0x24000434
 80025ac:	240006cc 	.word	0x240006cc

080025b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025c8:	4b26      	ldr	r3, [pc, #152]	; (8002664 <MX_RTC_Init+0xb4>)
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <MX_RTC_Init+0xb8>)
 80025cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <MX_RTC_Init+0xb4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <MX_RTC_Init+0xb4>)
 80025d6:	2263      	movs	r2, #99	; 0x63
 80025d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <MX_RTC_Init+0xb4>)
 80025dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80025e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <MX_RTC_Init+0xb4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <MX_RTC_Init+0xb4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_RTC_Init+0xb4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <MX_RTC_Init+0xb4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025fa:	481a      	ldr	r0, [pc, #104]	; (8002664 <MX_RTC_Init+0xb4>)
 80025fc:	f00b fa88 	bl	800db10 <HAL_RTC_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002606:	f7ff fddb 	bl	80021c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800260a:	2300      	movs	r3, #0
 800260c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800260e:	2300      	movs	r3, #0
 8002610:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002612:	2300      	movs	r3, #0
 8002614:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2201      	movs	r2, #1
 8002622:	4619      	mov	r1, r3
 8002624:	480f      	ldr	r0, [pc, #60]	; (8002664 <MX_RTC_Init+0xb4>)
 8002626:	f00b faf5 	bl	800dc14 <HAL_RTC_SetTime>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002630:	f7ff fdc6 	bl	80021c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002634:	2301      	movs	r3, #1
 8002636:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002638:	2301      	movs	r3, #1
 800263a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800263c:	2301      	movs	r3, #1
 800263e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002640:	2300      	movs	r3, #0
 8002642:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002644:	463b      	mov	r3, r7
 8002646:	2201      	movs	r2, #1
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <MX_RTC_Init+0xb4>)
 800264c:	f00b fbdc 	bl	800de08 <HAL_RTC_SetDate>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002656:	f7ff fdb3 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	24000438 	.word	0x24000438
 8002668:	58004000 	.word	0x58004000

0800266c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b2      	sub	sp, #200	; 0xc8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	22c0      	movs	r2, #192	; 0xc0
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f013 fe4d 	bl	801631c <memset>
  if(rtcHandle->Instance==RTC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_RTC_MspInit+0x5c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d118      	bne.n	80026be <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800268c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RTC_MspInit+0x60>)
 800269a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	4618      	mov	r0, r3
 80026a4:	f008 fd36 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80026ae:	f7ff fd87 	bl	80021c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RTC_MspInit+0x64>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_RTC_MspInit+0x64>)
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026be:	bf00      	nop
 80026c0:	37c8      	adds	r7, #200	; 0xc8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	58004000 	.word	0x58004000
 80026cc:	00019300 	.word	0x00019300
 80026d0:	58024400 	.word	0x58024400

080026d4 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80026de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e6:	4817      	ldr	r0, [pc, #92]	; (8002744 <init_adc_dma+0x70>)
 80026e8:	f003 f818 	bl	800571c <HAL_ADCEx_Calibration_Start>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80026f2:	f7ff fd65 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80026f6:	220b      	movs	r2, #11
 80026f8:	4913      	ldr	r1, [pc, #76]	; (8002748 <init_adc_dma+0x74>)
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <init_adc_dma+0x70>)
 80026fc:	f002 f8ec 	bl	80048d8 <HAL_ADC_Start_DMA>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002706:	f7ff fd5b 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800270a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800270e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002712:	480e      	ldr	r0, [pc, #56]	; (800274c <init_adc_dma+0x78>)
 8002714:	f003 f802 	bl	800571c <HAL_ADCEx_Calibration_Start>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800271e:	f7ff fd4f 	bl	80021c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002722:	2204      	movs	r2, #4
 8002724:	490a      	ldr	r1, [pc, #40]	; (8002750 <init_adc_dma+0x7c>)
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <init_adc_dma+0x78>)
 8002728:	f002 f8d6 	bl	80048d8 <HAL_ADC_Start_DMA>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002732:	f7ff fd45 	bl	80021c0 <Error_Handler>
	}
	status = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]

	return status;
 800273a:	79fb      	ldrb	r3, [r7, #7]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2400011c 	.word	0x2400011c
 8002748:	24000460 	.word	0x24000460
 800274c:	24000180 	.word	0x24000180
 8002750:	24000480 	.word	0x24000480

08002754 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 800275c:	f107 010c 	add.w	r1, r7, #12
 8002760:	2301      	movs	r3, #1
 8002762:	2201      	movs	r2, #1
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <sample_pmt_spi+0x44>)
 8002766:	f00b fe19 	bl	800e39c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 800276e:	7b7b      	ldrb	r3, [r7, #13]
 8002770:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <sample_pmt_spi+0x44>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <sample_pmt_spi+0x44>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7bba      	ldrb	r2, [r7, #14]
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24000488 	.word	0x24000488

0800279c <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 80027a4:	f107 010c 	add.w	r1, r7, #12
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	2201      	movs	r2, #1
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <sample_erpa_spi+0x44>)
 80027ae:	f00b fdf5 	bl	800e39c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80027b6:	7b7b      	ldrb	r3, [r7, #13]
 80027b8:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <sample_erpa_spi+0x44>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <sample_erpa_spi+0x44>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7bba      	ldrb	r2, [r7, #14]
 80027ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3301      	adds	r3, #1
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000510 	.word	0x24000510

080027e4 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <sample_erpa_adc+0x20>)
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	89fa      	ldrh	r2, [r7, #14]
 80027f6:	801a      	strh	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	24000460 	.word	0x24000460

08002808 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002810:	2390      	movs	r3, #144	; 0x90
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f8a2 	bl	800295c <poll_i2c_sensor>
 8002818:	4603      	mov	r3, r0
 800281a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800281c:	2394      	movs	r3, #148	; 0x94
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f89c 	bl	800295c <poll_i2c_sensor>
 8002824:	4603      	mov	r3, r0
 8002826:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002828:	2392      	movs	r3, #146	; 0x92
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f896 	bl	800295c <poll_i2c_sensor>
 8002830:	4603      	mov	r3, r0
 8002832:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002834:	2396      	movs	r3, #150	; 0x96
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f890 	bl	800295c <poll_i2c_sensor>
 800283c:	4603      	mov	r3, r0
 800283e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	89fa      	ldrh	r2, [r7, #14]
 8002844:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3302      	adds	r3, #2
 800284a:	89ba      	ldrh	r2, [r7, #12]
 800284c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	897a      	ldrh	r2, [r7, #10]
 8002854:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3306      	adds	r3, #6
 800285a:	893a      	ldrh	r2, [r7, #8]
 800285c:	801a      	strh	r2, [r3, #0]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <sample_hk_adc1+0xa0>)
 8002872:	8a9b      	ldrh	r3, [r3, #20]
 8002874:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <sample_hk_adc1+0xa0>)
 8002878:	8a1b      	ldrh	r3, [r3, #16]
 800287a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <sample_hk_adc1+0xa0>)
 800287e:	899b      	ldrh	r3, [r3, #12]
 8002880:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <sample_hk_adc1+0xa0>)
 8002884:	8a5b      	ldrh	r3, [r3, #18]
 8002886:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <sample_hk_adc1+0xa0>)
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <sample_hk_adc1+0xa0>)
 8002890:	88db      	ldrh	r3, [r3, #6]
 8002892:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <sample_hk_adc1+0xa0>)
 8002896:	89db      	ldrh	r3, [r3, #14]
 8002898:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <sample_hk_adc1+0xa0>)
 800289c:	891b      	ldrh	r3, [r3, #8]
 800289e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <sample_hk_adc1+0xa0>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <sample_hk_adc1+0xa0>)
 80028a8:	895b      	ldrh	r3, [r3, #10]
 80028aa:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8bfa      	ldrh	r2, [r7, #30]
 80028b0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3302      	adds	r3, #2
 80028b6:	8bba      	ldrh	r2, [r7, #28]
 80028b8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	8b7a      	ldrh	r2, [r7, #26]
 80028c0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3306      	adds	r3, #6
 80028c6:	8b3a      	ldrh	r2, [r7, #24]
 80028c8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3308      	adds	r3, #8
 80028ce:	8afa      	ldrh	r2, [r7, #22]
 80028d0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	330a      	adds	r3, #10
 80028d6:	8aba      	ldrh	r2, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	330c      	adds	r3, #12
 80028de:	8a7a      	ldrh	r2, [r7, #18]
 80028e0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	330e      	adds	r3, #14
 80028e6:	8a3a      	ldrh	r2, [r7, #16]
 80028e8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3310      	adds	r3, #16
 80028ee:	89fa      	ldrh	r2, [r7, #14]
 80028f0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3312      	adds	r3, #18
 80028f6:	89ba      	ldrh	r2, [r7, #12]
 80028f8:	801a      	strh	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	24000460 	.word	0x24000460

0800290c <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <sample_hk_adc3+0x4c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <sample_hk_adc3+0x4c>)
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <sample_hk_adc3+0x4c>)
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <sample_hk_adc3+0x4c>)
 8002928:	88db      	ldrh	r3, [r3, #6]
 800292a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	89fa      	ldrh	r2, [r7, #14]
 8002930:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3302      	adds	r3, #2
 8002936:	89ba      	ldrh	r2, [r7, #12]
 8002938:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	897a      	ldrh	r2, [r7, #10]
 8002940:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3306      	adds	r3, #6
 8002946:	893a      	ldrh	r2, [r7, #8]
 8002948:	801a      	strh	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	24000480 	.word	0x24000480

0800295c <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002966:	2300      	movs	r3, #0
 8002968:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	b299      	uxth	r1, r3
 800296e:	f107 0208 	add.w	r2, r7, #8
 8002972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2301      	movs	r3, #1
 800297a:	4817      	ldr	r0, [pc, #92]	; (80029d8 <poll_i2c_sensor+0x7c>)
 800297c:	f006 fdbc 	bl	80094f8 <HAL_I2C_Master_Transmit>
 8002980:	4603      	mov	r3, r0
 8002982:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002984:	7b7b      	ldrb	r3, [r7, #13]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 800298a:	4814      	ldr	r0, [pc, #80]	; (80029dc <poll_i2c_sensor+0x80>)
 800298c:	f013 fe1c 	bl	80165c8 <puts>
 8002990:	e01c      	b.n	80029cc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	b299      	uxth	r1, r3
 8002996:	f107 0208 	add.w	r2, r7, #8
 800299a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2302      	movs	r3, #2
 80029a2:	480d      	ldr	r0, [pc, #52]	; (80029d8 <poll_i2c_sensor+0x7c>)
 80029a4:	f006 fec0 	bl	8009728 <HAL_I2C_Master_Receive>
 80029a8:	4603      	mov	r3, r0
 80029aa:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80029ac:	7b7b      	ldrb	r3, [r7, #13]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <poll_i2c_sensor+0x84>)
 80029b4:	f013 fe08 	bl	80165c8 <puts>
 80029b8:	e008      	b.n	80029cc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80029c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c4:	7a7a      	ldrb	r2, [r7, #9]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	10db      	asrs	r3, r3, #3
 80029ca:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80029cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	24000384 	.word	0x24000384
 80029dc:	08016f70 	.word	0x08016f70
 80029e0:	08016f80 	.word	0x08016f80

080029e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029ea:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <MX_SPI1_Init+0xac>)
 80029ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_SPI1_Init+0xa8>)
 80029f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a00:	220f      	movs	r2, #15
 8002a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a1a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_SPI1_Init+0xa8>)
 8002a78:	f00b fb6c 	bl	800e154 <HAL_SPI_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002a82:	f7ff fb9d 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	24000488 	.word	0x24000488
 8002a90:	40013000 	.word	0x40013000

08002a94 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <MX_SPI2_Init+0xac>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002aac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aca:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_SPI2_Init+0xa8>)
 8002b28:	f00b fb14 	bl	800e154 <HAL_SPI_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b32:	f7ff fb45 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24000510 	.word	0x24000510
 8002b40:	40003800 	.word	0x40003800

08002b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0bc      	sub	sp, #240	; 0xf0
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	22c0      	movs	r2, #192	; 0xc0
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f013 fbd9 	bl	801631c <memset>
  if(spiHandle->Instance==SPI1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_SPI_MspInit+0x15c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d145      	bne.n	8002c00 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 0318 	add.w	r3, r7, #24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f008 fac3 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002b94:	f7ff fb14 	bl	80021c0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b9e:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bbc:	4a39      	ldr	r2, [pc, #228]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002bd4:	2318      	movs	r3, #24
 8002bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bec:	2305      	movs	r3, #5
 8002bee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	482b      	ldr	r0, [pc, #172]	; (8002ca8 <HAL_SPI_MspInit+0x164>)
 8002bfa:	f006 f9ff 	bl	8008ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bfe:	e04a      	b.n	8002c96 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <HAL_SPI_MspInit+0x168>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d145      	bne.n	8002c96 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1a:	f107 0318 	add.w	r3, r7, #24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f008 fa78 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c2a:	f7ff fac9 	bl	80021c0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_SPI_MspInit+0x160>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c6a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_SPI_MspInit+0x164>)
 8002c92:	f006 f9b3 	bl	8008ffc <HAL_GPIO_Init>
}
 8002c96:	bf00      	nop
 8002c98:	37f0      	adds	r7, #240	; 0xf0
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40013000 	.word	0x40013000
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	40003800 	.word	0x40003800

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_MspInit+0x38>)
 8002cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f06f 0001 	mvn.w	r0, #1
 8002cdc:	f002 ff18 	bl	8005b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	58024400 	.word	0x58024400

08002cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b090      	sub	sp, #64	; 0x40
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d827      	bhi.n	8002d4a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	2036      	movs	r0, #54	; 0x36
 8002d00:	f002 ff06 	bl	8005b10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d04:	2036      	movs	r0, #54	; 0x36
 8002d06:	f002 ff1d 	bl	8005b44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_InitTick+0xc4>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d16:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_InitTick+0xc8>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d2e:	f107 0210 	add.w	r2, r7, #16
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f008 f9a9 	bl	800b090 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_InitTick+0x6a>
 8002d48:	e001      	b.n	8002d4e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e02b      	b.n	8002da6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d4e:	f008 f973 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 8002d52:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d54:	e004      	b.n	8002d60 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d56:	f008 f96f 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_InitTick+0xcc>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_InitTick+0xd4>)
 8002d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d90:	f00b fe31 	bl	800e9f6 <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d9a:	4808      	ldr	r0, [pc, #32]	; (8002dbc <HAL_InitTick+0xd0>)
 8002d9c:	f00b fe82 	bl	800eaa4 <HAL_TIM_Base_Start_IT>
 8002da0:	4603      	mov	r3, r0
 8002da2:	e000      	b.n	8002da6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3740      	adds	r7, #64	; 0x40
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2400008c 	.word	0x2400008c
 8002db4:	58024400 	.word	0x58024400
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	24000598 	.word	0x24000598
 8002dc0:	40001000 	.word	0x40001000

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002dc8:	e7fe      	b.n	8002dc8 <NMI_Handler+0x4>

08002dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <DMA1_Stream0_IRQHandler+0x10>)
 8002df6:	f004 fde3 	bl	80079c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	240001e4 	.word	0x240001e4

08002e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA1_Stream1_IRQHandler+0x10>)
 8002e0a:	f004 fdd9 	bl	80079c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2400025c 	.word	0x2400025c

08002e18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Stream2_IRQHandler+0x10>)
 8002e1e:	f004 fdcf 	bl	80079c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	24000760 	.word	0x24000760

08002e2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <DMA1_Stream5_IRQHandler+0x10>)
 8002e32:	f004 fdc5 	bl	80079c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	240002e8 	.word	0x240002e8

08002e40 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM1_BRK_IRQHandler+0x10>)
 8002e46:	f00c f944 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	240005e8 	.word	0x240005e8

08002e54 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <TIM1_UP_IRQHandler+0x10>)
 8002e5a:	f00c f93a 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	240005e8 	.word	0x240005e8

08002e68 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e6e:	f00c f930 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	240005e8 	.word	0x240005e8

08002e7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM1_CC_IRQHandler+0x10>)
 8002e82:	f00c f926 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	240005e8 	.word	0x240005e8

08002e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <TIM2_IRQHandler+0x10>)
 8002e96:	f00c f91c 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	24000634 	.word	0x24000634

08002ea4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <TIM3_IRQHandler+0x10>)
 8002eaa:	f00c f912 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24000680 	.word	0x24000680

08002eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <USART1_IRQHandler+0x10>)
 8002ebe:	f00d fc4b 	bl	8010758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	240006cc 	.word	0x240006cc

08002ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <TIM6_DAC_IRQHandler+0x20>)
 8002ed2:	791b      	ldrb	r3, [r3, #4]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002eda:	4804      	ldr	r0, [pc, #16]	; (8002eec <TIM6_DAC_IRQHandler+0x20>)
 8002edc:	f002 ffc7 	bl	8005e6e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <TIM6_DAC_IRQHandler+0x24>)
 8002ee2:	f00c f8f6 	bl	800f0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	240002d4 	.word	0x240002d4
 8002ef0:	24000598 	.word	0x24000598

08002ef4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <ITM_SendChar+0x48>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <ITM_SendChar+0x48>)
 8002f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <ITM_SendChar+0x4c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <ITM_SendChar+0x4c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002f16:	bf00      	nop
 8002f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f8      	beq.n	8002f18 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002f26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000edfc 	.word	0xe000edfc
 8002f40:	e0000e00 	.word	0xe0000e00

08002f44 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e00a      	b.n	8002f6c <_read+0x28>
		*ptr++ = __io_getchar();
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf0      	blt.n	8002f56 <_read+0x12>
	}

	return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffab 	bl	8002ef4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbf1      	blt.n	8002f90 <_write+0x12>
	}
	return len;
 8002fac:	687b      	ldr	r3, [r7, #4]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_close>:

int _close(int file) {
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_fstat>:

int _fstat(int file, struct stat *st) {
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fde:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file) {
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
		errno = ENOMEM;
 8003050:	f013 f91c 	bl	801628c <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	24080000 	.word	0x24080000
 8003080:	00000400 	.word	0x00000400
 8003084:	240005e4 	.word	0x240005e4
 8003088:	240051f0 	.word	0x240051f0

0800308c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <SystemInit+0xe4>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a36      	ldr	r2, [pc, #216]	; (8003170 <SystemInit+0xe4>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <SystemInit+0xe8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d807      	bhi.n	80030bc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <SystemInit+0xe8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 030f 	bic.w	r3, r3, #15
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <SystemInit+0xe8>)
 80030b6:	f043 0307 	orr.w	r3, r3, #7
 80030ba:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <SystemInit+0xec>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <SystemInit+0xec>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <SystemInit+0xec>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <SystemInit+0xec>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4929      	ldr	r1, [pc, #164]	; (8003178 <SystemInit+0xec>)
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <SystemInit+0xf0>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <SystemInit+0xe8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <SystemInit+0xe8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 030f 	bic.w	r3, r3, #15
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <SystemInit+0xe8>)
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <SystemInit+0xec>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <SystemInit+0xec>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <SystemInit+0xec>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <SystemInit+0xec>)
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <SystemInit+0xf4>)
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <SystemInit+0xec>)
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <SystemInit+0xf8>)
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <SystemInit+0xec>)
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <SystemInit+0xfc>)
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <SystemInit+0xec>)
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <SystemInit+0xec>)
 8003122:	4a19      	ldr	r2, [pc, #100]	; (8003188 <SystemInit+0xfc>)
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <SystemInit+0xec>)
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <SystemInit+0xec>)
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <SystemInit+0xfc>)
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <SystemInit+0xec>)
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <SystemInit+0xec>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <SystemInit+0xec>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <SystemInit+0xec>)
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <SystemInit+0x100>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <SystemInit+0x104>)
 8003150:	4013      	ands	r3, r2
 8003152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003156:	d202      	bcs.n	800315e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <SystemInit+0x108>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <SystemInit+0x10c>)
 8003160:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003164:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	52002000 	.word	0x52002000
 8003178:	58024400 	.word	0x58024400
 800317c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003180:	02020200 	.word	0x02020200
 8003184:	01ff0000 	.word	0x01ff0000
 8003188:	01010280 	.word	0x01010280
 800318c:	5c001000 	.word	0x5c001000
 8003190:	ffff0000 	.word	0xffff0000
 8003194:	51008108 	.word	0x51008108
 8003198:	52004000 	.word	0x52004000

0800319c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09a      	sub	sp, #104	; 0x68
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	615a      	str	r2, [r3, #20]
 80031ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	222c      	movs	r2, #44	; 0x2c
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f013 f8a0 	bl	801631c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031de:	4a45      	ldr	r2, [pc, #276]	; (80032f4 <MX_TIM1_Init+0x158>)
 80031e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031e4:	2263      	movs	r2, #99	; 0x63
 80031e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031f0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80031f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <MX_TIM1_Init+0x154>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003208:	4839      	ldr	r0, [pc, #228]	; (80032f0 <MX_TIM1_Init+0x154>)
 800320a:	f00b fbf4 	bl	800e9f6 <HAL_TIM_Base_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003214:	f7fe ffd4 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800321e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003222:	4619      	mov	r1, r3
 8003224:	4832      	ldr	r0, [pc, #200]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003226:	f00c f96f 	bl	800f508 <HAL_TIM_ConfigClockSource>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003230:	f7fe ffc6 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003234:	482e      	ldr	r0, [pc, #184]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003236:	f00b feeb 	bl	800f010 <HAL_TIM_PWM_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003240:	f7fe ffbe 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003250:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003254:	4619      	mov	r1, r3
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <MX_TIM1_Init+0x154>)
 8003258:	f00c feac 	bl	800ffb4 <HAL_TIMEx_MasterConfigSynchronization>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003262:	f7fe ffad 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003266:	2360      	movs	r3, #96	; 0x60
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800326a:	f240 13df 	movw	r3, #479	; 0x1df
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	4619      	mov	r1, r3
 800328c:	4818      	ldr	r0, [pc, #96]	; (80032f0 <MX_TIM1_Init+0x154>)
 800328e:	f00c f827 	bl	800f2e0 <HAL_TIM_PWM_ConfigChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003298:	f7fe ff92 	bl	80021c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4807      	ldr	r0, [pc, #28]	; (80032f0 <MX_TIM1_Init+0x154>)
 80032d2:	f00c fefd 	bl	80100d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80032dc:	f7fe ff70 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032e0:	4803      	ldr	r0, [pc, #12]	; (80032f0 <MX_TIM1_Init+0x154>)
 80032e2:	f000 f949 	bl	8003578 <HAL_TIM_MspPostInit>

}
 80032e6:	bf00      	nop
 80032e8:	3768      	adds	r7, #104	; 0x68
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	240005e8 	.word	0x240005e8
 80032f4:	40010000 	.word	0x40010000

080032f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003318:	463b      	mov	r3, r7
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003334:	2263      	movs	r2, #99	; 0x63
 8003336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003340:	f640 4234 	movw	r2, #3124	; 0xc34
 8003344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003352:	4823      	ldr	r0, [pc, #140]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003354:	f00b fb4f 	bl	800e9f6 <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800335e:	f7fe ff2f 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	4619      	mov	r1, r3
 800336e:	481c      	ldr	r0, [pc, #112]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003370:	f00c f8ca 	bl	800f508 <HAL_TIM_ConfigClockSource>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800337a:	f7fe ff21 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <MX_TIM2_Init+0xe8>)
 8003380:	f00b fe46 	bl	800f010 <HAL_TIM_PWM_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800338a:	f7fe ff19 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800338e:	2320      	movs	r3, #32
 8003390:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	4619      	mov	r1, r3
 800339c:	4810      	ldr	r0, [pc, #64]	; (80033e0 <MX_TIM2_Init+0xe8>)
 800339e:	f00c fe09 	bl	800ffb4 <HAL_TIMEx_MasterConfigSynchronization>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033a8:	f7fe ff0a 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ac:	2360      	movs	r3, #96	; 0x60
 80033ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033bc:	463b      	mov	r3, r7
 80033be:	220c      	movs	r2, #12
 80033c0:	4619      	mov	r1, r3
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <MX_TIM2_Init+0xe8>)
 80033c4:	f00b ff8c 	bl	800f2e0 <HAL_TIM_PWM_ConfigChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80033ce:	f7fe fef7 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033d2:	4803      	ldr	r0, [pc, #12]	; (80033e0 <MX_TIM2_Init+0xe8>)
 80033d4:	f000 f8d0 	bl	8003578 <HAL_TIM_MspPostInit>

}
 80033d8:	bf00      	nop
 80033da:	3738      	adds	r7, #56	; 0x38
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	24000634 	.word	0x24000634

080033e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_TIM3_Init+0x94>)
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <MX_TIM3_Init+0x98>)
 8003406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <MX_TIM3_Init+0x94>)
 800340a:	22c7      	movs	r2, #199	; 0xc7
 800340c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM3_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <MX_TIM3_Init+0x94>)
 8003416:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800341a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_TIM3_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM3_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003428:	4813      	ldr	r0, [pc, #76]	; (8003478 <MX_TIM3_Init+0x94>)
 800342a:	f00b fae4 	bl	800e9f6 <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003434:	f7fe fec4 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_TIM3_Init+0x94>)
 8003446:	f00c f85f 	bl	800f508 <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003450:	f7fe feb6 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM3_Init+0x94>)
 8003462:	f00c fda7 	bl	800ffb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800346c:	f7fe fea8 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	24000680 	.word	0x24000680
 800347c:	40000400 	.word	0x40000400

08003480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_TIM_Base_MspInit+0xec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12f      	bne.n	80034f2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 80034a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	2105      	movs	r1, #5
 80034b4:	2018      	movs	r0, #24
 80034b6:	f002 fb2b 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80034ba:	2018      	movs	r0, #24
 80034bc:	f002 fb42 	bl	8005b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2105      	movs	r1, #5
 80034c4:	2019      	movs	r0, #25
 80034c6:	f002 fb23 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034ca:	2019      	movs	r0, #25
 80034cc:	f002 fb3a 	bl	8005b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2105      	movs	r1, #5
 80034d4:	201a      	movs	r0, #26
 80034d6:	f002 fb1b 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80034da:	201a      	movs	r0, #26
 80034dc:	f002 fb32 	bl	8005b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2105      	movs	r1, #5
 80034e4:	201b      	movs	r0, #27
 80034e6:	f002 fb13 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034ea:	201b      	movs	r0, #27
 80034ec:	f002 fb2a 	bl	8005b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034f0:	e038      	b.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d117      	bne.n	800352c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 80034fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800350e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800351a:	2200      	movs	r2, #0
 800351c:	2105      	movs	r1, #5
 800351e:	201c      	movs	r0, #28
 8003520:	f002 faf6 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003524:	201c      	movs	r0, #28
 8003526:	f002 fb0d 	bl	8005b44 <HAL_NVIC_EnableIRQ>
}
 800352a:	e01b      	b.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_TIM_Base_MspInit+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d116      	bne.n	8003564 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800353c:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_TIM_Base_MspInit+0xf0>)
 8003548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2105      	movs	r1, #5
 8003558:	201d      	movs	r0, #29
 800355a:	f002 fad9 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800355e:	201d      	movs	r0, #29
 8003560:	f002 faf0 	bl	8005b44 <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010000 	.word	0x40010000
 8003570:	58024400 	.word	0x58024400
 8003574:	40000400 	.word	0x40000400

08003578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_TIM_MspPostInit+0xb8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d120      	bne.n	80035dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4818      	ldr	r0, [pc, #96]	; (8003638 <HAL_TIM_MspPostInit+0xc0>)
 80035d6:	f005 fd11 	bl	8008ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035da:	e024      	b.n	8003626 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d11f      	bne.n	8003626 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_TIM_MspPostInit+0xbc>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	4806      	ldr	r0, [pc, #24]	; (800363c <HAL_TIM_MspPostInit+0xc4>)
 8003622:	f005 fceb 	bl	8008ffc <HAL_GPIO_Init>
}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	58024400 	.word	0x58024400
 8003638:	58020000 	.word	0x58020000
 800363c:	58020400 	.word	0x58020400

08003640 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <get_uptime+0x88>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <get_uptime+0x8c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <get_uptime+0x88>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	429a      	cmp	r2, r3
 8003660:	d005      	beq.n	800366e <get_uptime+0x2e>
		ms = uptime_millis;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <get_uptime+0x88>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <get_uptime+0x8c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003674:	fb03 f202 	mul.w	r2, r3, r2
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <get_uptime+0x8c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	4914      	ldr	r1, [pc, #80]	; (80036d0 <get_uptime+0x90>)
 8003680:	fba1 1303 	umull	r1, r3, r1, r3
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	fbb1 f3f3 	udiv	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	0e1b      	lsrs	r3, r3, #24
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0c1a      	lsrs	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	0a1a      	lsrs	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3302      	adds	r3, #2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3303      	adds	r3, #3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	24000428 	.word	0x24000428
 80036cc:	e000e010 	.word	0xe000e010
 80036d0:	10624dd3 	.word	0x10624dd3

080036d4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	2200      	movs	r2, #0
 80036e2:	4619      	mov	r1, r3
 80036e4:	4821      	ldr	r0, [pc, #132]	; (800376c <get_timestamp+0x98>)
 80036e6:	f00a fb33 	bl	800dd50 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	2200      	movs	r2, #0
 80036f0:	4619      	mov	r1, r3
 80036f2:	481e      	ldr	r0, [pc, #120]	; (800376c <get_timestamp+0x98>)
 80036f4:	f00a fc10 	bl	800df18 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2264      	movs	r2, #100	; 0x64
 80036fc:	fb03 f202 	mul.w	r2, r3, r2
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <get_timestamp+0x9c>)
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	7b7a      	ldrb	r2, [r7, #13]
 8003712:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3302      	adds	r3, #2
 8003718:	7bba      	ldrb	r2, [r7, #14]
 800371a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3303      	adds	r3, #3
 8003720:	7c3a      	ldrb	r2, [r7, #16]
 8003722:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	7c7a      	ldrb	r2, [r7, #17]
 800372a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3305      	adds	r3, #5
 8003730:	7cba      	ldrb	r2, [r7, #18]
 8003732:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	0e1a      	lsrs	r2, r3, #24
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3306      	adds	r3, #6
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	0c1a      	lsrs	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3307      	adds	r3, #7
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	0a1a      	lsrs	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3309      	adds	r3, #9
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3728      	adds	r7, #40	; 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	24000438 	.word	0x24000438
 8003770:	000f4240 	.word	0x000f4240

08003774 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	789b      	ldrb	r3, [r3, #2]
 8003788:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	78db      	ldrb	r3, [r3, #3]
 8003790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	791b      	ldrb	r3, [r3, #4]
 8003798:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	795b      	ldrb	r3, [r3, #5]
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	799b      	ldrb	r3, [r3, #6]
 80037a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3307      	adds	r3, #7
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	b21a      	sxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3308      	adds	r3, #8
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b21b      	sxth	r3, r3
 80037be:	4313      	orrs	r3, r2
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 80037c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80037cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80037d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80037dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037e0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80037e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037e6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80037e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80037ec:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80037ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037f0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	2200      	movs	r2, #0
 80037f8:	4619      	mov	r1, r3
 80037fa:	480b      	ldr	r0, [pc, #44]	; (8003828 <calibrateRTC+0xb4>)
 80037fc:	f00a fb04 	bl	800de08 <HAL_RTC_SetDate>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <calibrateRTC+0x9e>
		Error_Handler();
 800380e:	f7fe fcd7 	bl	80021c0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	2200      	movs	r2, #0
 8003818:	4619      	mov	r1, r3
 800381a:	4803      	ldr	r0, [pc, #12]	; (8003828 <calibrateRTC+0xb4>)
 800381c:	f000 f806 	bl	800382c <RTC_SetTime>
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	24000438 	.word	0x24000438

0800382c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <RTC_SetTime+0x1a>
 8003842:	2302      	movs	r3, #2
 8003844:	e051      	b.n	80038ea <RTC_SetTime+0xbe>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	22ca      	movs	r2, #202	; 0xca
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2253      	movs	r2, #83	; 0x53
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f00a fbc8 	bl	800dffc <RTC_EnterInitMode>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d129      	bne.n	80038ca <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f00a fc2d 	bl	800e0e0 <RTC_ByteToBcd2>
 8003886:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003888:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	4618      	mov	r0, r3
 8003890:	f00a fc26 	bl	800e0e0 <RTC_ByteToBcd2>
 8003894:	4603      	mov	r3, r0
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	789b      	ldrb	r3, [r3, #2]
 800389e:	4618      	mov	r0, r3
 80038a0:	f00a fc1e 	bl	800e0e0 <RTC_ByteToBcd2>
 80038a4:	4603      	mov	r3, r0
 80038a6:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	6939      	ldr	r1, [r7, #16]
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <RTC_SetTime+0xc8>)
 80038bc:	400b      	ands	r3, r1
 80038be:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f00a fbcf 	bl	800e064 <RTC_ExitInitMode>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]

}
 80038ea:	4618      	mov	r0, r3
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd90      	pop	{r4, r7, pc}
 80038f2:	bf00      	nop
 80038f4:	007f7f7f 	.word	0x007f7f7f

080038f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038fc:	4b30      	ldr	r3, [pc, #192]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80038fe:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <MX_USART1_UART_Init+0xcc>)
 8003900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003904:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800391e:	220c      	movs	r2, #12
 8003920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003940:	481f      	ldr	r0, [pc, #124]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003942:	f00c fc61 	bl	8010208 <HAL_UART_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800394c:	f7fe fc38 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003950:	2100      	movs	r1, #0
 8003952:	481b      	ldr	r0, [pc, #108]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003954:	f00f f9a7 	bl	8012ca6 <HAL_UARTEx_SetTxFifoThreshold>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800395e:	f7fe fc2f 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003962:	2100      	movs	r1, #0
 8003964:	4816      	ldr	r0, [pc, #88]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003966:	f00f f9dc 	bl	8012d22 <HAL_UARTEx_SetRxFifoThreshold>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003970:	f7fe fc26 	bl	80021c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003974:	4812      	ldr	r0, [pc, #72]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003976:	f00f f95d 	bl	8012c34 <HAL_UARTEx_DisableFifoMode>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003980:	f7fe fc1e 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003984:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003988:	480d      	ldr	r0, [pc, #52]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800398a:	f00f f9ca 	bl	8012d22 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800398e:	480c      	ldr	r0, [pc, #48]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003990:	f00f f915 	bl	8012bbe <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003994:	480a      	ldr	r0, [pc, #40]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 8003996:	f00f f8df 	bl	8012b58 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039a8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <MX_USART1_UART_Init+0xc8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039b8:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	240006cc 	.word	0x240006cc
 80039c4:	40011000 	.word	0x40011000

080039c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0ba      	sub	sp, #232	; 0xe8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	22c0      	movs	r2, #192	; 0xc0
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f012 fc97 	bl	801631c <memset>
  if(uartHandle->Instance==USART1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a41      	ldr	r2, [pc, #260]	; (8003af8 <HAL_UART_MspInit+0x130>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d17b      	bne.n	8003af0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039f8:	f04f 0201 	mov.w	r2, #1
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a04:	2318      	movs	r3, #24
 8003a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0a:	f107 0310 	add.w	r3, r7, #16
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f007 fb80 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a1a:	f7fe fbd1 	bl	80021c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a2e:	4b33      	ldr	r3, [pc, #204]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_UART_MspInit+0x134>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a74:	2307      	movs	r3, #7
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	481f      	ldr	r0, [pc, #124]	; (8003b00 <HAL_UART_MspInit+0x138>)
 8003a82:	f005 fabb 	bl	8008ffc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a86:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_UART_MspInit+0x140>)
 8003a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a8e:	222a      	movs	r2, #42	; 0x2a
 8003a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a94:	2240      	movs	r2, #64	; 0x40
 8003a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ac4:	480f      	ldr	r0, [pc, #60]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ac6:	f002 fc51 	bl	800636c <HAL_DMA_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003ad0:	f7fe fb76 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003ad8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_UART_MspInit+0x13c>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2105      	movs	r1, #5
 8003ae4:	2025      	movs	r0, #37	; 0x25
 8003ae6:	f002 f813 	bl	8005b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aea:	2025      	movs	r0, #37	; 0x25
 8003aec:	f002 f82a 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003af0:	bf00      	nop
 8003af2:	37e8      	adds	r7, #232	; 0xe8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40011000 	.word	0x40011000
 8003afc:	58024400 	.word	0x58024400
 8003b00:	58020000 	.word	0x58020000
 8003b04:	24000760 	.word	0x24000760
 8003b08:	40020040 	.word	0x40020040

08003b0c <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003b16:	4bc2      	ldr	r3, [pc, #776]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003b1c:	4bc0      	ldr	r3, [pc, #768]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003b22:	4bbf      	ldr	r3, [pc, #764]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003b28:	4bbd      	ldr	r3, [pc, #756]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b2e:	4bbc      	ldr	r3, [pc, #752]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b30:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b34:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003b36:	4bba      	ldr	r3, [pc, #744]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003b3c:	4bb8      	ldr	r3, [pc, #736]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003b42:	4bb7      	ldr	r3, [pc, #732]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003b48:	4bb5      	ldr	r3, [pc, #724]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003b4e:	4bb4      	ldr	r3, [pc, #720]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b54:	4bb2      	ldr	r3, [pc, #712]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b5a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003b5c:	4bb0      	ldr	r3, [pc, #704]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003b62:	4baf      	ldr	r3, [pc, #700]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b64:	2202      	movs	r2, #2
 8003b66:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003b68:	4bad      	ldr	r3, [pc, #692]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003b6e:	4bac      	ldr	r3, [pc, #688]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003b74:	4baa      	ldr	r3, [pc, #680]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b7a:	4ba9      	ldr	r3, [pc, #676]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b80:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003b82:	4ba7      	ldr	r3, [pc, #668]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003b88:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003b8e:	4ba4      	ldr	r3, [pc, #656]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003b94:	4ba2      	ldr	r3, [pc, #648]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003b9c:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <voltage_monitor_init+0x314>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ba2:	4b9f      	ldr	r3, [pc, #636]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ba4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba8:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003baa:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003bb0:	4b9b      	ldr	r3, [pc, #620]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003bc0:	4b97      	ldr	r3, [pc, #604]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003bc8:	4b95      	ldr	r3, [pc, #596]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bce:	4b94      	ldr	r3, [pc, #592]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003bd6:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003bdc:	4b90      	ldr	r3, [pc, #576]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bde:	2205      	movs	r2, #5
 8003be0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003be4:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <voltage_monitor_init+0x314>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003bec:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003bf4:	4b8a      	ldr	r3, [pc, #552]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <voltage_monitor_init+0x314>)
 8003bfc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c00:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003c02:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003c08:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c0a:	2206      	movs	r2, #6
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003c10:	4b83      	ldr	r3, [pc, #524]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003c20:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c28:	4b7d      	ldr	r3, [pc, #500]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c2e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003c3a:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003c4a:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c5a:	4b71      	ldr	r3, [pc, #452]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003c64:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c6e:	2208      	movs	r2, #8
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c8e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003c92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003c96:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <voltage_monitor_init+0x314>)
 8003c98:	f640 3283 	movw	r2, #2947	; 0xb83
 8003c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003ca0:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ca2:	2209      	movs	r2, #9
 8003ca4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003ca8:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <voltage_monitor_init+0x314>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003cb0:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cc2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003cca:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003cd2:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003cda:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003ce2:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <voltage_monitor_init+0x314>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003cea:	4b4d      	ldr	r3, [pc, #308]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cf4:	f640 7245 	movw	r2, #3909	; 0xf45
 8003cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <voltage_monitor_init+0x314>)
 8003cfe:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003d02:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003d06:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d08:	220b      	movs	r2, #11
 8003d0a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003d1e:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d28:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003d2c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003d30:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d32:	f640 6276 	movw	r2, #3702	; 0xe76
 8003d36:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d60:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d6e:	220d      	movs	r2, #13
 8003d70:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d8e:	f640 7238 	movw	r2, #3896	; 0xf38
 8003d92:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <voltage_monitor_init+0x314>)
 8003d98:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003d9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <voltage_monitor_init+0x314>)
 8003da2:	220e      	movs	r2, #14
 8003da4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <voltage_monitor_init+0x314>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <voltage_monitor_init+0x314>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dc2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003dc6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dcc:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003dd0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <voltage_monitor_init+0x314>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <voltage_monitor_init+0x314>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <voltage_monitor_init+0x314>)
 8003df6:	f241 0264 	movw	r2, #4196	; 0x1064
 8003dfa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e08:	2210      	movs	r2, #16
 8003e0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003e16:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <voltage_monitor_init+0x314>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003e1e:	e001      	b.n	8003e24 <voltage_monitor_init+0x318>
 8003e20:	240007d8 	.word	0x240007d8
	rail_monitor[RAIL_n800v].data = 0;
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e2e:	f640 5208 	movw	r2, #3336	; 0xd08
 8003e32:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e38:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003e3c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e42:	2211      	movs	r2, #17
 8003e44:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e66:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <voltage_monitor_init+0x378>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e76:	79fb      	ldrb	r3, [r7, #7]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	240007d8 	.word	0x240007d8

08003e88 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4909      	ldr	r1, [pc, #36]	; (8003ec4 <set_rail_monitor_enable+0x3c>)
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3302      	adds	r3, #2
 8003eac:	79ba      	ldrb	r2, [r7, #6]
 8003eae:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]

	return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	240007d8 	.word	0x240007d8

08003ec8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <get_rail_monitor+0x10>)
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	240007d8 	.word	0x240007d8

08003edc <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8003ee6:	2014      	movs	r0, #20
 8003ee8:	f012 f9fa 	bl	80162e0 <malloc>
 8003eec:	4603      	mov	r3, r0
 8003eee:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8003ef0:	2008      	movs	r0, #8
 8003ef2:	f012 f9f5 	bl	80162e0 <malloc>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8003efa:	2008      	movs	r0, #8
 8003efc:	f012 f9f0 	bl	80162e0 <malloc>
 8003f00:	4603      	mov	r3, r0
 8003f02:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 8003f04:	6838      	ldr	r0, [r7, #0]
 8003f06:	f7fe fc7f 	bl	8002808 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f7fe fcac 	bl	8002868 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fe fcfb 	bl	800290c <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	885a      	ldrh	r2, [r3, #2]
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f1c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f24:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f30:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3302      	adds	r3, #2
 8003f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f3e:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	3306      	adds	r3, #6
 8003f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f5a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	885a      	ldrh	r2, [r3, #2]
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	889a      	ldrh	r2, [r3, #4]
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	88da      	ldrh	r2, [r3, #6]
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	899a      	ldrh	r2, [r3, #12]
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	88da      	ldrh	r2, [r3, #6]
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f94:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	889a      	ldrh	r2, [r3, #4]
 8003f9c:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <set_rail_monitor+0x118>)
 8003f9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	89da      	ldrh	r2, [r3, #14]
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <set_rail_monitor+0x118>)
 8003fa8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	8a1a      	ldrh	r2, [r3, #16]
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <set_rail_monitor+0x118>)
 8003fb2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	891a      	ldrh	r2, [r3, #8]
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <set_rail_monitor+0x118>)
 8003fbc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	895a      	ldrh	r2, [r3, #10]
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <set_rail_monitor+0x118>)
 8003fc6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	8a5a      	ldrh	r2, [r3, #18]
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <set_rail_monitor+0x118>)
 8003fd0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f012 f98b 	bl	80162f0 <free>
	free(hk_adc3);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f012 f988 	bl	80162f0 <free>
	free(hk_i2c);
 8003fe0:	6838      	ldr	r0, [r7, #0]
 8003fe2:	f012 f985 	bl	80162f0 <free>

	status = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]

	return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	240007d8 	.word	0x240007d8

08003ff8 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	db05      	blt.n	800401a <in_range+0x22>
 800400e:	89fb      	ldrh	r3, [r7, #14]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	dc01      	bgt.n	800401a <in_range+0x22>
		return 1;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <in_range+0x24>
	}
	return 0;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800402c:	f7ff f82e 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004030:	480c      	ldr	r0, [pc, #48]	; (8004064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004032:	490d      	ldr	r1, [pc, #52]	; (8004068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004034:	4a0d      	ldr	r2, [pc, #52]	; (800406c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004038:	e002      	b.n	8004040 <LoopCopyDataInit>

0800403a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800403a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800403c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403e:	3304      	adds	r3, #4

08004040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004044:	d3f9      	bcc.n	800403a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004048:	4c0a      	ldr	r4, [pc, #40]	; (8004074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800404a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800404c:	e001      	b.n	8004052 <LoopFillZerobss>

0800404e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004050:	3204      	adds	r2, #4

08004052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004054:	d3fb      	bcc.n	800404e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004056:	f012 f91f 	bl	8016298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800405a:	f7fd fed1 	bl	8001e00 <main>
  bx  lr
 800405e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004060:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004068:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 800406c:	080171e8 	.word	0x080171e8
  ldr r2, =_sbss
 8004070:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8004074:	240051f0 	.word	0x240051f0

08004078 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC3_IRQHandler>
	...

0800407c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004082:	2003      	movs	r0, #3
 8004084:	f001 fd39 	bl	8005afa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004088:	f006 fe2c 	bl	800ace4 <HAL_RCC_GetSysClockFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <HAL_Init+0x68>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	4913      	ldr	r1, [pc, #76]	; (80040e8 <HAL_Init+0x6c>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_Init+0x68>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_Init+0x6c>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_Init+0x70>)
 80040be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040c0:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <HAL_Init+0x74>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040c6:	2005      	movs	r0, #5
 80040c8:	f7fe fe10 	bl	8002cec <HAL_InitTick>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e002      	b.n	80040dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040d6:	f7fe fdeb 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	58024400 	.word	0x58024400
 80040e8:	08017134 	.word	0x08017134
 80040ec:	24000088 	.word	0x24000088
 80040f0:	24000084 	.word	0x24000084

080040f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_IncTick+0x20>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_IncTick+0x24>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4413      	add	r3, r2
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_IncTick+0x24>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	24000090 	.word	0x24000090
 8004118:	2400088c 	.word	0x2400088c

0800411c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return uwTick;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_GetTick+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2400088c 	.word	0x2400088c

08004134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_GetREVID+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0c1b      	lsrs	r3, r3, #16
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	5c001000 	.word	0x5c001000

0800414c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	58000400 	.word	0x58000400

08004178 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3360      	adds	r3, #96	; 0x60
 80041f2:	461a      	mov	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	431a      	orrs	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	611a      	str	r2, [r3, #16]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	431a      	orrs	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	601a      	str	r2, [r3, #0]
  }
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3330      	adds	r3, #48	; 0x30
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	4413      	add	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	211f      	movs	r1, #31
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	f003 011f 	and.w	r1, r3, #31
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	431a      	orrs	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f023 0203 	bic.w	r2, r3, #3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3314      	adds	r3, #20
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0e5b      	lsrs	r3, r3, #25
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0d1b      	lsrs	r3, r3, #20
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2107      	movs	r1, #7
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	401a      	ands	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	431a      	orrs	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0318 	and.w	r3, r3, #24
 80043a6:	4908      	ldr	r1, [pc, #32]	; (80043c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043a8:	40d9      	lsrs	r1, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	400b      	ands	r3, r1
 80043ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	000fffff 	.word	0x000fffff

080043cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 031f 	and.w	r3, r3, #31
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <LL_ADC_DisableDeepPowerDown+0x20>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6093      	str	r3, [r2, #8]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	5fffffc0 	.word	0x5fffffc0

0800440c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004420:	d101      	bne.n	8004426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <LL_ADC_EnableInternalRegulator+0x24>)
 8004442:	4013      	ands	r3, r2
 8004444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	6fffffc0 	.word	0x6fffffc0

0800445c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004470:	d101      	bne.n	8004476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <LL_ADC_Enable+0x24>)
 8004492:	4013      	ands	r3, r2
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	7fffffc0 	.word	0x7fffffc0

080044ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <LL_ADC_Disable+0x24>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	7fffffc0 	.word	0x7fffffc0

080044d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <LL_ADC_IsEnabled+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_IsEnabled+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d101      	bne.n	8004512 <LL_ADC_IsDisableOngoing+0x18>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <LL_ADC_IsDisableOngoing+0x1a>
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <LL_ADC_REG_StartConversion+0x24>)
 800452e:	4013      	ands	r3, r2
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	7fffffc0 	.word	0x7fffffc0

08004548 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d101      	bne.n	8004560 <LL_ADC_REG_IsConversionOngoing+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d101      	bne.n	8004586 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e18f      	b.n	80048ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc f9c5 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff19 	bl	800440c <LL_ADC_IsDeepPowerDownEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff feff 	bl	80043e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff34 	bl	800445c <LL_ADC_IsInternalRegulatorEnabled>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d114      	bne.n	8004624 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ff18 	bl	8004434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004604:	4b87      	ldr	r3, [pc, #540]	; (8004824 <HAL_ADC_Init+0x290>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	4a87      	ldr	r2, [pc, #540]	; (8004828 <HAL_ADC_Init+0x294>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	3301      	adds	r3, #1
 8004614:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004616:	e002      	b.n	800461e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	3b01      	subs	r3, #1
 800461c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f9      	bne.n	8004618 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff17 	bl	800445c <LL_ADC_IsInternalRegulatorEnabled>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	f043 0210 	orr.w	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff77 	bl	8004548 <LL_ADC_REG_IsConversionOngoing>
 800465a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 8129 	bne.w	80048bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8125 	bne.w	80048bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff24 	bl	80044d4 <LL_ADC_IsEnabled>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d136      	bne.n	8004700 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a65      	ldr	r2, [pc, #404]	; (800482c <HAL_ADC_Init+0x298>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_ADC_Init+0x112>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a63      	ldr	r2, [pc, #396]	; (8004830 <HAL_ADC_Init+0x29c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10e      	bne.n	80046c4 <HAL_ADC_Init+0x130>
 80046a6:	4861      	ldr	r0, [pc, #388]	; (800482c <HAL_ADC_Init+0x298>)
 80046a8:	f7ff ff14 	bl	80044d4 <LL_ADC_IsEnabled>
 80046ac:	4604      	mov	r4, r0
 80046ae:	4860      	ldr	r0, [pc, #384]	; (8004830 <HAL_ADC_Init+0x29c>)
 80046b0:	f7ff ff10 	bl	80044d4 <LL_ADC_IsEnabled>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4323      	orrs	r3, r4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e008      	b.n	80046d6 <HAL_ADC_Init+0x142>
 80046c4:	485b      	ldr	r0, [pc, #364]	; (8004834 <HAL_ADC_Init+0x2a0>)
 80046c6:	f7ff ff05 	bl	80044d4 <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a53      	ldr	r2, [pc, #332]	; (800482c <HAL_ADC_Init+0x298>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_ADC_Init+0x15a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a51      	ldr	r2, [pc, #324]	; (8004830 <HAL_ADC_Init+0x29c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_Init+0x15e>
 80046ee:	4a52      	ldr	r2, [pc, #328]	; (8004838 <HAL_ADC_Init+0x2a4>)
 80046f0:	e000      	b.n	80046f4 <HAL_ADC_Init+0x160>
 80046f2:	4a52      	ldr	r2, [pc, #328]	; (800483c <HAL_ADC_Init+0x2a8>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7ff fd3c 	bl	8004178 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004700:	f7ff fd18 	bl	8004134 <HAL_GetREVID>
 8004704:	4603      	mov	r3, r0
 8004706:	f241 0203 	movw	r2, #4099	; 0x1003
 800470a:	4293      	cmp	r3, r2
 800470c:	d914      	bls.n	8004738 <HAL_ADC_Init+0x1a4>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b10      	cmp	r3, #16
 8004714:	d110      	bne.n	8004738 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7d5b      	ldrb	r3, [r3, #21]
 800471a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004720:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004726:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7f1b      	ldrb	r3, [r3, #28]
 800472c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800472e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004730:	f043 030c 	orr.w	r3, r3, #12
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e00d      	b.n	8004754 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	7d5b      	ldrb	r3, [r3, #21]
 800473c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004742:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004748:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7f1b      	ldrb	r3, [r3, #28]
 800474e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7f1b      	ldrb	r3, [r3, #28]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	3b01      	subs	r3, #1
 8004762:	045b      	lsls	r3, r3, #17
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <HAL_ADC_Init+0x2ac>)
 800478e:	4013      	ands	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	430b      	orrs	r3, r1
 8004798:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fed2 	bl	8004548 <LL_ADC_REG_IsConversionOngoing>
 80047a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fedf 	bl	800456e <LL_ADC_INJ_IsConversionOngoing>
 80047b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d15f      	bne.n	8004878 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d15c      	bne.n	8004878 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7d1b      	ldrb	r3, [r3, #20]
 80047c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_ADC_Init+0x2b0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	430b      	orrs	r3, r1
 80047de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d130      	bne.n	800484c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_ADC_Init+0x2b4>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047fe:	3a01      	subs	r2, #1
 8004800:	0411      	lsls	r1, r2, #16
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004806:	4311      	orrs	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004812:	430a      	orrs	r2, r1
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	e01c      	b.n	800485c <HAL_ADC_Init+0x2c8>
 8004822:	bf00      	nop
 8004824:	24000084 	.word	0x24000084
 8004828:	053e2d63 	.word	0x053e2d63
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	58026000 	.word	0x58026000
 8004838:	40022300 	.word	0x40022300
 800483c:	58026300 	.word	0x58026300
 8004840:	fff0c003 	.word	0xfff0c003
 8004844:	ffffbffc 	.word	0xffffbffc
 8004848:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fdec 	bl	8005450 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10c      	bne.n	800489a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f023 010f 	bic.w	r1, r3, #15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
 8004898:	e007      	b.n	80048aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 020f 	bic.w	r2, r2, #15
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
 80048ba:	e007      	b.n	80048cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0210 	orr.w	r2, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd90      	pop	{r4, r7, pc}
 80048d6:	bf00      	nop

080048d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a55      	ldr	r2, [pc, #340]	; (8004a40 <HAL_ADC_Start_DMA+0x168>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_ADC_Start_DMA+0x20>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a54      	ldr	r2, [pc, #336]	; (8004a44 <HAL_ADC_Start_DMA+0x16c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <HAL_ADC_Start_DMA+0x24>
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_ADC_Start_DMA+0x170>)
 80048fa:	e000      	b.n	80048fe <HAL_ADC_Start_DMA+0x26>
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_ADC_Start_DMA+0x174>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fd64 	bl	80043cc <LL_ADC_GetMultimode>
 8004904:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fe1c 	bl	8004548 <LL_ADC_REG_IsConversionOngoing>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 808c 	bne.w	8004a30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Start_DMA+0x4e>
 8004922:	2302      	movs	r3, #2
 8004924:	e087      	b.n	8004a36 <HAL_ADC_Start_DMA+0x15e>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d002      	beq.n	8004940 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b09      	cmp	r3, #9
 800493e:	d170      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fc07 	bl	8005154 <ADC_Enable>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d163      	bne.n	8004a18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004954:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <HAL_ADC_Start_DMA+0x178>)
 8004956:	4013      	ands	r3, r2
 8004958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a37      	ldr	r2, [pc, #220]	; (8004a44 <HAL_ADC_Start_DMA+0x16c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d002      	beq.n	8004970 <HAL_ADC_Start_DMA+0x98>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	e000      	b.n	8004972 <HAL_ADC_Start_DMA+0x9a>
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_ADC_Start_DMA+0x168>)
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	4293      	cmp	r3, r2
 8004978:	d002      	beq.n	8004980 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	f023 0206 	bic.w	r2, r3, #6
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	659a      	str	r2, [r3, #88]	; 0x58
 80049a4:	e002      	b.n	80049ac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <HAL_ADC_Start_DMA+0x17c>)
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <HAL_ADC_Start_DMA+0x180>)
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <HAL_ADC_Start_DMA+0x184>)
 80049c2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	221c      	movs	r2, #28
 80049ca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0210 	orr.w	r2, r2, #16
 80049e2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7ff fc89 	bl	8004306 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3340      	adds	r3, #64	; 0x40
 80049fe:	4619      	mov	r1, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f002 f80e 	bl	8006a24 <HAL_DMA_Start_IT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fd85 	bl	8004520 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a16:	e00d      	b.n	8004a34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a20:	e008      	b.n	8004a34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a2e:	e001      	b.n	8004a34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
 8004a32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40022000 	.word	0x40022000
 8004a44:	40022100 	.word	0x40022100
 8004a48:	40022300 	.word	0x40022300
 8004a4c:	58026300 	.word	0x58026300
 8004a50:	fffff0fe 	.word	0xfffff0fe
 8004a54:	08005327 	.word	0x08005327
 8004a58:	080053ff 	.word	0x080053ff
 8004a5c:	0800541b 	.word	0x0800541b

08004a60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b0a1      	sub	sp, #132	; 0x84
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a65      	ldr	r2, [pc, #404]	; (8004c4c <HAL_ADC_ConfigChannel+0x1b0>)
 8004ab6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x2a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e32e      	b.n	8005124 <HAL_ADC_ConfigChannel+0x688>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fd38 	bl	8004548 <LL_ADC_REG_IsConversionOngoing>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 8313 	bne.w	8005106 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db2c      	blt.n	8004b42 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d108      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x6a>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	e016      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x98>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b16:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	e003      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2201      	movs	r2, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	69d1      	ldr	r1, [r2, #28]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7ff fbad 	bl	80042ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fcf5 	bl	8004548 <LL_ADC_REG_IsConversionOngoing>
 8004b5e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fd02 	bl	800456e <LL_ADC_INJ_IsConversionOngoing>
 8004b6a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 80b8 	bne.w	8004ce4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 80b4 	bne.w	8004ce4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f7ff fbcf 	bl	800432c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b8e:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_ADC_ConfigChannel+0x1b4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x118>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	089b      	lsrs	r3, r3, #2
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	e01d      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x154>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_ADC_ConfigChannel+0x13e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	e00a      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x154>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d02c      	beq.n	8004c54 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6919      	ldr	r1, [r3, #16]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c08:	f7ff faea 	bl	80041e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6919      	ldr	r1, [r3, #16]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	7e5b      	ldrb	r3, [r3, #25]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x186>
 8004c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c20:	e000      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x188>
 8004c22:	2300      	movs	r3, #0
 8004c24:	461a      	mov	r2, r3
 8004c26:	f7ff fb14 	bl	8004252 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6919      	ldr	r1, [r3, #16]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	7e1b      	ldrb	r3, [r3, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d102      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x1a4>
 8004c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c3e:	e000      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x1a6>
 8004c40:	2300      	movs	r3, #0
 8004c42:	461a      	mov	r2, r3
 8004c44:	f7ff faec 	bl	8004220 <LL_ADC_SetDataRightShift>
 8004c48:	e04c      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x248>
 8004c4a:	bf00      	nop
 8004c4c:	47ff0000 	.word	0x47ff0000
 8004c50:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d107      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c9a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	069b      	lsls	r3, r3, #26
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d107      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cbe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	069b      	lsls	r3, r3, #26
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ce2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fbf3 	bl	80044d4 <LL_ADC_IsEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8211 	bne.w	8005118 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f7ff fb3e 	bl	8004384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4aa1      	ldr	r2, [pc, #644]	; (8004f94 <HAL_ADC_ConfigChannel+0x4f8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	f040 812e 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x2a0>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	bf94      	ite	ls
 8004d34:	2301      	movls	r3, #1
 8004d36:	2300      	movhi	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e019      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x2d4>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e003      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2b09      	cmp	r3, #9
 8004d68:	bf94      	ite	ls
 8004d6a:	2301      	movls	r3, #1
 8004d6c:	2300      	movhi	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d079      	beq.n	8004e68 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x2f4>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	3301      	adds	r3, #1
 8004d88:	069b      	lsls	r3, r3, #26
 8004d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d8e:	e015      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x320>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004da8:	2320      	movs	r3, #32
 8004daa:	e003      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	069b      	lsls	r3, r3, #26
 8004db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x340>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	e017      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x370>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	fa93 f3a3 	rbit	r3, r3
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004df4:	2320      	movs	r3, #32
 8004df6:	e003      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	3301      	adds	r3, #1
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	ea42 0103 	orr.w	r1, r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x396>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0e9b      	lsrs	r3, r3, #26
 8004e22:	3301      	adds	r3, #1
 8004e24:	f003 021f 	and.w	r2, r3, #31
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	051b      	lsls	r3, r3, #20
 8004e30:	e018      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x3c8>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	e003      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e64:	430b      	orrs	r3, r1
 8004e66:	e07e      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x3e8>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0e9b      	lsrs	r3, r3, #26
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	069b      	lsls	r3, r3, #26
 8004e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e82:	e015      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x414>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	e003      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	069b      	lsls	r3, r3, #26
 8004eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x434>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0e9b      	lsrs	r3, r3, #26
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	e017      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x464>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	61bb      	str	r3, [r7, #24]
  return result;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004ee8:	2320      	movs	r3, #32
 8004eea:	e003      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2101      	movs	r1, #1
 8004efc:	fa01 f303 	lsl.w	r3, r1, r3
 8004f00:	ea42 0103 	orr.w	r1, r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x490>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0e9b      	lsrs	r3, r3, #26
 8004f16:	3301      	adds	r3, #1
 8004f18:	f003 021f 	and.w	r2, r3, #31
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	3b1e      	subs	r3, #30
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	e01b      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x4c8>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
  return result;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004f44:	2320      	movs	r3, #32
 8004f46:	e003      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	f003 021f 	and.w	r2, r3, #31
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3b1e      	subs	r3, #30
 8004f5e:	051b      	lsls	r3, r3, #20
 8004f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	430b      	orrs	r3, r1
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	6892      	ldr	r2, [r2, #8]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7ff f9de 	bl	800432c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f280 80cf 	bge.w	8005118 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <HAL_ADC_ConfigChannel+0x4fc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_ADC_ConfigChannel+0x4f2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <HAL_ADC_ConfigChannel+0x500>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10a      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x508>
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <HAL_ADC_ConfigChannel+0x504>)
 8004f90:	e009      	b.n	8004fa6 <HAL_ADC_ConfigChannel+0x50a>
 8004f92:	bf00      	nop
 8004f94:	47ff0000 	.word	0x47ff0000
 8004f98:	40022000 	.word	0x40022000
 8004f9c:	40022100 	.word	0x40022100
 8004fa0:	40022300 	.word	0x40022300
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_ADC_ConfigChannel+0x690>)
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff f90c 	bl	80041c4 <LL_ADC_GetCommonPathInternalCh>
 8004fac:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a5f      	ldr	r2, [pc, #380]	; (8005130 <HAL_ADC_ConfigChannel+0x694>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_ADC_ConfigChannel+0x526>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5d      	ldr	r2, [pc, #372]	; (8005134 <HAL_ADC_ConfigChannel+0x698>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x544>
 8004fc2:	485b      	ldr	r0, [pc, #364]	; (8005130 <HAL_ADC_ConfigChannel+0x694>)
 8004fc4:	f7ff fa86 	bl	80044d4 <LL_ADC_IsEnabled>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	485a      	ldr	r0, [pc, #360]	; (8005134 <HAL_ADC_ConfigChannel+0x698>)
 8004fcc:	f7ff fa82 	bl	80044d4 <LL_ADC_IsEnabled>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4323      	orrs	r3, r4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e008      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x556>
 8004fe0:	4855      	ldr	r0, [pc, #340]	; (8005138 <HAL_ADC_ConfigChannel+0x69c>)
 8004fe2:	f7ff fa77 	bl	80044d4 <LL_ADC_IsEnabled>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d07d      	beq.n	80050f2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a50      	ldr	r2, [pc, #320]	; (800513c <HAL_ADC_ConfigChannel+0x6a0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d130      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x5c6>
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12b      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4a      	ldr	r2, [pc, #296]	; (8005138 <HAL_ADC_ConfigChannel+0x69c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	f040 8081 	bne.w	8005118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a45      	ldr	r2, [pc, #276]	; (8005130 <HAL_ADC_ConfigChannel+0x694>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_ADC_ConfigChannel+0x58e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_ADC_ConfigChannel+0x698>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x592>
 800502a:	4a45      	ldr	r2, [pc, #276]	; (8005140 <HAL_ADC_ConfigChannel+0x6a4>)
 800502c:	e000      	b.n	8005030 <HAL_ADC_ConfigChannel+0x594>
 800502e:	4a3f      	ldr	r2, [pc, #252]	; (800512c <HAL_ADC_ConfigChannel+0x690>)
 8005030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005032:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7ff f8b0 	bl	800419e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_ADC_ConfigChannel+0x6a8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	4a40      	ldr	r2, [pc, #256]	; (8005148 <HAL_ADC_ConfigChannel+0x6ac>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	3301      	adds	r3, #1
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005052:	e002      	b.n	800505a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	3b01      	subs	r3, #1
 8005058:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f9      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005060:	e05a      	b.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a39      	ldr	r2, [pc, #228]	; (800514c <HAL_ADC_ConfigChannel+0x6b0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d11e      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x60e>
 800506c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d119      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <HAL_ADC_ConfigChannel+0x69c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d14b      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <HAL_ADC_ConfigChannel+0x694>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x5f8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a29      	ldr	r2, [pc, #164]	; (8005134 <HAL_ADC_ConfigChannel+0x698>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x5fc>
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <HAL_ADC_ConfigChannel+0x6a4>)
 8005096:	e000      	b.n	800509a <HAL_ADC_ConfigChannel+0x5fe>
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <HAL_ADC_ConfigChannel+0x690>)
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7ff f87b 	bl	800419e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050a8:	e036      	b.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a28      	ldr	r2, [pc, #160]	; (8005150 <HAL_ADC_ConfigChannel+0x6b4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d131      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d12c      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_ADC_ConfigChannel+0x69c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d127      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_ADC_ConfigChannel+0x694>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_ADC_ConfigChannel+0x640>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a17      	ldr	r2, [pc, #92]	; (8005134 <HAL_ADC_ConfigChannel+0x698>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x644>
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_ADC_ConfigChannel+0x6a4>)
 80050de:	e000      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x646>
 80050e0:	4a12      	ldr	r2, [pc, #72]	; (800512c <HAL_ADC_ConfigChannel+0x690>)
 80050e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7ff f857 	bl	800419e <LL_ADC_SetCommonPathInternalCh>
 80050f0:	e012      	b.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005104:	e008      	b.n	8005118 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f043 0220 	orr.w	r2, r3, #32
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005120:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005124:	4618      	mov	r0, r3
 8005126:	3784      	adds	r7, #132	; 0x84
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}
 800512c:	58026300 	.word	0x58026300
 8005130:	40022000 	.word	0x40022000
 8005134:	40022100 	.word	0x40022100
 8005138:	58026000 	.word	0x58026000
 800513c:	cb840000 	.word	0xcb840000
 8005140:	40022300 	.word	0x40022300
 8005144:	24000084 	.word	0x24000084
 8005148:	053e2d63 	.word	0x053e2d63
 800514c:	c7520000 	.word	0xc7520000
 8005150:	cfb80000 	.word	0xcfb80000

08005154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f9b7 	bl	80044d4 <LL_ADC_IsEnabled>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d16e      	bne.n	800524a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <ADC_Enable+0x100>)
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0210 	orr.w	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f043 0201 	orr.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e05a      	b.n	800524c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f972 	bl	8004484 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051a0:	f7fe ffbc 	bl	800411c <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <ADC_Enable+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <ADC_Enable+0x66>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a29      	ldr	r2, [pc, #164]	; (800525c <ADC_Enable+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <ADC_Enable+0x6a>
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <ADC_Enable+0x10c>)
 80051bc:	e000      	b.n	80051c0 <ADC_Enable+0x6c>
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <ADC_Enable+0x110>)
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff f903 	bl	80043cc <LL_ADC_GetMultimode>
 80051c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a23      	ldr	r2, [pc, #140]	; (800525c <ADC_Enable+0x108>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d002      	beq.n	80051d8 <ADC_Enable+0x84>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	e000      	b.n	80051da <ADC_Enable+0x86>
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <ADC_Enable+0x104>)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02c      	beq.n	800523c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d130      	bne.n	800524a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e8:	e028      	b.n	800523c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff f970 	bl	80044d4 <LL_ADC_IsEnabled>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff f940 	bl	8004484 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005204:	f7fe ff8a 	bl	800411c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d914      	bls.n	800523c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d00d      	beq.n	800523c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	f043 0210 	orr.w	r2, r3, #16
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	f043 0201 	orr.w	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d1cf      	bne.n	80051ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	8000003f 	.word	0x8000003f
 8005258:	40022000 	.word	0x40022000
 800525c:	40022100 	.word	0x40022100
 8005260:	40022300 	.word	0x40022300
 8005264:	58026300 	.word	0x58026300

08005268 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff f940 	bl	80044fa <LL_ADC_IsDisableOngoing>
 800527a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f927 	bl	80044d4 <LL_ADC_IsEnabled>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d047      	beq.n	800531c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d144      	bne.n	800531c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030d 	and.w	r3, r3, #13
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10c      	bne.n	80052ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff f901 	bl	80044ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2203      	movs	r2, #3
 80052b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052b2:	f7fe ff33 	bl	800411c <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052b8:	e029      	b.n	800530e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e023      	b.n	800531e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052d6:	f7fe ff21 	bl	800411c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d914      	bls.n	800530e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	f043 0210 	orr.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e007      	b.n	800531e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1dc      	bne.n	80052d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800533c:	2b00      	cmp	r3, #0
 800533e:	d14b      	bne.n	80053d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d021      	beq.n	800539e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe ff92 	bl	8004288 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d032      	beq.n	80053d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d12b      	bne.n	80053d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11f      	bne.n	80053d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0201 	orr.w	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
 800539c:	e018      	b.n	80053d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d111      	bne.n	80053d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f043 0201 	orr.w	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fb45 	bl	8004a60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053d6:	e00e      	b.n	80053f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fb4f 	bl	8004a88 <HAL_ADC_ErrorCallback>
}
 80053ea:	e004      	b.n	80053f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fb31 	bl	8004a74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f043 0204 	orr.w	r2, r3, #4
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fb21 	bl	8004a88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a7a      	ldr	r2, [pc, #488]	; (8005648 <ADC_ConfigureBoostMode+0x1f8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <ADC_ConfigureBoostMode+0x1c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a79      	ldr	r2, [pc, #484]	; (800564c <ADC_ConfigureBoostMode+0x1fc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <ADC_ConfigureBoostMode+0x30>
 800546c:	4b78      	ldr	r3, [pc, #480]	; (8005650 <ADC_ConfigureBoostMode+0x200>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e008      	b.n	8005492 <ADC_ConfigureBoostMode+0x42>
 8005480:	4b74      	ldr	r3, [pc, #464]	; (8005654 <ADC_ConfigureBoostMode+0x204>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01c      	beq.n	80054d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005496:	f005 fd9f 	bl	800afd8 <HAL_RCC_GetHCLKFreq>
 800549a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054a4:	d010      	beq.n	80054c8 <ADC_ConfigureBoostMode+0x78>
 80054a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054aa:	d873      	bhi.n	8005594 <ADC_ConfigureBoostMode+0x144>
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d002      	beq.n	80054b8 <ADC_ConfigureBoostMode+0x68>
 80054b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b6:	d16d      	bne.n	8005594 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	60fb      	str	r3, [r7, #12]
        break;
 80054c6:	e068      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	60fb      	str	r3, [r7, #12]
        break;
 80054ce:	e064      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80054d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f007 f826 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 80054dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80054e6:	d051      	beq.n	800558c <ADC_ConfigureBoostMode+0x13c>
 80054e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80054ec:	d854      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 80054ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054f2:	d047      	beq.n	8005584 <ADC_ConfigureBoostMode+0x134>
 80054f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054f8:	d84e      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 80054fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054fe:	d03d      	beq.n	800557c <ADC_ConfigureBoostMode+0x12c>
 8005500:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005504:	d848      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 8005506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800550a:	d033      	beq.n	8005574 <ADC_ConfigureBoostMode+0x124>
 800550c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005510:	d842      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 8005512:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005516:	d029      	beq.n	800556c <ADC_ConfigureBoostMode+0x11c>
 8005518:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800551c:	d83c      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 800551e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005522:	d01a      	beq.n	800555a <ADC_ConfigureBoostMode+0x10a>
 8005524:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005528:	d836      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 800552a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800552e:	d014      	beq.n	800555a <ADC_ConfigureBoostMode+0x10a>
 8005530:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005534:	d830      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553a:	d00e      	beq.n	800555a <ADC_ConfigureBoostMode+0x10a>
 800553c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005540:	d82a      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 8005542:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005546:	d008      	beq.n	800555a <ADC_ConfigureBoostMode+0x10a>
 8005548:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800554c:	d824      	bhi.n	8005598 <ADC_ConfigureBoostMode+0x148>
 800554e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005552:	d002      	beq.n	800555a <ADC_ConfigureBoostMode+0x10a>
 8005554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005558:	d11e      	bne.n	8005598 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	0c9b      	lsrs	r3, r3, #18
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	60fb      	str	r3, [r7, #12]
        break;
 800556a:	e016      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	60fb      	str	r3, [r7, #12]
        break;
 8005572:	e012      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	60fb      	str	r3, [r7, #12]
        break;
 800557a:	e00e      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	60fb      	str	r3, [r7, #12]
        break;
 8005582:	e00a      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	09db      	lsrs	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
        break;
 800558a:	e006      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	60fb      	str	r3, [r7, #12]
        break;
 8005592:	e002      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005598:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800559a:	f7fe fdcb 	bl	8004134 <HAL_GetREVID>
 800559e:	4603      	mov	r3, r0
 80055a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d815      	bhi.n	80055d4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <ADC_ConfigureBoostMode+0x208>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d908      	bls.n	80055c2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80055c0:	e03e      	b.n	8005640 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d0:	609a      	str	r2, [r3, #8]
}
 80055d2:	e035      	b.n	8005640 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a1f      	ldr	r2, [pc, #124]	; (800565c <ADC_ConfigureBoostMode+0x20c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d808      	bhi.n	80055f4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055f0:	609a      	str	r2, [r3, #8]
}
 80055f2:	e025      	b.n	8005640 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <ADC_ConfigureBoostMode+0x210>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d80a      	bhi.n	8005612 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	e016      	b.n	8005640 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <ADC_ConfigureBoostMode+0x214>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d80a      	bhi.n	8005630 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	e007      	b.n	8005640 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40022000 	.word	0x40022000
 800564c:	40022100 	.word	0x40022100
 8005650:	40022300 	.word	0x40022300
 8005654:	58026300 	.word	0x58026300
 8005658:	01312d00 	.word	0x01312d00
 800565c:	005f5e10 	.word	0x005f5e10
 8005660:	00bebc20 	.word	0x00bebc20
 8005664:	017d7840 	.word	0x017d7840

08005668 <LL_ADC_IsEnabled>:
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <LL_ADC_IsEnabled+0x18>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <LL_ADC_IsEnabled+0x1a>
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <LL_ADC_StartCalibration>:
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <LL_ADC_StartCalibration+0x38>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056b0:	430a      	orrs	r2, r1
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	3ffeffc0 	.word	0x3ffeffc0

080056cc <LL_ADC_IsCalibrationOnGoing>:
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e0:	d101      	bne.n	80056e6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d101      	bne.n	800570c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_ADCEx_Calibration_Start+0x1e>
 8005736:	2302      	movs	r3, #2
 8005738:	e04c      	b.n	80057d4 <HAL_ADCEx_Calibration_Start+0xb8>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fd90 	bl	8005268 <ADC_Disable>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800574c:	7dfb      	ldrb	r3, [r7, #23]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d135      	bne.n	80057be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005758:	4013      	ands	r3, r2
 800575a:	f043 0202 	orr.w	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff90 	bl	8005690 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005770:	e014      	b.n	800579c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d30d      	bcc.n	800579c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005784:	f023 0312 	bic.w	r3, r3, #18
 8005788:	f043 0210 	orr.w	r2, r3, #16
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e01b      	b.n	80057d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff93 	bl	80056cc <LL_ADC_IsCalibrationOnGoing>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e2      	bne.n	8005772 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f023 0303 	bic.w	r3, r3, #3
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
 80057bc:	e005      	b.n	80057ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f043 0210 	orr.w	r2, r3, #16
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	ffffeefd 	.word	0xffffeefd
 80057e0:	25c3f800 	.word	0x25c3f800

080057e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b09f      	sub	sp, #124	; 0x7c
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0be      	b.n	8005980 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800580a:	2300      	movs	r3, #0
 800580c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a5c      	ldr	r2, [pc, #368]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d102      	bne.n	8005822 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800581c:	4b5b      	ldr	r3, [pc, #364]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	e001      	b.n	8005826 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e09d      	b.n	8005980 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff ff54 	bl	80056f4 <LL_ADC_REG_IsConversionOngoing>
 800584c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ff4e 	bl	80056f4 <LL_ADC_REG_IsConversionOngoing>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d17f      	bne.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800585e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005860:	2b00      	cmp	r3, #0
 8005862:	d17c      	bne.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a47      	ldr	r2, [pc, #284]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a46      	ldr	r2, [pc, #280]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005878:	4b45      	ldr	r3, [pc, #276]	; (8005990 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800587a:	e000      	b.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800587e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d039      	beq.n	80058fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	431a      	orrs	r2, r3
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a3a      	ldr	r2, [pc, #232]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a38      	ldr	r2, [pc, #224]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10e      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80058ae:	4836      	ldr	r0, [pc, #216]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058b0:	f7ff feda 	bl	8005668 <LL_ADC_IsEnabled>
 80058b4:	4604      	mov	r4, r0
 80058b6:	4835      	ldr	r0, [pc, #212]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058b8:	f7ff fed6 	bl	8005668 <LL_ADC_IsEnabled>
 80058bc:	4603      	mov	r3, r0
 80058be:	4323      	orrs	r3, r4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e008      	b.n	80058de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80058cc:	4832      	ldr	r0, [pc, #200]	; (8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058ce:	f7ff fecb 	bl	8005668 <LL_ADC_IsEnabled>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d047      	beq.n	8005972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	6811      	ldr	r1, [r2, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	6892      	ldr	r2, [r2, #8]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	431a      	orrs	r2, r3
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058fa:	e03a      	b.n	8005972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10e      	bne.n	800593a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800591c:	481a      	ldr	r0, [pc, #104]	; (8005988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800591e:	f7ff fea3 	bl	8005668 <LL_ADC_IsEnabled>
 8005922:	4604      	mov	r4, r0
 8005924:	4819      	ldr	r0, [pc, #100]	; (800598c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005926:	f7ff fe9f 	bl	8005668 <LL_ADC_IsEnabled>
 800592a:	4603      	mov	r3, r0
 800592c:	4323      	orrs	r3, r4
 800592e:	2b00      	cmp	r3, #0
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e008      	b.n	800594c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800593a:	4817      	ldr	r0, [pc, #92]	; (8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800593c:	f7ff fe94 	bl	8005668 <LL_ADC_IsEnabled>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005956:	4013      	ands	r3, r2
 8005958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800595a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800595c:	e009      	b.n	8005972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005970:	e000      	b.n	8005974 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005972:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800597c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005980:	4618      	mov	r0, r3
 8005982:	377c      	adds	r7, #124	; 0x7c
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	40022000 	.word	0x40022000
 800598c:	40022100 	.word	0x40022100
 8005990:	40022300 	.word	0x40022300
 8005994:	58026300 	.word	0x58026300
 8005998:	58026000 	.word	0x58026000
 800599c:	fffff0e0 	.word	0xfffff0e0

080059a0 <__NVIC_SetPriorityGrouping>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <__NVIC_SetPriorityGrouping+0x40>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059bc:	4013      	ands	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <__NVIC_SetPriorityGrouping+0x44>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ce:	4a04      	ldr	r2, [pc, #16]	; (80059e0 <__NVIC_SetPriorityGrouping+0x40>)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	60d3      	str	r3, [r2, #12]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000ed00 	.word	0xe000ed00
 80059e4:	05fa0000 	.word	0x05fa0000

080059e8 <__NVIC_GetPriorityGrouping>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <__NVIC_GetPriorityGrouping+0x18>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	f003 0307 	and.w	r3, r3, #7
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <__NVIC_EnableIRQ>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	db0b      	blt.n	8005a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	f003 021f 	and.w	r2, r3, #31
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <__NVIC_EnableIRQ+0x38>)
 8005a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2001      	movs	r0, #1
 8005a26:	fa00 f202 	lsl.w	r2, r0, r2
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e100 	.word	0xe000e100

08005a40 <__NVIC_SetPriority>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db0a      	blt.n	8005a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	490c      	ldr	r1, [pc, #48]	; (8005a8c <__NVIC_SetPriority+0x4c>)
 8005a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a5e:	0112      	lsls	r2, r2, #4
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	440b      	add	r3, r1
 8005a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a68:	e00a      	b.n	8005a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4908      	ldr	r1, [pc, #32]	; (8005a90 <__NVIC_SetPriority+0x50>)
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	3b04      	subs	r3, #4
 8005a78:	0112      	lsls	r2, r2, #4
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	761a      	strb	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	e000e100 	.word	0xe000e100
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <NVIC_EncodePriority>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f1c3 0307 	rsb	r3, r3, #7
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf28      	it	cs
 8005ab2:	2304      	movcs	r3, #4
 8005ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	d902      	bls.n	8005ac4 <NVIC_EncodePriority+0x30>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3b03      	subs	r3, #3
 8005ac2:	e000      	b.n	8005ac6 <NVIC_EncodePriority+0x32>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005adc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	43d9      	mvns	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aec:	4313      	orrs	r3, r2
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3724      	adds	r7, #36	; 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff4c 	bl	80059a0 <__NVIC_SetPriorityGrouping>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b1e:	f7ff ff63 	bl	80059e8 <__NVIC_GetPriorityGrouping>
 8005b22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f7ff ffb3 	bl	8005a94 <NVIC_EncodePriority>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ff82 	bl	8005a40 <__NVIC_SetPriority>
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff56 	bl	8005a04 <__NVIC_EnableIRQ>
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e014      	b.n	8005b9c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	791b      	ldrb	r3, [r3, #4]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb f82e 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e046      	b.n	8005c46 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	795b      	ldrb	r3, [r3, #5]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_DAC_Start+0x20>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e040      	b.n	8005c46 <HAL_DAC_Start+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6819      	ldr	r1, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2201      	movs	r2, #1
 8005bde:	409a      	lsls	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d11d      	bne.n	8005c38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e014      	b.n	8005c38 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2102      	movs	r1, #2
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d107      	bne.n	8005c38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0202 	orr.w	r2, r2, #2
 8005c36:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0a2      	b.n	8005db2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	795b      	ldrb	r3, [r3, #5]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_DAC_Start_DMA+0x24>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e09c      	b.n	8005db2 <HAL_DAC_Start_DMA+0x15e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2202      	movs	r2, #2
 8005c82:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d129      	bne.n	8005cde <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4a4b      	ldr	r2, [pc, #300]	; (8005dbc <HAL_DAC_Start_DMA+0x168>)
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_DAC_Start_DMA+0x16c>)
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	4a49      	ldr	r2, [pc, #292]	; (8005dc4 <HAL_DAC_Start_DMA+0x170>)
 8005ca0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_DAC_Start_DMA+0x6c>
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d005      	beq.n	8005cca <HAL_DAC_Start_DMA+0x76>
 8005cbe:	e009      	b.n	8005cd4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	613b      	str	r3, [r7, #16]
        break;
 8005cc8:	e033      	b.n	8005d32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	613b      	str	r3, [r7, #16]
        break;
 8005cd2:	e02e      	b.n	8005d32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3310      	adds	r3, #16
 8005cda:	613b      	str	r3, [r7, #16]
        break;
 8005cdc:	e029      	b.n	8005d32 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	4a39      	ldr	r2, [pc, #228]	; (8005dc8 <HAL_DAC_Start_DMA+0x174>)
 8005ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	4a38      	ldr	r2, [pc, #224]	; (8005dcc <HAL_DAC_Start_DMA+0x178>)
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4a37      	ldr	r2, [pc, #220]	; (8005dd0 <HAL_DAC_Start_DMA+0x17c>)
 8005cf4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_DAC_Start_DMA+0xc0>
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d005      	beq.n	8005d1e <HAL_DAC_Start_DMA+0xca>
 8005d12:	e009      	b.n	8005d28 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	613b      	str	r3, [r7, #16]
        break;
 8005d1c:	e009      	b.n	8005d32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3318      	adds	r3, #24
 8005d24:	613b      	str	r3, [r7, #16]
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	613b      	str	r3, [r7, #16]
        break;
 8005d30:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d111      	bne.n	8005d5c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6898      	ldr	r0, [r3, #8]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	f000 fe67 	bl	8006a24 <HAL_DMA_Start_IT>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]
 8005d5a:	e010      	b.n	8005d7e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68d8      	ldr	r0, [r3, #12]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	f000 fe55 	bl	8006a24 <HAL_DMA_Start_IT>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2201      	movs	r2, #1
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e005      	b.n	8005db0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	08006245 	.word	0x08006245
 8005dc0:	08006267 	.word	0x08006267
 8005dc4:	08006283 	.word	0x08006283
 8005dc8:	08006301 	.word	0x08006301
 8005dcc:	08006323 	.word	0x08006323
 8005dd0:	0800633f 	.word	0x0800633f

08005dd4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e03e      	b.n	8005e66 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43da      	mvns	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	400a      	ands	r2, r1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2201      	movs	r2, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	400a      	ands	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f863 	bl	8006ef8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e00c      	b.n	8005e5e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 f855 	bl	8006ef8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005e5c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e84:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01d      	beq.n	8005ecc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f043 0201 	orr.w	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f86f 	bl	8005faa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01d      	beq.n	8005f12 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d018      	beq.n	8005f12 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f043 0202 	orr.w	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9ed 	bl	80062ec <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e015      	b.n	8005f62 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4413      	add	r3, r2
 8005f48:	3308      	adds	r3, #8
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e004      	b.n	8005f58 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	3314      	adds	r3, #20
 8005f56:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_DAC_ConfigChannel+0x1e>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e12a      	b.n	8006238 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	795b      	ldrb	r3, [r3, #5]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_DAC_ConfigChannel+0x2e>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e124      	b.n	8006238 <HAL_DAC_ConfigChannel+0x278>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d17a      	bne.n	80060f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006002:	f7fe f88b 	bl	800411c <HAL_GetTick>
 8006006:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d13d      	bne.n	800608a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800600e:	e018      	b.n	8006042 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006010:	f7fe f884 	bl	800411c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	d911      	bls.n	8006042 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006024:	4b86      	ldr	r3, [pc, #536]	; (8006240 <HAL_DAC_ConfigChannel+0x280>)
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f043 0208 	orr.w	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2203      	movs	r2, #3
 800603c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e0fa      	b.n	8006238 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006048:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <HAL_DAC_ConfigChannel+0x280>)
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1df      	bne.n	8006010 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	6992      	ldr	r2, [r2, #24]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
 800605a:	e020      	b.n	800609e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800605c:	f7fe f85e 	bl	800411c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d90f      	bls.n	800608a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	2b00      	cmp	r3, #0
 8006072:	da0a      	bge.n	800608a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f043 0208 	orr.w	r2, r3, #8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2203      	movs	r2, #3
 8006084:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e0d6      	b.n	8006238 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006090:	2b00      	cmp	r3, #0
 8006092:	dbe3      	blt.n	800605c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	6992      	ldr	r2, [r2, #24]
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	ea02 0103 	and.w	r1, r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	409a      	lsls	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	21ff      	movs	r1, #255	; 0xff
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	ea02 0103 	and.w	r1, r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	409a      	lsls	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11d      	bne.n	800613c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	221f      	movs	r2, #31
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2207      	movs	r2, #7
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006160:	2300      	movs	r3, #0
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	e00f      	b.n	8006186 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d102      	bne.n	8006174 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800616e:	2301      	movs	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	e008      	b.n	8006186 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800617c:	2301      	movs	r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
 8006180:	e001      	b.n	8006186 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	400a      	ands	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6819      	ldr	r1, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	22c0      	movs	r2, #192	; 0xc0
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43da      	mvns	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	400a      	ands	r2, r1
 8006226:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006238:	4618      	mov	r0, r3
 800623a:	3728      	adds	r7, #40	; 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20008000 	.word	0x20008000

08006244 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe8b 	bl	8005f6e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	711a      	strb	r2, [r3, #4]
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fe84 	bl	8005f82 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f043 0204 	orr.w	r2, r3, #4
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fe7a 	bl	8005f96 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	711a      	strb	r2, [r3, #4]
}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff ffce 	bl	80062b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	711a      	strb	r2, [r3, #4]
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ffc7 	bl	80062c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f043 0204 	orr.w	r2, r3, #4
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ffbd 	bl	80062d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	711a      	strb	r2, [r3, #4]
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006374:	f7fd fed2 	bl	800411c <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e316      	b.n	80069b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a66      	ldr	r2, [pc, #408]	; (8006524 <HAL_DMA_Init+0x1b8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04a      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a65      	ldr	r2, [pc, #404]	; (8006528 <HAL_DMA_Init+0x1bc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d045      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a63      	ldr	r2, [pc, #396]	; (800652c <HAL_DMA_Init+0x1c0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d040      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a62      	ldr	r2, [pc, #392]	; (8006530 <HAL_DMA_Init+0x1c4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d03b      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a60      	ldr	r2, [pc, #384]	; (8006534 <HAL_DMA_Init+0x1c8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d036      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a5f      	ldr	r2, [pc, #380]	; (8006538 <HAL_DMA_Init+0x1cc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d031      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a5d      	ldr	r2, [pc, #372]	; (800653c <HAL_DMA_Init+0x1d0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02c      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a5c      	ldr	r2, [pc, #368]	; (8006540 <HAL_DMA_Init+0x1d4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d027      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a5a      	ldr	r2, [pc, #360]	; (8006544 <HAL_DMA_Init+0x1d8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a59      	ldr	r2, [pc, #356]	; (8006548 <HAL_DMA_Init+0x1dc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01d      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a57      	ldr	r2, [pc, #348]	; (800654c <HAL_DMA_Init+0x1e0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a56      	ldr	r2, [pc, #344]	; (8006550 <HAL_DMA_Init+0x1e4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a54      	ldr	r2, [pc, #336]	; (8006554 <HAL_DMA_Init+0x1e8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a53      	ldr	r2, [pc, #332]	; (8006558 <HAL_DMA_Init+0x1ec>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a51      	ldr	r2, [pc, #324]	; (800655c <HAL_DMA_Init+0x1f0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_DMA_Init+0xb8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a50      	ldr	r2, [pc, #320]	; (8006560 <HAL_DMA_Init+0x1f4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <HAL_DMA_Init+0xbc>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_DMA_Init+0xbe>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 813b 	beq.w	80066a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a37      	ldr	r2, [pc, #220]	; (8006524 <HAL_DMA_Init+0x1b8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d04a      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a36      	ldr	r2, [pc, #216]	; (8006528 <HAL_DMA_Init+0x1bc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d045      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a34      	ldr	r2, [pc, #208]	; (800652c <HAL_DMA_Init+0x1c0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d040      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a33      	ldr	r2, [pc, #204]	; (8006530 <HAL_DMA_Init+0x1c4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d03b      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a31      	ldr	r2, [pc, #196]	; (8006534 <HAL_DMA_Init+0x1c8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d036      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a30      	ldr	r2, [pc, #192]	; (8006538 <HAL_DMA_Init+0x1cc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d031      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2e      	ldr	r2, [pc, #184]	; (800653c <HAL_DMA_Init+0x1d0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d02c      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <HAL_DMA_Init+0x1d4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d027      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2b      	ldr	r2, [pc, #172]	; (8006544 <HAL_DMA_Init+0x1d8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2a      	ldr	r2, [pc, #168]	; (8006548 <HAL_DMA_Init+0x1dc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d01d      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a28      	ldr	r2, [pc, #160]	; (800654c <HAL_DMA_Init+0x1e0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a27      	ldr	r2, [pc, #156]	; (8006550 <HAL_DMA_Init+0x1e4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a25      	ldr	r2, [pc, #148]	; (8006554 <HAL_DMA_Init+0x1e8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a24      	ldr	r2, [pc, #144]	; (8006558 <HAL_DMA_Init+0x1ec>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a22      	ldr	r2, [pc, #136]	; (800655c <HAL_DMA_Init+0x1f0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_DMA_Init+0x174>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a21      	ldr	r2, [pc, #132]	; (8006560 <HAL_DMA_Init+0x1f4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <HAL_DMA_Init+0x186>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e007      	b.n	8006502 <HAL_DMA_Init+0x196>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006502:	e02f      	b.n	8006564 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006504:	f7fd fe0a 	bl	800411c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b05      	cmp	r3, #5
 8006510:	d928      	bls.n	8006564 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2203      	movs	r2, #3
 800651c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e246      	b.n	80069b2 <HAL_DMA_Init+0x646>
 8006524:	40020010 	.word	0x40020010
 8006528:	40020028 	.word	0x40020028
 800652c:	40020040 	.word	0x40020040
 8006530:	40020058 	.word	0x40020058
 8006534:	40020070 	.word	0x40020070
 8006538:	40020088 	.word	0x40020088
 800653c:	400200a0 	.word	0x400200a0
 8006540:	400200b8 	.word	0x400200b8
 8006544:	40020410 	.word	0x40020410
 8006548:	40020428 	.word	0x40020428
 800654c:	40020440 	.word	0x40020440
 8006550:	40020458 	.word	0x40020458
 8006554:	40020470 	.word	0x40020470
 8006558:	40020488 	.word	0x40020488
 800655c:	400204a0 	.word	0x400204a0
 8006560:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c8      	bne.n	8006504 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4b83      	ldr	r3, [pc, #524]	; (800678c <HAL_DMA_Init+0x420>)
 800657e:	4013      	ands	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800658a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006596:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d107      	bne.n	80065c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	4313      	orrs	r3, r2
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80065c8:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_DMA_Init+0x424>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b71      	ldr	r3, [pc, #452]	; (8006794 <HAL_DMA_Init+0x428>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d4:	d328      	bcc.n	8006628 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b28      	cmp	r3, #40	; 0x28
 80065dc:	d903      	bls.n	80065e6 <HAL_DMA_Init+0x27a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b2e      	cmp	r3, #46	; 0x2e
 80065e4:	d917      	bls.n	8006616 <HAL_DMA_Init+0x2aa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b3e      	cmp	r3, #62	; 0x3e
 80065ec:	d903      	bls.n	80065f6 <HAL_DMA_Init+0x28a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b42      	cmp	r3, #66	; 0x42
 80065f4:	d90f      	bls.n	8006616 <HAL_DMA_Init+0x2aa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b46      	cmp	r3, #70	; 0x46
 80065fc:	d903      	bls.n	8006606 <HAL_DMA_Init+0x29a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b48      	cmp	r3, #72	; 0x48
 8006604:	d907      	bls.n	8006616 <HAL_DMA_Init+0x2aa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b4e      	cmp	r3, #78	; 0x4e
 800660c:	d905      	bls.n	800661a <HAL_DMA_Init+0x2ae>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b52      	cmp	r3, #82	; 0x52
 8006614:	d801      	bhi.n	800661a <HAL_DMA_Init+0x2ae>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <HAL_DMA_Init+0x2b0>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006626:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b04      	cmp	r3, #4
 8006650:	d117      	bne.n	8006682 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00e      	beq.n	8006682 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f002 fb3f 	bl	8008ce8 <DMA_CheckFifoParam>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e197      	b.n	80069b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f002 fa7a 	bl	8008b84 <DMA_CalcBaseAndBitshift>
 8006690:	4603      	mov	r3, r0
 8006692:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	223f      	movs	r2, #63	; 0x3f
 800669e:	409a      	lsls	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	e0cd      	b.n	8006842 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <HAL_DMA_Init+0x42c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a39      	ldr	r2, [pc, #228]	; (800679c <HAL_DMA_Init+0x430>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a38      	ldr	r2, [pc, #224]	; (80067a0 <HAL_DMA_Init+0x434>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <HAL_DMA_Init+0x438>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a35      	ldr	r2, [pc, #212]	; (80067a8 <HAL_DMA_Init+0x43c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a33      	ldr	r2, [pc, #204]	; (80067ac <HAL_DMA_Init+0x440>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <HAL_DMA_Init+0x444>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_Init+0x38a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <HAL_DMA_Init+0x448>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_DMA_Init+0x38e>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <HAL_DMA_Init+0x390>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8097 	beq.w	8006830 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a24      	ldr	r2, [pc, #144]	; (8006798 <HAL_DMA_Init+0x42c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d021      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_DMA_Init+0x430>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01c      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_DMA_Init+0x434>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d017      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_DMA_Init+0x438>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d012      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_DMA_Init+0x43c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00d      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_DMA_Init+0x440>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d008      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_DMA_Init+0x444>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <HAL_DMA_Init+0x3e4>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_DMA_Init+0x448>)
 800674e:	4293      	cmp	r3, r2
 8006750:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <HAL_DMA_Init+0x44c>)
 800676e:	4013      	ands	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d020      	beq.n	80067bc <HAL_DMA_Init+0x450>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b80      	cmp	r3, #128	; 0x80
 8006780:	d102      	bne.n	8006788 <HAL_DMA_Init+0x41c>
 8006782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006786:	e01a      	b.n	80067be <HAL_DMA_Init+0x452>
 8006788:	2300      	movs	r3, #0
 800678a:	e018      	b.n	80067be <HAL_DMA_Init+0x452>
 800678c:	fe10803f 	.word	0xfe10803f
 8006790:	5c001000 	.word	0x5c001000
 8006794:	ffff0000 	.word	0xffff0000
 8006798:	58025408 	.word	0x58025408
 800679c:	5802541c 	.word	0x5802541c
 80067a0:	58025430 	.word	0x58025430
 80067a4:	58025444 	.word	0x58025444
 80067a8:	58025458 	.word	0x58025458
 80067ac:	5802546c 	.word	0x5802546c
 80067b0:	58025480 	.word	0x58025480
 80067b4:	58025494 	.word	0x58025494
 80067b8:	fffe000f 	.word	0xfffe000f
 80067bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68d2      	ldr	r2, [r2, #12]
 80067c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80067cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80067d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	4b6e      	ldr	r3, [pc, #440]	; (80069bc <HAL_DMA_Init+0x650>)
 8006804:	4413      	add	r3, r2
 8006806:	4a6e      	ldr	r2, [pc, #440]	; (80069c0 <HAL_DMA_Init+0x654>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f002 f9b5 	bl	8008b84 <DMA_CalcBaseAndBitshift>
 800681a:	4603      	mov	r3, r0
 800681c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2201      	movs	r2, #1
 8006828:	409a      	lsls	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	e008      	b.n	8006842 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2203      	movs	r2, #3
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0b7      	b.n	80069b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a5f      	ldr	r2, [pc, #380]	; (80069c4 <HAL_DMA_Init+0x658>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d072      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5d      	ldr	r2, [pc, #372]	; (80069c8 <HAL_DMA_Init+0x65c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d06d      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a5c      	ldr	r2, [pc, #368]	; (80069cc <HAL_DMA_Init+0x660>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d068      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <HAL_DMA_Init+0x664>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d063      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a59      	ldr	r2, [pc, #356]	; (80069d4 <HAL_DMA_Init+0x668>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d05e      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a57      	ldr	r2, [pc, #348]	; (80069d8 <HAL_DMA_Init+0x66c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d059      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a56      	ldr	r2, [pc, #344]	; (80069dc <HAL_DMA_Init+0x670>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d054      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a54      	ldr	r2, [pc, #336]	; (80069e0 <HAL_DMA_Init+0x674>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04f      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a53      	ldr	r2, [pc, #332]	; (80069e4 <HAL_DMA_Init+0x678>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a51      	ldr	r2, [pc, #324]	; (80069e8 <HAL_DMA_Init+0x67c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a50      	ldr	r2, [pc, #320]	; (80069ec <HAL_DMA_Init+0x680>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a4e      	ldr	r2, [pc, #312]	; (80069f0 <HAL_DMA_Init+0x684>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a4d      	ldr	r2, [pc, #308]	; (80069f4 <HAL_DMA_Init+0x688>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a4b      	ldr	r2, [pc, #300]	; (80069f8 <HAL_DMA_Init+0x68c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a4a      	ldr	r2, [pc, #296]	; (80069fc <HAL_DMA_Init+0x690>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a48      	ldr	r2, [pc, #288]	; (8006a00 <HAL_DMA_Init+0x694>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a47      	ldr	r2, [pc, #284]	; (8006a04 <HAL_DMA_Init+0x698>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a45      	ldr	r2, [pc, #276]	; (8006a08 <HAL_DMA_Init+0x69c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a44      	ldr	r2, [pc, #272]	; (8006a0c <HAL_DMA_Init+0x6a0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a42      	ldr	r2, [pc, #264]	; (8006a10 <HAL_DMA_Init+0x6a4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a41      	ldr	r2, [pc, #260]	; (8006a14 <HAL_DMA_Init+0x6a8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a3f      	ldr	r2, [pc, #252]	; (8006a18 <HAL_DMA_Init+0x6ac>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a3e      	ldr	r2, [pc, #248]	; (8006a1c <HAL_DMA_Init+0x6b0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_Init+0x5c6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a3c      	ldr	r2, [pc, #240]	; (8006a20 <HAL_DMA_Init+0x6b4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_DMA_Init+0x5ca>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_DMA_Init+0x5cc>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d032      	beq.n	80069a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fa4f 	bl	8008de0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b80      	cmp	r3, #128	; 0x80
 8006948:	d102      	bne.n	8006950 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <HAL_DMA_Init+0x624>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b08      	cmp	r3, #8
 8006974:	d80c      	bhi.n	8006990 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 facc 	bl	8008f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	e008      	b.n	80069a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	a7fdabf8 	.word	0xa7fdabf8
 80069c0:	cccccccd 	.word	0xcccccccd
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8
 8006a04:	58025408 	.word	0x58025408
 8006a08:	5802541c 	.word	0x5802541c
 8006a0c:	58025430 	.word	0x58025430
 8006a10:	58025444 	.word	0x58025444
 8006a14:	58025458 	.word	0x58025458
 8006a18:	5802546c 	.word	0x5802546c
 8006a1c:	58025480 	.word	0x58025480
 8006a20:	58025494 	.word	0x58025494

08006a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e226      	b.n	8006e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_DMA_Start_IT+0x2a>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e21f      	b.n	8006e8e <HAL_DMA_Start_IT+0x46a>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	f040 820a 	bne.w	8006e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a68      	ldr	r2, [pc, #416]	; (8006c18 <HAL_DMA_Start_IT+0x1f4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d04a      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a66      	ldr	r2, [pc, #408]	; (8006c1c <HAL_DMA_Start_IT+0x1f8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d045      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a65      	ldr	r2, [pc, #404]	; (8006c20 <HAL_DMA_Start_IT+0x1fc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d040      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a63      	ldr	r2, [pc, #396]	; (8006c24 <HAL_DMA_Start_IT+0x200>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d03b      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a62      	ldr	r2, [pc, #392]	; (8006c28 <HAL_DMA_Start_IT+0x204>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d036      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a60      	ldr	r2, [pc, #384]	; (8006c2c <HAL_DMA_Start_IT+0x208>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d031      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a5f      	ldr	r2, [pc, #380]	; (8006c30 <HAL_DMA_Start_IT+0x20c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d02c      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a5d      	ldr	r2, [pc, #372]	; (8006c34 <HAL_DMA_Start_IT+0x210>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d027      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a5c      	ldr	r2, [pc, #368]	; (8006c38 <HAL_DMA_Start_IT+0x214>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d022      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a5a      	ldr	r2, [pc, #360]	; (8006c3c <HAL_DMA_Start_IT+0x218>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01d      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a59      	ldr	r2, [pc, #356]	; (8006c40 <HAL_DMA_Start_IT+0x21c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a57      	ldr	r2, [pc, #348]	; (8006c44 <HAL_DMA_Start_IT+0x220>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a56      	ldr	r2, [pc, #344]	; (8006c48 <HAL_DMA_Start_IT+0x224>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a54      	ldr	r2, [pc, #336]	; (8006c4c <HAL_DMA_Start_IT+0x228>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a53      	ldr	r2, [pc, #332]	; (8006c50 <HAL_DMA_Start_IT+0x22c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_DMA_Start_IT+0xee>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a51      	ldr	r2, [pc, #324]	; (8006c54 <HAL_DMA_Start_IT+0x230>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d108      	bne.n	8006b24 <HAL_DMA_Start_IT+0x100>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e007      	b.n	8006b34 <HAL_DMA_Start_IT+0x110>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fe76 	bl	800882c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <HAL_DMA_Start_IT+0x1f4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04a      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a33      	ldr	r2, [pc, #204]	; (8006c1c <HAL_DMA_Start_IT+0x1f8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d045      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a31      	ldr	r2, [pc, #196]	; (8006c20 <HAL_DMA_Start_IT+0x1fc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d040      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a30      	ldr	r2, [pc, #192]	; (8006c24 <HAL_DMA_Start_IT+0x200>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d03b      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2e      	ldr	r2, [pc, #184]	; (8006c28 <HAL_DMA_Start_IT+0x204>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d036      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <HAL_DMA_Start_IT+0x208>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d031      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <HAL_DMA_Start_IT+0x20c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02c      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <HAL_DMA_Start_IT+0x210>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d027      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a28      	ldr	r2, [pc, #160]	; (8006c38 <HAL_DMA_Start_IT+0x214>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a27      	ldr	r2, [pc, #156]	; (8006c3c <HAL_DMA_Start_IT+0x218>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <HAL_DMA_Start_IT+0x21c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <HAL_DMA_Start_IT+0x220>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <HAL_DMA_Start_IT+0x224>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <HAL_DMA_Start_IT+0x228>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <HAL_DMA_Start_IT+0x22c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_DMA_Start_IT+0x1bc>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <HAL_DMA_Start_IT+0x230>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_DMA_Start_IT+0x1c0>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_DMA_Start_IT+0x1c2>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d036      	beq.n	8006c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 021e 	bic.w	r2, r3, #30
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0216 	orr.w	r2, r2, #22
 8006bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d03e      	beq.n	8006c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0208 	orr.w	r2, r2, #8
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e035      	b.n	8006c84 <HAL_DMA_Start_IT+0x260>
 8006c18:	40020010 	.word	0x40020010
 8006c1c:	40020028 	.word	0x40020028
 8006c20:	40020040 	.word	0x40020040
 8006c24:	40020058 	.word	0x40020058
 8006c28:	40020070 	.word	0x40020070
 8006c2c:	40020088 	.word	0x40020088
 8006c30:	400200a0 	.word	0x400200a0
 8006c34:	400200b8 	.word	0x400200b8
 8006c38:	40020410 	.word	0x40020410
 8006c3c:	40020428 	.word	0x40020428
 8006c40:	40020440 	.word	0x40020440
 8006c44:	40020458 	.word	0x40020458
 8006c48:	40020470 	.word	0x40020470
 8006c4c:	40020488 	.word	0x40020488
 8006c50:	400204a0 	.word	0x400204a0
 8006c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 020e 	bic.w	r2, r3, #14
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 020a 	orr.w	r2, r2, #10
 8006c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0204 	orr.w	r2, r2, #4
 8006c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a83      	ldr	r2, [pc, #524]	; (8006e98 <HAL_DMA_Start_IT+0x474>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d072      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a82      	ldr	r2, [pc, #520]	; (8006e9c <HAL_DMA_Start_IT+0x478>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d06d      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a80      	ldr	r2, [pc, #512]	; (8006ea0 <HAL_DMA_Start_IT+0x47c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d068      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a7f      	ldr	r2, [pc, #508]	; (8006ea4 <HAL_DMA_Start_IT+0x480>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d063      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7d      	ldr	r2, [pc, #500]	; (8006ea8 <HAL_DMA_Start_IT+0x484>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d05e      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7c      	ldr	r2, [pc, #496]	; (8006eac <HAL_DMA_Start_IT+0x488>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d059      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a7a      	ldr	r2, [pc, #488]	; (8006eb0 <HAL_DMA_Start_IT+0x48c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d054      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a79      	ldr	r2, [pc, #484]	; (8006eb4 <HAL_DMA_Start_IT+0x490>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d04f      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a77      	ldr	r2, [pc, #476]	; (8006eb8 <HAL_DMA_Start_IT+0x494>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d04a      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a76      	ldr	r2, [pc, #472]	; (8006ebc <HAL_DMA_Start_IT+0x498>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d045      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a74      	ldr	r2, [pc, #464]	; (8006ec0 <HAL_DMA_Start_IT+0x49c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d040      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a73      	ldr	r2, [pc, #460]	; (8006ec4 <HAL_DMA_Start_IT+0x4a0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d03b      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a71      	ldr	r2, [pc, #452]	; (8006ec8 <HAL_DMA_Start_IT+0x4a4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d036      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a70      	ldr	r2, [pc, #448]	; (8006ecc <HAL_DMA_Start_IT+0x4a8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d031      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6e      	ldr	r2, [pc, #440]	; (8006ed0 <HAL_DMA_Start_IT+0x4ac>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d02c      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6d      	ldr	r2, [pc, #436]	; (8006ed4 <HAL_DMA_Start_IT+0x4b0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d027      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a6b      	ldr	r2, [pc, #428]	; (8006ed8 <HAL_DMA_Start_IT+0x4b4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d022      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6a      	ldr	r2, [pc, #424]	; (8006edc <HAL_DMA_Start_IT+0x4b8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d01d      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a68      	ldr	r2, [pc, #416]	; (8006ee0 <HAL_DMA_Start_IT+0x4bc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d018      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a67      	ldr	r2, [pc, #412]	; (8006ee4 <HAL_DMA_Start_IT+0x4c0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a65      	ldr	r2, [pc, #404]	; (8006ee8 <HAL_DMA_Start_IT+0x4c4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00e      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a64      	ldr	r2, [pc, #400]	; (8006eec <HAL_DMA_Start_IT+0x4c8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d009      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a62      	ldr	r2, [pc, #392]	; (8006ef0 <HAL_DMA_Start_IT+0x4cc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_DMA_Start_IT+0x350>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a61      	ldr	r2, [pc, #388]	; (8006ef4 <HAL_DMA_Start_IT+0x4d0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d101      	bne.n	8006d78 <HAL_DMA_Start_IT+0x354>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_DMA_Start_IT+0x356>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01a      	beq.n	8006db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a37      	ldr	r2, [pc, #220]	; (8006e98 <HAL_DMA_Start_IT+0x474>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d04a      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a36      	ldr	r2, [pc, #216]	; (8006e9c <HAL_DMA_Start_IT+0x478>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d045      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <HAL_DMA_Start_IT+0x47c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d040      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a33      	ldr	r2, [pc, #204]	; (8006ea4 <HAL_DMA_Start_IT+0x480>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d03b      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a31      	ldr	r2, [pc, #196]	; (8006ea8 <HAL_DMA_Start_IT+0x484>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d036      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a30      	ldr	r2, [pc, #192]	; (8006eac <HAL_DMA_Start_IT+0x488>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d031      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2e      	ldr	r2, [pc, #184]	; (8006eb0 <HAL_DMA_Start_IT+0x48c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d02c      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <HAL_DMA_Start_IT+0x490>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_DMA_Start_IT+0x494>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <HAL_DMA_Start_IT+0x498>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <HAL_DMA_Start_IT+0x49c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a27      	ldr	r2, [pc, #156]	; (8006ec4 <HAL_DMA_Start_IT+0x4a0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <HAL_DMA_Start_IT+0x4a4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <HAL_DMA_Start_IT+0x4a8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_DMA_Start_IT+0x4ac>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_DMA_Start_IT+0x430>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <HAL_DMA_Start_IT+0x4b0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d108      	bne.n	8006e66 <HAL_DMA_Start_IT+0x442>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e012      	b.n	8006e8c <HAL_DMA_Start_IT+0x468>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e009      	b.n	8006e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8
 8006ed8:	58025408 	.word	0x58025408
 8006edc:	5802541c 	.word	0x5802541c
 8006ee0:	58025430 	.word	0x58025430
 8006ee4:	58025444 	.word	0x58025444
 8006ee8:	58025458 	.word	0x58025458
 8006eec:	5802546c 	.word	0x5802546c
 8006ef0:	58025480 	.word	0x58025480
 8006ef4:	58025494 	.word	0x58025494

08006ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006f00:	f7fd f90c 	bl	800411c <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e2dc      	b.n	80074ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d008      	beq.n	8006f2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e2cd      	b.n	80074ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a76      	ldr	r2, [pc, #472]	; (800710c <HAL_DMA_Abort+0x214>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d04a      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a74      	ldr	r2, [pc, #464]	; (8007110 <HAL_DMA_Abort+0x218>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d045      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a73      	ldr	r2, [pc, #460]	; (8007114 <HAL_DMA_Abort+0x21c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d040      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a71      	ldr	r2, [pc, #452]	; (8007118 <HAL_DMA_Abort+0x220>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d03b      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a70      	ldr	r2, [pc, #448]	; (800711c <HAL_DMA_Abort+0x224>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d036      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a6e      	ldr	r2, [pc, #440]	; (8007120 <HAL_DMA_Abort+0x228>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d031      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6d      	ldr	r2, [pc, #436]	; (8007124 <HAL_DMA_Abort+0x22c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d02c      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6b      	ldr	r2, [pc, #428]	; (8007128 <HAL_DMA_Abort+0x230>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d027      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6a      	ldr	r2, [pc, #424]	; (800712c <HAL_DMA_Abort+0x234>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a68      	ldr	r2, [pc, #416]	; (8007130 <HAL_DMA_Abort+0x238>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01d      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a67      	ldr	r2, [pc, #412]	; (8007134 <HAL_DMA_Abort+0x23c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a65      	ldr	r2, [pc, #404]	; (8007138 <HAL_DMA_Abort+0x240>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a64      	ldr	r2, [pc, #400]	; (800713c <HAL_DMA_Abort+0x244>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a62      	ldr	r2, [pc, #392]	; (8007140 <HAL_DMA_Abort+0x248>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a61      	ldr	r2, [pc, #388]	; (8007144 <HAL_DMA_Abort+0x24c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_DMA_Abort+0xd6>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5f      	ldr	r2, [pc, #380]	; (8007148 <HAL_DMA_Abort+0x250>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <HAL_DMA_Abort+0xda>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <HAL_DMA_Abort+0xdc>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d013      	beq.n	8007000 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 021e 	bic.w	r2, r2, #30
 8006fe6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e00a      	b.n	8007016 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 020e 	bic.w	r2, r2, #14
 800700e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3c      	ldr	r2, [pc, #240]	; (800710c <HAL_DMA_Abort+0x214>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d072      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3a      	ldr	r2, [pc, #232]	; (8007110 <HAL_DMA_Abort+0x218>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d06d      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a39      	ldr	r2, [pc, #228]	; (8007114 <HAL_DMA_Abort+0x21c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d068      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a37      	ldr	r2, [pc, #220]	; (8007118 <HAL_DMA_Abort+0x220>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d063      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a36      	ldr	r2, [pc, #216]	; (800711c <HAL_DMA_Abort+0x224>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d05e      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_DMA_Abort+0x228>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d059      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a33      	ldr	r2, [pc, #204]	; (8007124 <HAL_DMA_Abort+0x22c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d054      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a31      	ldr	r2, [pc, #196]	; (8007128 <HAL_DMA_Abort+0x230>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d04f      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a30      	ldr	r2, [pc, #192]	; (800712c <HAL_DMA_Abort+0x234>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d04a      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <HAL_DMA_Abort+0x238>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d045      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <HAL_DMA_Abort+0x23c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d040      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2b      	ldr	r2, [pc, #172]	; (8007138 <HAL_DMA_Abort+0x240>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d03b      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <HAL_DMA_Abort+0x244>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d036      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a28      	ldr	r2, [pc, #160]	; (8007140 <HAL_DMA_Abort+0x248>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d031      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a27      	ldr	r2, [pc, #156]	; (8007144 <HAL_DMA_Abort+0x24c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d02c      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a25      	ldr	r2, [pc, #148]	; (8007148 <HAL_DMA_Abort+0x250>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d027      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <HAL_DMA_Abort+0x254>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a22      	ldr	r2, [pc, #136]	; (8007150 <HAL_DMA_Abort+0x258>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <HAL_DMA_Abort+0x25c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_DMA_Abort+0x260>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_DMA_Abort+0x264>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <HAL_DMA_Abort+0x268>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <HAL_DMA_Abort+0x26c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_DMA_Abort+0x20e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a19      	ldr	r2, [pc, #100]	; (8007168 <HAL_DMA_Abort+0x270>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d132      	bne.n	800716c <HAL_DMA_Abort+0x274>
 8007106:	2301      	movs	r3, #1
 8007108:	e031      	b.n	800716e <HAL_DMA_Abort+0x276>
 800710a:	bf00      	nop
 800710c:	40020010 	.word	0x40020010
 8007110:	40020028 	.word	0x40020028
 8007114:	40020040 	.word	0x40020040
 8007118:	40020058 	.word	0x40020058
 800711c:	40020070 	.word	0x40020070
 8007120:	40020088 	.word	0x40020088
 8007124:	400200a0 	.word	0x400200a0
 8007128:	400200b8 	.word	0x400200b8
 800712c:	40020410 	.word	0x40020410
 8007130:	40020428 	.word	0x40020428
 8007134:	40020440 	.word	0x40020440
 8007138:	40020458 	.word	0x40020458
 800713c:	40020470 	.word	0x40020470
 8007140:	40020488 	.word	0x40020488
 8007144:	400204a0 	.word	0x400204a0
 8007148:	400204b8 	.word	0x400204b8
 800714c:	58025408 	.word	0x58025408
 8007150:	5802541c 	.word	0x5802541c
 8007154:	58025430 	.word	0x58025430
 8007158:	58025444 	.word	0x58025444
 800715c:	58025458 	.word	0x58025458
 8007160:	5802546c 	.word	0x5802546c
 8007164:	58025480 	.word	0x58025480
 8007168:	58025494 	.word	0x58025494
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007180:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6d      	ldr	r2, [pc, #436]	; (800733c <HAL_DMA_Abort+0x444>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a6b      	ldr	r2, [pc, #428]	; (8007340 <HAL_DMA_Abort+0x448>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a6a      	ldr	r2, [pc, #424]	; (8007344 <HAL_DMA_Abort+0x44c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a68      	ldr	r2, [pc, #416]	; (8007348 <HAL_DMA_Abort+0x450>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a67      	ldr	r2, [pc, #412]	; (800734c <HAL_DMA_Abort+0x454>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a65      	ldr	r2, [pc, #404]	; (8007350 <HAL_DMA_Abort+0x458>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a64      	ldr	r2, [pc, #400]	; (8007354 <HAL_DMA_Abort+0x45c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a62      	ldr	r2, [pc, #392]	; (8007358 <HAL_DMA_Abort+0x460>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a61      	ldr	r2, [pc, #388]	; (800735c <HAL_DMA_Abort+0x464>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5f      	ldr	r2, [pc, #380]	; (8007360 <HAL_DMA_Abort+0x468>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a5e      	ldr	r2, [pc, #376]	; (8007364 <HAL_DMA_Abort+0x46c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5c      	ldr	r2, [pc, #368]	; (8007368 <HAL_DMA_Abort+0x470>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5b      	ldr	r2, [pc, #364]	; (800736c <HAL_DMA_Abort+0x474>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a59      	ldr	r2, [pc, #356]	; (8007370 <HAL_DMA_Abort+0x478>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a58      	ldr	r2, [pc, #352]	; (8007374 <HAL_DMA_Abort+0x47c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_Abort+0x32a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a56      	ldr	r2, [pc, #344]	; (8007378 <HAL_DMA_Abort+0x480>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d108      	bne.n	8007234 <HAL_DMA_Abort+0x33c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e007      	b.n	8007244 <HAL_DMA_Abort+0x34c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007244:	e013      	b.n	800726e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007246:	f7fc ff69 	bl	800411c <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b05      	cmp	r3, #5
 8007252:	d90c      	bls.n	800726e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2203      	movs	r2, #3
 800725e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e12d      	b.n	80074ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e5      	bne.n	8007246 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2f      	ldr	r2, [pc, #188]	; (800733c <HAL_DMA_Abort+0x444>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d04a      	beq.n	800731a <HAL_DMA_Abort+0x422>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <HAL_DMA_Abort+0x448>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d045      	beq.n	800731a <HAL_DMA_Abort+0x422>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2c      	ldr	r2, [pc, #176]	; (8007344 <HAL_DMA_Abort+0x44c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d040      	beq.n	800731a <HAL_DMA_Abort+0x422>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <HAL_DMA_Abort+0x450>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d03b      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a29      	ldr	r2, [pc, #164]	; (800734c <HAL_DMA_Abort+0x454>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d036      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a27      	ldr	r2, [pc, #156]	; (8007350 <HAL_DMA_Abort+0x458>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d031      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a26      	ldr	r2, [pc, #152]	; (8007354 <HAL_DMA_Abort+0x45c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d02c      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a24      	ldr	r2, [pc, #144]	; (8007358 <HAL_DMA_Abort+0x460>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d027      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a23      	ldr	r2, [pc, #140]	; (800735c <HAL_DMA_Abort+0x464>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d022      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a21      	ldr	r2, [pc, #132]	; (8007360 <HAL_DMA_Abort+0x468>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01d      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <HAL_DMA_Abort+0x46c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d018      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_DMA_Abort+0x470>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_DMA_Abort+0x474>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <HAL_DMA_Abort+0x422>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <HAL_DMA_Abort+0x478>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_DMA_Abort+0x422>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <HAL_DMA_Abort+0x47c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_DMA_Abort+0x422>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a18      	ldr	r2, [pc, #96]	; (8007378 <HAL_DMA_Abort+0x480>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <HAL_DMA_Abort+0x426>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_DMA_Abort+0x428>
 800731e:	2300      	movs	r3, #0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d02b      	beq.n	800737c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	223f      	movs	r2, #63	; 0x3f
 8007334:	409a      	lsls	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	e02a      	b.n	8007392 <HAL_DMA_Abort+0x49a>
 800733c:	40020010 	.word	0x40020010
 8007340:	40020028 	.word	0x40020028
 8007344:	40020040 	.word	0x40020040
 8007348:	40020058 	.word	0x40020058
 800734c:	40020070 	.word	0x40020070
 8007350:	40020088 	.word	0x40020088
 8007354:	400200a0 	.word	0x400200a0
 8007358:	400200b8 	.word	0x400200b8
 800735c:	40020410 	.word	0x40020410
 8007360:	40020428 	.word	0x40020428
 8007364:	40020440 	.word	0x40020440
 8007368:	40020458 	.word	0x40020458
 800736c:	40020470 	.word	0x40020470
 8007370:	40020488 	.word	0x40020488
 8007374:	400204a0 	.word	0x400204a0
 8007378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007380:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2201      	movs	r2, #1
 800738c:	409a      	lsls	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a4f      	ldr	r2, [pc, #316]	; (80074d4 <HAL_DMA_Abort+0x5dc>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d072      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a4d      	ldr	r2, [pc, #308]	; (80074d8 <HAL_DMA_Abort+0x5e0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d06d      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a4c      	ldr	r2, [pc, #304]	; (80074dc <HAL_DMA_Abort+0x5e4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d068      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a4a      	ldr	r2, [pc, #296]	; (80074e0 <HAL_DMA_Abort+0x5e8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d063      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a49      	ldr	r2, [pc, #292]	; (80074e4 <HAL_DMA_Abort+0x5ec>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d05e      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a47      	ldr	r2, [pc, #284]	; (80074e8 <HAL_DMA_Abort+0x5f0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d059      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a46      	ldr	r2, [pc, #280]	; (80074ec <HAL_DMA_Abort+0x5f4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d054      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a44      	ldr	r2, [pc, #272]	; (80074f0 <HAL_DMA_Abort+0x5f8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d04f      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a43      	ldr	r2, [pc, #268]	; (80074f4 <HAL_DMA_Abort+0x5fc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d04a      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a41      	ldr	r2, [pc, #260]	; (80074f8 <HAL_DMA_Abort+0x600>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d045      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a40      	ldr	r2, [pc, #256]	; (80074fc <HAL_DMA_Abort+0x604>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d040      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a3e      	ldr	r2, [pc, #248]	; (8007500 <HAL_DMA_Abort+0x608>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d03b      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a3d      	ldr	r2, [pc, #244]	; (8007504 <HAL_DMA_Abort+0x60c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d036      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a3b      	ldr	r2, [pc, #236]	; (8007508 <HAL_DMA_Abort+0x610>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d031      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a3a      	ldr	r2, [pc, #232]	; (800750c <HAL_DMA_Abort+0x614>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d02c      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a38      	ldr	r2, [pc, #224]	; (8007510 <HAL_DMA_Abort+0x618>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d027      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a37      	ldr	r2, [pc, #220]	; (8007514 <HAL_DMA_Abort+0x61c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d022      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a35      	ldr	r2, [pc, #212]	; (8007518 <HAL_DMA_Abort+0x620>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01d      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a34      	ldr	r2, [pc, #208]	; (800751c <HAL_DMA_Abort+0x624>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a32      	ldr	r2, [pc, #200]	; (8007520 <HAL_DMA_Abort+0x628>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a31      	ldr	r2, [pc, #196]	; (8007524 <HAL_DMA_Abort+0x62c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2f      	ldr	r2, [pc, #188]	; (8007528 <HAL_DMA_Abort+0x630>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2e      	ldr	r2, [pc, #184]	; (800752c <HAL_DMA_Abort+0x634>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_DMA_Abort+0x58a>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <HAL_DMA_Abort+0x638>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_DMA_Abort+0x58e>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <HAL_DMA_Abort+0x590>
 8007486:	2300      	movs	r3, #0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d015      	beq.n	80074b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007494:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40020010 	.word	0x40020010
 80074d8:	40020028 	.word	0x40020028
 80074dc:	40020040 	.word	0x40020040
 80074e0:	40020058 	.word	0x40020058
 80074e4:	40020070 	.word	0x40020070
 80074e8:	40020088 	.word	0x40020088
 80074ec:	400200a0 	.word	0x400200a0
 80074f0:	400200b8 	.word	0x400200b8
 80074f4:	40020410 	.word	0x40020410
 80074f8:	40020428 	.word	0x40020428
 80074fc:	40020440 	.word	0x40020440
 8007500:	40020458 	.word	0x40020458
 8007504:	40020470 	.word	0x40020470
 8007508:	40020488 	.word	0x40020488
 800750c:	400204a0 	.word	0x400204a0
 8007510:	400204b8 	.word	0x400204b8
 8007514:	58025408 	.word	0x58025408
 8007518:	5802541c 	.word	0x5802541c
 800751c:	58025430 	.word	0x58025430
 8007520:	58025444 	.word	0x58025444
 8007524:	58025458 	.word	0x58025458
 8007528:	5802546c 	.word	0x5802546c
 800752c:	58025480 	.word	0x58025480
 8007530:	58025494 	.word	0x58025494

08007534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e237      	b.n	80079b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d004      	beq.n	800755c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2280      	movs	r2, #128	; 0x80
 8007556:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e22c      	b.n	80079b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a5c      	ldr	r2, [pc, #368]	; (80076d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d04a      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a5b      	ldr	r2, [pc, #364]	; (80076d8 <HAL_DMA_Abort_IT+0x1a4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d045      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a59      	ldr	r2, [pc, #356]	; (80076dc <HAL_DMA_Abort_IT+0x1a8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d040      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a58      	ldr	r2, [pc, #352]	; (80076e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d03b      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a56      	ldr	r2, [pc, #344]	; (80076e4 <HAL_DMA_Abort_IT+0x1b0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d036      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a55      	ldr	r2, [pc, #340]	; (80076e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d031      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a53      	ldr	r2, [pc, #332]	; (80076ec <HAL_DMA_Abort_IT+0x1b8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d02c      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a52      	ldr	r2, [pc, #328]	; (80076f0 <HAL_DMA_Abort_IT+0x1bc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d027      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a50      	ldr	r2, [pc, #320]	; (80076f4 <HAL_DMA_Abort_IT+0x1c0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d022      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a4f      	ldr	r2, [pc, #316]	; (80076f8 <HAL_DMA_Abort_IT+0x1c4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d01d      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a4d      	ldr	r2, [pc, #308]	; (80076fc <HAL_DMA_Abort_IT+0x1c8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a4c      	ldr	r2, [pc, #304]	; (8007700 <HAL_DMA_Abort_IT+0x1cc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d013      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a4a      	ldr	r2, [pc, #296]	; (8007704 <HAL_DMA_Abort_IT+0x1d0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a49      	ldr	r2, [pc, #292]	; (8007708 <HAL_DMA_Abort_IT+0x1d4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a47      	ldr	r2, [pc, #284]	; (800770c <HAL_DMA_Abort_IT+0x1d8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_DMA_Abort_IT+0xc8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a46      	ldr	r2, [pc, #280]	; (8007710 <HAL_DMA_Abort_IT+0x1dc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d101      	bne.n	8007600 <HAL_DMA_Abort_IT+0xcc>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <HAL_DMA_Abort_IT+0xce>
 8007600:	2300      	movs	r3, #0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8086 	beq.w	8007714 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2204      	movs	r2, #4
 800760c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d04a      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2e      	ldr	r2, [pc, #184]	; (80076d8 <HAL_DMA_Abort_IT+0x1a4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d045      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <HAL_DMA_Abort_IT+0x1a8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d040      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2b      	ldr	r2, [pc, #172]	; (80076e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d03b      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a29      	ldr	r2, [pc, #164]	; (80076e4 <HAL_DMA_Abort_IT+0x1b0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d036      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a28      	ldr	r2, [pc, #160]	; (80076e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d031      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a26      	ldr	r2, [pc, #152]	; (80076ec <HAL_DMA_Abort_IT+0x1b8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d02c      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <HAL_DMA_Abort_IT+0x1bc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d027      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a23      	ldr	r2, [pc, #140]	; (80076f4 <HAL_DMA_Abort_IT+0x1c0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d022      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a22      	ldr	r2, [pc, #136]	; (80076f8 <HAL_DMA_Abort_IT+0x1c4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d01d      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a20      	ldr	r2, [pc, #128]	; (80076fc <HAL_DMA_Abort_IT+0x1c8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d018      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <HAL_DMA_Abort_IT+0x1cc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d013      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <HAL_DMA_Abort_IT+0x1d0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00e      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <HAL_DMA_Abort_IT+0x1d4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d009      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1a      	ldr	r2, [pc, #104]	; (800770c <HAL_DMA_Abort_IT+0x1d8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x17c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a19      	ldr	r2, [pc, #100]	; (8007710 <HAL_DMA_Abort_IT+0x1dc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d108      	bne.n	80076c2 <HAL_DMA_Abort_IT+0x18e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e178      	b.n	80079b4 <HAL_DMA_Abort_IT+0x480>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e16f      	b.n	80079b4 <HAL_DMA_Abort_IT+0x480>
 80076d4:	40020010 	.word	0x40020010
 80076d8:	40020028 	.word	0x40020028
 80076dc:	40020040 	.word	0x40020040
 80076e0:	40020058 	.word	0x40020058
 80076e4:	40020070 	.word	0x40020070
 80076e8:	40020088 	.word	0x40020088
 80076ec:	400200a0 	.word	0x400200a0
 80076f0:	400200b8 	.word	0x400200b8
 80076f4:	40020410 	.word	0x40020410
 80076f8:	40020428 	.word	0x40020428
 80076fc:	40020440 	.word	0x40020440
 8007700:	40020458 	.word	0x40020458
 8007704:	40020470 	.word	0x40020470
 8007708:	40020488 	.word	0x40020488
 800770c:	400204a0 	.word	0x400204a0
 8007710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 020e 	bic.w	r2, r2, #14
 8007722:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a6c      	ldr	r2, [pc, #432]	; (80078dc <HAL_DMA_Abort_IT+0x3a8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d04a      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6b      	ldr	r2, [pc, #428]	; (80078e0 <HAL_DMA_Abort_IT+0x3ac>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d045      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a69      	ldr	r2, [pc, #420]	; (80078e4 <HAL_DMA_Abort_IT+0x3b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d040      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a68      	ldr	r2, [pc, #416]	; (80078e8 <HAL_DMA_Abort_IT+0x3b4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d03b      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a66      	ldr	r2, [pc, #408]	; (80078ec <HAL_DMA_Abort_IT+0x3b8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d036      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <HAL_DMA_Abort_IT+0x3bc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d031      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a63      	ldr	r2, [pc, #396]	; (80078f4 <HAL_DMA_Abort_IT+0x3c0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d02c      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a62      	ldr	r2, [pc, #392]	; (80078f8 <HAL_DMA_Abort_IT+0x3c4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d027      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a60      	ldr	r2, [pc, #384]	; (80078fc <HAL_DMA_Abort_IT+0x3c8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d022      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a5f      	ldr	r2, [pc, #380]	; (8007900 <HAL_DMA_Abort_IT+0x3cc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d01d      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a5d      	ldr	r2, [pc, #372]	; (8007904 <HAL_DMA_Abort_IT+0x3d0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d018      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a5c      	ldr	r2, [pc, #368]	; (8007908 <HAL_DMA_Abort_IT+0x3d4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5a      	ldr	r2, [pc, #360]	; (800790c <HAL_DMA_Abort_IT+0x3d8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00e      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a59      	ldr	r2, [pc, #356]	; (8007910 <HAL_DMA_Abort_IT+0x3dc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d009      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a57      	ldr	r2, [pc, #348]	; (8007914 <HAL_DMA_Abort_IT+0x3e0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d004      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x290>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a56      	ldr	r2, [pc, #344]	; (8007918 <HAL_DMA_Abort_IT+0x3e4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d108      	bne.n	80077d6 <HAL_DMA_Abort_IT+0x2a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e007      	b.n	80077e6 <HAL_DMA_Abort_IT+0x2b2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3c      	ldr	r2, [pc, #240]	; (80078dc <HAL_DMA_Abort_IT+0x3a8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d072      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a3a      	ldr	r2, [pc, #232]	; (80078e0 <HAL_DMA_Abort_IT+0x3ac>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d06d      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a39      	ldr	r2, [pc, #228]	; (80078e4 <HAL_DMA_Abort_IT+0x3b0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d068      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a37      	ldr	r2, [pc, #220]	; (80078e8 <HAL_DMA_Abort_IT+0x3b4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d063      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a36      	ldr	r2, [pc, #216]	; (80078ec <HAL_DMA_Abort_IT+0x3b8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d05e      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a34      	ldr	r2, [pc, #208]	; (80078f0 <HAL_DMA_Abort_IT+0x3bc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d059      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a33      	ldr	r2, [pc, #204]	; (80078f4 <HAL_DMA_Abort_IT+0x3c0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d054      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a31      	ldr	r2, [pc, #196]	; (80078f8 <HAL_DMA_Abort_IT+0x3c4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d04f      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a30      	ldr	r2, [pc, #192]	; (80078fc <HAL_DMA_Abort_IT+0x3c8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a2e      	ldr	r2, [pc, #184]	; (8007900 <HAL_DMA_Abort_IT+0x3cc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a2d      	ldr	r2, [pc, #180]	; (8007904 <HAL_DMA_Abort_IT+0x3d0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2b      	ldr	r2, [pc, #172]	; (8007908 <HAL_DMA_Abort_IT+0x3d4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a2a      	ldr	r2, [pc, #168]	; (800790c <HAL_DMA_Abort_IT+0x3d8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a28      	ldr	r2, [pc, #160]	; (8007910 <HAL_DMA_Abort_IT+0x3dc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a27      	ldr	r2, [pc, #156]	; (8007914 <HAL_DMA_Abort_IT+0x3e0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a25      	ldr	r2, [pc, #148]	; (8007918 <HAL_DMA_Abort_IT+0x3e4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a24      	ldr	r2, [pc, #144]	; (800791c <HAL_DMA_Abort_IT+0x3e8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a22      	ldr	r2, [pc, #136]	; (8007920 <HAL_DMA_Abort_IT+0x3ec>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_DMA_Abort_IT+0x3f0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1f      	ldr	r2, [pc, #124]	; (8007928 <HAL_DMA_Abort_IT+0x3f4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_DMA_Abort_IT+0x3f8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <HAL_DMA_Abort_IT+0x3fc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_DMA_Abort_IT+0x400>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x3a2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a19      	ldr	r2, [pc, #100]	; (8007938 <HAL_DMA_Abort_IT+0x404>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d132      	bne.n	800793c <HAL_DMA_Abort_IT+0x408>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e031      	b.n	800793e <HAL_DMA_Abort_IT+0x40a>
 80078da:	bf00      	nop
 80078dc:	40020010 	.word	0x40020010
 80078e0:	40020028 	.word	0x40020028
 80078e4:	40020040 	.word	0x40020040
 80078e8:	40020058 	.word	0x40020058
 80078ec:	40020070 	.word	0x40020070
 80078f0:	40020088 	.word	0x40020088
 80078f4:	400200a0 	.word	0x400200a0
 80078f8:	400200b8 	.word	0x400200b8
 80078fc:	40020410 	.word	0x40020410
 8007900:	40020428 	.word	0x40020428
 8007904:	40020440 	.word	0x40020440
 8007908:	40020458 	.word	0x40020458
 800790c:	40020470 	.word	0x40020470
 8007910:	40020488 	.word	0x40020488
 8007914:	400204a0 	.word	0x400204a0
 8007918:	400204b8 	.word	0x400204b8
 800791c:	58025408 	.word	0x58025408
 8007920:	5802541c 	.word	0x5802541c
 8007924:	58025430 	.word	0x58025430
 8007928:	58025444 	.word	0x58025444
 800792c:	58025458 	.word	0x58025458
 8007930:	5802546c 	.word	0x5802546c
 8007934:	58025480 	.word	0x58025480
 8007938:	58025494 	.word	0x58025494
 800793c:	2300      	movs	r3, #0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d028      	beq.n	8007994 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007950:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007970:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007988:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007992:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop

080079c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80079cc:	4b67      	ldr	r3, [pc, #412]	; (8007b6c <HAL_DMA_IRQHandler+0x1ac>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a67      	ldr	r2, [pc, #412]	; (8007b70 <HAL_DMA_IRQHandler+0x1b0>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	0a9b      	lsrs	r3, r3, #10
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a5f      	ldr	r2, [pc, #380]	; (8007b74 <HAL_DMA_IRQHandler+0x1b4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d04a      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5d      	ldr	r2, [pc, #372]	; (8007b78 <HAL_DMA_IRQHandler+0x1b8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d045      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a5c      	ldr	r2, [pc, #368]	; (8007b7c <HAL_DMA_IRQHandler+0x1bc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d040      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a5a      	ldr	r2, [pc, #360]	; (8007b80 <HAL_DMA_IRQHandler+0x1c0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d03b      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a59      	ldr	r2, [pc, #356]	; (8007b84 <HAL_DMA_IRQHandler+0x1c4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d036      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a57      	ldr	r2, [pc, #348]	; (8007b88 <HAL_DMA_IRQHandler+0x1c8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d031      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a56      	ldr	r2, [pc, #344]	; (8007b8c <HAL_DMA_IRQHandler+0x1cc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d02c      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a54      	ldr	r2, [pc, #336]	; (8007b90 <HAL_DMA_IRQHandler+0x1d0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d027      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a53      	ldr	r2, [pc, #332]	; (8007b94 <HAL_DMA_IRQHandler+0x1d4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d022      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a51      	ldr	r2, [pc, #324]	; (8007b98 <HAL_DMA_IRQHandler+0x1d8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d01d      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a50      	ldr	r2, [pc, #320]	; (8007b9c <HAL_DMA_IRQHandler+0x1dc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d018      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4e      	ldr	r2, [pc, #312]	; (8007ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a4d      	ldr	r2, [pc, #308]	; (8007ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00e      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d009      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a4a      	ldr	r2, [pc, #296]	; (8007bac <HAL_DMA_IRQHandler+0x1ec>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d004      	beq.n	8007a92 <HAL_DMA_IRQHandler+0xd2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a48      	ldr	r2, [pc, #288]	; (8007bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d101      	bne.n	8007a96 <HAL_DMA_IRQHandler+0xd6>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <HAL_DMA_IRQHandler+0xd8>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 842b 	beq.w	80082f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80a2 	beq.w	8007bf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a2e      	ldr	r2, [pc, #184]	; (8007b74 <HAL_DMA_IRQHandler+0x1b4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d04a      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2d      	ldr	r2, [pc, #180]	; (8007b78 <HAL_DMA_IRQHandler+0x1b8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d045      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2b      	ldr	r2, [pc, #172]	; (8007b7c <HAL_DMA_IRQHandler+0x1bc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d040      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2a      	ldr	r2, [pc, #168]	; (8007b80 <HAL_DMA_IRQHandler+0x1c0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d03b      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <HAL_DMA_IRQHandler+0x1c4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d036      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <HAL_DMA_IRQHandler+0x1c8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d031      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a25      	ldr	r2, [pc, #148]	; (8007b8c <HAL_DMA_IRQHandler+0x1cc>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d02c      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <HAL_DMA_IRQHandler+0x1d0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d027      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_DMA_IRQHandler+0x1d4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d022      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_DMA_IRQHandler+0x1d8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d01d      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1f      	ldr	r2, [pc, #124]	; (8007b9c <HAL_DMA_IRQHandler+0x1dc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d018      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00e      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d009      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <HAL_DMA_IRQHandler+0x1ec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x194>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d12f      	bne.n	8007bb4 <HAL_DMA_IRQHandler+0x1f4>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	2300      	moveq	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	e02e      	b.n	8007bc8 <HAL_DMA_IRQHandler+0x208>
 8007b6a:	bf00      	nop
 8007b6c:	24000084 	.word	0x24000084
 8007b70:	1b4e81b5 	.word	0x1b4e81b5
 8007b74:	40020010 	.word	0x40020010
 8007b78:	40020028 	.word	0x40020028
 8007b7c:	40020040 	.word	0x40020040
 8007b80:	40020058 	.word	0x40020058
 8007b84:	40020070 	.word	0x40020070
 8007b88:	40020088 	.word	0x40020088
 8007b8c:	400200a0 	.word	0x400200a0
 8007b90:	400200b8 	.word	0x400200b8
 8007b94:	40020410 	.word	0x40020410
 8007b98:	40020428 	.word	0x40020428
 8007b9c:	40020440 	.word	0x40020440
 8007ba0:	40020458 	.word	0x40020458
 8007ba4:	40020470 	.word	0x40020470
 8007ba8:	40020488 	.word	0x40020488
 8007bac:	400204a0 	.word	0x400204a0
 8007bb0:	400204b8 	.word	0x400204b8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d015      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0204 	bic.w	r2, r2, #4
 8007bda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2208      	movs	r2, #8
 8007be6:	409a      	lsls	r2, r3
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	f043 0201 	orr.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d06e      	beq.n	8007cec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a69      	ldr	r2, [pc, #420]	; (8007db8 <HAL_DMA_IRQHandler+0x3f8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d04a      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a67      	ldr	r2, [pc, #412]	; (8007dbc <HAL_DMA_IRQHandler+0x3fc>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d045      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a66      	ldr	r2, [pc, #408]	; (8007dc0 <HAL_DMA_IRQHandler+0x400>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d040      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a64      	ldr	r2, [pc, #400]	; (8007dc4 <HAL_DMA_IRQHandler+0x404>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d03b      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a63      	ldr	r2, [pc, #396]	; (8007dc8 <HAL_DMA_IRQHandler+0x408>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d036      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a61      	ldr	r2, [pc, #388]	; (8007dcc <HAL_DMA_IRQHandler+0x40c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d031      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a60      	ldr	r2, [pc, #384]	; (8007dd0 <HAL_DMA_IRQHandler+0x410>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d02c      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a5e      	ldr	r2, [pc, #376]	; (8007dd4 <HAL_DMA_IRQHandler+0x414>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d027      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a5d      	ldr	r2, [pc, #372]	; (8007dd8 <HAL_DMA_IRQHandler+0x418>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d022      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5b      	ldr	r2, [pc, #364]	; (8007ddc <HAL_DMA_IRQHandler+0x41c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d01d      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a5a      	ldr	r2, [pc, #360]	; (8007de0 <HAL_DMA_IRQHandler+0x420>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d018      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a58      	ldr	r2, [pc, #352]	; (8007de4 <HAL_DMA_IRQHandler+0x424>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a57      	ldr	r2, [pc, #348]	; (8007de8 <HAL_DMA_IRQHandler+0x428>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00e      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a55      	ldr	r2, [pc, #340]	; (8007dec <HAL_DMA_IRQHandler+0x42c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a54      	ldr	r2, [pc, #336]	; (8007df0 <HAL_DMA_IRQHandler+0x430>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_DMA_IRQHandler+0x2ee>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a52      	ldr	r2, [pc, #328]	; (8007df4 <HAL_DMA_IRQHandler+0x434>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d10a      	bne.n	8007cc4 <HAL_DMA_IRQHandler+0x304>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf14      	ite	ne
 8007cbc:	2301      	movne	r3, #1
 8007cbe:	2300      	moveq	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	e003      	b.n	8007ccc <HAL_DMA_IRQHandler+0x30c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	2201      	movs	r2, #1
 8007cda:	409a      	lsls	r2, r3
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	f043 0202 	orr.w	r2, r3, #2
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	409a      	lsls	r2, r3
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 808f 	beq.w	8007e20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a2c      	ldr	r2, [pc, #176]	; (8007db8 <HAL_DMA_IRQHandler+0x3f8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d04a      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <HAL_DMA_IRQHandler+0x3fc>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d045      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a29      	ldr	r2, [pc, #164]	; (8007dc0 <HAL_DMA_IRQHandler+0x400>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d040      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <HAL_DMA_IRQHandler+0x404>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d03b      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <HAL_DMA_IRQHandler+0x408>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d036      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a24      	ldr	r2, [pc, #144]	; (8007dcc <HAL_DMA_IRQHandler+0x40c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d031      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a23      	ldr	r2, [pc, #140]	; (8007dd0 <HAL_DMA_IRQHandler+0x410>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d02c      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <HAL_DMA_IRQHandler+0x414>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d027      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a20      	ldr	r2, [pc, #128]	; (8007dd8 <HAL_DMA_IRQHandler+0x418>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d022      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1e      	ldr	r2, [pc, #120]	; (8007ddc <HAL_DMA_IRQHandler+0x41c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01d      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1d      	ldr	r2, [pc, #116]	; (8007de0 <HAL_DMA_IRQHandler+0x420>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <HAL_DMA_IRQHandler+0x424>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <HAL_DMA_IRQHandler+0x428>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a18      	ldr	r2, [pc, #96]	; (8007dec <HAL_DMA_IRQHandler+0x42c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <HAL_DMA_IRQHandler+0x430>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_DMA_IRQHandler+0x3e2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <HAL_DMA_IRQHandler+0x434>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d12a      	bne.n	8007df8 <HAL_DMA_IRQHandler+0x438>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	e023      	b.n	8007e00 <HAL_DMA_IRQHandler+0x440>
 8007db8:	40020010 	.word	0x40020010
 8007dbc:	40020028 	.word	0x40020028
 8007dc0:	40020040 	.word	0x40020040
 8007dc4:	40020058 	.word	0x40020058
 8007dc8:	40020070 	.word	0x40020070
 8007dcc:	40020088 	.word	0x40020088
 8007dd0:	400200a0 	.word	0x400200a0
 8007dd4:	400200b8 	.word	0x400200b8
 8007dd8:	40020410 	.word	0x40020410
 8007ddc:	40020428 	.word	0x40020428
 8007de0:	40020440 	.word	0x40020440
 8007de4:	40020458 	.word	0x40020458
 8007de8:	40020470 	.word	0x40020470
 8007dec:	40020488 	.word	0x40020488
 8007df0:	400204a0 	.word	0x400204a0
 8007df4:	400204b8 	.word	0x400204b8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00d      	beq.n	8007e20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	f043 0204 	orr.w	r2, r3, #4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2210      	movs	r2, #16
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80a6 	beq.w	8007f82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a85      	ldr	r2, [pc, #532]	; (8008050 <HAL_DMA_IRQHandler+0x690>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d04a      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a83      	ldr	r2, [pc, #524]	; (8008054 <HAL_DMA_IRQHandler+0x694>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d045      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a82      	ldr	r2, [pc, #520]	; (8008058 <HAL_DMA_IRQHandler+0x698>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d040      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a80      	ldr	r2, [pc, #512]	; (800805c <HAL_DMA_IRQHandler+0x69c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d03b      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a7f      	ldr	r2, [pc, #508]	; (8008060 <HAL_DMA_IRQHandler+0x6a0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d036      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a7d      	ldr	r2, [pc, #500]	; (8008064 <HAL_DMA_IRQHandler+0x6a4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d031      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a7c      	ldr	r2, [pc, #496]	; (8008068 <HAL_DMA_IRQHandler+0x6a8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d02c      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a7a      	ldr	r2, [pc, #488]	; (800806c <HAL_DMA_IRQHandler+0x6ac>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d027      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a79      	ldr	r2, [pc, #484]	; (8008070 <HAL_DMA_IRQHandler+0x6b0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d022      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a77      	ldr	r2, [pc, #476]	; (8008074 <HAL_DMA_IRQHandler+0x6b4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01d      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a76      	ldr	r2, [pc, #472]	; (8008078 <HAL_DMA_IRQHandler+0x6b8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d018      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a74      	ldr	r2, [pc, #464]	; (800807c <HAL_DMA_IRQHandler+0x6bc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a73      	ldr	r2, [pc, #460]	; (8008080 <HAL_DMA_IRQHandler+0x6c0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a71      	ldr	r2, [pc, #452]	; (8008084 <HAL_DMA_IRQHandler+0x6c4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a70      	ldr	r2, [pc, #448]	; (8008088 <HAL_DMA_IRQHandler+0x6c8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x516>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a6e      	ldr	r2, [pc, #440]	; (800808c <HAL_DMA_IRQHandler+0x6cc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10a      	bne.n	8007eec <HAL_DMA_IRQHandler+0x52c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	e009      	b.n	8007f00 <HAL_DMA_IRQHandler+0x540>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bf14      	ite	ne
 8007efa:	2301      	movne	r3, #1
 8007efc:	2300      	moveq	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d03e      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d018      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d108      	bne.n	8007f42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d024      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
 8007f40:	e01f      	b.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01b      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	e016      	b.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0208 	bic.w	r2, r2, #8
 8007f70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f86:	f003 031f 	and.w	r3, r3, #31
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8110 	beq.w	80081b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2c      	ldr	r2, [pc, #176]	; (8008050 <HAL_DMA_IRQHandler+0x690>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d04a      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a2b      	ldr	r2, [pc, #172]	; (8008054 <HAL_DMA_IRQHandler+0x694>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d045      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a29      	ldr	r2, [pc, #164]	; (8008058 <HAL_DMA_IRQHandler+0x698>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d040      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a28      	ldr	r2, [pc, #160]	; (800805c <HAL_DMA_IRQHandler+0x69c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d03b      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a26      	ldr	r2, [pc, #152]	; (8008060 <HAL_DMA_IRQHandler+0x6a0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d036      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <HAL_DMA_IRQHandler+0x6a4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d031      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a23      	ldr	r2, [pc, #140]	; (8008068 <HAL_DMA_IRQHandler+0x6a8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d02c      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a22      	ldr	r2, [pc, #136]	; (800806c <HAL_DMA_IRQHandler+0x6ac>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d027      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a20      	ldr	r2, [pc, #128]	; (8008070 <HAL_DMA_IRQHandler+0x6b0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d022      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <HAL_DMA_IRQHandler+0x6b4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d01d      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1d      	ldr	r2, [pc, #116]	; (8008078 <HAL_DMA_IRQHandler+0x6b8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d018      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1c      	ldr	r2, [pc, #112]	; (800807c <HAL_DMA_IRQHandler+0x6bc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1a      	ldr	r2, [pc, #104]	; (8008080 <HAL_DMA_IRQHandler+0x6c0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00e      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a19      	ldr	r2, [pc, #100]	; (8008084 <HAL_DMA_IRQHandler+0x6c4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a17      	ldr	r2, [pc, #92]	; (8008088 <HAL_DMA_IRQHandler+0x6c8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_DMA_IRQHandler+0x678>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a16      	ldr	r2, [pc, #88]	; (800808c <HAL_DMA_IRQHandler+0x6cc>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d12b      	bne.n	8008090 <HAL_DMA_IRQHandler+0x6d0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf14      	ite	ne
 8008046:	2301      	movne	r3, #1
 8008048:	2300      	moveq	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	e02a      	b.n	80080a4 <HAL_DMA_IRQHandler+0x6e4>
 800804e:	bf00      	nop
 8008050:	40020010 	.word	0x40020010
 8008054:	40020028 	.word	0x40020028
 8008058:	40020040 	.word	0x40020040
 800805c:	40020058 	.word	0x40020058
 8008060:	40020070 	.word	0x40020070
 8008064:	40020088 	.word	0x40020088
 8008068:	400200a0 	.word	0x400200a0
 800806c:	400200b8 	.word	0x400200b8
 8008070:	40020410 	.word	0x40020410
 8008074:	40020428 	.word	0x40020428
 8008078:	40020440 	.word	0x40020440
 800807c:	40020458 	.word	0x40020458
 8008080:	40020470 	.word	0x40020470
 8008084:	40020488 	.word	0x40020488
 8008088:	400204a0 	.word	0x400204a0
 800808c:	400204b8 	.word	0x400204b8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	bf14      	ite	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	2300      	moveq	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8087 	beq.w	80081b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2220      	movs	r2, #32
 80080b4:	409a      	lsls	r2, r3
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d139      	bne.n	800813a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0216 	bic.w	r2, r2, #22
 80080d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695a      	ldr	r2, [r3, #20]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <HAL_DMA_IRQHandler+0x736>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0208 	bic.w	r2, r2, #8
 8008104:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	223f      	movs	r2, #63	; 0x3f
 8008110:	409a      	lsls	r2, r3
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 834a 	beq.w	80087c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
          }
          return;
 8008138:	e344      	b.n	80087c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d018      	beq.n	800817a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	2b00      	cmp	r3, #0
 800815c:	d02c      	beq.n	80081b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
 8008166:	e027      	b.n	80081b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d023      	beq.n	80081b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
 8008178:	e01e      	b.n	80081b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10f      	bne.n	80081a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0210 	bic.w	r2, r2, #16
 8008196:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8306 	beq.w	80087ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8088 	beq.w	80082e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2204      	movs	r2, #4
 80081d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a7a      	ldr	r2, [pc, #488]	; (80083c8 <HAL_DMA_IRQHandler+0xa08>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d04a      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a79      	ldr	r2, [pc, #484]	; (80083cc <HAL_DMA_IRQHandler+0xa0c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d045      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a77      	ldr	r2, [pc, #476]	; (80083d0 <HAL_DMA_IRQHandler+0xa10>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d040      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a76      	ldr	r2, [pc, #472]	; (80083d4 <HAL_DMA_IRQHandler+0xa14>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d03b      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a74      	ldr	r2, [pc, #464]	; (80083d8 <HAL_DMA_IRQHandler+0xa18>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d036      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a73      	ldr	r2, [pc, #460]	; (80083dc <HAL_DMA_IRQHandler+0xa1c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d031      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a71      	ldr	r2, [pc, #452]	; (80083e0 <HAL_DMA_IRQHandler+0xa20>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d02c      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a70      	ldr	r2, [pc, #448]	; (80083e4 <HAL_DMA_IRQHandler+0xa24>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d027      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a6e      	ldr	r2, [pc, #440]	; (80083e8 <HAL_DMA_IRQHandler+0xa28>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d022      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a6d      	ldr	r2, [pc, #436]	; (80083ec <HAL_DMA_IRQHandler+0xa2c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d01d      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a6b      	ldr	r2, [pc, #428]	; (80083f0 <HAL_DMA_IRQHandler+0xa30>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a6a      	ldr	r2, [pc, #424]	; (80083f4 <HAL_DMA_IRQHandler+0xa34>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a68      	ldr	r2, [pc, #416]	; (80083f8 <HAL_DMA_IRQHandler+0xa38>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a67      	ldr	r2, [pc, #412]	; (80083fc <HAL_DMA_IRQHandler+0xa3c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a65      	ldr	r2, [pc, #404]	; (8008400 <HAL_DMA_IRQHandler+0xa40>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_DMA_IRQHandler+0x8b8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a64      	ldr	r2, [pc, #400]	; (8008404 <HAL_DMA_IRQHandler+0xa44>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d108      	bne.n	800828a <HAL_DMA_IRQHandler+0x8ca>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e007      	b.n	800829a <HAL_DMA_IRQHandler+0x8da>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0201 	bic.w	r2, r2, #1
 8008298:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d307      	bcc.n	80082b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f2      	bne.n	800829a <HAL_DMA_IRQHandler+0x8da>
 80082b4:	e000      	b.n	80082b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80082b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2203      	movs	r2, #3
 80082ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80082ce:	e003      	b.n	80082d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8272 	beq.w	80087ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
 80082f2:	e26c      	b.n	80087ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a43      	ldr	r2, [pc, #268]	; (8008408 <HAL_DMA_IRQHandler+0xa48>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d022      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a42      	ldr	r2, [pc, #264]	; (800840c <HAL_DMA_IRQHandler+0xa4c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d01d      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a40      	ldr	r2, [pc, #256]	; (8008410 <HAL_DMA_IRQHandler+0xa50>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d018      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a3f      	ldr	r2, [pc, #252]	; (8008414 <HAL_DMA_IRQHandler+0xa54>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d013      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a3d      	ldr	r2, [pc, #244]	; (8008418 <HAL_DMA_IRQHandler+0xa58>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00e      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a3c      	ldr	r2, [pc, #240]	; (800841c <HAL_DMA_IRQHandler+0xa5c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d009      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a3a      	ldr	r2, [pc, #232]	; (8008420 <HAL_DMA_IRQHandler+0xa60>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <HAL_DMA_IRQHandler+0x984>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a39      	ldr	r2, [pc, #228]	; (8008424 <HAL_DMA_IRQHandler+0xa64>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d101      	bne.n	8008348 <HAL_DMA_IRQHandler+0x988>
 8008344:	2301      	movs	r3, #1
 8008346:	e000      	b.n	800834a <HAL_DMA_IRQHandler+0x98a>
 8008348:	2300      	movs	r3, #0
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 823f 	beq.w	80087ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2204      	movs	r2, #4
 8008362:	409a      	lsls	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80cd 	beq.w	8008508 <HAL_DMA_IRQHandler+0xb48>
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80c7 	beq.w	8008508 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2204      	movs	r2, #4
 8008384:	409a      	lsls	r2, r3
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d049      	beq.n	8008428 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d109      	bne.n	80083b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8210 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083b0:	e20a      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8206 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083c4:	e200      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe08>
 80083c6:	bf00      	nop
 80083c8:	40020010 	.word	0x40020010
 80083cc:	40020028 	.word	0x40020028
 80083d0:	40020040 	.word	0x40020040
 80083d4:	40020058 	.word	0x40020058
 80083d8:	40020070 	.word	0x40020070
 80083dc:	40020088 	.word	0x40020088
 80083e0:	400200a0 	.word	0x400200a0
 80083e4:	400200b8 	.word	0x400200b8
 80083e8:	40020410 	.word	0x40020410
 80083ec:	40020428 	.word	0x40020428
 80083f0:	40020440 	.word	0x40020440
 80083f4:	40020458 	.word	0x40020458
 80083f8:	40020470 	.word	0x40020470
 80083fc:	40020488 	.word	0x40020488
 8008400:	400204a0 	.word	0x400204a0
 8008404:	400204b8 	.word	0x400204b8
 8008408:	58025408 	.word	0x58025408
 800840c:	5802541c 	.word	0x5802541c
 8008410:	58025430 	.word	0x58025430
 8008414:	58025444 	.word	0x58025444
 8008418:	58025458 	.word	0x58025458
 800841c:	5802546c 	.word	0x5802546c
 8008420:	58025480 	.word	0x58025480
 8008424:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d160      	bne.n	80084f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a7f      	ldr	r2, [pc, #508]	; (8008634 <HAL_DMA_IRQHandler+0xc74>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d04a      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a7d      	ldr	r2, [pc, #500]	; (8008638 <HAL_DMA_IRQHandler+0xc78>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d045      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a7c      	ldr	r2, [pc, #496]	; (800863c <HAL_DMA_IRQHandler+0xc7c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d040      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a7a      	ldr	r2, [pc, #488]	; (8008640 <HAL_DMA_IRQHandler+0xc80>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d03b      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a79      	ldr	r2, [pc, #484]	; (8008644 <HAL_DMA_IRQHandler+0xc84>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d036      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a77      	ldr	r2, [pc, #476]	; (8008648 <HAL_DMA_IRQHandler+0xc88>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d031      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a76      	ldr	r2, [pc, #472]	; (800864c <HAL_DMA_IRQHandler+0xc8c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d02c      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a74      	ldr	r2, [pc, #464]	; (8008650 <HAL_DMA_IRQHandler+0xc90>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d027      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a73      	ldr	r2, [pc, #460]	; (8008654 <HAL_DMA_IRQHandler+0xc94>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d022      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a71      	ldr	r2, [pc, #452]	; (8008658 <HAL_DMA_IRQHandler+0xc98>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01d      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a70      	ldr	r2, [pc, #448]	; (800865c <HAL_DMA_IRQHandler+0xc9c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d018      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a6e      	ldr	r2, [pc, #440]	; (8008660 <HAL_DMA_IRQHandler+0xca0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a6d      	ldr	r2, [pc, #436]	; (8008664 <HAL_DMA_IRQHandler+0xca4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00e      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a6b      	ldr	r2, [pc, #428]	; (8008668 <HAL_DMA_IRQHandler+0xca8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a6a      	ldr	r2, [pc, #424]	; (800866c <HAL_DMA_IRQHandler+0xcac>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d004      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xb12>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a68      	ldr	r2, [pc, #416]	; (8008670 <HAL_DMA_IRQHandler+0xcb0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <HAL_DMA_IRQHandler+0xb24>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0208 	bic.w	r2, r2, #8
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e007      	b.n	80084f4 <HAL_DMA_IRQHandler+0xb34>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0204 	bic.w	r2, r2, #4
 80084f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8165 	beq.w	80087c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008506:	e15f      	b.n	80087c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	2202      	movs	r2, #2
 8008512:	409a      	lsls	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4013      	ands	r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80c5 	beq.w	80086a8 <HAL_DMA_IRQHandler+0xce8>
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80bf 	beq.w	80086a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	2202      	movs	r2, #2
 8008534:	409a      	lsls	r2, r3
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d018      	beq.n	8008576 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 813a 	beq.w	80087cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008560:	e134      	b.n	80087cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 8130 	beq.w	80087cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008574:	e12a      	b.n	80087cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8089 	bne.w	8008694 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <HAL_DMA_IRQHandler+0xc74>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d04a      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a29      	ldr	r2, [pc, #164]	; (8008638 <HAL_DMA_IRQHandler+0xc78>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d045      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a28      	ldr	r2, [pc, #160]	; (800863c <HAL_DMA_IRQHandler+0xc7c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d040      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a26      	ldr	r2, [pc, #152]	; (8008640 <HAL_DMA_IRQHandler+0xc80>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d03b      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a25      	ldr	r2, [pc, #148]	; (8008644 <HAL_DMA_IRQHandler+0xc84>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d036      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a23      	ldr	r2, [pc, #140]	; (8008648 <HAL_DMA_IRQHandler+0xc88>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d031      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a22      	ldr	r2, [pc, #136]	; (800864c <HAL_DMA_IRQHandler+0xc8c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d02c      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <HAL_DMA_IRQHandler+0xc90>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d027      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <HAL_DMA_IRQHandler+0xc94>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d022      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <HAL_DMA_IRQHandler+0xc98>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01d      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1c      	ldr	r2, [pc, #112]	; (800865c <HAL_DMA_IRQHandler+0xc9c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d018      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1a      	ldr	r2, [pc, #104]	; (8008660 <HAL_DMA_IRQHandler+0xca0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a19      	ldr	r2, [pc, #100]	; (8008664 <HAL_DMA_IRQHandler+0xca4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00e      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a17      	ldr	r2, [pc, #92]	; (8008668 <HAL_DMA_IRQHandler+0xca8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a16      	ldr	r2, [pc, #88]	; (800866c <HAL_DMA_IRQHandler+0xcac>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d004      	beq.n	8008622 <HAL_DMA_IRQHandler+0xc62>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a14      	ldr	r2, [pc, #80]	; (8008670 <HAL_DMA_IRQHandler+0xcb0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d128      	bne.n	8008674 <HAL_DMA_IRQHandler+0xcb4>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0214 	bic.w	r2, r2, #20
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e027      	b.n	8008684 <HAL_DMA_IRQHandler+0xcc4>
 8008634:	40020010 	.word	0x40020010
 8008638:	40020028 	.word	0x40020028
 800863c:	40020040 	.word	0x40020040
 8008640:	40020058 	.word	0x40020058
 8008644:	40020070 	.word	0x40020070
 8008648:	40020088 	.word	0x40020088
 800864c:	400200a0 	.word	0x400200a0
 8008650:	400200b8 	.word	0x400200b8
 8008654:	40020410 	.word	0x40020410
 8008658:	40020428 	.word	0x40020428
 800865c:	40020440 	.word	0x40020440
 8008660:	40020458 	.word	0x40020458
 8008664:	40020470 	.word	0x40020470
 8008668:	40020488 	.word	0x40020488
 800866c:	400204a0 	.word	0x400204a0
 8008670:	400204b8 	.word	0x400204b8
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 020a 	bic.w	r2, r2, #10
 8008682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8097 	beq.w	80087cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086a6:	e091      	b.n	80087cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	f003 031f 	and.w	r3, r3, #31
 80086b0:	2208      	movs	r2, #8
 80086b2:	409a      	lsls	r2, r3
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	4013      	ands	r3, r2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8088 	beq.w	80087ce <HAL_DMA_IRQHandler+0xe0e>
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8082 	beq.w	80087ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a41      	ldr	r2, [pc, #260]	; (80087d4 <HAL_DMA_IRQHandler+0xe14>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d04a      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a3f      	ldr	r2, [pc, #252]	; (80087d8 <HAL_DMA_IRQHandler+0xe18>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d045      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a3e      	ldr	r2, [pc, #248]	; (80087dc <HAL_DMA_IRQHandler+0xe1c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d040      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3c      	ldr	r2, [pc, #240]	; (80087e0 <HAL_DMA_IRQHandler+0xe20>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d03b      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <HAL_DMA_IRQHandler+0xe24>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d036      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a39      	ldr	r2, [pc, #228]	; (80087e8 <HAL_DMA_IRQHandler+0xe28>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d031      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <HAL_DMA_IRQHandler+0xe2c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d02c      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a36      	ldr	r2, [pc, #216]	; (80087f0 <HAL_DMA_IRQHandler+0xe30>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d027      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <HAL_DMA_IRQHandler+0xe34>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d022      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a33      	ldr	r2, [pc, #204]	; (80087f8 <HAL_DMA_IRQHandler+0xe38>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d01d      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a32      	ldr	r2, [pc, #200]	; (80087fc <HAL_DMA_IRQHandler+0xe3c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d018      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	; (8008800 <HAL_DMA_IRQHandler+0xe40>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d013      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <HAL_DMA_IRQHandler+0xe44>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00e      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <HAL_DMA_IRQHandler+0xe48>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d009      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <HAL_DMA_IRQHandler+0xe4c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_DMA_IRQHandler+0xdaa>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a2a      	ldr	r2, [pc, #168]	; (8008810 <HAL_DMA_IRQHandler+0xe50>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d108      	bne.n	800877c <HAL_DMA_IRQHandler+0xdbc>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 021c 	bic.w	r2, r2, #28
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e007      	b.n	800878c <HAL_DMA_IRQHandler+0xdcc>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 020e 	bic.w	r2, r2, #14
 800878a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2201      	movs	r2, #1
 8008796:	409a      	lsls	r2, r3
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
 80087c2:	e004      	b.n	80087ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80087ce:	3728      	adds	r7, #40	; 0x28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40020010 	.word	0x40020010
 80087d8:	40020028 	.word	0x40020028
 80087dc:	40020040 	.word	0x40020040
 80087e0:	40020058 	.word	0x40020058
 80087e4:	40020070 	.word	0x40020070
 80087e8:	40020088 	.word	0x40020088
 80087ec:	400200a0 	.word	0x400200a0
 80087f0:	400200b8 	.word	0x400200b8
 80087f4:	40020410 	.word	0x40020410
 80087f8:	40020428 	.word	0x40020428
 80087fc:	40020440 	.word	0x40020440
 8008800:	40020458 	.word	0x40020458
 8008804:	40020470 	.word	0x40020470
 8008808:	40020488 	.word	0x40020488
 800880c:	400204a0 	.word	0x400204a0
 8008810:	400204b8 	.word	0x400204b8

08008814 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008844:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a7f      	ldr	r2, [pc, #508]	; (8008a48 <DMA_SetConfig+0x21c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d072      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a7d      	ldr	r2, [pc, #500]	; (8008a4c <DMA_SetConfig+0x220>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d06d      	beq.n	8008936 <DMA_SetConfig+0x10a>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a7c      	ldr	r2, [pc, #496]	; (8008a50 <DMA_SetConfig+0x224>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d068      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a7a      	ldr	r2, [pc, #488]	; (8008a54 <DMA_SetConfig+0x228>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d063      	beq.n	8008936 <DMA_SetConfig+0x10a>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a79      	ldr	r2, [pc, #484]	; (8008a58 <DMA_SetConfig+0x22c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d05e      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a77      	ldr	r2, [pc, #476]	; (8008a5c <DMA_SetConfig+0x230>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d059      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a76      	ldr	r2, [pc, #472]	; (8008a60 <DMA_SetConfig+0x234>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d054      	beq.n	8008936 <DMA_SetConfig+0x10a>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a74      	ldr	r2, [pc, #464]	; (8008a64 <DMA_SetConfig+0x238>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d04f      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a73      	ldr	r2, [pc, #460]	; (8008a68 <DMA_SetConfig+0x23c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d04a      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a71      	ldr	r2, [pc, #452]	; (8008a6c <DMA_SetConfig+0x240>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d045      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a70      	ldr	r2, [pc, #448]	; (8008a70 <DMA_SetConfig+0x244>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d040      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a6e      	ldr	r2, [pc, #440]	; (8008a74 <DMA_SetConfig+0x248>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d03b      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a6d      	ldr	r2, [pc, #436]	; (8008a78 <DMA_SetConfig+0x24c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d036      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a6b      	ldr	r2, [pc, #428]	; (8008a7c <DMA_SetConfig+0x250>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d031      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a6a      	ldr	r2, [pc, #424]	; (8008a80 <DMA_SetConfig+0x254>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d02c      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a68      	ldr	r2, [pc, #416]	; (8008a84 <DMA_SetConfig+0x258>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d027      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a67      	ldr	r2, [pc, #412]	; (8008a88 <DMA_SetConfig+0x25c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a65      	ldr	r2, [pc, #404]	; (8008a8c <DMA_SetConfig+0x260>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01d      	beq.n	8008936 <DMA_SetConfig+0x10a>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a64      	ldr	r2, [pc, #400]	; (8008a90 <DMA_SetConfig+0x264>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d018      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a62      	ldr	r2, [pc, #392]	; (8008a94 <DMA_SetConfig+0x268>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <DMA_SetConfig+0x10a>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a61      	ldr	r2, [pc, #388]	; (8008a98 <DMA_SetConfig+0x26c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a5f      	ldr	r2, [pc, #380]	; (8008a9c <DMA_SetConfig+0x270>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <DMA_SetConfig+0x10a>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a5e      	ldr	r2, [pc, #376]	; (8008aa0 <DMA_SetConfig+0x274>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <DMA_SetConfig+0x10a>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a5c      	ldr	r2, [pc, #368]	; (8008aa4 <DMA_SetConfig+0x278>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d101      	bne.n	800893a <DMA_SetConfig+0x10e>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <DMA_SetConfig+0x110>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00d      	beq.n	800895c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008948:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800895a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a39      	ldr	r2, [pc, #228]	; (8008a48 <DMA_SetConfig+0x21c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d04a      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a38      	ldr	r2, [pc, #224]	; (8008a4c <DMA_SetConfig+0x220>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d045      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a36      	ldr	r2, [pc, #216]	; (8008a50 <DMA_SetConfig+0x224>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d040      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a35      	ldr	r2, [pc, #212]	; (8008a54 <DMA_SetConfig+0x228>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d03b      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a33      	ldr	r2, [pc, #204]	; (8008a58 <DMA_SetConfig+0x22c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d036      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a32      	ldr	r2, [pc, #200]	; (8008a5c <DMA_SetConfig+0x230>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d031      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a30      	ldr	r2, [pc, #192]	; (8008a60 <DMA_SetConfig+0x234>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d02c      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a2f      	ldr	r2, [pc, #188]	; (8008a64 <DMA_SetConfig+0x238>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d027      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a2d      	ldr	r2, [pc, #180]	; (8008a68 <DMA_SetConfig+0x23c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d022      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a2c      	ldr	r2, [pc, #176]	; (8008a6c <DMA_SetConfig+0x240>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d01d      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <DMA_SetConfig+0x244>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d018      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <DMA_SetConfig+0x248>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d013      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a27      	ldr	r2, [pc, #156]	; (8008a78 <DMA_SetConfig+0x24c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00e      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a26      	ldr	r2, [pc, #152]	; (8008a7c <DMA_SetConfig+0x250>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d009      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a24      	ldr	r2, [pc, #144]	; (8008a80 <DMA_SetConfig+0x254>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <DMA_SetConfig+0x1d0>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a23      	ldr	r2, [pc, #140]	; (8008a84 <DMA_SetConfig+0x258>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d101      	bne.n	8008a00 <DMA_SetConfig+0x1d4>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <DMA_SetConfig+0x1d6>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d059      	beq.n	8008aba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0a:	f003 031f 	and.w	r3, r3, #31
 8008a0e:	223f      	movs	r2, #63	; 0x3f
 8008a10:	409a      	lsls	r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	2b40      	cmp	r3, #64	; 0x40
 8008a34:	d138      	bne.n	8008aa8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a46:	e086      	b.n	8008b56 <DMA_SetConfig+0x32a>
 8008a48:	40020010 	.word	0x40020010
 8008a4c:	40020028 	.word	0x40020028
 8008a50:	40020040 	.word	0x40020040
 8008a54:	40020058 	.word	0x40020058
 8008a58:	40020070 	.word	0x40020070
 8008a5c:	40020088 	.word	0x40020088
 8008a60:	400200a0 	.word	0x400200a0
 8008a64:	400200b8 	.word	0x400200b8
 8008a68:	40020410 	.word	0x40020410
 8008a6c:	40020428 	.word	0x40020428
 8008a70:	40020440 	.word	0x40020440
 8008a74:	40020458 	.word	0x40020458
 8008a78:	40020470 	.word	0x40020470
 8008a7c:	40020488 	.word	0x40020488
 8008a80:	400204a0 	.word	0x400204a0
 8008a84:	400204b8 	.word	0x400204b8
 8008a88:	58025408 	.word	0x58025408
 8008a8c:	5802541c 	.word	0x5802541c
 8008a90:	58025430 	.word	0x58025430
 8008a94:	58025444 	.word	0x58025444
 8008a98:	58025458 	.word	0x58025458
 8008a9c:	5802546c 	.word	0x5802546c
 8008aa0:	58025480 	.word	0x58025480
 8008aa4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
}
 8008ab8:	e04d      	b.n	8008b56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a29      	ldr	r2, [pc, #164]	; (8008b64 <DMA_SetConfig+0x338>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d022      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a27      	ldr	r2, [pc, #156]	; (8008b68 <DMA_SetConfig+0x33c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01d      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <DMA_SetConfig+0x340>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d018      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a24      	ldr	r2, [pc, #144]	; (8008b70 <DMA_SetConfig+0x344>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a23      	ldr	r2, [pc, #140]	; (8008b74 <DMA_SetConfig+0x348>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00e      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a21      	ldr	r2, [pc, #132]	; (8008b78 <DMA_SetConfig+0x34c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d009      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a20      	ldr	r2, [pc, #128]	; (8008b7c <DMA_SetConfig+0x350>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d004      	beq.n	8008b0a <DMA_SetConfig+0x2de>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <DMA_SetConfig+0x354>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d101      	bne.n	8008b0e <DMA_SetConfig+0x2e2>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <DMA_SetConfig+0x2e4>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d020      	beq.n	8008b56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b18:	f003 031f 	and.w	r3, r3, #31
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d108      	bne.n	8008b46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	60da      	str	r2, [r3, #12]
}
 8008b44:	e007      	b.n	8008b56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
}
 8008b56:	bf00      	nop
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	58025408 	.word	0x58025408
 8008b68:	5802541c 	.word	0x5802541c
 8008b6c:	58025430 	.word	0x58025430
 8008b70:	58025444 	.word	0x58025444
 8008b74:	58025458 	.word	0x58025458
 8008b78:	5802546c 	.word	0x5802546c
 8008b7c:	58025480 	.word	0x58025480
 8008b80:	58025494 	.word	0x58025494

08008b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a42      	ldr	r2, [pc, #264]	; (8008c9c <DMA_CalcBaseAndBitshift+0x118>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d04a      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a41      	ldr	r2, [pc, #260]	; (8008ca0 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d045      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a3f      	ldr	r2, [pc, #252]	; (8008ca4 <DMA_CalcBaseAndBitshift+0x120>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d040      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a3e      	ldr	r2, [pc, #248]	; (8008ca8 <DMA_CalcBaseAndBitshift+0x124>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d03b      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a3c      	ldr	r2, [pc, #240]	; (8008cac <DMA_CalcBaseAndBitshift+0x128>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d036      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a3b      	ldr	r2, [pc, #236]	; (8008cb0 <DMA_CalcBaseAndBitshift+0x12c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d031      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a39      	ldr	r2, [pc, #228]	; (8008cb4 <DMA_CalcBaseAndBitshift+0x130>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d02c      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a38      	ldr	r2, [pc, #224]	; (8008cb8 <DMA_CalcBaseAndBitshift+0x134>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d027      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a36      	ldr	r2, [pc, #216]	; (8008cbc <DMA_CalcBaseAndBitshift+0x138>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d022      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a35      	ldr	r2, [pc, #212]	; (8008cc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d01d      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a33      	ldr	r2, [pc, #204]	; (8008cc4 <DMA_CalcBaseAndBitshift+0x140>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d018      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a32      	ldr	r2, [pc, #200]	; (8008cc8 <DMA_CalcBaseAndBitshift+0x144>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d013      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a30      	ldr	r2, [pc, #192]	; (8008ccc <DMA_CalcBaseAndBitshift+0x148>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00e      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a2f      	ldr	r2, [pc, #188]	; (8008cd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d009      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a2d      	ldr	r2, [pc, #180]	; (8008cd4 <DMA_CalcBaseAndBitshift+0x150>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d004      	beq.n	8008c2c <DMA_CalcBaseAndBitshift+0xa8>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2c      	ldr	r2, [pc, #176]	; (8008cd8 <DMA_CalcBaseAndBitshift+0x154>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d101      	bne.n	8008c30 <DMA_CalcBaseAndBitshift+0xac>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <DMA_CalcBaseAndBitshift+0xae>
 8008c30:	2300      	movs	r3, #0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d024      	beq.n	8008c80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3b10      	subs	r3, #16
 8008c3e:	4a27      	ldr	r2, [pc, #156]	; (8008cdc <DMA_CalcBaseAndBitshift+0x158>)
 8008c40:	fba2 2303 	umull	r2, r3, r2, r3
 8008c44:	091b      	lsrs	r3, r3, #4
 8008c46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	4a24      	ldr	r2, [pc, #144]	; (8008ce0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008c50:	5cd3      	ldrb	r3, [r2, r3]
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d908      	bls.n	8008c70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	4b1f      	ldr	r3, [pc, #124]	; (8008ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	1d1a      	adds	r2, r3, #4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008c6e:	e00d      	b.n	8008c8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <DMA_CalcBaseAndBitshift+0x160>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008c7e:	e005      	b.n	8008c8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	40020010 	.word	0x40020010
 8008ca0:	40020028 	.word	0x40020028
 8008ca4:	40020040 	.word	0x40020040
 8008ca8:	40020058 	.word	0x40020058
 8008cac:	40020070 	.word	0x40020070
 8008cb0:	40020088 	.word	0x40020088
 8008cb4:	400200a0 	.word	0x400200a0
 8008cb8:	400200b8 	.word	0x400200b8
 8008cbc:	40020410 	.word	0x40020410
 8008cc0:	40020428 	.word	0x40020428
 8008cc4:	40020440 	.word	0x40020440
 8008cc8:	40020458 	.word	0x40020458
 8008ccc:	40020470 	.word	0x40020470
 8008cd0:	40020488 	.word	0x40020488
 8008cd4:	400204a0 	.word	0x400204a0
 8008cd8:	400204b8 	.word	0x400204b8
 8008cdc:	aaaaaaab 	.word	0xaaaaaaab
 8008ce0:	08017144 	.word	0x08017144
 8008ce4:	fffffc00 	.word	0xfffffc00

08008ce8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d120      	bne.n	8008d3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d858      	bhi.n	8008db6 <DMA_CheckFifoParam+0xce>
 8008d04:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <DMA_CheckFifoParam+0x24>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008d1d 	.word	0x08008d1d
 8008d10:	08008d2f 	.word	0x08008d2f
 8008d14:	08008d1d 	.word	0x08008d1d
 8008d18:	08008db7 	.word	0x08008db7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d048      	beq.n	8008dba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d2c:	e045      	b.n	8008dba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d36:	d142      	bne.n	8008dbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d3c:	e03f      	b.n	8008dbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d46:	d123      	bne.n	8008d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d838      	bhi.n	8008dc2 <DMA_CheckFifoParam+0xda>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <DMA_CheckFifoParam+0x70>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d6f 	.word	0x08008d6f
 8008d60:	08008d69 	.word	0x08008d69
 8008d64:	08008d81 	.word	0x08008d81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
        break;
 8008d6c:	e030      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d025      	beq.n	8008dc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d7e:	e022      	b.n	8008dc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d88:	d11f      	bne.n	8008dca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d8e:	e01c      	b.n	8008dca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d902      	bls.n	8008d9e <DMA_CheckFifoParam+0xb6>
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d003      	beq.n	8008da4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d9c:	e018      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
        break;
 8008da2:	e015      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	e00b      	b.n	8008dce <DMA_CheckFifoParam+0xe6>
        break;
 8008db6:	bf00      	nop
 8008db8:	e00a      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8008dba:	bf00      	nop
 8008dbc:	e008      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8008dbe:	bf00      	nop
 8008dc0:	e006      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8008dc2:	bf00      	nop
 8008dc4:	e004      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8008dc6:	bf00      	nop
 8008dc8:	e002      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
        break;
 8008dca:	bf00      	nop
 8008dcc:	e000      	b.n	8008dd0 <DMA_CheckFifoParam+0xe8>
    break;
 8008dce:	bf00      	nop
    }
  }

  return status;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop

08008de0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a38      	ldr	r2, [pc, #224]	; (8008ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d022      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a36      	ldr	r2, [pc, #216]	; (8008ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01d      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a35      	ldr	r2, [pc, #212]	; (8008edc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d018      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a33      	ldr	r2, [pc, #204]	; (8008ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a32      	ldr	r2, [pc, #200]	; (8008ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a30      	ldr	r2, [pc, #192]	; (8008ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a2f      	ldr	r2, [pc, #188]	; (8008eec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2d      	ldr	r2, [pc, #180]	; (8008ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d101      	bne.n	8008e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008e42:	2300      	movs	r3, #0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01a      	beq.n	8008e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	3b08      	subs	r3, #8
 8008e50:	4a28      	ldr	r2, [pc, #160]	; (8008ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	091b      	lsrs	r3, r3, #4
 8008e58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4b26      	ldr	r3, [pc, #152]	; (8008ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a24      	ldr	r2, [pc, #144]	; (8008efc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 031f 	and.w	r3, r3, #31
 8008e74:	2201      	movs	r2, #1
 8008e76:	409a      	lsls	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e7c:	e024      	b.n	8008ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	3b10      	subs	r3, #16
 8008e86:	4a1e      	ldr	r2, [pc, #120]	; (8008f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e88:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d806      	bhi.n	8008ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4a1b      	ldr	r2, [pc, #108]	; (8008f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d902      	bls.n	8008ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a16      	ldr	r2, [pc, #88]	; (8008f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008eb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	409a      	lsls	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ec8:	bf00      	nop
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	58025408 	.word	0x58025408
 8008ed8:	5802541c 	.word	0x5802541c
 8008edc:	58025430 	.word	0x58025430
 8008ee0:	58025444 	.word	0x58025444
 8008ee4:	58025458 	.word	0x58025458
 8008ee8:	5802546c 	.word	0x5802546c
 8008eec:	58025480 	.word	0x58025480
 8008ef0:	58025494 	.word	0x58025494
 8008ef4:	cccccccd 	.word	0xcccccccd
 8008ef8:	16009600 	.word	0x16009600
 8008efc:	58025880 	.word	0x58025880
 8008f00:	aaaaaaab 	.word	0xaaaaaaab
 8008f04:	400204b8 	.word	0x400204b8
 8008f08:	4002040f 	.word	0x4002040f
 8008f0c:	10008200 	.word	0x10008200
 8008f10:	40020880 	.word	0x40020880

08008f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d04a      	beq.n	8008fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d847      	bhi.n	8008fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a25      	ldr	r2, [pc, #148]	; (8008fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d01d      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a22      	ldr	r2, [pc, #136]	; (8008fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a21      	ldr	r2, [pc, #132]	; (8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d101      	bne.n	8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a15      	ldr	r2, [pc, #84]	; (8008ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f9c:	671a      	str	r2, [r3, #112]	; 0x70
 8008f9e:	e009      	b.n	8008fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a11      	ldr	r2, [pc, #68]	; (8008ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008fb2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2201      	movs	r2, #1
 8008fba:	409a      	lsls	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	58025408 	.word	0x58025408
 8008fd0:	5802541c 	.word	0x5802541c
 8008fd4:	58025430 	.word	0x58025430
 8008fd8:	58025444 	.word	0x58025444
 8008fdc:	58025458 	.word	0x58025458
 8008fe0:	5802546c 	.word	0x5802546c
 8008fe4:	58025480 	.word	0x58025480
 8008fe8:	58025494 	.word	0x58025494
 8008fec:	1600963f 	.word	0x1600963f
 8008ff0:	58025940 	.word	0x58025940
 8008ff4:	1000823f 	.word	0x1000823f
 8008ff8:	40020940 	.word	0x40020940

08008ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b089      	sub	sp, #36	; 0x24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800900a:	4b89      	ldr	r3, [pc, #548]	; (8009230 <HAL_GPIO_Init+0x234>)
 800900c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800900e:	e194      	b.n	800933a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	2101      	movs	r1, #1
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	fa01 f303 	lsl.w	r3, r1, r3
 800901c:	4013      	ands	r3, r2
 800901e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8186 	beq.w	8009334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	2b01      	cmp	r3, #1
 8009032:	d005      	beq.n	8009040 <HAL_GPIO_Init+0x44>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d130      	bne.n	80090a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2203      	movs	r2, #3
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	4013      	ands	r3, r2
 8009056:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4313      	orrs	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009076:	2201      	movs	r2, #1
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4013      	ands	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	091b      	lsrs	r3, r3, #4
 800908c:	f003 0201 	and.w	r2, r3, #1
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4313      	orrs	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d017      	beq.n	80090de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	2203      	movs	r2, #3
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43db      	mvns	r3, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	4013      	ands	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d123      	bne.n	8009132 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	08da      	lsrs	r2, r3, #3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3208      	adds	r2, #8
 80090f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	220f      	movs	r2, #15
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	43db      	mvns	r3, r3
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	4013      	ands	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	fa02 f303 	lsl.w	r3, r2, r3
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	4313      	orrs	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	08da      	lsrs	r2, r3, #3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3208      	adds	r2, #8
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	2203      	movs	r2, #3
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	43db      	mvns	r3, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	4013      	ands	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f003 0203 	and.w	r2, r3, #3
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	4313      	orrs	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 80e0 	beq.w	8009334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009174:	4b2f      	ldr	r3, [pc, #188]	; (8009234 <HAL_GPIO_Init+0x238>)
 8009176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800917a:	4a2e      	ldr	r2, [pc, #184]	; (8009234 <HAL_GPIO_Init+0x238>)
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009184:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <HAL_GPIO_Init+0x238>)
 8009186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009192:	4a29      	ldr	r2, [pc, #164]	; (8009238 <HAL_GPIO_Init+0x23c>)
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	089b      	lsrs	r3, r3, #2
 8009198:	3302      	adds	r3, #2
 800919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	220f      	movs	r2, #15
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	43db      	mvns	r3, r3
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	4013      	ands	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a20      	ldr	r2, [pc, #128]	; (800923c <HAL_GPIO_Init+0x240>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d052      	beq.n	8009264 <HAL_GPIO_Init+0x268>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <HAL_GPIO_Init+0x244>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d031      	beq.n	800922a <HAL_GPIO_Init+0x22e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a1e      	ldr	r2, [pc, #120]	; (8009244 <HAL_GPIO_Init+0x248>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d02b      	beq.n	8009226 <HAL_GPIO_Init+0x22a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <HAL_GPIO_Init+0x24c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d025      	beq.n	8009222 <HAL_GPIO_Init+0x226>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a1c      	ldr	r2, [pc, #112]	; (800924c <HAL_GPIO_Init+0x250>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d01f      	beq.n	800921e <HAL_GPIO_Init+0x222>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <HAL_GPIO_Init+0x254>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d019      	beq.n	800921a <HAL_GPIO_Init+0x21e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <HAL_GPIO_Init+0x258>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_GPIO_Init+0x21a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <HAL_GPIO_Init+0x25c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00d      	beq.n	8009212 <HAL_GPIO_Init+0x216>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <HAL_GPIO_Init+0x260>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d007      	beq.n	800920e <HAL_GPIO_Init+0x212>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a17      	ldr	r2, [pc, #92]	; (8009260 <HAL_GPIO_Init+0x264>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d101      	bne.n	800920a <HAL_GPIO_Init+0x20e>
 8009206:	2309      	movs	r3, #9
 8009208:	e02d      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800920a:	230a      	movs	r3, #10
 800920c:	e02b      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800920e:	2308      	movs	r3, #8
 8009210:	e029      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009212:	2307      	movs	r3, #7
 8009214:	e027      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009216:	2306      	movs	r3, #6
 8009218:	e025      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800921a:	2305      	movs	r3, #5
 800921c:	e023      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800921e:	2304      	movs	r3, #4
 8009220:	e021      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009222:	2303      	movs	r3, #3
 8009224:	e01f      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009226:	2302      	movs	r3, #2
 8009228:	e01d      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800922a:	2301      	movs	r3, #1
 800922c:	e01b      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800922e:	bf00      	nop
 8009230:	58000080 	.word	0x58000080
 8009234:	58024400 	.word	0x58024400
 8009238:	58000400 	.word	0x58000400
 800923c:	58020000 	.word	0x58020000
 8009240:	58020400 	.word	0x58020400
 8009244:	58020800 	.word	0x58020800
 8009248:	58020c00 	.word	0x58020c00
 800924c:	58021000 	.word	0x58021000
 8009250:	58021400 	.word	0x58021400
 8009254:	58021800 	.word	0x58021800
 8009258:	58021c00 	.word	0x58021c00
 800925c:	58022000 	.word	0x58022000
 8009260:	58022400 	.word	0x58022400
 8009264:	2300      	movs	r3, #0
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	f002 0203 	and.w	r2, r2, #3
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	4093      	lsls	r3, r2
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009276:	4938      	ldr	r1, [pc, #224]	; (8009358 <HAL_GPIO_Init+0x35c>)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	089b      	lsrs	r3, r3, #2
 800927c:	3302      	adds	r3, #2
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	43db      	mvns	r3, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4013      	ands	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80092aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80092b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	43db      	mvns	r3, r3
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	4013      	ands	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80092d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	43db      	mvns	r3, r3
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	4013      	ands	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	43db      	mvns	r3, r3
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	4013      	ands	r3, r2
 8009318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4313      	orrs	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	fa22 f303 	lsr.w	r3, r2, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	f47f ae63 	bne.w	8009010 <HAL_GPIO_Init+0x14>
  }
}
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	3724      	adds	r7, #36	; 0x24
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	58000400 	.word	0x58000400

0800935c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	887b      	ldrh	r3, [r7, #2]
 800936e:	4013      	ands	r3, r2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
 8009378:	e001      	b.n	800937e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	807b      	strh	r3, [r7, #2]
 8009398:	4613      	mov	r3, r2
 800939a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800939c:	787b      	ldrb	r3, [r7, #1]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093a2:	887a      	ldrh	r2, [r7, #2]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80093a8:	e003      	b.n	80093b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	041a      	lsls	r2, r3, #16
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	619a      	str	r2, [r3, #24]
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
	...

080093c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e08b      	b.n	80094ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f7 fff2 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2224      	movs	r2, #36	; 0x24
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0201 	bic.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d107      	bne.n	800943a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009436:	609a      	str	r2, [r3, #8]
 8009438:	e006      	b.n	8009448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d108      	bne.n	8009462 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800945e:	605a      	str	r2, [r3, #4]
 8009460:	e007      	b.n	8009472 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6859      	ldr	r1, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <HAL_I2C_Init+0x134>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	69d9      	ldr	r1, [r3, #28]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	02008000 	.word	0x02008000

080094f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	461a      	mov	r2, r3
 8009504:	460b      	mov	r3, r1
 8009506:	817b      	strh	r3, [r7, #10]
 8009508:	4613      	mov	r3, r2
 800950a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b20      	cmp	r3, #32
 8009516:	f040 80fd 	bne.w	8009714 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_I2C_Master_Transmit+0x30>
 8009524:	2302      	movs	r3, #2
 8009526:	e0f6      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009530:	f7fa fdf4 	bl	800411c <HAL_GetTick>
 8009534:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	2319      	movs	r3, #25
 800953c:	2201      	movs	r2, #1
 800953e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fa0a 	bl	800995c <I2C_WaitOnFlagUntilTimeout>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e0e1      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2221      	movs	r2, #33	; 0x21
 8009556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2210      	movs	r2, #16
 800955e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	893a      	ldrh	r2, [r7, #8]
 8009572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957e:	b29b      	uxth	r3, r3
 8009580:	2bff      	cmp	r3, #255	; 0xff
 8009582:	d906      	bls.n	8009592 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	22ff      	movs	r2, #255	; 0xff
 8009588:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800958a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e007      	b.n	80095a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800959c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d024      	beq.n	80095f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	3301      	adds	r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	8979      	ldrh	r1, [r7, #10]
 80095e6:	4b4e      	ldr	r3, [pc, #312]	; (8009720 <HAL_I2C_Master_Transmit+0x228>)
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fc05 	bl	8009dfc <I2C_TransferConfig>
 80095f2:	e066      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	8979      	ldrh	r1, [r7, #10]
 80095fc:	4b48      	ldr	r3, [pc, #288]	; (8009720 <HAL_I2C_Master_Transmit+0x228>)
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fbfa 	bl	8009dfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009608:	e05b      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	6a39      	ldr	r1, [r7, #32]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f9fd 	bl	8009a0e <I2C_WaitOnTXISFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e07b      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	b29b      	uxth	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d034      	beq.n	80096c2 <HAL_I2C_Master_Transmit+0x1ca>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965c:	2b00      	cmp	r3, #0
 800965e:	d130      	bne.n	80096c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	2200      	movs	r2, #0
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 f976 	bl	800995c <I2C_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e04d      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	2bff      	cmp	r3, #255	; 0xff
 8009682:	d90e      	bls.n	80096a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	22ff      	movs	r2, #255	; 0xff
 8009688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968e:	b2da      	uxtb	r2, r3
 8009690:	8979      	ldrh	r1, [r7, #10]
 8009692:	2300      	movs	r3, #0
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fbae 	bl	8009dfc <I2C_TransferConfig>
 80096a0:	e00f      	b.n	80096c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	8979      	ldrh	r1, [r7, #10]
 80096b4:	2300      	movs	r3, #0
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 fb9d 	bl	8009dfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d19e      	bne.n	800960a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	6a39      	ldr	r1, [r7, #32]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f000 f9e3 	bl	8009a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e01a      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2220      	movs	r2, #32
 80096e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6859      	ldr	r1, [r3, #4]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <HAL_I2C_Master_Transmit+0x22c>)
 80096f4:	400b      	ands	r3, r1
 80096f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	80002000 	.word	0x80002000
 8009724:	fe00e800 	.word	0xfe00e800

08009728 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	461a      	mov	r2, r3
 8009734:	460b      	mov	r3, r1
 8009736:	817b      	strh	r3, [r7, #10]
 8009738:	4613      	mov	r3, r2
 800973a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b20      	cmp	r3, #32
 8009746:	f040 80db 	bne.w	8009900 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_I2C_Master_Receive+0x30>
 8009754:	2302      	movs	r3, #2
 8009756:	e0d4      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009760:	f7fa fcdc 	bl	800411c <HAL_GetTick>
 8009764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	2319      	movs	r3, #25
 800976c:	2201      	movs	r2, #1
 800976e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f8f2 	bl	800995c <I2C_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e0bf      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2222      	movs	r2, #34	; 0x22
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2210      	movs	r2, #16
 800978e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	893a      	ldrh	r2, [r7, #8]
 80097a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2bff      	cmp	r3, #255	; 0xff
 80097b2:	d90e      	bls.n	80097d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	22ff      	movs	r2, #255	; 0xff
 80097b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	8979      	ldrh	r1, [r7, #10]
 80097c2:	4b52      	ldr	r3, [pc, #328]	; (800990c <HAL_I2C_Master_Receive+0x1e4>)
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 fb16 	bl	8009dfc <I2C_TransferConfig>
 80097d0:	e06d      	b.n	80098ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	8979      	ldrh	r1, [r7, #10]
 80097e4:	4b49      	ldr	r3, [pc, #292]	; (800990c <HAL_I2C_Master_Receive+0x1e4>)
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fb05 	bl	8009dfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80097f2:	e05c      	b.n	80098ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	6a39      	ldr	r1, [r7, #32]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f993 	bl	8009b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e07c      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009824:	3b01      	subs	r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983e:	b29b      	uxth	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d034      	beq.n	80098ae <HAL_I2C_Master_Receive+0x186>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	2b00      	cmp	r3, #0
 800984a:	d130      	bne.n	80098ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2200      	movs	r2, #0
 8009854:	2180      	movs	r1, #128	; 0x80
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f880 	bl	800995c <I2C_WaitOnFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e04d      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800986a:	b29b      	uxth	r3, r3
 800986c:	2bff      	cmp	r3, #255	; 0xff
 800986e:	d90e      	bls.n	800988e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	22ff      	movs	r2, #255	; 0xff
 8009874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987a:	b2da      	uxtb	r2, r3
 800987c:	8979      	ldrh	r1, [r7, #10]
 800987e:	2300      	movs	r3, #0
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fab8 	bl	8009dfc <I2C_TransferConfig>
 800988c:	e00f      	b.n	80098ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009892:	b29a      	uxth	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	b2da      	uxtb	r2, r3
 800989e:	8979      	ldrh	r1, [r7, #10]
 80098a0:	2300      	movs	r3, #0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 faa7 	bl	8009dfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d19d      	bne.n	80097f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	6a39      	ldr	r1, [r7, #32]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f8ed 	bl	8009a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e01a      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2220      	movs	r2, #32
 80098d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6859      	ldr	r1, [r3, #4]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <HAL_I2C_Master_Receive+0x1e8>)
 80098e0:	400b      	ands	r3, r1
 80098e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e000      	b.n	8009902 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009900:	2302      	movs	r3, #2
  }
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	80002400 	.word	0x80002400
 8009910:	fe00e800 	.word	0xfe00e800

08009914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d103      	bne.n	8009932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b01      	cmp	r3, #1
 800993e:	d007      	beq.n	8009950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	619a      	str	r2, [r3, #24]
  }
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800996c:	e03b      	b.n	80099e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f962 	bl	8009c3c <I2C_IsErrorOccurred>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e041      	b.n	8009a06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009988:	d02d      	beq.n	80099e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998a:	f7fa fbc7 	bl	800411c <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d302      	bcc.n	80099a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d122      	bne.n	80099e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4013      	ands	r3, r2
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	bf0c      	ite	eq
 80099b0:	2301      	moveq	r3, #1
 80099b2:	2300      	movne	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d113      	bne.n	80099e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c2:	f043 0220 	orr.w	r2, r3, #32
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e00f      	b.n	8009a06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4013      	ands	r3, r2
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bf0c      	ite	eq
 80099f6:	2301      	moveq	r3, #1
 80099f8:	2300      	movne	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d0b4      	beq.n	800996e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a1a:	e033      	b.n	8009a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f90b 	bl	8009c3c <I2C_IsErrorOccurred>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e031      	b.n	8009a94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a36:	d025      	beq.n	8009a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a38:	f7fa fb70 	bl	800411c <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d302      	bcc.n	8009a4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11a      	bne.n	8009a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d013      	beq.n	8009a84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a60:	f043 0220 	orr.w	r2, r3, #32
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e007      	b.n	8009a94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d1c4      	bne.n	8009a1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa8:	e02f      	b.n	8009b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f8c4 	bl	8009c3c <I2C_IsErrorOccurred>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e02d      	b.n	8009b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009abe:	f7fa fb2d 	bl	800411c <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d302      	bcc.n	8009ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d11a      	bne.n	8009b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	d013      	beq.n	8009b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	f043 0220 	orr.w	r2, r3, #32
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e007      	b.n	8009b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b20      	cmp	r3, #32
 8009b16:	d1c8      	bne.n	8009aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009b34:	e071      	b.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f87e 	bl	8009c3c <I2C_IsErrorOccurred>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	d13b      	bne.n	8009bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d138      	bne.n	8009bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d105      	bne.n	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	2b10      	cmp	r3, #16
 8009b84:	d121      	bne.n	8009bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2210      	movs	r2, #16
 8009b8c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2204      	movs	r2, #4
 8009b92:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6859      	ldr	r1, [r3, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009ba8:	400b      	ands	r3, r1
 8009baa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]
 8009bc8:	e002      	b.n	8009bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009bd0:	f7fa faa4 	bl	800411c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d119      	bne.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d116      	bne.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d00f      	beq.n	8009c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	f043 0220 	orr.w	r2, r3, #32
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d002      	beq.n	8009c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d083      	beq.n	8009b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	fe00e800 	.word	0xfe00e800

08009c3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d068      	beq.n	8009d3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2210      	movs	r2, #16
 8009c6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c70:	e049      	b.n	8009d06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c78:	d045      	beq.n	8009d06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c7a:	f7fa fa4f 	bl	800411c <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d302      	bcc.n	8009c90 <I2C_IsErrorOccurred+0x54>
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d13a      	bne.n	8009d06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ca2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cb2:	d121      	bne.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cba:	d01d      	beq.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009cbc:	7cfb      	ldrb	r3, [r7, #19]
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d01a      	beq.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009cd2:	f7fa fa23 	bl	800411c <HAL_GetTick>
 8009cd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cd8:	e00e      	b.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009cda:	f7fa fa1f 	bl	800411c <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b19      	cmp	r3, #25
 8009ce6:	d907      	bls.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	f043 0320 	orr.w	r3, r3, #32
 8009cee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009cf6:	e006      	b.n	8009d06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d1e9      	bne.n	8009cda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	d003      	beq.n	8009d1c <I2C_IsErrorOccurred+0xe0>
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0aa      	beq.n	8009c72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f043 0304 	orr.w	r3, r3, #4
 8009d32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	f043 0308 	orr.w	r3, r3, #8
 8009d74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01c      	beq.n	8009dea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fdaf 	bl	8009914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6859      	ldr	r1, [r3, #4]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b0d      	ldr	r3, [pc, #52]	; (8009df8 <I2C_IsErrorOccurred+0x1bc>)
 8009dc2:	400b      	ands	r3, r1
 8009dc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3728      	adds	r7, #40	; 0x28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	fe00e800 	.word	0xfe00e800

08009dfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	817b      	strh	r3, [r7, #10]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e14:	7a7b      	ldrb	r3, [r7, #9]
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	0d5b      	lsrs	r3, r3, #21
 8009e36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <I2C_TransferConfig+0x60>)
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	43db      	mvns	r3, r3
 8009e40:	ea02 0103 	and.w	r1, r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	03ff63ff 	.word	0x03ff63ff

08009e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	d138      	bne.n	8009ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e032      	b.n	8009eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2224      	movs	r2, #36	; 0x24
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6819      	ldr	r1, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e000      	b.n	8009eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ee8:	2302      	movs	r3, #2
  }
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d139      	bne.n	8009f80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e033      	b.n	8009f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2224      	movs	r2, #36	; 0x24
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0201 	bic.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	021b      	lsls	r3, r3, #8
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e000      	b.n	8009f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f80:	2302      	movs	r3, #2
  }
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f9e:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009fa8:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	4906      	ldr	r1, [pc, #24]	; (8009fd4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	604b      	str	r3, [r1, #4]
}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	58000400 	.word	0x58000400

08009fd8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009fe4:	4b18      	ldr	r3, [pc, #96]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f023 0201 	bic.w	r2, r3, #1
 8009fec:	4916      	ldr	r1, [pc, #88]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009ff4:	4b14      	ldr	r3, [pc, #80]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	4a13      	ldr	r2, [pc, #76]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ffa:	f023 0305 	bic.w	r3, r3, #5
 8009ffe:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	4a10      	ldr	r2, [pc, #64]	; (800a048 <HAL_PWR_EnterSTOPMode+0x70>)
 800a006:	f023 0302 	bic.w	r3, r3, #2
 800a00a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <HAL_PWR_EnterSTOPMode+0x74>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	4a0e      	ldr	r2, [pc, #56]	; (800a04c <HAL_PWR_EnterSTOPMode+0x74>)
 800a012:	f043 0304 	orr.w	r3, r3, #4
 800a016:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a018:	f3bf 8f4f 	dsb	sy
}
 800a01c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a01e:	f3bf 8f6f 	isb	sy
}
 800a022:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a02a:	bf30      	wfi
 800a02c:	e000      	b.n	800a030 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a02e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <HAL_PWR_EnterSTOPMode+0x74>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	4a05      	ldr	r2, [pc, #20]	; (800a04c <HAL_PWR_EnterSTOPMode+0x74>)
 800a036:	f023 0304 	bic.w	r3, r3, #4
 800a03a:	6113      	str	r3, [r2, #16]
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	58024800 	.word	0x58024800
 800a04c:	e000ed00 	.word	0xe000ed00

0800a050 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b04      	cmp	r3, #4
 800a062:	d00a      	beq.n	800a07a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a064:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d001      	beq.n	800a076 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e01f      	b.n	800a0b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	e01d      	b.n	800a0b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f023 0207 	bic.w	r2, r3, #7
 800a082:	490f      	ldr	r1, [pc, #60]	; (800a0c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4313      	orrs	r3, r2
 800a088:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a08a:	f7fa f847 	bl	800411c <HAL_GetTick>
 800a08e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a090:	e009      	b.n	800a0a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a092:	f7fa f843 	bl	800411c <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0a0:	d901      	bls.n	800a0a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e007      	b.n	800a0b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a0a6:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b2:	d1ee      	bne.n	800a092 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	58024800 	.word	0x58024800

0800a0c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08c      	sub	sp, #48	; 0x30
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f000 bc48 	b.w	800a968 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 8088 	beq.w	800a1f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0e6:	4b99      	ldr	r3, [pc, #612]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0f0:	4b96      	ldr	r3, [pc, #600]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d007      	beq.n	800a10c <HAL_RCC_OscConfig+0x48>
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	2b18      	cmp	r3, #24
 800a100:	d111      	bne.n	800a126 <HAL_RCC_OscConfig+0x62>
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	f003 0303 	and.w	r3, r3, #3
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d10c      	bne.n	800a126 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a10c:	4b8f      	ldr	r3, [pc, #572]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d06d      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x130>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d169      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f000 bc21 	b.w	800a968 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12e:	d106      	bne.n	800a13e <HAL_RCC_OscConfig+0x7a>
 800a130:	4b86      	ldr	r3, [pc, #536]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a85      	ldr	r2, [pc, #532]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	e02e      	b.n	800a19c <HAL_RCC_OscConfig+0xd8>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10c      	bne.n	800a160 <HAL_RCC_OscConfig+0x9c>
 800a146:	4b81      	ldr	r3, [pc, #516]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a80      	ldr	r2, [pc, #512]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a14c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	4b7e      	ldr	r3, [pc, #504]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a7d      	ldr	r2, [pc, #500]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	e01d      	b.n	800a19c <HAL_RCC_OscConfig+0xd8>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a168:	d10c      	bne.n	800a184 <HAL_RCC_OscConfig+0xc0>
 800a16a:	4b78      	ldr	r3, [pc, #480]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a77      	ldr	r2, [pc, #476]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	4b75      	ldr	r3, [pc, #468]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a74      	ldr	r2, [pc, #464]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	e00b      	b.n	800a19c <HAL_RCC_OscConfig+0xd8>
 800a184:	4b71      	ldr	r3, [pc, #452]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a70      	ldr	r2, [pc, #448]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a18a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	4b6e      	ldr	r3, [pc, #440]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a6d      	ldr	r2, [pc, #436]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a19a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d013      	beq.n	800a1cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a4:	f7f9 ffba 	bl	800411c <HAL_GetTick>
 800a1a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1aa:	e008      	b.n	800a1be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1ac:	f7f9 ffb6 	bl	800411c <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b64      	cmp	r3, #100	; 0x64
 800a1b8:	d901      	bls.n	800a1be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e3d4      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1be:	4b63      	ldr	r3, [pc, #396]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0f0      	beq.n	800a1ac <HAL_RCC_OscConfig+0xe8>
 800a1ca:	e014      	b.n	800a1f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1cc:	f7f9 ffa6 	bl	800411c <HAL_GetTick>
 800a1d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1d2:	e008      	b.n	800a1e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1d4:	f7f9 ffa2 	bl	800411c <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b64      	cmp	r3, #100	; 0x64
 800a1e0:	d901      	bls.n	800a1e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e3c0      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1e6:	4b59      	ldr	r3, [pc, #356]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f0      	bne.n	800a1d4 <HAL_RCC_OscConfig+0x110>
 800a1f2:	e000      	b.n	800a1f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80ca 	beq.w	800a398 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a204:	4b51      	ldr	r3, [pc, #324]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a20c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a20e:	4b4f      	ldr	r3, [pc, #316]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <HAL_RCC_OscConfig+0x166>
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	2b18      	cmp	r3, #24
 800a21e:	d156      	bne.n	800a2ce <HAL_RCC_OscConfig+0x20a>
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d151      	bne.n	800a2ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a22a:	4b48      	ldr	r3, [pc, #288]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_RCC_OscConfig+0x17e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e392      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a242:	4b42      	ldr	r3, [pc, #264]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f023 0219 	bic.w	r2, r3, #25
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	493f      	ldr	r1, [pc, #252]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a250:	4313      	orrs	r3, r2
 800a252:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a254:	f7f9 ff62 	bl	800411c <HAL_GetTick>
 800a258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a25c:	f7f9 ff5e 	bl	800411c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e37c      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a26e:	4b37      	ldr	r3, [pc, #220]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f0      	beq.n	800a25c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a27a:	f7f9 ff5b 	bl	8004134 <HAL_GetREVID>
 800a27e:	4603      	mov	r3, r0
 800a280:	f241 0203 	movw	r2, #4099	; 0x1003
 800a284:	4293      	cmp	r3, r2
 800a286:	d817      	bhi.n	800a2b8 <HAL_RCC_OscConfig+0x1f4>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d108      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x1de>
 800a290:	4b2e      	ldr	r3, [pc, #184]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a298:	4a2c      	ldr	r2, [pc, #176]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a29e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2a0:	e07a      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2a2:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	031b      	lsls	r3, r3, #12
 800a2b0:	4926      	ldr	r1, [pc, #152]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2b6:	e06f      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2b8:	4b24      	ldr	r3, [pc, #144]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	061b      	lsls	r3, r3, #24
 800a2c6:	4921      	ldr	r1, [pc, #132]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2cc:	e064      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d047      	beq.n	800a366 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2d6:	4b1d      	ldr	r3, [pc, #116]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f023 0219 	bic.w	r2, r3, #25
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	491a      	ldr	r1, [pc, #104]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e8:	f7f9 ff18 	bl	800411c <HAL_GetTick>
 800a2ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2ee:	e008      	b.n	800a302 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2f0:	f7f9 ff14 	bl	800411c <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e332      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0f0      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a30e:	f7f9 ff11 	bl	8004134 <HAL_GetREVID>
 800a312:	4603      	mov	r3, r0
 800a314:	f241 0203 	movw	r2, #4099	; 0x1003
 800a318:	4293      	cmp	r3, r2
 800a31a:	d819      	bhi.n	800a350 <HAL_RCC_OscConfig+0x28c>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d108      	bne.n	800a336 <HAL_RCC_OscConfig+0x272>
 800a324:	4b09      	ldr	r3, [pc, #36]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a32c:	4a07      	ldr	r2, [pc, #28]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a32e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a332:	6053      	str	r3, [r2, #4]
 800a334:	e030      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	031b      	lsls	r3, r3, #12
 800a344:	4901      	ldr	r1, [pc, #4]	; (800a34c <HAL_RCC_OscConfig+0x288>)
 800a346:	4313      	orrs	r3, r2
 800a348:	604b      	str	r3, [r1, #4]
 800a34a:	e025      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
 800a34c:	58024400 	.word	0x58024400
 800a350:	4b9a      	ldr	r3, [pc, #616]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	061b      	lsls	r3, r3, #24
 800a35e:	4997      	ldr	r1, [pc, #604]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a360:	4313      	orrs	r3, r2
 800a362:	604b      	str	r3, [r1, #4]
 800a364:	e018      	b.n	800a398 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a366:	4b95      	ldr	r3, [pc, #596]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a94      	ldr	r2, [pc, #592]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a36c:	f023 0301 	bic.w	r3, r3, #1
 800a370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a372:	f7f9 fed3 	bl	800411c <HAL_GetTick>
 800a376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a378:	e008      	b.n	800a38c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a37a:	f7f9 fecf 	bl	800411c <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b02      	cmp	r3, #2
 800a386:	d901      	bls.n	800a38c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e2ed      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a38c:	4b8b      	ldr	r3, [pc, #556]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1f0      	bne.n	800a37a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80a9 	beq.w	800a4f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3a6:	4b85      	ldr	r3, [pc, #532]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3b0:	4b82      	ldr	r3, [pc, #520]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d007      	beq.n	800a3cc <HAL_RCC_OscConfig+0x308>
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b18      	cmp	r3, #24
 800a3c0:	d13a      	bne.n	800a438 <HAL_RCC_OscConfig+0x374>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0303 	and.w	r3, r3, #3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d135      	bne.n	800a438 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3cc:	4b7b      	ldr	r3, [pc, #492]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x320>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	2b80      	cmp	r3, #128	; 0x80
 800a3de:	d001      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e2c1      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3e4:	f7f9 fea6 	bl	8004134 <HAL_GetREVID>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d817      	bhi.n	800a422 <HAL_RCC_OscConfig+0x35e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	d108      	bne.n	800a40c <HAL_RCC_OscConfig+0x348>
 800a3fa:	4b70      	ldr	r3, [pc, #448]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a402:	4a6e      	ldr	r2, [pc, #440]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a408:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a40a:	e075      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a40c:	4b6b      	ldr	r3, [pc, #428]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	069b      	lsls	r3, r3, #26
 800a41a:	4968      	ldr	r1, [pc, #416]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a420:	e06a      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a422:	4b66      	ldr	r3, [pc, #408]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	061b      	lsls	r3, r3, #24
 800a430:	4962      	ldr	r1, [pc, #392]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a432:	4313      	orrs	r3, r2
 800a434:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a436:	e05f      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d042      	beq.n	800a4c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a440:	4b5e      	ldr	r3, [pc, #376]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a5d      	ldr	r2, [pc, #372]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a44c:	f7f9 fe66 	bl	800411c <HAL_GetTick>
 800a450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a452:	e008      	b.n	800a466 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a454:	f7f9 fe62 	bl	800411c <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d901      	bls.n	800a466 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e280      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a466:	4b55      	ldr	r3, [pc, #340]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0f0      	beq.n	800a454 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a472:	f7f9 fe5f 	bl	8004134 <HAL_GetREVID>
 800a476:	4603      	mov	r3, r0
 800a478:	f241 0203 	movw	r2, #4099	; 0x1003
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d817      	bhi.n	800a4b0 <HAL_RCC_OscConfig+0x3ec>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	2b20      	cmp	r3, #32
 800a486:	d108      	bne.n	800a49a <HAL_RCC_OscConfig+0x3d6>
 800a488:	4b4c      	ldr	r3, [pc, #304]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a490:	4a4a      	ldr	r2, [pc, #296]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a496:	6053      	str	r3, [r2, #4]
 800a498:	e02e      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
 800a49a:	4b48      	ldr	r3, [pc, #288]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	069b      	lsls	r3, r3, #26
 800a4a8:	4944      	ldr	r1, [pc, #272]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	604b      	str	r3, [r1, #4]
 800a4ae:	e023      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
 800a4b0:	4b42      	ldr	r3, [pc, #264]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	061b      	lsls	r3, r3, #24
 800a4be:	493f      	ldr	r1, [pc, #252]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	60cb      	str	r3, [r1, #12]
 800a4c4:	e018      	b.n	800a4f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a4c6:	4b3d      	ldr	r3, [pc, #244]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a3c      	ldr	r2, [pc, #240]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d2:	f7f9 fe23 	bl	800411c <HAL_GetTick>
 800a4d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a4d8:	e008      	b.n	800a4ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a4da:	f7f9 fe1f 	bl	800411c <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e23d      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a4ec:	4b33      	ldr	r3, [pc, #204]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f0      	bne.n	800a4da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d036      	beq.n	800a572 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d019      	beq.n	800a540 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a50c:	4b2b      	ldr	r3, [pc, #172]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a510:	4a2a      	ldr	r2, [pc, #168]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a512:	f043 0301 	orr.w	r3, r3, #1
 800a516:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a518:	f7f9 fe00 	bl	800411c <HAL_GetTick>
 800a51c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a51e:	e008      	b.n	800a532 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a520:	f7f9 fdfc 	bl	800411c <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e21a      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a532:	4b22      	ldr	r3, [pc, #136]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0f0      	beq.n	800a520 <HAL_RCC_OscConfig+0x45c>
 800a53e:	e018      	b.n	800a572 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a540:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a544:	4a1d      	ldr	r2, [pc, #116]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a546:	f023 0301 	bic.w	r3, r3, #1
 800a54a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a54c:	f7f9 fde6 	bl	800411c <HAL_GetTick>
 800a550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a554:	f7f9 fde2 	bl	800411c <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e200      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a566:	4b15      	ldr	r3, [pc, #84]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f0      	bne.n	800a554 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d039      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01c      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a586:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a0c      	ldr	r2, [pc, #48]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a58c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a590:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a592:	f7f9 fdc3 	bl	800411c <HAL_GetTick>
 800a596:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a598:	e008      	b.n	800a5ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a59a:	f7f9 fdbf 	bl	800411c <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d901      	bls.n	800a5ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e1dd      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a5ac:	4b03      	ldr	r3, [pc, #12]	; (800a5bc <HAL_RCC_OscConfig+0x4f8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0f0      	beq.n	800a59a <HAL_RCC_OscConfig+0x4d6>
 800a5b8:	e01b      	b.n	800a5f2 <HAL_RCC_OscConfig+0x52e>
 800a5ba:	bf00      	nop
 800a5bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5c0:	4b9b      	ldr	r3, [pc, #620]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a9a      	ldr	r2, [pc, #616]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a5cc:	f7f9 fda6 	bl	800411c <HAL_GetTick>
 800a5d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d4:	f7f9 fda2 	bl	800411c <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e1c0      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a5e6:	4b92      	ldr	r3, [pc, #584]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1f0      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0304 	and.w	r3, r3, #4
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 8081 	beq.w	800a702 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a600:	4b8c      	ldr	r3, [pc, #560]	; (800a834 <HAL_RCC_OscConfig+0x770>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a8b      	ldr	r2, [pc, #556]	; (800a834 <HAL_RCC_OscConfig+0x770>)
 800a606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a60c:	f7f9 fd86 	bl	800411c <HAL_GetTick>
 800a610:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a612:	e008      	b.n	800a626 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a614:	f7f9 fd82 	bl	800411c <HAL_GetTick>
 800a618:	4602      	mov	r2, r0
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b64      	cmp	r3, #100	; 0x64
 800a620:	d901      	bls.n	800a626 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e1a0      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a626:	4b83      	ldr	r3, [pc, #524]	; (800a834 <HAL_RCC_OscConfig+0x770>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0f0      	beq.n	800a614 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d106      	bne.n	800a648 <HAL_RCC_OscConfig+0x584>
 800a63a:	4b7d      	ldr	r3, [pc, #500]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	4a7c      	ldr	r2, [pc, #496]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	6713      	str	r3, [r2, #112]	; 0x70
 800a646:	e02d      	b.n	800a6a4 <HAL_RCC_OscConfig+0x5e0>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10c      	bne.n	800a66a <HAL_RCC_OscConfig+0x5a6>
 800a650:	4b77      	ldr	r3, [pc, #476]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a654:	4a76      	ldr	r2, [pc, #472]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a656:	f023 0301 	bic.w	r3, r3, #1
 800a65a:	6713      	str	r3, [r2, #112]	; 0x70
 800a65c:	4b74      	ldr	r3, [pc, #464]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a660:	4a73      	ldr	r2, [pc, #460]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a662:	f023 0304 	bic.w	r3, r3, #4
 800a666:	6713      	str	r3, [r2, #112]	; 0x70
 800a668:	e01c      	b.n	800a6a4 <HAL_RCC_OscConfig+0x5e0>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b05      	cmp	r3, #5
 800a670:	d10c      	bne.n	800a68c <HAL_RCC_OscConfig+0x5c8>
 800a672:	4b6f      	ldr	r3, [pc, #444]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a676:	4a6e      	ldr	r2, [pc, #440]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a678:	f043 0304 	orr.w	r3, r3, #4
 800a67c:	6713      	str	r3, [r2, #112]	; 0x70
 800a67e:	4b6c      	ldr	r3, [pc, #432]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a682:	4a6b      	ldr	r2, [pc, #428]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	6713      	str	r3, [r2, #112]	; 0x70
 800a68a:	e00b      	b.n	800a6a4 <HAL_RCC_OscConfig+0x5e0>
 800a68c:	4b68      	ldr	r3, [pc, #416]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a690:	4a67      	ldr	r2, [pc, #412]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	6713      	str	r3, [r2, #112]	; 0x70
 800a698:	4b65      	ldr	r3, [pc, #404]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69c:	4a64      	ldr	r2, [pc, #400]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a69e:	f023 0304 	bic.w	r3, r3, #4
 800a6a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d015      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ac:	f7f9 fd36 	bl	800411c <HAL_GetTick>
 800a6b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6b2:	e00a      	b.n	800a6ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6b4:	f7f9 fd32 	bl	800411c <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e14e      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ca:	4b59      	ldr	r3, [pc, #356]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0ee      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x5f0>
 800a6d6:	e014      	b.n	800a702 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6d8:	f7f9 fd20 	bl	800411c <HAL_GetTick>
 800a6dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6de:	e00a      	b.n	800a6f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6e0:	f7f9 fd1c 	bl	800411c <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d901      	bls.n	800a6f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e138      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6f6:	4b4e      	ldr	r3, [pc, #312]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1ee      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 812d 	beq.w	800a966 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a70c:	4b48      	ldr	r3, [pc, #288]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a714:	2b18      	cmp	r3, #24
 800a716:	f000 80bd 	beq.w	800a894 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b02      	cmp	r3, #2
 800a720:	f040 809e 	bne.w	800a860 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a724:	4b42      	ldr	r3, [pc, #264]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a41      	ldr	r2, [pc, #260]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a72a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a72e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a730:	f7f9 fcf4 	bl	800411c <HAL_GetTick>
 800a734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a736:	e008      	b.n	800a74a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a738:	f7f9 fcf0 	bl	800411c <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b02      	cmp	r3, #2
 800a744:	d901      	bls.n	800a74a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e10e      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a74a:	4b39      	ldr	r3, [pc, #228]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1f0      	bne.n	800a738 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a756:	4b36      	ldr	r3, [pc, #216]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a75a:	4b37      	ldr	r3, [pc, #220]	; (800a838 <HAL_RCC_OscConfig+0x774>)
 800a75c:	4013      	ands	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a766:	0112      	lsls	r2, r2, #4
 800a768:	430a      	orrs	r2, r1
 800a76a:	4931      	ldr	r1, [pc, #196]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	628b      	str	r3, [r1, #40]	; 0x28
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a774:	3b01      	subs	r3, #1
 800a776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77e:	3b01      	subs	r3, #1
 800a780:	025b      	lsls	r3, r3, #9
 800a782:	b29b      	uxth	r3, r3
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	3b01      	subs	r3, #1
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a792:	431a      	orrs	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a798:	3b01      	subs	r3, #1
 800a79a:	061b      	lsls	r3, r3, #24
 800a79c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7a0:	4923      	ldr	r1, [pc, #140]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a7a6:	4b22      	ldr	r3, [pc, #136]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a21      	ldr	r2, [pc, #132]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	f023 0301 	bic.w	r3, r3, #1
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a7b2:	4b1f      	ldr	r3, [pc, #124]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b6:	4b21      	ldr	r3, [pc, #132]	; (800a83c <HAL_RCC_OscConfig+0x778>)
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a7be:	00d2      	lsls	r2, r2, #3
 800a7c0:	491b      	ldr	r1, [pc, #108]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f023 020c 	bic.w	r2, r3, #12
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	4917      	ldr	r1, [pc, #92]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a7d8:	4b15      	ldr	r3, [pc, #84]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	f023 0202 	bic.w	r2, r3, #2
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e4:	4912      	ldr	r1, [pc, #72]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f6:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a7fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	4a0a      	ldr	r2, [pc, #40]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a80c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a80e:	4b08      	ldr	r3, [pc, #32]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	4a07      	ldr	r2, [pc, #28]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a814:	f043 0301 	orr.w	r3, r3, #1
 800a818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a81a:	4b05      	ldr	r3, [pc, #20]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a04      	ldr	r2, [pc, #16]	; (800a830 <HAL_RCC_OscConfig+0x76c>)
 800a820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a826:	f7f9 fc79 	bl	800411c <HAL_GetTick>
 800a82a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a82c:	e011      	b.n	800a852 <HAL_RCC_OscConfig+0x78e>
 800a82e:	bf00      	nop
 800a830:	58024400 	.word	0x58024400
 800a834:	58024800 	.word	0x58024800
 800a838:	fffffc0c 	.word	0xfffffc0c
 800a83c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a840:	f7f9 fc6c 	bl	800411c <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e08a      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a852:	4b47      	ldr	r3, [pc, #284]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0f0      	beq.n	800a840 <HAL_RCC_OscConfig+0x77c>
 800a85e:	e082      	b.n	800a966 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a860:	4b43      	ldr	r3, [pc, #268]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a42      	ldr	r2, [pc, #264]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a86a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a86c:	f7f9 fc56 	bl	800411c <HAL_GetTick>
 800a870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a874:	f7f9 fc52 	bl	800411c <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e070      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a886:	4b3a      	ldr	r3, [pc, #232]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f0      	bne.n	800a874 <HAL_RCC_OscConfig+0x7b0>
 800a892:	e068      	b.n	800a966 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a894:	4b36      	ldr	r3, [pc, #216]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a89a:	4b35      	ldr	r3, [pc, #212]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d031      	beq.n	800a90c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f003 0203 	and.w	r2, r3, #3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d12a      	bne.n	800a90c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	091b      	lsrs	r3, r3, #4
 800a8ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d122      	bne.n	800a90c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d11a      	bne.n	800a90c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	0a5b      	lsrs	r3, r3, #9
 800a8da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d111      	bne.n	800a90c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	0c1b      	lsrs	r3, r3, #16
 800a8ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d108      	bne.n	800a90c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	0e1b      	lsrs	r3, r3, #24
 800a8fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a908:	429a      	cmp	r2, r3
 800a90a:	d001      	beq.n	800a910 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e02b      	b.n	800a968 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a910:	4b17      	ldr	r3, [pc, #92]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a91a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	d01f      	beq.n	800a966 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a926:	4b12      	ldr	r3, [pc, #72]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	4a11      	ldr	r2, [pc, #68]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a92c:	f023 0301 	bic.w	r3, r3, #1
 800a930:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a932:	f7f9 fbf3 	bl	800411c <HAL_GetTick>
 800a936:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a938:	bf00      	nop
 800a93a:	f7f9 fbef 	bl	800411c <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	4293      	cmp	r3, r2
 800a944:	d0f9      	beq.n	800a93a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a94a:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <HAL_RCC_OscConfig+0x8b0>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a952:	00d2      	lsls	r2, r2, #3
 800a954:	4906      	ldr	r1, [pc, #24]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a956:	4313      	orrs	r3, r2
 800a958:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a95a:	4b05      	ldr	r3, [pc, #20]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	4a04      	ldr	r2, [pc, #16]	; (800a970 <HAL_RCC_OscConfig+0x8ac>)
 800a960:	f043 0301 	orr.w	r3, r3, #1
 800a964:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3730      	adds	r7, #48	; 0x30
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	58024400 	.word	0x58024400
 800a974:	ffff0007 	.word	0xffff0007

0800a978 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e19c      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a98c:	4b8a      	ldr	r3, [pc, #552]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d910      	bls.n	800a9bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99a:	4b87      	ldr	r3, [pc, #540]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f023 020f 	bic.w	r2, r3, #15
 800a9a2:	4985      	ldr	r1, [pc, #532]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9aa:	4b83      	ldr	r3, [pc, #524]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d001      	beq.n	800a9bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e184      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d010      	beq.n	800a9ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	4b7b      	ldr	r3, [pc, #492]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d908      	bls.n	800a9ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9d8:	4b78      	ldr	r3, [pc, #480]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	4975      	ldr	r1, [pc, #468]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d010      	beq.n	800aa18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695a      	ldr	r2, [r3, #20]
 800a9fa:	4b70      	ldr	r3, [pc, #448]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d908      	bls.n	800aa18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa06:	4b6d      	ldr	r3, [pc, #436]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	496a      	ldr	r1, [pc, #424]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0310 	and.w	r3, r3, #16
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699a      	ldr	r2, [r3, #24]
 800aa28:	4b64      	ldr	r3, [pc, #400]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d908      	bls.n	800aa46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa34:	4b61      	ldr	r3, [pc, #388]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	495e      	ldr	r1, [pc, #376]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d010      	beq.n	800aa74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	69da      	ldr	r2, [r3, #28]
 800aa56:	4b59      	ldr	r3, [pc, #356]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d908      	bls.n	800aa74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa62:	4b56      	ldr	r3, [pc, #344]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	4953      	ldr	r1, [pc, #332]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0302 	and.w	r3, r3, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d010      	beq.n	800aaa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68da      	ldr	r2, [r3, #12]
 800aa84:	4b4d      	ldr	r3, [pc, #308]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d908      	bls.n	800aaa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa90:	4b4a      	ldr	r3, [pc, #296]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	f023 020f 	bic.w	r2, r3, #15
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	4947      	ldr	r1, [pc, #284]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d055      	beq.n	800ab5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aaae:	4b43      	ldr	r3, [pc, #268]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	4940      	ldr	r1, [pc, #256]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aabc:	4313      	orrs	r3, r2
 800aabe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d107      	bne.n	800aad8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aac8:	4b3c      	ldr	r3, [pc, #240]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d121      	bne.n	800ab18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e0f6      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d107      	bne.n	800aaf0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aae0:	4b36      	ldr	r3, [pc, #216]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d115      	bne.n	800ab18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e0ea      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d107      	bne.n	800ab08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaf8:	4b30      	ldr	r3, [pc, #192]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0de      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab08:	4b2c      	ldr	r3, [pc, #176]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0d6      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab18:	4b28      	ldr	r3, [pc, #160]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	f023 0207 	bic.w	r2, r3, #7
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	4925      	ldr	r1, [pc, #148]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab2a:	f7f9 faf7 	bl	800411c <HAL_GetTick>
 800ab2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab30:	e00a      	b.n	800ab48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab32:	f7f9 faf3 	bl	800411c <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e0be      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab48:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d1eb      	bne.n	800ab32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0302 	and.w	r3, r3, #2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d010      	beq.n	800ab88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	4b14      	ldr	r3, [pc, #80]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	f003 030f 	and.w	r3, r3, #15
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d208      	bcs.n	800ab88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	f023 020f 	bic.w	r2, r3, #15
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	490e      	ldr	r1, [pc, #56]	; (800abbc <HAL_RCC_ClockConfig+0x244>)
 800ab84:	4313      	orrs	r3, r2
 800ab86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab88:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d214      	bcs.n	800abc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab96:	4b08      	ldr	r3, [pc, #32]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f023 020f 	bic.w	r2, r3, #15
 800ab9e:	4906      	ldr	r1, [pc, #24]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aba6:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <HAL_RCC_ClockConfig+0x240>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 030f 	and.w	r3, r3, #15
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d005      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e086      	b.n	800acc6 <HAL_RCC_ClockConfig+0x34e>
 800abb8:	52002000 	.word	0x52002000
 800abbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d010      	beq.n	800abee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	4b3f      	ldr	r3, [pc, #252]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abd8:	429a      	cmp	r2, r3
 800abda:	d208      	bcs.n	800abee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abdc:	4b3c      	ldr	r3, [pc, #240]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	4939      	ldr	r1, [pc, #228]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800abea:	4313      	orrs	r3, r2
 800abec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0308 	and.w	r3, r3, #8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d010      	beq.n	800ac1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695a      	ldr	r2, [r3, #20]
 800abfe:	4b34      	ldr	r3, [pc, #208]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d208      	bcs.n	800ac1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac0a:	4b31      	ldr	r3, [pc, #196]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	492e      	ldr	r1, [pc, #184]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d010      	beq.n	800ac4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699a      	ldr	r2, [r3, #24]
 800ac2c:	4b28      	ldr	r3, [pc, #160]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d208      	bcs.n	800ac4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac38:	4b25      	ldr	r3, [pc, #148]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	4922      	ldr	r1, [pc, #136]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0320 	and.w	r3, r3, #32
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d010      	beq.n	800ac78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69da      	ldr	r2, [r3, #28]
 800ac5a:	4b1d      	ldr	r3, [pc, #116]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d208      	bcs.n	800ac78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac66:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	4917      	ldr	r1, [pc, #92]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac78:	f000 f834 	bl	800ace4 <HAL_RCC_GetSysClockFreq>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	f003 030f 	and.w	r3, r3, #15
 800ac88:	4912      	ldr	r1, [pc, #72]	; (800acd4 <HAL_RCC_ClockConfig+0x35c>)
 800ac8a:	5ccb      	ldrb	r3, [r1, r3]
 800ac8c:	f003 031f 	and.w	r3, r3, #31
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
 800ac94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac96:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <HAL_RCC_ClockConfig+0x358>)
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f003 030f 	and.w	r3, r3, #15
 800ac9e:	4a0d      	ldr	r2, [pc, #52]	; (800acd4 <HAL_RCC_ClockConfig+0x35c>)
 800aca0:	5cd3      	ldrb	r3, [r2, r3]
 800aca2:	f003 031f 	and.w	r3, r3, #31
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	fa22 f303 	lsr.w	r3, r2, r3
 800acac:	4a0a      	ldr	r2, [pc, #40]	; (800acd8 <HAL_RCC_ClockConfig+0x360>)
 800acae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acb0:	4a0a      	ldr	r2, [pc, #40]	; (800acdc <HAL_RCC_ClockConfig+0x364>)
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800acb6:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <HAL_RCC_ClockConfig+0x368>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f8 f816 	bl	8002cec <HAL_InitTick>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	58024400 	.word	0x58024400
 800acd4:	08017134 	.word	0x08017134
 800acd8:	24000088 	.word	0x24000088
 800acdc:	24000084 	.word	0x24000084
 800ace0:	2400008c 	.word	0x2400008c

0800ace4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b089      	sub	sp, #36	; 0x24
 800ace8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acea:	4bb3      	ldr	r3, [pc, #716]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acf2:	2b18      	cmp	r3, #24
 800acf4:	f200 8155 	bhi.w	800afa2 <HAL_RCC_GetSysClockFreq+0x2be>
 800acf8:	a201      	add	r2, pc, #4	; (adr r2, 800ad00 <HAL_RCC_GetSysClockFreq+0x1c>)
 800acfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfe:	bf00      	nop
 800ad00:	0800ad65 	.word	0x0800ad65
 800ad04:	0800afa3 	.word	0x0800afa3
 800ad08:	0800afa3 	.word	0x0800afa3
 800ad0c:	0800afa3 	.word	0x0800afa3
 800ad10:	0800afa3 	.word	0x0800afa3
 800ad14:	0800afa3 	.word	0x0800afa3
 800ad18:	0800afa3 	.word	0x0800afa3
 800ad1c:	0800afa3 	.word	0x0800afa3
 800ad20:	0800ad8b 	.word	0x0800ad8b
 800ad24:	0800afa3 	.word	0x0800afa3
 800ad28:	0800afa3 	.word	0x0800afa3
 800ad2c:	0800afa3 	.word	0x0800afa3
 800ad30:	0800afa3 	.word	0x0800afa3
 800ad34:	0800afa3 	.word	0x0800afa3
 800ad38:	0800afa3 	.word	0x0800afa3
 800ad3c:	0800afa3 	.word	0x0800afa3
 800ad40:	0800ad91 	.word	0x0800ad91
 800ad44:	0800afa3 	.word	0x0800afa3
 800ad48:	0800afa3 	.word	0x0800afa3
 800ad4c:	0800afa3 	.word	0x0800afa3
 800ad50:	0800afa3 	.word	0x0800afa3
 800ad54:	0800afa3 	.word	0x0800afa3
 800ad58:	0800afa3 	.word	0x0800afa3
 800ad5c:	0800afa3 	.word	0x0800afa3
 800ad60:	0800ad97 	.word	0x0800ad97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad64:	4b94      	ldr	r3, [pc, #592]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0320 	and.w	r3, r3, #32
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d009      	beq.n	800ad84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad70:	4b91      	ldr	r3, [pc, #580]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	08db      	lsrs	r3, r3, #3
 800ad76:	f003 0303 	and.w	r3, r3, #3
 800ad7a:	4a90      	ldr	r2, [pc, #576]	; (800afbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad82:	e111      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad84:	4b8d      	ldr	r3, [pc, #564]	; (800afbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad86:	61bb      	str	r3, [r7, #24]
      break;
 800ad88:	e10e      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad8a:	4b8d      	ldr	r3, [pc, #564]	; (800afc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad8c:	61bb      	str	r3, [r7, #24]
      break;
 800ad8e:	e10b      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad90:	4b8c      	ldr	r3, [pc, #560]	; (800afc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad92:	61bb      	str	r3, [r7, #24]
      break;
 800ad94:	e108      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad96:	4b88      	ldr	r3, [pc, #544]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ada0:	4b85      	ldr	r3, [pc, #532]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	091b      	lsrs	r3, r3, #4
 800ada6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adaa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800adac:	4b82      	ldr	r3, [pc, #520]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800adb6:	4b80      	ldr	r3, [pc, #512]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adba:	08db      	lsrs	r3, r3, #3
 800adbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	fb02 f303 	mul.w	r3, r2, r3
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80e1 	beq.w	800af9c <HAL_RCC_GetSysClockFreq+0x2b8>
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b02      	cmp	r3, #2
 800adde:	f000 8083 	beq.w	800aee8 <HAL_RCC_GetSysClockFreq+0x204>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	f200 80a1 	bhi.w	800af2c <HAL_RCC_GetSysClockFreq+0x248>
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <HAL_RCC_GetSysClockFreq+0x114>
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d056      	beq.n	800aea4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800adf6:	e099      	b.n	800af2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf8:	4b6f      	ldr	r3, [pc, #444]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d02d      	beq.n	800ae60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae04:	4b6c      	ldr	r3, [pc, #432]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	08db      	lsrs	r3, r3, #3
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	4a6b      	ldr	r2, [pc, #428]	; (800afbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
 800ae14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b62      	ldr	r3, [pc, #392]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae42:	eddf 5a61 	vldr	s11, [pc, #388]	; 800afc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae5e:	e087      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800afcc <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae86:	eddf 5a50 	vldr	s11, [pc, #320]	; 800afc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aea2:	e065      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eddf 6a48 	vldr	s13, [pc, #288]	; 800afd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aeb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb6:	4b40      	ldr	r3, [pc, #256]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800afc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aee6:	e043      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800afd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefa:	4b2f      	ldr	r3, [pc, #188]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800af0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800afc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af2a:	e021      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af36:	eddf 6a26 	vldr	s13, [pc, #152]	; 800afd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800af3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3e:	4b1e      	ldr	r3, [pc, #120]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800afc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af70:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af74:	0a5b      	lsrs	r3, r3, #9
 800af76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af7a:	3301      	adds	r3, #1
 800af7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	ee07 3a90 	vmov	s15, r3
 800af84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af88:	edd7 6a07 	vldr	s13, [r7, #28]
 800af8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af94:	ee17 3a90 	vmov	r3, s15
 800af98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af9a:	e005      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]
      break;
 800afa0:	e002      	b.n	800afa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800afa4:	61bb      	str	r3, [r7, #24]
      break;
 800afa6:	bf00      	nop
  }

  return sysclockfreq;
 800afa8:	69bb      	ldr	r3, [r7, #24]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3724      	adds	r7, #36	; 0x24
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	58024400 	.word	0x58024400
 800afbc:	03d09000 	.word	0x03d09000
 800afc0:	003d0900 	.word	0x003d0900
 800afc4:	017d7840 	.word	0x017d7840
 800afc8:	46000000 	.word	0x46000000
 800afcc:	4c742400 	.word	0x4c742400
 800afd0:	4a742400 	.word	0x4a742400
 800afd4:	4bbebc20 	.word	0x4bbebc20

0800afd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800afde:	f7ff fe81 	bl	800ace4 <HAL_RCC_GetSysClockFreq>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b10      	ldr	r3, [pc, #64]	; (800b028 <HAL_RCC_GetHCLKFreq+0x50>)
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	0a1b      	lsrs	r3, r3, #8
 800afea:	f003 030f 	and.w	r3, r3, #15
 800afee:	490f      	ldr	r1, [pc, #60]	; (800b02c <HAL_RCC_GetHCLKFreq+0x54>)
 800aff0:	5ccb      	ldrb	r3, [r1, r3]
 800aff2:	f003 031f 	and.w	r3, r3, #31
 800aff6:	fa22 f303 	lsr.w	r3, r2, r3
 800affa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800affc:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <HAL_RCC_GetHCLKFreq+0x50>)
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	f003 030f 	and.w	r3, r3, #15
 800b004:	4a09      	ldr	r2, [pc, #36]	; (800b02c <HAL_RCC_GetHCLKFreq+0x54>)
 800b006:	5cd3      	ldrb	r3, [r2, r3]
 800b008:	f003 031f 	and.w	r3, r3, #31
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	fa22 f303 	lsr.w	r3, r2, r3
 800b012:	4a07      	ldr	r2, [pc, #28]	; (800b030 <HAL_RCC_GetHCLKFreq+0x58>)
 800b014:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b016:	4a07      	ldr	r2, [pc, #28]	; (800b034 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b01c:	4b04      	ldr	r3, [pc, #16]	; (800b030 <HAL_RCC_GetHCLKFreq+0x58>)
 800b01e:	681b      	ldr	r3, [r3, #0]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	58024400 	.word	0x58024400
 800b02c:	08017134 	.word	0x08017134
 800b030:	24000088 	.word	0x24000088
 800b034:	24000084 	.word	0x24000084

0800b038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b03c:	f7ff ffcc 	bl	800afd8 <HAL_RCC_GetHCLKFreq>
 800b040:	4602      	mov	r2, r0
 800b042:	4b06      	ldr	r3, [pc, #24]	; (800b05c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	091b      	lsrs	r3, r3, #4
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	4904      	ldr	r1, [pc, #16]	; (800b060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b04e:	5ccb      	ldrb	r3, [r1, r3]
 800b050:	f003 031f 	and.w	r3, r3, #31
 800b054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b058:	4618      	mov	r0, r3
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	58024400 	.word	0x58024400
 800b060:	08017134 	.word	0x08017134

0800b064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b068:	f7ff ffb6 	bl	800afd8 <HAL_RCC_GetHCLKFreq>
 800b06c:	4602      	mov	r2, r0
 800b06e:	4b06      	ldr	r3, [pc, #24]	; (800b088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	4904      	ldr	r1, [pc, #16]	; (800b08c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b07a:	5ccb      	ldrb	r3, [r1, r3]
 800b07c:	f003 031f 	and.w	r3, r3, #31
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b084:	4618      	mov	r0, r3
 800b086:	bd80      	pop	{r7, pc}
 800b088:	58024400 	.word	0x58024400
 800b08c:	08017134 	.word	0x08017134

0800b090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	223f      	movs	r2, #63	; 0x3f
 800b09e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b0a0:	4b1a      	ldr	r3, [pc, #104]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0207 	and.w	r2, r3, #7
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b0ac:	4b17      	ldr	r3, [pc, #92]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b0b8:	4b14      	ldr	r3, [pc, #80]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	f003 020f 	and.w	r2, r3, #15
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b0c4:	4b11      	ldr	r3, [pc, #68]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b0e8:	4b08      	ldr	r3, [pc, #32]	; (800b10c <HAL_RCC_GetClockConfig+0x7c>)
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b0f4:	4b06      	ldr	r3, [pc, #24]	; (800b110 <HAL_RCC_GetClockConfig+0x80>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	601a      	str	r2, [r3, #0]
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	58024400 	.word	0x58024400
 800b110:	52002000 	.word	0x52002000

0800b114 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b118:	b0ca      	sub	sp, #296	; 0x128
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b120:	2300      	movs	r3, #0
 800b122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b126:	2300      	movs	r3, #0
 800b128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b134:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b138:	2500      	movs	r5, #0
 800b13a:	ea54 0305 	orrs.w	r3, r4, r5
 800b13e:	d049      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b14a:	d02f      	beq.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b14c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b150:	d828      	bhi.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b156:	d01a      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b15c:	d822      	bhi.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b166:	d007      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b168:	e01c      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b16a:	4bb8      	ldr	r3, [pc, #736]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	4ab7      	ldr	r2, [pc, #732]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b176:	e01a      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	3308      	adds	r3, #8
 800b17e:	2102      	movs	r1, #2
 800b180:	4618      	mov	r0, r3
 800b182:	f002 fb61 	bl	800d848 <RCCEx_PLL2_Config>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b18c:	e00f      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	3328      	adds	r3, #40	; 0x28
 800b194:	2102      	movs	r1, #2
 800b196:	4618      	mov	r0, r3
 800b198:	f002 fc08 	bl	800d9ac <RCCEx_PLL3_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b1a2:	e004      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1aa:	e000      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b1b6:	4ba5      	ldr	r3, [pc, #660]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c4:	4aa1      	ldr	r2, [pc, #644]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	6513      	str	r3, [r2, #80]	; 0x50
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b1e0:	f04f 0900 	mov.w	r9, #0
 800b1e4:	ea58 0309 	orrs.w	r3, r8, r9
 800b1e8:	d047      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d82a      	bhi.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b211 	.word	0x0800b211
 800b200:	0800b21f 	.word	0x0800b21f
 800b204:	0800b235 	.word	0x0800b235
 800b208:	0800b253 	.word	0x0800b253
 800b20c:	0800b253 	.word	0x0800b253
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b210:	4b8e      	ldr	r3, [pc, #568]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	4a8d      	ldr	r2, [pc, #564]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b21a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b21c:	e01a      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	3308      	adds	r3, #8
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f002 fb0e 	bl	800d848 <RCCEx_PLL2_Config>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b232:	e00f      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	3328      	adds	r3, #40	; 0x28
 800b23a:	2100      	movs	r1, #0
 800b23c:	4618      	mov	r0, r3
 800b23e:	f002 fbb5 	bl	800d9ac <RCCEx_PLL3_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b248:	e004      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b250:	e000      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b25c:	4b7b      	ldr	r3, [pc, #492]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b260:	f023 0107 	bic.w	r1, r3, #7
 800b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26a:	4a78      	ldr	r2, [pc, #480]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6513      	str	r3, [r2, #80]	; 0x50
 800b270:	e003      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b286:	f04f 0b00 	mov.w	fp, #0
 800b28a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b28e:	d04c      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b29a:	d030      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a0:	d829      	bhi.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b2a2:	2bc0      	cmp	r3, #192	; 0xc0
 800b2a4:	d02d      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b2a6:	2bc0      	cmp	r3, #192	; 0xc0
 800b2a8:	d825      	bhi.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b2aa:	2b80      	cmp	r3, #128	; 0x80
 800b2ac:	d018      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b2ae:	2b80      	cmp	r3, #128	; 0x80
 800b2b0:	d821      	bhi.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d002      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b2b6:	2b40      	cmp	r3, #64	; 0x40
 800b2b8:	d007      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b2ba:	e01c      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2bc:	4b63      	ldr	r3, [pc, #396]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a62      	ldr	r2, [pc, #392]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b2c8:	e01c      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f002 fab8 	bl	800d848 <RCCEx_PLL2_Config>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b2de:	e011      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e4:	3328      	adds	r3, #40	; 0x28
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f002 fb5f 	bl	800d9ac <RCCEx_PLL3_Config>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b2f4:	e006      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2fc:	e002      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b2fe:	bf00      	nop
 800b300:	e000      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b302:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b30c:	4b4f      	ldr	r3, [pc, #316]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b310:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b31a:	4a4c      	ldr	r2, [pc, #304]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b31c:	430b      	orrs	r3, r1
 800b31e:	6513      	str	r3, [r2, #80]	; 0x50
 800b320:	e003      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b33a:	2300      	movs	r3, #0
 800b33c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b340:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b344:	460b      	mov	r3, r1
 800b346:	4313      	orrs	r3, r2
 800b348:	d053      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b34e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b356:	d035      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b35c:	d82e      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b35e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b362:	d031      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b364:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b368:	d828      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b36a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b36e:	d01a      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b374:	d822      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b37a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b37e:	d007      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b380:	e01c      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b382:	4b32      	ldr	r3, [pc, #200]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b386:	4a31      	ldr	r2, [pc, #196]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b38c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b38e:	e01c      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	3308      	adds	r3, #8
 800b396:	2100      	movs	r1, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 fa55 	bl	800d848 <RCCEx_PLL2_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b3a4:	e011      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3aa:	3328      	adds	r3, #40	; 0x28
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f002 fafc 	bl	800d9ac <RCCEx_PLL3_Config>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3ba:	e006      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3c2:	e002      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b3c4:	bf00      	nop
 800b3c6:	e000      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b3c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10b      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b3d2:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3e2:	4a1a      	ldr	r2, [pc, #104]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b3e8:	e003      	b.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b3fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b402:	2300      	movs	r3, #0
 800b404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b408:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b40c:	460b      	mov	r3, r1
 800b40e:	4313      	orrs	r3, r2
 800b410:	d056      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b41a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b41e:	d038      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b424:	d831      	bhi.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b426:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b42a:	d034      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b42c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b430:	d82b      	bhi.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b436:	d01d      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b43c:	d825      	bhi.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d006      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b442:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b446:	d00a      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b448:	e01f      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b44a:	bf00      	nop
 800b44c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b450:	4ba2      	ldr	r3, [pc, #648]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4aa1      	ldr	r2, [pc, #644]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b45c:	e01c      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b462:	3308      	adds	r3, #8
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f002 f9ee 	bl	800d848 <RCCEx_PLL2_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b472:	e011      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b478:	3328      	adds	r3, #40	; 0x28
 800b47a:	2100      	movs	r1, #0
 800b47c:	4618      	mov	r0, r3
 800b47e:	f002 fa95 	bl	800d9ac <RCCEx_PLL3_Config>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b488:	e006      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b490:	e002      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b492:	bf00      	nop
 800b494:	e000      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b496:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4a0:	4b8e      	ldr	r3, [pc, #568]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b4b0:	4a8a      	ldr	r2, [pc, #552]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b4b6:	e003      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b4cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	d03a      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e6:	2b30      	cmp	r3, #48	; 0x30
 800b4e8:	d01f      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b4ea:	2b30      	cmp	r3, #48	; 0x30
 800b4ec:	d819      	bhi.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	d00c      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d815      	bhi.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d019      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b4fa:	2b10      	cmp	r3, #16
 800b4fc:	d111      	bne.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4fe:	4b77      	ldr	r3, [pc, #476]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	4a76      	ldr	r2, [pc, #472]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b50a:	e011      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b510:	3308      	adds	r3, #8
 800b512:	2102      	movs	r1, #2
 800b514:	4618      	mov	r0, r3
 800b516:	f002 f997 	bl	800d848 <RCCEx_PLL2_Config>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b520:	e006      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b528:	e002      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b52a:	bf00      	nop
 800b52c:	e000      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b538:	4b68      	ldr	r3, [pc, #416]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b53a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b546:	4a65      	ldr	r2, [pc, #404]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b548:	430b      	orrs	r3, r1
 800b54a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b54c:	e003      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b562:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b566:	2300      	movs	r3, #0
 800b568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b56c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d051      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b57c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b580:	d035      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b586:	d82e      	bhi.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b58c:	d031      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b58e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b592:	d828      	bhi.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b598:	d01a      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b59a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b59e:	d822      	bhi.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a8:	d007      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b5aa:	e01c      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ac:	4b4b      	ldr	r3, [pc, #300]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	4a4a      	ldr	r2, [pc, #296]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b5b8:	e01c      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	3308      	adds	r3, #8
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f002 f940 	bl	800d848 <RCCEx_PLL2_Config>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b5ce:	e011      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d4:	3328      	adds	r3, #40	; 0x28
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f002 f9e7 	bl	800d9ac <RCCEx_PLL3_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b5e4:	e006      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5ec:	e002      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b5ee:	bf00      	nop
 800b5f0:	e000      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b5f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5fc:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b600:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b60a:	4a34      	ldr	r2, [pc, #208]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b60c:	430b      	orrs	r3, r1
 800b60e:	6513      	str	r3, [r2, #80]	; 0x50
 800b610:	e003      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b62a:	2300      	movs	r3, #0
 800b62c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b630:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b634:	460b      	mov	r3, r1
 800b636:	4313      	orrs	r3, r2
 800b638:	d056      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b644:	d033      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b64a:	d82c      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b64c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b650:	d02f      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b656:	d826      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b65c:	d02b      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b65e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b662:	d820      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b668:	d012      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b66a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b66e:	d81a      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d022      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b678:	d115      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67e:	3308      	adds	r3, #8
 800b680:	2101      	movs	r1, #1
 800b682:	4618      	mov	r0, r3
 800b684:	f002 f8e0 	bl	800d848 <RCCEx_PLL2_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b68e:	e015      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b694:	3328      	adds	r3, #40	; 0x28
 800b696:	2101      	movs	r1, #1
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 f987 	bl	800d9ac <RCCEx_PLL3_Config>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b6a4:	e00a      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ac:	e006      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b6ae:	bf00      	nop
 800b6b0:	e004      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b6b2:	bf00      	nop
 800b6b4:	e002      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b6b6:	bf00      	nop
 800b6b8:	e000      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10d      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b6c4:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6d2:	4a02      	ldr	r2, [pc, #8]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	6513      	str	r3, [r2, #80]	; 0x50
 800b6d8:	e006      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b6da:	bf00      	nop
 800b6dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b6f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b702:	460b      	mov	r3, r1
 800b704:	4313      	orrs	r3, r2
 800b706:	d055      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b714:	d033      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b71a:	d82c      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b720:	d02f      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b726:	d826      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b72c:	d02b      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b72e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b732:	d820      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b738:	d012      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b73e:	d81a      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b740:	2b00      	cmp	r3, #0
 800b742:	d022      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b748:	d115      	bne.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	3308      	adds	r3, #8
 800b750:	2101      	movs	r1, #1
 800b752:	4618      	mov	r0, r3
 800b754:	f002 f878 	bl	800d848 <RCCEx_PLL2_Config>
 800b758:	4603      	mov	r3, r0
 800b75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b75e:	e015      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	3328      	adds	r3, #40	; 0x28
 800b766:	2101      	movs	r1, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	f002 f91f 	bl	800d9ac <RCCEx_PLL3_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b774:	e00a      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b77c:	e006      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b77e:	bf00      	nop
 800b780:	e004      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b782:	bf00      	nop
 800b784:	e002      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b786:	bf00      	nop
 800b788:	e000      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b78a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b78c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10b      	bne.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b794:	4ba3      	ldr	r3, [pc, #652]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b798:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7a4:	4a9f      	ldr	r2, [pc, #636]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a6:	430b      	orrs	r3, r1
 800b7a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b7aa:	e003      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b7c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	d037      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7de:	d00e      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b7e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e4:	d816      	bhi.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d018      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7ee:	d111      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f0:	4b8c      	ldr	r3, [pc, #560]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a8b      	ldr	r2, [pc, #556]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7fc:	e00f      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b802:	3308      	adds	r3, #8
 800b804:	2101      	movs	r1, #1
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f81e 	bl	800d848 <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b812:	e004      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b81a:	e000      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b826:	4b7f      	ldr	r3, [pc, #508]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b834:	4a7b      	ldr	r2, [pc, #492]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b836:	430b      	orrs	r3, r1
 800b838:	6513      	str	r3, [r2, #80]	; 0x50
 800b83a:	e003      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b854:	2300      	movs	r3, #0
 800b856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b85a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b85e:	460b      	mov	r3, r1
 800b860:	4313      	orrs	r3, r2
 800b862:	d039      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d81c      	bhi.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b86e:	a201      	add	r2, pc, #4	; (adr r2, 800b874 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b874:	0800b8b1 	.word	0x0800b8b1
 800b878:	0800b885 	.word	0x0800b885
 800b87c:	0800b893 	.word	0x0800b893
 800b880:	0800b8b1 	.word	0x0800b8b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b884:	4b67      	ldr	r3, [pc, #412]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	4a66      	ldr	r2, [pc, #408]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b88a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b890:	e00f      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b896:	3308      	adds	r3, #8
 800b898:	2102      	movs	r1, #2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 ffd4 	bl	800d848 <RCCEx_PLL2_Config>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b8a6:	e004      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ae:	e000      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b8b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b8ba:	4b5a      	ldr	r3, [pc, #360]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8be:	f023 0103 	bic.w	r1, r3, #3
 800b8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8c8:	4a56      	ldr	r2, [pc, #344]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8ce:	e003      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b8e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	f000 809f 	beq.w	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8fa:	4b4b      	ldr	r3, [pc, #300]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a4a      	ldr	r2, [pc, #296]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b906:	f7f8 fc09 	bl	800411c <HAL_GetTick>
 800b90a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b90e:	e00b      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b910:	f7f8 fc04 	bl	800411c <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b64      	cmp	r3, #100	; 0x64
 800b91e:	d903      	bls.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b926:	e005      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b928:	4b3f      	ldr	r3, [pc, #252]	; (800ba28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0ed      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d179      	bne.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b93c:	4b39      	ldr	r3, [pc, #228]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b93e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b948:	4053      	eors	r3, r2
 800b94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d015      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b952:	4b34      	ldr	r3, [pc, #208]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b95a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b95e:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b962:	4a30      	ldr	r2, [pc, #192]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b968:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b96a:	4b2e      	ldr	r3, [pc, #184]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96e:	4a2d      	ldr	r2, [pc, #180]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b974:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b976:	4a2b      	ldr	r2, [pc, #172]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b978:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b97c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98a:	d118      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98c:	f7f8 fbc6 	bl	800411c <HAL_GetTick>
 800b990:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b994:	e00d      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b996:	f7f8 fbc1 	bl	800411c <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d903      	bls.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b9b0:	e005      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0eb      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d129      	bne.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9d6:	d10e      	bne.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b9d8:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9e8:	091a      	lsrs	r2, r3, #4
 800b9ea:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	4a0d      	ldr	r2, [pc, #52]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	6113      	str	r3, [r2, #16]
 800b9f4:	e005      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	4a0a      	ldr	r2, [pc, #40]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba00:	6113      	str	r3, [r2, #16]
 800ba02:	4b08      	ldr	r3, [pc, #32]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba12:	4a04      	ldr	r2, [pc, #16]	; (800ba24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba14:	430b      	orrs	r3, r1
 800ba16:	6713      	str	r3, [r2, #112]	; 0x70
 800ba18:	e00e      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ba22:	e009      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ba24:	58024400 	.word	0x58024400
 800ba28:	58024800 	.word	0x58024800
 800ba2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f002 0301 	and.w	r3, r2, #1
 800ba44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba52:	460b      	mov	r3, r1
 800ba54:	4313      	orrs	r3, r2
 800ba56:	f000 8089 	beq.w	800bb6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ba5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba60:	2b28      	cmp	r3, #40	; 0x28
 800ba62:	d86b      	bhi.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ba64:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800bb45 	.word	0x0800bb45
 800ba70:	0800bb3d 	.word	0x0800bb3d
 800ba74:	0800bb3d 	.word	0x0800bb3d
 800ba78:	0800bb3d 	.word	0x0800bb3d
 800ba7c:	0800bb3d 	.word	0x0800bb3d
 800ba80:	0800bb3d 	.word	0x0800bb3d
 800ba84:	0800bb3d 	.word	0x0800bb3d
 800ba88:	0800bb3d 	.word	0x0800bb3d
 800ba8c:	0800bb11 	.word	0x0800bb11
 800ba90:	0800bb3d 	.word	0x0800bb3d
 800ba94:	0800bb3d 	.word	0x0800bb3d
 800ba98:	0800bb3d 	.word	0x0800bb3d
 800ba9c:	0800bb3d 	.word	0x0800bb3d
 800baa0:	0800bb3d 	.word	0x0800bb3d
 800baa4:	0800bb3d 	.word	0x0800bb3d
 800baa8:	0800bb3d 	.word	0x0800bb3d
 800baac:	0800bb27 	.word	0x0800bb27
 800bab0:	0800bb3d 	.word	0x0800bb3d
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb3d 	.word	0x0800bb3d
 800bacc:	0800bb45 	.word	0x0800bb45
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	0800bb3d 	.word	0x0800bb3d
 800badc:	0800bb3d 	.word	0x0800bb3d
 800bae0:	0800bb3d 	.word	0x0800bb3d
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb3d 	.word	0x0800bb3d
 800baec:	0800bb45 	.word	0x0800bb45
 800baf0:	0800bb3d 	.word	0x0800bb3d
 800baf4:	0800bb3d 	.word	0x0800bb3d
 800baf8:	0800bb3d 	.word	0x0800bb3d
 800bafc:	0800bb3d 	.word	0x0800bb3d
 800bb00:	0800bb3d 	.word	0x0800bb3d
 800bb04:	0800bb3d 	.word	0x0800bb3d
 800bb08:	0800bb3d 	.word	0x0800bb3d
 800bb0c:	0800bb45 	.word	0x0800bb45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	3308      	adds	r3, #8
 800bb16:	2101      	movs	r1, #1
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 fe95 	bl	800d848 <RCCEx_PLL2_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb24:	e00f      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2a:	3328      	adds	r3, #40	; 0x28
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 ff3c 	bl	800d9ac <RCCEx_PLL3_Config>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bb3a:	e004      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb42:	e000      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bb44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10a      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bb4e:	4bbf      	ldr	r3, [pc, #764]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb5c:	4abb      	ldr	r2, [pc, #748]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	6553      	str	r3, [r2, #84]	; 0x54
 800bb62:	e003      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f002 0302 	and.w	r3, r2, #2
 800bb78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb86:	460b      	mov	r3, r1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d041      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d824      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbe9 	.word	0x0800bbe9
 800bba0:	0800bbb5 	.word	0x0800bbb5
 800bba4:	0800bbcb 	.word	0x0800bbcb
 800bba8:	0800bbe9 	.word	0x0800bbe9
 800bbac:	0800bbe9 	.word	0x0800bbe9
 800bbb0:	0800bbe9 	.word	0x0800bbe9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb8:	3308      	adds	r3, #8
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fe43 	bl	800d848 <RCCEx_PLL2_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bbc8:	e00f      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbce:	3328      	adds	r3, #40	; 0x28
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f001 feea 	bl	800d9ac <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bbde:	e004      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbe6:	e000      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bbf2:	4b96      	ldr	r3, [pc, #600]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf6:	f023 0107 	bic.w	r1, r3, #7
 800bbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc00:	4a92      	ldr	r2, [pc, #584]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc02:	430b      	orrs	r3, r1
 800bc04:	6553      	str	r3, [r2, #84]	; 0x54
 800bc06:	e003      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f002 0304 	and.w	r3, r2, #4
 800bc1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc20:	2300      	movs	r3, #0
 800bc22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	d044      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc38:	2b05      	cmp	r3, #5
 800bc3a:	d825      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bc3c:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc42:	bf00      	nop
 800bc44:	0800bc91 	.word	0x0800bc91
 800bc48:	0800bc5d 	.word	0x0800bc5d
 800bc4c:	0800bc73 	.word	0x0800bc73
 800bc50:	0800bc91 	.word	0x0800bc91
 800bc54:	0800bc91 	.word	0x0800bc91
 800bc58:	0800bc91 	.word	0x0800bc91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc60:	3308      	adds	r3, #8
 800bc62:	2101      	movs	r1, #1
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 fdef 	bl	800d848 <RCCEx_PLL2_Config>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc70:	e00f      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	3328      	adds	r3, #40	; 0x28
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f001 fe96 	bl	800d9ac <RCCEx_PLL3_Config>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc86:	e004      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc8e:	e000      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc9a:	4b6c      	ldr	r3, [pc, #432]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc9e:	f023 0107 	bic.w	r1, r3, #7
 800bca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcaa:	4a68      	ldr	r2, [pc, #416]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcac:	430b      	orrs	r3, r1
 800bcae:	6593      	str	r3, [r2, #88]	; 0x58
 800bcb0:	e003      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	f002 0320 	and.w	r3, r2, #32
 800bcc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcca:	2300      	movs	r3, #0
 800bccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	d055      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bce6:	d033      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcec:	d82c      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf2:	d02f      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bcf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf8:	d826      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bcfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcfe:	d02b      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bd00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd04:	d820      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd0a:	d012      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bd0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd10:	d81a      	bhi.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d022      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bd16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd1a:	d115      	bne.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd20:	3308      	adds	r3, #8
 800bd22:	2100      	movs	r1, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 fd8f 	bl	800d848 <RCCEx_PLL2_Config>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd30:	e015      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	3328      	adds	r3, #40	; 0x28
 800bd38:	2102      	movs	r1, #2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fe36 	bl	800d9ac <RCCEx_PLL3_Config>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bd46:	e00a      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd4e:	e006      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd50:	bf00      	nop
 800bd52:	e004      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd54:	bf00      	nop
 800bd56:	e002      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd58:	bf00      	nop
 800bd5a:	e000      	b.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bd5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10b      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd66:	4b39      	ldr	r3, [pc, #228]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd76:	4a35      	ldr	r2, [pc, #212]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	6553      	str	r3, [r2, #84]	; 0x54
 800bd7c:	e003      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd96:	2300      	movs	r3, #0
 800bd98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4313      	orrs	r3, r2
 800bda4:	d058      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bdb2:	d033      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bdb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bdb8:	d82c      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbe:	d02f      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bdc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc4:	d826      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bdc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdca:	d02b      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bdcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdd0:	d820      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bdd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd6:	d012      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bdd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bddc:	d81a      	bhi.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d022      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bde2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde6:	d115      	bne.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdec:	3308      	adds	r3, #8
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f001 fd29 	bl	800d848 <RCCEx_PLL2_Config>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bdfc:	e015      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be02:	3328      	adds	r3, #40	; 0x28
 800be04:	2102      	movs	r1, #2
 800be06:	4618      	mov	r0, r3
 800be08:	f001 fdd0 	bl	800d9ac <RCCEx_PLL3_Config>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800be12:	e00a      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be1a:	e006      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be1c:	bf00      	nop
 800be1e:	e004      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be20:	bf00      	nop
 800be22:	e002      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be24:	bf00      	nop
 800be26:	e000      	b.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800be28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10e      	bne.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be32:	4b06      	ldr	r3, [pc, #24]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be36:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800be3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be42:	4a02      	ldr	r2, [pc, #8]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be44:	430b      	orrs	r3, r1
 800be46:	6593      	str	r3, [r2, #88]	; 0x58
 800be48:	e006      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800be4a:	bf00      	nop
 800be4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800be64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be68:	2300      	movs	r3, #0
 800be6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be72:	460b      	mov	r3, r1
 800be74:	4313      	orrs	r3, r2
 800be76:	d055      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be84:	d033      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be8a:	d82c      	bhi.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be90:	d02f      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be96:	d826      	bhi.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be9c:	d02b      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bea2:	d820      	bhi.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bea8:	d012      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800beaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800beae:	d81a      	bhi.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d022      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800beb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb8:	d115      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bebe:	3308      	adds	r3, #8
 800bec0:	2100      	movs	r1, #0
 800bec2:	4618      	mov	r0, r3
 800bec4:	f001 fcc0 	bl	800d848 <RCCEx_PLL2_Config>
 800bec8:	4603      	mov	r3, r0
 800beca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bece:	e015      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed4:	3328      	adds	r3, #40	; 0x28
 800bed6:	2102      	movs	r1, #2
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 fd67 	bl	800d9ac <RCCEx_PLL3_Config>
 800bede:	4603      	mov	r3, r0
 800bee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bee4:	e00a      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beec:	e006      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800beee:	bf00      	nop
 800bef0:	e004      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bef2:	bf00      	nop
 800bef4:	e002      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bef6:	bf00      	nop
 800bef8:	e000      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800befa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800befc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10b      	bne.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bf04:	4ba1      	ldr	r3, [pc, #644]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf08:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf14:	4a9d      	ldr	r2, [pc, #628]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf16:	430b      	orrs	r3, r1
 800bf18:	6593      	str	r3, [r2, #88]	; 0x58
 800bf1a:	e003      	b.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bf24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f002 0308 	and.w	r3, r2, #8
 800bf30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf34:	2300      	movs	r3, #0
 800bf36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4313      	orrs	r3, r2
 800bf42:	d01e      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bf44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf50:	d10c      	bne.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf56:	3328      	adds	r3, #40	; 0x28
 800bf58:	2102      	movs	r1, #2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 fd26 	bl	800d9ac <RCCEx_PLL3_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf6c:	4b87      	ldr	r3, [pc, #540]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7c:	4a83      	ldr	r2, [pc, #524]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf7e:	430b      	orrs	r3, r1
 800bf80:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f002 0310 	and.w	r3, r2, #16
 800bf8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf92:	2300      	movs	r3, #0
 800bf94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	d01e      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfae:	d10c      	bne.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	3328      	adds	r3, #40	; 0x28
 800bfb6:	2102      	movs	r1, #2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 fcf7 	bl	800d9ac <RCCEx_PLL3_Config>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bfca:	4b70      	ldr	r3, [pc, #448]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfda:	4a6c      	ldr	r2, [pc, #432]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bfec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bff0:	2300      	movs	r3, #0
 800bff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bff6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bffa:	460b      	mov	r3, r1
 800bffc:	4313      	orrs	r3, r2
 800bffe:	d03e      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00c:	d022      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c012:	d81b      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c01c:	d00b      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c01e:	e015      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c024:	3308      	adds	r3, #8
 800c026:	2100      	movs	r1, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 fc0d 	bl	800d848 <RCCEx_PLL2_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c034:	e00f      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03a:	3328      	adds	r3, #40	; 0x28
 800c03c:	2102      	movs	r1, #2
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 fcb4 	bl	800d9ac <RCCEx_PLL3_Config>
 800c044:	4603      	mov	r3, r0
 800c046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c04a:	e004      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c052:	e000      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c05e:	4b4b      	ldr	r3, [pc, #300]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c062:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c06e:	4a47      	ldr	r2, [pc, #284]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c070:	430b      	orrs	r3, r1
 800c072:	6593      	str	r3, [r2, #88]	; 0x58
 800c074:	e003      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c07a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c08a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c08c:	2300      	movs	r3, #0
 800c08e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c090:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c094:	460b      	mov	r3, r1
 800c096:	4313      	orrs	r3, r2
 800c098:	d03b      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c0a6:	d01f      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c0a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c0ac:	d818      	bhi.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c0ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0b2:	d003      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c0b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0b8:	d007      	beq.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c0ba:	e011      	b.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0bc:	4b33      	ldr	r3, [pc, #204]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	4a32      	ldr	r2, [pc, #200]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c0c8:	e00f      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ce:	3328      	adds	r3, #40	; 0x28
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f001 fc6a 	bl	800d9ac <RCCEx_PLL3_Config>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c0de:	e004      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0e6:	e000      	b.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c0e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10b      	bne.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c0f2:	4b26      	ldr	r3, [pc, #152]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c102:	4a22      	ldr	r2, [pc, #136]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c104:	430b      	orrs	r3, r1
 800c106:	6553      	str	r3, [r2, #84]	; 0x54
 800c108:	e003      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c11e:	673b      	str	r3, [r7, #112]	; 0x70
 800c120:	2300      	movs	r3, #0
 800c122:	677b      	str	r3, [r7, #116]	; 0x74
 800c124:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c128:	460b      	mov	r3, r1
 800c12a:	4313      	orrs	r3, r2
 800c12c:	d034      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c13c:	d007      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c13e:	e011      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c140:	4b12      	ldr	r3, [pc, #72]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	4a11      	ldr	r2, [pc, #68]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c14a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c14c:	e00e      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c152:	3308      	adds	r3, #8
 800c154:	2102      	movs	r1, #2
 800c156:	4618      	mov	r0, r3
 800c158:	f001 fb76 	bl	800d848 <RCCEx_PLL2_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c162:	e003      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c16a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10d      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c174:	4b05      	ldr	r3, [pc, #20]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c182:	4a02      	ldr	r2, [pc, #8]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c184:	430b      	orrs	r3, r1
 800c186:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c188:	e006      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c18a:	bf00      	nop
 800c18c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c1a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	d00c      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b8:	3328      	adds	r3, #40	; 0x28
 800c1ba:	2102      	movs	r1, #2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f001 fbf5 	bl	800d9ac <RCCEx_PLL3_Config>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c1da:	663b      	str	r3, [r7, #96]	; 0x60
 800c1dc:	2300      	movs	r3, #0
 800c1de:	667b      	str	r3, [r7, #100]	; 0x64
 800c1e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	d038      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1f6:	d018      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c1f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1fc:	d811      	bhi.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c202:	d014      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c208:	d80b      	bhi.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d011      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	d106      	bne.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c214:	4bc3      	ldr	r3, [pc, #780]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	4ac2      	ldr	r2, [pc, #776]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c21a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c21e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c220:	e008      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c228:	e004      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c22a:	bf00      	nop
 800c22c:	e002      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c22e:	bf00      	nop
 800c230:	e000      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c232:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10b      	bne.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c23c:	4bb9      	ldr	r3, [pc, #740]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c240:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c24c:	4ab5      	ldr	r2, [pc, #724]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c24e:	430b      	orrs	r3, r1
 800c250:	6553      	str	r3, [r2, #84]	; 0x54
 800c252:	e003      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c268:	65bb      	str	r3, [r7, #88]	; 0x58
 800c26a:	2300      	movs	r3, #0
 800c26c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c26e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c272:	460b      	mov	r3, r1
 800c274:	4313      	orrs	r3, r2
 800c276:	d009      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c278:	4baa      	ldr	r3, [pc, #680]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c286:	4aa7      	ldr	r2, [pc, #668]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c288:	430b      	orrs	r3, r1
 800c28a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c298:	653b      	str	r3, [r7, #80]	; 0x50
 800c29a:	2300      	movs	r3, #0
 800c29c:	657b      	str	r3, [r7, #84]	; 0x54
 800c29e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	d00a      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c2a8:	4b9e      	ldr	r3, [pc, #632]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c2b8:	4a9a      	ldr	r2, [pc, #616]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	d009      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c2da:	4b92      	ldr	r3, [pc, #584]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e8:	4a8e      	ldr	r2, [pc, #568]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c2fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c300:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c304:	460b      	mov	r3, r1
 800c306:	4313      	orrs	r3, r2
 800c308:	d00e      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c30a:	4b86      	ldr	r3, [pc, #536]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	4a85      	ldr	r2, [pc, #532]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c310:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c314:	6113      	str	r3, [r2, #16]
 800c316:	4b83      	ldr	r3, [pc, #524]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c318:	6919      	ldr	r1, [r3, #16]
 800c31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c322:	4a80      	ldr	r2, [pc, #512]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c324:	430b      	orrs	r3, r1
 800c326:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c334:	63bb      	str	r3, [r7, #56]	; 0x38
 800c336:	2300      	movs	r3, #0
 800c338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c33a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c33e:	460b      	mov	r3, r1
 800c340:	4313      	orrs	r3, r2
 800c342:	d009      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c344:	4b77      	ldr	r3, [pc, #476]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c348:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c352:	4a74      	ldr	r2, [pc, #464]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c354:	430b      	orrs	r3, r1
 800c356:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c364:	633b      	str	r3, [r7, #48]	; 0x30
 800c366:	2300      	movs	r3, #0
 800c368:	637b      	str	r3, [r7, #52]	; 0x34
 800c36a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c36e:	460b      	mov	r3, r1
 800c370:	4313      	orrs	r3, r2
 800c372:	d00a      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c374:	4b6b      	ldr	r3, [pc, #428]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c378:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c384:	4a67      	ldr	r2, [pc, #412]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c386:	430b      	orrs	r3, r1
 800c388:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	2100      	movs	r1, #0
 800c394:	62b9      	str	r1, [r7, #40]	; 0x28
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c39c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	d011      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3aa:	3308      	adds	r3, #8
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 fa4a 	bl	800d848 <RCCEx_PLL2_Config>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d003      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	6239      	str	r1, [r7, #32]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	627b      	str	r3, [r7, #36]	; 0x24
 800c3dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	d011      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 fa2a 	bl	800d848 <RCCEx_PLL2_Config>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	2100      	movs	r1, #0
 800c414:	61b9      	str	r1, [r7, #24]
 800c416:	f003 0304 	and.w	r3, r3, #4
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c420:	460b      	mov	r3, r1
 800c422:	4313      	orrs	r3, r2
 800c424:	d011      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42a:	3308      	adds	r3, #8
 800c42c:	2102      	movs	r1, #2
 800c42e:	4618      	mov	r0, r3
 800c430:	f001 fa0a 	bl	800d848 <RCCEx_PLL2_Config>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c43a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	2100      	movs	r1, #0
 800c454:	6139      	str	r1, [r7, #16]
 800c456:	f003 0308 	and.w	r3, r3, #8
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c460:	460b      	mov	r3, r1
 800c462:	4313      	orrs	r3, r2
 800c464:	d011      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c46a:	3328      	adds	r3, #40	; 0x28
 800c46c:	2100      	movs	r1, #0
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 fa9c 	bl	800d9ac <RCCEx_PLL3_Config>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	2100      	movs	r1, #0
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	d011      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4aa:	3328      	adds	r3, #40	; 0x28
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 fa7c 	bl	800d9ac <RCCEx_PLL3_Config>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6039      	str	r1, [r7, #0]
 800c4d6:	f003 0320 	and.w	r3, r3, #32
 800c4da:	607b      	str	r3, [r7, #4]
 800c4dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	d011      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ea:	3328      	adds	r3, #40	; 0x28
 800c4ec:	2102      	movs	r1, #2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f001 fa5c 	bl	800d9ac <RCCEx_PLL3_Config>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c50a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	e000      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
}
 800c518:	4618      	mov	r0, r3
 800c51a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c51e:	46bd      	mov	sp, r7
 800c520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c524:	58024400 	.word	0x58024400

0800c528 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b090      	sub	sp, #64	; 0x40
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c53a:	430b      	orrs	r3, r1
 800c53c:	f040 8094 	bne.w	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c540:	4b9e      	ldr	r3, [pc, #632]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	f200 8087 	bhi.w	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c56d 	.word	0x0800c56d
 800c55c:	0800c595 	.word	0x0800c595
 800c560:	0800c5bd 	.word	0x0800c5bd
 800c564:	0800c659 	.word	0x0800c659
 800c568:	0800c5e5 	.word	0x0800c5e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c56c:	4b93      	ldr	r3, [pc, #588]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c578:	d108      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c57a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c57e:	4618      	mov	r0, r3
 800c580:	f001 f810 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c588:	f000 bd45 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c590:	f000 bd41 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c594:	4b89      	ldr	r3, [pc, #548]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c59c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5a0:	d108      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5a2:	f107 0318 	add.w	r3, r7, #24
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 fd54 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b0:	f000 bd31 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b8:	f000 bd2d 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5bc:	4b7f      	ldr	r3, [pc, #508]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c8:	d108      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ca:	f107 030c 	add.w	r3, r7, #12
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fe94 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	f000 bd1d 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	f000 bd19 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5e4:	4b75      	ldr	r3, [pc, #468]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5ee:	4b73      	ldr	r3, [pc, #460]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 0304 	and.w	r3, r3, #4
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	d10c      	bne.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d109      	bne.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c600:	4b6e      	ldr	r3, [pc, #440]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	08db      	lsrs	r3, r3, #3
 800c606:	f003 0303 	and.w	r3, r3, #3
 800c60a:	4a6d      	ldr	r2, [pc, #436]	; (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c60c:	fa22 f303 	lsr.w	r3, r2, r3
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c612:	e01f      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c614:	4b69      	ldr	r3, [pc, #420]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c620:	d106      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c628:	d102      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c62a:	4b66      	ldr	r3, [pc, #408]	; (800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62e:	e011      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c630:	4b62      	ldr	r3, [pc, #392]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c63c:	d106      	bne.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c644:	d102      	bne.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c646:	4b60      	ldr	r3, [pc, #384]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c64a:	e003      	b.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c650:	f000 bce1 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c654:	f000 bcdf 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c658:	4b5c      	ldr	r3, [pc, #368]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c65c:	f000 bcdb 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c664:	f000 bcd7 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c670:	430b      	orrs	r3, r1
 800c672:	f040 80ad 	bne.w	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c676:	4b51      	ldr	r3, [pc, #324]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c67a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c67e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c686:	d056      	beq.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c68e:	f200 8090 	bhi.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c694:	2bc0      	cmp	r3, #192	; 0xc0
 800c696:	f000 8088 	beq.w	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	2bc0      	cmp	r3, #192	; 0xc0
 800c69e:	f200 8088 	bhi.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	2b80      	cmp	r3, #128	; 0x80
 800c6a6:	d032      	beq.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	2b80      	cmp	r3, #128	; 0x80
 800c6ac:	f200 8081 	bhi.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d003      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	d014      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c6bc:	e079      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6be:	4b3f      	ldr	r3, [pc, #252]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6ca:	d108      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 ff67 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6da:	f000 bc9c 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e2:	f000 bc98 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6e6:	4b35      	ldr	r3, [pc, #212]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f2:	d108      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f4:	f107 0318 	add.w	r3, r7, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fcab 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c702:	f000 bc88 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70a:	f000 bc84 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c70e:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71a:	d108      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	4618      	mov	r0, r3
 800c722:	f000 fdeb 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c72a:	f000 bc74 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c732:	f000 bc70 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c736:	4b21      	ldr	r3, [pc, #132]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c73e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c740:	4b1e      	ldr	r3, [pc, #120]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 0304 	and.w	r3, r3, #4
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d10c      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d109      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c752:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	08db      	lsrs	r3, r3, #3
 800c758:	f003 0303 	and.w	r3, r3, #3
 800c75c:	4a18      	ldr	r2, [pc, #96]	; (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c75e:	fa22 f303 	lsr.w	r3, r2, r3
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c764:	e01f      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c766:	4b15      	ldr	r3, [pc, #84]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c772:	d106      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c77a:	d102      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c77c:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c780:	e011      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c782:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c78a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c78e:	d106      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c796:	d102      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c798:	4b0b      	ldr	r3, [pc, #44]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c79c:	e003      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7a2:	f000 bc38 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7a6:	f000 bc36 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7aa:	4b08      	ldr	r3, [pc, #32]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ae:	f000 bc32 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b6:	f000 bc2e 	b.w	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7ba:	bf00      	nop
 800c7bc:	58024400 	.word	0x58024400
 800c7c0:	03d09000 	.word	0x03d09000
 800c7c4:	003d0900 	.word	0x003d0900
 800c7c8:	017d7840 	.word	0x017d7840
 800c7cc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c7d8:	430b      	orrs	r3, r1
 800c7da:	f040 809c 	bne.w	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c7de:	4b9e      	ldr	r3, [pc, #632]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c7e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7ee:	d054      	beq.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7f6:	f200 808b 	bhi.w	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c800:	f000 8083 	beq.w	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c80a:	f200 8081 	bhi.w	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c814:	d02f      	beq.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c81c:	d878      	bhi.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c82a:	d012      	beq.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c82c:	e070      	b.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c82e:	4b8a      	ldr	r3, [pc, #552]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c83a:	d107      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c83c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c840:	4618      	mov	r0, r3
 800c842:	f000 feaf 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84a:	e3e4      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c850:	e3e1      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c852:	4b81      	ldr	r3, [pc, #516]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c85a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c85e:	d107      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c860:	f107 0318 	add.w	r3, r7, #24
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fbf5 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86e:	e3d2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c874:	e3cf      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c876:	4b78      	ldr	r3, [pc, #480]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c87e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c882:	d107      	bne.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c884:	f107 030c 	add.w	r3, r7, #12
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fd37 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c892:	e3c0      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c898:	e3bd      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c89a:	4b6f      	ldr	r3, [pc, #444]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c89c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c89e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8a4:	4b6c      	ldr	r3, [pc, #432]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d10c      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d109      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8b6:	4b68      	ldr	r3, [pc, #416]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	08db      	lsrs	r3, r3, #3
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	4a66      	ldr	r2, [pc, #408]	; (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c8:	e01e      	b.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8ca:	4b63      	ldr	r3, [pc, #396]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8d6:	d106      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8de:	d102      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8e0:	4b5f      	ldr	r3, [pc, #380]	; (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e4:	e010      	b.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8e6:	4b5c      	ldr	r3, [pc, #368]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f2:	d106      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8fa:	d102      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8fc:	4b59      	ldr	r3, [pc, #356]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c900:	e002      	b.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c906:	e386      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c908:	e385      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c90a:	4b57      	ldr	r3, [pc, #348]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90e:	e382      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c914:	e37f      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c91a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c91e:	430b      	orrs	r3, r1
 800c920:	f040 80a7 	bne.w	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c924:	4b4c      	ldr	r3, [pc, #304]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c928:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c92c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c934:	d055      	beq.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c93c:	f200 8096 	bhi.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c946:	f000 8084 	beq.w	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c950:	f200 808c 	bhi.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c95a:	d030      	beq.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c962:	f200 8083 	bhi.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c972:	d012      	beq.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c974:	e07a      	b.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c976:	4b38      	ldr	r3, [pc, #224]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c97e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c982:	d107      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fe0b 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c992:	e340      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c998:	e33d      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c99a:	4b2f      	ldr	r3, [pc, #188]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9a6:	d107      	bne.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9a8:	f107 0318 	add.w	r3, r7, #24
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 fb51 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b6:	e32e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9bc:	e32b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9be:	4b26      	ldr	r3, [pc, #152]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ca:	d107      	bne.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9cc:	f107 030c 	add.w	r3, r7, #12
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fc93 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9da:	e31c      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e319      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9e2:	4b1d      	ldr	r3, [pc, #116]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d10c      	bne.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d109      	bne.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9fe:	4b16      	ldr	r3, [pc, #88]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	08db      	lsrs	r3, r3, #3
 800ca04:	f003 0303 	and.w	r3, r3, #3
 800ca08:	4a14      	ldr	r2, [pc, #80]	; (800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ca0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca10:	e01e      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca12:	4b11      	ldr	r3, [pc, #68]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca1e:	d106      	bne.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ca20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca26:	d102      	bne.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca2c:	e010      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca2e:	4b0a      	ldr	r3, [pc, #40]	; (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca3a:	d106      	bne.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca42:	d102      	bne.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca44:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca48:	e002      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca4e:	e2e2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca50:	e2e1      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca52:	4b05      	ldr	r3, [pc, #20]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca56:	e2de      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca58:	58024400 	.word	0x58024400
 800ca5c:	03d09000 	.word	0x03d09000
 800ca60:	003d0900 	.word	0x003d0900
 800ca64:	017d7840 	.word	0x017d7840
 800ca68:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca70:	e2d1      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca76:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca7a:	430b      	orrs	r3, r1
 800ca7c:	f040 809c 	bne.w	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca80:	4b93      	ldr	r3, [pc, #588]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca90:	d054      	beq.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca98:	f200 808b 	bhi.w	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800caa2:	f000 8083 	beq.w	800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800caac:	f200 8081 	bhi.w	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab6:	d02f      	beq.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cabe:	d878      	bhi.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d004      	beq.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cacc:	d012      	beq.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cace:	e070      	b.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cad0:	4b7f      	ldr	r3, [pc, #508]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cadc:	d107      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 fd5e 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caec:	e293      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf2:	e290      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caf4:	4b76      	ldr	r3, [pc, #472]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cafc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb00:	d107      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb02:	f107 0318 	add.w	r3, r7, #24
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 faa4 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb10:	e281      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb16:	e27e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb18:	4b6d      	ldr	r3, [pc, #436]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb24:	d107      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb26:	f107 030c 	add.w	r3, r7, #12
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fbe6 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb34:	e26f      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3a:	e26c      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb3c:	4b64      	ldr	r3, [pc, #400]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb46:	4b62      	ldr	r3, [pc, #392]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d10c      	bne.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d109      	bne.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb58:	4b5d      	ldr	r3, [pc, #372]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	08db      	lsrs	r3, r3, #3
 800cb5e:	f003 0303 	and.w	r3, r3, #3
 800cb62:	4a5c      	ldr	r2, [pc, #368]	; (800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb64:	fa22 f303 	lsr.w	r3, r2, r3
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6a:	e01e      	b.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb6c:	4b58      	ldr	r3, [pc, #352]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb78:	d106      	bne.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb80:	d102      	bne.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb82:	4b55      	ldr	r3, [pc, #340]	; (800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb86:	e010      	b.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb88:	4b51      	ldr	r3, [pc, #324]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb94:	d106      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb9c:	d102      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb9e:	4b4f      	ldr	r3, [pc, #316]	; (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba2:	e002      	b.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cba8:	e235      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbaa:	e234      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbac:	4b4c      	ldr	r3, [pc, #304]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb0:	e231      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb6:	e22e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cbb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbbc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cbc0:	430b      	orrs	r3, r1
 800cbc2:	f040 808f 	bne.w	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cbc6:	4b42      	ldr	r3, [pc, #264]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cbce:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbd6:	d06b      	beq.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbde:	d874      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbe6:	d056      	beq.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbee:	d86c      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbf6:	d03b      	beq.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbfe:	d864      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc06:	d021      	beq.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc0e:	d85c      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d004      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc1c:	d004      	beq.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cc1e:	e054      	b.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cc20:	f7fe fa0a 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 800cc24:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc26:	e1f6      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc28:	4b29      	ldr	r3, [pc, #164]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc34:	d107      	bne.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc36:	f107 0318 	add.w	r3, r7, #24
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fa0a 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc44:	e1e7      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4a:	e1e4      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc4c:	4b20      	ldr	r3, [pc, #128]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc58:	d107      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc5a:	f107 030c 	add.w	r3, r7, #12
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 fb4c 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc68:	e1d5      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc6e:	e1d2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc70:	4b17      	ldr	r3, [pc, #92]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d109      	bne.n	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc7c:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	08db      	lsrs	r3, r3, #3
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	4a13      	ldr	r2, [pc, #76]	; (800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc88:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc8e:	e1c2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc90:	2300      	movs	r3, #0
 800cc92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc94:	e1bf      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc96:	4b0e      	ldr	r3, [pc, #56]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cca2:	d102      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cca4:	4b0c      	ldr	r3, [pc, #48]	; (800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca8:	e1b5      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccae:	e1b2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccbc:	d102      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ccbe:	4b07      	ldr	r3, [pc, #28]	; (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc2:	e1a8      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc8:	e1a5      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccce:	e1a2      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ccd0:	58024400 	.word	0x58024400
 800ccd4:	03d09000 	.word	0x03d09000
 800ccd8:	003d0900 	.word	0x003d0900
 800ccdc:	017d7840 	.word	0x017d7840
 800cce0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ccec:	430b      	orrs	r3, r1
 800ccee:	d173      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ccf0:	4b9c      	ldr	r3, [pc, #624]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd00:	d02f      	beq.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd08:	d863      	bhi.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d004      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd16:	d012      	beq.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cd18:	e05b      	b.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd1a:	4b92      	ldr	r3, [pc, #584]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd26:	d107      	bne.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd28:	f107 0318 	add.w	r3, r7, #24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f991 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd36:	e16e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3c:	e16b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd3e:	4b89      	ldr	r3, [pc, #548]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd4a:	d107      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd4c:	f107 030c 	add.w	r3, r7, #12
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fad3 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd5a:	e15c      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd60:	e159      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd62:	4b80      	ldr	r3, [pc, #512]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd6c:	4b7d      	ldr	r3, [pc, #500]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f003 0304 	and.w	r3, r3, #4
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d10c      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d109      	bne.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd7e:	4b79      	ldr	r3, [pc, #484]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	08db      	lsrs	r3, r3, #3
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	4a77      	ldr	r2, [pc, #476]	; (800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd90:	e01e      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd92:	4b74      	ldr	r3, [pc, #464]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd9e:	d106      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cda6:	d102      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cda8:	4b70      	ldr	r3, [pc, #448]	; (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdac:	e010      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdae:	4b6d      	ldr	r3, [pc, #436]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdba:	d106      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdc2:	d102      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdc4:	4b6a      	ldr	r3, [pc, #424]	; (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdc8:	e002      	b.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cdce:	e122      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdd0:	e121      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd6:	e11e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cddc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cde0:	430b      	orrs	r3, r1
 800cde2:	d133      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cde4:	4b5f      	ldr	r3, [pc, #380]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cde6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cde8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d004      	beq.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdfa:	d012      	beq.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cdfc:	e023      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdfe:	4b59      	ldr	r3, [pc, #356]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce0a:	d107      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fbc7 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce1a:	e0fc      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce20:	e0f9      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce22:	4b50      	ldr	r3, [pc, #320]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce2e:	d107      	bne.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce30:	f107 0318 	add.w	r3, r7, #24
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f90d 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce3e:	e0ea      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce44:	e0e7      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce4a:	e0e4      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ce4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce50:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ce54:	430b      	orrs	r3, r1
 800ce56:	f040 808d 	bne.w	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ce5a:	4b42      	ldr	r3, [pc, #264]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ce62:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce6a:	d06b      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce72:	d874      	bhi.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce7a:	d056      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce82:	d86c      	bhi.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce8a:	d03b      	beq.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce92:	d864      	bhi.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce9a:	d021      	beq.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea2:	d85c      	bhi.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d004      	beq.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceb0:	d004      	beq.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ceb2:	e054      	b.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ceb4:	f000 f8b8 	bl	800d028 <HAL_RCCEx_GetD3PCLK1Freq>
 800ceb8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ceba:	e0ac      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cebc:	4b29      	ldr	r3, [pc, #164]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec8:	d107      	bne.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceca:	f107 0318 	add.w	r3, r7, #24
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 f8c0 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced8:	e09d      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cede:	e09a      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cee0:	4b20      	ldr	r3, [pc, #128]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceec:	d107      	bne.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceee:	f107 030c 	add.w	r3, r7, #12
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 fa02 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cefc:	e08b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf02:	e088      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf04:	4b17      	ldr	r3, [pc, #92]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0304 	and.w	r3, r3, #4
 800cf0c:	2b04      	cmp	r3, #4
 800cf0e:	d109      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	08db      	lsrs	r3, r3, #3
 800cf16:	f003 0303 	and.w	r3, r3, #3
 800cf1a:	4a13      	ldr	r2, [pc, #76]	; (800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cf1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf22:	e078      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf28:	e075      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf2a:	4b0e      	ldr	r3, [pc, #56]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf36:	d102      	bne.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cf38:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3c:	e06b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf42:	e068      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf44:	4b07      	ldr	r3, [pc, #28]	; (800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf50:	d102      	bne.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cf52:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf56:	e05e      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5c:	e05b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf62:	e058      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf64:	58024400 	.word	0x58024400
 800cf68:	03d09000 	.word	0x03d09000
 800cf6c:	003d0900 	.word	0x003d0900
 800cf70:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf78:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	d148      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf80:	4b27      	ldr	r3, [pc, #156]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf90:	d02a      	beq.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf98:	d838      	bhi.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d004      	beq.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfa6:	d00d      	beq.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cfa8:	e030      	b.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfaa:	4b1d      	ldr	r3, [pc, #116]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfb6:	d102      	bne.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	; (800d024 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfbc:	e02b      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc2:	e028      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cfc4:	4b16      	ldr	r3, [pc, #88]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cfd0:	d107      	bne.n	800cfe2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 fae4 	bl	800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe0:	e019      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe6:	e016      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfe8:	4b0d      	ldr	r3, [pc, #52]	; (800d020 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cff4:	d107      	bne.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cff6:	f107 0318 	add.w	r3, r7, #24
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 f82a 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d004:	e007      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d00a:	e004      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d010:	e001      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3740      	adds	r7, #64	; 0x40
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	58024400 	.word	0x58024400
 800d024:	017d7840 	.word	0x017d7840

0800d028 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d02c:	f7fd ffd4 	bl	800afd8 <HAL_RCC_GetHCLKFreq>
 800d030:	4602      	mov	r2, r0
 800d032:	4b06      	ldr	r3, [pc, #24]	; (800d04c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	091b      	lsrs	r3, r3, #4
 800d038:	f003 0307 	and.w	r3, r3, #7
 800d03c:	4904      	ldr	r1, [pc, #16]	; (800d050 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d03e:	5ccb      	ldrb	r3, [r1, r3]
 800d040:	f003 031f 	and.w	r3, r3, #31
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d048:	4618      	mov	r0, r3
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	58024400 	.word	0x58024400
 800d050:	08017134 	.word	0x08017134

0800d054 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d054:	b480      	push	{r7}
 800d056:	b089      	sub	sp, #36	; 0x24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d05c:	4ba1      	ldr	r3, [pc, #644]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d060:	f003 0303 	and.w	r3, r3, #3
 800d064:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d066:	4b9f      	ldr	r3, [pc, #636]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	0b1b      	lsrs	r3, r3, #12
 800d06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d070:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d072:	4b9c      	ldr	r3, [pc, #624]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d076:	091b      	lsrs	r3, r3, #4
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d07e:	4b99      	ldr	r3, [pc, #612]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d082:	08db      	lsrs	r3, r3, #3
 800d084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	fb02 f303 	mul.w	r3, r2, r3
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 8111 	beq.w	800d2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	f000 8083 	beq.w	800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	f200 80a1 	bhi.w	800d1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d003      	beq.n	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d056      	beq.n	800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d0be:	e099      	b.n	800d1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0c0:	4b88      	ldr	r3, [pc, #544]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0320 	and.w	r3, r3, #32
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d02d      	beq.n	800d128 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0cc:	4b85      	ldr	r3, [pc, #532]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	08db      	lsrs	r3, r3, #3
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	4a84      	ldr	r2, [pc, #528]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d0d8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	ee07 3a90 	vmov	s15, r3
 800d0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	ee07 3a90 	vmov	s15, r3
 800d0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0f6:	4b7b      	ldr	r3, [pc, #492]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d106:	ed97 6a03 	vldr	s12, [r7, #12]
 800d10a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d126:	e087      	b.n	800d238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d132:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d13a:	4b6a      	ldr	r3, [pc, #424]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d14e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d16a:	e065      	b.n	800d238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	ee07 3a90 	vmov	s15, r3
 800d172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d176:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d17e:	4b59      	ldr	r3, [pc, #356]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d18e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d192:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ae:	e043      	b.n	800d238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	ee07 3a90 	vmov	s15, r3
 800d1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1c2:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ca:	ee07 3a90 	vmov	s15, r3
 800d1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1f2:	e021      	b.n	800d238 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	ee07 3a90 	vmov	s15, r3
 800d1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d206:	4b37      	ldr	r3, [pc, #220]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d216:	ed97 6a03 	vldr	s12, [r7, #12]
 800d21a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d236:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d238:	4b2a      	ldr	r3, [pc, #168]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23c:	0a5b      	lsrs	r3, r3, #9
 800d23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d252:	edd7 6a07 	vldr	s13, [r7, #28]
 800d256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d25e:	ee17 2a90 	vmov	r2, s15
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d266:	4b1f      	ldr	r3, [pc, #124]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	0c1b      	lsrs	r3, r3, #16
 800d26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d270:	ee07 3a90 	vmov	s15, r3
 800d274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d27c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d280:	edd7 6a07 	vldr	s13, [r7, #28]
 800d284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d28c:	ee17 2a90 	vmov	r2, s15
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d294:	4b13      	ldr	r3, [pc, #76]	; (800d2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d298:	0e1b      	lsrs	r3, r3, #24
 800d29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ba:	ee17 2a90 	vmov	r2, s15
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d2c2:	e008      	b.n	800d2d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	609a      	str	r2, [r3, #8]
}
 800d2d6:	bf00      	nop
 800d2d8:	3724      	adds	r7, #36	; 0x24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	58024400 	.word	0x58024400
 800d2e8:	03d09000 	.word	0x03d09000
 800d2ec:	46000000 	.word	0x46000000
 800d2f0:	4c742400 	.word	0x4c742400
 800d2f4:	4a742400 	.word	0x4a742400
 800d2f8:	4bbebc20 	.word	0x4bbebc20

0800d2fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b089      	sub	sp, #36	; 0x24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d304:	4ba1      	ldr	r3, [pc, #644]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d308:	f003 0303 	and.w	r3, r3, #3
 800d30c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d30e:	4b9f      	ldr	r3, [pc, #636]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d312:	0d1b      	lsrs	r3, r3, #20
 800d314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d318:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d31a:	4b9c      	ldr	r3, [pc, #624]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31e:	0a1b      	lsrs	r3, r3, #8
 800d320:	f003 0301 	and.w	r3, r3, #1
 800d324:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d326:	4b99      	ldr	r3, [pc, #612]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32a:	08db      	lsrs	r3, r3, #3
 800d32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	fb02 f303 	mul.w	r3, r2, r3
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d33e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 8111 	beq.w	800d56c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	f000 8083 	beq.w	800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	2b02      	cmp	r3, #2
 800d356:	f200 80a1 	bhi.w	800d49c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d056      	beq.n	800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d366:	e099      	b.n	800d49c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d368:	4b88      	ldr	r3, [pc, #544]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 0320 	and.w	r3, r3, #32
 800d370:	2b00      	cmp	r3, #0
 800d372:	d02d      	beq.n	800d3d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d374:	4b85      	ldr	r3, [pc, #532]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	08db      	lsrs	r3, r3, #3
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	4a84      	ldr	r2, [pc, #528]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d380:	fa22 f303 	lsr.w	r3, r2, r3
 800d384:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	ee07 3a90 	vmov	s15, r3
 800d38c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	ee07 3a90 	vmov	s15, r3
 800d396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d39e:	4b7b      	ldr	r3, [pc, #492]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3ce:	e087      	b.n	800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e2:	4b6a      	ldr	r3, [pc, #424]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d412:	e065      	b.n	800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d426:	4b59      	ldr	r3, [pc, #356]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d436:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d456:	e043      	b.n	800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d462:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d46a:	4b48      	ldr	r3, [pc, #288]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d47e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d49a:	e021      	b.n	800d4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	ee07 3a90 	vmov	s15, r3
 800d4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ae:	4b37      	ldr	r3, [pc, #220]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b6:	ee07 3a90 	vmov	s15, r3
 800d4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d4e0:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e4:	0a5b      	lsrs	r3, r3, #9
 800d4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d506:	ee17 2a90 	vmov	r2, s15
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d50e:	4b1f      	ldr	r3, [pc, #124]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d512:	0c1b      	lsrs	r3, r3, #16
 800d514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d524:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d528:	edd7 6a07 	vldr	s13, [r7, #28]
 800d52c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d534:	ee17 2a90 	vmov	r2, s15
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d53c:	4b13      	ldr	r3, [pc, #76]	; (800d58c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d540:	0e1b      	lsrs	r3, r3, #24
 800d542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d552:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d556:	edd7 6a07 	vldr	s13, [r7, #28]
 800d55a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d562:	ee17 2a90 	vmov	r2, s15
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d56a:	e008      	b.n	800d57e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	609a      	str	r2, [r3, #8]
}
 800d57e:	bf00      	nop
 800d580:	3724      	adds	r7, #36	; 0x24
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	58024400 	.word	0x58024400
 800d590:	03d09000 	.word	0x03d09000
 800d594:	46000000 	.word	0x46000000
 800d598:	4c742400 	.word	0x4c742400
 800d59c:	4a742400 	.word	0x4a742400
 800d5a0:	4bbebc20 	.word	0x4bbebc20

0800d5a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b089      	sub	sp, #36	; 0x24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5ac:	4ba0      	ldr	r3, [pc, #640]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b0:	f003 0303 	and.w	r3, r3, #3
 800d5b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d5b6:	4b9e      	ldr	r3, [pc, #632]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ba:	091b      	lsrs	r3, r3, #4
 800d5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d5c2:	4b9b      	ldr	r3, [pc, #620]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5cc:	4b98      	ldr	r3, [pc, #608]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	08db      	lsrs	r3, r3, #3
 800d5d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5d6:	693a      	ldr	r2, [r7, #16]
 800d5d8:	fb02 f303 	mul.w	r3, r2, r3
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 8111 	beq.w	800d812 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	f000 8083 	beq.w	800d6fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	f200 80a1 	bhi.w	800d742 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d056      	beq.n	800d6ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d60c:	e099      	b.n	800d742 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d60e:	4b88      	ldr	r3, [pc, #544]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	2b00      	cmp	r3, #0
 800d618:	d02d      	beq.n	800d676 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d61a:	4b85      	ldr	r3, [pc, #532]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	08db      	lsrs	r3, r3, #3
 800d620:	f003 0303 	and.w	r3, r3, #3
 800d624:	4a83      	ldr	r2, [pc, #524]	; (800d834 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d626:	fa22 f303 	lsr.w	r3, r2, r3
 800d62a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	ee07 3a90 	vmov	s15, r3
 800d632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d644:	4b7a      	ldr	r3, [pc, #488]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d654:	ed97 6a03 	vldr	s12, [r7, #12]
 800d658:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d65c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d66c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d670:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d674:	e087      	b.n	800d786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	ee07 3a90 	vmov	s15, r3
 800d67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d680:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d83c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d688:	4b69      	ldr	r3, [pc, #420]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d698:	ed97 6a03 	vldr	s12, [r7, #12]
 800d69c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6b8:	e065      	b.n	800d786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	ee07 3a90 	vmov	s15, r3
 800d6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d840 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d6c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6cc:	4b58      	ldr	r3, [pc, #352]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6fc:	e043      	b.n	800d786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	ee07 3a90 	vmov	s15, r3
 800d704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d708:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d844 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d70c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d710:	4b47      	ldr	r3, [pc, #284]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d718:	ee07 3a90 	vmov	s15, r3
 800d71c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d720:	ed97 6a03 	vldr	s12, [r7, #12]
 800d724:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d72c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d740:	e021      	b.n	800d786 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d83c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d754:	4b36      	ldr	r3, [pc, #216]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75c:	ee07 3a90 	vmov	s15, r3
 800d760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d764:	ed97 6a03 	vldr	s12, [r7, #12]
 800d768:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d838 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d76c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d77c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d784:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d786:	4b2a      	ldr	r3, [pc, #168]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78a:	0a5b      	lsrs	r3, r3, #9
 800d78c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d79c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ac:	ee17 2a90 	vmov	r2, s15
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d7b4:	4b1e      	ldr	r3, [pc, #120]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b8:	0c1b      	lsrs	r3, r3, #16
 800d7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7da:	ee17 2a90 	vmov	r2, s15
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d7e2:	4b13      	ldr	r3, [pc, #76]	; (800d830 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e6:	0e1b      	lsrs	r3, r3, #24
 800d7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ec:	ee07 3a90 	vmov	s15, r3
 800d7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d808:	ee17 2a90 	vmov	r2, s15
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d810:	e008      	b.n	800d824 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	609a      	str	r2, [r3, #8]
}
 800d824:	bf00      	nop
 800d826:	3724      	adds	r7, #36	; 0x24
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	58024400 	.word	0x58024400
 800d834:	03d09000 	.word	0x03d09000
 800d838:	46000000 	.word	0x46000000
 800d83c:	4c742400 	.word	0x4c742400
 800d840:	4a742400 	.word	0x4a742400
 800d844:	4bbebc20 	.word	0x4bbebc20

0800d848 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d856:	4b53      	ldr	r3, [pc, #332]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d101      	bne.n	800d866 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e099      	b.n	800d99a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d866:	4b4f      	ldr	r3, [pc, #316]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a4e      	ldr	r2, [pc, #312]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d86c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d872:	f7f6 fc53 	bl	800411c <HAL_GetTick>
 800d876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d878:	e008      	b.n	800d88c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d87a:	f7f6 fc4f 	bl	800411c <HAL_GetTick>
 800d87e:	4602      	mov	r2, r0
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	2b02      	cmp	r3, #2
 800d886:	d901      	bls.n	800d88c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d888:	2303      	movs	r3, #3
 800d88a:	e086      	b.n	800d99a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d88c:	4b45      	ldr	r3, [pc, #276]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1f0      	bne.n	800d87a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d898:	4b42      	ldr	r3, [pc, #264]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	031b      	lsls	r3, r3, #12
 800d8a6:	493f      	ldr	r1, [pc, #252]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	628b      	str	r3, [r1, #40]	; 0x28
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	025b      	lsls	r3, r3, #9
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	431a      	orrs	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	061b      	lsls	r3, r3, #24
 800d8d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d8dc:	4931      	ldr	r1, [pc, #196]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d8e2:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	492d      	ldr	r1, [pc, #180]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d8f4:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	f023 0220 	bic.w	r2, r3, #32
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	4928      	ldr	r1, [pc, #160]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d902:	4313      	orrs	r3, r2
 800d904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d906:	4b27      	ldr	r3, [pc, #156]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	4a26      	ldr	r2, [pc, #152]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d90c:	f023 0310 	bic.w	r3, r3, #16
 800d910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d912:	4b24      	ldr	r3, [pc, #144]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d916:	4b24      	ldr	r3, [pc, #144]	; (800d9a8 <RCCEx_PLL2_Config+0x160>)
 800d918:	4013      	ands	r3, r2
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	69d2      	ldr	r2, [r2, #28]
 800d91e:	00d2      	lsls	r2, r2, #3
 800d920:	4920      	ldr	r1, [pc, #128]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d922:	4313      	orrs	r3, r2
 800d924:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d926:	4b1f      	ldr	r3, [pc, #124]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d92c:	f043 0310 	orr.w	r3, r3, #16
 800d930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d938:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	4a19      	ldr	r2, [pc, #100]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d93e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d942:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d944:	e00f      	b.n	800d966 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d106      	bne.n	800d95a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d94c:	4b15      	ldr	r3, [pc, #84]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	4a14      	ldr	r2, [pc, #80]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d956:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d958:	e005      	b.n	800d966 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d95a:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	4a11      	ldr	r2, [pc, #68]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d966:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d96c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d972:	f7f6 fbd3 	bl	800411c <HAL_GetTick>
 800d976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d978:	e008      	b.n	800d98c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d97a:	f7f6 fbcf 	bl	800411c <HAL_GetTick>
 800d97e:	4602      	mov	r2, r0
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	2b02      	cmp	r3, #2
 800d986:	d901      	bls.n	800d98c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e006      	b.n	800d99a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <RCCEx_PLL2_Config+0x15c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d0f0      	beq.n	800d97a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d998:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	58024400 	.word	0x58024400
 800d9a8:	ffff0007 	.word	0xffff0007

0800d9ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9ba:	4b53      	ldr	r3, [pc, #332]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800d9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	2b03      	cmp	r3, #3
 800d9c4:	d101      	bne.n	800d9ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e099      	b.n	800dafe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d9ca:	4b4f      	ldr	r3, [pc, #316]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a4e      	ldr	r2, [pc, #312]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800d9d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9d6:	f7f6 fba1 	bl	800411c <HAL_GetTick>
 800d9da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9dc:	e008      	b.n	800d9f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9de:	f7f6 fb9d 	bl	800411c <HAL_GetTick>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d901      	bls.n	800d9f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e086      	b.n	800dafe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d9f0:	4b45      	ldr	r3, [pc, #276]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f0      	bne.n	800d9de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d9fc:	4b42      	ldr	r3, [pc, #264]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800d9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	051b      	lsls	r3, r3, #20
 800da0a:	493f      	ldr	r1, [pc, #252]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da0c:	4313      	orrs	r3, r2
 800da0e:	628b      	str	r3, [r1, #40]	; 0x28
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	3b01      	subs	r3, #1
 800da16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	3b01      	subs	r3, #1
 800da20:	025b      	lsls	r3, r3, #9
 800da22:	b29b      	uxth	r3, r3
 800da24:	431a      	orrs	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	041b      	lsls	r3, r3, #16
 800da2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	3b01      	subs	r3, #1
 800da3a:	061b      	lsls	r3, r3, #24
 800da3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da40:	4931      	ldr	r1, [pc, #196]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da42:	4313      	orrs	r3, r2
 800da44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da46:	4b30      	ldr	r3, [pc, #192]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	695b      	ldr	r3, [r3, #20]
 800da52:	492d      	ldr	r1, [pc, #180]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da54:	4313      	orrs	r3, r2
 800da56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da58:	4b2b      	ldr	r3, [pc, #172]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	4928      	ldr	r1, [pc, #160]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da66:	4313      	orrs	r3, r2
 800da68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da6a:	4b27      	ldr	r3, [pc, #156]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	4a26      	ldr	r2, [pc, #152]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da76:	4b24      	ldr	r3, [pc, #144]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da7a:	4b24      	ldr	r3, [pc, #144]	; (800db0c <RCCEx_PLL3_Config+0x160>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	69d2      	ldr	r2, [r2, #28]
 800da82:	00d2      	lsls	r2, r2, #3
 800da84:	4920      	ldr	r1, [pc, #128]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da86:	4313      	orrs	r3, r2
 800da88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da8a:	4b1f      	ldr	r3, [pc, #124]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8e:	4a1e      	ldr	r2, [pc, #120]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da9c:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800da9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa0:	4a19      	ldr	r2, [pc, #100]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800daa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800daa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800daa8:	e00f      	b.n	800daca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d106      	bne.n	800dabe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dab0:	4b15      	ldr	r3, [pc, #84]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	4a14      	ldr	r2, [pc, #80]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800daba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dabc:	e005      	b.n	800daca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dabe:	4b12      	ldr	r3, [pc, #72]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac2:	4a11      	ldr	r2, [pc, #68]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dac8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800daca:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a0e      	ldr	r2, [pc, #56]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800dad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dad6:	f7f6 fb21 	bl	800411c <HAL_GetTick>
 800dada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dadc:	e008      	b.n	800daf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dade:	f7f6 fb1d 	bl	800411c <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d901      	bls.n	800daf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800daec:	2303      	movs	r3, #3
 800daee:	e006      	b.n	800dafe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800daf0:	4b05      	ldr	r3, [pc, #20]	; (800db08 <RCCEx_PLL3_Config+0x15c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0f0      	beq.n	800dade <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	58024400 	.word	0x58024400
 800db0c:	ffff0007 	.word	0xffff0007

0800db10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d071      	beq.n	800dc06 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7f4 fd98 	bl	800266c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2202      	movs	r2, #2
 800db40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	f003 0310 	and.w	r3, r3, #16
 800db4e:	2b10      	cmp	r3, #16
 800db50:	d050      	beq.n	800dbf4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	22ca      	movs	r2, #202	; 0xca
 800db58:	625a      	str	r2, [r3, #36]	; 0x24
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2253      	movs	r2, #83	; 0x53
 800db60:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fa4a 	bl	800dffc <RTC_EnterInitMode>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d124      	bne.n	800dbbc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6899      	ldr	r1, [r3, #8]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	4b24      	ldr	r3, [pc, #144]	; (800dc10 <HAL_RTC_Init+0x100>)
 800db7e:	400b      	ands	r3, r1
 800db80:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6899      	ldr	r1, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	431a      	orrs	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	431a      	orrs	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	430a      	orrs	r2, r1
 800db9e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	0419      	lsls	r1, r3, #16
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	68da      	ldr	r2, [r3, #12]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fa56 	bl	800e064 <RTC_ExitInitMode>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d113      	bne.n	800dbea <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f022 0203 	bic.w	r2, r2, #3
 800dbd0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	69da      	ldr	r2, [r3, #28]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	431a      	orrs	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	430a      	orrs	r2, r1
 800dbe8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	22ff      	movs	r2, #255	; 0xff
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24
 800dbf2:	e001      	b.n	800dbf8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dbf8:	7bfb      	ldrb	r3, [r7, #15]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d103      	bne.n	800dc06 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	ff8fffbf 	.word	0xff8fffbf

0800dc14 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc14:	b590      	push	{r4, r7, lr}
 800dc16:	b087      	sub	sp, #28
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d101      	bne.n	800dc2e <HAL_RTC_SetTime+0x1a>
 800dc2a:	2302      	movs	r3, #2
 800dc2c:	e089      	b.n	800dd42 <HAL_RTC_SetTime+0x12e>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2202      	movs	r2, #2
 800dc3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	22ca      	movs	r2, #202	; 0xca
 800dc44:	625a      	str	r2, [r3, #36]	; 0x24
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2253      	movs	r2, #83	; 0x53
 800dc4c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 f9d4 	bl	800dffc <RTC_EnterInitMode>
 800dc54:	4603      	mov	r3, r0
 800dc56:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dc58:	7cfb      	ldrb	r3, [r7, #19]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d161      	bne.n	800dd22 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d126      	bne.n	800dcb2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d102      	bne.n	800dc78 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2200      	movs	r2, #0
 800dc76:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 fa2f 	bl	800e0e0 <RTC_ByteToBcd2>
 800dc82:	4603      	mov	r3, r0
 800dc84:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	785b      	ldrb	r3, [r3, #1]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fa28 	bl	800e0e0 <RTC_ByteToBcd2>
 800dc90:	4603      	mov	r3, r0
 800dc92:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc94:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	789b      	ldrb	r3, [r3, #2]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fa20 	bl	800e0e0 <RTC_ByteToBcd2>
 800dca0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dca2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	78db      	ldrb	r3, [r3, #3]
 800dcaa:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dcac:	4313      	orrs	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]
 800dcb0:	e018      	b.n	800dce4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	785b      	ldrb	r3, [r3, #1]
 800dcd0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dcd2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dcd8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	78db      	ldrb	r3, [r3, #3]
 800dcde:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dce0:	4313      	orrs	r3, r2
 800dce2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	6979      	ldr	r1, [r7, #20]
 800dcea:	4b18      	ldr	r3, [pc, #96]	; (800dd4c <HAL_RTC_SetTime+0x138>)
 800dcec:	400b      	ands	r3, r1
 800dcee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	689a      	ldr	r2, [r3, #8]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dcfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6899      	ldr	r1, [r3, #8]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	68da      	ldr	r2, [r3, #12]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	430a      	orrs	r2, r1
 800dd16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f9a3 	bl	800e064 <RTC_ExitInitMode>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	22ff      	movs	r2, #255	; 0xff
 800dd28:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dd2a:	7cfb      	ldrb	r3, [r7, #19]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d103      	bne.n	800dd38 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2201      	movs	r2, #1
 800dd34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dd40:	7cfb      	ldrb	r3, [r7, #19]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	371c      	adds	r7, #28
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd90      	pop	{r4, r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	007f7f7f 	.word	0x007f7f7f

0800dd50 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	4b22      	ldr	r3, [pc, #136]	; (800de04 <HAL_RTC_GetTime+0xb4>)
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	0c1b      	lsrs	r3, r3, #16
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	0a1b      	lsrs	r3, r3, #8
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	0d9b      	lsrs	r3, r3, #22
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d11a      	bne.n	800ddfa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 f9a9 	bl	800e120 <RTC_Bcd2ToByte>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	785b      	ldrb	r3, [r3, #1]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 f9a0 	bl	800e120 <RTC_Bcd2ToByte>
 800dde0:	4603      	mov	r3, r0
 800dde2:	461a      	mov	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	789b      	ldrb	r3, [r3, #2]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 f997 	bl	800e120 <RTC_Bcd2ToByte>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	007f7f7f 	.word	0x007f7f7f

0800de08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d101      	bne.n	800de22 <HAL_RTC_SetDate+0x1a>
 800de1e:	2302      	movs	r3, #2
 800de20:	e073      	b.n	800df0a <HAL_RTC_SetDate+0x102>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2202      	movs	r2, #2
 800de2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10e      	bne.n	800de56 <HAL_RTC_SetDate+0x4e>
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	785b      	ldrb	r3, [r3, #1]
 800de3c:	f003 0310 	and.w	r3, r3, #16
 800de40:	2b00      	cmp	r3, #0
 800de42:	d008      	beq.n	800de56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	785b      	ldrb	r3, [r3, #1]
 800de48:	f023 0310 	bic.w	r3, r3, #16
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	330a      	adds	r3, #10
 800de50:	b2da      	uxtb	r2, r3
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d11c      	bne.n	800de96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	78db      	ldrb	r3, [r3, #3]
 800de60:	4618      	mov	r0, r3
 800de62:	f000 f93d 	bl	800e0e0 <RTC_ByteToBcd2>
 800de66:	4603      	mov	r3, r0
 800de68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	785b      	ldrb	r3, [r3, #1]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 f936 	bl	800e0e0 <RTC_ByteToBcd2>
 800de74:	4603      	mov	r3, r0
 800de76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	789b      	ldrb	r3, [r3, #2]
 800de7e:	4618      	mov	r0, r3
 800de80:	f000 f92e 	bl	800e0e0 <RTC_ByteToBcd2>
 800de84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de90:	4313      	orrs	r3, r2
 800de92:	617b      	str	r3, [r7, #20]
 800de94:	e00e      	b.n	800deb4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	78db      	ldrb	r3, [r3, #3]
 800de9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	785b      	ldrb	r3, [r3, #1]
 800dea0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dea2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dea8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800deb0:	4313      	orrs	r3, r2
 800deb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	22ca      	movs	r2, #202	; 0xca
 800deba:	625a      	str	r2, [r3, #36]	; 0x24
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2253      	movs	r2, #83	; 0x53
 800dec2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 f899 	bl	800dffc <RTC_EnterInitMode>
 800deca:	4603      	mov	r3, r0
 800decc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dece:	7cfb      	ldrb	r3, [r7, #19]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10a      	bne.n	800deea <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	6979      	ldr	r1, [r7, #20]
 800deda:	4b0e      	ldr	r3, [pc, #56]	; (800df14 <HAL_RTC_SetDate+0x10c>)
 800dedc:	400b      	ands	r3, r1
 800dede:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 f8bf 	bl	800e064 <RTC_ExitInitMode>
 800dee6:	4603      	mov	r3, r0
 800dee8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	22ff      	movs	r2, #255	; 0xff
 800def0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800def2:	7cfb      	ldrb	r3, [r7, #19]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d103      	bne.n	800df00 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800df08:	7cfb      	ldrb	r3, [r7, #19]


}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd90      	pop	{r4, r7, pc}
 800df12:	bf00      	nop
 800df14:	00ffff3f 	.word	0x00ffff3f

0800df18 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	4b21      	ldr	r3, [pc, #132]	; (800dfb0 <HAL_RTC_GetDate+0x98>)
 800df2c:	4013      	ands	r3, r2
 800df2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	0c1b      	lsrs	r3, r3, #16
 800df34:	b2da      	uxtb	r2, r3
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	0a1b      	lsrs	r3, r3, #8
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 031f 	and.w	r3, r3, #31
 800df44:	b2da      	uxtb	r2, r3
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df52:	b2da      	uxtb	r2, r3
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	0b5b      	lsrs	r3, r3, #13
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	b2da      	uxtb	r2, r3
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d11a      	bne.n	800dfa4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	78db      	ldrb	r3, [r3, #3]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 f8d4 	bl	800e120 <RTC_Bcd2ToByte>
 800df78:	4603      	mov	r3, r0
 800df7a:	461a      	mov	r2, r3
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	785b      	ldrb	r3, [r3, #1]
 800df84:	4618      	mov	r0, r3
 800df86:	f000 f8cb 	bl	800e120 <RTC_Bcd2ToByte>
 800df8a:	4603      	mov	r3, r0
 800df8c:	461a      	mov	r2, r3
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	789b      	ldrb	r3, [r3, #2]
 800df96:	4618      	mov	r0, r3
 800df98:	f000 f8c2 	bl	800e120 <RTC_Bcd2ToByte>
 800df9c:	4603      	mov	r3, r0
 800df9e:	461a      	mov	r2, r3
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	00ffff3f 	.word	0x00ffff3f

0800dfb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a0d      	ldr	r2, [pc, #52]	; (800dff8 <HAL_RTC_WaitForSynchro+0x44>)
 800dfc2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dfc4:	f7f6 f8aa 	bl	800411c <HAL_GetTick>
 800dfc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dfca:	e009      	b.n	800dfe0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfcc:	f7f6 f8a6 	bl	800411c <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfda:	d901      	bls.n	800dfe0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e007      	b.n	800dff0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0ee      	beq.n	800dfcc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	0003ff5f 	.word	0x0003ff5f

0800dffc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e012:	2b00      	cmp	r3, #0
 800e014:	d120      	bne.n	800e058 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e01e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e020:	f7f6 f87c 	bl	800411c <HAL_GetTick>
 800e024:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e026:	e00d      	b.n	800e044 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e028:	f7f6 f878 	bl	800411c <HAL_GetTick>
 800e02c:	4602      	mov	r2, r0
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e036:	d905      	bls.n	800e044 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e038:	2303      	movs	r3, #3
 800e03a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2203      	movs	r2, #3
 800e040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <RTC_EnterInitMode+0x5c>
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	2b03      	cmp	r3, #3
 800e056:	d1e7      	bne.n	800e028 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e058:	7bfb      	ldrb	r3, [r7, #15]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e070:	4b1a      	ldr	r3, [pc, #104]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	4a19      	ldr	r2, [pc, #100]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e07a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e07c:	4b17      	ldr	r3, [pc, #92]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f003 0320 	and.w	r3, r3, #32
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10c      	bne.n	800e0a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff ff93 	bl	800dfb4 <HAL_RTC_WaitForSynchro>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d01e      	beq.n	800e0d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2203      	movs	r2, #3
 800e098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e09c:	2303      	movs	r3, #3
 800e09e:	73fb      	strb	r3, [r7, #15]
 800e0a0:	e017      	b.n	800e0d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0a2:	4b0e      	ldr	r3, [pc, #56]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	4a0d      	ldr	r2, [pc, #52]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e0a8:	f023 0320 	bic.w	r3, r3, #32
 800e0ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff ff80 	bl	800dfb4 <HAL_RTC_WaitForSynchro>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d005      	beq.n	800e0c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2203      	movs	r2, #3
 800e0be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0c6:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	4a04      	ldr	r2, [pc, #16]	; (800e0dc <RTC_ExitInitMode+0x78>)
 800e0cc:	f043 0320 	orr.w	r3, r3, #32
 800e0d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	58004000 	.word	0x58004000

0800e0e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e0ee:	79fb      	ldrb	r3, [r7, #7]
 800e0f0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e0f2:	e005      	b.n	800e100 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e0fa:	7afb      	ldrb	r3, [r7, #11]
 800e0fc:	3b0a      	subs	r3, #10
 800e0fe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e100:	7afb      	ldrb	r3, [r7, #11]
 800e102:	2b09      	cmp	r3, #9
 800e104:	d8f6      	bhi.n	800e0f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	7afb      	ldrb	r3, [r7, #11]
 800e110:	4313      	orrs	r3, r2
 800e112:	b2db      	uxtb	r3, r3
}
 800e114:	4618      	mov	r0, r3
 800e116:	3714      	adds	r7, #20
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	4603      	mov	r3, r0
 800e128:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	091b      	lsrs	r3, r3, #4
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	461a      	mov	r2, r3
 800e132:	0092      	lsls	r2, r2, #2
 800e134:	4413      	add	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	f003 030f 	and.w	r3, r3, #15
 800e140:	b2da      	uxtb	r2, r3
 800e142:	7bfb      	ldrb	r3, [r7, #15]
 800e144:	4413      	add	r3, r2
 800e146:	b2db      	uxtb	r3, r3
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3714      	adds	r7, #20
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e10f      	b.n	800e386 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a87      	ldr	r2, [pc, #540]	; (800e390 <HAL_SPI_Init+0x23c>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00f      	beq.n	800e196 <HAL_SPI_Init+0x42>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a86      	ldr	r2, [pc, #536]	; (800e394 <HAL_SPI_Init+0x240>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00a      	beq.n	800e196 <HAL_SPI_Init+0x42>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a84      	ldr	r2, [pc, #528]	; (800e398 <HAL_SPI_Init+0x244>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d005      	beq.n	800e196 <HAL_SPI_Init+0x42>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	2b0f      	cmp	r3, #15
 800e190:	d901      	bls.n	800e196 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e0f7      	b.n	800e386 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fc12 	bl	800e9c0 <SPI_GetPacketSize>
 800e19c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a7b      	ldr	r2, [pc, #492]	; (800e390 <HAL_SPI_Init+0x23c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d00c      	beq.n	800e1c2 <HAL_SPI_Init+0x6e>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a79      	ldr	r2, [pc, #484]	; (800e394 <HAL_SPI_Init+0x240>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d007      	beq.n	800e1c2 <HAL_SPI_Init+0x6e>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4a78      	ldr	r2, [pc, #480]	; (800e398 <HAL_SPI_Init+0x244>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d002      	beq.n	800e1c2 <HAL_SPI_Init+0x6e>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d811      	bhi.n	800e1e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e1c6:	4a72      	ldr	r2, [pc, #456]	; (800e390 <HAL_SPI_Init+0x23c>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d009      	beq.n	800e1e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a70      	ldr	r2, [pc, #448]	; (800e394 <HAL_SPI_Init+0x240>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d004      	beq.n	800e1e0 <HAL_SPI_Init+0x8c>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a6f      	ldr	r2, [pc, #444]	; (800e398 <HAL_SPI_Init+0x244>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d104      	bne.n	800e1ea <HAL_SPI_Init+0x96>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b10      	cmp	r3, #16
 800e1e4:	d901      	bls.n	800e1ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e0cd      	b.n	800e386 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7f4 fca0 	bl	8002b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2202      	movs	r2, #2
 800e208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f022 0201 	bic.w	r2, r2, #1
 800e21a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e226:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e230:	d119      	bne.n	800e266 <HAL_SPI_Init+0x112>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e23a:	d103      	bne.n	800e244 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e240:	2b00      	cmp	r3, #0
 800e242:	d008      	beq.n	800e256 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10c      	bne.n	800e266 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e254:	d107      	bne.n	800e266 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e264:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00f      	beq.n	800e292 <HAL_SPI_Init+0x13e>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	2b06      	cmp	r3, #6
 800e278:	d90b      	bls.n	800e292 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e007      	b.n	800e2a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	69da      	ldr	r2, [r3, #28]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	431a      	orrs	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2b4:	ea42 0103 	orr.w	r1, r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68da      	ldr	r2, [r3, #12]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	430a      	orrs	r2, r1
 800e2c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	431a      	orrs	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d2:	431a      	orrs	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	431a      	orrs	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	431a      	orrs	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	431a      	orrs	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	431a      	orrs	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2f6:	431a      	orrs	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e302:	ea42 0103 	orr.w	r1, r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d113      	bne.n	800e342 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e32c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e340:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f022 0201 	bic.w	r2, r2, #1
 800e350:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00a      	beq.n	800e374 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	430a      	orrs	r2, r1
 800e372:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	40013000 	.word	0x40013000
 800e394:	40003800 	.word	0x40003800
 800e398:	40003c00 	.word	0x40003c00

0800e39c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b0:	095b      	lsrs	r3, r3, #5
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3330      	adds	r3, #48	; 0x30
 800e3be:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3c0:	f7f5 feac 	bl	800411c <HAL_GetTick>
 800e3c4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d001      	beq.n	800e3d6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e250      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <HAL_SPI_Receive+0x46>
 800e3dc:	88fb      	ldrh	r3, [r7, #6]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d101      	bne.n	800e3e6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	e248      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d101      	bne.n	800e3f4 <HAL_SPI_Receive+0x58>
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	e241      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2204      	movs	r2, #4
 800e400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	88fa      	ldrh	r2, [r7, #6]
 800e416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	88fa      	ldrh	r2, [r7, #6]
 800e41e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e44c:	d108      	bne.n	800e460 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	e009      	b.n	800e474 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e472:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	4b95      	ldr	r3, [pc, #596]	; (800e6d0 <HAL_SPI_Receive+0x334>)
 800e47c:	4013      	ands	r3, r2
 800e47e:	88f9      	ldrh	r1, [r7, #6]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	6812      	ldr	r2, [r2, #0]
 800e484:	430b      	orrs	r3, r1
 800e486:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f042 0201 	orr.w	r2, r2, #1
 800e496:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4a0:	d107      	bne.n	800e4b2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	2b0f      	cmp	r3, #15
 800e4b8:	d96c      	bls.n	800e594 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e4ba:	e064      	b.n	800e586 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d114      	bne.n	800e4fc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4dc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4e2:	1d1a      	adds	r2, r3, #4
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4fa:	e044      	b.n	800e586 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e502:	b29b      	uxth	r3, r3
 800e504:	8bfa      	ldrh	r2, [r7, #30]
 800e506:	429a      	cmp	r2, r3
 800e508:	d919      	bls.n	800e53e <HAL_SPI_Receive+0x1a2>
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d014      	beq.n	800e53e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e51c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e51e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e524:	1d1a      	adds	r2, r3, #4
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e530:	b29b      	uxth	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b29a      	uxth	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e53c:	e023      	b.n	800e586 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e53e:	f7f5 fded 	bl	800411c <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d803      	bhi.n	800e556 <HAL_SPI_Receive+0x1ba>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e554:	d102      	bne.n	800e55c <HAL_SPI_Receive+0x1c0>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d114      	bne.n	800e586 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 f98f 	bl	800e880 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e568:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e582:	2303      	movs	r3, #3
 800e584:	e178      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d194      	bne.n	800e4bc <HAL_SPI_Receive+0x120>
 800e592:	e15e      	b.n	800e852 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	2b07      	cmp	r3, #7
 800e59a:	f240 8153 	bls.w	800e844 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e59e:	e08f      	b.n	800e6c0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d114      	bne.n	800e5e0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	8812      	ldrh	r2, [r2, #0]
 800e5be:	b292      	uxth	r2, r2
 800e5c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c6:	1c9a      	adds	r2, r3, #2
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5de:	e06f      	b.n	800e6c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	8bfa      	ldrh	r2, [r7, #30]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d924      	bls.n	800e638 <HAL_SPI_Receive+0x29c>
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d01f      	beq.n	800e638 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5fc:	69ba      	ldr	r2, [r7, #24]
 800e5fe:	8812      	ldrh	r2, [r2, #0]
 800e600:	b292      	uxth	r2, r2
 800e602:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e608:	1c9a      	adds	r2, r3, #2
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e612:	69ba      	ldr	r2, [r7, #24]
 800e614:	8812      	ldrh	r2, [r2, #0]
 800e616:	b292      	uxth	r2, r2
 800e618:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e61e:	1c9a      	adds	r2, r3, #2
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	3b02      	subs	r3, #2
 800e62e:	b29a      	uxth	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e636:	e043      	b.n	800e6c0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e63e:	b29b      	uxth	r3, r3
 800e640:	2b01      	cmp	r3, #1
 800e642:	d119      	bne.n	800e678 <HAL_SPI_Receive+0x2dc>
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d014      	beq.n	800e678 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e652:	69ba      	ldr	r2, [r7, #24]
 800e654:	8812      	ldrh	r2, [r2, #0]
 800e656:	b292      	uxth	r2, r2
 800e658:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e65e:	1c9a      	adds	r2, r3, #2
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	3b01      	subs	r3, #1
 800e66e:	b29a      	uxth	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e676:	e023      	b.n	800e6c0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e678:	f7f5 fd50 	bl	800411c <HAL_GetTick>
 800e67c:	4602      	mov	r2, r0
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	d803      	bhi.n	800e690 <HAL_SPI_Receive+0x2f4>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e68e:	d102      	bne.n	800e696 <HAL_SPI_Receive+0x2fa>
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d114      	bne.n	800e6c0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f000 f8f2 	bl	800e880 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e6bc:	2303      	movs	r3, #3
 800e6be:	e0db      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f47f af69 	bne.w	800e5a0 <HAL_SPI_Receive+0x204>
 800e6ce:	e0c0      	b.n	800e852 <HAL_SPI_Receive+0x4b6>
 800e6d0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	f003 0301 	and.w	r3, r3, #1
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d117      	bne.n	800e71a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f6:	7812      	ldrb	r2, [r2, #0]
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	3b01      	subs	r3, #1
 800e710:	b29a      	uxth	r2, r3
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e718:	e094      	b.n	800e844 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e720:	b29b      	uxth	r3, r3
 800e722:	8bfa      	ldrh	r2, [r7, #30]
 800e724:	429a      	cmp	r2, r3
 800e726:	d946      	bls.n	800e7b6 <HAL_SPI_Receive+0x41a>
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d041      	beq.n	800e7b6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e73e:	7812      	ldrb	r2, [r2, #0]
 800e740:	b2d2      	uxtb	r2, r2
 800e742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75a:	7812      	ldrb	r2, [r2, #0]
 800e75c:	b2d2      	uxtb	r2, r2
 800e75e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e776:	7812      	ldrb	r2, [r2, #0]
 800e778:	b2d2      	uxtb	r2, r2
 800e77a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e780:	1c5a      	adds	r2, r3, #1
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e792:	7812      	ldrb	r2, [r2, #0]
 800e794:	b2d2      	uxtb	r2, r2
 800e796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	3b04      	subs	r3, #4
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7b4:	e046      	b.n	800e844 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d81c      	bhi.n	800e7fc <HAL_SPI_Receive+0x460>
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d017      	beq.n	800e7fc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7d8:	7812      	ldrb	r2, [r2, #0]
 800e7da:	b2d2      	uxtb	r2, r2
 800e7dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7fa:	e023      	b.n	800e844 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7fc:	f7f5 fc8e 	bl	800411c <HAL_GetTick>
 800e800:	4602      	mov	r2, r0
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d803      	bhi.n	800e814 <HAL_SPI_Receive+0x478>
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e812:	d102      	bne.n	800e81a <HAL_SPI_Receive+0x47e>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d114      	bne.n	800e844 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f000 f830 	bl	800e880 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e840:	2303      	movs	r3, #3
 800e842:	e019      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f47f af41 	bne.w	800e6d4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 f814 	bl	800e880 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e872:	2301      	movs	r3, #1
 800e874:	e000      	b.n	800e878 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e876:	2300      	movs	r3, #0
  }
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3720      	adds	r7, #32
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	699a      	ldr	r2, [r3, #24]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f042 0208 	orr.w	r2, r2, #8
 800e89e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	699a      	ldr	r2, [r3, #24]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f042 0210 	orr.w	r2, r2, #16
 800e8ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6919      	ldr	r1, [r3, #16]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b3c      	ldr	r3, [pc, #240]	; (800e9bc <SPI_CloseTransfer+0x13c>)
 800e8cc:	400b      	ands	r3, r1
 800e8ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689a      	ldr	r2, [r3, #8]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e8de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	2b04      	cmp	r3, #4
 800e8ea:	d014      	beq.n	800e916 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f003 0320 	and.w	r3, r3, #32
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00f      	beq.n	800e916 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	699a      	ldr	r2, [r3, #24]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f042 0220 	orr.w	r2, r2, #32
 800e914:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b03      	cmp	r3, #3
 800e920:	d014      	beq.n	800e94c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00f      	beq.n	800e94c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e932:	f043 0204 	orr.w	r2, r3, #4
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	699a      	ldr	r2, [r3, #24]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e94a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00f      	beq.n	800e976 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e95c:	f043 0201 	orr.w	r2, r3, #1
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	699a      	ldr	r2, [r3, #24]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e974:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00f      	beq.n	800e9a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e986:	f043 0208 	orr.w	r2, r3, #8
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e99e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e9b0:	bf00      	nop
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	fffffc90 	.word	0xfffffc90

0800e9c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9cc:	095b      	lsrs	r3, r3, #5
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	3307      	adds	r3, #7
 800e9de:	08db      	lsrs	r3, r3, #3
 800e9e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	fb02 f303 	mul.w	r3, r2, r3
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b082      	sub	sp, #8
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e049      	b.n	800ea9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d106      	bne.n	800ea22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7f4 fd2f 	bl	8003480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2202      	movs	r2, #2
 800ea26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	3304      	adds	r3, #4
 800ea32:	4619      	mov	r1, r3
 800ea34:	4610      	mov	r0, r2
 800ea36:	f000 fe7d 	bl	800f734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2201      	movs	r2, #1
 800ea76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d001      	beq.n	800eabc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	e054      	b.n	800eb66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2202      	movs	r2, #2
 800eac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68da      	ldr	r2, [r3, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f042 0201 	orr.w	r2, r2, #1
 800ead2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a26      	ldr	r2, [pc, #152]	; (800eb74 <HAL_TIM_Base_Start_IT+0xd0>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d022      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eae6:	d01d      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a22      	ldr	r2, [pc, #136]	; (800eb78 <HAL_TIM_Base_Start_IT+0xd4>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d018      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4a21      	ldr	r2, [pc, #132]	; (800eb7c <HAL_TIM_Base_Start_IT+0xd8>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d013      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a1f      	ldr	r2, [pc, #124]	; (800eb80 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d00e      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a1e      	ldr	r2, [pc, #120]	; (800eb84 <HAL_TIM_Base_Start_IT+0xe0>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d009      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a1c      	ldr	r2, [pc, #112]	; (800eb88 <HAL_TIM_Base_Start_IT+0xe4>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d004      	beq.n	800eb24 <HAL_TIM_Base_Start_IT+0x80>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a1b      	ldr	r2, [pc, #108]	; (800eb8c <HAL_TIM_Base_Start_IT+0xe8>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d115      	bne.n	800eb50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	689a      	ldr	r2, [r3, #8]
 800eb2a:	4b19      	ldr	r3, [pc, #100]	; (800eb90 <HAL_TIM_Base_Start_IT+0xec>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b06      	cmp	r3, #6
 800eb34:	d015      	beq.n	800eb62 <HAL_TIM_Base_Start_IT+0xbe>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb3c:	d011      	beq.n	800eb62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f042 0201 	orr.w	r2, r2, #1
 800eb4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb4e:	e008      	b.n	800eb62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f042 0201 	orr.w	r2, r2, #1
 800eb5e:	601a      	str	r2, [r3, #0]
 800eb60:	e000      	b.n	800eb64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40010000 	.word	0x40010000
 800eb78:	40000400 	.word	0x40000400
 800eb7c:	40000800 	.word	0x40000800
 800eb80:	40000c00 	.word	0x40000c00
 800eb84:	40010400 	.word	0x40010400
 800eb88:	40001800 	.word	0x40001800
 800eb8c:	40014000 	.word	0x40014000
 800eb90:	00010007 	.word	0x00010007

0800eb94 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d109      	bne.n	800ebbc <HAL_TIM_OC_Start_IT+0x28>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	bf14      	ite	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	e03c      	b.n	800ec36 <HAL_TIM_OC_Start_IT+0xa2>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d109      	bne.n	800ebd6 <HAL_TIM_OC_Start_IT+0x42>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	bf14      	ite	ne
 800ebce:	2301      	movne	r3, #1
 800ebd0:	2300      	moveq	r3, #0
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	e02f      	b.n	800ec36 <HAL_TIM_OC_Start_IT+0xa2>
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b08      	cmp	r3, #8
 800ebda:	d109      	bne.n	800ebf0 <HAL_TIM_OC_Start_IT+0x5c>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	bf14      	ite	ne
 800ebe8:	2301      	movne	r3, #1
 800ebea:	2300      	moveq	r3, #0
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	e022      	b.n	800ec36 <HAL_TIM_OC_Start_IT+0xa2>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	2b0c      	cmp	r3, #12
 800ebf4:	d109      	bne.n	800ec0a <HAL_TIM_OC_Start_IT+0x76>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	bf14      	ite	ne
 800ec02:	2301      	movne	r3, #1
 800ec04:	2300      	moveq	r3, #0
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	e015      	b.n	800ec36 <HAL_TIM_OC_Start_IT+0xa2>
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	2b10      	cmp	r3, #16
 800ec0e:	d109      	bne.n	800ec24 <HAL_TIM_OC_Start_IT+0x90>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	bf14      	ite	ne
 800ec1c:	2301      	movne	r3, #1
 800ec1e:	2300      	moveq	r3, #0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	e008      	b.n	800ec36 <HAL_TIM_OC_Start_IT+0xa2>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	bf14      	ite	ne
 800ec30:	2301      	movne	r3, #1
 800ec32:	2300      	moveq	r3, #0
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e0ec      	b.n	800ee18 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d104      	bne.n	800ec4e <HAL_TIM_OC_Start_IT+0xba>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2202      	movs	r2, #2
 800ec48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec4c:	e023      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x102>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	d104      	bne.n	800ec5e <HAL_TIM_OC_Start_IT+0xca>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2202      	movs	r2, #2
 800ec58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec5c:	e01b      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x102>
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b08      	cmp	r3, #8
 800ec62:	d104      	bne.n	800ec6e <HAL_TIM_OC_Start_IT+0xda>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec6c:	e013      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x102>
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b0c      	cmp	r3, #12
 800ec72:	d104      	bne.n	800ec7e <HAL_TIM_OC_Start_IT+0xea>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2202      	movs	r2, #2
 800ec78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec7c:	e00b      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x102>
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b10      	cmp	r3, #16
 800ec82:	d104      	bne.n	800ec8e <HAL_TIM_OC_Start_IT+0xfa>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2202      	movs	r2, #2
 800ec88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec8c:	e003      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x102>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2202      	movs	r2, #2
 800ec92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b0c      	cmp	r3, #12
 800ec9a:	d841      	bhi.n	800ed20 <HAL_TIM_OC_Start_IT+0x18c>
 800ec9c:	a201      	add	r2, pc, #4	; (adr r2, 800eca4 <HAL_TIM_OC_Start_IT+0x110>)
 800ec9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca2:	bf00      	nop
 800eca4:	0800ecd9 	.word	0x0800ecd9
 800eca8:	0800ed21 	.word	0x0800ed21
 800ecac:	0800ed21 	.word	0x0800ed21
 800ecb0:	0800ed21 	.word	0x0800ed21
 800ecb4:	0800eceb 	.word	0x0800eceb
 800ecb8:	0800ed21 	.word	0x0800ed21
 800ecbc:	0800ed21 	.word	0x0800ed21
 800ecc0:	0800ed21 	.word	0x0800ed21
 800ecc4:	0800ecfd 	.word	0x0800ecfd
 800ecc8:	0800ed21 	.word	0x0800ed21
 800eccc:	0800ed21 	.word	0x0800ed21
 800ecd0:	0800ed21 	.word	0x0800ed21
 800ecd4:	0800ed0f 	.word	0x0800ed0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68da      	ldr	r2, [r3, #12]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f042 0202 	orr.w	r2, r2, #2
 800ece6:	60da      	str	r2, [r3, #12]
      break;
 800ece8:	e01d      	b.n	800ed26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f042 0204 	orr.w	r2, r2, #4
 800ecf8:	60da      	str	r2, [r3, #12]
      break;
 800ecfa:	e014      	b.n	800ed26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0208 	orr.w	r2, r2, #8
 800ed0a:	60da      	str	r2, [r3, #12]
      break;
 800ed0c:	e00b      	b.n	800ed26 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f042 0210 	orr.w	r2, r2, #16
 800ed1c:	60da      	str	r2, [r3, #12]
      break;
 800ed1e:	e002      	b.n	800ed26 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ed20:	2301      	movs	r3, #1
 800ed22:	73fb      	strb	r3, [r7, #15]
      break;
 800ed24:	bf00      	nop
  }

  if (status == HAL_OK)
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d174      	bne.n	800ee16 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2201      	movs	r2, #1
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f001 f917 	bl	800ff68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a38      	ldr	r2, [pc, #224]	; (800ee20 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d013      	beq.n	800ed6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a36      	ldr	r2, [pc, #216]	; (800ee24 <HAL_TIM_OC_Start_IT+0x290>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d00e      	beq.n	800ed6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a35      	ldr	r2, [pc, #212]	; (800ee28 <HAL_TIM_OC_Start_IT+0x294>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d009      	beq.n	800ed6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a33      	ldr	r2, [pc, #204]	; (800ee2c <HAL_TIM_OC_Start_IT+0x298>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d004      	beq.n	800ed6c <HAL_TIM_OC_Start_IT+0x1d8>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a32      	ldr	r2, [pc, #200]	; (800ee30 <HAL_TIM_OC_Start_IT+0x29c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d101      	bne.n	800ed70 <HAL_TIM_OC_Start_IT+0x1dc>
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e000      	b.n	800ed72 <HAL_TIM_OC_Start_IT+0x1de>
 800ed70:	2300      	movs	r3, #0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d007      	beq.n	800ed86 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a25      	ldr	r2, [pc, #148]	; (800ee20 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d022      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed98:	d01d      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a25      	ldr	r2, [pc, #148]	; (800ee34 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d018      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a23      	ldr	r2, [pc, #140]	; (800ee38 <HAL_TIM_OC_Start_IT+0x2a4>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d013      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a22      	ldr	r2, [pc, #136]	; (800ee3c <HAL_TIM_OC_Start_IT+0x2a8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d00e      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a19      	ldr	r2, [pc, #100]	; (800ee24 <HAL_TIM_OC_Start_IT+0x290>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d009      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a1e      	ldr	r2, [pc, #120]	; (800ee40 <HAL_TIM_OC_Start_IT+0x2ac>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d004      	beq.n	800edd6 <HAL_TIM_OC_Start_IT+0x242>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <HAL_TIM_OC_Start_IT+0x294>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d115      	bne.n	800ee02 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689a      	ldr	r2, [r3, #8]
 800eddc:	4b19      	ldr	r3, [pc, #100]	; (800ee44 <HAL_TIM_OC_Start_IT+0x2b0>)
 800edde:	4013      	ands	r3, r2
 800ede0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2b06      	cmp	r3, #6
 800ede6:	d015      	beq.n	800ee14 <HAL_TIM_OC_Start_IT+0x280>
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edee:	d011      	beq.n	800ee14 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f042 0201 	orr.w	r2, r2, #1
 800edfe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee00:	e008      	b.n	800ee14 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f042 0201 	orr.w	r2, r2, #1
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	e000      	b.n	800ee16 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ee16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	40010000 	.word	0x40010000
 800ee24:	40010400 	.word	0x40010400
 800ee28:	40014000 	.word	0x40014000
 800ee2c:	40014400 	.word	0x40014400
 800ee30:	40014800 	.word	0x40014800
 800ee34:	40000400 	.word	0x40000400
 800ee38:	40000800 	.word	0x40000800
 800ee3c:	40000c00 	.word	0x40000c00
 800ee40:	40001800 	.word	0x40001800
 800ee44:	00010007 	.word	0x00010007

0800ee48 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	2b0c      	cmp	r3, #12
 800ee5a:	d841      	bhi.n	800eee0 <HAL_TIM_OC_Stop_IT+0x98>
 800ee5c:	a201      	add	r2, pc, #4	; (adr r2, 800ee64 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ee5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee62:	bf00      	nop
 800ee64:	0800ee99 	.word	0x0800ee99
 800ee68:	0800eee1 	.word	0x0800eee1
 800ee6c:	0800eee1 	.word	0x0800eee1
 800ee70:	0800eee1 	.word	0x0800eee1
 800ee74:	0800eeab 	.word	0x0800eeab
 800ee78:	0800eee1 	.word	0x0800eee1
 800ee7c:	0800eee1 	.word	0x0800eee1
 800ee80:	0800eee1 	.word	0x0800eee1
 800ee84:	0800eebd 	.word	0x0800eebd
 800ee88:	0800eee1 	.word	0x0800eee1
 800ee8c:	0800eee1 	.word	0x0800eee1
 800ee90:	0800eee1 	.word	0x0800eee1
 800ee94:	0800eecf 	.word	0x0800eecf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68da      	ldr	r2, [r3, #12]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f022 0202 	bic.w	r2, r2, #2
 800eea6:	60da      	str	r2, [r3, #12]
      break;
 800eea8:	e01d      	b.n	800eee6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0204 	bic.w	r2, r2, #4
 800eeb8:	60da      	str	r2, [r3, #12]
      break;
 800eeba:	e014      	b.n	800eee6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68da      	ldr	r2, [r3, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f022 0208 	bic.w	r2, r2, #8
 800eeca:	60da      	str	r2, [r3, #12]
      break;
 800eecc:	e00b      	b.n	800eee6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68da      	ldr	r2, [r3, #12]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0210 	bic.w	r2, r2, #16
 800eedc:	60da      	str	r2, [r3, #12]
      break;
 800eede:	e002      	b.n	800eee6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800eee0:	2301      	movs	r3, #1
 800eee2:	73fb      	strb	r3, [r7, #15]
      break;
 800eee4:	bf00      	nop
  }

  if (status == HAL_OK)
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f040 8081 	bne.w	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2200      	movs	r2, #0
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f001 f836 	bl	800ff68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a3e      	ldr	r2, [pc, #248]	; (800effc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d013      	beq.n	800ef2e <HAL_TIM_OC_Stop_IT+0xe6>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a3d      	ldr	r2, [pc, #244]	; (800f000 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d00e      	beq.n	800ef2e <HAL_TIM_OC_Stop_IT+0xe6>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a3b      	ldr	r2, [pc, #236]	; (800f004 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d009      	beq.n	800ef2e <HAL_TIM_OC_Stop_IT+0xe6>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a3a      	ldr	r2, [pc, #232]	; (800f008 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d004      	beq.n	800ef2e <HAL_TIM_OC_Stop_IT+0xe6>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a38      	ldr	r2, [pc, #224]	; (800f00c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d101      	bne.n	800ef32 <HAL_TIM_OC_Stop_IT+0xea>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <HAL_TIM_OC_Stop_IT+0xec>
 800ef32:	2300      	movs	r3, #0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d017      	beq.n	800ef68 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	6a1a      	ldr	r2, [r3, #32]
 800ef3e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef42:	4013      	ands	r3, r2
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10f      	bne.n	800ef68 <HAL_TIM_OC_Stop_IT+0x120>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6a1a      	ldr	r2, [r3, #32]
 800ef4e:	f240 4344 	movw	r3, #1092	; 0x444
 800ef52:	4013      	ands	r3, r2
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d107      	bne.n	800ef68 <HAL_TIM_OC_Stop_IT+0x120>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ef66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6a1a      	ldr	r2, [r3, #32]
 800ef6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef72:	4013      	ands	r3, r2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d10f      	bne.n	800ef98 <HAL_TIM_OC_Stop_IT+0x150>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6a1a      	ldr	r2, [r3, #32]
 800ef7e:	f240 4344 	movw	r3, #1092	; 0x444
 800ef82:	4013      	ands	r3, r2
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d107      	bne.n	800ef98 <HAL_TIM_OC_Stop_IT+0x150>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f022 0201 	bic.w	r2, r2, #1
 800ef96:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d104      	bne.n	800efa8 <HAL_TIM_OC_Stop_IT+0x160>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800efa6:	e023      	b.n	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d104      	bne.n	800efb8 <HAL_TIM_OC_Stop_IT+0x170>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800efb6:	e01b      	b.n	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	2b08      	cmp	r3, #8
 800efbc:	d104      	bne.n	800efc8 <HAL_TIM_OC_Stop_IT+0x180>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efc6:	e013      	b.n	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b0c      	cmp	r3, #12
 800efcc:	d104      	bne.n	800efd8 <HAL_TIM_OC_Stop_IT+0x190>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800efd6:	e00b      	b.n	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	2b10      	cmp	r3, #16
 800efdc:	d104      	bne.n	800efe8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800efe6:	e003      	b.n	800eff0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	40010000 	.word	0x40010000
 800f000:	40010400 	.word	0x40010400
 800f004:	40014000 	.word	0x40014000
 800f008:	40014400 	.word	0x40014400
 800f00c:	40014800 	.word	0x40014800

0800f010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d101      	bne.n	800f022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f01e:	2301      	movs	r3, #1
 800f020:	e049      	b.n	800f0b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d106      	bne.n	800f03c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 f841 	bl	800f0be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2202      	movs	r2, #2
 800f040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f000 fb70 	bl	800f734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f0c6:	bf00      	nop
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f003 0302 	and.w	r3, r3, #2
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d020      	beq.n	800f136 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f003 0302 	and.w	r3, r3, #2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d01b      	beq.n	800f136 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f06f 0202 	mvn.w	r2, #2
 800f106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	699b      	ldr	r3, [r3, #24]
 800f114:	f003 0303 	and.w	r3, r3, #3
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d003      	beq.n	800f124 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 faeb 	bl	800f6f8 <HAL_TIM_IC_CaptureCallback>
 800f122:	e005      	b.n	800f130 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7f2 f9d3 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 faee 	bl	800f70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d020      	beq.n	800f182 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f003 0304 	and.w	r3, r3, #4
 800f146:	2b00      	cmp	r3, #0
 800f148:	d01b      	beq.n	800f182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f06f 0204 	mvn.w	r2, #4
 800f152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f164:	2b00      	cmp	r3, #0
 800f166:	d003      	beq.n	800f170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fac5 	bl	800f6f8 <HAL_TIM_IC_CaptureCallback>
 800f16e:	e005      	b.n	800f17c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7f2 f9ad 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fac8 	bl	800f70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f003 0308 	and.w	r3, r3, #8
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d020      	beq.n	800f1ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f003 0308 	and.w	r3, r3, #8
 800f192:	2b00      	cmp	r3, #0
 800f194:	d01b      	beq.n	800f1ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f06f 0208 	mvn.w	r2, #8
 800f19e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2204      	movs	r2, #4
 800f1a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69db      	ldr	r3, [r3, #28]
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d003      	beq.n	800f1bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fa9f 	bl	800f6f8 <HAL_TIM_IC_CaptureCallback>
 800f1ba:	e005      	b.n	800f1c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7f2 f987 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 faa2 	bl	800f70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d020      	beq.n	800f21a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f003 0310 	and.w	r3, r3, #16
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d01b      	beq.n	800f21a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f06f 0210 	mvn.w	r2, #16
 800f1ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2208      	movs	r2, #8
 800f1f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	69db      	ldr	r3, [r3, #28]
 800f1f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d003      	beq.n	800f208 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fa79 	bl	800f6f8 <HAL_TIM_IC_CaptureCallback>
 800f206:	e005      	b.n	800f214 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7f2 f961 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa7c 	bl	800f70c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00c      	beq.n	800f23e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f003 0301 	and.w	r3, r3, #1
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d007      	beq.n	800f23e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f06f 0201 	mvn.w	r2, #1
 800f236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7f2 ffaf 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00c      	beq.n	800f26c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d007      	beq.n	800f26c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 ffba 	bl	80101e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00c      	beq.n	800f290 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d007      	beq.n	800f290 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 ffb2 	bl	80101f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00c      	beq.n	800f2b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d007      	beq.n	800f2b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 fa36 	bl	800f720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 0320 	and.w	r3, r3, #32
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00c      	beq.n	800f2d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f003 0320 	and.w	r3, r3, #32
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d007      	beq.n	800f2d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f06f 0220 	mvn.w	r2, #32
 800f2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 ff7a 	bl	80101cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2d8:	bf00      	nop
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d101      	bne.n	800f2fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	e0ff      	b.n	800f4fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2201      	movs	r2, #1
 800f302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b14      	cmp	r3, #20
 800f30a:	f200 80f0 	bhi.w	800f4ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f30e:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f314:	0800f369 	.word	0x0800f369
 800f318:	0800f4ef 	.word	0x0800f4ef
 800f31c:	0800f4ef 	.word	0x0800f4ef
 800f320:	0800f4ef 	.word	0x0800f4ef
 800f324:	0800f3a9 	.word	0x0800f3a9
 800f328:	0800f4ef 	.word	0x0800f4ef
 800f32c:	0800f4ef 	.word	0x0800f4ef
 800f330:	0800f4ef 	.word	0x0800f4ef
 800f334:	0800f3eb 	.word	0x0800f3eb
 800f338:	0800f4ef 	.word	0x0800f4ef
 800f33c:	0800f4ef 	.word	0x0800f4ef
 800f340:	0800f4ef 	.word	0x0800f4ef
 800f344:	0800f42b 	.word	0x0800f42b
 800f348:	0800f4ef 	.word	0x0800f4ef
 800f34c:	0800f4ef 	.word	0x0800f4ef
 800f350:	0800f4ef 	.word	0x0800f4ef
 800f354:	0800f46d 	.word	0x0800f46d
 800f358:	0800f4ef 	.word	0x0800f4ef
 800f35c:	0800f4ef 	.word	0x0800f4ef
 800f360:	0800f4ef 	.word	0x0800f4ef
 800f364:	0800f4ad 	.word	0x0800f4ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68b9      	ldr	r1, [r7, #8]
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 fa86 	bl	800f880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	699a      	ldr	r2, [r3, #24]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f042 0208 	orr.w	r2, r2, #8
 800f382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f022 0204 	bic.w	r2, r2, #4
 800f392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6999      	ldr	r1, [r3, #24]
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	691a      	ldr	r2, [r3, #16]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	430a      	orrs	r2, r1
 800f3a4:	619a      	str	r2, [r3, #24]
      break;
 800f3a6:	e0a5      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 faf6 	bl	800f9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	699a      	ldr	r2, [r3, #24]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	699a      	ldr	r2, [r3, #24]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6999      	ldr	r1, [r3, #24]
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	021a      	lsls	r2, r3, #8
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	430a      	orrs	r2, r1
 800f3e6:	619a      	str	r2, [r3, #24]
      break;
 800f3e8:	e084      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f000 fb5f 	bl	800fab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	69da      	ldr	r2, [r3, #28]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f042 0208 	orr.w	r2, r2, #8
 800f404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	69da      	ldr	r2, [r3, #28]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f022 0204 	bic.w	r2, r2, #4
 800f414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69d9      	ldr	r1, [r3, #28]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	691a      	ldr	r2, [r3, #16]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	430a      	orrs	r2, r1
 800f426:	61da      	str	r2, [r3, #28]
      break;
 800f428:	e064      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68b9      	ldr	r1, [r7, #8]
 800f430:	4618      	mov	r0, r3
 800f432:	f000 fbc7 	bl	800fbc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69da      	ldr	r2, [r3, #28]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	69da      	ldr	r2, [r3, #28]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	69d9      	ldr	r1, [r3, #28]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	021a      	lsls	r2, r3, #8
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	430a      	orrs	r2, r1
 800f468:	61da      	str	r2, [r3, #28]
      break;
 800f46a:	e043      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	4618      	mov	r0, r3
 800f474:	f000 fc10 	bl	800fc98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f042 0208 	orr.w	r2, r2, #8
 800f486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f022 0204 	bic.w	r2, r2, #4
 800f496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	691a      	ldr	r2, [r3, #16]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	430a      	orrs	r2, r1
 800f4a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4aa:	e023      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 fc54 	bl	800fd60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	021a      	lsls	r2, r3, #8
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	430a      	orrs	r2, r1
 800f4ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4ec:	e002      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800f4f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop

0800f508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d101      	bne.n	800f524 <HAL_TIM_ConfigClockSource+0x1c>
 800f520:	2302      	movs	r3, #2
 800f522:	e0dc      	b.n	800f6de <HAL_TIM_ConfigClockSource+0x1d6>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2202      	movs	r2, #2
 800f530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	4b6a      	ldr	r3, [pc, #424]	; (800f6e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f540:	4013      	ands	r3, r2
 800f542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f54a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68ba      	ldr	r2, [r7, #8]
 800f552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a64      	ldr	r2, [pc, #400]	; (800f6ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	f000 80a9 	beq.w	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f560:	4a62      	ldr	r2, [pc, #392]	; (800f6ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800f562:	4293      	cmp	r3, r2
 800f564:	f200 80ae 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f568:	4a61      	ldr	r2, [pc, #388]	; (800f6f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	f000 80a1 	beq.w	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f570:	4a5f      	ldr	r2, [pc, #380]	; (800f6f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f572:	4293      	cmp	r3, r2
 800f574:	f200 80a6 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f578:	4a5e      	ldr	r2, [pc, #376]	; (800f6f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	f000 8099 	beq.w	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f580:	4a5c      	ldr	r2, [pc, #368]	; (800f6f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f582:	4293      	cmp	r3, r2
 800f584:	f200 809e 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f588:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f58c:	f000 8091 	beq.w	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f594:	f200 8096 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f59c:	f000 8089 	beq.w	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5a4:	f200 808e 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5ac:	d03e      	beq.n	800f62c <HAL_TIM_ConfigClockSource+0x124>
 800f5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5b2:	f200 8087 	bhi.w	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ba:	f000 8086 	beq.w	800f6ca <HAL_TIM_ConfigClockSource+0x1c2>
 800f5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5c2:	d87f      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5c4:	2b70      	cmp	r3, #112	; 0x70
 800f5c6:	d01a      	beq.n	800f5fe <HAL_TIM_ConfigClockSource+0xf6>
 800f5c8:	2b70      	cmp	r3, #112	; 0x70
 800f5ca:	d87b      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5cc:	2b60      	cmp	r3, #96	; 0x60
 800f5ce:	d050      	beq.n	800f672 <HAL_TIM_ConfigClockSource+0x16a>
 800f5d0:	2b60      	cmp	r3, #96	; 0x60
 800f5d2:	d877      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5d4:	2b50      	cmp	r3, #80	; 0x50
 800f5d6:	d03c      	beq.n	800f652 <HAL_TIM_ConfigClockSource+0x14a>
 800f5d8:	2b50      	cmp	r3, #80	; 0x50
 800f5da:	d873      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5dc:	2b40      	cmp	r3, #64	; 0x40
 800f5de:	d058      	beq.n	800f692 <HAL_TIM_ConfigClockSource+0x18a>
 800f5e0:	2b40      	cmp	r3, #64	; 0x40
 800f5e2:	d86f      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5e4:	2b30      	cmp	r3, #48	; 0x30
 800f5e6:	d064      	beq.n	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5e8:	2b30      	cmp	r3, #48	; 0x30
 800f5ea:	d86b      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5ec:	2b20      	cmp	r3, #32
 800f5ee:	d060      	beq.n	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5f0:	2b20      	cmp	r3, #32
 800f5f2:	d867      	bhi.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d05c      	beq.n	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5f8:	2b10      	cmp	r3, #16
 800f5fa:	d05a      	beq.n	800f6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800f5fc:	e062      	b.n	800f6c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6818      	ldr	r0, [r3, #0]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	6899      	ldr	r1, [r3, #8]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	f000 fc8b 	bl	800ff28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	609a      	str	r2, [r3, #8]
      break;
 800f62a:	e04f      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6818      	ldr	r0, [r3, #0]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	6899      	ldr	r1, [r3, #8]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	f000 fc74 	bl	800ff28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689a      	ldr	r2, [r3, #8]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f64e:	609a      	str	r2, [r3, #8]
      break;
 800f650:	e03c      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6818      	ldr	r0, [r3, #0]
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	6859      	ldr	r1, [r3, #4]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	461a      	mov	r2, r3
 800f660:	f000 fbe4 	bl	800fe2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2150      	movs	r1, #80	; 0x50
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 fc3e 	bl	800feec <TIM_ITRx_SetConfig>
      break;
 800f670:	e02c      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6818      	ldr	r0, [r3, #0]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	6859      	ldr	r1, [r3, #4]
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	461a      	mov	r2, r3
 800f680:	f000 fc03 	bl	800fe8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2160      	movs	r1, #96	; 0x60
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 fc2e 	bl	800feec <TIM_ITRx_SetConfig>
      break;
 800f690:	e01c      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6818      	ldr	r0, [r3, #0]
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	6859      	ldr	r1, [r3, #4]
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f000 fbc4 	bl	800fe2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2140      	movs	r1, #64	; 0x40
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 fc1e 	bl	800feec <TIM_ITRx_SetConfig>
      break;
 800f6b0:	e00c      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	4610      	mov	r0, r2
 800f6be:	f000 fc15 	bl	800feec <TIM_ITRx_SetConfig>
      break;
 800f6c2:	e003      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c8:	e000      	b.n	800f6cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f6ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	ffceff88 	.word	0xffceff88
 800f6ec:	00100040 	.word	0x00100040
 800f6f0:	00100030 	.word	0x00100030
 800f6f4:	00100020 	.word	0x00100020

0800f6f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4a46      	ldr	r2, [pc, #280]	; (800f860 <TIM_Base_SetConfig+0x12c>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d013      	beq.n	800f774 <TIM_Base_SetConfig+0x40>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f752:	d00f      	beq.n	800f774 <TIM_Base_SetConfig+0x40>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a43      	ldr	r2, [pc, #268]	; (800f864 <TIM_Base_SetConfig+0x130>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d00b      	beq.n	800f774 <TIM_Base_SetConfig+0x40>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a42      	ldr	r2, [pc, #264]	; (800f868 <TIM_Base_SetConfig+0x134>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d007      	beq.n	800f774 <TIM_Base_SetConfig+0x40>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a41      	ldr	r2, [pc, #260]	; (800f86c <TIM_Base_SetConfig+0x138>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d003      	beq.n	800f774 <TIM_Base_SetConfig+0x40>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4a40      	ldr	r2, [pc, #256]	; (800f870 <TIM_Base_SetConfig+0x13c>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d108      	bne.n	800f786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f77a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	4313      	orrs	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a35      	ldr	r2, [pc, #212]	; (800f860 <TIM_Base_SetConfig+0x12c>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d01f      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f794:	d01b      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4a32      	ldr	r2, [pc, #200]	; (800f864 <TIM_Base_SetConfig+0x130>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d017      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4a31      	ldr	r2, [pc, #196]	; (800f868 <TIM_Base_SetConfig+0x134>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d013      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4a30      	ldr	r2, [pc, #192]	; (800f86c <TIM_Base_SetConfig+0x138>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d00f      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4a2f      	ldr	r2, [pc, #188]	; (800f870 <TIM_Base_SetConfig+0x13c>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d00b      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4a2e      	ldr	r2, [pc, #184]	; (800f874 <TIM_Base_SetConfig+0x140>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d007      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a2d      	ldr	r2, [pc, #180]	; (800f878 <TIM_Base_SetConfig+0x144>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d003      	beq.n	800f7ce <TIM_Base_SetConfig+0x9a>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a2c      	ldr	r2, [pc, #176]	; (800f87c <TIM_Base_SetConfig+0x148>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d108      	bne.n	800f7e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	689a      	ldr	r2, [r3, #8]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a16      	ldr	r2, [pc, #88]	; (800f860 <TIM_Base_SetConfig+0x12c>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d00f      	beq.n	800f82c <TIM_Base_SetConfig+0xf8>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a18      	ldr	r2, [pc, #96]	; (800f870 <TIM_Base_SetConfig+0x13c>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d00b      	beq.n	800f82c <TIM_Base_SetConfig+0xf8>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a17      	ldr	r2, [pc, #92]	; (800f874 <TIM_Base_SetConfig+0x140>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d007      	beq.n	800f82c <TIM_Base_SetConfig+0xf8>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a16      	ldr	r2, [pc, #88]	; (800f878 <TIM_Base_SetConfig+0x144>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d003      	beq.n	800f82c <TIM_Base_SetConfig+0xf8>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a15      	ldr	r2, [pc, #84]	; (800f87c <TIM_Base_SetConfig+0x148>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d103      	bne.n	800f834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	691a      	ldr	r2, [r3, #16]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	2b01      	cmp	r3, #1
 800f844:	d105      	bne.n	800f852 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	f023 0201 	bic.w	r2, r3, #1
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	611a      	str	r2, [r3, #16]
  }
}
 800f852:	bf00      	nop
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	40010000 	.word	0x40010000
 800f864:	40000400 	.word	0x40000400
 800f868:	40000800 	.word	0x40000800
 800f86c:	40000c00 	.word	0x40000c00
 800f870:	40010400 	.word	0x40010400
 800f874:	40014000 	.word	0x40014000
 800f878:	40014400 	.word	0x40014400
 800f87c:	40014800 	.word	0x40014800

0800f880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f880:	b480      	push	{r7}
 800f882:	b087      	sub	sp, #28
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a1b      	ldr	r3, [r3, #32]
 800f894:	f023 0201 	bic.w	r2, r3, #1
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	4b37      	ldr	r3, [pc, #220]	; (800f988 <TIM_OC1_SetConfig+0x108>)
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f023 0303 	bic.w	r3, r3, #3
 800f8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f023 0302 	bic.w	r3, r3, #2
 800f8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	689b      	ldr	r3, [r3, #8]
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a2d      	ldr	r2, [pc, #180]	; (800f98c <TIM_OC1_SetConfig+0x10c>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d00f      	beq.n	800f8fc <TIM_OC1_SetConfig+0x7c>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a2c      	ldr	r2, [pc, #176]	; (800f990 <TIM_OC1_SetConfig+0x110>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d00b      	beq.n	800f8fc <TIM_OC1_SetConfig+0x7c>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4a2b      	ldr	r2, [pc, #172]	; (800f994 <TIM_OC1_SetConfig+0x114>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d007      	beq.n	800f8fc <TIM_OC1_SetConfig+0x7c>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a2a      	ldr	r2, [pc, #168]	; (800f998 <TIM_OC1_SetConfig+0x118>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d003      	beq.n	800f8fc <TIM_OC1_SetConfig+0x7c>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4a29      	ldr	r2, [pc, #164]	; (800f99c <TIM_OC1_SetConfig+0x11c>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d10c      	bne.n	800f916 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	f023 0308 	bic.w	r3, r3, #8
 800f902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	f023 0304 	bic.w	r3, r3, #4
 800f914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a1c      	ldr	r2, [pc, #112]	; (800f98c <TIM_OC1_SetConfig+0x10c>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00f      	beq.n	800f93e <TIM_OC1_SetConfig+0xbe>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a1b      	ldr	r2, [pc, #108]	; (800f990 <TIM_OC1_SetConfig+0x110>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00b      	beq.n	800f93e <TIM_OC1_SetConfig+0xbe>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a1a      	ldr	r2, [pc, #104]	; (800f994 <TIM_OC1_SetConfig+0x114>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <TIM_OC1_SetConfig+0xbe>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a19      	ldr	r2, [pc, #100]	; (800f998 <TIM_OC1_SetConfig+0x118>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_OC1_SetConfig+0xbe>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a18      	ldr	r2, [pc, #96]	; (800f99c <TIM_OC1_SetConfig+0x11c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d111      	bne.n	800f962 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	4313      	orrs	r3, r2
 800f956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	699b      	ldr	r3, [r3, #24]
 800f95c:	693a      	ldr	r2, [r7, #16]
 800f95e:	4313      	orrs	r3, r2
 800f960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	685a      	ldr	r2, [r3, #4]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	621a      	str	r2, [r3, #32]
}
 800f97c:	bf00      	nop
 800f97e:	371c      	adds	r7, #28
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	fffeff8f 	.word	0xfffeff8f
 800f98c:	40010000 	.word	0x40010000
 800f990:	40010400 	.word	0x40010400
 800f994:	40014000 	.word	0x40014000
 800f998:	40014400 	.word	0x40014400
 800f99c:	40014800 	.word	0x40014800

0800f9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a1b      	ldr	r3, [r3, #32]
 800f9b4:	f023 0210 	bic.w	r2, r3, #16
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f9c8:	68fa      	ldr	r2, [r7, #12]
 800f9ca:	4b34      	ldr	r3, [pc, #208]	; (800fa9c <TIM_OC2_SetConfig+0xfc>)
 800f9cc:	4013      	ands	r3, r2
 800f9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f023 0320 	bic.w	r3, r3, #32
 800f9ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a29      	ldr	r2, [pc, #164]	; (800faa0 <TIM_OC2_SetConfig+0x100>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d003      	beq.n	800fa08 <TIM_OC2_SetConfig+0x68>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a28      	ldr	r2, [pc, #160]	; (800faa4 <TIM_OC2_SetConfig+0x104>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d10d      	bne.n	800fa24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	011b      	lsls	r3, r3, #4
 800fa16:	697a      	ldr	r2, [r7, #20]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a1e      	ldr	r2, [pc, #120]	; (800faa0 <TIM_OC2_SetConfig+0x100>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d00f      	beq.n	800fa4c <TIM_OC2_SetConfig+0xac>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a1d      	ldr	r2, [pc, #116]	; (800faa4 <TIM_OC2_SetConfig+0x104>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d00b      	beq.n	800fa4c <TIM_OC2_SetConfig+0xac>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a1c      	ldr	r2, [pc, #112]	; (800faa8 <TIM_OC2_SetConfig+0x108>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d007      	beq.n	800fa4c <TIM_OC2_SetConfig+0xac>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a1b      	ldr	r2, [pc, #108]	; (800faac <TIM_OC2_SetConfig+0x10c>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d003      	beq.n	800fa4c <TIM_OC2_SetConfig+0xac>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a1a      	ldr	r2, [pc, #104]	; (800fab0 <TIM_OC2_SetConfig+0x110>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d113      	bne.n	800fa74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	695b      	ldr	r3, [r3, #20]
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	699b      	ldr	r3, [r3, #24]
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	685a      	ldr	r2, [r3, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	621a      	str	r2, [r3, #32]
}
 800fa8e:	bf00      	nop
 800fa90:	371c      	adds	r7, #28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	feff8fff 	.word	0xfeff8fff
 800faa0:	40010000 	.word	0x40010000
 800faa4:	40010400 	.word	0x40010400
 800faa8:	40014000 	.word	0x40014000
 800faac:	40014400 	.word	0x40014400
 800fab0:	40014800 	.word	0x40014800

0800fab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a1b      	ldr	r3, [r3, #32]
 800fac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a1b      	ldr	r3, [r3, #32]
 800fac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	4b33      	ldr	r3, [pc, #204]	; (800fbac <TIM_OC3_SetConfig+0xf8>)
 800fae0:	4013      	ands	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 0303 	bic.w	r3, r3, #3
 800faea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fafc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	021b      	lsls	r3, r3, #8
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4a28      	ldr	r2, [pc, #160]	; (800fbb0 <TIM_OC3_SetConfig+0xfc>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d003      	beq.n	800fb1a <TIM_OC3_SetConfig+0x66>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4a27      	ldr	r2, [pc, #156]	; (800fbb4 <TIM_OC3_SetConfig+0x100>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d10d      	bne.n	800fb36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	697a      	ldr	r2, [r7, #20]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4a1d      	ldr	r2, [pc, #116]	; (800fbb0 <TIM_OC3_SetConfig+0xfc>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d00f      	beq.n	800fb5e <TIM_OC3_SetConfig+0xaa>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4a1c      	ldr	r2, [pc, #112]	; (800fbb4 <TIM_OC3_SetConfig+0x100>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d00b      	beq.n	800fb5e <TIM_OC3_SetConfig+0xaa>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4a1b      	ldr	r2, [pc, #108]	; (800fbb8 <TIM_OC3_SetConfig+0x104>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d007      	beq.n	800fb5e <TIM_OC3_SetConfig+0xaa>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4a1a      	ldr	r2, [pc, #104]	; (800fbbc <TIM_OC3_SetConfig+0x108>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d003      	beq.n	800fb5e <TIM_OC3_SetConfig+0xaa>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4a19      	ldr	r2, [pc, #100]	; (800fbc0 <TIM_OC3_SetConfig+0x10c>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d113      	bne.n	800fb86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	011b      	lsls	r3, r3, #4
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	4313      	orrs	r3, r2
 800fb78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	699b      	ldr	r3, [r3, #24]
 800fb7e:	011b      	lsls	r3, r3, #4
 800fb80:	693a      	ldr	r2, [r7, #16]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	697a      	ldr	r2, [r7, #20]
 800fb9e:	621a      	str	r2, [r3, #32]
}
 800fba0:	bf00      	nop
 800fba2:	371c      	adds	r7, #28
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	fffeff8f 	.word	0xfffeff8f
 800fbb0:	40010000 	.word	0x40010000
 800fbb4:	40010400 	.word	0x40010400
 800fbb8:	40014000 	.word	0x40014000
 800fbbc:	40014400 	.word	0x40014400
 800fbc0:	40014800 	.word	0x40014800

0800fbc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6a1b      	ldr	r3, [r3, #32]
 800fbd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4b24      	ldr	r3, [pc, #144]	; (800fc80 <TIM_OC4_SetConfig+0xbc>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	021b      	lsls	r3, r3, #8
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	4313      	orrs	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	031b      	lsls	r3, r3, #12
 800fc16:	693a      	ldr	r2, [r7, #16]
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a19      	ldr	r2, [pc, #100]	; (800fc84 <TIM_OC4_SetConfig+0xc0>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d00f      	beq.n	800fc44 <TIM_OC4_SetConfig+0x80>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a18      	ldr	r2, [pc, #96]	; (800fc88 <TIM_OC4_SetConfig+0xc4>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d00b      	beq.n	800fc44 <TIM_OC4_SetConfig+0x80>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a17      	ldr	r2, [pc, #92]	; (800fc8c <TIM_OC4_SetConfig+0xc8>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d007      	beq.n	800fc44 <TIM_OC4_SetConfig+0x80>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a16      	ldr	r2, [pc, #88]	; (800fc90 <TIM_OC4_SetConfig+0xcc>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d003      	beq.n	800fc44 <TIM_OC4_SetConfig+0x80>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a15      	ldr	r2, [pc, #84]	; (800fc94 <TIM_OC4_SetConfig+0xd0>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d109      	bne.n	800fc58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	695b      	ldr	r3, [r3, #20]
 800fc50:	019b      	lsls	r3, r3, #6
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	4313      	orrs	r3, r2
 800fc56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	685a      	ldr	r2, [r3, #4]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	621a      	str	r2, [r3, #32]
}
 800fc72:	bf00      	nop
 800fc74:	371c      	adds	r7, #28
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	feff8fff 	.word	0xfeff8fff
 800fc84:	40010000 	.word	0x40010000
 800fc88:	40010400 	.word	0x40010400
 800fc8c:	40014000 	.word	0x40014000
 800fc90:	40014400 	.word	0x40014400
 800fc94:	40014800 	.word	0x40014800

0800fc98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a1b      	ldr	r3, [r3, #32]
 800fcac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	4b21      	ldr	r3, [pc, #132]	; (800fd48 <TIM_OC5_SetConfig+0xb0>)
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fcd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	041b      	lsls	r3, r3, #16
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	4313      	orrs	r3, r2
 800fce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4a18      	ldr	r2, [pc, #96]	; (800fd4c <TIM_OC5_SetConfig+0xb4>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d00f      	beq.n	800fd0e <TIM_OC5_SetConfig+0x76>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4a17      	ldr	r2, [pc, #92]	; (800fd50 <TIM_OC5_SetConfig+0xb8>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d00b      	beq.n	800fd0e <TIM_OC5_SetConfig+0x76>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4a16      	ldr	r2, [pc, #88]	; (800fd54 <TIM_OC5_SetConfig+0xbc>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d007      	beq.n	800fd0e <TIM_OC5_SetConfig+0x76>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4a15      	ldr	r2, [pc, #84]	; (800fd58 <TIM_OC5_SetConfig+0xc0>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d003      	beq.n	800fd0e <TIM_OC5_SetConfig+0x76>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4a14      	ldr	r2, [pc, #80]	; (800fd5c <TIM_OC5_SetConfig+0xc4>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d109      	bne.n	800fd22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	695b      	ldr	r3, [r3, #20]
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	685a      	ldr	r2, [r3, #4]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	621a      	str	r2, [r3, #32]
}
 800fd3c:	bf00      	nop
 800fd3e:	371c      	adds	r7, #28
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	fffeff8f 	.word	0xfffeff8f
 800fd4c:	40010000 	.word	0x40010000
 800fd50:	40010400 	.word	0x40010400
 800fd54:	40014000 	.word	0x40014000
 800fd58:	40014400 	.word	0x40014400
 800fd5c:	40014800 	.word	0x40014800

0800fd60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b087      	sub	sp, #28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a1b      	ldr	r3, [r3, #32]
 800fd74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	4b22      	ldr	r3, [pc, #136]	; (800fe14 <TIM_OC6_SetConfig+0xb4>)
 800fd8c:	4013      	ands	r3, r2
 800fd8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	021b      	lsls	r3, r3, #8
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fda2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	051b      	lsls	r3, r3, #20
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4a19      	ldr	r2, [pc, #100]	; (800fe18 <TIM_OC6_SetConfig+0xb8>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d00f      	beq.n	800fdd8 <TIM_OC6_SetConfig+0x78>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a18      	ldr	r2, [pc, #96]	; (800fe1c <TIM_OC6_SetConfig+0xbc>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00b      	beq.n	800fdd8 <TIM_OC6_SetConfig+0x78>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a17      	ldr	r2, [pc, #92]	; (800fe20 <TIM_OC6_SetConfig+0xc0>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d007      	beq.n	800fdd8 <TIM_OC6_SetConfig+0x78>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a16      	ldr	r2, [pc, #88]	; (800fe24 <TIM_OC6_SetConfig+0xc4>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d003      	beq.n	800fdd8 <TIM_OC6_SetConfig+0x78>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a15      	ldr	r2, [pc, #84]	; (800fe28 <TIM_OC6_SetConfig+0xc8>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d109      	bne.n	800fdec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fdde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	029b      	lsls	r3, r3, #10
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	621a      	str	r2, [r3, #32]
}
 800fe06:	bf00      	nop
 800fe08:	371c      	adds	r7, #28
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	feff8fff 	.word	0xfeff8fff
 800fe18:	40010000 	.word	0x40010000
 800fe1c:	40010400 	.word	0x40010400
 800fe20:	40014000 	.word	0x40014000
 800fe24:	40014400 	.word	0x40014400
 800fe28:	40014800 	.word	0x40014800

0800fe2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b087      	sub	sp, #28
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a1b      	ldr	r3, [r3, #32]
 800fe3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	f023 0201 	bic.w	r2, r3, #1
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	693a      	ldr	r2, [r7, #16]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	f023 030a 	bic.w	r3, r3, #10
 800fe68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	693a      	ldr	r2, [r7, #16]
 800fe76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	621a      	str	r2, [r3, #32]
}
 800fe7e:	bf00      	nop
 800fe80:	371c      	adds	r7, #28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	b087      	sub	sp, #28
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	60f8      	str	r0, [r7, #12]
 800fe92:	60b9      	str	r1, [r7, #8]
 800fe94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6a1b      	ldr	r3, [r3, #32]
 800fea0:	f023 0210 	bic.w	r2, r3, #16
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800feb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	031b      	lsls	r3, r3, #12
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	4313      	orrs	r3, r2
 800febe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	4313      	orrs	r3, r2
 800fed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	693a      	ldr	r2, [r7, #16]
 800fed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	697a      	ldr	r2, [r7, #20]
 800fedc:	621a      	str	r2, [r3, #32]
}
 800fede:	bf00      	nop
 800fee0:	371c      	adds	r7, #28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
	...

0800feec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	4b09      	ldr	r3, [pc, #36]	; (800ff24 <TIM_ITRx_SetConfig+0x38>)
 800ff00:	4013      	ands	r3, r2
 800ff02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff04:	683a      	ldr	r2, [r7, #0]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	f043 0307 	orr.w	r3, r3, #7
 800ff0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	609a      	str	r2, [r3, #8]
}
 800ff16:	bf00      	nop
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	ffcfff8f 	.word	0xffcfff8f

0800ff28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b087      	sub	sp, #28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
 800ff34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	021a      	lsls	r2, r3, #8
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	431a      	orrs	r2, r3
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	4313      	orrs	r3, r2
 800ff50:	697a      	ldr	r2, [r7, #20]
 800ff52:	4313      	orrs	r3, r2
 800ff54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	697a      	ldr	r2, [r7, #20]
 800ff5a:	609a      	str	r2, [r3, #8]
}
 800ff5c:	bf00      	nop
 800ff5e:	371c      	adds	r7, #28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b087      	sub	sp, #28
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	f003 031f 	and.w	r3, r3, #31
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6a1a      	ldr	r2, [r3, #32]
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	43db      	mvns	r3, r3
 800ff8a:	401a      	ands	r2, r3
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6a1a      	ldr	r2, [r3, #32]
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	f003 031f 	and.w	r3, r3, #31
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	fa01 f303 	lsl.w	r3, r1, r3
 800ffa0:	431a      	orrs	r2, r3
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	621a      	str	r2, [r3, #32]
}
 800ffa6:	bf00      	nop
 800ffa8:	371c      	adds	r7, #28
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
	...

0800ffb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d101      	bne.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffc8:	2302      	movs	r3, #2
 800ffca:	e06d      	b.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a30      	ldr	r2, [pc, #192]	; (80100b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d004      	beq.n	8010000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a2f      	ldr	r2, [pc, #188]	; (80100b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d108      	bne.n	8010012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	4313      	orrs	r3, r2
 8010010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	4313      	orrs	r3, r2
 8010022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a20      	ldr	r2, [pc, #128]	; (80100b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d022      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801003e:	d01d      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a1d      	ldr	r2, [pc, #116]	; (80100bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d018      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4a1c      	ldr	r2, [pc, #112]	; (80100c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d013      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a1a      	ldr	r2, [pc, #104]	; (80100c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d00e      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a15      	ldr	r2, [pc, #84]	; (80100b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d009      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a16      	ldr	r2, [pc, #88]	; (80100c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d004      	beq.n	801007c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4a15      	ldr	r2, [pc, #84]	; (80100cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d10c      	bne.n	8010096 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	68ba      	ldr	r2, [r7, #8]
 801008a:	4313      	orrs	r3, r2
 801008c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	40010000 	.word	0x40010000
 80100b8:	40010400 	.word	0x40010400
 80100bc:	40000400 	.word	0x40000400
 80100c0:	40000800 	.word	0x40000800
 80100c4:	40000c00 	.word	0x40000c00
 80100c8:	40001800 	.word	0x40001800
 80100cc:	40014000 	.word	0x40014000

080100d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d101      	bne.n	80100ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100e8:	2302      	movs	r3, #2
 80100ea:	e065      	b.n	80101b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	4313      	orrs	r3, r2
 801010e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	4313      	orrs	r3, r2
 801011c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4313      	orrs	r3, r2
 801012a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	4313      	orrs	r3, r2
 8010138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	695b      	ldr	r3, [r3, #20]
 8010144:	4313      	orrs	r3, r2
 8010146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010152:	4313      	orrs	r3, r2
 8010154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	699b      	ldr	r3, [r3, #24]
 8010160:	041b      	lsls	r3, r3, #16
 8010162:	4313      	orrs	r3, r2
 8010164:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a16      	ldr	r2, [pc, #88]	; (80101c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d004      	beq.n	801017a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a14      	ldr	r2, [pc, #80]	; (80101c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d115      	bne.n	80101a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010184:	051b      	lsls	r3, r3, #20
 8010186:	4313      	orrs	r3, r2
 8010188:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	69db      	ldr	r3, [r3, #28]
 8010194:	4313      	orrs	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	6a1b      	ldr	r3, [r3, #32]
 80101a2:	4313      	orrs	r3, r2
 80101a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3714      	adds	r7, #20
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	40010000 	.word	0x40010000
 80101c8:	40010400 	.word	0x40010400

080101cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80101e8:	bf00      	nop
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80101fc:	bf00      	nop
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e042      	b.n	80102a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010220:	2b00      	cmp	r3, #0
 8010222:	d106      	bne.n	8010232 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7f3 fbcb 	bl	80039c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2224      	movs	r2, #36	; 0x24
 8010236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f022 0201 	bic.w	r2, r2, #1
 8010248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f001 fbc2 	bl	80119dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fe57 	bl	8010f0c <UART_SetConfig>
 801025e:	4603      	mov	r3, r0
 8010260:	2b01      	cmp	r3, #1
 8010262:	d101      	bne.n	8010268 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010264:	2301      	movs	r3, #1
 8010266:	e01b      	b.n	80102a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	689a      	ldr	r2, [r3, #8]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f042 0201 	orr.w	r2, r2, #1
 8010296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f001 fc41 	bl	8011b20 <UART_CheckIdleState>
 801029e:	4603      	mov	r3, r0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08a      	sub	sp, #40	; 0x28
 80102ac:	af02      	add	r7, sp, #8
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	603b      	str	r3, [r7, #0]
 80102b4:	4613      	mov	r3, r2
 80102b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102be:	2b20      	cmp	r3, #32
 80102c0:	d17b      	bne.n	80103ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <HAL_UART_Transmit+0x26>
 80102c8:	88fb      	ldrh	r3, [r7, #6]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d101      	bne.n	80102d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80102ce:	2301      	movs	r3, #1
 80102d0:	e074      	b.n	80103bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2200      	movs	r2, #0
 80102d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2221      	movs	r2, #33	; 0x21
 80102de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80102e2:	f7f3 ff1b 	bl	800411c <HAL_GetTick>
 80102e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	88fa      	ldrh	r2, [r7, #6]
 80102ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	88fa      	ldrh	r2, [r7, #6]
 80102f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010300:	d108      	bne.n	8010314 <HAL_UART_Transmit+0x6c>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	691b      	ldr	r3, [r3, #16]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d104      	bne.n	8010314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801030a:	2300      	movs	r3, #0
 801030c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	61bb      	str	r3, [r7, #24]
 8010312:	e003      	b.n	801031c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010318:	2300      	movs	r3, #0
 801031a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801031c:	e030      	b.n	8010380 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	2200      	movs	r2, #0
 8010326:	2180      	movs	r1, #128	; 0x80
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f001 fca3 	bl	8011c74 <UART_WaitOnFlagUntilTimeout>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d005      	beq.n	8010340 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2220      	movs	r2, #32
 8010338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801033c:	2303      	movs	r3, #3
 801033e:	e03d      	b.n	80103bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10b      	bne.n	801035e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	3302      	adds	r3, #2
 801035a:	61bb      	str	r3, [r7, #24]
 801035c:	e007      	b.n	801036e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	781a      	ldrb	r2, [r3, #0]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	3301      	adds	r3, #1
 801036c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010374:	b29b      	uxth	r3, r3
 8010376:	3b01      	subs	r3, #1
 8010378:	b29a      	uxth	r2, r3
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010386:	b29b      	uxth	r3, r3
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1c8      	bne.n	801031e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	9300      	str	r3, [sp, #0]
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2200      	movs	r2, #0
 8010394:	2140      	movs	r1, #64	; 0x40
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f001 fc6c 	bl	8011c74 <UART_WaitOnFlagUntilTimeout>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d005      	beq.n	80103ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80103aa:	2303      	movs	r3, #3
 80103ac:	e006      	b.n	80103bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2220      	movs	r2, #32
 80103b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	e000      	b.n	80103bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80103ba:	2302      	movs	r3, #2
  }
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08a      	sub	sp, #40	; 0x28
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	603b      	str	r3, [r7, #0]
 80103d0:	4613      	mov	r3, r2
 80103d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103da:	2b20      	cmp	r3, #32
 80103dc:	f040 80b5 	bne.w	801054a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d002      	beq.n	80103ec <HAL_UART_Receive+0x28>
 80103e6:	88fb      	ldrh	r3, [r7, #6]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	e0ad      	b.n	801054c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2222      	movs	r2, #34	; 0x22
 80103fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2200      	movs	r2, #0
 8010404:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010406:	f7f3 fe89 	bl	800411c <HAL_GetTick>
 801040a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	88fa      	ldrh	r2, [r7, #6]
 8010410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	88fa      	ldrh	r2, [r7, #6]
 8010418:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010424:	d10e      	bne.n	8010444 <HAL_UART_Receive+0x80>
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d105      	bne.n	801043a <HAL_UART_Receive+0x76>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010438:	e02d      	b.n	8010496 <HAL_UART_Receive+0xd2>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	22ff      	movs	r2, #255	; 0xff
 801043e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010442:	e028      	b.n	8010496 <HAL_UART_Receive+0xd2>
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10d      	bne.n	8010468 <HAL_UART_Receive+0xa4>
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	691b      	ldr	r3, [r3, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d104      	bne.n	801045e <HAL_UART_Receive+0x9a>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	22ff      	movs	r2, #255	; 0xff
 8010458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801045c:	e01b      	b.n	8010496 <HAL_UART_Receive+0xd2>
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	227f      	movs	r2, #127	; 0x7f
 8010462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010466:	e016      	b.n	8010496 <HAL_UART_Receive+0xd2>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010470:	d10d      	bne.n	801048e <HAL_UART_Receive+0xca>
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	691b      	ldr	r3, [r3, #16]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d104      	bne.n	8010484 <HAL_UART_Receive+0xc0>
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	227f      	movs	r2, #127	; 0x7f
 801047e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010482:	e008      	b.n	8010496 <HAL_UART_Receive+0xd2>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	223f      	movs	r2, #63	; 0x3f
 8010488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801048c:	e003      	b.n	8010496 <HAL_UART_Receive+0xd2>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801049c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104a6:	d108      	bne.n	80104ba <HAL_UART_Receive+0xf6>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d104      	bne.n	80104ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80104b0:	2300      	movs	r3, #0
 80104b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	61bb      	str	r3, [r7, #24]
 80104b8:	e003      	b.n	80104c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80104be:	2300      	movs	r3, #0
 80104c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80104c2:	e036      	b.n	8010532 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	2200      	movs	r2, #0
 80104cc:	2120      	movs	r1, #32
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f001 fbd0 	bl	8011c74 <UART_WaitOnFlagUntilTimeout>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d005      	beq.n	80104e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2220      	movs	r2, #32
 80104de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80104e2:	2303      	movs	r3, #3
 80104e4:	e032      	b.n	801054c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10c      	bne.n	8010506 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	8a7b      	ldrh	r3, [r7, #18]
 80104f6:	4013      	ands	r3, r2
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	3302      	adds	r3, #2
 8010502:	61bb      	str	r3, [r7, #24]
 8010504:	e00c      	b.n	8010520 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050c:	b2da      	uxtb	r2, r3
 801050e:	8a7b      	ldrh	r3, [r7, #18]
 8010510:	b2db      	uxtb	r3, r3
 8010512:	4013      	ands	r3, r2
 8010514:	b2da      	uxtb	r2, r3
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	3301      	adds	r3, #1
 801051e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010526:	b29b      	uxth	r3, r3
 8010528:	3b01      	subs	r3, #1
 801052a:	b29a      	uxth	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010538:	b29b      	uxth	r3, r3
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1c2      	bne.n	80104c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2220      	movs	r2, #32
 8010542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010546:	2300      	movs	r3, #0
 8010548:	e000      	b.n	801054c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801054a:	2302      	movs	r3, #2
  }
}
 801054c:	4618      	mov	r0, r3
 801054e:	3720      	adds	r7, #32
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	; 0x28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	4613      	mov	r3, r2
 8010560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010568:	2b20      	cmp	r3, #32
 801056a:	d137      	bne.n	80105dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d002      	beq.n	8010578 <HAL_UART_Receive_IT+0x24>
 8010572:	88fb      	ldrh	r3, [r7, #6]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d101      	bne.n	801057c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010578:	2301      	movs	r3, #1
 801057a:	e030      	b.n	80105de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2200      	movs	r2, #0
 8010580:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4a18      	ldr	r2, [pc, #96]	; (80105e8 <HAL_UART_Receive_IT+0x94>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d01f      	beq.n	80105cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010596:	2b00      	cmp	r3, #0
 8010598:	d018      	beq.n	80105cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	e853 3f00 	ldrex	r3, [r3]
 80105a6:	613b      	str	r3, [r7, #16]
   return(result);
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80105ae:	627b      	str	r3, [r7, #36]	; 0x24
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	461a      	mov	r2, r3
 80105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b8:	623b      	str	r3, [r7, #32]
 80105ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105bc:	69f9      	ldr	r1, [r7, #28]
 80105be:	6a3a      	ldr	r2, [r7, #32]
 80105c0:	e841 2300 	strex	r3, r2, [r1]
 80105c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1e6      	bne.n	801059a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80105cc:	88fb      	ldrh	r3, [r7, #6]
 80105ce:	461a      	mov	r2, r3
 80105d0:	68b9      	ldr	r1, [r7, #8]
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f001 fbbc 	bl	8011d50 <UART_Start_Receive_IT>
 80105d8:	4603      	mov	r3, r0
 80105da:	e000      	b.n	80105de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80105dc:	2302      	movs	r3, #2
  }
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3728      	adds	r7, #40	; 0x28
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	58000c00 	.word	0x58000c00

080105ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b09a      	sub	sp, #104	; 0x68
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105fc:	e853 3f00 	ldrex	r3, [r3]
 8010600:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010608:	667b      	str	r3, [r7, #100]	; 0x64
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	461a      	mov	r2, r3
 8010610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010612:	657b      	str	r3, [r7, #84]	; 0x54
 8010614:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801061a:	e841 2300 	strex	r3, r2, [r1]
 801061e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1e6      	bne.n	80105f4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3308      	adds	r3, #8
 801062c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010630:	e853 3f00 	ldrex	r3, [r3]
 8010634:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010638:	4b46      	ldr	r3, [pc, #280]	; (8010754 <HAL_UART_AbortReceive+0x168>)
 801063a:	4013      	ands	r3, r2
 801063c:	663b      	str	r3, [r7, #96]	; 0x60
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3308      	adds	r3, #8
 8010644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010646:	643a      	str	r2, [r7, #64]	; 0x40
 8010648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801064c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801064e:	e841 2300 	strex	r3, r2, [r1]
 8010652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1e5      	bne.n	8010626 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065e:	2b01      	cmp	r3, #1
 8010660:	d118      	bne.n	8010694 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010668:	6a3b      	ldr	r3, [r7, #32]
 801066a:	e853 3f00 	ldrex	r3, [r3]
 801066e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	f023 0310 	bic.w	r3, r3, #16
 8010676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	461a      	mov	r2, r3
 801067e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010682:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010688:	e841 2300 	strex	r3, r2, [r1]
 801068c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1e6      	bne.n	8010662 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801069e:	2b40      	cmp	r3, #64	; 0x40
 80106a0:	d13b      	bne.n	801071a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3308      	adds	r3, #8
 80106a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	e853 3f00 	ldrex	r3, [r3]
 80106b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	3308      	adds	r3, #8
 80106c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106c2:	61ba      	str	r2, [r7, #24]
 80106c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c6:	6979      	ldr	r1, [r7, #20]
 80106c8:	69ba      	ldr	r2, [r7, #24]
 80106ca:	e841 2300 	strex	r3, r2, [r1]
 80106ce:	613b      	str	r3, [r7, #16]
   return(result);
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1e5      	bne.n	80106a2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d01c      	beq.n	801071a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106e6:	2200      	movs	r2, #0
 80106e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f6 fc01 	bl	8006ef8 <HAL_DMA_Abort>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00e      	beq.n	801071a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010702:	4618      	mov	r0, r3
 8010704:	f7f8 f886 	bl	8008814 <HAL_DMA_GetError>
 8010708:	4603      	mov	r3, r0
 801070a:	2b20      	cmp	r3, #32
 801070c:	d105      	bne.n	801071a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2210      	movs	r2, #16
 8010712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010716:	2303      	movs	r3, #3
 8010718:	e017      	b.n	801074a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	220f      	movs	r2, #15
 8010728:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	699a      	ldr	r2, [r3, #24]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f042 0208 	orr.w	r2, r2, #8
 8010738:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3768      	adds	r7, #104	; 0x68
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	effffffe 	.word	0xeffffffe

08010758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b0ba      	sub	sp, #232	; 0xe8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	69db      	ldr	r3, [r3, #28]
 8010766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	689b      	ldr	r3, [r3, #8]
 801077a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801077e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010782:	f640 030f 	movw	r3, #2063	; 0x80f
 8010786:	4013      	ands	r3, r2
 8010788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801078c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010790:	2b00      	cmp	r3, #0
 8010792:	d11b      	bne.n	80107cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010798:	f003 0320 	and.w	r3, r3, #32
 801079c:	2b00      	cmp	r3, #0
 801079e:	d015      	beq.n	80107cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80107a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107a4:	f003 0320 	and.w	r3, r3, #32
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d105      	bne.n	80107b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80107ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d009      	beq.n	80107cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 8377 	beq.w	8010eb0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	4798      	blx	r3
      }
      return;
 80107ca:	e371      	b.n	8010eb0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80107cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f000 8123 	beq.w	8010a1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80107d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80107da:	4b8d      	ldr	r3, [pc, #564]	; (8010a10 <HAL_UART_IRQHandler+0x2b8>)
 80107dc:	4013      	ands	r3, r2
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d106      	bne.n	80107f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80107e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80107e6:	4b8b      	ldr	r3, [pc, #556]	; (8010a14 <HAL_UART_IRQHandler+0x2bc>)
 80107e8:	4013      	ands	r3, r2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 8116 	beq.w	8010a1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80107f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107f4:	f003 0301 	and.w	r3, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d011      	beq.n	8010820 <HAL_UART_IRQHandler+0xc8>
 80107fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2201      	movs	r2, #1
 801080e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010816:	f043 0201 	orr.w	r2, r3, #1
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010824:	f003 0302 	and.w	r3, r3, #2
 8010828:	2b00      	cmp	r3, #0
 801082a:	d011      	beq.n	8010850 <HAL_UART_IRQHandler+0xf8>
 801082c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00b      	beq.n	8010850 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2202      	movs	r2, #2
 801083e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010846:	f043 0204 	orr.w	r2, r3, #4
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010854:	f003 0304 	and.w	r3, r3, #4
 8010858:	2b00      	cmp	r3, #0
 801085a:	d011      	beq.n	8010880 <HAL_UART_IRQHandler+0x128>
 801085c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00b      	beq.n	8010880 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2204      	movs	r2, #4
 801086e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010876:	f043 0202 	orr.w	r2, r3, #2
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010884:	f003 0308 	and.w	r3, r3, #8
 8010888:	2b00      	cmp	r3, #0
 801088a:	d017      	beq.n	80108bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801088c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010890:	f003 0320 	and.w	r3, r3, #32
 8010894:	2b00      	cmp	r3, #0
 8010896:	d105      	bne.n	80108a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010898:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801089c:	4b5c      	ldr	r3, [pc, #368]	; (8010a10 <HAL_UART_IRQHandler+0x2b8>)
 801089e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00b      	beq.n	80108bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2208      	movs	r2, #8
 80108aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108b2:	f043 0208 	orr.w	r2, r3, #8
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80108bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d012      	beq.n	80108ee <HAL_UART_IRQHandler+0x196>
 80108c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00c      	beq.n	80108ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e4:	f043 0220 	orr.w	r2, r3, #32
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f000 82dd 	beq.w	8010eb4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80108fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108fe:	f003 0320 	and.w	r3, r3, #32
 8010902:	2b00      	cmp	r3, #0
 8010904:	d013      	beq.n	801092e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801090a:	f003 0320 	and.w	r3, r3, #32
 801090e:	2b00      	cmp	r3, #0
 8010910:	d105      	bne.n	801091e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801091a:	2b00      	cmp	r3, #0
 801091c:	d007      	beq.n	801092e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010942:	2b40      	cmp	r3, #64	; 0x40
 8010944:	d005      	beq.n	8010952 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801094a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801094e:	2b00      	cmp	r3, #0
 8010950:	d054      	beq.n	80109fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f001 fb1e 	bl	8011f94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010962:	2b40      	cmp	r3, #64	; 0x40
 8010964:	d146      	bne.n	80109f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	3308      	adds	r3, #8
 801096c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010974:	e853 3f00 	ldrex	r3, [r3]
 8010978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801097c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3308      	adds	r3, #8
 801098e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801099e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80109a2:	e841 2300 	strex	r3, r2, [r1]
 80109a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80109aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1d9      	bne.n	8010966 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d017      	beq.n	80109ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109c2:	4a15      	ldr	r2, [pc, #84]	; (8010a18 <HAL_UART_IRQHandler+0x2c0>)
 80109c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7f6 fdb1 	bl	8007534 <HAL_DMA_Abort_IT>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d019      	beq.n	8010a0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80109e6:	4610      	mov	r0, r2
 80109e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109ea:	e00f      	b.n	8010a0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 fa77 	bl	8010ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109f2:	e00b      	b.n	8010a0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fa73 	bl	8010ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109fa:	e007      	b.n	8010a0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fa6f 	bl	8010ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010a0a:	e253      	b.n	8010eb4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a0c:	bf00      	nop
    return;
 8010a0e:	e251      	b.n	8010eb4 <HAL_UART_IRQHandler+0x75c>
 8010a10:	10000001 	.word	0x10000001
 8010a14:	04000120 	.word	0x04000120
 8010a18:	08012061 	.word	0x08012061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	f040 81e7 	bne.w	8010df4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a2a:	f003 0310 	and.w	r3, r3, #16
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 81e0 	beq.w	8010df4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a38:	f003 0310 	and.w	r3, r3, #16
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f000 81d9 	beq.w	8010df4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2210      	movs	r2, #16
 8010a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a54:	2b40      	cmp	r3, #64	; 0x40
 8010a56:	f040 8151 	bne.w	8010cfc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a96      	ldr	r2, [pc, #600]	; (8010cbc <HAL_UART_IRQHandler+0x564>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d068      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a93      	ldr	r2, [pc, #588]	; (8010cc0 <HAL_UART_IRQHandler+0x568>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d061      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4a91      	ldr	r2, [pc, #580]	; (8010cc4 <HAL_UART_IRQHandler+0x56c>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d05a      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a8e      	ldr	r2, [pc, #568]	; (8010cc8 <HAL_UART_IRQHandler+0x570>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d053      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4a8c      	ldr	r2, [pc, #560]	; (8010ccc <HAL_UART_IRQHandler+0x574>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d04c      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a89      	ldr	r2, [pc, #548]	; (8010cd0 <HAL_UART_IRQHandler+0x578>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d045      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	4a87      	ldr	r2, [pc, #540]	; (8010cd4 <HAL_UART_IRQHandler+0x57c>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d03e      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a84      	ldr	r2, [pc, #528]	; (8010cd8 <HAL_UART_IRQHandler+0x580>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d037      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a82      	ldr	r2, [pc, #520]	; (8010cdc <HAL_UART_IRQHandler+0x584>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d030      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a7f      	ldr	r2, [pc, #508]	; (8010ce0 <HAL_UART_IRQHandler+0x588>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d029      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4a7d      	ldr	r2, [pc, #500]	; (8010ce4 <HAL_UART_IRQHandler+0x58c>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d022      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4a7a      	ldr	r2, [pc, #488]	; (8010ce8 <HAL_UART_IRQHandler+0x590>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d01b      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a78      	ldr	r2, [pc, #480]	; (8010cec <HAL_UART_IRQHandler+0x594>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d014      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a75      	ldr	r2, [pc, #468]	; (8010cf0 <HAL_UART_IRQHandler+0x598>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d00d      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a73      	ldr	r2, [pc, #460]	; (8010cf4 <HAL_UART_IRQHandler+0x59c>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d006      	beq.n	8010b3a <HAL_UART_IRQHandler+0x3e2>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a70      	ldr	r2, [pc, #448]	; (8010cf8 <HAL_UART_IRQHandler+0x5a0>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d106      	bne.n	8010b48 <HAL_UART_IRQHandler+0x3f0>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	e005      	b.n	8010b54 <HAL_UART_IRQHandler+0x3fc>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 81ab 	beq.w	8010eb8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	f080 81a3 	bcs.w	8010eb8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b82:	69db      	ldr	r3, [r3, #28]
 8010b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b88:	f000 8087 	beq.w	8010c9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b98:	e853 3f00 	ldrex	r3, [r3]
 8010b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010bba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010bc6:	e841 2300 	strex	r3, r2, [r1]
 8010bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1da      	bne.n	8010b8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	3308      	adds	r3, #8
 8010bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010be0:	e853 3f00 	ldrex	r3, [r3]
 8010be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010be8:	f023 0301 	bic.w	r3, r3, #1
 8010bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c06:	e841 2300 	strex	r3, r2, [r1]
 8010c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1e1      	bne.n	8010bd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3308      	adds	r3, #8
 8010c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c1c:	e853 3f00 	ldrex	r3, [r3]
 8010c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	3308      	adds	r3, #8
 8010c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c3e:	e841 2300 	strex	r3, r2, [r1]
 8010c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1e3      	bne.n	8010c12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2220      	movs	r2, #32
 8010c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c60:	e853 3f00 	ldrex	r3, [r3]
 8010c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c68:	f023 0310 	bic.w	r3, r3, #16
 8010c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	461a      	mov	r2, r3
 8010c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c82:	e841 2300 	strex	r3, r2, [r1]
 8010c86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1e4      	bne.n	8010c58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7f6 f92f 	bl	8006ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 f91d 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010cba:	e0fd      	b.n	8010eb8 <HAL_UART_IRQHandler+0x760>
 8010cbc:	40020010 	.word	0x40020010
 8010cc0:	40020028 	.word	0x40020028
 8010cc4:	40020040 	.word	0x40020040
 8010cc8:	40020058 	.word	0x40020058
 8010ccc:	40020070 	.word	0x40020070
 8010cd0:	40020088 	.word	0x40020088
 8010cd4:	400200a0 	.word	0x400200a0
 8010cd8:	400200b8 	.word	0x400200b8
 8010cdc:	40020410 	.word	0x40020410
 8010ce0:	40020428 	.word	0x40020428
 8010ce4:	40020440 	.word	0x40020440
 8010ce8:	40020458 	.word	0x40020458
 8010cec:	40020470 	.word	0x40020470
 8010cf0:	40020488 	.word	0x40020488
 8010cf4:	400204a0 	.word	0x400204a0
 8010cf8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 80cf 	beq.w	8010ebc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f000 80ca 	beq.w	8010ebc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	e853 3f00 	ldrex	r3, [r3]
 8010d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	461a      	mov	r2, r3
 8010d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8010d4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d52:	e841 2300 	strex	r3, r2, [r1]
 8010d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1e4      	bne.n	8010d28 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	3308      	adds	r3, #8
 8010d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d68:	e853 3f00 	ldrex	r3, [r3]
 8010d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8010d6e:	6a3a      	ldr	r2, [r7, #32]
 8010d70:	4b55      	ldr	r3, [pc, #340]	; (8010ec8 <HAL_UART_IRQHandler+0x770>)
 8010d72:	4013      	ands	r3, r2
 8010d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d82:	633a      	str	r2, [r7, #48]	; 0x30
 8010d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d8a:	e841 2300 	strex	r3, r2, [r1]
 8010d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1e3      	bne.n	8010d5e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2220      	movs	r2, #32
 8010d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2200      	movs	r2, #0
 8010da2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	e853 3f00 	ldrex	r3, [r3]
 8010db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f023 0310 	bic.w	r3, r3, #16
 8010dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010dcc:	61fb      	str	r3, [r7, #28]
 8010dce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd0:	69b9      	ldr	r1, [r7, #24]
 8010dd2:	69fa      	ldr	r2, [r7, #28]
 8010dd4:	e841 2300 	strex	r3, r2, [r1]
 8010dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d1e4      	bne.n	8010daa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2202      	movs	r2, #2
 8010de4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010dea:	4619      	mov	r1, r3
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 f881 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010df2:	e063      	b.n	8010ebc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00e      	beq.n	8010e1e <HAL_UART_IRQHandler+0x6c6>
 8010e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d008      	beq.n	8010e1e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 fe80 	bl	8012b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e1c:	e051      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d014      	beq.n	8010e54 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d105      	bne.n	8010e42 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d008      	beq.n	8010e54 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d03a      	beq.n	8010ec0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	4798      	blx	r3
    }
    return;
 8010e52:	e035      	b.n	8010ec0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d009      	beq.n	8010e74 <HAL_UART_IRQHandler+0x71c>
 8010e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d003      	beq.n	8010e74 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f001 f90d 	bl	801208c <UART_EndTransmit_IT>
    return;
 8010e72:	e026      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d009      	beq.n	8010e94 <HAL_UART_IRQHandler+0x73c>
 8010e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d003      	beq.n	8010e94 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f001 fe59 	bl	8012b44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e92:	e016      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d010      	beq.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
 8010ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	da0c      	bge.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f001 fe41 	bl	8012b30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010eae:	e008      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
      return;
 8010eb0:	bf00      	nop
 8010eb2:	e006      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
    return;
 8010eb4:	bf00      	nop
 8010eb6:	e004      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
      return;
 8010eb8:	bf00      	nop
 8010eba:	e002      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ebc:	bf00      	nop
 8010ebe:	e000      	b.n	8010ec2 <HAL_UART_IRQHandler+0x76a>
    return;
 8010ec0:	bf00      	nop
  }
}
 8010ec2:	37e8      	adds	r7, #232	; 0xe8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	effffffe 	.word	0xeffffffe

08010ecc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	460b      	mov	r3, r1
 8010efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f10:	b092      	sub	sp, #72	; 0x48
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f16:	2300      	movs	r3, #0
 8010f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	689a      	ldr	r2, [r3, #8]
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	691b      	ldr	r3, [r3, #16]
 8010f24:	431a      	orrs	r2, r3
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	695b      	ldr	r3, [r3, #20]
 8010f2a:	431a      	orrs	r2, r3
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	69db      	ldr	r3, [r3, #28]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	4bbe      	ldr	r3, [pc, #760]	; (8011234 <UART_SetConfig+0x328>)
 8010f3c:	4013      	ands	r3, r2
 8010f3e:	697a      	ldr	r2, [r7, #20]
 8010f40:	6812      	ldr	r2, [r2, #0]
 8010f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f44:	430b      	orrs	r3, r1
 8010f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	68da      	ldr	r2, [r3, #12]
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4ab3      	ldr	r2, [pc, #716]	; (8011238 <UART_SetConfig+0x32c>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d004      	beq.n	8010f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	6a1b      	ldr	r3, [r3, #32]
 8010f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f74:	4313      	orrs	r3, r2
 8010f76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	689a      	ldr	r2, [r3, #8]
 8010f7e:	4baf      	ldr	r3, [pc, #700]	; (801123c <UART_SetConfig+0x330>)
 8010f80:	4013      	ands	r3, r2
 8010f82:	697a      	ldr	r2, [r7, #20]
 8010f84:	6812      	ldr	r2, [r2, #0]
 8010f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f88:	430b      	orrs	r3, r1
 8010f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f92:	f023 010f 	bic.w	r1, r3, #15
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	430a      	orrs	r2, r1
 8010fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4aa6      	ldr	r2, [pc, #664]	; (8011240 <UART_SetConfig+0x334>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d177      	bne.n	801109c <UART_SetConfig+0x190>
 8010fac:	4ba5      	ldr	r3, [pc, #660]	; (8011244 <UART_SetConfig+0x338>)
 8010fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fb4:	2b28      	cmp	r3, #40	; 0x28
 8010fb6:	d86d      	bhi.n	8011094 <UART_SetConfig+0x188>
 8010fb8:	a201      	add	r2, pc, #4	; (adr r2, 8010fc0 <UART_SetConfig+0xb4>)
 8010fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fbe:	bf00      	nop
 8010fc0:	08011065 	.word	0x08011065
 8010fc4:	08011095 	.word	0x08011095
 8010fc8:	08011095 	.word	0x08011095
 8010fcc:	08011095 	.word	0x08011095
 8010fd0:	08011095 	.word	0x08011095
 8010fd4:	08011095 	.word	0x08011095
 8010fd8:	08011095 	.word	0x08011095
 8010fdc:	08011095 	.word	0x08011095
 8010fe0:	0801106d 	.word	0x0801106d
 8010fe4:	08011095 	.word	0x08011095
 8010fe8:	08011095 	.word	0x08011095
 8010fec:	08011095 	.word	0x08011095
 8010ff0:	08011095 	.word	0x08011095
 8010ff4:	08011095 	.word	0x08011095
 8010ff8:	08011095 	.word	0x08011095
 8010ffc:	08011095 	.word	0x08011095
 8011000:	08011075 	.word	0x08011075
 8011004:	08011095 	.word	0x08011095
 8011008:	08011095 	.word	0x08011095
 801100c:	08011095 	.word	0x08011095
 8011010:	08011095 	.word	0x08011095
 8011014:	08011095 	.word	0x08011095
 8011018:	08011095 	.word	0x08011095
 801101c:	08011095 	.word	0x08011095
 8011020:	0801107d 	.word	0x0801107d
 8011024:	08011095 	.word	0x08011095
 8011028:	08011095 	.word	0x08011095
 801102c:	08011095 	.word	0x08011095
 8011030:	08011095 	.word	0x08011095
 8011034:	08011095 	.word	0x08011095
 8011038:	08011095 	.word	0x08011095
 801103c:	08011095 	.word	0x08011095
 8011040:	08011085 	.word	0x08011085
 8011044:	08011095 	.word	0x08011095
 8011048:	08011095 	.word	0x08011095
 801104c:	08011095 	.word	0x08011095
 8011050:	08011095 	.word	0x08011095
 8011054:	08011095 	.word	0x08011095
 8011058:	08011095 	.word	0x08011095
 801105c:	08011095 	.word	0x08011095
 8011060:	0801108d 	.word	0x0801108d
 8011064:	2301      	movs	r3, #1
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e222      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801106c:	2304      	movs	r3, #4
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e21e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011074:	2308      	movs	r3, #8
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e21a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801107c:	2310      	movs	r3, #16
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e216      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011084:	2320      	movs	r3, #32
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e212      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801108c:	2340      	movs	r3, #64	; 0x40
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e20e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011094:	2380      	movs	r3, #128	; 0x80
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e20a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a69      	ldr	r2, [pc, #420]	; (8011248 <UART_SetConfig+0x33c>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d130      	bne.n	8011108 <UART_SetConfig+0x1fc>
 80110a6:	4b67      	ldr	r3, [pc, #412]	; (8011244 <UART_SetConfig+0x338>)
 80110a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110aa:	f003 0307 	and.w	r3, r3, #7
 80110ae:	2b05      	cmp	r3, #5
 80110b0:	d826      	bhi.n	8011100 <UART_SetConfig+0x1f4>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <UART_SetConfig+0x1ac>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	080110d1 	.word	0x080110d1
 80110bc:	080110d9 	.word	0x080110d9
 80110c0:	080110e1 	.word	0x080110e1
 80110c4:	080110e9 	.word	0x080110e9
 80110c8:	080110f1 	.word	0x080110f1
 80110cc:	080110f9 	.word	0x080110f9
 80110d0:	2300      	movs	r3, #0
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e1ec      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80110d8:	2304      	movs	r3, #4
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e1e8      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80110e0:	2308      	movs	r3, #8
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e1e4      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80110e8:	2310      	movs	r3, #16
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e1e0      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80110f0:	2320      	movs	r3, #32
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f6:	e1dc      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80110f8:	2340      	movs	r3, #64	; 0x40
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fe:	e1d8      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011100:	2380      	movs	r3, #128	; 0x80
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011106:	e1d4      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a4f      	ldr	r2, [pc, #316]	; (801124c <UART_SetConfig+0x340>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d130      	bne.n	8011174 <UART_SetConfig+0x268>
 8011112:	4b4c      	ldr	r3, [pc, #304]	; (8011244 <UART_SetConfig+0x338>)
 8011114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011116:	f003 0307 	and.w	r3, r3, #7
 801111a:	2b05      	cmp	r3, #5
 801111c:	d826      	bhi.n	801116c <UART_SetConfig+0x260>
 801111e:	a201      	add	r2, pc, #4	; (adr r2, 8011124 <UART_SetConfig+0x218>)
 8011120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011124:	0801113d 	.word	0x0801113d
 8011128:	08011145 	.word	0x08011145
 801112c:	0801114d 	.word	0x0801114d
 8011130:	08011155 	.word	0x08011155
 8011134:	0801115d 	.word	0x0801115d
 8011138:	08011165 	.word	0x08011165
 801113c:	2300      	movs	r3, #0
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e1b6      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011144:	2304      	movs	r3, #4
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e1b2      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801114c:	2308      	movs	r3, #8
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e1ae      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011154:	2310      	movs	r3, #16
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e1aa      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801115c:	2320      	movs	r3, #32
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011162:	e1a6      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011164:	2340      	movs	r3, #64	; 0x40
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e1a2      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801116c:	2380      	movs	r3, #128	; 0x80
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e19e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4a35      	ldr	r2, [pc, #212]	; (8011250 <UART_SetConfig+0x344>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d130      	bne.n	80111e0 <UART_SetConfig+0x2d4>
 801117e:	4b31      	ldr	r3, [pc, #196]	; (8011244 <UART_SetConfig+0x338>)
 8011180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011182:	f003 0307 	and.w	r3, r3, #7
 8011186:	2b05      	cmp	r3, #5
 8011188:	d826      	bhi.n	80111d8 <UART_SetConfig+0x2cc>
 801118a:	a201      	add	r2, pc, #4	; (adr r2, 8011190 <UART_SetConfig+0x284>)
 801118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011190:	080111a9 	.word	0x080111a9
 8011194:	080111b1 	.word	0x080111b1
 8011198:	080111b9 	.word	0x080111b9
 801119c:	080111c1 	.word	0x080111c1
 80111a0:	080111c9 	.word	0x080111c9
 80111a4:	080111d1 	.word	0x080111d1
 80111a8:	2300      	movs	r3, #0
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e180      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111b0:	2304      	movs	r3, #4
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e17c      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111b8:	2308      	movs	r3, #8
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e178      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111c0:	2310      	movs	r3, #16
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e174      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111c8:	2320      	movs	r3, #32
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e170      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111d0:	2340      	movs	r3, #64	; 0x40
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e16c      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111d8:	2380      	movs	r3, #128	; 0x80
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e168      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4a1b      	ldr	r2, [pc, #108]	; (8011254 <UART_SetConfig+0x348>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d142      	bne.n	8011270 <UART_SetConfig+0x364>
 80111ea:	4b16      	ldr	r3, [pc, #88]	; (8011244 <UART_SetConfig+0x338>)
 80111ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ee:	f003 0307 	and.w	r3, r3, #7
 80111f2:	2b05      	cmp	r3, #5
 80111f4:	d838      	bhi.n	8011268 <UART_SetConfig+0x35c>
 80111f6:	a201      	add	r2, pc, #4	; (adr r2, 80111fc <UART_SetConfig+0x2f0>)
 80111f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fc:	08011215 	.word	0x08011215
 8011200:	0801121d 	.word	0x0801121d
 8011204:	08011225 	.word	0x08011225
 8011208:	0801122d 	.word	0x0801122d
 801120c:	08011259 	.word	0x08011259
 8011210:	08011261 	.word	0x08011261
 8011214:	2300      	movs	r3, #0
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e14a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801121c:	2304      	movs	r3, #4
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e146      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011224:	2308      	movs	r3, #8
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e142      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801122c:	2310      	movs	r3, #16
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e13e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011234:	cfff69f3 	.word	0xcfff69f3
 8011238:	58000c00 	.word	0x58000c00
 801123c:	11fff4ff 	.word	0x11fff4ff
 8011240:	40011000 	.word	0x40011000
 8011244:	58024400 	.word	0x58024400
 8011248:	40004400 	.word	0x40004400
 801124c:	40004800 	.word	0x40004800
 8011250:	40004c00 	.word	0x40004c00
 8011254:	40005000 	.word	0x40005000
 8011258:	2320      	movs	r3, #32
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e128      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011260:	2340      	movs	r3, #64	; 0x40
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011266:	e124      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011268:	2380      	movs	r3, #128	; 0x80
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e120      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4acb      	ldr	r2, [pc, #812]	; (80115a4 <UART_SetConfig+0x698>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d176      	bne.n	8011368 <UART_SetConfig+0x45c>
 801127a:	4bcb      	ldr	r3, [pc, #812]	; (80115a8 <UART_SetConfig+0x69c>)
 801127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801127e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011282:	2b28      	cmp	r3, #40	; 0x28
 8011284:	d86c      	bhi.n	8011360 <UART_SetConfig+0x454>
 8011286:	a201      	add	r2, pc, #4	; (adr r2, 801128c <UART_SetConfig+0x380>)
 8011288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128c:	08011331 	.word	0x08011331
 8011290:	08011361 	.word	0x08011361
 8011294:	08011361 	.word	0x08011361
 8011298:	08011361 	.word	0x08011361
 801129c:	08011361 	.word	0x08011361
 80112a0:	08011361 	.word	0x08011361
 80112a4:	08011361 	.word	0x08011361
 80112a8:	08011361 	.word	0x08011361
 80112ac:	08011339 	.word	0x08011339
 80112b0:	08011361 	.word	0x08011361
 80112b4:	08011361 	.word	0x08011361
 80112b8:	08011361 	.word	0x08011361
 80112bc:	08011361 	.word	0x08011361
 80112c0:	08011361 	.word	0x08011361
 80112c4:	08011361 	.word	0x08011361
 80112c8:	08011361 	.word	0x08011361
 80112cc:	08011341 	.word	0x08011341
 80112d0:	08011361 	.word	0x08011361
 80112d4:	08011361 	.word	0x08011361
 80112d8:	08011361 	.word	0x08011361
 80112dc:	08011361 	.word	0x08011361
 80112e0:	08011361 	.word	0x08011361
 80112e4:	08011361 	.word	0x08011361
 80112e8:	08011361 	.word	0x08011361
 80112ec:	08011349 	.word	0x08011349
 80112f0:	08011361 	.word	0x08011361
 80112f4:	08011361 	.word	0x08011361
 80112f8:	08011361 	.word	0x08011361
 80112fc:	08011361 	.word	0x08011361
 8011300:	08011361 	.word	0x08011361
 8011304:	08011361 	.word	0x08011361
 8011308:	08011361 	.word	0x08011361
 801130c:	08011351 	.word	0x08011351
 8011310:	08011361 	.word	0x08011361
 8011314:	08011361 	.word	0x08011361
 8011318:	08011361 	.word	0x08011361
 801131c:	08011361 	.word	0x08011361
 8011320:	08011361 	.word	0x08011361
 8011324:	08011361 	.word	0x08011361
 8011328:	08011361 	.word	0x08011361
 801132c:	08011359 	.word	0x08011359
 8011330:	2301      	movs	r3, #1
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e0bc      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011338:	2304      	movs	r3, #4
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133e:	e0b8      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011340:	2308      	movs	r3, #8
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011346:	e0b4      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011348:	2310      	movs	r3, #16
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134e:	e0b0      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011350:	2320      	movs	r3, #32
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e0ac      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011358:	2340      	movs	r3, #64	; 0x40
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e0a8      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011360:	2380      	movs	r3, #128	; 0x80
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e0a4      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4a8f      	ldr	r2, [pc, #572]	; (80115ac <UART_SetConfig+0x6a0>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d130      	bne.n	80113d4 <UART_SetConfig+0x4c8>
 8011372:	4b8d      	ldr	r3, [pc, #564]	; (80115a8 <UART_SetConfig+0x69c>)
 8011374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011376:	f003 0307 	and.w	r3, r3, #7
 801137a:	2b05      	cmp	r3, #5
 801137c:	d826      	bhi.n	80113cc <UART_SetConfig+0x4c0>
 801137e:	a201      	add	r2, pc, #4	; (adr r2, 8011384 <UART_SetConfig+0x478>)
 8011380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011384:	0801139d 	.word	0x0801139d
 8011388:	080113a5 	.word	0x080113a5
 801138c:	080113ad 	.word	0x080113ad
 8011390:	080113b5 	.word	0x080113b5
 8011394:	080113bd 	.word	0x080113bd
 8011398:	080113c5 	.word	0x080113c5
 801139c:	2300      	movs	r3, #0
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e086      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113a4:	2304      	movs	r3, #4
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113aa:	e082      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113ac:	2308      	movs	r3, #8
 80113ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b2:	e07e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113b4:	2310      	movs	r3, #16
 80113b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ba:	e07a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113bc:	2320      	movs	r3, #32
 80113be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c2:	e076      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113c4:	2340      	movs	r3, #64	; 0x40
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ca:	e072      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113cc:	2380      	movs	r3, #128	; 0x80
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e06e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a75      	ldr	r2, [pc, #468]	; (80115b0 <UART_SetConfig+0x6a4>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d130      	bne.n	8011440 <UART_SetConfig+0x534>
 80113de:	4b72      	ldr	r3, [pc, #456]	; (80115a8 <UART_SetConfig+0x69c>)
 80113e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113e2:	f003 0307 	and.w	r3, r3, #7
 80113e6:	2b05      	cmp	r3, #5
 80113e8:	d826      	bhi.n	8011438 <UART_SetConfig+0x52c>
 80113ea:	a201      	add	r2, pc, #4	; (adr r2, 80113f0 <UART_SetConfig+0x4e4>)
 80113ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f0:	08011409 	.word	0x08011409
 80113f4:	08011411 	.word	0x08011411
 80113f8:	08011419 	.word	0x08011419
 80113fc:	08011421 	.word	0x08011421
 8011400:	08011429 	.word	0x08011429
 8011404:	08011431 	.word	0x08011431
 8011408:	2300      	movs	r3, #0
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140e:	e050      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011410:	2304      	movs	r3, #4
 8011412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011416:	e04c      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011418:	2308      	movs	r3, #8
 801141a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141e:	e048      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011420:	2310      	movs	r3, #16
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011426:	e044      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011428:	2320      	movs	r3, #32
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142e:	e040      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011430:	2340      	movs	r3, #64	; 0x40
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011436:	e03c      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011438:	2380      	movs	r3, #128	; 0x80
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143e:	e038      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a5b      	ldr	r2, [pc, #364]	; (80115b4 <UART_SetConfig+0x6a8>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d130      	bne.n	80114ac <UART_SetConfig+0x5a0>
 801144a:	4b57      	ldr	r3, [pc, #348]	; (80115a8 <UART_SetConfig+0x69c>)
 801144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801144e:	f003 0307 	and.w	r3, r3, #7
 8011452:	2b05      	cmp	r3, #5
 8011454:	d826      	bhi.n	80114a4 <UART_SetConfig+0x598>
 8011456:	a201      	add	r2, pc, #4	; (adr r2, 801145c <UART_SetConfig+0x550>)
 8011458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145c:	08011475 	.word	0x08011475
 8011460:	0801147d 	.word	0x0801147d
 8011464:	08011485 	.word	0x08011485
 8011468:	0801148d 	.word	0x0801148d
 801146c:	08011495 	.word	0x08011495
 8011470:	0801149d 	.word	0x0801149d
 8011474:	2302      	movs	r3, #2
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e01a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801147c:	2304      	movs	r3, #4
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011482:	e016      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011484:	2308      	movs	r3, #8
 8011486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148a:	e012      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801148c:	2310      	movs	r3, #16
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011492:	e00e      	b.n	80114b2 <UART_SetConfig+0x5a6>
 8011494:	2320      	movs	r3, #32
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149a:	e00a      	b.n	80114b2 <UART_SetConfig+0x5a6>
 801149c:	2340      	movs	r3, #64	; 0x40
 801149e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a2:	e006      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80114a4:	2380      	movs	r3, #128	; 0x80
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e002      	b.n	80114b2 <UART_SetConfig+0x5a6>
 80114ac:	2380      	movs	r3, #128	; 0x80
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4a3f      	ldr	r2, [pc, #252]	; (80115b4 <UART_SetConfig+0x6a8>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	f040 80f8 	bne.w	80116ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114c2:	2b20      	cmp	r3, #32
 80114c4:	dc46      	bgt.n	8011554 <UART_SetConfig+0x648>
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	f2c0 8082 	blt.w	80115d0 <UART_SetConfig+0x6c4>
 80114cc:	3b02      	subs	r3, #2
 80114ce:	2b1e      	cmp	r3, #30
 80114d0:	d87e      	bhi.n	80115d0 <UART_SetConfig+0x6c4>
 80114d2:	a201      	add	r2, pc, #4	; (adr r2, 80114d8 <UART_SetConfig+0x5cc>)
 80114d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d8:	0801155b 	.word	0x0801155b
 80114dc:	080115d1 	.word	0x080115d1
 80114e0:	08011563 	.word	0x08011563
 80114e4:	080115d1 	.word	0x080115d1
 80114e8:	080115d1 	.word	0x080115d1
 80114ec:	080115d1 	.word	0x080115d1
 80114f0:	08011573 	.word	0x08011573
 80114f4:	080115d1 	.word	0x080115d1
 80114f8:	080115d1 	.word	0x080115d1
 80114fc:	080115d1 	.word	0x080115d1
 8011500:	080115d1 	.word	0x080115d1
 8011504:	080115d1 	.word	0x080115d1
 8011508:	080115d1 	.word	0x080115d1
 801150c:	080115d1 	.word	0x080115d1
 8011510:	08011583 	.word	0x08011583
 8011514:	080115d1 	.word	0x080115d1
 8011518:	080115d1 	.word	0x080115d1
 801151c:	080115d1 	.word	0x080115d1
 8011520:	080115d1 	.word	0x080115d1
 8011524:	080115d1 	.word	0x080115d1
 8011528:	080115d1 	.word	0x080115d1
 801152c:	080115d1 	.word	0x080115d1
 8011530:	080115d1 	.word	0x080115d1
 8011534:	080115d1 	.word	0x080115d1
 8011538:	080115d1 	.word	0x080115d1
 801153c:	080115d1 	.word	0x080115d1
 8011540:	080115d1 	.word	0x080115d1
 8011544:	080115d1 	.word	0x080115d1
 8011548:	080115d1 	.word	0x080115d1
 801154c:	080115d1 	.word	0x080115d1
 8011550:	080115c3 	.word	0x080115c3
 8011554:	2b40      	cmp	r3, #64	; 0x40
 8011556:	d037      	beq.n	80115c8 <UART_SetConfig+0x6bc>
 8011558:	e03a      	b.n	80115d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801155a:	f7fb fd65 	bl	800d028 <HAL_RCCEx_GetD3PCLK1Freq>
 801155e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011560:	e03c      	b.n	80115dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011566:	4618      	mov	r0, r3
 8011568:	f7fb fd74 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011570:	e034      	b.n	80115dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011572:	f107 0318 	add.w	r3, r7, #24
 8011576:	4618      	mov	r0, r3
 8011578:	f7fb fec0 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011580:	e02c      	b.n	80115dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <UART_SetConfig+0x69c>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f003 0320 	and.w	r3, r3, #32
 801158a:	2b00      	cmp	r3, #0
 801158c:	d016      	beq.n	80115bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801158e:	4b06      	ldr	r3, [pc, #24]	; (80115a8 <UART_SetConfig+0x69c>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	08db      	lsrs	r3, r3, #3
 8011594:	f003 0303 	and.w	r3, r3, #3
 8011598:	4a07      	ldr	r2, [pc, #28]	; (80115b8 <UART_SetConfig+0x6ac>)
 801159a:	fa22 f303 	lsr.w	r3, r2, r3
 801159e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115a0:	e01c      	b.n	80115dc <UART_SetConfig+0x6d0>
 80115a2:	bf00      	nop
 80115a4:	40011400 	.word	0x40011400
 80115a8:	58024400 	.word	0x58024400
 80115ac:	40007800 	.word	0x40007800
 80115b0:	40007c00 	.word	0x40007c00
 80115b4:	58000c00 	.word	0x58000c00
 80115b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80115bc:	4b9d      	ldr	r3, [pc, #628]	; (8011834 <UART_SetConfig+0x928>)
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115c0:	e00c      	b.n	80115dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115c2:	4b9d      	ldr	r3, [pc, #628]	; (8011838 <UART_SetConfig+0x92c>)
 80115c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115c6:	e009      	b.n	80115dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115ce:	e005      	b.n	80115dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80115d0:	2300      	movs	r3, #0
 80115d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115d4:	2301      	movs	r3, #1
 80115d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f000 81de 	beq.w	80119a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e8:	4a94      	ldr	r2, [pc, #592]	; (801183c <UART_SetConfig+0x930>)
 80115ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115ee:	461a      	mov	r2, r3
 80115f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80115f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	685a      	ldr	r2, [r3, #4]
 80115fc:	4613      	mov	r3, r2
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	4413      	add	r3, r2
 8011602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011604:	429a      	cmp	r2, r3
 8011606:	d305      	bcc.n	8011614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801160e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011610:	429a      	cmp	r2, r3
 8011612:	d903      	bls.n	801161c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801161a:	e1c1      	b.n	80119a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801161e:	2200      	movs	r2, #0
 8011620:	60bb      	str	r3, [r7, #8]
 8011622:	60fa      	str	r2, [r7, #12]
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011628:	4a84      	ldr	r2, [pc, #528]	; (801183c <UART_SetConfig+0x930>)
 801162a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801162e:	b29b      	uxth	r3, r3
 8011630:	2200      	movs	r2, #0
 8011632:	603b      	str	r3, [r7, #0]
 8011634:	607a      	str	r2, [r7, #4]
 8011636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801163a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801163e:	f7ee fe4f 	bl	80002e0 <__aeabi_uldivmod>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	4610      	mov	r0, r2
 8011648:	4619      	mov	r1, r3
 801164a:	f04f 0200 	mov.w	r2, #0
 801164e:	f04f 0300 	mov.w	r3, #0
 8011652:	020b      	lsls	r3, r1, #8
 8011654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011658:	0202      	lsls	r2, r0, #8
 801165a:	6979      	ldr	r1, [r7, #20]
 801165c:	6849      	ldr	r1, [r1, #4]
 801165e:	0849      	lsrs	r1, r1, #1
 8011660:	2000      	movs	r0, #0
 8011662:	460c      	mov	r4, r1
 8011664:	4605      	mov	r5, r0
 8011666:	eb12 0804 	adds.w	r8, r2, r4
 801166a:	eb43 0905 	adc.w	r9, r3, r5
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	469a      	mov	sl, r3
 8011676:	4693      	mov	fp, r2
 8011678:	4652      	mov	r2, sl
 801167a:	465b      	mov	r3, fp
 801167c:	4640      	mov	r0, r8
 801167e:	4649      	mov	r1, r9
 8011680:	f7ee fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	4613      	mov	r3, r2
 801168a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011692:	d308      	bcc.n	80116a6 <UART_SetConfig+0x79a>
 8011694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801169a:	d204      	bcs.n	80116a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	e17c      	b.n	80119a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80116a6:	2301      	movs	r3, #1
 80116a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116ac:	e178      	b.n	80119a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	69db      	ldr	r3, [r3, #28]
 80116b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116b6:	f040 80c5 	bne.w	8011844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80116ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116be:	2b20      	cmp	r3, #32
 80116c0:	dc48      	bgt.n	8011754 <UART_SetConfig+0x848>
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	db7b      	blt.n	80117be <UART_SetConfig+0x8b2>
 80116c6:	2b20      	cmp	r3, #32
 80116c8:	d879      	bhi.n	80117be <UART_SetConfig+0x8b2>
 80116ca:	a201      	add	r2, pc, #4	; (adr r2, 80116d0 <UART_SetConfig+0x7c4>)
 80116cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d0:	0801175b 	.word	0x0801175b
 80116d4:	08011763 	.word	0x08011763
 80116d8:	080117bf 	.word	0x080117bf
 80116dc:	080117bf 	.word	0x080117bf
 80116e0:	0801176b 	.word	0x0801176b
 80116e4:	080117bf 	.word	0x080117bf
 80116e8:	080117bf 	.word	0x080117bf
 80116ec:	080117bf 	.word	0x080117bf
 80116f0:	0801177b 	.word	0x0801177b
 80116f4:	080117bf 	.word	0x080117bf
 80116f8:	080117bf 	.word	0x080117bf
 80116fc:	080117bf 	.word	0x080117bf
 8011700:	080117bf 	.word	0x080117bf
 8011704:	080117bf 	.word	0x080117bf
 8011708:	080117bf 	.word	0x080117bf
 801170c:	080117bf 	.word	0x080117bf
 8011710:	0801178b 	.word	0x0801178b
 8011714:	080117bf 	.word	0x080117bf
 8011718:	080117bf 	.word	0x080117bf
 801171c:	080117bf 	.word	0x080117bf
 8011720:	080117bf 	.word	0x080117bf
 8011724:	080117bf 	.word	0x080117bf
 8011728:	080117bf 	.word	0x080117bf
 801172c:	080117bf 	.word	0x080117bf
 8011730:	080117bf 	.word	0x080117bf
 8011734:	080117bf 	.word	0x080117bf
 8011738:	080117bf 	.word	0x080117bf
 801173c:	080117bf 	.word	0x080117bf
 8011740:	080117bf 	.word	0x080117bf
 8011744:	080117bf 	.word	0x080117bf
 8011748:	080117bf 	.word	0x080117bf
 801174c:	080117bf 	.word	0x080117bf
 8011750:	080117b1 	.word	0x080117b1
 8011754:	2b40      	cmp	r3, #64	; 0x40
 8011756:	d02e      	beq.n	80117b6 <UART_SetConfig+0x8aa>
 8011758:	e031      	b.n	80117be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801175a:	f7f9 fc6d 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 801175e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011760:	e033      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011762:	f7f9 fc7f 	bl	800b064 <HAL_RCC_GetPCLK2Freq>
 8011766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011768:	e02f      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801176e:	4618      	mov	r0, r3
 8011770:	f7fb fc70 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011778:	e027      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801177a:	f107 0318 	add.w	r3, r7, #24
 801177e:	4618      	mov	r0, r3
 8011780:	f7fb fdbc 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011788:	e01f      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801178a:	4b2d      	ldr	r3, [pc, #180]	; (8011840 <UART_SetConfig+0x934>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f003 0320 	and.w	r3, r3, #32
 8011792:	2b00      	cmp	r3, #0
 8011794:	d009      	beq.n	80117aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011796:	4b2a      	ldr	r3, [pc, #168]	; (8011840 <UART_SetConfig+0x934>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	08db      	lsrs	r3, r3, #3
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	4a24      	ldr	r2, [pc, #144]	; (8011834 <UART_SetConfig+0x928>)
 80117a2:	fa22 f303 	lsr.w	r3, r2, r3
 80117a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117a8:	e00f      	b.n	80117ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80117aa:	4b22      	ldr	r3, [pc, #136]	; (8011834 <UART_SetConfig+0x928>)
 80117ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117ae:	e00c      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117b0:	4b21      	ldr	r3, [pc, #132]	; (8011838 <UART_SetConfig+0x92c>)
 80117b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117b4:	e009      	b.n	80117ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117bc:	e005      	b.n	80117ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80117be:	2300      	movs	r3, #0
 80117c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80117ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 80e7 	beq.w	80119a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d6:	4a19      	ldr	r2, [pc, #100]	; (801183c <UART_SetConfig+0x930>)
 80117d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117dc:	461a      	mov	r2, r3
 80117de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80117e4:	005a      	lsls	r2, r3, #1
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	085b      	lsrs	r3, r3, #1
 80117ec:	441a      	add	r2, r3
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80117f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	2b0f      	cmp	r3, #15
 80117fc:	d916      	bls.n	801182c <UART_SetConfig+0x920>
 80117fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011804:	d212      	bcs.n	801182c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011808:	b29b      	uxth	r3, r3
 801180a:	f023 030f 	bic.w	r3, r3, #15
 801180e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011812:	085b      	lsrs	r3, r3, #1
 8011814:	b29b      	uxth	r3, r3
 8011816:	f003 0307 	and.w	r3, r3, #7
 801181a:	b29a      	uxth	r2, r3
 801181c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801181e:	4313      	orrs	r3, r2
 8011820:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	e0b9      	b.n	80119a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801182c:	2301      	movs	r3, #1
 801182e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011832:	e0b5      	b.n	80119a0 <UART_SetConfig+0xa94>
 8011834:	03d09000 	.word	0x03d09000
 8011838:	003d0900 	.word	0x003d0900
 801183c:	0801714c 	.word	0x0801714c
 8011840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011848:	2b20      	cmp	r3, #32
 801184a:	dc49      	bgt.n	80118e0 <UART_SetConfig+0x9d4>
 801184c:	2b00      	cmp	r3, #0
 801184e:	db7c      	blt.n	801194a <UART_SetConfig+0xa3e>
 8011850:	2b20      	cmp	r3, #32
 8011852:	d87a      	bhi.n	801194a <UART_SetConfig+0xa3e>
 8011854:	a201      	add	r2, pc, #4	; (adr r2, 801185c <UART_SetConfig+0x950>)
 8011856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801185a:	bf00      	nop
 801185c:	080118e7 	.word	0x080118e7
 8011860:	080118ef 	.word	0x080118ef
 8011864:	0801194b 	.word	0x0801194b
 8011868:	0801194b 	.word	0x0801194b
 801186c:	080118f7 	.word	0x080118f7
 8011870:	0801194b 	.word	0x0801194b
 8011874:	0801194b 	.word	0x0801194b
 8011878:	0801194b 	.word	0x0801194b
 801187c:	08011907 	.word	0x08011907
 8011880:	0801194b 	.word	0x0801194b
 8011884:	0801194b 	.word	0x0801194b
 8011888:	0801194b 	.word	0x0801194b
 801188c:	0801194b 	.word	0x0801194b
 8011890:	0801194b 	.word	0x0801194b
 8011894:	0801194b 	.word	0x0801194b
 8011898:	0801194b 	.word	0x0801194b
 801189c:	08011917 	.word	0x08011917
 80118a0:	0801194b 	.word	0x0801194b
 80118a4:	0801194b 	.word	0x0801194b
 80118a8:	0801194b 	.word	0x0801194b
 80118ac:	0801194b 	.word	0x0801194b
 80118b0:	0801194b 	.word	0x0801194b
 80118b4:	0801194b 	.word	0x0801194b
 80118b8:	0801194b 	.word	0x0801194b
 80118bc:	0801194b 	.word	0x0801194b
 80118c0:	0801194b 	.word	0x0801194b
 80118c4:	0801194b 	.word	0x0801194b
 80118c8:	0801194b 	.word	0x0801194b
 80118cc:	0801194b 	.word	0x0801194b
 80118d0:	0801194b 	.word	0x0801194b
 80118d4:	0801194b 	.word	0x0801194b
 80118d8:	0801194b 	.word	0x0801194b
 80118dc:	0801193d 	.word	0x0801193d
 80118e0:	2b40      	cmp	r3, #64	; 0x40
 80118e2:	d02e      	beq.n	8011942 <UART_SetConfig+0xa36>
 80118e4:	e031      	b.n	801194a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118e6:	f7f9 fba7 	bl	800b038 <HAL_RCC_GetPCLK1Freq>
 80118ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118ec:	e033      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118ee:	f7f9 fbb9 	bl	800b064 <HAL_RCC_GetPCLK2Freq>
 80118f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118f4:	e02f      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fb fbaa 	bl	800d054 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011904:	e027      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011906:	f107 0318 	add.w	r3, r7, #24
 801190a:	4618      	mov	r0, r3
 801190c:	f7fb fcf6 	bl	800d2fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011914:	e01f      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011916:	4b2d      	ldr	r3, [pc, #180]	; (80119cc <UART_SetConfig+0xac0>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f003 0320 	and.w	r3, r3, #32
 801191e:	2b00      	cmp	r3, #0
 8011920:	d009      	beq.n	8011936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011922:	4b2a      	ldr	r3, [pc, #168]	; (80119cc <UART_SetConfig+0xac0>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	08db      	lsrs	r3, r3, #3
 8011928:	f003 0303 	and.w	r3, r3, #3
 801192c:	4a28      	ldr	r2, [pc, #160]	; (80119d0 <UART_SetConfig+0xac4>)
 801192e:	fa22 f303 	lsr.w	r3, r2, r3
 8011932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011934:	e00f      	b.n	8011956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011936:	4b26      	ldr	r3, [pc, #152]	; (80119d0 <UART_SetConfig+0xac4>)
 8011938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801193a:	e00c      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801193c:	4b25      	ldr	r3, [pc, #148]	; (80119d4 <UART_SetConfig+0xac8>)
 801193e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011940:	e009      	b.n	8011956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011948:	e005      	b.n	8011956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801194a:	2300      	movs	r3, #0
 801194c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801194e:	2301      	movs	r3, #1
 8011950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011954:	bf00      	nop
    }

    if (pclk != 0U)
 8011956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011958:	2b00      	cmp	r3, #0
 801195a:	d021      	beq.n	80119a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011960:	4a1d      	ldr	r2, [pc, #116]	; (80119d8 <UART_SetConfig+0xacc>)
 8011962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011966:	461a      	mov	r2, r3
 8011968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801196a:	fbb3 f2f2 	udiv	r2, r3, r2
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	085b      	lsrs	r3, r3, #1
 8011974:	441a      	add	r2, r3
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	fbb2 f3f3 	udiv	r3, r2, r3
 801197e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011982:	2b0f      	cmp	r3, #15
 8011984:	d909      	bls.n	801199a <UART_SetConfig+0xa8e>
 8011986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801198c:	d205      	bcs.n	801199a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011990:	b29a      	uxth	r2, r3
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	60da      	str	r2, [r3, #12]
 8011998:	e002      	b.n	80119a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801199a:	2301      	movs	r3, #1
 801199c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	2201      	movs	r2, #1
 80119a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	2201      	movs	r2, #1
 80119ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2200      	movs	r2, #0
 80119b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	2200      	movs	r2, #0
 80119ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80119bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3748      	adds	r7, #72	; 0x48
 80119c4:	46bd      	mov	sp, r7
 80119c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119ca:	bf00      	nop
 80119cc:	58024400 	.word	0x58024400
 80119d0:	03d09000 	.word	0x03d09000
 80119d4:	003d0900 	.word	0x003d0900
 80119d8:	0801714c 	.word	0x0801714c

080119dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e8:	f003 0308 	and.w	r3, r3, #8
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00a      	beq.n	8011a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	430a      	orrs	r2, r1
 8011a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a0a:	f003 0301 	and.w	r3, r3, #1
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00a      	beq.n	8011a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	430a      	orrs	r2, r1
 8011a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a2c:	f003 0302 	and.w	r3, r3, #2
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d00a      	beq.n	8011a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	430a      	orrs	r2, r1
 8011a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a4e:	f003 0304 	and.w	r3, r3, #4
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00a      	beq.n	8011a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	430a      	orrs	r2, r1
 8011a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a70:	f003 0310 	and.w	r3, r3, #16
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00a      	beq.n	8011a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	430a      	orrs	r2, r1
 8011a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a92:	f003 0320 	and.w	r3, r3, #32
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00a      	beq.n	8011ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	430a      	orrs	r2, r1
 8011aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d01a      	beq.n	8011af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	430a      	orrs	r2, r1
 8011ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ada:	d10a      	bne.n	8011af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	430a      	orrs	r2, r1
 8011af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00a      	beq.n	8011b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	430a      	orrs	r2, r1
 8011b12:	605a      	str	r2, [r3, #4]
  }
}
 8011b14:	bf00      	nop
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b098      	sub	sp, #96	; 0x60
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b30:	f7f2 faf4 	bl	800411c <HAL_GetTick>
 8011b34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f003 0308 	and.w	r3, r3, #8
 8011b40:	2b08      	cmp	r3, #8
 8011b42:	d12f      	bne.n	8011ba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 f88e 	bl	8011c74 <UART_WaitOnFlagUntilTimeout>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d022      	beq.n	8011ba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b66:	e853 3f00 	ldrex	r3, [r3]
 8011b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b72:	653b      	str	r3, [r7, #80]	; 0x50
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	461a      	mov	r2, r3
 8011b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8011b7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b84:	e841 2300 	strex	r3, r2, [r1]
 8011b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1e6      	bne.n	8011b5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2220      	movs	r2, #32
 8011b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	e063      	b.n	8011c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f003 0304 	and.w	r3, r3, #4
 8011bae:	2b04      	cmp	r3, #4
 8011bb0:	d149      	bne.n	8011c46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f000 f857 	bl	8011c74 <UART_WaitOnFlagUntilTimeout>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d03c      	beq.n	8011c46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd4:	e853 3f00 	ldrex	r3, [r3]
 8011bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	461a      	mov	r2, r3
 8011be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bea:	633b      	str	r3, [r7, #48]	; 0x30
 8011bec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bf2:	e841 2300 	strex	r3, r2, [r1]
 8011bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1e6      	bne.n	8011bcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	3308      	adds	r3, #8
 8011c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	e853 3f00 	ldrex	r3, [r3]
 8011c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f023 0301 	bic.w	r3, r3, #1
 8011c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c1e:	61fa      	str	r2, [r7, #28]
 8011c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c22:	69b9      	ldr	r1, [r7, #24]
 8011c24:	69fa      	ldr	r2, [r7, #28]
 8011c26:	e841 2300 	strex	r3, r2, [r1]
 8011c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d1e5      	bne.n	8011bfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2220      	movs	r2, #32
 8011c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c42:	2303      	movs	r3, #3
 8011c44:	e012      	b.n	8011c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2220      	movs	r2, #32
 8011c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2220      	movs	r2, #32
 8011c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3758      	adds	r7, #88	; 0x58
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	603b      	str	r3, [r7, #0]
 8011c80:	4613      	mov	r3, r2
 8011c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c84:	e04f      	b.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c8c:	d04b      	beq.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c8e:	f7f2 fa45 	bl	800411c <HAL_GetTick>
 8011c92:	4602      	mov	r2, r0
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	69ba      	ldr	r2, [r7, #24]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d302      	bcc.n	8011ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d101      	bne.n	8011ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	e04e      	b.n	8011d46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f003 0304 	and.w	r3, r3, #4
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d037      	beq.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2b80      	cmp	r3, #128	; 0x80
 8011cba:	d034      	beq.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2b40      	cmp	r3, #64	; 0x40
 8011cc0:	d031      	beq.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	69db      	ldr	r3, [r3, #28]
 8011cc8:	f003 0308 	and.w	r3, r3, #8
 8011ccc:	2b08      	cmp	r3, #8
 8011cce:	d110      	bne.n	8011cf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2208      	movs	r2, #8
 8011cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f000 f95b 	bl	8011f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2208      	movs	r2, #8
 8011ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e029      	b.n	8011d46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	69db      	ldr	r3, [r3, #28]
 8011cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d00:	d111      	bne.n	8011d26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d0c:	68f8      	ldr	r0, [r7, #12]
 8011d0e:	f000 f941 	bl	8011f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2220      	movs	r2, #32
 8011d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011d22:	2303      	movs	r3, #3
 8011d24:	e00f      	b.n	8011d46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	69da      	ldr	r2, [r3, #28]
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	4013      	ands	r3, r2
 8011d30:	68ba      	ldr	r2, [r7, #8]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	bf0c      	ite	eq
 8011d36:	2301      	moveq	r3, #1
 8011d38:	2300      	movne	r3, #0
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d0a0      	beq.n	8011c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
	...

08011d50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b0a3      	sub	sp, #140	; 0x8c
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	88fa      	ldrh	r2, [r7, #6]
 8011d68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	88fa      	ldrh	r2, [r7, #6]
 8011d70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2200      	movs	r2, #0
 8011d78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d82:	d10e      	bne.n	8011da2 <UART_Start_Receive_IT+0x52>
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	691b      	ldr	r3, [r3, #16]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d105      	bne.n	8011d98 <UART_Start_Receive_IT+0x48>
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011d92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d96:	e02d      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	22ff      	movs	r2, #255	; 0xff
 8011d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011da0:	e028      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10d      	bne.n	8011dc6 <UART_Start_Receive_IT+0x76>
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d104      	bne.n	8011dbc <UART_Start_Receive_IT+0x6c>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	22ff      	movs	r2, #255	; 0xff
 8011db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dba:	e01b      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	227f      	movs	r2, #127	; 0x7f
 8011dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dc4:	e016      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011dce:	d10d      	bne.n	8011dec <UART_Start_Receive_IT+0x9c>
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	691b      	ldr	r3, [r3, #16]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d104      	bne.n	8011de2 <UART_Start_Receive_IT+0x92>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	227f      	movs	r2, #127	; 0x7f
 8011ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011de0:	e008      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	223f      	movs	r2, #63	; 0x3f
 8011de6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dea:	e003      	b.n	8011df4 <UART_Start_Receive_IT+0xa4>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2222      	movs	r2, #34	; 0x22
 8011e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	3308      	adds	r3, #8
 8011e0a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e0e:	e853 3f00 	ldrex	r3, [r3]
 8011e12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	3308      	adds	r3, #8
 8011e24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e28:	673a      	str	r2, [r7, #112]	; 0x70
 8011e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e2c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011e2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e30:	e841 2300 	strex	r3, r2, [r1]
 8011e34:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d1e3      	bne.n	8011e04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e44:	d14f      	bne.n	8011ee6 <UART_Start_Receive_IT+0x196>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e4c:	88fa      	ldrh	r2, [r7, #6]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d349      	bcc.n	8011ee6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	689b      	ldr	r3, [r3, #8]
 8011e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e5a:	d107      	bne.n	8011e6c <UART_Start_Receive_IT+0x11c>
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d103      	bne.n	8011e6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	4a47      	ldr	r2, [pc, #284]	; (8011f84 <UART_Start_Receive_IT+0x234>)
 8011e68:	675a      	str	r2, [r3, #116]	; 0x74
 8011e6a:	e002      	b.n	8011e72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	4a46      	ldr	r2, [pc, #280]	; (8011f88 <UART_Start_Receive_IT+0x238>)
 8011e70:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d01a      	beq.n	8011eb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e82:	e853 3f00 	ldrex	r3, [r3]
 8011e86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	461a      	mov	r2, r3
 8011e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e9e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011ea2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011ea4:	e841 2300 	strex	r3, r2, [r1]
 8011ea8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1e4      	bne.n	8011e7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eba:	e853 3f00 	ldrex	r3, [r3]
 8011ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	3308      	adds	r3, #8
 8011ece:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ed0:	64ba      	str	r2, [r7, #72]	; 0x48
 8011ed2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ed8:	e841 2300 	strex	r3, r2, [r1]
 8011edc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d1e5      	bne.n	8011eb0 <UART_Start_Receive_IT+0x160>
 8011ee4:	e046      	b.n	8011f74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eee:	d107      	bne.n	8011f00 <UART_Start_Receive_IT+0x1b0>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d103      	bne.n	8011f00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	4a24      	ldr	r2, [pc, #144]	; (8011f8c <UART_Start_Receive_IT+0x23c>)
 8011efc:	675a      	str	r2, [r3, #116]	; 0x74
 8011efe:	e002      	b.n	8011f06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4a23      	ldr	r2, [pc, #140]	; (8011f90 <UART_Start_Receive_IT+0x240>)
 8011f04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	691b      	ldr	r3, [r3, #16]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d019      	beq.n	8011f42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f16:	e853 3f00 	ldrex	r3, [r3]
 8011f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011f22:	677b      	str	r3, [r7, #116]	; 0x74
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	461a      	mov	r2, r3
 8011f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8011f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f34:	e841 2300 	strex	r3, r2, [r1]
 8011f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1e6      	bne.n	8011f0e <UART_Start_Receive_IT+0x1be>
 8011f40:	e018      	b.n	8011f74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	e853 3f00 	ldrex	r3, [r3]
 8011f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	f043 0320 	orr.w	r3, r3, #32
 8011f56:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f60:	623b      	str	r3, [r7, #32]
 8011f62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f64:	69f9      	ldr	r1, [r7, #28]
 8011f66:	6a3a      	ldr	r2, [r7, #32]
 8011f68:	e841 2300 	strex	r3, r2, [r1]
 8011f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1e6      	bne.n	8011f42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	378c      	adds	r7, #140	; 0x8c
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	080127b5 	.word	0x080127b5
 8011f88:	08012455 	.word	0x08012455
 8011f8c:	0801229d 	.word	0x0801229d
 8011f90:	080120e5 	.word	0x080120e5

08011f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b095      	sub	sp, #84	; 0x54
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa4:	e853 3f00 	ldrex	r3, [r3]
 8011fa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fba:	643b      	str	r3, [r7, #64]	; 0x40
 8011fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011fc2:	e841 2300 	strex	r3, r2, [r1]
 8011fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1e6      	bne.n	8011f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	e853 3f00 	ldrex	r3, [r3]
 8011fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fde:	69fa      	ldr	r2, [r7, #28]
 8011fe0:	4b1e      	ldr	r3, [pc, #120]	; (801205c <UART_EndRxTransfer+0xc8>)
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3308      	adds	r3, #8
 8011fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ff6:	e841 2300 	strex	r3, r2, [r1]
 8011ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1e5      	bne.n	8011fce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012006:	2b01      	cmp	r3, #1
 8012008:	d118      	bne.n	801203c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	60bb      	str	r3, [r7, #8]
   return(result);
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	f023 0310 	bic.w	r3, r3, #16
 801201e:	647b      	str	r3, [r7, #68]	; 0x44
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	461a      	mov	r2, r3
 8012026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6979      	ldr	r1, [r7, #20]
 801202e:	69ba      	ldr	r2, [r7, #24]
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	613b      	str	r3, [r7, #16]
   return(result);
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e6      	bne.n	801200a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2220      	movs	r2, #32
 8012040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012050:	bf00      	nop
 8012052:	3754      	adds	r7, #84	; 0x54
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	effffffe 	.word	0xeffffffe

08012060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801206c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2200      	movs	r2, #0
 8012072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7fe ff2e 	bl	8010ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012084:	bf00      	nop
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b088      	sub	sp, #32
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	e853 3f00 	ldrex	r3, [r3]
 80120a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120a8:	61fb      	str	r3, [r7, #28]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	461a      	mov	r2, r3
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	61bb      	str	r3, [r7, #24]
 80120b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b6:	6979      	ldr	r1, [r7, #20]
 80120b8:	69ba      	ldr	r2, [r7, #24]
 80120ba:	e841 2300 	strex	r3, r2, [r1]
 80120be:	613b      	str	r3, [r7, #16]
   return(result);
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1e6      	bne.n	8012094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2220      	movs	r2, #32
 80120ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2200      	movs	r2, #0
 80120d2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7fe fef9 	bl	8010ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120da:	bf00      	nop
 80120dc:	3720      	adds	r7, #32
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
	...

080120e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b09c      	sub	sp, #112	; 0x70
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120fc:	2b22      	cmp	r3, #34	; 0x22
 80120fe:	f040 80be 	bne.w	801227e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801210c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012110:	b2d9      	uxtb	r1, r3
 8012112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012116:	b2da      	uxtb	r2, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801211c:	400a      	ands	r2, r1
 801211e:	b2d2      	uxtb	r2, r2
 8012120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012126:	1c5a      	adds	r2, r3, #1
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012132:	b29b      	uxth	r3, r3
 8012134:	3b01      	subs	r3, #1
 8012136:	b29a      	uxth	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012144:	b29b      	uxth	r3, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	f040 80a1 	bne.w	801228e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012154:	e853 3f00 	ldrex	r3, [r3]
 8012158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801215a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801215c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012160:	66bb      	str	r3, [r7, #104]	; 0x68
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	461a      	mov	r2, r3
 8012168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801216a:	65bb      	str	r3, [r7, #88]	; 0x58
 801216c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801216e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012172:	e841 2300 	strex	r3, r2, [r1]
 8012176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1e6      	bne.n	801214c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	3308      	adds	r3, #8
 8012184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012188:	e853 3f00 	ldrex	r3, [r3]
 801218c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012190:	f023 0301 	bic.w	r3, r3, #1
 8012194:	667b      	str	r3, [r7, #100]	; 0x64
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	3308      	adds	r3, #8
 801219c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801219e:	647a      	str	r2, [r7, #68]	; 0x44
 80121a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80121a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121a6:	e841 2300 	strex	r3, r2, [r1]
 80121aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80121ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d1e5      	bne.n	801217e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2220      	movs	r2, #32
 80121b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2200      	movs	r2, #0
 80121be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a33      	ldr	r2, [pc, #204]	; (8012298 <UART_RxISR_8BIT+0x1b4>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d01f      	beq.n	8012210 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d018      	beq.n	8012210 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e6:	e853 3f00 	ldrex	r3, [r3]
 80121ea:	623b      	str	r3, [r7, #32]
   return(result);
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80121f2:	663b      	str	r3, [r7, #96]	; 0x60
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	461a      	mov	r2, r3
 80121fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121fc:	633b      	str	r3, [r7, #48]	; 0x30
 80121fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012204:	e841 2300 	strex	r3, r2, [r1]
 8012208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1e6      	bne.n	80121de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012214:	2b01      	cmp	r3, #1
 8012216:	d12e      	bne.n	8012276 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	e853 3f00 	ldrex	r3, [r3]
 801222a:	60fb      	str	r3, [r7, #12]
   return(result);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f023 0310 	bic.w	r3, r3, #16
 8012232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	461a      	mov	r2, r3
 801223a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801223c:	61fb      	str	r3, [r7, #28]
 801223e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012240:	69b9      	ldr	r1, [r7, #24]
 8012242:	69fa      	ldr	r2, [r7, #28]
 8012244:	e841 2300 	strex	r3, r2, [r1]
 8012248:	617b      	str	r3, [r7, #20]
   return(result);
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d1e6      	bne.n	801221e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	69db      	ldr	r3, [r3, #28]
 8012256:	f003 0310 	and.w	r3, r3, #16
 801225a:	2b10      	cmp	r3, #16
 801225c:	d103      	bne.n	8012266 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2210      	movs	r2, #16
 8012264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801226c:	4619      	mov	r1, r3
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7fe fe40 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012274:	e00b      	b.n	801228e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7ef f970 	bl	800155c <HAL_UART_RxCpltCallback>
}
 801227c:	e007      	b.n	801228e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	699a      	ldr	r2, [r3, #24]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f042 0208 	orr.w	r2, r2, #8
 801228c:	619a      	str	r2, [r3, #24]
}
 801228e:	bf00      	nop
 8012290:	3770      	adds	r7, #112	; 0x70
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	58000c00 	.word	0x58000c00

0801229c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b09c      	sub	sp, #112	; 0x70
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122b4:	2b22      	cmp	r3, #34	; 0x22
 80122b6:	f040 80be 	bne.w	8012436 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80122ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80122ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122d2:	4013      	ands	r3, r2
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122de:	1c9a      	adds	r2, r3, #2
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	3b01      	subs	r3, #1
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f040 80a1 	bne.w	8012446 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801230c:	e853 3f00 	ldrex	r3, [r3]
 8012310:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012318:	667b      	str	r3, [r7, #100]	; 0x64
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	461a      	mov	r2, r3
 8012320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012322:	657b      	str	r3, [r7, #84]	; 0x54
 8012324:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801232a:	e841 2300 	strex	r3, r2, [r1]
 801232e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1e6      	bne.n	8012304 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3308      	adds	r3, #8
 801233c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012340:	e853 3f00 	ldrex	r3, [r3]
 8012344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012348:	f023 0301 	bic.w	r3, r3, #1
 801234c:	663b      	str	r3, [r7, #96]	; 0x60
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	3308      	adds	r3, #8
 8012354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012356:	643a      	str	r2, [r7, #64]	; 0x40
 8012358:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801235a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801235c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801235e:	e841 2300 	strex	r3, r2, [r1]
 8012362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012366:	2b00      	cmp	r3, #0
 8012368:	d1e5      	bne.n	8012336 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2220      	movs	r2, #32
 801236e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2200      	movs	r2, #0
 8012376:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4a33      	ldr	r2, [pc, #204]	; (8012450 <UART_RxISR_16BIT+0x1b4>)
 8012384:	4293      	cmp	r3, r2
 8012386:	d01f      	beq.n	80123c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012392:	2b00      	cmp	r3, #0
 8012394:	d018      	beq.n	80123c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239c:	6a3b      	ldr	r3, [r7, #32]
 801239e:	e853 3f00 	ldrex	r3, [r3]
 80123a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80123aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	461a      	mov	r2, r3
 80123b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123bc:	e841 2300 	strex	r3, r2, [r1]
 80123c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1e6      	bne.n	8012396 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d12e      	bne.n	801242e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	e853 3f00 	ldrex	r3, [r3]
 80123e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f023 0310 	bic.w	r3, r3, #16
 80123ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	461a      	mov	r2, r3
 80123f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123f4:	61bb      	str	r3, [r7, #24]
 80123f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f8:	6979      	ldr	r1, [r7, #20]
 80123fa:	69ba      	ldr	r2, [r7, #24]
 80123fc:	e841 2300 	strex	r3, r2, [r1]
 8012400:	613b      	str	r3, [r7, #16]
   return(result);
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1e6      	bne.n	80123d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	69db      	ldr	r3, [r3, #28]
 801240e:	f003 0310 	and.w	r3, r3, #16
 8012412:	2b10      	cmp	r3, #16
 8012414:	d103      	bne.n	801241e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2210      	movs	r2, #16
 801241c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012424:	4619      	mov	r1, r3
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7fe fd64 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801242c:	e00b      	b.n	8012446 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7ef f894 	bl	800155c <HAL_UART_RxCpltCallback>
}
 8012434:	e007      	b.n	8012446 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	699a      	ldr	r2, [r3, #24]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f042 0208 	orr.w	r2, r2, #8
 8012444:	619a      	str	r2, [r3, #24]
}
 8012446:	bf00      	nop
 8012448:	3770      	adds	r7, #112	; 0x70
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	58000c00 	.word	0x58000c00

08012454 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b0ac      	sub	sp, #176	; 0xb0
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012462:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	69db      	ldr	r3, [r3, #28]
 801246c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	689b      	ldr	r3, [r3, #8]
 8012480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801248a:	2b22      	cmp	r3, #34	; 0x22
 801248c:	f040 8180 	bne.w	8012790 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012496:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801249a:	e123      	b.n	80126e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80124a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80124aa:	b2d9      	uxtb	r1, r3
 80124ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124b6:	400a      	ands	r2, r1
 80124b8:	b2d2      	uxtb	r2, r2
 80124ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124c0:	1c5a      	adds	r2, r3, #1
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	3b01      	subs	r3, #1
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	69db      	ldr	r3, [r3, #28]
 80124de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80124e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124e6:	f003 0307 	and.w	r3, r3, #7
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d053      	beq.n	8012596 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80124ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d011      	beq.n	801251e <UART_RxISR_8BIT_FIFOEN+0xca>
 80124fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00b      	beq.n	801251e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2201      	movs	r2, #1
 801250c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012514:	f043 0201 	orr.w	r2, r3, #1
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801251e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012522:	f003 0302 	and.w	r3, r3, #2
 8012526:	2b00      	cmp	r3, #0
 8012528:	d011      	beq.n	801254e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801252a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801252e:	f003 0301 	and.w	r3, r3, #1
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00b      	beq.n	801254e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2202      	movs	r2, #2
 801253c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012544:	f043 0204 	orr.w	r2, r3, #4
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012552:	f003 0304 	and.w	r3, r3, #4
 8012556:	2b00      	cmp	r3, #0
 8012558:	d011      	beq.n	801257e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801255e:	f003 0301 	and.w	r3, r3, #1
 8012562:	2b00      	cmp	r3, #0
 8012564:	d00b      	beq.n	801257e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2204      	movs	r2, #4
 801256c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012574:	f043 0202 	orr.w	r2, r3, #2
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012584:	2b00      	cmp	r3, #0
 8012586:	d006      	beq.n	8012596 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f7fe fca9 	bl	8010ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801259c:	b29b      	uxth	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f040 80a0 	bne.w	80126e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80125ac:	e853 3f00 	ldrex	r3, [r3]
 80125b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80125b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	461a      	mov	r2, r3
 80125c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80125c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80125cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80125ce:	e841 2300 	strex	r3, r2, [r1]
 80125d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80125d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1e4      	bne.n	80125a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3308      	adds	r3, #8
 80125e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125e4:	e853 3f00 	ldrex	r3, [r3]
 80125e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80125ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125ec:	4b6e      	ldr	r3, [pc, #440]	; (80127a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80125ee:	4013      	ands	r3, r2
 80125f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	3308      	adds	r3, #8
 80125fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8012600:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012602:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012604:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012606:	e841 2300 	strex	r3, r2, [r1]
 801260a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801260c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1e3      	bne.n	80125da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2220      	movs	r2, #32
 8012616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2200      	movs	r2, #0
 8012624:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a60      	ldr	r2, [pc, #384]	; (80127ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d021      	beq.n	8012674 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801263a:	2b00      	cmp	r3, #0
 801263c:	d01a      	beq.n	8012674 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012646:	e853 3f00 	ldrex	r3, [r3]
 801264a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801264e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	461a      	mov	r2, r3
 801265c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012660:	657b      	str	r3, [r7, #84]	; 0x54
 8012662:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012664:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012668:	e841 2300 	strex	r3, r2, [r1]
 801266c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1e4      	bne.n	801263e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012678:	2b01      	cmp	r3, #1
 801267a:	d130      	bne.n	80126de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2200      	movs	r2, #0
 8012680:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801268a:	e853 3f00 	ldrex	r3, [r3]
 801268e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012692:	f023 0310 	bic.w	r3, r3, #16
 8012696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	461a      	mov	r2, r3
 80126a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126a4:	643b      	str	r3, [r7, #64]	; 0x40
 80126a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126ac:	e841 2300 	strex	r3, r2, [r1]
 80126b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80126b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d1e4      	bne.n	8012682 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	69db      	ldr	r3, [r3, #28]
 80126be:	f003 0310 	and.w	r3, r3, #16
 80126c2:	2b10      	cmp	r3, #16
 80126c4:	d103      	bne.n	80126ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2210      	movs	r2, #16
 80126cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126d4:	4619      	mov	r1, r3
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7fe fc0c 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
 80126dc:	e002      	b.n	80126e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ee ff3c 	bl	800155c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d006      	beq.n	80126fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80126ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126f0:	f003 0320 	and.w	r3, r3, #32
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f47f aed1 	bne.w	801249c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012704:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012708:	2b00      	cmp	r3, #0
 801270a:	d049      	beq.n	80127a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012712:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012716:	429a      	cmp	r2, r3
 8012718:	d242      	bcs.n	80127a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	3308      	adds	r3, #8
 8012720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012722:	6a3b      	ldr	r3, [r7, #32]
 8012724:	e853 3f00 	ldrex	r3, [r3]
 8012728:	61fb      	str	r3, [r7, #28]
   return(result);
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	3308      	adds	r3, #8
 801273a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801273e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012746:	e841 2300 	strex	r3, r2, [r1]
 801274a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	2b00      	cmp	r3, #0
 8012750:	d1e3      	bne.n	801271a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a16      	ldr	r2, [pc, #88]	; (80127b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012756:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	e853 3f00 	ldrex	r3, [r3]
 8012764:	60bb      	str	r3, [r7, #8]
   return(result);
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	f043 0320 	orr.w	r3, r3, #32
 801276c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	461a      	mov	r2, r3
 8012776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801277a:	61bb      	str	r3, [r7, #24]
 801277c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801277e:	6979      	ldr	r1, [r7, #20]
 8012780:	69ba      	ldr	r2, [r7, #24]
 8012782:	e841 2300 	strex	r3, r2, [r1]
 8012786:	613b      	str	r3, [r7, #16]
   return(result);
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d1e4      	bne.n	8012758 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801278e:	e007      	b.n	80127a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	699a      	ldr	r2, [r3, #24]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f042 0208 	orr.w	r2, r2, #8
 801279e:	619a      	str	r2, [r3, #24]
}
 80127a0:	bf00      	nop
 80127a2:	37b0      	adds	r7, #176	; 0xb0
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	effffffe 	.word	0xeffffffe
 80127ac:	58000c00 	.word	0x58000c00
 80127b0:	080120e5 	.word	0x080120e5

080127b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b0ae      	sub	sp, #184	; 0xb8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	69db      	ldr	r3, [r3, #28]
 80127cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127ea:	2b22      	cmp	r3, #34	; 0x22
 80127ec:	f040 8184 	bne.w	8012af8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127fa:	e127      	b.n	8012a4c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012802:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801280a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801280e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012812:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012816:	4013      	ands	r3, r2
 8012818:	b29a      	uxth	r2, r3
 801281a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801281e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012824:	1c9a      	adds	r2, r3, #2
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012830:	b29b      	uxth	r3, r3
 8012832:	3b01      	subs	r3, #1
 8012834:	b29a      	uxth	r2, r3
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	69db      	ldr	r3, [r3, #28]
 8012842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801284a:	f003 0307 	and.w	r3, r3, #7
 801284e:	2b00      	cmp	r3, #0
 8012850:	d053      	beq.n	80128fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012856:	f003 0301 	and.w	r3, r3, #1
 801285a:	2b00      	cmp	r3, #0
 801285c:	d011      	beq.n	8012882 <UART_RxISR_16BIT_FIFOEN+0xce>
 801285e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012866:	2b00      	cmp	r3, #0
 8012868:	d00b      	beq.n	8012882 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2201      	movs	r2, #1
 8012870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012878:	f043 0201 	orr.w	r2, r3, #1
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012886:	f003 0302 	and.w	r3, r3, #2
 801288a:	2b00      	cmp	r3, #0
 801288c:	d011      	beq.n	80128b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801288e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012892:	f003 0301 	and.w	r3, r3, #1
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00b      	beq.n	80128b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2202      	movs	r2, #2
 80128a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128a8:	f043 0204 	orr.w	r2, r3, #4
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80128b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80128b6:	f003 0304 	and.w	r3, r3, #4
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d011      	beq.n	80128e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80128be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80128c2:	f003 0301 	and.w	r3, r3, #1
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d00b      	beq.n	80128e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2204      	movs	r2, #4
 80128d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128d8:	f043 0202 	orr.w	r2, r3, #2
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d006      	beq.n	80128fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7fe faf7 	bl	8010ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012900:	b29b      	uxth	r3, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	f040 80a2 	bne.w	8012a4c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012910:	e853 3f00 	ldrex	r3, [r3]
 8012914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801291c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	461a      	mov	r2, r3
 8012926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801292a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801292e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012936:	e841 2300 	strex	r3, r2, [r1]
 801293a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801293c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1e2      	bne.n	8012908 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3308      	adds	r3, #8
 8012948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801294c:	e853 3f00 	ldrex	r3, [r3]
 8012950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012952:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012954:	4b6e      	ldr	r3, [pc, #440]	; (8012b10 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012956:	4013      	ands	r3, r2
 8012958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	3308      	adds	r3, #8
 8012962:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801296a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801296c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801296e:	e841 2300 	strex	r3, r2, [r1]
 8012972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012976:	2b00      	cmp	r3, #0
 8012978:	d1e3      	bne.n	8012942 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2220      	movs	r2, #32
 801297e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2200      	movs	r2, #0
 8012986:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4a60      	ldr	r2, [pc, #384]	; (8012b14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d021      	beq.n	80129dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d01a      	beq.n	80129dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129ae:	e853 3f00 	ldrex	r3, [r3]
 80129b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80129b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80129ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80129ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80129ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129d0:	e841 2300 	strex	r3, r2, [r1]
 80129d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80129d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1e4      	bne.n	80129a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d130      	bne.n	8012a46 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f2:	e853 3f00 	ldrex	r3, [r3]
 80129f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fa:	f023 0310 	bic.w	r3, r3, #16
 80129fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8012a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a14:	e841 2300 	strex	r3, r2, [r1]
 8012a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1e4      	bne.n	80129ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	69db      	ldr	r3, [r3, #28]
 8012a26:	f003 0310 	and.w	r3, r3, #16
 8012a2a:	2b10      	cmp	r3, #16
 8012a2c:	d103      	bne.n	8012a36 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2210      	movs	r2, #16
 8012a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7fe fa58 	bl	8010ef4 <HAL_UARTEx_RxEventCallback>
 8012a44:	e002      	b.n	8012a4c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ee fd88 	bl	800155c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d006      	beq.n	8012a62 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a58:	f003 0320 	and.w	r3, r3, #32
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f47f aecd 	bne.w	80127fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d049      	beq.n	8012b08 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d242      	bcs.n	8012b08 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	3308      	adds	r3, #8
 8012a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8c:	e853 3f00 	ldrex	r3, [r3]
 8012a90:	623b      	str	r3, [r7, #32]
   return(result);
 8012a92:	6a3b      	ldr	r3, [r7, #32]
 8012a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	3308      	adds	r3, #8
 8012aa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8012aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aae:	e841 2300 	strex	r3, r2, [r1]
 8012ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d1e3      	bne.n	8012a82 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4a16      	ldr	r2, [pc, #88]	; (8012b18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012abe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	e853 3f00 	ldrex	r3, [r3]
 8012acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f043 0320 	orr.w	r3, r3, #32
 8012ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	461a      	mov	r2, r3
 8012ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ae2:	61fb      	str	r3, [r7, #28]
 8012ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae6:	69b9      	ldr	r1, [r7, #24]
 8012ae8:	69fa      	ldr	r2, [r7, #28]
 8012aea:	e841 2300 	strex	r3, r2, [r1]
 8012aee:	617b      	str	r3, [r7, #20]
   return(result);
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1e4      	bne.n	8012ac0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012af6:	e007      	b.n	8012b08 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	699a      	ldr	r2, [r3, #24]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f042 0208 	orr.w	r2, r2, #8
 8012b06:	619a      	str	r2, [r3, #24]
}
 8012b08:	bf00      	nop
 8012b0a:	37b8      	adds	r7, #184	; 0xb8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	effffffe 	.word	0xeffffffe
 8012b14:	58000c00 	.word	0x58000c00
 8012b18:	0801229d 	.word	0x0801229d

08012b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012b24:	bf00      	nop
 8012b26:	370c      	adds	r7, #12
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	4770      	bx	lr

08012b30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012b38:	bf00      	nop
 8012b3a:	370c      	adds	r7, #12
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b4c:	bf00      	nop
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b089      	sub	sp, #36	; 0x24
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d101      	bne.n	8012b6e <HAL_UARTEx_EnableStopMode+0x16>
 8012b6a:	2302      	movs	r3, #2
 8012b6c:	e021      	b.n	8012bb2 <HAL_UARTEx_EnableStopMode+0x5a>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2201      	movs	r2, #1
 8012b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	e853 3f00 	ldrex	r3, [r3]
 8012b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	f043 0302 	orr.w	r3, r3, #2
 8012b8a:	61fb      	str	r3, [r7, #28]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	461a      	mov	r2, r3
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	61bb      	str	r3, [r7, #24]
 8012b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b98:	6979      	ldr	r1, [r7, #20]
 8012b9a:	69ba      	ldr	r2, [r7, #24]
 8012b9c:	e841 2300 	strex	r3, r2, [r1]
 8012ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d1e6      	bne.n	8012b76 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bb0:	2300      	movs	r3, #0
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3724      	adds	r7, #36	; 0x24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b084      	sub	sp, #16
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d101      	bne.n	8012bd4 <HAL_UARTEx_EnableFifoMode+0x16>
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	e02b      	b.n	8012c2c <HAL_UARTEx_EnableFifoMode+0x6e>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2224      	movs	r2, #36	; 0x24
 8012be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f022 0201 	bic.w	r2, r2, #1
 8012bfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012c0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 f8c3 	bl	8012da0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2220      	movs	r2, #32
 8012c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d101      	bne.n	8012c4a <HAL_UARTEx_DisableFifoMode+0x16>
 8012c46:	2302      	movs	r3, #2
 8012c48:	e027      	b.n	8012c9a <HAL_UARTEx_DisableFifoMode+0x66>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2224      	movs	r2, #36	; 0x24
 8012c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f022 0201 	bic.w	r2, r2, #1
 8012c70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2220      	movs	r2, #32
 8012c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3714      	adds	r7, #20
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr

08012ca6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012ca6:	b580      	push	{r7, lr}
 8012ca8:	b084      	sub	sp, #16
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	6078      	str	r0, [r7, #4]
 8012cae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d101      	bne.n	8012cbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012cba:	2302      	movs	r3, #2
 8012cbc:	e02d      	b.n	8012d1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2224      	movs	r2, #36	; 0x24
 8012cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f022 0201 	bic.w	r2, r2, #1
 8012ce4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	689b      	ldr	r3, [r3, #8]
 8012cec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	683a      	ldr	r2, [r7, #0]
 8012cf6:	430a      	orrs	r2, r1
 8012cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 f850 	bl	8012da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	68fa      	ldr	r2, [r7, #12]
 8012d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2220      	movs	r2, #32
 8012d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2200      	movs	r2, #0
 8012d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d18:	2300      	movs	r3, #0
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}

08012d22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b084      	sub	sp, #16
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
 8012d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d101      	bne.n	8012d3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d36:	2302      	movs	r3, #2
 8012d38:	e02d      	b.n	8012d96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2224      	movs	r2, #36	; 0x24
 8012d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f022 0201 	bic.w	r2, r2, #1
 8012d60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	683a      	ldr	r2, [r7, #0]
 8012d72:	430a      	orrs	r2, r1
 8012d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f812 	bl	8012da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2220      	movs	r2, #32
 8012d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d94:	2300      	movs	r3, #0
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3710      	adds	r7, #16
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
	...

08012da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d108      	bne.n	8012dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2201      	movs	r2, #1
 8012db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012dc0:	e031      	b.n	8012e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012dc2:	2310      	movs	r3, #16
 8012dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012dc6:	2310      	movs	r3, #16
 8012dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	689b      	ldr	r3, [r3, #8]
 8012dd0:	0e5b      	lsrs	r3, r3, #25
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	f003 0307 	and.w	r3, r3, #7
 8012dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	0f5b      	lsrs	r3, r3, #29
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	f003 0307 	and.w	r3, r3, #7
 8012de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dea:	7bbb      	ldrb	r3, [r7, #14]
 8012dec:	7b3a      	ldrb	r2, [r7, #12]
 8012dee:	4911      	ldr	r1, [pc, #68]	; (8012e34 <UARTEx_SetNbDataToProcess+0x94>)
 8012df0:	5c8a      	ldrb	r2, [r1, r2]
 8012df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012df6:	7b3a      	ldrb	r2, [r7, #12]
 8012df8:	490f      	ldr	r1, [pc, #60]	; (8012e38 <UARTEx_SetNbDataToProcess+0x98>)
 8012dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	7b7a      	ldrb	r2, [r7, #13]
 8012e0c:	4909      	ldr	r1, [pc, #36]	; (8012e34 <UARTEx_SetNbDataToProcess+0x94>)
 8012e0e:	5c8a      	ldrb	r2, [r1, r2]
 8012e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e14:	7b7a      	ldrb	r2, [r7, #13]
 8012e16:	4908      	ldr	r1, [pc, #32]	; (8012e38 <UARTEx_SetNbDataToProcess+0x98>)
 8012e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e26:	bf00      	nop
 8012e28:	3714      	adds	r7, #20
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr
 8012e32:	bf00      	nop
 8012e34:	08017164 	.word	0x08017164
 8012e38:	0801716c 	.word	0x0801716c

08012e3c <__NVIC_SetPriority>:
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	4603      	mov	r3, r0
 8012e44:	6039      	str	r1, [r7, #0]
 8012e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	db0a      	blt.n	8012e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	490c      	ldr	r1, [pc, #48]	; (8012e88 <__NVIC_SetPriority+0x4c>)
 8012e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e5a:	0112      	lsls	r2, r2, #4
 8012e5c:	b2d2      	uxtb	r2, r2
 8012e5e:	440b      	add	r3, r1
 8012e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012e64:	e00a      	b.n	8012e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	4908      	ldr	r1, [pc, #32]	; (8012e8c <__NVIC_SetPriority+0x50>)
 8012e6c:	88fb      	ldrh	r3, [r7, #6]
 8012e6e:	f003 030f 	and.w	r3, r3, #15
 8012e72:	3b04      	subs	r3, #4
 8012e74:	0112      	lsls	r2, r2, #4
 8012e76:	b2d2      	uxtb	r2, r2
 8012e78:	440b      	add	r3, r1
 8012e7a:	761a      	strb	r2, [r3, #24]
}
 8012e7c:	bf00      	nop
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr
 8012e88:	e000e100 	.word	0xe000e100
 8012e8c:	e000ed00 	.word	0xe000ed00

08012e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012e90:	b580      	push	{r7, lr}
 8012e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012e94:	4b05      	ldr	r3, [pc, #20]	; (8012eac <SysTick_Handler+0x1c>)
 8012e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012e98:	f002 f958 	bl	801514c <xTaskGetSchedulerState>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d001      	beq.n	8012ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012ea2:	f002 ff79 	bl	8015d98 <xPortSysTickHandler>
  }
}
 8012ea6:	bf00      	nop
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	e000e010 	.word	0xe000e010

08012eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	f06f 0004 	mvn.w	r0, #4
 8012eba:	f7ff ffbf 	bl	8012e3c <__NVIC_SetPriority>
#endif
}
 8012ebe:	bf00      	nop
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012eca:	f3ef 8305 	mrs	r3, IPSR
 8012ece:	603b      	str	r3, [r7, #0]
  return(result);
 8012ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d003      	beq.n	8012ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012ed6:	f06f 0305 	mvn.w	r3, #5
 8012eda:	607b      	str	r3, [r7, #4]
 8012edc:	e00c      	b.n	8012ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012ede:	4b0a      	ldr	r3, [pc, #40]	; (8012f08 <osKernelInitialize+0x44>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d105      	bne.n	8012ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012ee6:	4b08      	ldr	r3, [pc, #32]	; (8012f08 <osKernelInitialize+0x44>)
 8012ee8:	2201      	movs	r2, #1
 8012eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012eec:	2300      	movs	r3, #0
 8012eee:	607b      	str	r3, [r7, #4]
 8012ef0:	e002      	b.n	8012ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ef8:	687b      	ldr	r3, [r7, #4]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr
 8012f06:	bf00      	nop
 8012f08:	24000890 	.word	0x24000890

08012f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f12:	f3ef 8305 	mrs	r3, IPSR
 8012f16:	603b      	str	r3, [r7, #0]
  return(result);
 8012f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d003      	beq.n	8012f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012f1e:	f06f 0305 	mvn.w	r3, #5
 8012f22:	607b      	str	r3, [r7, #4]
 8012f24:	e010      	b.n	8012f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012f26:	4b0b      	ldr	r3, [pc, #44]	; (8012f54 <osKernelStart+0x48>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d109      	bne.n	8012f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012f2e:	f7ff ffbf 	bl	8012eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012f32:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <osKernelStart+0x48>)
 8012f34:	2202      	movs	r2, #2
 8012f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012f38:	f001 fc0c 	bl	8014754 <vTaskStartScheduler>
      stat = osOK;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	607b      	str	r3, [r7, #4]
 8012f40:	e002      	b.n	8012f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012f48:	687b      	ldr	r3, [r7, #4]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	24000890 	.word	0x24000890

08012f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b08e      	sub	sp, #56	; 0x38
 8012f5c:	af04      	add	r7, sp, #16
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012f64:	2300      	movs	r3, #0
 8012f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f68:	f3ef 8305 	mrs	r3, IPSR
 8012f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8012f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d17e      	bne.n	8013072 <osThreadNew+0x11a>
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d07b      	beq.n	8013072 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012f7a:	2380      	movs	r3, #128	; 0x80
 8012f7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012f7e:	2318      	movs	r3, #24
 8012f80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012f82:	2300      	movs	r3, #0
 8012f84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d045      	beq.n	801301e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d002      	beq.n	8012fa0 <osThreadNew+0x48>
        name = attr->name;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	699b      	ldr	r3, [r3, #24]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	699b      	ldr	r3, [r3, #24]
 8012fac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d008      	beq.n	8012fc6 <osThreadNew+0x6e>
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	2b38      	cmp	r3, #56	; 0x38
 8012fb8:	d805      	bhi.n	8012fc6 <osThreadNew+0x6e>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	f003 0301 	and.w	r3, r3, #1
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <osThreadNew+0x72>
        return (NULL);
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	e054      	b.n	8013074 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d003      	beq.n	8012fda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	695b      	ldr	r3, [r3, #20]
 8012fd6:	089b      	lsrs	r3, r3, #2
 8012fd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d00e      	beq.n	8013000 <osThreadNew+0xa8>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	2b5b      	cmp	r3, #91	; 0x5b
 8012fe8:	d90a      	bls.n	8013000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d006      	beq.n	8013000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d002      	beq.n	8013000 <osThreadNew+0xa8>
        mem = 1;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	61bb      	str	r3, [r7, #24]
 8012ffe:	e010      	b.n	8013022 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	689b      	ldr	r3, [r3, #8]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10c      	bne.n	8013022 <osThreadNew+0xca>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d108      	bne.n	8013022 <osThreadNew+0xca>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	691b      	ldr	r3, [r3, #16]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d104      	bne.n	8013022 <osThreadNew+0xca>
          mem = 0;
 8013018:	2300      	movs	r3, #0
 801301a:	61bb      	str	r3, [r7, #24]
 801301c:	e001      	b.n	8013022 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801301e:	2300      	movs	r3, #0
 8013020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d110      	bne.n	801304a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013030:	9202      	str	r2, [sp, #8]
 8013032:	9301      	str	r3, [sp, #4]
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	9300      	str	r3, [sp, #0]
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	6a3a      	ldr	r2, [r7, #32]
 801303c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	f001 f9b2 	bl	80143a8 <xTaskCreateStatic>
 8013044:	4603      	mov	r3, r0
 8013046:	613b      	str	r3, [r7, #16]
 8013048:	e013      	b.n	8013072 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d110      	bne.n	8013072 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	b29a      	uxth	r2, r3
 8013054:	f107 0310 	add.w	r3, r7, #16
 8013058:	9301      	str	r3, [sp, #4]
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	9300      	str	r3, [sp, #0]
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f001 f9fd 	bl	8014462 <xTaskCreate>
 8013068:	4603      	mov	r3, r0
 801306a:	2b01      	cmp	r3, #1
 801306c:	d001      	beq.n	8013072 <osThreadNew+0x11a>
            hTask = NULL;
 801306e:	2300      	movs	r3, #0
 8013070:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013072:	693b      	ldr	r3, [r7, #16]
}
 8013074:	4618      	mov	r0, r3
 8013076:	3728      	adds	r7, #40	; 0x28
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013082:	f3ef 8305 	mrs	r3, IPSR
 8013086:	603b      	str	r3, [r7, #0]
  return(result);
 8013088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801308a:	2b00      	cmp	r3, #0
 801308c:	d003      	beq.n	8013096 <osThreadYield+0x1a>
    stat = osErrorISR;
 801308e:	f06f 0305 	mvn.w	r3, #5
 8013092:	607b      	str	r3, [r7, #4]
 8013094:	e009      	b.n	80130aa <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8013096:	2300      	movs	r3, #0
 8013098:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801309a:	4b07      	ldr	r3, [pc, #28]	; (80130b8 <osThreadYield+0x3c>)
 801309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130a0:	601a      	str	r2, [r3, #0]
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80130aa:	687b      	ldr	r3, [r7, #4]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	e000ed04 	.word	0xe000ed04

080130bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130c4:	f3ef 8305 	mrs	r3, IPSR
 80130c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80130ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d003      	beq.n	80130d8 <osDelay+0x1c>
    stat = osErrorISR;
 80130d0:	f06f 0305 	mvn.w	r3, #5
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	e007      	b.n	80130e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80130d8:	2300      	movs	r3, #0
 80130da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d002      	beq.n	80130e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f001 fb02 	bl	80146ec <vTaskDelay>
    }
  }

  return (stat);
 80130e8:	68fb      	ldr	r3, [r7, #12]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b086      	sub	sp, #24
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130fe:	f3ef 8305 	mrs	r3, IPSR
 8013102:	60fb      	str	r3, [r7, #12]
  return(result);
 8013104:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013106:	2b00      	cmp	r3, #0
 8013108:	d12d      	bne.n	8013166 <osEventFlagsNew+0x74>
    mem = -1;
 801310a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801310e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d015      	beq.n	8013142 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d006      	beq.n	801312c <osEventFlagsNew+0x3a>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	2b1f      	cmp	r3, #31
 8013124:	d902      	bls.n	801312c <osEventFlagsNew+0x3a>
        mem = 1;
 8013126:	2301      	movs	r3, #1
 8013128:	613b      	str	r3, [r7, #16]
 801312a:	e00c      	b.n	8013146 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d108      	bne.n	8013146 <osEventFlagsNew+0x54>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d104      	bne.n	8013146 <osEventFlagsNew+0x54>
          mem = 0;
 801313c:	2300      	movs	r3, #0
 801313e:	613b      	str	r3, [r7, #16]
 8013140:	e001      	b.n	8013146 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8013142:	2300      	movs	r3, #0
 8013144:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	2b01      	cmp	r3, #1
 801314a:	d106      	bne.n	801315a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	4618      	mov	r0, r3
 8013152:	f000 f91d 	bl	8013390 <xEventGroupCreateStatic>
 8013156:	6178      	str	r0, [r7, #20]
 8013158:	e005      	b.n	8013166 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d102      	bne.n	8013166 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013160:	f000 f94d 	bl	80133fe <xEventGroupCreate>
 8013164:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8013166:	697b      	ldr	r3, [r7, #20]
}
 8013168:	4618      	mov	r0, r3
 801316a:	3718      	adds	r7, #24
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d004      	beq.n	801318e <osEventFlagsSet+0x1e>
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801318a:	2b00      	cmp	r3, #0
 801318c:	d003      	beq.n	8013196 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801318e:	f06f 0303 	mvn.w	r3, #3
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e028      	b.n	80131e8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013196:	f3ef 8305 	mrs	r3, IPSR
 801319a:	60fb      	str	r3, [r7, #12]
  return(result);
 801319c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d01d      	beq.n	80131de <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80131a2:	2300      	movs	r3, #0
 80131a4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80131a6:	f107 0308 	add.w	r3, r7, #8
 80131aa:	461a      	mov	r2, r3
 80131ac:	6839      	ldr	r1, [r7, #0]
 80131ae:	6938      	ldr	r0, [r7, #16]
 80131b0:	f000 fb46 	bl	8013840 <xEventGroupSetBitsFromISR>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d103      	bne.n	80131c2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80131ba:	f06f 0302 	mvn.w	r3, #2
 80131be:	617b      	str	r3, [r7, #20]
 80131c0:	e012      	b.n	80131e8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00d      	beq.n	80131e8 <osEventFlagsSet+0x78>
 80131cc:	4b09      	ldr	r3, [pc, #36]	; (80131f4 <osEventFlagsSet+0x84>)
 80131ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131d2:	601a      	str	r2, [r3, #0]
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	f3bf 8f6f 	isb	sy
 80131dc:	e004      	b.n	80131e8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80131de:	6839      	ldr	r1, [r7, #0]
 80131e0:	6938      	ldr	r0, [r7, #16]
 80131e2:	f000 fa65 	bl	80136b0 <xEventGroupSetBits>
 80131e6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80131e8:	697b      	ldr	r3, [r7, #20]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3718      	adds	r7, #24
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	e000ed04 	.word	0xe000ed04

080131f8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <osEventFlagsClear+0x1e>
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013216:	f06f 0303 	mvn.w	r3, #3
 801321a:	617b      	str	r3, [r7, #20]
 801321c:	e019      	b.n	8013252 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801321e:	f3ef 8305 	mrs	r3, IPSR
 8013222:	60fb      	str	r3, [r7, #12]
  return(result);
 8013224:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00e      	beq.n	8013248 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801322a:	6938      	ldr	r0, [r7, #16]
 801322c:	f000 fa1c 	bl	8013668 <xEventGroupGetBitsFromISR>
 8013230:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8013232:	6839      	ldr	r1, [r7, #0]
 8013234:	6938      	ldr	r0, [r7, #16]
 8013236:	f000 fa03 	bl	8013640 <xEventGroupClearBitsFromISR>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d108      	bne.n	8013252 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8013240:	f06f 0302 	mvn.w	r3, #2
 8013244:	617b      	str	r3, [r7, #20]
 8013246:	e004      	b.n	8013252 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8013248:	6839      	ldr	r1, [r7, #0]
 801324a:	6938      	ldr	r0, [r7, #16]
 801324c:	f000 f9c0 	bl	80135d0 <xEventGroupClearBits>
 8013250:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013252:	697b      	ldr	r3, [r7, #20]
}
 8013254:	4618      	mov	r0, r3
 8013256:	3718      	adds	r7, #24
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801325c:	b580      	push	{r7, lr}
 801325e:	b08c      	sub	sp, #48	; 0x30
 8013260:	af02      	add	r7, sp, #8
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
 8013268:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801326e:	69bb      	ldr	r3, [r7, #24]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d004      	beq.n	801327e <osEventFlagsWait+0x22>
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801327a:	2b00      	cmp	r3, #0
 801327c:	d003      	beq.n	8013286 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801327e:	f06f 0303 	mvn.w	r3, #3
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	e04b      	b.n	801331e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013286:	f3ef 8305 	mrs	r3, IPSR
 801328a:	617b      	str	r3, [r7, #20]
  return(result);
 801328c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801328e:	2b00      	cmp	r3, #0
 8013290:	d003      	beq.n	801329a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013292:	f06f 0305 	mvn.w	r3, #5
 8013296:	61fb      	str	r3, [r7, #28]
 8013298:	e041      	b.n	801331e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f003 0301 	and.w	r3, r3, #1
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d002      	beq.n	80132aa <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80132a4:	2301      	movs	r3, #1
 80132a6:	627b      	str	r3, [r7, #36]	; 0x24
 80132a8:	e001      	b.n	80132ae <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80132aa:	2300      	movs	r3, #0
 80132ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f003 0302 	and.w	r3, r3, #2
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80132b8:	2300      	movs	r3, #0
 80132ba:	623b      	str	r3, [r7, #32]
 80132bc:	e001      	b.n	80132c2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80132be:	2301      	movs	r3, #1
 80132c0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	9300      	str	r3, [sp, #0]
 80132c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c8:	6a3a      	ldr	r2, [r7, #32]
 80132ca:	68b9      	ldr	r1, [r7, #8]
 80132cc:	69b8      	ldr	r0, [r7, #24]
 80132ce:	f000 f8b1 	bl	8013434 <xEventGroupWaitBits>
 80132d2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f003 0301 	and.w	r3, r3, #1
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d010      	beq.n	8013300 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80132de:	68ba      	ldr	r2, [r7, #8]
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	4013      	ands	r3, r2
 80132e4:	68ba      	ldr	r2, [r7, #8]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d019      	beq.n	801331e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80132f0:	f06f 0301 	mvn.w	r3, #1
 80132f4:	61fb      	str	r3, [r7, #28]
 80132f6:	e012      	b.n	801331e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80132f8:	f06f 0302 	mvn.w	r3, #2
 80132fc:	61fb      	str	r3, [r7, #28]
 80132fe:	e00e      	b.n	801331e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	4013      	ands	r3, r2
 8013306:	2b00      	cmp	r3, #0
 8013308:	d109      	bne.n	801331e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d003      	beq.n	8013318 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013310:	f06f 0301 	mvn.w	r3, #1
 8013314:	61fb      	str	r3, [r7, #28]
 8013316:	e002      	b.n	801331e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013318:	f06f 0302 	mvn.w	r3, #2
 801331c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801331e:	69fb      	ldr	r3, [r7, #28]
}
 8013320:	4618      	mov	r0, r3
 8013322:	3728      	adds	r7, #40	; 0x28
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}

08013328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	4a07      	ldr	r2, [pc, #28]	; (8013354 <vApplicationGetIdleTaskMemory+0x2c>)
 8013338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	4a06      	ldr	r2, [pc, #24]	; (8013358 <vApplicationGetIdleTaskMemory+0x30>)
 801333e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2280      	movs	r2, #128	; 0x80
 8013344:	601a      	str	r2, [r3, #0]
}
 8013346:	bf00      	nop
 8013348:	3714      	adds	r7, #20
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop
 8013354:	24000894 	.word	0x24000894
 8013358:	240008f0 	.word	0x240008f0

0801335c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	4a07      	ldr	r2, [pc, #28]	; (8013388 <vApplicationGetTimerTaskMemory+0x2c>)
 801336c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	4a06      	ldr	r2, [pc, #24]	; (801338c <vApplicationGetTimerTaskMemory+0x30>)
 8013372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f44f 7280 	mov.w	r2, #256	; 0x100
 801337a:	601a      	str	r2, [r3, #0]
}
 801337c:	bf00      	nop
 801337e:	3714      	adds	r7, #20
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr
 8013388:	24000af0 	.word	0x24000af0
 801338c:	24000b4c 	.word	0x24000b4c

08013390 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013390:	b580      	push	{r7, lr}
 8013392:	b086      	sub	sp, #24
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d10a      	bne.n	80133b4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a2:	f383 8811 	msr	BASEPRI, r3
 80133a6:	f3bf 8f6f 	isb	sy
 80133aa:	f3bf 8f4f 	dsb	sy
 80133ae:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80133b0:	bf00      	nop
 80133b2:	e7fe      	b.n	80133b2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80133b4:	2320      	movs	r3, #32
 80133b6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	2b20      	cmp	r3, #32
 80133bc:	d00a      	beq.n	80133d4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	60fb      	str	r3, [r7, #12]
}
 80133d0:	bf00      	nop
 80133d2:	e7fe      	b.n	80133d2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00a      	beq.n	80133f4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	2200      	movs	r2, #0
 80133e2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	3304      	adds	r3, #4
 80133e8:	4618      	mov	r0, r3
 80133ea:	f000 fa3d 	bl	8013868 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2201      	movs	r2, #1
 80133f2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80133f4:	697b      	ldr	r3, [r7, #20]
	}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3718      	adds	r7, #24
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b082      	sub	sp, #8
 8013402:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013404:	2020      	movs	r0, #32
 8013406:	f002 fd57 	bl	8015eb8 <pvPortMalloc>
 801340a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00a      	beq.n	8013428 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2200      	movs	r2, #0
 8013416:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3304      	adds	r3, #4
 801341c:	4618      	mov	r0, r3
 801341e:	f000 fa23 	bl	8013868 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2200      	movs	r2, #0
 8013426:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013428:	687b      	ldr	r3, [r7, #4]
	}
 801342a:	4618      	mov	r0, r3
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
	...

08013434 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b090      	sub	sp, #64	; 0x40
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
 8013440:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013446:	2300      	movs	r3, #0
 8013448:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801344a:	2300      	movs	r3, #0
 801344c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10a      	bne.n	801346a <xEventGroupWaitBits+0x36>
	__asm volatile
 8013454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	623b      	str	r3, [r7, #32]
}
 8013466:	bf00      	nop
 8013468:	e7fe      	b.n	8013468 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013470:	2b00      	cmp	r3, #0
 8013472:	d00a      	beq.n	801348a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013478:	f383 8811 	msr	BASEPRI, r3
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	f3bf 8f4f 	dsb	sy
 8013484:	61fb      	str	r3, [r7, #28]
}
 8013486:	bf00      	nop
 8013488:	e7fe      	b.n	8013488 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10a      	bne.n	80134a6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013494:	f383 8811 	msr	BASEPRI, r3
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	61bb      	str	r3, [r7, #24]
}
 80134a2:	bf00      	nop
 80134a4:	e7fe      	b.n	80134a4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134a6:	f001 fe51 	bl	801514c <xTaskGetSchedulerState>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d102      	bne.n	80134b6 <xEventGroupWaitBits+0x82>
 80134b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <xEventGroupWaitBits+0x86>
 80134b6:	2301      	movs	r3, #1
 80134b8:	e000      	b.n	80134bc <xEventGroupWaitBits+0x88>
 80134ba:	2300      	movs	r3, #0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d10a      	bne.n	80134d6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80134c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c4:	f383 8811 	msr	BASEPRI, r3
 80134c8:	f3bf 8f6f 	isb	sy
 80134cc:	f3bf 8f4f 	dsb	sy
 80134d0:	617b      	str	r3, [r7, #20]
}
 80134d2:	bf00      	nop
 80134d4:	e7fe      	b.n	80134d4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80134d6:	f001 f9a3 	bl	8014820 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80134da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	68b9      	ldr	r1, [r7, #8]
 80134e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134e6:	f000 f988 	bl	80137fa <prvTestWaitCondition>
 80134ea:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80134ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d00e      	beq.n	8013510 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80134f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80134f6:	2300      	movs	r3, #0
 80134f8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d028      	beq.n	8013552 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	43db      	mvns	r3, r3
 8013508:	401a      	ands	r2, r3
 801350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350c:	601a      	str	r2, [r3, #0]
 801350e:	e020      	b.n	8013552 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013512:	2b00      	cmp	r3, #0
 8013514:	d104      	bne.n	8013520 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013518:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801351a:	2301      	movs	r3, #1
 801351c:	633b      	str	r3, [r7, #48]	; 0x30
 801351e:	e018      	b.n	8013552 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d003      	beq.n	801352e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801352c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d003      	beq.n	801353c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013536:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801353a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353e:	1d18      	adds	r0, r3, #4
 8013540:	68ba      	ldr	r2, [r7, #8]
 8013542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013544:	4313      	orrs	r3, r2
 8013546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013548:	4619      	mov	r1, r3
 801354a:	f001 fb77 	bl	8014c3c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801354e:	2300      	movs	r3, #0
 8013550:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013552:	f001 f973 	bl	801483c <xTaskResumeAll>
 8013556:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801355a:	2b00      	cmp	r3, #0
 801355c:	d031      	beq.n	80135c2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	2b00      	cmp	r3, #0
 8013562:	d107      	bne.n	8013574 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013564:	4b19      	ldr	r3, [pc, #100]	; (80135cc <xEventGroupWaitBits+0x198>)
 8013566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801356a:	601a      	str	r2, [r3, #0]
 801356c:	f3bf 8f4f 	dsb	sy
 8013570:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013574:	f001 fe76 	bl	8015264 <uxTaskResetEventItemValue>
 8013578:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013580:	2b00      	cmp	r3, #0
 8013582:	d11a      	bne.n	80135ba <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013584:	f002 fb76 	bl	8015c74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	68b9      	ldr	r1, [r7, #8]
 8013592:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013594:	f000 f931 	bl	80137fa <prvTestWaitCondition>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d009      	beq.n	80135b2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d006      	beq.n	80135b2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80135a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	43db      	mvns	r3, r3
 80135ac:	401a      	ands	r2, r3
 80135ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80135b2:	2301      	movs	r3, #1
 80135b4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80135b6:	f002 fb8d 	bl	8015cd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80135ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80135c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80135c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3740      	adds	r7, #64	; 0x40
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	e000ed04 	.word	0xe000ed04

080135d0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d10a      	bne.n	80135fa <xEventGroupClearBits+0x2a>
	__asm volatile
 80135e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e8:	f383 8811 	msr	BASEPRI, r3
 80135ec:	f3bf 8f6f 	isb	sy
 80135f0:	f3bf 8f4f 	dsb	sy
 80135f4:	60fb      	str	r3, [r7, #12]
}
 80135f6:	bf00      	nop
 80135f8:	e7fe      	b.n	80135f8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00a      	beq.n	801361a <xEventGroupClearBits+0x4a>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	60bb      	str	r3, [r7, #8]
}
 8013616:	bf00      	nop
 8013618:	e7fe      	b.n	8013618 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801361a:	f002 fb2b 	bl	8015c74 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	43db      	mvns	r3, r3
 801362c:	401a      	ands	r2, r3
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013632:	f002 fb4f 	bl	8015cd4 <vPortExitCritical>

	return uxReturn;
 8013636:	693b      	ldr	r3, [r7, #16]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801364a:	2300      	movs	r3, #0
 801364c:	683a      	ldr	r2, [r7, #0]
 801364e:	6879      	ldr	r1, [r7, #4]
 8013650:	4804      	ldr	r0, [pc, #16]	; (8013664 <xEventGroupClearBitsFromISR+0x24>)
 8013652:	f002 f9c1 	bl	80159d8 <xTimerPendFunctionCallFromISR>
 8013656:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013658:	68fb      	ldr	r3, [r7, #12]
	}
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	080137e1 	.word	0x080137e1

08013668 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013668:	b480      	push	{r7}
 801366a:	b089      	sub	sp, #36	; 0x24
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013674:	f3ef 8211 	mrs	r2, BASEPRI
 8013678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367c:	f383 8811 	msr	BASEPRI, r3
 8013680:	f3bf 8f6f 	isb	sy
 8013684:	f3bf 8f4f 	dsb	sy
 8013688:	60fa      	str	r2, [r7, #12]
 801368a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801368c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801368e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	617b      	str	r3, [r7, #20]
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80136a0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80136a2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80136a4:	4618      	mov	r0, r3
 80136a6:	3724      	adds	r7, #36	; 0x24
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b08e      	sub	sp, #56	; 0x38
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80136ba:	2300      	movs	r3, #0
 80136bc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80136c2:	2300      	movs	r3, #0
 80136c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d10a      	bne.n	80136e2 <xEventGroupSetBits+0x32>
	__asm volatile
 80136cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d0:	f383 8811 	msr	BASEPRI, r3
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	f3bf 8f4f 	dsb	sy
 80136dc:	613b      	str	r3, [r7, #16]
}
 80136de:	bf00      	nop
 80136e0:	e7fe      	b.n	80136e0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d00a      	beq.n	8013702 <xEventGroupSetBits+0x52>
	__asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	60fb      	str	r3, [r7, #12]
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013704:	3304      	adds	r3, #4
 8013706:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370a:	3308      	adds	r3, #8
 801370c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801370e:	f001 f887 	bl	8014820 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	431a      	orrs	r2, r3
 8013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013722:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013724:	e03c      	b.n	80137a0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801373c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013744:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801374c:	2b00      	cmp	r3, #0
 801374e:	d108      	bne.n	8013762 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	681a      	ldr	r2, [r3, #0]
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	4013      	ands	r3, r2
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00b      	beq.n	8013774 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801375c:	2301      	movs	r3, #1
 801375e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013760:	e008      	b.n	8013774 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	4013      	ands	r3, r2
 801376a:	69ba      	ldr	r2, [r7, #24]
 801376c:	429a      	cmp	r2, r3
 801376e:	d101      	bne.n	8013774 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013770:	2301      	movs	r3, #1
 8013772:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013776:	2b00      	cmp	r3, #0
 8013778:	d010      	beq.n	801379c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013780:	2b00      	cmp	r3, #0
 8013782:	d003      	beq.n	801378c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	4313      	orrs	r3, r2
 801378a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013794:	4619      	mov	r1, r3
 8013796:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013798:	f001 fb1c 	bl	8014dd4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80137a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137a2:	6a3b      	ldr	r3, [r7, #32]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d1be      	bne.n	8013726 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80137a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	43db      	mvns	r3, r3
 80137b0:	401a      	ands	r2, r3
 80137b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80137b6:	f001 f841 	bl	801483c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80137ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137bc:	681b      	ldr	r3, [r3, #0]
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3738      	adds	r7, #56	; 0x38
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80137c6:	b580      	push	{r7, lr}
 80137c8:	b082      	sub	sp, #8
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
 80137ce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80137d0:	6839      	ldr	r1, [r7, #0]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff ff6c 	bl	80136b0 <xEventGroupSetBits>
}
 80137d8:	bf00      	nop
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80137ea:	6839      	ldr	r1, [r7, #0]
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7ff feef 	bl	80135d0 <xEventGroupClearBits>
}
 80137f2:	bf00      	nop
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80137fa:	b480      	push	{r7}
 80137fc:	b087      	sub	sp, #28
 80137fe:	af00      	add	r7, sp, #0
 8013800:	60f8      	str	r0, [r7, #12]
 8013802:	60b9      	str	r1, [r7, #8]
 8013804:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013806:	2300      	movs	r3, #0
 8013808:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d107      	bne.n	8013820 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013810:	68fa      	ldr	r2, [r7, #12]
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	4013      	ands	r3, r2
 8013816:	2b00      	cmp	r3, #0
 8013818:	d00a      	beq.n	8013830 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801381a:	2301      	movs	r3, #1
 801381c:	617b      	str	r3, [r7, #20]
 801381e:	e007      	b.n	8013830 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	4013      	ands	r3, r2
 8013826:	68ba      	ldr	r2, [r7, #8]
 8013828:	429a      	cmp	r2, r3
 801382a:	d101      	bne.n	8013830 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801382c:	2301      	movs	r3, #1
 801382e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013830:	697b      	ldr	r3, [r7, #20]
}
 8013832:	4618      	mov	r0, r3
 8013834:	371c      	adds	r7, #28
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr
	...

08013840 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	68ba      	ldr	r2, [r7, #8]
 8013850:	68f9      	ldr	r1, [r7, #12]
 8013852:	4804      	ldr	r0, [pc, #16]	; (8013864 <xEventGroupSetBitsFromISR+0x24>)
 8013854:	f002 f8c0 	bl	80159d8 <xTimerPendFunctionCallFromISR>
 8013858:	6178      	str	r0, [r7, #20]

		return xReturn;
 801385a:	697b      	ldr	r3, [r7, #20]
	}
 801385c:	4618      	mov	r0, r3
 801385e:	3718      	adds	r7, #24
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	080137c7 	.word	0x080137c7

08013868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f103 0208 	add.w	r2, r3, #8
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f103 0208 	add.w	r2, r3, #8
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f103 0208 	add.w	r2, r3, #8
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2200      	movs	r2, #0
 801389a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801389c:	bf00      	nop
 801389e:	370c      	adds	r7, #12
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr

080138a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80138a8:	b480      	push	{r7}
 80138aa:	b083      	sub	sp, #12
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80138b6:	bf00      	nop
 80138b8:	370c      	adds	r7, #12
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138c2:	b480      	push	{r7}
 80138c4:	b085      	sub	sp, #20
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	68fa      	ldr	r2, [r7, #12]
 80138d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	689a      	ldr	r2, [r3, #8]
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	683a      	ldr	r2, [r7, #0]
 80138ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	1c5a      	adds	r2, r3, #1
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	601a      	str	r2, [r3, #0]
}
 80138fe:	bf00      	nop
 8013900:	3714      	adds	r7, #20
 8013902:	46bd      	mov	sp, r7
 8013904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013908:	4770      	bx	lr

0801390a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801390a:	b480      	push	{r7}
 801390c:	b085      	sub	sp, #20
 801390e:	af00      	add	r7, sp, #0
 8013910:	6078      	str	r0, [r7, #4]
 8013912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013920:	d103      	bne.n	801392a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	691b      	ldr	r3, [r3, #16]
 8013926:	60fb      	str	r3, [r7, #12]
 8013928:	e00c      	b.n	8013944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	3308      	adds	r3, #8
 801392e:	60fb      	str	r3, [r7, #12]
 8013930:	e002      	b.n	8013938 <vListInsert+0x2e>
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	68ba      	ldr	r2, [r7, #8]
 8013940:	429a      	cmp	r2, r3
 8013942:	d2f6      	bcs.n	8013932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	683a      	ldr	r2, [r7, #0]
 8013952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	683a      	ldr	r2, [r7, #0]
 801395e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	1c5a      	adds	r2, r3, #1
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	601a      	str	r2, [r3, #0]
}
 8013970:	bf00      	nop
 8013972:	3714      	adds	r7, #20
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr

0801397c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801397c:	b480      	push	{r7}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	691b      	ldr	r3, [r3, #16]
 8013988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6892      	ldr	r2, [r2, #8]
 8013992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	6852      	ldr	r2, [r2, #4]
 801399c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d103      	bne.n	80139b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	689a      	ldr	r2, [r3, #8]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	1e5a      	subs	r2, r3, #1
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3714      	adds	r7, #20
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10a      	bne.n	80139fa <xQueueGenericReset+0x2a>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	60bb      	str	r3, [r7, #8]
}
 80139f6:	bf00      	nop
 80139f8:	e7fe      	b.n	80139f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80139fa:	f002 f93b 	bl	8015c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a06:	68f9      	ldr	r1, [r7, #12]
 8013a08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a0a:	fb01 f303 	mul.w	r3, r1, r3
 8013a0e:	441a      	add	r2, r3
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2200      	movs	r2, #0
 8013a18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	68f9      	ldr	r1, [r7, #12]
 8013a2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a30:	fb01 f303 	mul.w	r3, r1, r3
 8013a34:	441a      	add	r2, r3
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	22ff      	movs	r2, #255	; 0xff
 8013a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	22ff      	movs	r2, #255	; 0xff
 8013a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d114      	bne.n	8013a7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	691b      	ldr	r3, [r3, #16]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d01a      	beq.n	8013a8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	3310      	adds	r3, #16
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f001 f955 	bl	8014d0c <xTaskRemoveFromEventList>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d012      	beq.n	8013a8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a68:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <xQueueGenericReset+0xcc>)
 8013a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a6e:	601a      	str	r2, [r3, #0]
 8013a70:	f3bf 8f4f 	dsb	sy
 8013a74:	f3bf 8f6f 	isb	sy
 8013a78:	e009      	b.n	8013a8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	3310      	adds	r3, #16
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7ff fef2 	bl	8013868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	3324      	adds	r3, #36	; 0x24
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7ff feed 	bl	8013868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a8e:	f002 f921 	bl	8015cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a92:	2301      	movs	r3, #1
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	e000ed04 	.word	0xe000ed04

08013aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b08e      	sub	sp, #56	; 0x38
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d10a      	bne.n	8013aca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ac6:	bf00      	nop
 8013ac8:	e7fe      	b.n	8013ac8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10a      	bne.n	8013ae6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ae2:	bf00      	nop
 8013ae4:	e7fe      	b.n	8013ae4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d002      	beq.n	8013af2 <xQueueGenericCreateStatic+0x52>
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <xQueueGenericCreateStatic+0x56>
 8013af2:	2301      	movs	r3, #1
 8013af4:	e000      	b.n	8013af8 <xQueueGenericCreateStatic+0x58>
 8013af6:	2300      	movs	r3, #0
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10a      	bne.n	8013b12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b00:	f383 8811 	msr	BASEPRI, r3
 8013b04:	f3bf 8f6f 	isb	sy
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	623b      	str	r3, [r7, #32]
}
 8013b0e:	bf00      	nop
 8013b10:	e7fe      	b.n	8013b10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d102      	bne.n	8013b1e <xQueueGenericCreateStatic+0x7e>
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d101      	bne.n	8013b22 <xQueueGenericCreateStatic+0x82>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e000      	b.n	8013b24 <xQueueGenericCreateStatic+0x84>
 8013b22:	2300      	movs	r3, #0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d10a      	bne.n	8013b3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2c:	f383 8811 	msr	BASEPRI, r3
 8013b30:	f3bf 8f6f 	isb	sy
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	61fb      	str	r3, [r7, #28]
}
 8013b3a:	bf00      	nop
 8013b3c:	e7fe      	b.n	8013b3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013b3e:	2350      	movs	r3, #80	; 0x50
 8013b40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b50      	cmp	r3, #80	; 0x50
 8013b46:	d00a      	beq.n	8013b5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b4c:	f383 8811 	msr	BASEPRI, r3
 8013b50:	f3bf 8f6f 	isb	sy
 8013b54:	f3bf 8f4f 	dsb	sy
 8013b58:	61bb      	str	r3, [r7, #24]
}
 8013b5a:	bf00      	nop
 8013b5c:	e7fe      	b.n	8013b5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013b5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d00d      	beq.n	8013b86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	68b9      	ldr	r1, [r7, #8]
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f000 f805 	bl	8013b90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3730      	adds	r7, #48	; 0x30
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}

08013b90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d103      	bne.n	8013bac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	69ba      	ldr	r2, [r7, #24]
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	e002      	b.n	8013bb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013bac:	69bb      	ldr	r3, [r7, #24]
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013bbe:	2101      	movs	r1, #1
 8013bc0:	69b8      	ldr	r0, [r7, #24]
 8013bc2:	f7ff ff05 	bl	80139d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	78fa      	ldrb	r2, [r7, #3]
 8013bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013bce:	bf00      	nop
 8013bd0:	3710      	adds	r7, #16
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
	...

08013bd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b08e      	sub	sp, #56	; 0x38
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013be6:	2300      	movs	r3, #0
 8013be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d10a      	bne.n	8013c0a <xQueueGenericSend+0x32>
	__asm volatile
 8013bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf8:	f383 8811 	msr	BASEPRI, r3
 8013bfc:	f3bf 8f6f 	isb	sy
 8013c00:	f3bf 8f4f 	dsb	sy
 8013c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013c06:	bf00      	nop
 8013c08:	e7fe      	b.n	8013c08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d103      	bne.n	8013c18 <xQueueGenericSend+0x40>
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d101      	bne.n	8013c1c <xQueueGenericSend+0x44>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e000      	b.n	8013c1e <xQueueGenericSend+0x46>
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d10a      	bne.n	8013c38 <xQueueGenericSend+0x60>
	__asm volatile
 8013c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c26:	f383 8811 	msr	BASEPRI, r3
 8013c2a:	f3bf 8f6f 	isb	sy
 8013c2e:	f3bf 8f4f 	dsb	sy
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013c34:	bf00      	nop
 8013c36:	e7fe      	b.n	8013c36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	2b02      	cmp	r3, #2
 8013c3c:	d103      	bne.n	8013c46 <xQueueGenericSend+0x6e>
 8013c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d101      	bne.n	8013c4a <xQueueGenericSend+0x72>
 8013c46:	2301      	movs	r3, #1
 8013c48:	e000      	b.n	8013c4c <xQueueGenericSend+0x74>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d10a      	bne.n	8013c66 <xQueueGenericSend+0x8e>
	__asm volatile
 8013c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c54:	f383 8811 	msr	BASEPRI, r3
 8013c58:	f3bf 8f6f 	isb	sy
 8013c5c:	f3bf 8f4f 	dsb	sy
 8013c60:	623b      	str	r3, [r7, #32]
}
 8013c62:	bf00      	nop
 8013c64:	e7fe      	b.n	8013c64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c66:	f001 fa71 	bl	801514c <xTaskGetSchedulerState>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d102      	bne.n	8013c76 <xQueueGenericSend+0x9e>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d101      	bne.n	8013c7a <xQueueGenericSend+0xa2>
 8013c76:	2301      	movs	r3, #1
 8013c78:	e000      	b.n	8013c7c <xQueueGenericSend+0xa4>
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d10a      	bne.n	8013c96 <xQueueGenericSend+0xbe>
	__asm volatile
 8013c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c84:	f383 8811 	msr	BASEPRI, r3
 8013c88:	f3bf 8f6f 	isb	sy
 8013c8c:	f3bf 8f4f 	dsb	sy
 8013c90:	61fb      	str	r3, [r7, #28]
}
 8013c92:	bf00      	nop
 8013c94:	e7fe      	b.n	8013c94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c96:	f001 ffed 	bl	8015c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d302      	bcc.n	8013cac <xQueueGenericSend+0xd4>
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d129      	bne.n	8013d00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013cac:	683a      	ldr	r2, [r7, #0]
 8013cae:	68b9      	ldr	r1, [r7, #8]
 8013cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cb2:	f000 fa0b 	bl	80140cc <prvCopyDataToQueue>
 8013cb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d010      	beq.n	8013ce2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc2:	3324      	adds	r3, #36	; 0x24
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f001 f821 	bl	8014d0c <xTaskRemoveFromEventList>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d013      	beq.n	8013cf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013cd0:	4b3f      	ldr	r3, [pc, #252]	; (8013dd0 <xQueueGenericSend+0x1f8>)
 8013cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd6:	601a      	str	r2, [r3, #0]
 8013cd8:	f3bf 8f4f 	dsb	sy
 8013cdc:	f3bf 8f6f 	isb	sy
 8013ce0:	e00a      	b.n	8013cf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d007      	beq.n	8013cf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013ce8:	4b39      	ldr	r3, [pc, #228]	; (8013dd0 <xQueueGenericSend+0x1f8>)
 8013cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cee:	601a      	str	r2, [r3, #0]
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013cf8:	f001 ffec 	bl	8015cd4 <vPortExitCritical>
				return pdPASS;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e063      	b.n	8013dc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d103      	bne.n	8013d0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013d06:	f001 ffe5 	bl	8015cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e05c      	b.n	8013dc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d106      	bne.n	8013d22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d14:	f107 0314 	add.w	r3, r7, #20
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f001 f8bd 	bl	8014e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013d22:	f001 ffd7 	bl	8015cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013d26:	f000 fd7b 	bl	8014820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d2a:	f001 ffa3 	bl	8015c74 <vPortEnterCritical>
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d34:	b25b      	sxtb	r3, r3
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d3a:	d103      	bne.n	8013d44 <xQueueGenericSend+0x16c>
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d4a:	b25b      	sxtb	r3, r3
 8013d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d50:	d103      	bne.n	8013d5a <xQueueGenericSend+0x182>
 8013d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d54:	2200      	movs	r2, #0
 8013d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d5a:	f001 ffbb 	bl	8015cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d5e:	1d3a      	adds	r2, r7, #4
 8013d60:	f107 0314 	add.w	r3, r7, #20
 8013d64:	4611      	mov	r1, r2
 8013d66:	4618      	mov	r0, r3
 8013d68:	f001 f8ac 	bl	8014ec4 <xTaskCheckForTimeOut>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d124      	bne.n	8013dbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d74:	f000 faa2 	bl	80142bc <prvIsQueueFull>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d018      	beq.n	8013db0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	3310      	adds	r3, #16
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	4611      	mov	r1, r2
 8013d86:	4618      	mov	r0, r3
 8013d88:	f000 ff34 	bl	8014bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d8e:	f000 fa2d 	bl	80141ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013d92:	f000 fd53 	bl	801483c <xTaskResumeAll>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f47f af7c 	bne.w	8013c96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013d9e:	4b0c      	ldr	r3, [pc, #48]	; (8013dd0 <xQueueGenericSend+0x1f8>)
 8013da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da4:	601a      	str	r2, [r3, #0]
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	f3bf 8f6f 	isb	sy
 8013dae:	e772      	b.n	8013c96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013db2:	f000 fa1b 	bl	80141ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013db6:	f000 fd41 	bl	801483c <xTaskResumeAll>
 8013dba:	e76c      	b.n	8013c96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dbe:	f000 fa15 	bl	80141ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dc2:	f000 fd3b 	bl	801483c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3738      	adds	r7, #56	; 0x38
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	e000ed04 	.word	0xe000ed04

08013dd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b090      	sub	sp, #64	; 0x40
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
 8013de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10a      	bne.n	8013e02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df0:	f383 8811 	msr	BASEPRI, r3
 8013df4:	f3bf 8f6f 	isb	sy
 8013df8:	f3bf 8f4f 	dsb	sy
 8013dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013dfe:	bf00      	nop
 8013e00:	e7fe      	b.n	8013e00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d103      	bne.n	8013e10 <xQueueGenericSendFromISR+0x3c>
 8013e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <xQueueGenericSendFromISR+0x40>
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <xQueueGenericSendFromISR+0x42>
 8013e14:	2300      	movs	r3, #0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10a      	bne.n	8013e30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e2c:	bf00      	nop
 8013e2e:	e7fe      	b.n	8013e2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d103      	bne.n	8013e3e <xQueueGenericSendFromISR+0x6a>
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d101      	bne.n	8013e42 <xQueueGenericSendFromISR+0x6e>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e000      	b.n	8013e44 <xQueueGenericSendFromISR+0x70>
 8013e42:	2300      	movs	r3, #0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10a      	bne.n	8013e5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	623b      	str	r3, [r7, #32]
}
 8013e5a:	bf00      	nop
 8013e5c:	e7fe      	b.n	8013e5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e5e:	f001 ffeb 	bl	8015e38 <vPortValidateInterruptPriority>
	__asm volatile
 8013e62:	f3ef 8211 	mrs	r2, BASEPRI
 8013e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e6a:	f383 8811 	msr	BASEPRI, r3
 8013e6e:	f3bf 8f6f 	isb	sy
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	61fa      	str	r2, [r7, #28]
 8013e78:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8013e7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d302      	bcc.n	8013e90 <xQueueGenericSendFromISR+0xbc>
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b02      	cmp	r3, #2
 8013e8e:	d12f      	bne.n	8013ef0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ea0:	683a      	ldr	r2, [r7, #0]
 8013ea2:	68b9      	ldr	r1, [r7, #8]
 8013ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ea6:	f000 f911 	bl	80140cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013eaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eb2:	d112      	bne.n	8013eda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d016      	beq.n	8013eea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebe:	3324      	adds	r3, #36	; 0x24
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f000 ff23 	bl	8014d0c <xTaskRemoveFromEventList>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d00e      	beq.n	8013eea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00b      	beq.n	8013eea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	601a      	str	r2, [r3, #0]
 8013ed8:	e007      	b.n	8013eea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013eda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ede:	3301      	adds	r3, #1
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	b25a      	sxtb	r2, r3
 8013ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013eea:	2301      	movs	r3, #1
 8013eec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013eee:	e001      	b.n	8013ef4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ef6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	f383 8811 	msr	BASEPRI, r3
}
 8013efe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3740      	adds	r7, #64	; 0x40
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
	...

08013f0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b08c      	sub	sp, #48	; 0x30
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d10a      	bne.n	8013f3c <xQueueReceive+0x30>
	__asm volatile
 8013f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2a:	f383 8811 	msr	BASEPRI, r3
 8013f2e:	f3bf 8f6f 	isb	sy
 8013f32:	f3bf 8f4f 	dsb	sy
 8013f36:	623b      	str	r3, [r7, #32]
}
 8013f38:	bf00      	nop
 8013f3a:	e7fe      	b.n	8013f3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d103      	bne.n	8013f4a <xQueueReceive+0x3e>
 8013f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <xQueueReceive+0x42>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e000      	b.n	8013f50 <xQueueReceive+0x44>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d10a      	bne.n	8013f6a <xQueueReceive+0x5e>
	__asm volatile
 8013f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f58:	f383 8811 	msr	BASEPRI, r3
 8013f5c:	f3bf 8f6f 	isb	sy
 8013f60:	f3bf 8f4f 	dsb	sy
 8013f64:	61fb      	str	r3, [r7, #28]
}
 8013f66:	bf00      	nop
 8013f68:	e7fe      	b.n	8013f68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f6a:	f001 f8ef 	bl	801514c <xTaskGetSchedulerState>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d102      	bne.n	8013f7a <xQueueReceive+0x6e>
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <xQueueReceive+0x72>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <xQueueReceive+0x74>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d10a      	bne.n	8013f9a <xQueueReceive+0x8e>
	__asm volatile
 8013f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f88:	f383 8811 	msr	BASEPRI, r3
 8013f8c:	f3bf 8f6f 	isb	sy
 8013f90:	f3bf 8f4f 	dsb	sy
 8013f94:	61bb      	str	r3, [r7, #24]
}
 8013f96:	bf00      	nop
 8013f98:	e7fe      	b.n	8013f98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013f9a:	f001 fe6b 	bl	8015c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d01f      	beq.n	8013fea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013faa:	68b9      	ldr	r1, [r7, #8]
 8013fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fae:	f000 f8f7 	bl	80141a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb4:	1e5a      	subs	r2, r3, #1
 8013fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	691b      	ldr	r3, [r3, #16]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00f      	beq.n	8013fe2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc4:	3310      	adds	r3, #16
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f000 fea0 	bl	8014d0c <xTaskRemoveFromEventList>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d007      	beq.n	8013fe2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013fd2:	4b3d      	ldr	r3, [pc, #244]	; (80140c8 <xQueueReceive+0x1bc>)
 8013fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	f3bf 8f4f 	dsb	sy
 8013fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013fe2:	f001 fe77 	bl	8015cd4 <vPortExitCritical>
				return pdPASS;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e069      	b.n	80140be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d103      	bne.n	8013ff8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ff0:	f001 fe70 	bl	8015cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	e062      	b.n	80140be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ffe:	f107 0310 	add.w	r3, r7, #16
 8014002:	4618      	mov	r0, r3
 8014004:	f000 ff48 	bl	8014e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014008:	2301      	movs	r3, #1
 801400a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801400c:	f001 fe62 	bl	8015cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014010:	f000 fc06 	bl	8014820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014014:	f001 fe2e 	bl	8015c74 <vPortEnterCritical>
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801401e:	b25b      	sxtb	r3, r3
 8014020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014024:	d103      	bne.n	801402e <xQueueReceive+0x122>
 8014026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014028:	2200      	movs	r2, #0
 801402a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014034:	b25b      	sxtb	r3, r3
 8014036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801403a:	d103      	bne.n	8014044 <xQueueReceive+0x138>
 801403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403e:	2200      	movs	r2, #0
 8014040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014044:	f001 fe46 	bl	8015cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014048:	1d3a      	adds	r2, r7, #4
 801404a:	f107 0310 	add.w	r3, r7, #16
 801404e:	4611      	mov	r1, r2
 8014050:	4618      	mov	r0, r3
 8014052:	f000 ff37 	bl	8014ec4 <xTaskCheckForTimeOut>
 8014056:	4603      	mov	r3, r0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d123      	bne.n	80140a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801405c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801405e:	f000 f917 	bl	8014290 <prvIsQueueEmpty>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d017      	beq.n	8014098 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406a:	3324      	adds	r3, #36	; 0x24
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	4611      	mov	r1, r2
 8014070:	4618      	mov	r0, r3
 8014072:	f000 fdbf 	bl	8014bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014078:	f000 f8b8 	bl	80141ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801407c:	f000 fbde 	bl	801483c <xTaskResumeAll>
 8014080:	4603      	mov	r3, r0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d189      	bne.n	8013f9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014086:	4b10      	ldr	r3, [pc, #64]	; (80140c8 <xQueueReceive+0x1bc>)
 8014088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	e780      	b.n	8013f9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801409a:	f000 f8a7 	bl	80141ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801409e:	f000 fbcd 	bl	801483c <xTaskResumeAll>
 80140a2:	e77a      	b.n	8013f9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80140a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140a6:	f000 f8a1 	bl	80141ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140aa:	f000 fbc7 	bl	801483c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140b0:	f000 f8ee 	bl	8014290 <prvIsQueueEmpty>
 80140b4:	4603      	mov	r3, r0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f43f af6f 	beq.w	8013f9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80140bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3730      	adds	r7, #48	; 0x30
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	e000ed04 	.word	0xe000ed04

080140cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80140d8:	2300      	movs	r3, #0
 80140da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d10d      	bne.n	8014106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d14d      	bne.n	801418e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	689b      	ldr	r3, [r3, #8]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f001 f846 	bl	8015188 <xTaskPriorityDisinherit>
 80140fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	2200      	movs	r2, #0
 8014102:	609a      	str	r2, [r3, #8]
 8014104:	e043      	b.n	801418e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d119      	bne.n	8014140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6858      	ldr	r0, [r3, #4]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014114:	461a      	mov	r2, r3
 8014116:	68b9      	ldr	r1, [r7, #8]
 8014118:	f002 f8f2 	bl	8016300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	685a      	ldr	r2, [r3, #4]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014124:	441a      	add	r2, r3
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	685a      	ldr	r2, [r3, #4]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	429a      	cmp	r2, r3
 8014134:	d32b      	bcc.n	801418e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	605a      	str	r2, [r3, #4]
 801413e:	e026      	b.n	801418e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	68d8      	ldr	r0, [r3, #12]
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014148:	461a      	mov	r2, r3
 801414a:	68b9      	ldr	r1, [r7, #8]
 801414c:	f002 f8d8 	bl	8016300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	68da      	ldr	r2, [r3, #12]
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014158:	425b      	negs	r3, r3
 801415a:	441a      	add	r2, r3
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	68da      	ldr	r2, [r3, #12]
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	429a      	cmp	r2, r3
 801416a:	d207      	bcs.n	801417c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	689a      	ldr	r2, [r3, #8]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014174:	425b      	negs	r3, r3
 8014176:	441a      	add	r2, r3
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b02      	cmp	r3, #2
 8014180:	d105      	bne.n	801418e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d002      	beq.n	801418e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	3b01      	subs	r3, #1
 801418c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801418e:	693b      	ldr	r3, [r7, #16]
 8014190:	1c5a      	adds	r2, r3, #1
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014196:	697b      	ldr	r3, [r7, #20]
}
 8014198:	4618      	mov	r0, r3
 801419a:	3718      	adds	r7, #24
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d018      	beq.n	80141e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	68da      	ldr	r2, [r3, #12]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ba:	441a      	add	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	68da      	ldr	r2, [r3, #12]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d303      	bcc.n	80141d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	68d9      	ldr	r1, [r3, #12]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141dc:	461a      	mov	r2, r3
 80141de:	6838      	ldr	r0, [r7, #0]
 80141e0:	f002 f88e 	bl	8016300 <memcpy>
	}
}
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80141f4:	f001 fd3e 	bl	8015c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014200:	e011      	b.n	8014226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014206:	2b00      	cmp	r3, #0
 8014208:	d012      	beq.n	8014230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	3324      	adds	r3, #36	; 0x24
 801420e:	4618      	mov	r0, r3
 8014210:	f000 fd7c 	bl	8014d0c <xTaskRemoveFromEventList>
 8014214:	4603      	mov	r3, r0
 8014216:	2b00      	cmp	r3, #0
 8014218:	d001      	beq.n	801421e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801421a:	f000 feb5 	bl	8014f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801421e:	7bfb      	ldrb	r3, [r7, #15]
 8014220:	3b01      	subs	r3, #1
 8014222:	b2db      	uxtb	r3, r3
 8014224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801422a:	2b00      	cmp	r3, #0
 801422c:	dce9      	bgt.n	8014202 <prvUnlockQueue+0x16>
 801422e:	e000      	b.n	8014232 <prvUnlockQueue+0x46>
					break;
 8014230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	22ff      	movs	r2, #255	; 0xff
 8014236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801423a:	f001 fd4b 	bl	8015cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801423e:	f001 fd19 	bl	8015c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801424a:	e011      	b.n	8014270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	691b      	ldr	r3, [r3, #16]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d012      	beq.n	801427a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	3310      	adds	r3, #16
 8014258:	4618      	mov	r0, r3
 801425a:	f000 fd57 	bl	8014d0c <xTaskRemoveFromEventList>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014264:	f000 fe90 	bl	8014f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014268:	7bbb      	ldrb	r3, [r7, #14]
 801426a:	3b01      	subs	r3, #1
 801426c:	b2db      	uxtb	r3, r3
 801426e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014274:	2b00      	cmp	r3, #0
 8014276:	dce9      	bgt.n	801424c <prvUnlockQueue+0x60>
 8014278:	e000      	b.n	801427c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801427a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	22ff      	movs	r2, #255	; 0xff
 8014280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014284:	f001 fd26 	bl	8015cd4 <vPortExitCritical>
}
 8014288:	bf00      	nop
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014298:	f001 fcec 	bl	8015c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80142a4:	2301      	movs	r3, #1
 80142a6:	60fb      	str	r3, [r7, #12]
 80142a8:	e001      	b.n	80142ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80142aa:	2300      	movs	r3, #0
 80142ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80142ae:	f001 fd11 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 80142b2:	68fb      	ldr	r3, [r7, #12]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80142c4:	f001 fcd6 	bl	8015c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d102      	bne.n	80142da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80142d4:	2301      	movs	r3, #1
 80142d6:	60fb      	str	r3, [r7, #12]
 80142d8:	e001      	b.n	80142de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80142da:	2300      	movs	r3, #0
 80142dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80142de:	f001 fcf9 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 80142e2:	68fb      	ldr	r3, [r7, #12]
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	3710      	adds	r7, #16
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}

080142ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80142ec:	b480      	push	{r7}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80142f6:	2300      	movs	r3, #0
 80142f8:	60fb      	str	r3, [r7, #12]
 80142fa:	e014      	b.n	8014326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80142fc:	4a0f      	ldr	r2, [pc, #60]	; (801433c <vQueueAddToRegistry+0x50>)
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10b      	bne.n	8014320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014308:	490c      	ldr	r1, [pc, #48]	; (801433c <vQueueAddToRegistry+0x50>)
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	683a      	ldr	r2, [r7, #0]
 801430e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014312:	4a0a      	ldr	r2, [pc, #40]	; (801433c <vQueueAddToRegistry+0x50>)
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	4413      	add	r3, r2
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801431e:	e006      	b.n	801432e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	3301      	adds	r3, #1
 8014324:	60fb      	str	r3, [r7, #12]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2b07      	cmp	r3, #7
 801432a:	d9e7      	bls.n	80142fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801432c:	bf00      	nop
 801432e:	bf00      	nop
 8014330:	3714      	adds	r7, #20
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
 801433a:	bf00      	nop
 801433c:	24000f4c 	.word	0x24000f4c

08014340 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014340:	b580      	push	{r7, lr}
 8014342:	b086      	sub	sp, #24
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014350:	f001 fc90 	bl	8015c74 <vPortEnterCritical>
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801435a:	b25b      	sxtb	r3, r3
 801435c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014360:	d103      	bne.n	801436a <vQueueWaitForMessageRestricted+0x2a>
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	2200      	movs	r2, #0
 8014366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014370:	b25b      	sxtb	r3, r3
 8014372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014376:	d103      	bne.n	8014380 <vQueueWaitForMessageRestricted+0x40>
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	2200      	movs	r2, #0
 801437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014380:	f001 fca8 	bl	8015cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014388:	2b00      	cmp	r3, #0
 801438a:	d106      	bne.n	801439a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	3324      	adds	r3, #36	; 0x24
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	68b9      	ldr	r1, [r7, #8]
 8014394:	4618      	mov	r0, r3
 8014396:	f000 fc8d 	bl	8014cb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801439a:	6978      	ldr	r0, [r7, #20]
 801439c:	f7ff ff26 	bl	80141ec <prvUnlockQueue>
	}
 80143a0:	bf00      	nop
 80143a2:	3718      	adds	r7, #24
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b08e      	sub	sp, #56	; 0x38
 80143ac:	af04      	add	r7, sp, #16
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	607a      	str	r2, [r7, #4]
 80143b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80143b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d10a      	bne.n	80143d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80143bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c0:	f383 8811 	msr	BASEPRI, r3
 80143c4:	f3bf 8f6f 	isb	sy
 80143c8:	f3bf 8f4f 	dsb	sy
 80143cc:	623b      	str	r3, [r7, #32]
}
 80143ce:	bf00      	nop
 80143d0:	e7fe      	b.n	80143d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80143d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d10a      	bne.n	80143ee <xTaskCreateStatic+0x46>
	__asm volatile
 80143d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143dc:	f383 8811 	msr	BASEPRI, r3
 80143e0:	f3bf 8f6f 	isb	sy
 80143e4:	f3bf 8f4f 	dsb	sy
 80143e8:	61fb      	str	r3, [r7, #28]
}
 80143ea:	bf00      	nop
 80143ec:	e7fe      	b.n	80143ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80143ee:	235c      	movs	r3, #92	; 0x5c
 80143f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	2b5c      	cmp	r3, #92	; 0x5c
 80143f6:	d00a      	beq.n	801440e <xTaskCreateStatic+0x66>
	__asm volatile
 80143f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fc:	f383 8811 	msr	BASEPRI, r3
 8014400:	f3bf 8f6f 	isb	sy
 8014404:	f3bf 8f4f 	dsb	sy
 8014408:	61bb      	str	r3, [r7, #24]
}
 801440a:	bf00      	nop
 801440c:	e7fe      	b.n	801440c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801440e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014412:	2b00      	cmp	r3, #0
 8014414:	d01e      	beq.n	8014454 <xTaskCreateStatic+0xac>
 8014416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014418:	2b00      	cmp	r3, #0
 801441a:	d01b      	beq.n	8014454 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014424:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014428:	2202      	movs	r2, #2
 801442a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801442e:	2300      	movs	r3, #0
 8014430:	9303      	str	r3, [sp, #12]
 8014432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014434:	9302      	str	r3, [sp, #8]
 8014436:	f107 0314 	add.w	r3, r7, #20
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	68b9      	ldr	r1, [r7, #8]
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f000 f850 	bl	80144ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801444c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801444e:	f000 f8dd 	bl	801460c <prvAddNewTaskToReadyList>
 8014452:	e001      	b.n	8014458 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014454:	2300      	movs	r3, #0
 8014456:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014458:	697b      	ldr	r3, [r7, #20]
	}
 801445a:	4618      	mov	r0, r3
 801445c:	3728      	adds	r7, #40	; 0x28
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014462:	b580      	push	{r7, lr}
 8014464:	b08c      	sub	sp, #48	; 0x30
 8014466:	af04      	add	r7, sp, #16
 8014468:	60f8      	str	r0, [r7, #12]
 801446a:	60b9      	str	r1, [r7, #8]
 801446c:	603b      	str	r3, [r7, #0]
 801446e:	4613      	mov	r3, r2
 8014470:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014472:	88fb      	ldrh	r3, [r7, #6]
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	4618      	mov	r0, r3
 8014478:	f001 fd1e 	bl	8015eb8 <pvPortMalloc>
 801447c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00e      	beq.n	80144a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014484:	205c      	movs	r0, #92	; 0x5c
 8014486:	f001 fd17 	bl	8015eb8 <pvPortMalloc>
 801448a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d003      	beq.n	801449a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	697a      	ldr	r2, [r7, #20]
 8014496:	631a      	str	r2, [r3, #48]	; 0x30
 8014498:	e005      	b.n	80144a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801449a:	6978      	ldr	r0, [r7, #20]
 801449c:	f001 fdd8 	bl	8016050 <vPortFree>
 80144a0:	e001      	b.n	80144a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80144a2:	2300      	movs	r3, #0
 80144a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d017      	beq.n	80144dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	2200      	movs	r2, #0
 80144b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80144b4:	88fa      	ldrh	r2, [r7, #6]
 80144b6:	2300      	movs	r3, #0
 80144b8:	9303      	str	r3, [sp, #12]
 80144ba:	69fb      	ldr	r3, [r7, #28]
 80144bc:	9302      	str	r3, [sp, #8]
 80144be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c0:	9301      	str	r3, [sp, #4]
 80144c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	68b9      	ldr	r1, [r7, #8]
 80144ca:	68f8      	ldr	r0, [r7, #12]
 80144cc:	f000 f80e 	bl	80144ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144d0:	69f8      	ldr	r0, [r7, #28]
 80144d2:	f000 f89b 	bl	801460c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80144d6:	2301      	movs	r3, #1
 80144d8:	61bb      	str	r3, [r7, #24]
 80144da:	e002      	b.n	80144e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80144dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80144e2:	69bb      	ldr	r3, [r7, #24]
	}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3720      	adds	r7, #32
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b088      	sub	sp, #32
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
 80144f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	009b      	lsls	r3, r3, #2
 8014502:	461a      	mov	r2, r3
 8014504:	21a5      	movs	r1, #165	; 0xa5
 8014506:	f001 ff09 	bl	801631c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801450e:	6879      	ldr	r1, [r7, #4]
 8014510:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014514:	440b      	add	r3, r1
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	4413      	add	r3, r2
 801451a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801451c:	69bb      	ldr	r3, [r7, #24]
 801451e:	f023 0307 	bic.w	r3, r3, #7
 8014522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014524:	69bb      	ldr	r3, [r7, #24]
 8014526:	f003 0307 	and.w	r3, r3, #7
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00a      	beq.n	8014544 <prvInitialiseNewTask+0x58>
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	617b      	str	r3, [r7, #20]
}
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d01f      	beq.n	801458a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801454a:	2300      	movs	r3, #0
 801454c:	61fb      	str	r3, [r7, #28]
 801454e:	e012      	b.n	8014576 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	4413      	add	r3, r2
 8014556:	7819      	ldrb	r1, [r3, #0]
 8014558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801455a:	69fb      	ldr	r3, [r7, #28]
 801455c:	4413      	add	r3, r2
 801455e:	3334      	adds	r3, #52	; 0x34
 8014560:	460a      	mov	r2, r1
 8014562:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	69fb      	ldr	r3, [r7, #28]
 8014568:	4413      	add	r3, r2
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d006      	beq.n	801457e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	3301      	adds	r3, #1
 8014574:	61fb      	str	r3, [r7, #28]
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	2b0f      	cmp	r3, #15
 801457a:	d9e9      	bls.n	8014550 <prvInitialiseNewTask+0x64>
 801457c:	e000      	b.n	8014580 <prvInitialiseNewTask+0x94>
			{
				break;
 801457e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014582:	2200      	movs	r2, #0
 8014584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014588:	e003      	b.n	8014592 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458c:	2200      	movs	r2, #0
 801458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014594:	2b37      	cmp	r3, #55	; 0x37
 8014596:	d901      	bls.n	801459c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014598:	2337      	movs	r3, #55	; 0x37
 801459a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801459e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80145a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80145a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145aa:	2200      	movs	r2, #0
 80145ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80145ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b0:	3304      	adds	r3, #4
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7ff f978 	bl	80138a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80145b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ba:	3318      	adds	r3, #24
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff f973 	bl	80138a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80145ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80145d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	2200      	movs	r2, #0
 80145dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80145de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e0:	2200      	movs	r2, #0
 80145e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80145e6:	683a      	ldr	r2, [r7, #0]
 80145e8:	68f9      	ldr	r1, [r7, #12]
 80145ea:	69b8      	ldr	r0, [r7, #24]
 80145ec:	f001 fa14 	bl	8015a18 <pxPortInitialiseStack>
 80145f0:	4602      	mov	r2, r0
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d002      	beq.n	8014602 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80145fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014602:	bf00      	nop
 8014604:	3720      	adds	r7, #32
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014614:	f001 fb2e 	bl	8015c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014618:	4b2d      	ldr	r3, [pc, #180]	; (80146d0 <prvAddNewTaskToReadyList+0xc4>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	3301      	adds	r3, #1
 801461e:	4a2c      	ldr	r2, [pc, #176]	; (80146d0 <prvAddNewTaskToReadyList+0xc4>)
 8014620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014622:	4b2c      	ldr	r3, [pc, #176]	; (80146d4 <prvAddNewTaskToReadyList+0xc8>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d109      	bne.n	801463e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801462a:	4a2a      	ldr	r2, [pc, #168]	; (80146d4 <prvAddNewTaskToReadyList+0xc8>)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014630:	4b27      	ldr	r3, [pc, #156]	; (80146d0 <prvAddNewTaskToReadyList+0xc4>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d110      	bne.n	801465a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014638:	f000 fcca 	bl	8014fd0 <prvInitialiseTaskLists>
 801463c:	e00d      	b.n	801465a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801463e:	4b26      	ldr	r3, [pc, #152]	; (80146d8 <prvAddNewTaskToReadyList+0xcc>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d109      	bne.n	801465a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014646:	4b23      	ldr	r3, [pc, #140]	; (80146d4 <prvAddNewTaskToReadyList+0xc8>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014650:	429a      	cmp	r2, r3
 8014652:	d802      	bhi.n	801465a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014654:	4a1f      	ldr	r2, [pc, #124]	; (80146d4 <prvAddNewTaskToReadyList+0xc8>)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801465a:	4b20      	ldr	r3, [pc, #128]	; (80146dc <prvAddNewTaskToReadyList+0xd0>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	3301      	adds	r3, #1
 8014660:	4a1e      	ldr	r2, [pc, #120]	; (80146dc <prvAddNewTaskToReadyList+0xd0>)
 8014662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014664:	4b1d      	ldr	r3, [pc, #116]	; (80146dc <prvAddNewTaskToReadyList+0xd0>)
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014670:	4b1b      	ldr	r3, [pc, #108]	; (80146e0 <prvAddNewTaskToReadyList+0xd4>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	429a      	cmp	r2, r3
 8014676:	d903      	bls.n	8014680 <prvAddNewTaskToReadyList+0x74>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467c:	4a18      	ldr	r2, [pc, #96]	; (80146e0 <prvAddNewTaskToReadyList+0xd4>)
 801467e:	6013      	str	r3, [r2, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014684:	4613      	mov	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	4a15      	ldr	r2, [pc, #84]	; (80146e4 <prvAddNewTaskToReadyList+0xd8>)
 801468e:	441a      	add	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	3304      	adds	r3, #4
 8014694:	4619      	mov	r1, r3
 8014696:	4610      	mov	r0, r2
 8014698:	f7ff f913 	bl	80138c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801469c:	f001 fb1a 	bl	8015cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80146a0:	4b0d      	ldr	r3, [pc, #52]	; (80146d8 <prvAddNewTaskToReadyList+0xcc>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d00e      	beq.n	80146c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80146a8:	4b0a      	ldr	r3, [pc, #40]	; (80146d4 <prvAddNewTaskToReadyList+0xc8>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d207      	bcs.n	80146c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80146b6:	4b0c      	ldr	r3, [pc, #48]	; (80146e8 <prvAddNewTaskToReadyList+0xdc>)
 80146b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146bc:	601a      	str	r2, [r3, #0]
 80146be:	f3bf 8f4f 	dsb	sy
 80146c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146c6:	bf00      	nop
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	24001460 	.word	0x24001460
 80146d4:	24000f8c 	.word	0x24000f8c
 80146d8:	2400146c 	.word	0x2400146c
 80146dc:	2400147c 	.word	0x2400147c
 80146e0:	24001468 	.word	0x24001468
 80146e4:	24000f90 	.word	0x24000f90
 80146e8:	e000ed04 	.word	0xe000ed04

080146ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80146f4:	2300      	movs	r3, #0
 80146f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d017      	beq.n	801472e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80146fe:	4b13      	ldr	r3, [pc, #76]	; (801474c <vTaskDelay+0x60>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d00a      	beq.n	801471c <vTaskDelay+0x30>
	__asm volatile
 8014706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801470a:	f383 8811 	msr	BASEPRI, r3
 801470e:	f3bf 8f6f 	isb	sy
 8014712:	f3bf 8f4f 	dsb	sy
 8014716:	60bb      	str	r3, [r7, #8]
}
 8014718:	bf00      	nop
 801471a:	e7fe      	b.n	801471a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801471c:	f000 f880 	bl	8014820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014720:	2100      	movs	r1, #0
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 fdb6 	bl	8015294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014728:	f000 f888 	bl	801483c <xTaskResumeAll>
 801472c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d107      	bne.n	8014744 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014734:	4b06      	ldr	r3, [pc, #24]	; (8014750 <vTaskDelay+0x64>)
 8014736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801473a:	601a      	str	r2, [r3, #0]
 801473c:	f3bf 8f4f 	dsb	sy
 8014740:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014744:	bf00      	nop
 8014746:	3710      	adds	r7, #16
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	24001488 	.word	0x24001488
 8014750:	e000ed04 	.word	0xe000ed04

08014754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b08a      	sub	sp, #40	; 0x28
 8014758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801475a:	2300      	movs	r3, #0
 801475c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801475e:	2300      	movs	r3, #0
 8014760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014762:	463a      	mov	r2, r7
 8014764:	1d39      	adds	r1, r7, #4
 8014766:	f107 0308 	add.w	r3, r7, #8
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe fddc 	bl	8013328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014770:	6839      	ldr	r1, [r7, #0]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	68ba      	ldr	r2, [r7, #8]
 8014776:	9202      	str	r2, [sp, #8]
 8014778:	9301      	str	r3, [sp, #4]
 801477a:	2300      	movs	r3, #0
 801477c:	9300      	str	r3, [sp, #0]
 801477e:	2300      	movs	r3, #0
 8014780:	460a      	mov	r2, r1
 8014782:	4921      	ldr	r1, [pc, #132]	; (8014808 <vTaskStartScheduler+0xb4>)
 8014784:	4821      	ldr	r0, [pc, #132]	; (801480c <vTaskStartScheduler+0xb8>)
 8014786:	f7ff fe0f 	bl	80143a8 <xTaskCreateStatic>
 801478a:	4603      	mov	r3, r0
 801478c:	4a20      	ldr	r2, [pc, #128]	; (8014810 <vTaskStartScheduler+0xbc>)
 801478e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014790:	4b1f      	ldr	r3, [pc, #124]	; (8014810 <vTaskStartScheduler+0xbc>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d002      	beq.n	801479e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014798:	2301      	movs	r3, #1
 801479a:	617b      	str	r3, [r7, #20]
 801479c:	e001      	b.n	80147a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801479e:	2300      	movs	r3, #0
 80147a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d102      	bne.n	80147ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80147a8:	f000 fdc8 	bl	801533c <xTimerCreateTimerTask>
 80147ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d116      	bne.n	80147e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80147b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b8:	f383 8811 	msr	BASEPRI, r3
 80147bc:	f3bf 8f6f 	isb	sy
 80147c0:	f3bf 8f4f 	dsb	sy
 80147c4:	613b      	str	r3, [r7, #16]
}
 80147c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80147c8:	4b12      	ldr	r3, [pc, #72]	; (8014814 <vTaskStartScheduler+0xc0>)
 80147ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80147d0:	4b11      	ldr	r3, [pc, #68]	; (8014818 <vTaskStartScheduler+0xc4>)
 80147d2:	2201      	movs	r2, #1
 80147d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80147d6:	4b11      	ldr	r3, [pc, #68]	; (801481c <vTaskStartScheduler+0xc8>)
 80147d8:	2200      	movs	r2, #0
 80147da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147dc:	f001 f9a8 	bl	8015b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147e0:	e00e      	b.n	8014800 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147e8:	d10a      	bne.n	8014800 <vTaskStartScheduler+0xac>
	__asm volatile
 80147ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ee:	f383 8811 	msr	BASEPRI, r3
 80147f2:	f3bf 8f6f 	isb	sy
 80147f6:	f3bf 8f4f 	dsb	sy
 80147fa:	60fb      	str	r3, [r7, #12]
}
 80147fc:	bf00      	nop
 80147fe:	e7fe      	b.n	80147fe <vTaskStartScheduler+0xaa>
}
 8014800:	bf00      	nop
 8014802:	3718      	adds	r7, #24
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	08016f90 	.word	0x08016f90
 801480c:	08014fa1 	.word	0x08014fa1
 8014810:	24001484 	.word	0x24001484
 8014814:	24001480 	.word	0x24001480
 8014818:	2400146c 	.word	0x2400146c
 801481c:	24001464 	.word	0x24001464

08014820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014820:	b480      	push	{r7}
 8014822:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014824:	4b04      	ldr	r3, [pc, #16]	; (8014838 <vTaskSuspendAll+0x18>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	3301      	adds	r3, #1
 801482a:	4a03      	ldr	r2, [pc, #12]	; (8014838 <vTaskSuspendAll+0x18>)
 801482c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801482e:	bf00      	nop
 8014830:	46bd      	mov	sp, r7
 8014832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014836:	4770      	bx	lr
 8014838:	24001488 	.word	0x24001488

0801483c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014842:	2300      	movs	r3, #0
 8014844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014846:	2300      	movs	r3, #0
 8014848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801484a:	4b42      	ldr	r3, [pc, #264]	; (8014954 <xTaskResumeAll+0x118>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d10a      	bne.n	8014868 <xTaskResumeAll+0x2c>
	__asm volatile
 8014852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014856:	f383 8811 	msr	BASEPRI, r3
 801485a:	f3bf 8f6f 	isb	sy
 801485e:	f3bf 8f4f 	dsb	sy
 8014862:	603b      	str	r3, [r7, #0]
}
 8014864:	bf00      	nop
 8014866:	e7fe      	b.n	8014866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014868:	f001 fa04 	bl	8015c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801486c:	4b39      	ldr	r3, [pc, #228]	; (8014954 <xTaskResumeAll+0x118>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	3b01      	subs	r3, #1
 8014872:	4a38      	ldr	r2, [pc, #224]	; (8014954 <xTaskResumeAll+0x118>)
 8014874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014876:	4b37      	ldr	r3, [pc, #220]	; (8014954 <xTaskResumeAll+0x118>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d162      	bne.n	8014944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801487e:	4b36      	ldr	r3, [pc, #216]	; (8014958 <xTaskResumeAll+0x11c>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d05e      	beq.n	8014944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014886:	e02f      	b.n	80148e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014888:	4b34      	ldr	r3, [pc, #208]	; (801495c <xTaskResumeAll+0x120>)
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	3318      	adds	r3, #24
 8014894:	4618      	mov	r0, r3
 8014896:	f7ff f871 	bl	801397c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	3304      	adds	r3, #4
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff f86c 	bl	801397c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a8:	4b2d      	ldr	r3, [pc, #180]	; (8014960 <xTaskResumeAll+0x124>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d903      	bls.n	80148b8 <xTaskResumeAll+0x7c>
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b4:	4a2a      	ldr	r2, [pc, #168]	; (8014960 <xTaskResumeAll+0x124>)
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148bc:	4613      	mov	r3, r2
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	4413      	add	r3, r2
 80148c2:	009b      	lsls	r3, r3, #2
 80148c4:	4a27      	ldr	r2, [pc, #156]	; (8014964 <xTaskResumeAll+0x128>)
 80148c6:	441a      	add	r2, r3
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	3304      	adds	r3, #4
 80148cc:	4619      	mov	r1, r3
 80148ce:	4610      	mov	r0, r2
 80148d0:	f7fe fff7 	bl	80138c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148d8:	4b23      	ldr	r3, [pc, #140]	; (8014968 <xTaskResumeAll+0x12c>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148de:	429a      	cmp	r2, r3
 80148e0:	d302      	bcc.n	80148e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80148e2:	4b22      	ldr	r3, [pc, #136]	; (801496c <xTaskResumeAll+0x130>)
 80148e4:	2201      	movs	r2, #1
 80148e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148e8:	4b1c      	ldr	r3, [pc, #112]	; (801495c <xTaskResumeAll+0x120>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d1cb      	bne.n	8014888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d001      	beq.n	80148fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80148f6:	f000 fc09 	bl	801510c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80148fa:	4b1d      	ldr	r3, [pc, #116]	; (8014970 <xTaskResumeAll+0x134>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d010      	beq.n	8014928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014906:	f000 f847 	bl	8014998 <xTaskIncrementTick>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014910:	4b16      	ldr	r3, [pc, #88]	; (801496c <xTaskResumeAll+0x130>)
 8014912:	2201      	movs	r2, #1
 8014914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	3b01      	subs	r3, #1
 801491a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d1f1      	bne.n	8014906 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014922:	4b13      	ldr	r3, [pc, #76]	; (8014970 <xTaskResumeAll+0x134>)
 8014924:	2200      	movs	r2, #0
 8014926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014928:	4b10      	ldr	r3, [pc, #64]	; (801496c <xTaskResumeAll+0x130>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d009      	beq.n	8014944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014930:	2301      	movs	r3, #1
 8014932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014934:	4b0f      	ldr	r3, [pc, #60]	; (8014974 <xTaskResumeAll+0x138>)
 8014936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801493a:	601a      	str	r2, [r3, #0]
 801493c:	f3bf 8f4f 	dsb	sy
 8014940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014944:	f001 f9c6 	bl	8015cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8014948:	68bb      	ldr	r3, [r7, #8]
}
 801494a:	4618      	mov	r0, r3
 801494c:	3710      	adds	r7, #16
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	24001488 	.word	0x24001488
 8014958:	24001460 	.word	0x24001460
 801495c:	24001420 	.word	0x24001420
 8014960:	24001468 	.word	0x24001468
 8014964:	24000f90 	.word	0x24000f90
 8014968:	24000f8c 	.word	0x24000f8c
 801496c:	24001474 	.word	0x24001474
 8014970:	24001470 	.word	0x24001470
 8014974:	e000ed04 	.word	0xe000ed04

08014978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801497e:	4b05      	ldr	r3, [pc, #20]	; (8014994 <xTaskGetTickCount+0x1c>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014984:	687b      	ldr	r3, [r7, #4]
}
 8014986:	4618      	mov	r0, r3
 8014988:	370c      	adds	r7, #12
 801498a:	46bd      	mov	sp, r7
 801498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	24001464 	.word	0x24001464

08014998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801499e:	2300      	movs	r3, #0
 80149a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149a2:	4b53      	ldr	r3, [pc, #332]	; (8014af0 <xTaskIncrementTick+0x158>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	f040 8095 	bne.w	8014ad6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80149ac:	4b51      	ldr	r3, [pc, #324]	; (8014af4 <xTaskIncrementTick+0x15c>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	3301      	adds	r3, #1
 80149b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149b4:	4a4f      	ldr	r2, [pc, #316]	; (8014af4 <xTaskIncrementTick+0x15c>)
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d120      	bne.n	8014a02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80149c0:	4b4d      	ldr	r3, [pc, #308]	; (8014af8 <xTaskIncrementTick+0x160>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d00a      	beq.n	80149e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80149ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ce:	f383 8811 	msr	BASEPRI, r3
 80149d2:	f3bf 8f6f 	isb	sy
 80149d6:	f3bf 8f4f 	dsb	sy
 80149da:	603b      	str	r3, [r7, #0]
}
 80149dc:	bf00      	nop
 80149de:	e7fe      	b.n	80149de <xTaskIncrementTick+0x46>
 80149e0:	4b45      	ldr	r3, [pc, #276]	; (8014af8 <xTaskIncrementTick+0x160>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	60fb      	str	r3, [r7, #12]
 80149e6:	4b45      	ldr	r3, [pc, #276]	; (8014afc <xTaskIncrementTick+0x164>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4a43      	ldr	r2, [pc, #268]	; (8014af8 <xTaskIncrementTick+0x160>)
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	4a43      	ldr	r2, [pc, #268]	; (8014afc <xTaskIncrementTick+0x164>)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	6013      	str	r3, [r2, #0]
 80149f4:	4b42      	ldr	r3, [pc, #264]	; (8014b00 <xTaskIncrementTick+0x168>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	3301      	adds	r3, #1
 80149fa:	4a41      	ldr	r2, [pc, #260]	; (8014b00 <xTaskIncrementTick+0x168>)
 80149fc:	6013      	str	r3, [r2, #0]
 80149fe:	f000 fb85 	bl	801510c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a02:	4b40      	ldr	r3, [pc, #256]	; (8014b04 <xTaskIncrementTick+0x16c>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	693a      	ldr	r2, [r7, #16]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d349      	bcc.n	8014aa0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a0c:	4b3a      	ldr	r3, [pc, #232]	; (8014af8 <xTaskIncrementTick+0x160>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d104      	bne.n	8014a20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a16:	4b3b      	ldr	r3, [pc, #236]	; (8014b04 <xTaskIncrementTick+0x16c>)
 8014a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a1c:	601a      	str	r2, [r3, #0]
					break;
 8014a1e:	e03f      	b.n	8014aa0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a20:	4b35      	ldr	r3, [pc, #212]	; (8014af8 <xTaskIncrementTick+0x160>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	68db      	ldr	r3, [r3, #12]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a30:	693a      	ldr	r2, [r7, #16]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d203      	bcs.n	8014a40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a38:	4a32      	ldr	r2, [pc, #200]	; (8014b04 <xTaskIncrementTick+0x16c>)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a3e:	e02f      	b.n	8014aa0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	3304      	adds	r3, #4
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fe ff99 	bl	801397c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d004      	beq.n	8014a5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	3318      	adds	r3, #24
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fe ff90 	bl	801397c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a60:	4b29      	ldr	r3, [pc, #164]	; (8014b08 <xTaskIncrementTick+0x170>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d903      	bls.n	8014a70 <xTaskIncrementTick+0xd8>
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a6c:	4a26      	ldr	r2, [pc, #152]	; (8014b08 <xTaskIncrementTick+0x170>)
 8014a6e:	6013      	str	r3, [r2, #0]
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a74:	4613      	mov	r3, r2
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4413      	add	r3, r2
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	4a23      	ldr	r2, [pc, #140]	; (8014b0c <xTaskIncrementTick+0x174>)
 8014a7e:	441a      	add	r2, r3
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	3304      	adds	r3, #4
 8014a84:	4619      	mov	r1, r3
 8014a86:	4610      	mov	r0, r2
 8014a88:	f7fe ff1b 	bl	80138c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	4b1f      	ldr	r3, [pc, #124]	; (8014b10 <xTaskIncrementTick+0x178>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d3b8      	bcc.n	8014a0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a9e:	e7b5      	b.n	8014a0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014aa0:	4b1b      	ldr	r3, [pc, #108]	; (8014b10 <xTaskIncrementTick+0x178>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aa6:	4919      	ldr	r1, [pc, #100]	; (8014b0c <xTaskIncrementTick+0x174>)
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4413      	add	r3, r2
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	440b      	add	r3, r1
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d901      	bls.n	8014abc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014abc:	4b15      	ldr	r3, [pc, #84]	; (8014b14 <xTaskIncrementTick+0x17c>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d101      	bne.n	8014ac8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014ac4:	f7ec f948 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014ac8:	4b13      	ldr	r3, [pc, #76]	; (8014b18 <xTaskIncrementTick+0x180>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d009      	beq.n	8014ae4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	617b      	str	r3, [r7, #20]
 8014ad4:	e006      	b.n	8014ae4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014ad6:	4b0f      	ldr	r3, [pc, #60]	; (8014b14 <xTaskIncrementTick+0x17c>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	3301      	adds	r3, #1
 8014adc:	4a0d      	ldr	r2, [pc, #52]	; (8014b14 <xTaskIncrementTick+0x17c>)
 8014ade:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014ae0:	f7ec f93a 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014ae4:	697b      	ldr	r3, [r7, #20]
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3718      	adds	r7, #24
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	24001488 	.word	0x24001488
 8014af4:	24001464 	.word	0x24001464
 8014af8:	24001418 	.word	0x24001418
 8014afc:	2400141c 	.word	0x2400141c
 8014b00:	24001478 	.word	0x24001478
 8014b04:	24001480 	.word	0x24001480
 8014b08:	24001468 	.word	0x24001468
 8014b0c:	24000f90 	.word	0x24000f90
 8014b10:	24000f8c 	.word	0x24000f8c
 8014b14:	24001470 	.word	0x24001470
 8014b18:	24001474 	.word	0x24001474

08014b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b22:	4b2f      	ldr	r3, [pc, #188]	; (8014be0 <vTaskSwitchContext+0xc4>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d003      	beq.n	8014b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b2a:	4b2e      	ldr	r3, [pc, #184]	; (8014be4 <vTaskSwitchContext+0xc8>)
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b30:	e052      	b.n	8014bd8 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8014b32:	4b2c      	ldr	r3, [pc, #176]	; (8014be4 <vTaskSwitchContext+0xc8>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014b38:	4b2b      	ldr	r3, [pc, #172]	; (8014be8 <vTaskSwitchContext+0xcc>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	4b2a      	ldr	r3, [pc, #168]	; (8014be8 <vTaskSwitchContext+0xcc>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d808      	bhi.n	8014b5a <vTaskSwitchContext+0x3e>
 8014b48:	4b27      	ldr	r3, [pc, #156]	; (8014be8 <vTaskSwitchContext+0xcc>)
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	4b26      	ldr	r3, [pc, #152]	; (8014be8 <vTaskSwitchContext+0xcc>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	3334      	adds	r3, #52	; 0x34
 8014b52:	4619      	mov	r1, r3
 8014b54:	4610      	mov	r0, r2
 8014b56:	f7ec f90d 	bl	8000d74 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b5a:	4b24      	ldr	r3, [pc, #144]	; (8014bec <vTaskSwitchContext+0xd0>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	60fb      	str	r3, [r7, #12]
 8014b60:	e010      	b.n	8014b84 <vTaskSwitchContext+0x68>
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10a      	bne.n	8014b7e <vTaskSwitchContext+0x62>
	__asm volatile
 8014b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b6c:	f383 8811 	msr	BASEPRI, r3
 8014b70:	f3bf 8f6f 	isb	sy
 8014b74:	f3bf 8f4f 	dsb	sy
 8014b78:	607b      	str	r3, [r7, #4]
}
 8014b7a:	bf00      	nop
 8014b7c:	e7fe      	b.n	8014b7c <vTaskSwitchContext+0x60>
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	491a      	ldr	r1, [pc, #104]	; (8014bf0 <vTaskSwitchContext+0xd4>)
 8014b86:	68fa      	ldr	r2, [r7, #12]
 8014b88:	4613      	mov	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4413      	add	r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	440b      	add	r3, r1
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d0e4      	beq.n	8014b62 <vTaskSwitchContext+0x46>
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	4413      	add	r3, r2
 8014ba0:	009b      	lsls	r3, r3, #2
 8014ba2:	4a13      	ldr	r2, [pc, #76]	; (8014bf0 <vTaskSwitchContext+0xd4>)
 8014ba4:	4413      	add	r3, r2
 8014ba6:	60bb      	str	r3, [r7, #8]
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	605a      	str	r2, [r3, #4]
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	685a      	ldr	r2, [r3, #4]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	3308      	adds	r3, #8
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d104      	bne.n	8014bc8 <vTaskSwitchContext+0xac>
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	685a      	ldr	r2, [r3, #4]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	605a      	str	r2, [r3, #4]
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <vTaskSwitchContext+0xcc>)
 8014bd0:	6013      	str	r3, [r2, #0]
 8014bd2:	4a06      	ldr	r2, [pc, #24]	; (8014bec <vTaskSwitchContext+0xd0>)
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6013      	str	r3, [r2, #0]
}
 8014bd8:	bf00      	nop
 8014bda:	3710      	adds	r7, #16
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	24001488 	.word	0x24001488
 8014be4:	24001474 	.word	0x24001474
 8014be8:	24000f8c 	.word	0x24000f8c
 8014bec:	24001468 	.word	0x24001468
 8014bf0:	24000f90 	.word	0x24000f90

08014bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10a      	bne.n	8014c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c08:	f383 8811 	msr	BASEPRI, r3
 8014c0c:	f3bf 8f6f 	isb	sy
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	60fb      	str	r3, [r7, #12]
}
 8014c16:	bf00      	nop
 8014c18:	e7fe      	b.n	8014c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c1a:	4b07      	ldr	r3, [pc, #28]	; (8014c38 <vTaskPlaceOnEventList+0x44>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3318      	adds	r3, #24
 8014c20:	4619      	mov	r1, r3
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7fe fe71 	bl	801390a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c28:	2101      	movs	r1, #1
 8014c2a:	6838      	ldr	r0, [r7, #0]
 8014c2c:	f000 fb32 	bl	8015294 <prvAddCurrentTaskToDelayedList>
}
 8014c30:	bf00      	nop
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	24000f8c 	.word	0x24000f8c

08014c3c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d10a      	bne.n	8014c64 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c52:	f383 8811 	msr	BASEPRI, r3
 8014c56:	f3bf 8f6f 	isb	sy
 8014c5a:	f3bf 8f4f 	dsb	sy
 8014c5e:	617b      	str	r3, [r7, #20]
}
 8014c60:	bf00      	nop
 8014c62:	e7fe      	b.n	8014c62 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014c64:	4b11      	ldr	r3, [pc, #68]	; (8014cac <vTaskPlaceOnUnorderedEventList+0x70>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10a      	bne.n	8014c82 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	613b      	str	r3, [r7, #16]
}
 8014c7e:	bf00      	nop
 8014c80:	e7fe      	b.n	8014c80 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014c82:	4b0b      	ldr	r3, [pc, #44]	; (8014cb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c8c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c8e:	4b08      	ldr	r3, [pc, #32]	; (8014cb0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	3318      	adds	r3, #24
 8014c94:	4619      	mov	r1, r3
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f7fe fe13 	bl	80138c2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 faf8 	bl	8015294 <prvAddCurrentTaskToDelayedList>
}
 8014ca4:	bf00      	nop
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	24001488 	.word	0x24001488
 8014cb0:	24000f8c 	.word	0x24000f8c

08014cb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d10a      	bne.n	8014cdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cca:	f383 8811 	msr	BASEPRI, r3
 8014cce:	f3bf 8f6f 	isb	sy
 8014cd2:	f3bf 8f4f 	dsb	sy
 8014cd6:	617b      	str	r3, [r7, #20]
}
 8014cd8:	bf00      	nop
 8014cda:	e7fe      	b.n	8014cda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014cdc:	4b0a      	ldr	r3, [pc, #40]	; (8014d08 <vTaskPlaceOnEventListRestricted+0x54>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	3318      	adds	r3, #24
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	68f8      	ldr	r0, [r7, #12]
 8014ce6:	f7fe fdec 	bl	80138c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d002      	beq.n	8014cf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68b8      	ldr	r0, [r7, #8]
 8014cfa:	f000 facb 	bl	8015294 <prvAddCurrentTaskToDelayedList>
	}
 8014cfe:	bf00      	nop
 8014d00:	3718      	adds	r7, #24
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	24000f8c 	.word	0x24000f8c

08014d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b086      	sub	sp, #24
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d10a      	bne.n	8014d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d26:	f383 8811 	msr	BASEPRI, r3
 8014d2a:	f3bf 8f6f 	isb	sy
 8014d2e:	f3bf 8f4f 	dsb	sy
 8014d32:	60fb      	str	r3, [r7, #12]
}
 8014d34:	bf00      	nop
 8014d36:	e7fe      	b.n	8014d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	3318      	adds	r3, #24
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fe fe1d 	bl	801397c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d42:	4b1e      	ldr	r3, [pc, #120]	; (8014dbc <xTaskRemoveFromEventList+0xb0>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d11d      	bne.n	8014d86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe fe14 	bl	801397c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d58:	4b19      	ldr	r3, [pc, #100]	; (8014dc0 <xTaskRemoveFromEventList+0xb4>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d903      	bls.n	8014d68 <xTaskRemoveFromEventList+0x5c>
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d64:	4a16      	ldr	r2, [pc, #88]	; (8014dc0 <xTaskRemoveFromEventList+0xb4>)
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	4413      	add	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4a13      	ldr	r2, [pc, #76]	; (8014dc4 <xTaskRemoveFromEventList+0xb8>)
 8014d76:	441a      	add	r2, r3
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	3304      	adds	r3, #4
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	4610      	mov	r0, r2
 8014d80:	f7fe fd9f 	bl	80138c2 <vListInsertEnd>
 8014d84:	e005      	b.n	8014d92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	3318      	adds	r3, #24
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	480e      	ldr	r0, [pc, #56]	; (8014dc8 <xTaskRemoveFromEventList+0xbc>)
 8014d8e:	f7fe fd98 	bl	80138c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d96:	4b0d      	ldr	r3, [pc, #52]	; (8014dcc <xTaskRemoveFromEventList+0xc0>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d905      	bls.n	8014dac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014da0:	2301      	movs	r3, #1
 8014da2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014da4:	4b0a      	ldr	r3, [pc, #40]	; (8014dd0 <xTaskRemoveFromEventList+0xc4>)
 8014da6:	2201      	movs	r2, #1
 8014da8:	601a      	str	r2, [r3, #0]
 8014daa:	e001      	b.n	8014db0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014dac:	2300      	movs	r3, #0
 8014dae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014db0:	697b      	ldr	r3, [r7, #20]
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3718      	adds	r7, #24
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	24001488 	.word	0x24001488
 8014dc0:	24001468 	.word	0x24001468
 8014dc4:	24000f90 	.word	0x24000f90
 8014dc8:	24001420 	.word	0x24001420
 8014dcc:	24000f8c 	.word	0x24000f8c
 8014dd0:	24001474 	.word	0x24001474

08014dd4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b086      	sub	sp, #24
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014dde:	4b29      	ldr	r3, [pc, #164]	; (8014e84 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d10a      	bne.n	8014dfc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dea:	f383 8811 	msr	BASEPRI, r3
 8014dee:	f3bf 8f6f 	isb	sy
 8014df2:	f3bf 8f4f 	dsb	sy
 8014df6:	613b      	str	r3, [r7, #16]
}
 8014df8:	bf00      	nop
 8014dfa:	e7fe      	b.n	8014dfa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	68db      	ldr	r3, [r3, #12]
 8014e0a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d10a      	bne.n	8014e28 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	60fb      	str	r3, [r7, #12]
}
 8014e24:	bf00      	nop
 8014e26:	e7fe      	b.n	8014e26 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7fe fda7 	bl	801397c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	3304      	adds	r3, #4
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fe fda2 	bl	801397c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e3c:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d903      	bls.n	8014e4c <vTaskRemoveFromUnorderedEventList+0x78>
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e48:	4a0f      	ldr	r2, [pc, #60]	; (8014e88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e4a:	6013      	str	r3, [r2, #0]
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e50:	4613      	mov	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4413      	add	r3, r2
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	4a0c      	ldr	r2, [pc, #48]	; (8014e8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014e5a:	441a      	add	r2, r3
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	3304      	adds	r3, #4
 8014e60:	4619      	mov	r1, r3
 8014e62:	4610      	mov	r0, r2
 8014e64:	f7fe fd2d 	bl	80138c2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e6c:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d902      	bls.n	8014e7c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014e76:	4b07      	ldr	r3, [pc, #28]	; (8014e94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014e78:	2201      	movs	r2, #1
 8014e7a:	601a      	str	r2, [r3, #0]
	}
}
 8014e7c:	bf00      	nop
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	24001488 	.word	0x24001488
 8014e88:	24001468 	.word	0x24001468
 8014e8c:	24000f90 	.word	0x24000f90
 8014e90:	24000f8c 	.word	0x24000f8c
 8014e94:	24001474 	.word	0x24001474

08014e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ea0:	4b06      	ldr	r3, [pc, #24]	; (8014ebc <vTaskInternalSetTimeOutState+0x24>)
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014ea8:	4b05      	ldr	r3, [pc, #20]	; (8014ec0 <vTaskInternalSetTimeOutState+0x28>)
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	605a      	str	r2, [r3, #4]
}
 8014eb0:	bf00      	nop
 8014eb2:	370c      	adds	r7, #12
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr
 8014ebc:	24001478 	.word	0x24001478
 8014ec0:	24001464 	.word	0x24001464

08014ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b088      	sub	sp, #32
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d10a      	bne.n	8014eea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed8:	f383 8811 	msr	BASEPRI, r3
 8014edc:	f3bf 8f6f 	isb	sy
 8014ee0:	f3bf 8f4f 	dsb	sy
 8014ee4:	613b      	str	r3, [r7, #16]
}
 8014ee6:	bf00      	nop
 8014ee8:	e7fe      	b.n	8014ee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10a      	bne.n	8014f06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef4:	f383 8811 	msr	BASEPRI, r3
 8014ef8:	f3bf 8f6f 	isb	sy
 8014efc:	f3bf 8f4f 	dsb	sy
 8014f00:	60fb      	str	r3, [r7, #12]
}
 8014f02:	bf00      	nop
 8014f04:	e7fe      	b.n	8014f04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014f06:	f000 feb5 	bl	8015c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014f0a:	4b1d      	ldr	r3, [pc, #116]	; (8014f80 <xTaskCheckForTimeOut+0xbc>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	69ba      	ldr	r2, [r7, #24]
 8014f16:	1ad3      	subs	r3, r2, r3
 8014f18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f22:	d102      	bne.n	8014f2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014f24:	2300      	movs	r3, #0
 8014f26:	61fb      	str	r3, [r7, #28]
 8014f28:	e023      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	4b15      	ldr	r3, [pc, #84]	; (8014f84 <xTaskCheckForTimeOut+0xc0>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d007      	beq.n	8014f46 <xTaskCheckForTimeOut+0x82>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	69ba      	ldr	r2, [r7, #24]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d302      	bcc.n	8014f46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014f40:	2301      	movs	r3, #1
 8014f42:	61fb      	str	r3, [r7, #28]
 8014f44:	e015      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d20b      	bcs.n	8014f68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	1ad2      	subs	r2, r2, r3
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f7ff ff9b 	bl	8014e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014f62:	2300      	movs	r3, #0
 8014f64:	61fb      	str	r3, [r7, #28]
 8014f66:	e004      	b.n	8014f72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f6e:	2301      	movs	r3, #1
 8014f70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f72:	f000 feaf 	bl	8015cd4 <vPortExitCritical>

	return xReturn;
 8014f76:	69fb      	ldr	r3, [r7, #28]
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3720      	adds	r7, #32
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	24001464 	.word	0x24001464
 8014f84:	24001478 	.word	0x24001478

08014f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f88:	b480      	push	{r7}
 8014f8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f8c:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <vTaskMissedYield+0x14>)
 8014f8e:	2201      	movs	r2, #1
 8014f90:	601a      	str	r2, [r3, #0]
}
 8014f92:	bf00      	nop
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr
 8014f9c:	24001474 	.word	0x24001474

08014fa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014fa8:	f000 f852 	bl	8015050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014fac:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <prvIdleTask+0x28>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d9f9      	bls.n	8014fa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014fb4:	4b05      	ldr	r3, [pc, #20]	; (8014fcc <prvIdleTask+0x2c>)
 8014fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fba:	601a      	str	r2, [r3, #0]
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014fc4:	e7f0      	b.n	8014fa8 <prvIdleTask+0x8>
 8014fc6:	bf00      	nop
 8014fc8:	24000f90 	.word	0x24000f90
 8014fcc:	e000ed04 	.word	0xe000ed04

08014fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	607b      	str	r3, [r7, #4]
 8014fda:	e00c      	b.n	8014ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	4613      	mov	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	4413      	add	r3, r2
 8014fe4:	009b      	lsls	r3, r3, #2
 8014fe6:	4a12      	ldr	r2, [pc, #72]	; (8015030 <prvInitialiseTaskLists+0x60>)
 8014fe8:	4413      	add	r3, r2
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fe fc3c 	bl	8013868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	607b      	str	r3, [r7, #4]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2b37      	cmp	r3, #55	; 0x37
 8014ffa:	d9ef      	bls.n	8014fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ffc:	480d      	ldr	r0, [pc, #52]	; (8015034 <prvInitialiseTaskLists+0x64>)
 8014ffe:	f7fe fc33 	bl	8013868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015002:	480d      	ldr	r0, [pc, #52]	; (8015038 <prvInitialiseTaskLists+0x68>)
 8015004:	f7fe fc30 	bl	8013868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015008:	480c      	ldr	r0, [pc, #48]	; (801503c <prvInitialiseTaskLists+0x6c>)
 801500a:	f7fe fc2d 	bl	8013868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801500e:	480c      	ldr	r0, [pc, #48]	; (8015040 <prvInitialiseTaskLists+0x70>)
 8015010:	f7fe fc2a 	bl	8013868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015014:	480b      	ldr	r0, [pc, #44]	; (8015044 <prvInitialiseTaskLists+0x74>)
 8015016:	f7fe fc27 	bl	8013868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801501a:	4b0b      	ldr	r3, [pc, #44]	; (8015048 <prvInitialiseTaskLists+0x78>)
 801501c:	4a05      	ldr	r2, [pc, #20]	; (8015034 <prvInitialiseTaskLists+0x64>)
 801501e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015020:	4b0a      	ldr	r3, [pc, #40]	; (801504c <prvInitialiseTaskLists+0x7c>)
 8015022:	4a05      	ldr	r2, [pc, #20]	; (8015038 <prvInitialiseTaskLists+0x68>)
 8015024:	601a      	str	r2, [r3, #0]
}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	24000f90 	.word	0x24000f90
 8015034:	240013f0 	.word	0x240013f0
 8015038:	24001404 	.word	0x24001404
 801503c:	24001420 	.word	0x24001420
 8015040:	24001434 	.word	0x24001434
 8015044:	2400144c 	.word	0x2400144c
 8015048:	24001418 	.word	0x24001418
 801504c:	2400141c 	.word	0x2400141c

08015050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015056:	e019      	b.n	801508c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015058:	f000 fe0c 	bl	8015c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801505c:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <prvCheckTasksWaitingTermination+0x50>)
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3304      	adds	r3, #4
 8015068:	4618      	mov	r0, r3
 801506a:	f7fe fc87 	bl	801397c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801506e:	4b0d      	ldr	r3, [pc, #52]	; (80150a4 <prvCheckTasksWaitingTermination+0x54>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3b01      	subs	r3, #1
 8015074:	4a0b      	ldr	r2, [pc, #44]	; (80150a4 <prvCheckTasksWaitingTermination+0x54>)
 8015076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015078:	4b0b      	ldr	r3, [pc, #44]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	3b01      	subs	r3, #1
 801507e:	4a0a      	ldr	r2, [pc, #40]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 8015080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015082:	f000 fe27 	bl	8015cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 f810 	bl	80150ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801508c:	4b06      	ldr	r3, [pc, #24]	; (80150a8 <prvCheckTasksWaitingTermination+0x58>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d1e1      	bne.n	8015058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015094:	bf00      	nop
 8015096:	bf00      	nop
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	24001434 	.word	0x24001434
 80150a4:	24001460 	.word	0x24001460
 80150a8:	24001448 	.word	0x24001448

080150ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d108      	bne.n	80150d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150c2:	4618      	mov	r0, r3
 80150c4:	f000 ffc4 	bl	8016050 <vPortFree>
				vPortFree( pxTCB );
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 ffc1 	bl	8016050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80150ce:	e018      	b.n	8015102 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d103      	bne.n	80150e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f000 ffb8 	bl	8016050 <vPortFree>
	}
 80150e0:	e00f      	b.n	8015102 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150e8:	2b02      	cmp	r3, #2
 80150ea:	d00a      	beq.n	8015102 <prvDeleteTCB+0x56>
	__asm volatile
 80150ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f0:	f383 8811 	msr	BASEPRI, r3
 80150f4:	f3bf 8f6f 	isb	sy
 80150f8:	f3bf 8f4f 	dsb	sy
 80150fc:	60fb      	str	r3, [r7, #12]
}
 80150fe:	bf00      	nop
 8015100:	e7fe      	b.n	8015100 <prvDeleteTCB+0x54>
	}
 8015102:	bf00      	nop
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
	...

0801510c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801510c:	b480      	push	{r7}
 801510e:	b083      	sub	sp, #12
 8015110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015112:	4b0c      	ldr	r3, [pc, #48]	; (8015144 <prvResetNextTaskUnblockTime+0x38>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d104      	bne.n	8015126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801511c:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <prvResetNextTaskUnblockTime+0x3c>)
 801511e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015124:	e008      	b.n	8015138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015126:	4b07      	ldr	r3, [pc, #28]	; (8015144 <prvResetNextTaskUnblockTime+0x38>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	68db      	ldr	r3, [r3, #12]
 801512e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	4a04      	ldr	r2, [pc, #16]	; (8015148 <prvResetNextTaskUnblockTime+0x3c>)
 8015136:	6013      	str	r3, [r2, #0]
}
 8015138:	bf00      	nop
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr
 8015144:	24001418 	.word	0x24001418
 8015148:	24001480 	.word	0x24001480

0801514c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801514c:	b480      	push	{r7}
 801514e:	b083      	sub	sp, #12
 8015150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015152:	4b0b      	ldr	r3, [pc, #44]	; (8015180 <xTaskGetSchedulerState+0x34>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801515a:	2301      	movs	r3, #1
 801515c:	607b      	str	r3, [r7, #4]
 801515e:	e008      	b.n	8015172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015160:	4b08      	ldr	r3, [pc, #32]	; (8015184 <xTaskGetSchedulerState+0x38>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015168:	2302      	movs	r3, #2
 801516a:	607b      	str	r3, [r7, #4]
 801516c:	e001      	b.n	8015172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801516e:	2300      	movs	r3, #0
 8015170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015172:	687b      	ldr	r3, [r7, #4]
	}
 8015174:	4618      	mov	r0, r3
 8015176:	370c      	adds	r7, #12
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr
 8015180:	2400146c 	.word	0x2400146c
 8015184:	24001488 	.word	0x24001488

08015188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015188:	b580      	push	{r7, lr}
 801518a:	b086      	sub	sp, #24
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015194:	2300      	movs	r3, #0
 8015196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d056      	beq.n	801524c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801519e:	4b2e      	ldr	r3, [pc, #184]	; (8015258 <xTaskPriorityDisinherit+0xd0>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	693a      	ldr	r2, [r7, #16]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d00a      	beq.n	80151be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80151a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ac:	f383 8811 	msr	BASEPRI, r3
 80151b0:	f3bf 8f6f 	isb	sy
 80151b4:	f3bf 8f4f 	dsb	sy
 80151b8:	60fb      	str	r3, [r7, #12]
}
 80151ba:	bf00      	nop
 80151bc:	e7fe      	b.n	80151bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d10a      	bne.n	80151dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80151c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ca:	f383 8811 	msr	BASEPRI, r3
 80151ce:	f3bf 8f6f 	isb	sy
 80151d2:	f3bf 8f4f 	dsb	sy
 80151d6:	60bb      	str	r3, [r7, #8]
}
 80151d8:	bf00      	nop
 80151da:	e7fe      	b.n	80151da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151e0:	1e5a      	subs	r2, r3, #1
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d02c      	beq.n	801524c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d128      	bne.n	801524c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	3304      	adds	r3, #4
 80151fe:	4618      	mov	r0, r3
 8015200:	f7fe fbbc 	bl	801397c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801521c:	4b0f      	ldr	r3, [pc, #60]	; (801525c <xTaskPriorityDisinherit+0xd4>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	429a      	cmp	r2, r3
 8015222:	d903      	bls.n	801522c <xTaskPriorityDisinherit+0xa4>
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015228:	4a0c      	ldr	r2, [pc, #48]	; (801525c <xTaskPriorityDisinherit+0xd4>)
 801522a:	6013      	str	r3, [r2, #0]
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015230:	4613      	mov	r3, r2
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	4413      	add	r3, r2
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	4a09      	ldr	r2, [pc, #36]	; (8015260 <xTaskPriorityDisinherit+0xd8>)
 801523a:	441a      	add	r2, r3
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	3304      	adds	r3, #4
 8015240:	4619      	mov	r1, r3
 8015242:	4610      	mov	r0, r2
 8015244:	f7fe fb3d 	bl	80138c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015248:	2301      	movs	r3, #1
 801524a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801524c:	697b      	ldr	r3, [r7, #20]
	}
 801524e:	4618      	mov	r0, r3
 8015250:	3718      	adds	r7, #24
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	24000f8c 	.word	0x24000f8c
 801525c:	24001468 	.word	0x24001468
 8015260:	24000f90 	.word	0x24000f90

08015264 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801526a:	4b09      	ldr	r3, [pc, #36]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	699b      	ldr	r3, [r3, #24]
 8015270:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015272:	4b07      	ldr	r3, [pc, #28]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015278:	4b05      	ldr	r3, [pc, #20]	; (8015290 <uxTaskResetEventItemValue+0x2c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015280:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015282:	687b      	ldr	r3, [r7, #4]
}
 8015284:	4618      	mov	r0, r3
 8015286:	370c      	adds	r7, #12
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr
 8015290:	24000f8c 	.word	0x24000f8c

08015294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b084      	sub	sp, #16
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801529e:	4b21      	ldr	r3, [pc, #132]	; (8015324 <prvAddCurrentTaskToDelayedList+0x90>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152a4:	4b20      	ldr	r3, [pc, #128]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	3304      	adds	r3, #4
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7fe fb66 	bl	801397c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152b6:	d10a      	bne.n	80152ce <prvAddCurrentTaskToDelayedList+0x3a>
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d007      	beq.n	80152ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152be:	4b1a      	ldr	r3, [pc, #104]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	4619      	mov	r1, r3
 80152c6:	4819      	ldr	r0, [pc, #100]	; (801532c <prvAddCurrentTaskToDelayedList+0x98>)
 80152c8:	f7fe fafb 	bl	80138c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80152cc:	e026      	b.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4413      	add	r3, r2
 80152d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80152d6:	4b14      	ldr	r3, [pc, #80]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	68ba      	ldr	r2, [r7, #8]
 80152dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80152de:	68ba      	ldr	r2, [r7, #8]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d209      	bcs.n	80152fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152e6:	4b12      	ldr	r3, [pc, #72]	; (8015330 <prvAddCurrentTaskToDelayedList+0x9c>)
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	4b0f      	ldr	r3, [pc, #60]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3304      	adds	r3, #4
 80152f0:	4619      	mov	r1, r3
 80152f2:	4610      	mov	r0, r2
 80152f4:	f7fe fb09 	bl	801390a <vListInsert>
}
 80152f8:	e010      	b.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152fa:	4b0e      	ldr	r3, [pc, #56]	; (8015334 <prvAddCurrentTaskToDelayedList+0xa0>)
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	4b0a      	ldr	r3, [pc, #40]	; (8015328 <prvAddCurrentTaskToDelayedList+0x94>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	3304      	adds	r3, #4
 8015304:	4619      	mov	r1, r3
 8015306:	4610      	mov	r0, r2
 8015308:	f7fe faff 	bl	801390a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801530c:	4b0a      	ldr	r3, [pc, #40]	; (8015338 <prvAddCurrentTaskToDelayedList+0xa4>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	68ba      	ldr	r2, [r7, #8]
 8015312:	429a      	cmp	r2, r3
 8015314:	d202      	bcs.n	801531c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015316:	4a08      	ldr	r2, [pc, #32]	; (8015338 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	6013      	str	r3, [r2, #0]
}
 801531c:	bf00      	nop
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	24001464 	.word	0x24001464
 8015328:	24000f8c 	.word	0x24000f8c
 801532c:	2400144c 	.word	0x2400144c
 8015330:	2400141c 	.word	0x2400141c
 8015334:	24001418 	.word	0x24001418
 8015338:	24001480 	.word	0x24001480

0801533c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b08a      	sub	sp, #40	; 0x28
 8015340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015342:	2300      	movs	r3, #0
 8015344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015346:	f000 fb07 	bl	8015958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801534a:	4b1c      	ldr	r3, [pc, #112]	; (80153bc <xTimerCreateTimerTask+0x80>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d021      	beq.n	8015396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015352:	2300      	movs	r3, #0
 8015354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015356:	2300      	movs	r3, #0
 8015358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801535a:	1d3a      	adds	r2, r7, #4
 801535c:	f107 0108 	add.w	r1, r7, #8
 8015360:	f107 030c 	add.w	r3, r7, #12
 8015364:	4618      	mov	r0, r3
 8015366:	f7fd fff9 	bl	801335c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801536a:	6879      	ldr	r1, [r7, #4]
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	68fa      	ldr	r2, [r7, #12]
 8015370:	9202      	str	r2, [sp, #8]
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	2302      	movs	r3, #2
 8015376:	9300      	str	r3, [sp, #0]
 8015378:	2300      	movs	r3, #0
 801537a:	460a      	mov	r2, r1
 801537c:	4910      	ldr	r1, [pc, #64]	; (80153c0 <xTimerCreateTimerTask+0x84>)
 801537e:	4811      	ldr	r0, [pc, #68]	; (80153c4 <xTimerCreateTimerTask+0x88>)
 8015380:	f7ff f812 	bl	80143a8 <xTaskCreateStatic>
 8015384:	4603      	mov	r3, r0
 8015386:	4a10      	ldr	r2, [pc, #64]	; (80153c8 <xTimerCreateTimerTask+0x8c>)
 8015388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801538a:	4b0f      	ldr	r3, [pc, #60]	; (80153c8 <xTimerCreateTimerTask+0x8c>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d001      	beq.n	8015396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015392:	2301      	movs	r3, #1
 8015394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d10a      	bne.n	80153b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a0:	f383 8811 	msr	BASEPRI, r3
 80153a4:	f3bf 8f6f 	isb	sy
 80153a8:	f3bf 8f4f 	dsb	sy
 80153ac:	613b      	str	r3, [r7, #16]
}
 80153ae:	bf00      	nop
 80153b0:	e7fe      	b.n	80153b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80153b2:	697b      	ldr	r3, [r7, #20]
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3718      	adds	r7, #24
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	240014bc 	.word	0x240014bc
 80153c0:	08016f98 	.word	0x08016f98
 80153c4:	08015501 	.word	0x08015501
 80153c8:	240014c0 	.word	0x240014c0

080153cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80153da:	2300      	movs	r3, #0
 80153dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d10a      	bne.n	80153fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80153e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	623b      	str	r3, [r7, #32]
}
 80153f6:	bf00      	nop
 80153f8:	e7fe      	b.n	80153f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80153fa:	4b1a      	ldr	r3, [pc, #104]	; (8015464 <xTimerGenericCommand+0x98>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d02a      	beq.n	8015458 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	2b05      	cmp	r3, #5
 8015412:	dc18      	bgt.n	8015446 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015414:	f7ff fe9a 	bl	801514c <xTaskGetSchedulerState>
 8015418:	4603      	mov	r3, r0
 801541a:	2b02      	cmp	r3, #2
 801541c:	d109      	bne.n	8015432 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801541e:	4b11      	ldr	r3, [pc, #68]	; (8015464 <xTimerGenericCommand+0x98>)
 8015420:	6818      	ldr	r0, [r3, #0]
 8015422:	f107 0110 	add.w	r1, r7, #16
 8015426:	2300      	movs	r3, #0
 8015428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801542a:	f7fe fbd5 	bl	8013bd8 <xQueueGenericSend>
 801542e:	6278      	str	r0, [r7, #36]	; 0x24
 8015430:	e012      	b.n	8015458 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015432:	4b0c      	ldr	r3, [pc, #48]	; (8015464 <xTimerGenericCommand+0x98>)
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	f107 0110 	add.w	r1, r7, #16
 801543a:	2300      	movs	r3, #0
 801543c:	2200      	movs	r2, #0
 801543e:	f7fe fbcb 	bl	8013bd8 <xQueueGenericSend>
 8015442:	6278      	str	r0, [r7, #36]	; 0x24
 8015444:	e008      	b.n	8015458 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <xTimerGenericCommand+0x98>)
 8015448:	6818      	ldr	r0, [r3, #0]
 801544a:	f107 0110 	add.w	r1, r7, #16
 801544e:	2300      	movs	r3, #0
 8015450:	683a      	ldr	r2, [r7, #0]
 8015452:	f7fe fcbf 	bl	8013dd4 <xQueueGenericSendFromISR>
 8015456:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801545a:	4618      	mov	r0, r3
 801545c:	3728      	adds	r7, #40	; 0x28
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	240014bc 	.word	0x240014bc

08015468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b088      	sub	sp, #32
 801546c:	af02      	add	r7, sp, #8
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015472:	4b22      	ldr	r3, [pc, #136]	; (80154fc <prvProcessExpiredTimer+0x94>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	3304      	adds	r3, #4
 8015480:	4618      	mov	r0, r3
 8015482:	f7fe fa7b 	bl	801397c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801548c:	f003 0304 	and.w	r3, r3, #4
 8015490:	2b00      	cmp	r3, #0
 8015492:	d022      	beq.n	80154da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	699a      	ldr	r2, [r3, #24]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	18d1      	adds	r1, r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	683a      	ldr	r2, [r7, #0]
 80154a0:	6978      	ldr	r0, [r7, #20]
 80154a2:	f000 f8d1 	bl	8015648 <prvInsertTimerInActiveList>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d01f      	beq.n	80154ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154ac:	2300      	movs	r3, #0
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	2300      	movs	r3, #0
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	2100      	movs	r1, #0
 80154b6:	6978      	ldr	r0, [r7, #20]
 80154b8:	f7ff ff88 	bl	80153cc <xTimerGenericCommand>
 80154bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d113      	bne.n	80154ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80154c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c8:	f383 8811 	msr	BASEPRI, r3
 80154cc:	f3bf 8f6f 	isb	sy
 80154d0:	f3bf 8f4f 	dsb	sy
 80154d4:	60fb      	str	r3, [r7, #12]
}
 80154d6:	bf00      	nop
 80154d8:	e7fe      	b.n	80154d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154e0:	f023 0301 	bic.w	r3, r3, #1
 80154e4:	b2da      	uxtb	r2, r3
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	6a1b      	ldr	r3, [r3, #32]
 80154f0:	6978      	ldr	r0, [r7, #20]
 80154f2:	4798      	blx	r3
}
 80154f4:	bf00      	nop
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	240014b4 	.word	0x240014b4

08015500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015508:	f107 0308 	add.w	r3, r7, #8
 801550c:	4618      	mov	r0, r3
 801550e:	f000 f857 	bl	80155c0 <prvGetNextExpireTime>
 8015512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	4619      	mov	r1, r3
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f000 f803 	bl	8015524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801551e:	f000 f8d5 	bl	80156cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015522:	e7f1      	b.n	8015508 <prvTimerTask+0x8>

08015524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b084      	sub	sp, #16
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801552e:	f7ff f977 	bl	8014820 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015532:	f107 0308 	add.w	r3, r7, #8
 8015536:	4618      	mov	r0, r3
 8015538:	f000 f866 	bl	8015608 <prvSampleTimeNow>
 801553c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d130      	bne.n	80155a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d10a      	bne.n	8015560 <prvProcessTimerOrBlockTask+0x3c>
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	429a      	cmp	r2, r3
 8015550:	d806      	bhi.n	8015560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015552:	f7ff f973 	bl	801483c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015556:	68f9      	ldr	r1, [r7, #12]
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f7ff ff85 	bl	8015468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801555e:	e024      	b.n	80155aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d008      	beq.n	8015578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015566:	4b13      	ldr	r3, [pc, #76]	; (80155b4 <prvProcessTimerOrBlockTask+0x90>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d101      	bne.n	8015574 <prvProcessTimerOrBlockTask+0x50>
 8015570:	2301      	movs	r3, #1
 8015572:	e000      	b.n	8015576 <prvProcessTimerOrBlockTask+0x52>
 8015574:	2300      	movs	r3, #0
 8015576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015578:	4b0f      	ldr	r3, [pc, #60]	; (80155b8 <prvProcessTimerOrBlockTask+0x94>)
 801557a:	6818      	ldr	r0, [r3, #0]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	1ad3      	subs	r3, r2, r3
 8015582:	683a      	ldr	r2, [r7, #0]
 8015584:	4619      	mov	r1, r3
 8015586:	f7fe fedb 	bl	8014340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801558a:	f7ff f957 	bl	801483c <xTaskResumeAll>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d10a      	bne.n	80155aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015594:	4b09      	ldr	r3, [pc, #36]	; (80155bc <prvProcessTimerOrBlockTask+0x98>)
 8015596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801559a:	601a      	str	r2, [r3, #0]
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	f3bf 8f6f 	isb	sy
}
 80155a4:	e001      	b.n	80155aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80155a6:	f7ff f949 	bl	801483c <xTaskResumeAll>
}
 80155aa:	bf00      	nop
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	240014b8 	.word	0x240014b8
 80155b8:	240014bc 	.word	0x240014bc
 80155bc:	e000ed04 	.word	0xe000ed04

080155c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80155c0:	b480      	push	{r7}
 80155c2:	b085      	sub	sp, #20
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80155c8:	4b0e      	ldr	r3, [pc, #56]	; (8015604 <prvGetNextExpireTime+0x44>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d101      	bne.n	80155d6 <prvGetNextExpireTime+0x16>
 80155d2:	2201      	movs	r2, #1
 80155d4:	e000      	b.n	80155d8 <prvGetNextExpireTime+0x18>
 80155d6:	2200      	movs	r2, #0
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d105      	bne.n	80155f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80155e4:	4b07      	ldr	r3, [pc, #28]	; (8015604 <prvGetNextExpireTime+0x44>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	e001      	b.n	80155f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80155f0:	2300      	movs	r3, #0
 80155f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80155f4:	68fb      	ldr	r3, [r7, #12]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3714      	adds	r7, #20
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	240014b4 	.word	0x240014b4

08015608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b084      	sub	sp, #16
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015610:	f7ff f9b2 	bl	8014978 <xTaskGetTickCount>
 8015614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015616:	4b0b      	ldr	r3, [pc, #44]	; (8015644 <prvSampleTimeNow+0x3c>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	68fa      	ldr	r2, [r7, #12]
 801561c:	429a      	cmp	r2, r3
 801561e:	d205      	bcs.n	801562c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015620:	f000 f936 	bl	8015890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2201      	movs	r2, #1
 8015628:	601a      	str	r2, [r3, #0]
 801562a:	e002      	b.n	8015632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015632:	4a04      	ldr	r2, [pc, #16]	; (8015644 <prvSampleTimeNow+0x3c>)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015638:	68fb      	ldr	r3, [r7, #12]
}
 801563a:	4618      	mov	r0, r3
 801563c:	3710      	adds	r7, #16
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	240014c4 	.word	0x240014c4

08015648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b086      	sub	sp, #24
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
 8015654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015656:	2300      	movs	r3, #0
 8015658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	68ba      	ldr	r2, [r7, #8]
 801565e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	68fa      	ldr	r2, [r7, #12]
 8015664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	429a      	cmp	r2, r3
 801566c:	d812      	bhi.n	8015694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	1ad2      	subs	r2, r2, r3
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	699b      	ldr	r3, [r3, #24]
 8015678:	429a      	cmp	r2, r3
 801567a:	d302      	bcc.n	8015682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801567c:	2301      	movs	r3, #1
 801567e:	617b      	str	r3, [r7, #20]
 8015680:	e01b      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015682:	4b10      	ldr	r3, [pc, #64]	; (80156c4 <prvInsertTimerInActiveList+0x7c>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3304      	adds	r3, #4
 801568a:	4619      	mov	r1, r3
 801568c:	4610      	mov	r0, r2
 801568e:	f7fe f93c 	bl	801390a <vListInsert>
 8015692:	e012      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	429a      	cmp	r2, r3
 801569a:	d206      	bcs.n	80156aa <prvInsertTimerInActiveList+0x62>
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d302      	bcc.n	80156aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80156a4:	2301      	movs	r3, #1
 80156a6:	617b      	str	r3, [r7, #20]
 80156a8:	e007      	b.n	80156ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80156aa:	4b07      	ldr	r3, [pc, #28]	; (80156c8 <prvInsertTimerInActiveList+0x80>)
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	3304      	adds	r3, #4
 80156b2:	4619      	mov	r1, r3
 80156b4:	4610      	mov	r0, r2
 80156b6:	f7fe f928 	bl	801390a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156ba:	697b      	ldr	r3, [r7, #20]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3718      	adds	r7, #24
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	240014b8 	.word	0x240014b8
 80156c8:	240014b4 	.word	0x240014b4

080156cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08e      	sub	sp, #56	; 0x38
 80156d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156d2:	e0ca      	b.n	801586a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	da18      	bge.n	801570c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80156da:	1d3b      	adds	r3, r7, #4
 80156dc:	3304      	adds	r3, #4
 80156de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d10a      	bne.n	80156fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80156e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ea:	f383 8811 	msr	BASEPRI, r3
 80156ee:	f3bf 8f6f 	isb	sy
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	61fb      	str	r3, [r7, #28]
}
 80156f8:	bf00      	nop
 80156fa:	e7fe      	b.n	80156fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80156fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015702:	6850      	ldr	r0, [r2, #4]
 8015704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015706:	6892      	ldr	r2, [r2, #8]
 8015708:	4611      	mov	r1, r2
 801570a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	f2c0 80aa 	blt.w	8015868 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	695b      	ldr	r3, [r3, #20]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d004      	beq.n	801572a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015722:	3304      	adds	r3, #4
 8015724:	4618      	mov	r0, r3
 8015726:	f7fe f929 	bl	801397c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801572a:	463b      	mov	r3, r7
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff ff6b 	bl	8015608 <prvSampleTimeNow>
 8015732:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b09      	cmp	r3, #9
 8015738:	f200 8097 	bhi.w	801586a <prvProcessReceivedCommands+0x19e>
 801573c:	a201      	add	r2, pc, #4	; (adr r2, 8015744 <prvProcessReceivedCommands+0x78>)
 801573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015742:	bf00      	nop
 8015744:	0801576d 	.word	0x0801576d
 8015748:	0801576d 	.word	0x0801576d
 801574c:	0801576d 	.word	0x0801576d
 8015750:	080157e1 	.word	0x080157e1
 8015754:	080157f5 	.word	0x080157f5
 8015758:	0801583f 	.word	0x0801583f
 801575c:	0801576d 	.word	0x0801576d
 8015760:	0801576d 	.word	0x0801576d
 8015764:	080157e1 	.word	0x080157e1
 8015768:	080157f5 	.word	0x080157f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015772:	f043 0301 	orr.w	r3, r3, #1
 8015776:	b2da      	uxtb	r2, r3
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801577e:	68ba      	ldr	r2, [r7, #8]
 8015780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015782:	699b      	ldr	r3, [r3, #24]
 8015784:	18d1      	adds	r1, r2, r3
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801578a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801578c:	f7ff ff5c 	bl	8015648 <prvInsertTimerInActiveList>
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d069      	beq.n	801586a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015798:	6a1b      	ldr	r3, [r3, #32]
 801579a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801579c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157a4:	f003 0304 	and.w	r3, r3, #4
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d05e      	beq.n	801586a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b0:	699b      	ldr	r3, [r3, #24]
 80157b2:	441a      	add	r2, r3
 80157b4:	2300      	movs	r3, #0
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	2300      	movs	r3, #0
 80157ba:	2100      	movs	r1, #0
 80157bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157be:	f7ff fe05 	bl	80153cc <xTimerGenericCommand>
 80157c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80157c4:	6a3b      	ldr	r3, [r7, #32]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d14f      	bne.n	801586a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80157ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ce:	f383 8811 	msr	BASEPRI, r3
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	61bb      	str	r3, [r7, #24]
}
 80157dc:	bf00      	nop
 80157de:	e7fe      	b.n	80157de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157e6:	f023 0301 	bic.w	r3, r3, #1
 80157ea:	b2da      	uxtb	r2, r3
 80157ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80157f2:	e03a      	b.n	801586a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157fa:	f043 0301 	orr.w	r3, r3, #1
 80157fe:	b2da      	uxtb	r2, r3
 8015800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580e:	699b      	ldr	r3, [r3, #24]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d10a      	bne.n	801582a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015818:	f383 8811 	msr	BASEPRI, r3
 801581c:	f3bf 8f6f 	isb	sy
 8015820:	f3bf 8f4f 	dsb	sy
 8015824:	617b      	str	r3, [r7, #20]
}
 8015826:	bf00      	nop
 8015828:	e7fe      	b.n	8015828 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801582c:	699a      	ldr	r2, [r3, #24]
 801582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015830:	18d1      	adds	r1, r2, r3
 8015832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015838:	f7ff ff06 	bl	8015648 <prvInsertTimerInActiveList>
					break;
 801583c:	e015      	b.n	801586a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015844:	f003 0302 	and.w	r3, r3, #2
 8015848:	2b00      	cmp	r3, #0
 801584a:	d103      	bne.n	8015854 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801584e:	f000 fbff 	bl	8016050 <vPortFree>
 8015852:	e00a      	b.n	801586a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801585a:	f023 0301 	bic.w	r3, r3, #1
 801585e:	b2da      	uxtb	r2, r3
 8015860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015866:	e000      	b.n	801586a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015868:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801586a:	4b08      	ldr	r3, [pc, #32]	; (801588c <prvProcessReceivedCommands+0x1c0>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	1d39      	adds	r1, r7, #4
 8015870:	2200      	movs	r2, #0
 8015872:	4618      	mov	r0, r3
 8015874:	f7fe fb4a 	bl	8013f0c <xQueueReceive>
 8015878:	4603      	mov	r3, r0
 801587a:	2b00      	cmp	r3, #0
 801587c:	f47f af2a 	bne.w	80156d4 <prvProcessReceivedCommands+0x8>
	}
}
 8015880:	bf00      	nop
 8015882:	bf00      	nop
 8015884:	3730      	adds	r7, #48	; 0x30
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	240014bc 	.word	0x240014bc

08015890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b088      	sub	sp, #32
 8015894:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015896:	e048      	b.n	801592a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015898:	4b2d      	ldr	r3, [pc, #180]	; (8015950 <prvSwitchTimerLists+0xc0>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158a2:	4b2b      	ldr	r3, [pc, #172]	; (8015950 <prvSwitchTimerLists+0xc0>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3304      	adds	r3, #4
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fe f863 	bl	801397c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6a1b      	ldr	r3, [r3, #32]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158c4:	f003 0304 	and.w	r3, r3, #4
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d02e      	beq.n	801592a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	699b      	ldr	r3, [r3, #24]
 80158d0:	693a      	ldr	r2, [r7, #16]
 80158d2:	4413      	add	r3, r2
 80158d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d90e      	bls.n	80158fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	68ba      	ldr	r2, [r7, #8]
 80158e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	68fa      	ldr	r2, [r7, #12]
 80158e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80158ea:	4b19      	ldr	r3, [pc, #100]	; (8015950 <prvSwitchTimerLists+0xc0>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	3304      	adds	r3, #4
 80158f2:	4619      	mov	r1, r3
 80158f4:	4610      	mov	r0, r2
 80158f6:	f7fe f808 	bl	801390a <vListInsert>
 80158fa:	e016      	b.n	801592a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80158fc:	2300      	movs	r3, #0
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	2300      	movs	r3, #0
 8015902:	693a      	ldr	r2, [r7, #16]
 8015904:	2100      	movs	r1, #0
 8015906:	68f8      	ldr	r0, [r7, #12]
 8015908:	f7ff fd60 	bl	80153cc <xTimerGenericCommand>
 801590c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d10a      	bne.n	801592a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	603b      	str	r3, [r7, #0]
}
 8015926:	bf00      	nop
 8015928:	e7fe      	b.n	8015928 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801592a:	4b09      	ldr	r3, [pc, #36]	; (8015950 <prvSwitchTimerLists+0xc0>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d1b1      	bne.n	8015898 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015934:	4b06      	ldr	r3, [pc, #24]	; (8015950 <prvSwitchTimerLists+0xc0>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801593a:	4b06      	ldr	r3, [pc, #24]	; (8015954 <prvSwitchTimerLists+0xc4>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	4a04      	ldr	r2, [pc, #16]	; (8015950 <prvSwitchTimerLists+0xc0>)
 8015940:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015942:	4a04      	ldr	r2, [pc, #16]	; (8015954 <prvSwitchTimerLists+0xc4>)
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	6013      	str	r3, [r2, #0]
}
 8015948:	bf00      	nop
 801594a:	3718      	adds	r7, #24
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}
 8015950:	240014b4 	.word	0x240014b4
 8015954:	240014b8 	.word	0x240014b8

08015958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801595e:	f000 f989 	bl	8015c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015962:	4b15      	ldr	r3, [pc, #84]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d120      	bne.n	80159ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801596a:	4814      	ldr	r0, [pc, #80]	; (80159bc <prvCheckForValidListAndQueue+0x64>)
 801596c:	f7fd ff7c 	bl	8013868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015970:	4813      	ldr	r0, [pc, #76]	; (80159c0 <prvCheckForValidListAndQueue+0x68>)
 8015972:	f7fd ff79 	bl	8013868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015976:	4b13      	ldr	r3, [pc, #76]	; (80159c4 <prvCheckForValidListAndQueue+0x6c>)
 8015978:	4a10      	ldr	r2, [pc, #64]	; (80159bc <prvCheckForValidListAndQueue+0x64>)
 801597a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801597c:	4b12      	ldr	r3, [pc, #72]	; (80159c8 <prvCheckForValidListAndQueue+0x70>)
 801597e:	4a10      	ldr	r2, [pc, #64]	; (80159c0 <prvCheckForValidListAndQueue+0x68>)
 8015980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015982:	2300      	movs	r3, #0
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	4b11      	ldr	r3, [pc, #68]	; (80159cc <prvCheckForValidListAndQueue+0x74>)
 8015988:	4a11      	ldr	r2, [pc, #68]	; (80159d0 <prvCheckForValidListAndQueue+0x78>)
 801598a:	2110      	movs	r1, #16
 801598c:	200a      	movs	r0, #10
 801598e:	f7fe f887 	bl	8013aa0 <xQueueGenericCreateStatic>
 8015992:	4603      	mov	r3, r0
 8015994:	4a08      	ldr	r2, [pc, #32]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 8015996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015998:	4b07      	ldr	r3, [pc, #28]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d005      	beq.n	80159ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80159a0:	4b05      	ldr	r3, [pc, #20]	; (80159b8 <prvCheckForValidListAndQueue+0x60>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	490b      	ldr	r1, [pc, #44]	; (80159d4 <prvCheckForValidListAndQueue+0x7c>)
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7fe fca0 	bl	80142ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80159ac:	f000 f992 	bl	8015cd4 <vPortExitCritical>
}
 80159b0:	bf00      	nop
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	240014bc 	.word	0x240014bc
 80159bc:	2400148c 	.word	0x2400148c
 80159c0:	240014a0 	.word	0x240014a0
 80159c4:	240014b4 	.word	0x240014b4
 80159c8:	240014b8 	.word	0x240014b8
 80159cc:	24001568 	.word	0x24001568
 80159d0:	240014c8 	.word	0x240014c8
 80159d4:	08016fa0 	.word	0x08016fa0

080159d8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b08a      	sub	sp, #40	; 0x28
 80159dc:	af00      	add	r7, sp, #0
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
 80159e4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80159e6:	f06f 0301 	mvn.w	r3, #1
 80159ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80159f8:	4b06      	ldr	r3, [pc, #24]	; (8015a14 <xTimerPendFunctionCallFromISR+0x3c>)
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	f107 0114 	add.w	r1, r7, #20
 8015a00:	2300      	movs	r3, #0
 8015a02:	683a      	ldr	r2, [r7, #0]
 8015a04:	f7fe f9e6 	bl	8013dd4 <xQueueGenericSendFromISR>
 8015a08:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3728      	adds	r7, #40	; 0x28
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	240014bc 	.word	0x240014bc

08015a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	3b04      	subs	r3, #4
 8015a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	3b04      	subs	r3, #4
 8015a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	f023 0201 	bic.w	r2, r3, #1
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3b04      	subs	r3, #4
 8015a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a48:	4a0c      	ldr	r2, [pc, #48]	; (8015a7c <pxPortInitialiseStack+0x64>)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3b14      	subs	r3, #20
 8015a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	3b04      	subs	r3, #4
 8015a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f06f 0202 	mvn.w	r2, #2
 8015a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	3b20      	subs	r3, #32
 8015a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3714      	adds	r7, #20
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr
 8015a7c:	08015a81 	.word	0x08015a81

08015a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a80:	b480      	push	{r7}
 8015a82:	b085      	sub	sp, #20
 8015a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a8a:	4b12      	ldr	r3, [pc, #72]	; (8015ad4 <prvTaskExitError+0x54>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a92:	d00a      	beq.n	8015aaa <prvTaskExitError+0x2a>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	60fb      	str	r3, [r7, #12]
}
 8015aa6:	bf00      	nop
 8015aa8:	e7fe      	b.n	8015aa8 <prvTaskExitError+0x28>
	__asm volatile
 8015aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aae:	f383 8811 	msr	BASEPRI, r3
 8015ab2:	f3bf 8f6f 	isb	sy
 8015ab6:	f3bf 8f4f 	dsb	sy
 8015aba:	60bb      	str	r3, [r7, #8]
}
 8015abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015abe:	bf00      	nop
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d0fc      	beq.n	8015ac0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ac6:	bf00      	nop
 8015ac8:	bf00      	nop
 8015aca:	3714      	adds	r7, #20
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr
 8015ad4:	24000094 	.word	0x24000094
	...

08015ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ae0:	4b07      	ldr	r3, [pc, #28]	; (8015b00 <pxCurrentTCBConst2>)
 8015ae2:	6819      	ldr	r1, [r3, #0]
 8015ae4:	6808      	ldr	r0, [r1, #0]
 8015ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aea:	f380 8809 	msr	PSP, r0
 8015aee:	f3bf 8f6f 	isb	sy
 8015af2:	f04f 0000 	mov.w	r0, #0
 8015af6:	f380 8811 	msr	BASEPRI, r0
 8015afa:	4770      	bx	lr
 8015afc:	f3af 8000 	nop.w

08015b00 <pxCurrentTCBConst2>:
 8015b00:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b04:	bf00      	nop
 8015b06:	bf00      	nop

08015b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015b08:	4808      	ldr	r0, [pc, #32]	; (8015b2c <prvPortStartFirstTask+0x24>)
 8015b0a:	6800      	ldr	r0, [r0, #0]
 8015b0c:	6800      	ldr	r0, [r0, #0]
 8015b0e:	f380 8808 	msr	MSP, r0
 8015b12:	f04f 0000 	mov.w	r0, #0
 8015b16:	f380 8814 	msr	CONTROL, r0
 8015b1a:	b662      	cpsie	i
 8015b1c:	b661      	cpsie	f
 8015b1e:	f3bf 8f4f 	dsb	sy
 8015b22:	f3bf 8f6f 	isb	sy
 8015b26:	df00      	svc	0
 8015b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b2a:	bf00      	nop
 8015b2c:	e000ed08 	.word	0xe000ed08

08015b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015b36:	4b46      	ldr	r3, [pc, #280]	; (8015c50 <xPortStartScheduler+0x120>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	4a46      	ldr	r2, [pc, #280]	; (8015c54 <xPortStartScheduler+0x124>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d10a      	bne.n	8015b56 <xPortStartScheduler+0x26>
	__asm volatile
 8015b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b44:	f383 8811 	msr	BASEPRI, r3
 8015b48:	f3bf 8f6f 	isb	sy
 8015b4c:	f3bf 8f4f 	dsb	sy
 8015b50:	613b      	str	r3, [r7, #16]
}
 8015b52:	bf00      	nop
 8015b54:	e7fe      	b.n	8015b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015b56:	4b3e      	ldr	r3, [pc, #248]	; (8015c50 <xPortStartScheduler+0x120>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4a3f      	ldr	r2, [pc, #252]	; (8015c58 <xPortStartScheduler+0x128>)
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d10a      	bne.n	8015b76 <xPortStartScheduler+0x46>
	__asm volatile
 8015b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b64:	f383 8811 	msr	BASEPRI, r3
 8015b68:	f3bf 8f6f 	isb	sy
 8015b6c:	f3bf 8f4f 	dsb	sy
 8015b70:	60fb      	str	r3, [r7, #12]
}
 8015b72:	bf00      	nop
 8015b74:	e7fe      	b.n	8015b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b76:	4b39      	ldr	r3, [pc, #228]	; (8015c5c <xPortStartScheduler+0x12c>)
 8015b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	22ff      	movs	r2, #255	; 0xff
 8015b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b90:	78fb      	ldrb	r3, [r7, #3]
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b98:	b2da      	uxtb	r2, r3
 8015b9a:	4b31      	ldr	r3, [pc, #196]	; (8015c60 <xPortStartScheduler+0x130>)
 8015b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b9e:	4b31      	ldr	r3, [pc, #196]	; (8015c64 <xPortStartScheduler+0x134>)
 8015ba0:	2207      	movs	r2, #7
 8015ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ba4:	e009      	b.n	8015bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015ba6:	4b2f      	ldr	r3, [pc, #188]	; (8015c64 <xPortStartScheduler+0x134>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	3b01      	subs	r3, #1
 8015bac:	4a2d      	ldr	r2, [pc, #180]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015bb0:	78fb      	ldrb	r3, [r7, #3]
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bba:	78fb      	ldrb	r3, [r7, #3]
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bc2:	2b80      	cmp	r3, #128	; 0x80
 8015bc4:	d0ef      	beq.n	8015ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bc6:	4b27      	ldr	r3, [pc, #156]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f1c3 0307 	rsb	r3, r3, #7
 8015bce:	2b04      	cmp	r3, #4
 8015bd0:	d00a      	beq.n	8015be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd6:	f383 8811 	msr	BASEPRI, r3
 8015bda:	f3bf 8f6f 	isb	sy
 8015bde:	f3bf 8f4f 	dsb	sy
 8015be2:	60bb      	str	r3, [r7, #8]
}
 8015be4:	bf00      	nop
 8015be6:	e7fe      	b.n	8015be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015be8:	4b1e      	ldr	r3, [pc, #120]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	021b      	lsls	r3, r3, #8
 8015bee:	4a1d      	ldr	r2, [pc, #116]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015bf2:	4b1c      	ldr	r3, [pc, #112]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015bfa:	4a1a      	ldr	r2, [pc, #104]	; (8015c64 <xPortStartScheduler+0x134>)
 8015bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	b2da      	uxtb	r2, r3
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c06:	4b18      	ldr	r3, [pc, #96]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a17      	ldr	r2, [pc, #92]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c12:	4b15      	ldr	r3, [pc, #84]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4a14      	ldr	r2, [pc, #80]	; (8015c68 <xPortStartScheduler+0x138>)
 8015c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c1e:	f000 f8dd 	bl	8015ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c22:	4b12      	ldr	r3, [pc, #72]	; (8015c6c <xPortStartScheduler+0x13c>)
 8015c24:	2200      	movs	r2, #0
 8015c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c28:	f000 f8fc 	bl	8015e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c2c:	4b10      	ldr	r3, [pc, #64]	; (8015c70 <xPortStartScheduler+0x140>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	4a0f      	ldr	r2, [pc, #60]	; (8015c70 <xPortStartScheduler+0x140>)
 8015c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c38:	f7ff ff66 	bl	8015b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c3c:	f7fe ff6e 	bl	8014b1c <vTaskSwitchContext>
	prvTaskExitError();
 8015c40:	f7ff ff1e 	bl	8015a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3718      	adds	r7, #24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	e000ed00 	.word	0xe000ed00
 8015c54:	410fc271 	.word	0x410fc271
 8015c58:	410fc270 	.word	0x410fc270
 8015c5c:	e000e400 	.word	0xe000e400
 8015c60:	240015b8 	.word	0x240015b8
 8015c64:	240015bc 	.word	0x240015bc
 8015c68:	e000ed20 	.word	0xe000ed20
 8015c6c:	24000094 	.word	0x24000094
 8015c70:	e000ef34 	.word	0xe000ef34

08015c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c74:	b480      	push	{r7}
 8015c76:	b083      	sub	sp, #12
 8015c78:	af00      	add	r7, sp, #0
	__asm volatile
 8015c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7e:	f383 8811 	msr	BASEPRI, r3
 8015c82:	f3bf 8f6f 	isb	sy
 8015c86:	f3bf 8f4f 	dsb	sy
 8015c8a:	607b      	str	r3, [r7, #4]
}
 8015c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c8e:	4b0f      	ldr	r3, [pc, #60]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3301      	adds	r3, #1
 8015c94:	4a0d      	ldr	r2, [pc, #52]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c98:	4b0c      	ldr	r3, [pc, #48]	; (8015ccc <vPortEnterCritical+0x58>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d10f      	bne.n	8015cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015ca0:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <vPortEnterCritical+0x5c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	b2db      	uxtb	r3, r3
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00a      	beq.n	8015cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cae:	f383 8811 	msr	BASEPRI, r3
 8015cb2:	f3bf 8f6f 	isb	sy
 8015cb6:	f3bf 8f4f 	dsb	sy
 8015cba:	603b      	str	r3, [r7, #0]
}
 8015cbc:	bf00      	nop
 8015cbe:	e7fe      	b.n	8015cbe <vPortEnterCritical+0x4a>
	}
}
 8015cc0:	bf00      	nop
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr
 8015ccc:	24000094 	.word	0x24000094
 8015cd0:	e000ed04 	.word	0xe000ed04

08015cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cda:	4b12      	ldr	r3, [pc, #72]	; (8015d24 <vPortExitCritical+0x50>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d10a      	bne.n	8015cf8 <vPortExitCritical+0x24>
	__asm volatile
 8015ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	607b      	str	r3, [r7, #4]
}
 8015cf4:	bf00      	nop
 8015cf6:	e7fe      	b.n	8015cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015cf8:	4b0a      	ldr	r3, [pc, #40]	; (8015d24 <vPortExitCritical+0x50>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	3b01      	subs	r3, #1
 8015cfe:	4a09      	ldr	r2, [pc, #36]	; (8015d24 <vPortExitCritical+0x50>)
 8015d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d02:	4b08      	ldr	r3, [pc, #32]	; (8015d24 <vPortExitCritical+0x50>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d105      	bne.n	8015d16 <vPortExitCritical+0x42>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	f383 8811 	msr	BASEPRI, r3
}
 8015d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d16:	bf00      	nop
 8015d18:	370c      	adds	r7, #12
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr
 8015d22:	bf00      	nop
 8015d24:	24000094 	.word	0x24000094
	...

08015d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d30:	f3ef 8009 	mrs	r0, PSP
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	4b15      	ldr	r3, [pc, #84]	; (8015d90 <pxCurrentTCBConst>)
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	f01e 0f10 	tst.w	lr, #16
 8015d40:	bf08      	it	eq
 8015d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4a:	6010      	str	r0, [r2, #0]
 8015d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d54:	f380 8811 	msr	BASEPRI, r0
 8015d58:	f3bf 8f4f 	dsb	sy
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f7fe fedc 	bl	8014b1c <vTaskSwitchContext>
 8015d64:	f04f 0000 	mov.w	r0, #0
 8015d68:	f380 8811 	msr	BASEPRI, r0
 8015d6c:	bc09      	pop	{r0, r3}
 8015d6e:	6819      	ldr	r1, [r3, #0]
 8015d70:	6808      	ldr	r0, [r1, #0]
 8015d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d76:	f01e 0f10 	tst.w	lr, #16
 8015d7a:	bf08      	it	eq
 8015d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d80:	f380 8809 	msr	PSP, r0
 8015d84:	f3bf 8f6f 	isb	sy
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	f3af 8000 	nop.w

08015d90 <pxCurrentTCBConst>:
 8015d90:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop

08015d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	607b      	str	r3, [r7, #4]
}
 8015db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015db2:	f7fe fdf1 	bl	8014998 <xTaskIncrementTick>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d003      	beq.n	8015dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dbc:	4b06      	ldr	r3, [pc, #24]	; (8015dd8 <xPortSysTickHandler+0x40>)
 8015dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dc2:	601a      	str	r2, [r3, #0]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	f383 8811 	msr	BASEPRI, r3
}
 8015dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dd0:	bf00      	nop
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	e000ed04 	.word	0xe000ed04

08015ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015ddc:	b480      	push	{r7}
 8015dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015de0:	4b0b      	ldr	r3, [pc, #44]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015de6:	4b0b      	ldr	r3, [pc, #44]	; (8015e14 <vPortSetupTimerInterrupt+0x38>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015dec:	4b0a      	ldr	r3, [pc, #40]	; (8015e18 <vPortSetupTimerInterrupt+0x3c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a0a      	ldr	r2, [pc, #40]	; (8015e1c <vPortSetupTimerInterrupt+0x40>)
 8015df2:	fba2 2303 	umull	r2, r3, r2, r3
 8015df6:	099b      	lsrs	r3, r3, #6
 8015df8:	4a09      	ldr	r2, [pc, #36]	; (8015e20 <vPortSetupTimerInterrupt+0x44>)
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dfe:	4b04      	ldr	r3, [pc, #16]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015e00:	2207      	movs	r2, #7
 8015e02:	601a      	str	r2, [r3, #0]
}
 8015e04:	bf00      	nop
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	e000e010 	.word	0xe000e010
 8015e14:	e000e018 	.word	0xe000e018
 8015e18:	24000084 	.word	0x24000084
 8015e1c:	10624dd3 	.word	0x10624dd3
 8015e20:	e000e014 	.word	0xe000e014

08015e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e34 <vPortEnableVFP+0x10>
 8015e28:	6801      	ldr	r1, [r0, #0]
 8015e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e2e:	6001      	str	r1, [r0, #0]
 8015e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e32:	bf00      	nop
 8015e34:	e000ed88 	.word	0xe000ed88

08015e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e38:	b480      	push	{r7}
 8015e3a:	b085      	sub	sp, #20
 8015e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e3e:	f3ef 8305 	mrs	r3, IPSR
 8015e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2b0f      	cmp	r3, #15
 8015e48:	d914      	bls.n	8015e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e4a:	4a17      	ldr	r2, [pc, #92]	; (8015ea8 <vPortValidateInterruptPriority+0x70>)
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	4413      	add	r3, r2
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e54:	4b15      	ldr	r3, [pc, #84]	; (8015eac <vPortValidateInterruptPriority+0x74>)
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	7afa      	ldrb	r2, [r7, #11]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d20a      	bcs.n	8015e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e62:	f383 8811 	msr	BASEPRI, r3
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	607b      	str	r3, [r7, #4]
}
 8015e70:	bf00      	nop
 8015e72:	e7fe      	b.n	8015e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e74:	4b0e      	ldr	r3, [pc, #56]	; (8015eb0 <vPortValidateInterruptPriority+0x78>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e7c:	4b0d      	ldr	r3, [pc, #52]	; (8015eb4 <vPortValidateInterruptPriority+0x7c>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d90a      	bls.n	8015e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e88:	f383 8811 	msr	BASEPRI, r3
 8015e8c:	f3bf 8f6f 	isb	sy
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	603b      	str	r3, [r7, #0]
}
 8015e96:	bf00      	nop
 8015e98:	e7fe      	b.n	8015e98 <vPortValidateInterruptPriority+0x60>
	}
 8015e9a:	bf00      	nop
 8015e9c:	3714      	adds	r7, #20
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	e000e3f0 	.word	0xe000e3f0
 8015eac:	240015b8 	.word	0x240015b8
 8015eb0:	e000ed0c 	.word	0xe000ed0c
 8015eb4:	240015bc 	.word	0x240015bc

08015eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b08a      	sub	sp, #40	; 0x28
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ec4:	f7fe fcac 	bl	8014820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ec8:	4b5b      	ldr	r3, [pc, #364]	; (8016038 <pvPortMalloc+0x180>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ed0:	f000 f920 	bl	8016114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ed4:	4b59      	ldr	r3, [pc, #356]	; (801603c <pvPortMalloc+0x184>)
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	4013      	ands	r3, r2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f040 8093 	bne.w	8016008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d01d      	beq.n	8015f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ee8:	2208      	movs	r2, #8
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	4413      	add	r3, r2
 8015eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f003 0307 	and.w	r3, r3, #7
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d014      	beq.n	8015f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f023 0307 	bic.w	r3, r3, #7
 8015f00:	3308      	adds	r3, #8
 8015f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f003 0307 	and.w	r3, r3, #7
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00a      	beq.n	8015f24 <pvPortMalloc+0x6c>
	__asm volatile
 8015f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f12:	f383 8811 	msr	BASEPRI, r3
 8015f16:	f3bf 8f6f 	isb	sy
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	617b      	str	r3, [r7, #20]
}
 8015f20:	bf00      	nop
 8015f22:	e7fe      	b.n	8015f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d06e      	beq.n	8016008 <pvPortMalloc+0x150>
 8015f2a:	4b45      	ldr	r3, [pc, #276]	; (8016040 <pvPortMalloc+0x188>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	687a      	ldr	r2, [r7, #4]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d869      	bhi.n	8016008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f34:	4b43      	ldr	r3, [pc, #268]	; (8016044 <pvPortMalloc+0x18c>)
 8015f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f38:	4b42      	ldr	r3, [pc, #264]	; (8016044 <pvPortMalloc+0x18c>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f3e:	e004      	b.n	8015f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d903      	bls.n	8015f5c <pvPortMalloc+0xa4>
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d1f1      	bne.n	8015f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f5c:	4b36      	ldr	r3, [pc, #216]	; (8016038 <pvPortMalloc+0x180>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d050      	beq.n	8016008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	2208      	movs	r2, #8
 8015f6c:	4413      	add	r3, r2
 8015f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	6a3b      	ldr	r3, [r7, #32]
 8015f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7a:	685a      	ldr	r2, [r3, #4]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	1ad2      	subs	r2, r2, r3
 8015f80:	2308      	movs	r3, #8
 8015f82:	005b      	lsls	r3, r3, #1
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d91f      	bls.n	8015fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f90:	69bb      	ldr	r3, [r7, #24]
 8015f92:	f003 0307 	and.w	r3, r3, #7
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00a      	beq.n	8015fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8015f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f9e:	f383 8811 	msr	BASEPRI, r3
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	613b      	str	r3, [r7, #16]
}
 8015fac:	bf00      	nop
 8015fae:	e7fe      	b.n	8015fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb2:	685a      	ldr	r2, [r3, #4]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	1ad2      	subs	r2, r2, r3
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fc2:	69b8      	ldr	r0, [r7, #24]
 8015fc4:	f000 f908 	bl	80161d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fc8:	4b1d      	ldr	r3, [pc, #116]	; (8016040 <pvPortMalloc+0x188>)
 8015fca:	681a      	ldr	r2, [r3, #0]
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	4a1b      	ldr	r2, [pc, #108]	; (8016040 <pvPortMalloc+0x188>)
 8015fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fd6:	4b1a      	ldr	r3, [pc, #104]	; (8016040 <pvPortMalloc+0x188>)
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	4b1b      	ldr	r3, [pc, #108]	; (8016048 <pvPortMalloc+0x190>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d203      	bcs.n	8015fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fe2:	4b17      	ldr	r3, [pc, #92]	; (8016040 <pvPortMalloc+0x188>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a18      	ldr	r2, [pc, #96]	; (8016048 <pvPortMalloc+0x190>)
 8015fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fec:	685a      	ldr	r2, [r3, #4]
 8015fee:	4b13      	ldr	r3, [pc, #76]	; (801603c <pvPortMalloc+0x184>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	431a      	orrs	r2, r3
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ffe:	4b13      	ldr	r3, [pc, #76]	; (801604c <pvPortMalloc+0x194>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	3301      	adds	r3, #1
 8016004:	4a11      	ldr	r2, [pc, #68]	; (801604c <pvPortMalloc+0x194>)
 8016006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016008:	f7fe fc18 	bl	801483c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	f003 0307 	and.w	r3, r3, #7
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00a      	beq.n	801602c <pvPortMalloc+0x174>
	__asm volatile
 8016016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601a:	f383 8811 	msr	BASEPRI, r3
 801601e:	f3bf 8f6f 	isb	sy
 8016022:	f3bf 8f4f 	dsb	sy
 8016026:	60fb      	str	r3, [r7, #12]
}
 8016028:	bf00      	nop
 801602a:	e7fe      	b.n	801602a <pvPortMalloc+0x172>
	return pvReturn;
 801602c:	69fb      	ldr	r3, [r7, #28]
}
 801602e:	4618      	mov	r0, r3
 8016030:	3728      	adds	r7, #40	; 0x28
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	240051c8 	.word	0x240051c8
 801603c:	240051dc 	.word	0x240051dc
 8016040:	240051cc 	.word	0x240051cc
 8016044:	240051c0 	.word	0x240051c0
 8016048:	240051d0 	.word	0x240051d0
 801604c:	240051d4 	.word	0x240051d4

08016050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d04d      	beq.n	80160fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016062:	2308      	movs	r3, #8
 8016064:	425b      	negs	r3, r3
 8016066:	697a      	ldr	r2, [r7, #20]
 8016068:	4413      	add	r3, r2
 801606a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	685a      	ldr	r2, [r3, #4]
 8016074:	4b24      	ldr	r3, [pc, #144]	; (8016108 <vPortFree+0xb8>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	4013      	ands	r3, r2
 801607a:	2b00      	cmp	r3, #0
 801607c:	d10a      	bne.n	8016094 <vPortFree+0x44>
	__asm volatile
 801607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016082:	f383 8811 	msr	BASEPRI, r3
 8016086:	f3bf 8f6f 	isb	sy
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	60fb      	str	r3, [r7, #12]
}
 8016090:	bf00      	nop
 8016092:	e7fe      	b.n	8016092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00a      	beq.n	80160b2 <vPortFree+0x62>
	__asm volatile
 801609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a0:	f383 8811 	msr	BASEPRI, r3
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	f3bf 8f4f 	dsb	sy
 80160ac:	60bb      	str	r3, [r7, #8]
}
 80160ae:	bf00      	nop
 80160b0:	e7fe      	b.n	80160b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	685a      	ldr	r2, [r3, #4]
 80160b6:	4b14      	ldr	r3, [pc, #80]	; (8016108 <vPortFree+0xb8>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	4013      	ands	r3, r2
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d01e      	beq.n	80160fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d11a      	bne.n	80160fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	685a      	ldr	r2, [r3, #4]
 80160cc:	4b0e      	ldr	r3, [pc, #56]	; (8016108 <vPortFree+0xb8>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	43db      	mvns	r3, r3
 80160d2:	401a      	ands	r2, r3
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160d8:	f7fe fba2 	bl	8014820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	685a      	ldr	r2, [r3, #4]
 80160e0:	4b0a      	ldr	r3, [pc, #40]	; (801610c <vPortFree+0xbc>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	4413      	add	r3, r2
 80160e6:	4a09      	ldr	r2, [pc, #36]	; (801610c <vPortFree+0xbc>)
 80160e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160ea:	6938      	ldr	r0, [r7, #16]
 80160ec:	f000 f874 	bl	80161d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <vPortFree+0xc0>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	3301      	adds	r3, #1
 80160f6:	4a06      	ldr	r2, [pc, #24]	; (8016110 <vPortFree+0xc0>)
 80160f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160fa:	f7fe fb9f 	bl	801483c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160fe:	bf00      	nop
 8016100:	3718      	adds	r7, #24
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
 8016106:	bf00      	nop
 8016108:	240051dc 	.word	0x240051dc
 801610c:	240051cc 	.word	0x240051cc
 8016110:	240051d8 	.word	0x240051d8

08016114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801611a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801611e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016120:	4b27      	ldr	r3, [pc, #156]	; (80161c0 <prvHeapInit+0xac>)
 8016122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f003 0307 	and.w	r3, r3, #7
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00c      	beq.n	8016148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	3307      	adds	r3, #7
 8016132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f023 0307 	bic.w	r3, r3, #7
 801613a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801613c:	68ba      	ldr	r2, [r7, #8]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	4a1f      	ldr	r2, [pc, #124]	; (80161c0 <prvHeapInit+0xac>)
 8016144:	4413      	add	r3, r2
 8016146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801614c:	4a1d      	ldr	r2, [pc, #116]	; (80161c4 <prvHeapInit+0xb0>)
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016152:	4b1c      	ldr	r3, [pc, #112]	; (80161c4 <prvHeapInit+0xb0>)
 8016154:	2200      	movs	r2, #0
 8016156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68ba      	ldr	r2, [r7, #8]
 801615c:	4413      	add	r3, r2
 801615e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016160:	2208      	movs	r2, #8
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	1a9b      	subs	r3, r3, r2
 8016166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f023 0307 	bic.w	r3, r3, #7
 801616e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	4a15      	ldr	r2, [pc, #84]	; (80161c8 <prvHeapInit+0xb4>)
 8016174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016176:	4b14      	ldr	r3, [pc, #80]	; (80161c8 <prvHeapInit+0xb4>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2200      	movs	r2, #0
 801617c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801617e:	4b12      	ldr	r3, [pc, #72]	; (80161c8 <prvHeapInit+0xb4>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	2200      	movs	r2, #0
 8016184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	68fa      	ldr	r2, [r7, #12]
 801618e:	1ad2      	subs	r2, r2, r3
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016194:	4b0c      	ldr	r3, [pc, #48]	; (80161c8 <prvHeapInit+0xb4>)
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	4a0a      	ldr	r2, [pc, #40]	; (80161cc <prvHeapInit+0xb8>)
 80161a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	4a09      	ldr	r2, [pc, #36]	; (80161d0 <prvHeapInit+0xbc>)
 80161aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161ac:	4b09      	ldr	r3, [pc, #36]	; (80161d4 <prvHeapInit+0xc0>)
 80161ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161b2:	601a      	str	r2, [r3, #0]
}
 80161b4:	bf00      	nop
 80161b6:	3714      	adds	r7, #20
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr
 80161c0:	240015c0 	.word	0x240015c0
 80161c4:	240051c0 	.word	0x240051c0
 80161c8:	240051c8 	.word	0x240051c8
 80161cc:	240051d0 	.word	0x240051d0
 80161d0:	240051cc 	.word	0x240051cc
 80161d4:	240051dc 	.word	0x240051dc

080161d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161d8:	b480      	push	{r7}
 80161da:	b085      	sub	sp, #20
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161e0:	4b28      	ldr	r3, [pc, #160]	; (8016284 <prvInsertBlockIntoFreeList+0xac>)
 80161e2:	60fb      	str	r3, [r7, #12]
 80161e4:	e002      	b.n	80161ec <prvInsertBlockIntoFreeList+0x14>
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	60fb      	str	r3, [r7, #12]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d8f7      	bhi.n	80161e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	68ba      	ldr	r2, [r7, #8]
 8016200:	4413      	add	r3, r2
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	429a      	cmp	r2, r3
 8016206:	d108      	bne.n	801621a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	685a      	ldr	r2, [r3, #4]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	441a      	add	r2, r3
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	68ba      	ldr	r2, [r7, #8]
 8016224:	441a      	add	r2, r3
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	429a      	cmp	r2, r3
 801622c:	d118      	bne.n	8016260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	4b15      	ldr	r3, [pc, #84]	; (8016288 <prvInsertBlockIntoFreeList+0xb0>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d00d      	beq.n	8016256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	685a      	ldr	r2, [r3, #4]
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	441a      	add	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	601a      	str	r2, [r3, #0]
 8016254:	e008      	b.n	8016268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016256:	4b0c      	ldr	r3, [pc, #48]	; (8016288 <prvInsertBlockIntoFreeList+0xb0>)
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	601a      	str	r2, [r3, #0]
 801625e:	e003      	b.n	8016268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681a      	ldr	r2, [r3, #0]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016268:	68fa      	ldr	r2, [r7, #12]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	429a      	cmp	r2, r3
 801626e:	d002      	beq.n	8016276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016276:	bf00      	nop
 8016278:	3714      	adds	r7, #20
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop
 8016284:	240051c0 	.word	0x240051c0
 8016288:	240051c8 	.word	0x240051c8

0801628c <__errno>:
 801628c:	4b01      	ldr	r3, [pc, #4]	; (8016294 <__errno+0x8>)
 801628e:	6818      	ldr	r0, [r3, #0]
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	24000098 	.word	0x24000098

08016298 <__libc_init_array>:
 8016298:	b570      	push	{r4, r5, r6, lr}
 801629a:	4d0d      	ldr	r5, [pc, #52]	; (80162d0 <__libc_init_array+0x38>)
 801629c:	4c0d      	ldr	r4, [pc, #52]	; (80162d4 <__libc_init_array+0x3c>)
 801629e:	1b64      	subs	r4, r4, r5
 80162a0:	10a4      	asrs	r4, r4, #2
 80162a2:	2600      	movs	r6, #0
 80162a4:	42a6      	cmp	r6, r4
 80162a6:	d109      	bne.n	80162bc <__libc_init_array+0x24>
 80162a8:	4d0b      	ldr	r5, [pc, #44]	; (80162d8 <__libc_init_array+0x40>)
 80162aa:	4c0c      	ldr	r4, [pc, #48]	; (80162dc <__libc_init_array+0x44>)
 80162ac:	f000 fd3c 	bl	8016d28 <_init>
 80162b0:	1b64      	subs	r4, r4, r5
 80162b2:	10a4      	asrs	r4, r4, #2
 80162b4:	2600      	movs	r6, #0
 80162b6:	42a6      	cmp	r6, r4
 80162b8:	d105      	bne.n	80162c6 <__libc_init_array+0x2e>
 80162ba:	bd70      	pop	{r4, r5, r6, pc}
 80162bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80162c0:	4798      	blx	r3
 80162c2:	3601      	adds	r6, #1
 80162c4:	e7ee      	b.n	80162a4 <__libc_init_array+0xc>
 80162c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80162ca:	4798      	blx	r3
 80162cc:	3601      	adds	r6, #1
 80162ce:	e7f2      	b.n	80162b6 <__libc_init_array+0x1e>
 80162d0:	080171e0 	.word	0x080171e0
 80162d4:	080171e0 	.word	0x080171e0
 80162d8:	080171e0 	.word	0x080171e0
 80162dc:	080171e4 	.word	0x080171e4

080162e0 <malloc>:
 80162e0:	4b02      	ldr	r3, [pc, #8]	; (80162ec <malloc+0xc>)
 80162e2:	4601      	mov	r1, r0
 80162e4:	6818      	ldr	r0, [r3, #0]
 80162e6:	f000 b88d 	b.w	8016404 <_malloc_r>
 80162ea:	bf00      	nop
 80162ec:	24000098 	.word	0x24000098

080162f0 <free>:
 80162f0:	4b02      	ldr	r3, [pc, #8]	; (80162fc <free+0xc>)
 80162f2:	4601      	mov	r1, r0
 80162f4:	6818      	ldr	r0, [r3, #0]
 80162f6:	f000 b819 	b.w	801632c <_free_r>
 80162fa:	bf00      	nop
 80162fc:	24000098 	.word	0x24000098

08016300 <memcpy>:
 8016300:	440a      	add	r2, r1
 8016302:	4291      	cmp	r1, r2
 8016304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016308:	d100      	bne.n	801630c <memcpy+0xc>
 801630a:	4770      	bx	lr
 801630c:	b510      	push	{r4, lr}
 801630e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016316:	4291      	cmp	r1, r2
 8016318:	d1f9      	bne.n	801630e <memcpy+0xe>
 801631a:	bd10      	pop	{r4, pc}

0801631c <memset>:
 801631c:	4402      	add	r2, r0
 801631e:	4603      	mov	r3, r0
 8016320:	4293      	cmp	r3, r2
 8016322:	d100      	bne.n	8016326 <memset+0xa>
 8016324:	4770      	bx	lr
 8016326:	f803 1b01 	strb.w	r1, [r3], #1
 801632a:	e7f9      	b.n	8016320 <memset+0x4>

0801632c <_free_r>:
 801632c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801632e:	2900      	cmp	r1, #0
 8016330:	d044      	beq.n	80163bc <_free_r+0x90>
 8016332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016336:	9001      	str	r0, [sp, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	f1a1 0404 	sub.w	r4, r1, #4
 801633e:	bfb8      	it	lt
 8016340:	18e4      	addlt	r4, r4, r3
 8016342:	f000 fc39 	bl	8016bb8 <__malloc_lock>
 8016346:	4a1e      	ldr	r2, [pc, #120]	; (80163c0 <_free_r+0x94>)
 8016348:	9801      	ldr	r0, [sp, #4]
 801634a:	6813      	ldr	r3, [r2, #0]
 801634c:	b933      	cbnz	r3, 801635c <_free_r+0x30>
 801634e:	6063      	str	r3, [r4, #4]
 8016350:	6014      	str	r4, [r2, #0]
 8016352:	b003      	add	sp, #12
 8016354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016358:	f000 bc34 	b.w	8016bc4 <__malloc_unlock>
 801635c:	42a3      	cmp	r3, r4
 801635e:	d908      	bls.n	8016372 <_free_r+0x46>
 8016360:	6825      	ldr	r5, [r4, #0]
 8016362:	1961      	adds	r1, r4, r5
 8016364:	428b      	cmp	r3, r1
 8016366:	bf01      	itttt	eq
 8016368:	6819      	ldreq	r1, [r3, #0]
 801636a:	685b      	ldreq	r3, [r3, #4]
 801636c:	1949      	addeq	r1, r1, r5
 801636e:	6021      	streq	r1, [r4, #0]
 8016370:	e7ed      	b.n	801634e <_free_r+0x22>
 8016372:	461a      	mov	r2, r3
 8016374:	685b      	ldr	r3, [r3, #4]
 8016376:	b10b      	cbz	r3, 801637c <_free_r+0x50>
 8016378:	42a3      	cmp	r3, r4
 801637a:	d9fa      	bls.n	8016372 <_free_r+0x46>
 801637c:	6811      	ldr	r1, [r2, #0]
 801637e:	1855      	adds	r5, r2, r1
 8016380:	42a5      	cmp	r5, r4
 8016382:	d10b      	bne.n	801639c <_free_r+0x70>
 8016384:	6824      	ldr	r4, [r4, #0]
 8016386:	4421      	add	r1, r4
 8016388:	1854      	adds	r4, r2, r1
 801638a:	42a3      	cmp	r3, r4
 801638c:	6011      	str	r1, [r2, #0]
 801638e:	d1e0      	bne.n	8016352 <_free_r+0x26>
 8016390:	681c      	ldr	r4, [r3, #0]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	6053      	str	r3, [r2, #4]
 8016396:	4421      	add	r1, r4
 8016398:	6011      	str	r1, [r2, #0]
 801639a:	e7da      	b.n	8016352 <_free_r+0x26>
 801639c:	d902      	bls.n	80163a4 <_free_r+0x78>
 801639e:	230c      	movs	r3, #12
 80163a0:	6003      	str	r3, [r0, #0]
 80163a2:	e7d6      	b.n	8016352 <_free_r+0x26>
 80163a4:	6825      	ldr	r5, [r4, #0]
 80163a6:	1961      	adds	r1, r4, r5
 80163a8:	428b      	cmp	r3, r1
 80163aa:	bf04      	itt	eq
 80163ac:	6819      	ldreq	r1, [r3, #0]
 80163ae:	685b      	ldreq	r3, [r3, #4]
 80163b0:	6063      	str	r3, [r4, #4]
 80163b2:	bf04      	itt	eq
 80163b4:	1949      	addeq	r1, r1, r5
 80163b6:	6021      	streq	r1, [r4, #0]
 80163b8:	6054      	str	r4, [r2, #4]
 80163ba:	e7ca      	b.n	8016352 <_free_r+0x26>
 80163bc:	b003      	add	sp, #12
 80163be:	bd30      	pop	{r4, r5, pc}
 80163c0:	240051e0 	.word	0x240051e0

080163c4 <sbrk_aligned>:
 80163c4:	b570      	push	{r4, r5, r6, lr}
 80163c6:	4e0e      	ldr	r6, [pc, #56]	; (8016400 <sbrk_aligned+0x3c>)
 80163c8:	460c      	mov	r4, r1
 80163ca:	6831      	ldr	r1, [r6, #0]
 80163cc:	4605      	mov	r5, r0
 80163ce:	b911      	cbnz	r1, 80163d6 <sbrk_aligned+0x12>
 80163d0:	f000 f902 	bl	80165d8 <_sbrk_r>
 80163d4:	6030      	str	r0, [r6, #0]
 80163d6:	4621      	mov	r1, r4
 80163d8:	4628      	mov	r0, r5
 80163da:	f000 f8fd 	bl	80165d8 <_sbrk_r>
 80163de:	1c43      	adds	r3, r0, #1
 80163e0:	d00a      	beq.n	80163f8 <sbrk_aligned+0x34>
 80163e2:	1cc4      	adds	r4, r0, #3
 80163e4:	f024 0403 	bic.w	r4, r4, #3
 80163e8:	42a0      	cmp	r0, r4
 80163ea:	d007      	beq.n	80163fc <sbrk_aligned+0x38>
 80163ec:	1a21      	subs	r1, r4, r0
 80163ee:	4628      	mov	r0, r5
 80163f0:	f000 f8f2 	bl	80165d8 <_sbrk_r>
 80163f4:	3001      	adds	r0, #1
 80163f6:	d101      	bne.n	80163fc <sbrk_aligned+0x38>
 80163f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80163fc:	4620      	mov	r0, r4
 80163fe:	bd70      	pop	{r4, r5, r6, pc}
 8016400:	240051e4 	.word	0x240051e4

08016404 <_malloc_r>:
 8016404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016408:	1ccd      	adds	r5, r1, #3
 801640a:	f025 0503 	bic.w	r5, r5, #3
 801640e:	3508      	adds	r5, #8
 8016410:	2d0c      	cmp	r5, #12
 8016412:	bf38      	it	cc
 8016414:	250c      	movcc	r5, #12
 8016416:	2d00      	cmp	r5, #0
 8016418:	4607      	mov	r7, r0
 801641a:	db01      	blt.n	8016420 <_malloc_r+0x1c>
 801641c:	42a9      	cmp	r1, r5
 801641e:	d905      	bls.n	801642c <_malloc_r+0x28>
 8016420:	230c      	movs	r3, #12
 8016422:	603b      	str	r3, [r7, #0]
 8016424:	2600      	movs	r6, #0
 8016426:	4630      	mov	r0, r6
 8016428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801642c:	4e2e      	ldr	r6, [pc, #184]	; (80164e8 <_malloc_r+0xe4>)
 801642e:	f000 fbc3 	bl	8016bb8 <__malloc_lock>
 8016432:	6833      	ldr	r3, [r6, #0]
 8016434:	461c      	mov	r4, r3
 8016436:	bb34      	cbnz	r4, 8016486 <_malloc_r+0x82>
 8016438:	4629      	mov	r1, r5
 801643a:	4638      	mov	r0, r7
 801643c:	f7ff ffc2 	bl	80163c4 <sbrk_aligned>
 8016440:	1c43      	adds	r3, r0, #1
 8016442:	4604      	mov	r4, r0
 8016444:	d14d      	bne.n	80164e2 <_malloc_r+0xde>
 8016446:	6834      	ldr	r4, [r6, #0]
 8016448:	4626      	mov	r6, r4
 801644a:	2e00      	cmp	r6, #0
 801644c:	d140      	bne.n	80164d0 <_malloc_r+0xcc>
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	4631      	mov	r1, r6
 8016452:	4638      	mov	r0, r7
 8016454:	eb04 0803 	add.w	r8, r4, r3
 8016458:	f000 f8be 	bl	80165d8 <_sbrk_r>
 801645c:	4580      	cmp	r8, r0
 801645e:	d13a      	bne.n	80164d6 <_malloc_r+0xd2>
 8016460:	6821      	ldr	r1, [r4, #0]
 8016462:	3503      	adds	r5, #3
 8016464:	1a6d      	subs	r5, r5, r1
 8016466:	f025 0503 	bic.w	r5, r5, #3
 801646a:	3508      	adds	r5, #8
 801646c:	2d0c      	cmp	r5, #12
 801646e:	bf38      	it	cc
 8016470:	250c      	movcc	r5, #12
 8016472:	4629      	mov	r1, r5
 8016474:	4638      	mov	r0, r7
 8016476:	f7ff ffa5 	bl	80163c4 <sbrk_aligned>
 801647a:	3001      	adds	r0, #1
 801647c:	d02b      	beq.n	80164d6 <_malloc_r+0xd2>
 801647e:	6823      	ldr	r3, [r4, #0]
 8016480:	442b      	add	r3, r5
 8016482:	6023      	str	r3, [r4, #0]
 8016484:	e00e      	b.n	80164a4 <_malloc_r+0xa0>
 8016486:	6822      	ldr	r2, [r4, #0]
 8016488:	1b52      	subs	r2, r2, r5
 801648a:	d41e      	bmi.n	80164ca <_malloc_r+0xc6>
 801648c:	2a0b      	cmp	r2, #11
 801648e:	d916      	bls.n	80164be <_malloc_r+0xba>
 8016490:	1961      	adds	r1, r4, r5
 8016492:	42a3      	cmp	r3, r4
 8016494:	6025      	str	r5, [r4, #0]
 8016496:	bf18      	it	ne
 8016498:	6059      	strne	r1, [r3, #4]
 801649a:	6863      	ldr	r3, [r4, #4]
 801649c:	bf08      	it	eq
 801649e:	6031      	streq	r1, [r6, #0]
 80164a0:	5162      	str	r2, [r4, r5]
 80164a2:	604b      	str	r3, [r1, #4]
 80164a4:	4638      	mov	r0, r7
 80164a6:	f104 060b 	add.w	r6, r4, #11
 80164aa:	f000 fb8b 	bl	8016bc4 <__malloc_unlock>
 80164ae:	f026 0607 	bic.w	r6, r6, #7
 80164b2:	1d23      	adds	r3, r4, #4
 80164b4:	1af2      	subs	r2, r6, r3
 80164b6:	d0b6      	beq.n	8016426 <_malloc_r+0x22>
 80164b8:	1b9b      	subs	r3, r3, r6
 80164ba:	50a3      	str	r3, [r4, r2]
 80164bc:	e7b3      	b.n	8016426 <_malloc_r+0x22>
 80164be:	6862      	ldr	r2, [r4, #4]
 80164c0:	42a3      	cmp	r3, r4
 80164c2:	bf0c      	ite	eq
 80164c4:	6032      	streq	r2, [r6, #0]
 80164c6:	605a      	strne	r2, [r3, #4]
 80164c8:	e7ec      	b.n	80164a4 <_malloc_r+0xa0>
 80164ca:	4623      	mov	r3, r4
 80164cc:	6864      	ldr	r4, [r4, #4]
 80164ce:	e7b2      	b.n	8016436 <_malloc_r+0x32>
 80164d0:	4634      	mov	r4, r6
 80164d2:	6876      	ldr	r6, [r6, #4]
 80164d4:	e7b9      	b.n	801644a <_malloc_r+0x46>
 80164d6:	230c      	movs	r3, #12
 80164d8:	603b      	str	r3, [r7, #0]
 80164da:	4638      	mov	r0, r7
 80164dc:	f000 fb72 	bl	8016bc4 <__malloc_unlock>
 80164e0:	e7a1      	b.n	8016426 <_malloc_r+0x22>
 80164e2:	6025      	str	r5, [r4, #0]
 80164e4:	e7de      	b.n	80164a4 <_malloc_r+0xa0>
 80164e6:	bf00      	nop
 80164e8:	240051e0 	.word	0x240051e0

080164ec <_puts_r>:
 80164ec:	b570      	push	{r4, r5, r6, lr}
 80164ee:	460e      	mov	r6, r1
 80164f0:	4605      	mov	r5, r0
 80164f2:	b118      	cbz	r0, 80164fc <_puts_r+0x10>
 80164f4:	6983      	ldr	r3, [r0, #24]
 80164f6:	b90b      	cbnz	r3, 80164fc <_puts_r+0x10>
 80164f8:	f000 fa58 	bl	80169ac <__sinit>
 80164fc:	69ab      	ldr	r3, [r5, #24]
 80164fe:	68ac      	ldr	r4, [r5, #8]
 8016500:	b913      	cbnz	r3, 8016508 <_puts_r+0x1c>
 8016502:	4628      	mov	r0, r5
 8016504:	f000 fa52 	bl	80169ac <__sinit>
 8016508:	4b2c      	ldr	r3, [pc, #176]	; (80165bc <_puts_r+0xd0>)
 801650a:	429c      	cmp	r4, r3
 801650c:	d120      	bne.n	8016550 <_puts_r+0x64>
 801650e:	686c      	ldr	r4, [r5, #4]
 8016510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016512:	07db      	lsls	r3, r3, #31
 8016514:	d405      	bmi.n	8016522 <_puts_r+0x36>
 8016516:	89a3      	ldrh	r3, [r4, #12]
 8016518:	0598      	lsls	r0, r3, #22
 801651a:	d402      	bmi.n	8016522 <_puts_r+0x36>
 801651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801651e:	f000 fae3 	bl	8016ae8 <__retarget_lock_acquire_recursive>
 8016522:	89a3      	ldrh	r3, [r4, #12]
 8016524:	0719      	lsls	r1, r3, #28
 8016526:	d51d      	bpl.n	8016564 <_puts_r+0x78>
 8016528:	6923      	ldr	r3, [r4, #16]
 801652a:	b1db      	cbz	r3, 8016564 <_puts_r+0x78>
 801652c:	3e01      	subs	r6, #1
 801652e:	68a3      	ldr	r3, [r4, #8]
 8016530:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016534:	3b01      	subs	r3, #1
 8016536:	60a3      	str	r3, [r4, #8]
 8016538:	bb39      	cbnz	r1, 801658a <_puts_r+0x9e>
 801653a:	2b00      	cmp	r3, #0
 801653c:	da38      	bge.n	80165b0 <_puts_r+0xc4>
 801653e:	4622      	mov	r2, r4
 8016540:	210a      	movs	r1, #10
 8016542:	4628      	mov	r0, r5
 8016544:	f000 f858 	bl	80165f8 <__swbuf_r>
 8016548:	3001      	adds	r0, #1
 801654a:	d011      	beq.n	8016570 <_puts_r+0x84>
 801654c:	250a      	movs	r5, #10
 801654e:	e011      	b.n	8016574 <_puts_r+0x88>
 8016550:	4b1b      	ldr	r3, [pc, #108]	; (80165c0 <_puts_r+0xd4>)
 8016552:	429c      	cmp	r4, r3
 8016554:	d101      	bne.n	801655a <_puts_r+0x6e>
 8016556:	68ac      	ldr	r4, [r5, #8]
 8016558:	e7da      	b.n	8016510 <_puts_r+0x24>
 801655a:	4b1a      	ldr	r3, [pc, #104]	; (80165c4 <_puts_r+0xd8>)
 801655c:	429c      	cmp	r4, r3
 801655e:	bf08      	it	eq
 8016560:	68ec      	ldreq	r4, [r5, #12]
 8016562:	e7d5      	b.n	8016510 <_puts_r+0x24>
 8016564:	4621      	mov	r1, r4
 8016566:	4628      	mov	r0, r5
 8016568:	f000 f898 	bl	801669c <__swsetup_r>
 801656c:	2800      	cmp	r0, #0
 801656e:	d0dd      	beq.n	801652c <_puts_r+0x40>
 8016570:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016576:	07da      	lsls	r2, r3, #31
 8016578:	d405      	bmi.n	8016586 <_puts_r+0x9a>
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	059b      	lsls	r3, r3, #22
 801657e:	d402      	bmi.n	8016586 <_puts_r+0x9a>
 8016580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016582:	f000 fab2 	bl	8016aea <__retarget_lock_release_recursive>
 8016586:	4628      	mov	r0, r5
 8016588:	bd70      	pop	{r4, r5, r6, pc}
 801658a:	2b00      	cmp	r3, #0
 801658c:	da04      	bge.n	8016598 <_puts_r+0xac>
 801658e:	69a2      	ldr	r2, [r4, #24]
 8016590:	429a      	cmp	r2, r3
 8016592:	dc06      	bgt.n	80165a2 <_puts_r+0xb6>
 8016594:	290a      	cmp	r1, #10
 8016596:	d004      	beq.n	80165a2 <_puts_r+0xb6>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	1c5a      	adds	r2, r3, #1
 801659c:	6022      	str	r2, [r4, #0]
 801659e:	7019      	strb	r1, [r3, #0]
 80165a0:	e7c5      	b.n	801652e <_puts_r+0x42>
 80165a2:	4622      	mov	r2, r4
 80165a4:	4628      	mov	r0, r5
 80165a6:	f000 f827 	bl	80165f8 <__swbuf_r>
 80165aa:	3001      	adds	r0, #1
 80165ac:	d1bf      	bne.n	801652e <_puts_r+0x42>
 80165ae:	e7df      	b.n	8016570 <_puts_r+0x84>
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	250a      	movs	r5, #10
 80165b4:	1c5a      	adds	r2, r3, #1
 80165b6:	6022      	str	r2, [r4, #0]
 80165b8:	701d      	strb	r5, [r3, #0]
 80165ba:	e7db      	b.n	8016574 <_puts_r+0x88>
 80165bc:	08017198 	.word	0x08017198
 80165c0:	080171b8 	.word	0x080171b8
 80165c4:	08017178 	.word	0x08017178

080165c8 <puts>:
 80165c8:	4b02      	ldr	r3, [pc, #8]	; (80165d4 <puts+0xc>)
 80165ca:	4601      	mov	r1, r0
 80165cc:	6818      	ldr	r0, [r3, #0]
 80165ce:	f7ff bf8d 	b.w	80164ec <_puts_r>
 80165d2:	bf00      	nop
 80165d4:	24000098 	.word	0x24000098

080165d8 <_sbrk_r>:
 80165d8:	b538      	push	{r3, r4, r5, lr}
 80165da:	4d06      	ldr	r5, [pc, #24]	; (80165f4 <_sbrk_r+0x1c>)
 80165dc:	2300      	movs	r3, #0
 80165de:	4604      	mov	r4, r0
 80165e0:	4608      	mov	r0, r1
 80165e2:	602b      	str	r3, [r5, #0]
 80165e4:	f7ec fd1c 	bl	8003020 <_sbrk>
 80165e8:	1c43      	adds	r3, r0, #1
 80165ea:	d102      	bne.n	80165f2 <_sbrk_r+0x1a>
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	b103      	cbz	r3, 80165f2 <_sbrk_r+0x1a>
 80165f0:	6023      	str	r3, [r4, #0]
 80165f2:	bd38      	pop	{r3, r4, r5, pc}
 80165f4:	240051ec 	.word	0x240051ec

080165f8 <__swbuf_r>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	460e      	mov	r6, r1
 80165fc:	4614      	mov	r4, r2
 80165fe:	4605      	mov	r5, r0
 8016600:	b118      	cbz	r0, 801660a <__swbuf_r+0x12>
 8016602:	6983      	ldr	r3, [r0, #24]
 8016604:	b90b      	cbnz	r3, 801660a <__swbuf_r+0x12>
 8016606:	f000 f9d1 	bl	80169ac <__sinit>
 801660a:	4b21      	ldr	r3, [pc, #132]	; (8016690 <__swbuf_r+0x98>)
 801660c:	429c      	cmp	r4, r3
 801660e:	d12b      	bne.n	8016668 <__swbuf_r+0x70>
 8016610:	686c      	ldr	r4, [r5, #4]
 8016612:	69a3      	ldr	r3, [r4, #24]
 8016614:	60a3      	str	r3, [r4, #8]
 8016616:	89a3      	ldrh	r3, [r4, #12]
 8016618:	071a      	lsls	r2, r3, #28
 801661a:	d52f      	bpl.n	801667c <__swbuf_r+0x84>
 801661c:	6923      	ldr	r3, [r4, #16]
 801661e:	b36b      	cbz	r3, 801667c <__swbuf_r+0x84>
 8016620:	6923      	ldr	r3, [r4, #16]
 8016622:	6820      	ldr	r0, [r4, #0]
 8016624:	1ac0      	subs	r0, r0, r3
 8016626:	6963      	ldr	r3, [r4, #20]
 8016628:	b2f6      	uxtb	r6, r6
 801662a:	4283      	cmp	r3, r0
 801662c:	4637      	mov	r7, r6
 801662e:	dc04      	bgt.n	801663a <__swbuf_r+0x42>
 8016630:	4621      	mov	r1, r4
 8016632:	4628      	mov	r0, r5
 8016634:	f000 f926 	bl	8016884 <_fflush_r>
 8016638:	bb30      	cbnz	r0, 8016688 <__swbuf_r+0x90>
 801663a:	68a3      	ldr	r3, [r4, #8]
 801663c:	3b01      	subs	r3, #1
 801663e:	60a3      	str	r3, [r4, #8]
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	1c5a      	adds	r2, r3, #1
 8016644:	6022      	str	r2, [r4, #0]
 8016646:	701e      	strb	r6, [r3, #0]
 8016648:	6963      	ldr	r3, [r4, #20]
 801664a:	3001      	adds	r0, #1
 801664c:	4283      	cmp	r3, r0
 801664e:	d004      	beq.n	801665a <__swbuf_r+0x62>
 8016650:	89a3      	ldrh	r3, [r4, #12]
 8016652:	07db      	lsls	r3, r3, #31
 8016654:	d506      	bpl.n	8016664 <__swbuf_r+0x6c>
 8016656:	2e0a      	cmp	r6, #10
 8016658:	d104      	bne.n	8016664 <__swbuf_r+0x6c>
 801665a:	4621      	mov	r1, r4
 801665c:	4628      	mov	r0, r5
 801665e:	f000 f911 	bl	8016884 <_fflush_r>
 8016662:	b988      	cbnz	r0, 8016688 <__swbuf_r+0x90>
 8016664:	4638      	mov	r0, r7
 8016666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016668:	4b0a      	ldr	r3, [pc, #40]	; (8016694 <__swbuf_r+0x9c>)
 801666a:	429c      	cmp	r4, r3
 801666c:	d101      	bne.n	8016672 <__swbuf_r+0x7a>
 801666e:	68ac      	ldr	r4, [r5, #8]
 8016670:	e7cf      	b.n	8016612 <__swbuf_r+0x1a>
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <__swbuf_r+0xa0>)
 8016674:	429c      	cmp	r4, r3
 8016676:	bf08      	it	eq
 8016678:	68ec      	ldreq	r4, [r5, #12]
 801667a:	e7ca      	b.n	8016612 <__swbuf_r+0x1a>
 801667c:	4621      	mov	r1, r4
 801667e:	4628      	mov	r0, r5
 8016680:	f000 f80c 	bl	801669c <__swsetup_r>
 8016684:	2800      	cmp	r0, #0
 8016686:	d0cb      	beq.n	8016620 <__swbuf_r+0x28>
 8016688:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801668c:	e7ea      	b.n	8016664 <__swbuf_r+0x6c>
 801668e:	bf00      	nop
 8016690:	08017198 	.word	0x08017198
 8016694:	080171b8 	.word	0x080171b8
 8016698:	08017178 	.word	0x08017178

0801669c <__swsetup_r>:
 801669c:	4b32      	ldr	r3, [pc, #200]	; (8016768 <__swsetup_r+0xcc>)
 801669e:	b570      	push	{r4, r5, r6, lr}
 80166a0:	681d      	ldr	r5, [r3, #0]
 80166a2:	4606      	mov	r6, r0
 80166a4:	460c      	mov	r4, r1
 80166a6:	b125      	cbz	r5, 80166b2 <__swsetup_r+0x16>
 80166a8:	69ab      	ldr	r3, [r5, #24]
 80166aa:	b913      	cbnz	r3, 80166b2 <__swsetup_r+0x16>
 80166ac:	4628      	mov	r0, r5
 80166ae:	f000 f97d 	bl	80169ac <__sinit>
 80166b2:	4b2e      	ldr	r3, [pc, #184]	; (801676c <__swsetup_r+0xd0>)
 80166b4:	429c      	cmp	r4, r3
 80166b6:	d10f      	bne.n	80166d8 <__swsetup_r+0x3c>
 80166b8:	686c      	ldr	r4, [r5, #4]
 80166ba:	89a3      	ldrh	r3, [r4, #12]
 80166bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166c0:	0719      	lsls	r1, r3, #28
 80166c2:	d42c      	bmi.n	801671e <__swsetup_r+0x82>
 80166c4:	06dd      	lsls	r5, r3, #27
 80166c6:	d411      	bmi.n	80166ec <__swsetup_r+0x50>
 80166c8:	2309      	movs	r3, #9
 80166ca:	6033      	str	r3, [r6, #0]
 80166cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166d6:	e03e      	b.n	8016756 <__swsetup_r+0xba>
 80166d8:	4b25      	ldr	r3, [pc, #148]	; (8016770 <__swsetup_r+0xd4>)
 80166da:	429c      	cmp	r4, r3
 80166dc:	d101      	bne.n	80166e2 <__swsetup_r+0x46>
 80166de:	68ac      	ldr	r4, [r5, #8]
 80166e0:	e7eb      	b.n	80166ba <__swsetup_r+0x1e>
 80166e2:	4b24      	ldr	r3, [pc, #144]	; (8016774 <__swsetup_r+0xd8>)
 80166e4:	429c      	cmp	r4, r3
 80166e6:	bf08      	it	eq
 80166e8:	68ec      	ldreq	r4, [r5, #12]
 80166ea:	e7e6      	b.n	80166ba <__swsetup_r+0x1e>
 80166ec:	0758      	lsls	r0, r3, #29
 80166ee:	d512      	bpl.n	8016716 <__swsetup_r+0x7a>
 80166f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166f2:	b141      	cbz	r1, 8016706 <__swsetup_r+0x6a>
 80166f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166f8:	4299      	cmp	r1, r3
 80166fa:	d002      	beq.n	8016702 <__swsetup_r+0x66>
 80166fc:	4630      	mov	r0, r6
 80166fe:	f7ff fe15 	bl	801632c <_free_r>
 8016702:	2300      	movs	r3, #0
 8016704:	6363      	str	r3, [r4, #52]	; 0x34
 8016706:	89a3      	ldrh	r3, [r4, #12]
 8016708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801670c:	81a3      	strh	r3, [r4, #12]
 801670e:	2300      	movs	r3, #0
 8016710:	6063      	str	r3, [r4, #4]
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	6023      	str	r3, [r4, #0]
 8016716:	89a3      	ldrh	r3, [r4, #12]
 8016718:	f043 0308 	orr.w	r3, r3, #8
 801671c:	81a3      	strh	r3, [r4, #12]
 801671e:	6923      	ldr	r3, [r4, #16]
 8016720:	b94b      	cbnz	r3, 8016736 <__swsetup_r+0x9a>
 8016722:	89a3      	ldrh	r3, [r4, #12]
 8016724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801672c:	d003      	beq.n	8016736 <__swsetup_r+0x9a>
 801672e:	4621      	mov	r1, r4
 8016730:	4630      	mov	r0, r6
 8016732:	f000 fa01 	bl	8016b38 <__smakebuf_r>
 8016736:	89a0      	ldrh	r0, [r4, #12]
 8016738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801673c:	f010 0301 	ands.w	r3, r0, #1
 8016740:	d00a      	beq.n	8016758 <__swsetup_r+0xbc>
 8016742:	2300      	movs	r3, #0
 8016744:	60a3      	str	r3, [r4, #8]
 8016746:	6963      	ldr	r3, [r4, #20]
 8016748:	425b      	negs	r3, r3
 801674a:	61a3      	str	r3, [r4, #24]
 801674c:	6923      	ldr	r3, [r4, #16]
 801674e:	b943      	cbnz	r3, 8016762 <__swsetup_r+0xc6>
 8016750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016754:	d1ba      	bne.n	80166cc <__swsetup_r+0x30>
 8016756:	bd70      	pop	{r4, r5, r6, pc}
 8016758:	0781      	lsls	r1, r0, #30
 801675a:	bf58      	it	pl
 801675c:	6963      	ldrpl	r3, [r4, #20]
 801675e:	60a3      	str	r3, [r4, #8]
 8016760:	e7f4      	b.n	801674c <__swsetup_r+0xb0>
 8016762:	2000      	movs	r0, #0
 8016764:	e7f7      	b.n	8016756 <__swsetup_r+0xba>
 8016766:	bf00      	nop
 8016768:	24000098 	.word	0x24000098
 801676c:	08017198 	.word	0x08017198
 8016770:	080171b8 	.word	0x080171b8
 8016774:	08017178 	.word	0x08017178

08016778 <__sflush_r>:
 8016778:	898a      	ldrh	r2, [r1, #12]
 801677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801677e:	4605      	mov	r5, r0
 8016780:	0710      	lsls	r0, r2, #28
 8016782:	460c      	mov	r4, r1
 8016784:	d458      	bmi.n	8016838 <__sflush_r+0xc0>
 8016786:	684b      	ldr	r3, [r1, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	dc05      	bgt.n	8016798 <__sflush_r+0x20>
 801678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801678e:	2b00      	cmp	r3, #0
 8016790:	dc02      	bgt.n	8016798 <__sflush_r+0x20>
 8016792:	2000      	movs	r0, #0
 8016794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801679a:	2e00      	cmp	r6, #0
 801679c:	d0f9      	beq.n	8016792 <__sflush_r+0x1a>
 801679e:	2300      	movs	r3, #0
 80167a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167a4:	682f      	ldr	r7, [r5, #0]
 80167a6:	602b      	str	r3, [r5, #0]
 80167a8:	d032      	beq.n	8016810 <__sflush_r+0x98>
 80167aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80167ac:	89a3      	ldrh	r3, [r4, #12]
 80167ae:	075a      	lsls	r2, r3, #29
 80167b0:	d505      	bpl.n	80167be <__sflush_r+0x46>
 80167b2:	6863      	ldr	r3, [r4, #4]
 80167b4:	1ac0      	subs	r0, r0, r3
 80167b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167b8:	b10b      	cbz	r3, 80167be <__sflush_r+0x46>
 80167ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167bc:	1ac0      	subs	r0, r0, r3
 80167be:	2300      	movs	r3, #0
 80167c0:	4602      	mov	r2, r0
 80167c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167c4:	6a21      	ldr	r1, [r4, #32]
 80167c6:	4628      	mov	r0, r5
 80167c8:	47b0      	blx	r6
 80167ca:	1c43      	adds	r3, r0, #1
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	d106      	bne.n	80167de <__sflush_r+0x66>
 80167d0:	6829      	ldr	r1, [r5, #0]
 80167d2:	291d      	cmp	r1, #29
 80167d4:	d82c      	bhi.n	8016830 <__sflush_r+0xb8>
 80167d6:	4a2a      	ldr	r2, [pc, #168]	; (8016880 <__sflush_r+0x108>)
 80167d8:	40ca      	lsrs	r2, r1
 80167da:	07d6      	lsls	r6, r2, #31
 80167dc:	d528      	bpl.n	8016830 <__sflush_r+0xb8>
 80167de:	2200      	movs	r2, #0
 80167e0:	6062      	str	r2, [r4, #4]
 80167e2:	04d9      	lsls	r1, r3, #19
 80167e4:	6922      	ldr	r2, [r4, #16]
 80167e6:	6022      	str	r2, [r4, #0]
 80167e8:	d504      	bpl.n	80167f4 <__sflush_r+0x7c>
 80167ea:	1c42      	adds	r2, r0, #1
 80167ec:	d101      	bne.n	80167f2 <__sflush_r+0x7a>
 80167ee:	682b      	ldr	r3, [r5, #0]
 80167f0:	b903      	cbnz	r3, 80167f4 <__sflush_r+0x7c>
 80167f2:	6560      	str	r0, [r4, #84]	; 0x54
 80167f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167f6:	602f      	str	r7, [r5, #0]
 80167f8:	2900      	cmp	r1, #0
 80167fa:	d0ca      	beq.n	8016792 <__sflush_r+0x1a>
 80167fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016800:	4299      	cmp	r1, r3
 8016802:	d002      	beq.n	801680a <__sflush_r+0x92>
 8016804:	4628      	mov	r0, r5
 8016806:	f7ff fd91 	bl	801632c <_free_r>
 801680a:	2000      	movs	r0, #0
 801680c:	6360      	str	r0, [r4, #52]	; 0x34
 801680e:	e7c1      	b.n	8016794 <__sflush_r+0x1c>
 8016810:	6a21      	ldr	r1, [r4, #32]
 8016812:	2301      	movs	r3, #1
 8016814:	4628      	mov	r0, r5
 8016816:	47b0      	blx	r6
 8016818:	1c41      	adds	r1, r0, #1
 801681a:	d1c7      	bne.n	80167ac <__sflush_r+0x34>
 801681c:	682b      	ldr	r3, [r5, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d0c4      	beq.n	80167ac <__sflush_r+0x34>
 8016822:	2b1d      	cmp	r3, #29
 8016824:	d001      	beq.n	801682a <__sflush_r+0xb2>
 8016826:	2b16      	cmp	r3, #22
 8016828:	d101      	bne.n	801682e <__sflush_r+0xb6>
 801682a:	602f      	str	r7, [r5, #0]
 801682c:	e7b1      	b.n	8016792 <__sflush_r+0x1a>
 801682e:	89a3      	ldrh	r3, [r4, #12]
 8016830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016834:	81a3      	strh	r3, [r4, #12]
 8016836:	e7ad      	b.n	8016794 <__sflush_r+0x1c>
 8016838:	690f      	ldr	r7, [r1, #16]
 801683a:	2f00      	cmp	r7, #0
 801683c:	d0a9      	beq.n	8016792 <__sflush_r+0x1a>
 801683e:	0793      	lsls	r3, r2, #30
 8016840:	680e      	ldr	r6, [r1, #0]
 8016842:	bf08      	it	eq
 8016844:	694b      	ldreq	r3, [r1, #20]
 8016846:	600f      	str	r7, [r1, #0]
 8016848:	bf18      	it	ne
 801684a:	2300      	movne	r3, #0
 801684c:	eba6 0807 	sub.w	r8, r6, r7
 8016850:	608b      	str	r3, [r1, #8]
 8016852:	f1b8 0f00 	cmp.w	r8, #0
 8016856:	dd9c      	ble.n	8016792 <__sflush_r+0x1a>
 8016858:	6a21      	ldr	r1, [r4, #32]
 801685a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801685c:	4643      	mov	r3, r8
 801685e:	463a      	mov	r2, r7
 8016860:	4628      	mov	r0, r5
 8016862:	47b0      	blx	r6
 8016864:	2800      	cmp	r0, #0
 8016866:	dc06      	bgt.n	8016876 <__sflush_r+0xfe>
 8016868:	89a3      	ldrh	r3, [r4, #12]
 801686a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801686e:	81a3      	strh	r3, [r4, #12]
 8016870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016874:	e78e      	b.n	8016794 <__sflush_r+0x1c>
 8016876:	4407      	add	r7, r0
 8016878:	eba8 0800 	sub.w	r8, r8, r0
 801687c:	e7e9      	b.n	8016852 <__sflush_r+0xda>
 801687e:	bf00      	nop
 8016880:	20400001 	.word	0x20400001

08016884 <_fflush_r>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	690b      	ldr	r3, [r1, #16]
 8016888:	4605      	mov	r5, r0
 801688a:	460c      	mov	r4, r1
 801688c:	b913      	cbnz	r3, 8016894 <_fflush_r+0x10>
 801688e:	2500      	movs	r5, #0
 8016890:	4628      	mov	r0, r5
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	b118      	cbz	r0, 801689e <_fflush_r+0x1a>
 8016896:	6983      	ldr	r3, [r0, #24]
 8016898:	b90b      	cbnz	r3, 801689e <_fflush_r+0x1a>
 801689a:	f000 f887 	bl	80169ac <__sinit>
 801689e:	4b14      	ldr	r3, [pc, #80]	; (80168f0 <_fflush_r+0x6c>)
 80168a0:	429c      	cmp	r4, r3
 80168a2:	d11b      	bne.n	80168dc <_fflush_r+0x58>
 80168a4:	686c      	ldr	r4, [r5, #4]
 80168a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d0ef      	beq.n	801688e <_fflush_r+0xa>
 80168ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168b0:	07d0      	lsls	r0, r2, #31
 80168b2:	d404      	bmi.n	80168be <_fflush_r+0x3a>
 80168b4:	0599      	lsls	r1, r3, #22
 80168b6:	d402      	bmi.n	80168be <_fflush_r+0x3a>
 80168b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168ba:	f000 f915 	bl	8016ae8 <__retarget_lock_acquire_recursive>
 80168be:	4628      	mov	r0, r5
 80168c0:	4621      	mov	r1, r4
 80168c2:	f7ff ff59 	bl	8016778 <__sflush_r>
 80168c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168c8:	07da      	lsls	r2, r3, #31
 80168ca:	4605      	mov	r5, r0
 80168cc:	d4e0      	bmi.n	8016890 <_fflush_r+0xc>
 80168ce:	89a3      	ldrh	r3, [r4, #12]
 80168d0:	059b      	lsls	r3, r3, #22
 80168d2:	d4dd      	bmi.n	8016890 <_fflush_r+0xc>
 80168d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168d6:	f000 f908 	bl	8016aea <__retarget_lock_release_recursive>
 80168da:	e7d9      	b.n	8016890 <_fflush_r+0xc>
 80168dc:	4b05      	ldr	r3, [pc, #20]	; (80168f4 <_fflush_r+0x70>)
 80168de:	429c      	cmp	r4, r3
 80168e0:	d101      	bne.n	80168e6 <_fflush_r+0x62>
 80168e2:	68ac      	ldr	r4, [r5, #8]
 80168e4:	e7df      	b.n	80168a6 <_fflush_r+0x22>
 80168e6:	4b04      	ldr	r3, [pc, #16]	; (80168f8 <_fflush_r+0x74>)
 80168e8:	429c      	cmp	r4, r3
 80168ea:	bf08      	it	eq
 80168ec:	68ec      	ldreq	r4, [r5, #12]
 80168ee:	e7da      	b.n	80168a6 <_fflush_r+0x22>
 80168f0:	08017198 	.word	0x08017198
 80168f4:	080171b8 	.word	0x080171b8
 80168f8:	08017178 	.word	0x08017178

080168fc <std>:
 80168fc:	2300      	movs	r3, #0
 80168fe:	b510      	push	{r4, lr}
 8016900:	4604      	mov	r4, r0
 8016902:	e9c0 3300 	strd	r3, r3, [r0]
 8016906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801690a:	6083      	str	r3, [r0, #8]
 801690c:	8181      	strh	r1, [r0, #12]
 801690e:	6643      	str	r3, [r0, #100]	; 0x64
 8016910:	81c2      	strh	r2, [r0, #14]
 8016912:	6183      	str	r3, [r0, #24]
 8016914:	4619      	mov	r1, r3
 8016916:	2208      	movs	r2, #8
 8016918:	305c      	adds	r0, #92	; 0x5c
 801691a:	f7ff fcff 	bl	801631c <memset>
 801691e:	4b05      	ldr	r3, [pc, #20]	; (8016934 <std+0x38>)
 8016920:	6263      	str	r3, [r4, #36]	; 0x24
 8016922:	4b05      	ldr	r3, [pc, #20]	; (8016938 <std+0x3c>)
 8016924:	62a3      	str	r3, [r4, #40]	; 0x28
 8016926:	4b05      	ldr	r3, [pc, #20]	; (801693c <std+0x40>)
 8016928:	62e3      	str	r3, [r4, #44]	; 0x2c
 801692a:	4b05      	ldr	r3, [pc, #20]	; (8016940 <std+0x44>)
 801692c:	6224      	str	r4, [r4, #32]
 801692e:	6323      	str	r3, [r4, #48]	; 0x30
 8016930:	bd10      	pop	{r4, pc}
 8016932:	bf00      	nop
 8016934:	08016bd1 	.word	0x08016bd1
 8016938:	08016bf3 	.word	0x08016bf3
 801693c:	08016c2b 	.word	0x08016c2b
 8016940:	08016c4f 	.word	0x08016c4f

08016944 <_cleanup_r>:
 8016944:	4901      	ldr	r1, [pc, #4]	; (801694c <_cleanup_r+0x8>)
 8016946:	f000 b8af 	b.w	8016aa8 <_fwalk_reent>
 801694a:	bf00      	nop
 801694c:	08016885 	.word	0x08016885

08016950 <__sfmoreglue>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	2268      	movs	r2, #104	; 0x68
 8016954:	1e4d      	subs	r5, r1, #1
 8016956:	4355      	muls	r5, r2
 8016958:	460e      	mov	r6, r1
 801695a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801695e:	f7ff fd51 	bl	8016404 <_malloc_r>
 8016962:	4604      	mov	r4, r0
 8016964:	b140      	cbz	r0, 8016978 <__sfmoreglue+0x28>
 8016966:	2100      	movs	r1, #0
 8016968:	e9c0 1600 	strd	r1, r6, [r0]
 801696c:	300c      	adds	r0, #12
 801696e:	60a0      	str	r0, [r4, #8]
 8016970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016974:	f7ff fcd2 	bl	801631c <memset>
 8016978:	4620      	mov	r0, r4
 801697a:	bd70      	pop	{r4, r5, r6, pc}

0801697c <__sfp_lock_acquire>:
 801697c:	4801      	ldr	r0, [pc, #4]	; (8016984 <__sfp_lock_acquire+0x8>)
 801697e:	f000 b8b3 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 8016982:	bf00      	nop
 8016984:	240051e9 	.word	0x240051e9

08016988 <__sfp_lock_release>:
 8016988:	4801      	ldr	r0, [pc, #4]	; (8016990 <__sfp_lock_release+0x8>)
 801698a:	f000 b8ae 	b.w	8016aea <__retarget_lock_release_recursive>
 801698e:	bf00      	nop
 8016990:	240051e9 	.word	0x240051e9

08016994 <__sinit_lock_acquire>:
 8016994:	4801      	ldr	r0, [pc, #4]	; (801699c <__sinit_lock_acquire+0x8>)
 8016996:	f000 b8a7 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 801699a:	bf00      	nop
 801699c:	240051ea 	.word	0x240051ea

080169a0 <__sinit_lock_release>:
 80169a0:	4801      	ldr	r0, [pc, #4]	; (80169a8 <__sinit_lock_release+0x8>)
 80169a2:	f000 b8a2 	b.w	8016aea <__retarget_lock_release_recursive>
 80169a6:	bf00      	nop
 80169a8:	240051ea 	.word	0x240051ea

080169ac <__sinit>:
 80169ac:	b510      	push	{r4, lr}
 80169ae:	4604      	mov	r4, r0
 80169b0:	f7ff fff0 	bl	8016994 <__sinit_lock_acquire>
 80169b4:	69a3      	ldr	r3, [r4, #24]
 80169b6:	b11b      	cbz	r3, 80169c0 <__sinit+0x14>
 80169b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169bc:	f7ff bff0 	b.w	80169a0 <__sinit_lock_release>
 80169c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169c4:	6523      	str	r3, [r4, #80]	; 0x50
 80169c6:	4b13      	ldr	r3, [pc, #76]	; (8016a14 <__sinit+0x68>)
 80169c8:	4a13      	ldr	r2, [pc, #76]	; (8016a18 <__sinit+0x6c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80169ce:	42a3      	cmp	r3, r4
 80169d0:	bf04      	itt	eq
 80169d2:	2301      	moveq	r3, #1
 80169d4:	61a3      	streq	r3, [r4, #24]
 80169d6:	4620      	mov	r0, r4
 80169d8:	f000 f820 	bl	8016a1c <__sfp>
 80169dc:	6060      	str	r0, [r4, #4]
 80169de:	4620      	mov	r0, r4
 80169e0:	f000 f81c 	bl	8016a1c <__sfp>
 80169e4:	60a0      	str	r0, [r4, #8]
 80169e6:	4620      	mov	r0, r4
 80169e8:	f000 f818 	bl	8016a1c <__sfp>
 80169ec:	2200      	movs	r2, #0
 80169ee:	60e0      	str	r0, [r4, #12]
 80169f0:	2104      	movs	r1, #4
 80169f2:	6860      	ldr	r0, [r4, #4]
 80169f4:	f7ff ff82 	bl	80168fc <std>
 80169f8:	68a0      	ldr	r0, [r4, #8]
 80169fa:	2201      	movs	r2, #1
 80169fc:	2109      	movs	r1, #9
 80169fe:	f7ff ff7d 	bl	80168fc <std>
 8016a02:	68e0      	ldr	r0, [r4, #12]
 8016a04:	2202      	movs	r2, #2
 8016a06:	2112      	movs	r1, #18
 8016a08:	f7ff ff78 	bl	80168fc <std>
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	61a3      	str	r3, [r4, #24]
 8016a10:	e7d2      	b.n	80169b8 <__sinit+0xc>
 8016a12:	bf00      	nop
 8016a14:	08017174 	.word	0x08017174
 8016a18:	08016945 	.word	0x08016945

08016a1c <__sfp>:
 8016a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a1e:	4607      	mov	r7, r0
 8016a20:	f7ff ffac 	bl	801697c <__sfp_lock_acquire>
 8016a24:	4b1e      	ldr	r3, [pc, #120]	; (8016aa0 <__sfp+0x84>)
 8016a26:	681e      	ldr	r6, [r3, #0]
 8016a28:	69b3      	ldr	r3, [r6, #24]
 8016a2a:	b913      	cbnz	r3, 8016a32 <__sfp+0x16>
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	f7ff ffbd 	bl	80169ac <__sinit>
 8016a32:	3648      	adds	r6, #72	; 0x48
 8016a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	d503      	bpl.n	8016a44 <__sfp+0x28>
 8016a3c:	6833      	ldr	r3, [r6, #0]
 8016a3e:	b30b      	cbz	r3, 8016a84 <__sfp+0x68>
 8016a40:	6836      	ldr	r6, [r6, #0]
 8016a42:	e7f7      	b.n	8016a34 <__sfp+0x18>
 8016a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a48:	b9d5      	cbnz	r5, 8016a80 <__sfp+0x64>
 8016a4a:	4b16      	ldr	r3, [pc, #88]	; (8016aa4 <__sfp+0x88>)
 8016a4c:	60e3      	str	r3, [r4, #12]
 8016a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a52:	6665      	str	r5, [r4, #100]	; 0x64
 8016a54:	f000 f847 	bl	8016ae6 <__retarget_lock_init_recursive>
 8016a58:	f7ff ff96 	bl	8016988 <__sfp_lock_release>
 8016a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a64:	6025      	str	r5, [r4, #0]
 8016a66:	61a5      	str	r5, [r4, #24]
 8016a68:	2208      	movs	r2, #8
 8016a6a:	4629      	mov	r1, r5
 8016a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a70:	f7ff fc54 	bl	801631c <memset>
 8016a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a80:	3468      	adds	r4, #104	; 0x68
 8016a82:	e7d9      	b.n	8016a38 <__sfp+0x1c>
 8016a84:	2104      	movs	r1, #4
 8016a86:	4638      	mov	r0, r7
 8016a88:	f7ff ff62 	bl	8016950 <__sfmoreglue>
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	6030      	str	r0, [r6, #0]
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d1d5      	bne.n	8016a40 <__sfp+0x24>
 8016a94:	f7ff ff78 	bl	8016988 <__sfp_lock_release>
 8016a98:	230c      	movs	r3, #12
 8016a9a:	603b      	str	r3, [r7, #0]
 8016a9c:	e7ee      	b.n	8016a7c <__sfp+0x60>
 8016a9e:	bf00      	nop
 8016aa0:	08017174 	.word	0x08017174
 8016aa4:	ffff0001 	.word	0xffff0001

08016aa8 <_fwalk_reent>:
 8016aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aac:	4606      	mov	r6, r0
 8016aae:	4688      	mov	r8, r1
 8016ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ab4:	2700      	movs	r7, #0
 8016ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016aba:	f1b9 0901 	subs.w	r9, r9, #1
 8016abe:	d505      	bpl.n	8016acc <_fwalk_reent+0x24>
 8016ac0:	6824      	ldr	r4, [r4, #0]
 8016ac2:	2c00      	cmp	r4, #0
 8016ac4:	d1f7      	bne.n	8016ab6 <_fwalk_reent+0xe>
 8016ac6:	4638      	mov	r0, r7
 8016ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016acc:	89ab      	ldrh	r3, [r5, #12]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d907      	bls.n	8016ae2 <_fwalk_reent+0x3a>
 8016ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	d003      	beq.n	8016ae2 <_fwalk_reent+0x3a>
 8016ada:	4629      	mov	r1, r5
 8016adc:	4630      	mov	r0, r6
 8016ade:	47c0      	blx	r8
 8016ae0:	4307      	orrs	r7, r0
 8016ae2:	3568      	adds	r5, #104	; 0x68
 8016ae4:	e7e9      	b.n	8016aba <_fwalk_reent+0x12>

08016ae6 <__retarget_lock_init_recursive>:
 8016ae6:	4770      	bx	lr

08016ae8 <__retarget_lock_acquire_recursive>:
 8016ae8:	4770      	bx	lr

08016aea <__retarget_lock_release_recursive>:
 8016aea:	4770      	bx	lr

08016aec <__swhatbuf_r>:
 8016aec:	b570      	push	{r4, r5, r6, lr}
 8016aee:	460e      	mov	r6, r1
 8016af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016af4:	2900      	cmp	r1, #0
 8016af6:	b096      	sub	sp, #88	; 0x58
 8016af8:	4614      	mov	r4, r2
 8016afa:	461d      	mov	r5, r3
 8016afc:	da08      	bge.n	8016b10 <__swhatbuf_r+0x24>
 8016afe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016b02:	2200      	movs	r2, #0
 8016b04:	602a      	str	r2, [r5, #0]
 8016b06:	061a      	lsls	r2, r3, #24
 8016b08:	d410      	bmi.n	8016b2c <__swhatbuf_r+0x40>
 8016b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b0e:	e00e      	b.n	8016b2e <__swhatbuf_r+0x42>
 8016b10:	466a      	mov	r2, sp
 8016b12:	f000 f8c3 	bl	8016c9c <_fstat_r>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	dbf1      	blt.n	8016afe <__swhatbuf_r+0x12>
 8016b1a:	9a01      	ldr	r2, [sp, #4]
 8016b1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b24:	425a      	negs	r2, r3
 8016b26:	415a      	adcs	r2, r3
 8016b28:	602a      	str	r2, [r5, #0]
 8016b2a:	e7ee      	b.n	8016b0a <__swhatbuf_r+0x1e>
 8016b2c:	2340      	movs	r3, #64	; 0x40
 8016b2e:	2000      	movs	r0, #0
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	b016      	add	sp, #88	; 0x58
 8016b34:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b38 <__smakebuf_r>:
 8016b38:	898b      	ldrh	r3, [r1, #12]
 8016b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b3c:	079d      	lsls	r5, r3, #30
 8016b3e:	4606      	mov	r6, r0
 8016b40:	460c      	mov	r4, r1
 8016b42:	d507      	bpl.n	8016b54 <__smakebuf_r+0x1c>
 8016b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b48:	6023      	str	r3, [r4, #0]
 8016b4a:	6123      	str	r3, [r4, #16]
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	6163      	str	r3, [r4, #20]
 8016b50:	b002      	add	sp, #8
 8016b52:	bd70      	pop	{r4, r5, r6, pc}
 8016b54:	ab01      	add	r3, sp, #4
 8016b56:	466a      	mov	r2, sp
 8016b58:	f7ff ffc8 	bl	8016aec <__swhatbuf_r>
 8016b5c:	9900      	ldr	r1, [sp, #0]
 8016b5e:	4605      	mov	r5, r0
 8016b60:	4630      	mov	r0, r6
 8016b62:	f7ff fc4f 	bl	8016404 <_malloc_r>
 8016b66:	b948      	cbnz	r0, 8016b7c <__smakebuf_r+0x44>
 8016b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b6c:	059a      	lsls	r2, r3, #22
 8016b6e:	d4ef      	bmi.n	8016b50 <__smakebuf_r+0x18>
 8016b70:	f023 0303 	bic.w	r3, r3, #3
 8016b74:	f043 0302 	orr.w	r3, r3, #2
 8016b78:	81a3      	strh	r3, [r4, #12]
 8016b7a:	e7e3      	b.n	8016b44 <__smakebuf_r+0xc>
 8016b7c:	4b0d      	ldr	r3, [pc, #52]	; (8016bb4 <__smakebuf_r+0x7c>)
 8016b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b80:	89a3      	ldrh	r3, [r4, #12]
 8016b82:	6020      	str	r0, [r4, #0]
 8016b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b88:	81a3      	strh	r3, [r4, #12]
 8016b8a:	9b00      	ldr	r3, [sp, #0]
 8016b8c:	6163      	str	r3, [r4, #20]
 8016b8e:	9b01      	ldr	r3, [sp, #4]
 8016b90:	6120      	str	r0, [r4, #16]
 8016b92:	b15b      	cbz	r3, 8016bac <__smakebuf_r+0x74>
 8016b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f000 f891 	bl	8016cc0 <_isatty_r>
 8016b9e:	b128      	cbz	r0, 8016bac <__smakebuf_r+0x74>
 8016ba0:	89a3      	ldrh	r3, [r4, #12]
 8016ba2:	f023 0303 	bic.w	r3, r3, #3
 8016ba6:	f043 0301 	orr.w	r3, r3, #1
 8016baa:	81a3      	strh	r3, [r4, #12]
 8016bac:	89a0      	ldrh	r0, [r4, #12]
 8016bae:	4305      	orrs	r5, r0
 8016bb0:	81a5      	strh	r5, [r4, #12]
 8016bb2:	e7cd      	b.n	8016b50 <__smakebuf_r+0x18>
 8016bb4:	08016945 	.word	0x08016945

08016bb8 <__malloc_lock>:
 8016bb8:	4801      	ldr	r0, [pc, #4]	; (8016bc0 <__malloc_lock+0x8>)
 8016bba:	f7ff bf95 	b.w	8016ae8 <__retarget_lock_acquire_recursive>
 8016bbe:	bf00      	nop
 8016bc0:	240051e8 	.word	0x240051e8

08016bc4 <__malloc_unlock>:
 8016bc4:	4801      	ldr	r0, [pc, #4]	; (8016bcc <__malloc_unlock+0x8>)
 8016bc6:	f7ff bf90 	b.w	8016aea <__retarget_lock_release_recursive>
 8016bca:	bf00      	nop
 8016bcc:	240051e8 	.word	0x240051e8

08016bd0 <__sread>:
 8016bd0:	b510      	push	{r4, lr}
 8016bd2:	460c      	mov	r4, r1
 8016bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd8:	f000 f894 	bl	8016d04 <_read_r>
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	bfab      	itete	ge
 8016be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016be2:	89a3      	ldrhlt	r3, [r4, #12]
 8016be4:	181b      	addge	r3, r3, r0
 8016be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bea:	bfac      	ite	ge
 8016bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bee:	81a3      	strhlt	r3, [r4, #12]
 8016bf0:	bd10      	pop	{r4, pc}

08016bf2 <__swrite>:
 8016bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf6:	461f      	mov	r7, r3
 8016bf8:	898b      	ldrh	r3, [r1, #12]
 8016bfa:	05db      	lsls	r3, r3, #23
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	460c      	mov	r4, r1
 8016c00:	4616      	mov	r6, r2
 8016c02:	d505      	bpl.n	8016c10 <__swrite+0x1e>
 8016c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c08:	2302      	movs	r3, #2
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f000 f868 	bl	8016ce0 <_lseek_r>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c1a:	81a3      	strh	r3, [r4, #12]
 8016c1c:	4632      	mov	r2, r6
 8016c1e:	463b      	mov	r3, r7
 8016c20:	4628      	mov	r0, r5
 8016c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c26:	f000 b817 	b.w	8016c58 <_write_r>

08016c2a <__sseek>:
 8016c2a:	b510      	push	{r4, lr}
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c32:	f000 f855 	bl	8016ce0 <_lseek_r>
 8016c36:	1c43      	adds	r3, r0, #1
 8016c38:	89a3      	ldrh	r3, [r4, #12]
 8016c3a:	bf15      	itete	ne
 8016c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c46:	81a3      	strheq	r3, [r4, #12]
 8016c48:	bf18      	it	ne
 8016c4a:	81a3      	strhne	r3, [r4, #12]
 8016c4c:	bd10      	pop	{r4, pc}

08016c4e <__sclose>:
 8016c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c52:	f000 b813 	b.w	8016c7c <_close_r>
	...

08016c58 <_write_r>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4d07      	ldr	r5, [pc, #28]	; (8016c78 <_write_r+0x20>)
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	4608      	mov	r0, r1
 8016c60:	4611      	mov	r1, r2
 8016c62:	2200      	movs	r2, #0
 8016c64:	602a      	str	r2, [r5, #0]
 8016c66:	461a      	mov	r2, r3
 8016c68:	f7ec f989 	bl	8002f7e <_write>
 8016c6c:	1c43      	adds	r3, r0, #1
 8016c6e:	d102      	bne.n	8016c76 <_write_r+0x1e>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	b103      	cbz	r3, 8016c76 <_write_r+0x1e>
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	240051ec 	.word	0x240051ec

08016c7c <_close_r>:
 8016c7c:	b538      	push	{r3, r4, r5, lr}
 8016c7e:	4d06      	ldr	r5, [pc, #24]	; (8016c98 <_close_r+0x1c>)
 8016c80:	2300      	movs	r3, #0
 8016c82:	4604      	mov	r4, r0
 8016c84:	4608      	mov	r0, r1
 8016c86:	602b      	str	r3, [r5, #0]
 8016c88:	f7ec f995 	bl	8002fb6 <_close>
 8016c8c:	1c43      	adds	r3, r0, #1
 8016c8e:	d102      	bne.n	8016c96 <_close_r+0x1a>
 8016c90:	682b      	ldr	r3, [r5, #0]
 8016c92:	b103      	cbz	r3, 8016c96 <_close_r+0x1a>
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	bd38      	pop	{r3, r4, r5, pc}
 8016c98:	240051ec 	.word	0x240051ec

08016c9c <_fstat_r>:
 8016c9c:	b538      	push	{r3, r4, r5, lr}
 8016c9e:	4d07      	ldr	r5, [pc, #28]	; (8016cbc <_fstat_r+0x20>)
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	4608      	mov	r0, r1
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	602b      	str	r3, [r5, #0]
 8016caa:	f7ec f990 	bl	8002fce <_fstat>
 8016cae:	1c43      	adds	r3, r0, #1
 8016cb0:	d102      	bne.n	8016cb8 <_fstat_r+0x1c>
 8016cb2:	682b      	ldr	r3, [r5, #0]
 8016cb4:	b103      	cbz	r3, 8016cb8 <_fstat_r+0x1c>
 8016cb6:	6023      	str	r3, [r4, #0]
 8016cb8:	bd38      	pop	{r3, r4, r5, pc}
 8016cba:	bf00      	nop
 8016cbc:	240051ec 	.word	0x240051ec

08016cc0 <_isatty_r>:
 8016cc0:	b538      	push	{r3, r4, r5, lr}
 8016cc2:	4d06      	ldr	r5, [pc, #24]	; (8016cdc <_isatty_r+0x1c>)
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	4608      	mov	r0, r1
 8016cca:	602b      	str	r3, [r5, #0]
 8016ccc:	f7ec f98f 	bl	8002fee <_isatty>
 8016cd0:	1c43      	adds	r3, r0, #1
 8016cd2:	d102      	bne.n	8016cda <_isatty_r+0x1a>
 8016cd4:	682b      	ldr	r3, [r5, #0]
 8016cd6:	b103      	cbz	r3, 8016cda <_isatty_r+0x1a>
 8016cd8:	6023      	str	r3, [r4, #0]
 8016cda:	bd38      	pop	{r3, r4, r5, pc}
 8016cdc:	240051ec 	.word	0x240051ec

08016ce0 <_lseek_r>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	4d07      	ldr	r5, [pc, #28]	; (8016d00 <_lseek_r+0x20>)
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	4608      	mov	r0, r1
 8016ce8:	4611      	mov	r1, r2
 8016cea:	2200      	movs	r2, #0
 8016cec:	602a      	str	r2, [r5, #0]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	f7ec f988 	bl	8003004 <_lseek>
 8016cf4:	1c43      	adds	r3, r0, #1
 8016cf6:	d102      	bne.n	8016cfe <_lseek_r+0x1e>
 8016cf8:	682b      	ldr	r3, [r5, #0]
 8016cfa:	b103      	cbz	r3, 8016cfe <_lseek_r+0x1e>
 8016cfc:	6023      	str	r3, [r4, #0]
 8016cfe:	bd38      	pop	{r3, r4, r5, pc}
 8016d00:	240051ec 	.word	0x240051ec

08016d04 <_read_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4d07      	ldr	r5, [pc, #28]	; (8016d24 <_read_r+0x20>)
 8016d08:	4604      	mov	r4, r0
 8016d0a:	4608      	mov	r0, r1
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	602a      	str	r2, [r5, #0]
 8016d12:	461a      	mov	r2, r3
 8016d14:	f7ec f916 	bl	8002f44 <_read>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_read_r+0x1e>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_read_r+0x1e>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	240051ec 	.word	0x240051ec

08016d28 <_init>:
 8016d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2a:	bf00      	nop
 8016d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d2e:	bc08      	pop	{r3}
 8016d30:	469e      	mov	lr, r3
 8016d32:	4770      	bx	lr

08016d34 <_fini>:
 8016d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d36:	bf00      	nop
 8016d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d3a:	bc08      	pop	{r3}
 8016d3c:	469e      	mov	lr, r3
 8016d3e:	4770      	bx	lr
