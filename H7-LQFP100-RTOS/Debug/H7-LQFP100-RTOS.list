
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08012010  08012010  00022010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012474  08012474  00022474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801247c  0801247c  0002247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012480  08012480  00022480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08012484  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050b0  24000080  08012500  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005130  08012500  00035130  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038c07  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006e1b  00000000  00000000  00068cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002818  00000000  00000000  0006fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002540  00000000  00000000  000722e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000439cf  00000000  00000000  00074828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ac3b  00000000  00000000  000b81f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b26  00000000  00000000  000f2e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00287958  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af60  00000000  00000000  002879a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ff8 	.word	0x08011ff8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08011ff8 	.word	0x08011ff8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f002 fafb 	bl	8002c64 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 ff56 	bl	8001524 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f003 f91e 	bl	80038c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f000 ff49 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f002 fc77 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f000 ff30 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f002 fc69 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f000 ff22 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f002 fc5b 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f000 ff14 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f002 fc4d 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f000 ff06 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f002 fc3e 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f000 fef7 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f002 fc2f 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f000 fee8 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f002 fc20 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f000 fed9 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f002 fc11 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f000 feca 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f002 fc02 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f000 febb 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f002 fbf3 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f000 feac 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f002 fbe4 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f000 fe9d 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400009c 	.word	0x2400009c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 f9e3 	bl	8002c64 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 fe3e 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f002 fb6c 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f000 fe25 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f002 fb5e 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f000 fe17 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f002 fb50 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f000 fe09 	bl	8001524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f002 fb42 	bl	8002fa8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f000 fdfb 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000100 	.word	0x24000100
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f005 fd14 	bl	8006428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f005 fd08 	bl	8006428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f005 fcfc 	bl	8006428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f003 fab1 	bl	8003fdc <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f000 fd50 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f001 ff1e 	bl	8002920 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f001 ff18 	bl	8002920 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f003 fa51 	bl	8003fdc <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f000 fcf0 	bl	8001524 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000164 	.word	0x24000164
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	240001dc 	.word	0x240001dc
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f010 fd2d 	bl	80115ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f003 f851 	bl	8003c40 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f000 fcbe 	bl	8001524 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f003 f8be 	bl	8003d44 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 fca9 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000254 	.word	0x24000254
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f005 fbe7 	bl	8006428 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f003 f99c 	bl	8003fdc <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 fc3b 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f002 ff96 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f002 ffad 	bl	8003c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000268 	.word	0x24000268
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f002 ff6d 	bl	8003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f002 ff84 	bl	8003c24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f002 ff65 	bl	8003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f002 ff7c 	bl	8003c24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f002 ff5d 	bl	8003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f002 ff74 	bl	8003c24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f002 ff55 	bl	8003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f002 ff6c 	bl	8003c24 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <error_protocol>:

osMessageQueueId_t mid_MsgQueue;


// Public Functions
void error_protocol(VOLTAGE_RAIL_NAME failed_rail) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]

	packet_t error_packet;
	uint8_t *buffer = (uint8_t*) malloc(
 8000d62:	2003      	movs	r0, #3
 8000d64:	f010 fc24 	bl	80115b0 <malloc>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	61fb      	str	r3, [r7, #28]
	ERROR_PACKET_DATA_SIZE * sizeof(uint8_t));

	buffer[0] = ERROR_SYNC;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	22dd      	movs	r2, #221	; 0xdd
 8000d70:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERROR_SYNC;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3301      	adds	r3, #1
 8000d76:	22dd      	movs	r2, #221	; 0xdd
 8000d78:	701a      	strb	r2, [r3, #0]
	buffer[2] = failed_rail;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	701a      	strb	r2, [r3, #0]

	error_packet = create_packet(buffer, ERROR_PACKET_DATA_SIZE);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2203      	movs	r2, #3
 8000d86:	69f9      	ldr	r1, [r7, #28]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fbd0 	bl	800152e <create_packet>
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	463a      	mov	r2, r7
 8000d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d98:	e883 0003 	stmia.w	r3, {r0, r1}
	osMessageQueuePut(mid_MsgQueue, &error_packet, 0U, 0U);
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <error_protocol+0x64>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f107 0114 	add.w	r1, r7, #20
 8000da4:	2300      	movs	r3, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	f00d fca6 	bl	800e6f8 <osMessageQueuePut>

	free(buffer);
 8000dac:	69f8      	ldr	r0, [r7, #28]
 8000dae:	f010 fc07 	bl	80115c0 <free>
	//vTaskSuspendAll();
	//TODO: Shutdown
}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	240002e0 	.word	0x240002e0

08000dc0 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <vApplicationTickHook+0x18>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <vApplicationTickHook+0x18>)
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	240002e8 	.word	0x240002e8

08000ddc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_FREERTOS_Init+0xa8>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_FREERTOS_Init+0xac>)
 8000de6:	f00d fb2f 	bl	800e448 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <MX_FREERTOS_Init+0xb0>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <MX_FREERTOS_Init+0xb4>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_FREERTOS_Init+0xb8>)
 8000df6:	f00d fb27 	bl	800e448 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <MX_FREERTOS_Init+0xbc>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <MX_FREERTOS_Init+0xc0>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <MX_FREERTOS_Init+0xc4>)
 8000e06:	f00d fb1f 	bl	800e448 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <MX_FREERTOS_Init+0xc8>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_FREERTOS_Init+0xcc>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_FREERTOS_Init+0xd0>)
 8000e16:	f00d fb17 	bl	800e448 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <MX_FREERTOS_Init+0xd4>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000e20:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <MX_FREERTOS_Init+0xd8>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <MX_FREERTOS_Init+0xdc>)
 8000e26:	f00d fb0f 	bl	800e448 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_FREERTOS_Init+0xe0>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000e30:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <MX_FREERTOS_Init+0xe4>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <MX_FREERTOS_Init+0xe8>)
 8000e36:	f00d fb07 	bl	800e448 <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <MX_FREERTOS_Init+0xec>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000e40:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <MX_FREERTOS_Init+0xf0>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <MX_FREERTOS_Init+0xf4>)
 8000e46:	f00d faff 	bl	800e448 <osThreadNew>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_FREERTOS_Init+0xf8>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_FREERTOS_Init+0xfc>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4821      	ldr	r0, [pc, #132]	; (8000edc <MX_FREERTOS_Init+0x100>)
 8000e56:	f00d faf7 	bl	800e448 <osThreadNew>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <MX_FREERTOS_Init+0x104>)
 8000e5e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <MX_FREERTOS_Init+0x108>)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <MX_FREERTOS_Init+0x10c>)
 8000e66:	f00d faef 	bl	800e448 <osThreadNew>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <MX_FREERTOS_Init+0x110>)
 8000e6e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <MX_FREERTOS_Init+0x114>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <MX_FREERTOS_Init+0x118>)
 8000e76:	f00d fae7 	bl	800e448 <osThreadNew>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <MX_FREERTOS_Init+0x11c>)
 8000e7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08012268 	.word	0x08012268
 8000e88:	08000efd 	.word	0x08000efd
 8000e8c:	240002ec 	.word	0x240002ec
 8000e90:	0801228c 	.word	0x0801228c
 8000e94:	08000f0d 	.word	0x08000f0d
 8000e98:	240002f0 	.word	0x240002f0
 8000e9c:	080122b0 	.word	0x080122b0
 8000ea0:	08000f1d 	.word	0x08000f1d
 8000ea4:	240002f4 	.word	0x240002f4
 8000ea8:	080122d4 	.word	0x080122d4
 8000eac:	08000f2d 	.word	0x08000f2d
 8000eb0:	240002f8 	.word	0x240002f8
 8000eb4:	080122f8 	.word	0x080122f8
 8000eb8:	08000f3d 	.word	0x08000f3d
 8000ebc:	240002fc 	.word	0x240002fc
 8000ec0:	0801231c 	.word	0x0801231c
 8000ec4:	08000f4d 	.word	0x08000f4d
 8000ec8:	24000300 	.word	0x24000300
 8000ecc:	08012340 	.word	0x08012340
 8000ed0:	08000f5d 	.word	0x08000f5d
 8000ed4:	24000304 	.word	0x24000304
 8000ed8:	08012364 	.word	0x08012364
 8000edc:	08001039 	.word	0x08001039
 8000ee0:	24000308 	.word	0x24000308
 8000ee4:	08012388 	.word	0x08012388
 8000ee8:	08001049 	.word	0x08001049
 8000eec:	2400030c 	.word	0x2400030c
 8000ef0:	080123ac 	.word	0x080123ac
 8000ef4:	08001059 	.word	0x08001059
 8000ef8:	24000310 	.word	0x24000310

08000efc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f00d fb31 	bl	800e56c <osDelay>
 8000f0a:	e7fb      	b.n	8000f04 <PMT_init+0x8>

08000f0c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f00d fb29 	bl	800e56c <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <ERPA_init+0x8>

08000f1c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f00d fb21 	bl	800e56c <osDelay>
 8000f2a:	e7fb      	b.n	8000f24 <HK_init+0x8>

08000f2c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f00d fb19 	bl	800e56c <osDelay>
 8000f3a:	e7fb      	b.n	8000f34 <AUTOINIT_init+0x8>

08000f3c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f00d fb11 	bl	800e56c <osDelay>
 8000f4a:	e7fb      	b.n	8000f44 <AUTODEINIT_init+0x8>

08000f4c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f00d fb09 	bl	800e56c <osDelay>
 8000f5a:	e7fb      	b.n	8000f54 <UART_TX_init+0x8>

08000f5c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <Voltage_Monitor_init+0xd8>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	f00d fb5c 	bl	800e62c <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8000f74:	f001 fb92 	bl	800269c <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8000f78:	f001 fc36 	bl	80027e8 <get_rail_monitor>
 8000f7c:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e052      	b.n	800102a <Voltage_Monitor_init+0xce>
			if (rail_monitor_ptr[i].is_enabled){
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4413      	add	r3, r2
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d044      	beq.n	8001024 <Voltage_Monitor_init+0xc8>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	8898      	ldrh	r0, [r3, #4]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4413      	add	r3, r2
 8000fbc:	891b      	ldrh	r3, [r3, #8]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	88db      	ldrh	r3, [r3, #6]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f001 fbf0 	bl	80027b8 <in_range>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d122      	bne.n	8001024 <Voltage_Monitor_init+0xc8>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	785a      	ldrb	r2, [r3, #1]
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	705a      	strb	r2, [r3, #1]
					// If that rails' error count is at 3, proceed with error protocol for that rail
					if (rail_monitor_ptr[i].error_count == 3) {
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d10b      	bne.n	8001024 <Voltage_Monitor_init+0xc8>
						error_protocol(rail_monitor_ptr[i].name);
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe9a 	bl	8000d58 <error_protocol>
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b11      	cmp	r3, #17
 800102e:	dda9      	ble.n	8000f84 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001030:	e798      	b.n	8000f64 <Voltage_Monitor_init+0x8>
 8001032:	bf00      	nop
 8001034:	240002e4 	.word	0x240002e4

08001038 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f00d fa93 	bl	800e56c <osDelay>
 8001046:	e7fb      	b.n	8001040 <STOP_init+0x8>

08001048 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f00d fa8b 	bl	800e56c <osDelay>
 8001056:	e7fb      	b.n	8001050 <Science_init+0x8>

08001058 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f00d fa83 	bl	800e56c <osDelay>
 8001066:	e7fb      	b.n	8001060 <Idle_init+0x8>

08001068 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <MX_GPIO_Init+0xe8>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a32      	ldr	r2, [pc, #200]	; (8001150 <MX_GPIO_Init+0xe8>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <MX_GPIO_Init+0xe8>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_GPIO_Init+0xe8>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_GPIO_Init+0xe8>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <MX_GPIO_Init+0xec>)
 80010fe:	f005 fb43 	bl	8006788 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2164      	movs	r1, #100	; 0x64
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <MX_GPIO_Init+0xf0>)
 8001108:	f005 fb3e 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800110c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001110:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0xec>)
 8001126:	f005 f97f 	bl	8006428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_GPIO_Init+0xf0>)
 8001142:	f005 f971 	bl	8006428 <HAL_GPIO_Init>

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	58024400 	.word	0x58024400
 8001154:	58020800 	.word	0x58020800
 8001158:	58020400 	.word	0x58020400

0800115c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <MX_I2C1_Init+0x7c>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <MX_I2C1_Init+0x80>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_I2C1_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001174:	2201      	movs	r2, #1
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_I2C1_Init+0x78>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x78>)
 800118c:	2200      	movs	r2, #0
 800118e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001198:	f005 fb10 	bl	80067bc <HAL_I2C_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011a2:	f000 f9bf 	bl	8001524 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <MX_I2C1_Init+0x78>)
 80011aa:	f006 f857 	bl	800725c <HAL_I2CEx_ConfigAnalogFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011b4:	f000 f9b6 	bl	8001524 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b8:	2100      	movs	r1, #0
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_I2C1_Init+0x78>)
 80011bc:	f006 f899 	bl	80072f2 <HAL_I2CEx_ConfigDigitalFilter>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011c6:	f000 f9ad 	bl	8001524 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f006 f8de 	bl	800738c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24000314 	.word	0x24000314
 80011d8:	40005400 	.word	0x40005400
 80011dc:	0020081f 	.word	0x0020081f

080011e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ba      	sub	sp, #232	; 0xe8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	22c0      	movs	r2, #192	; 0xc0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f010 f9f3 	bl	80115ec <memset>
  if(i2cHandle->Instance==I2C1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_I2C_MspInit+0xc8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d146      	bne.n	800129e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001210:	f04f 0208 	mov.w	r2, #8
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4618      	mov	r0, r3
 8001228:	f007 f936 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001232:	f000 f977 	bl	8001524 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001254:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126e:	2304      	movs	r3, #4
 8001270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <HAL_I2C_MspInit+0xd0>)
 800127c:	f005 f8d4 	bl	8006428 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 8001282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_I2C_MspInit+0xcc>)
 8001292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	37e8      	adds	r7, #232	; 0xe8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005400 	.word	0x40005400
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020400 	.word	0x58020400

080012b4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d106      	bne.n	80012d2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00d f96a 	bl	800e5a4 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80012d0:	e01e      	b.n	8001310 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d106      	bne.n	80012e8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2102      	movs	r1, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00d f95f 	bl	800e5a4 <osEventFlagsSet>
}
 80012e6:	e013      	b.n	8001310 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d10c      	bne.n	800130a <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2108      	movs	r1, #8
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00d f954 	bl	800e5a4 <osEventFlagsSet>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2104      	movs	r1, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f00d f94e 	bl	800e5a4 <osEventFlagsSet>
}
 8001308:	e002      	b.n	8001310 <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800130c:	f010 fac4 	bl	8011898 <puts>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	24000528 	.word	0x24000528
 800131c:	240002e4 	.word	0x240002e4
 8001320:	24000574 	.word	0x24000574
 8001324:	240005c0 	.word	0x240005c0
 8001328:	08012098 	.word	0x08012098

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f001 fa8e 	bl	8002850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f824 	bl	8001380 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001338:	f000 f8a2 	bl	8001480 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f7ff fe94 	bl	8001068 <MX_GPIO_Init>
  MX_DMA_Init();
 8001340:	f7ff fcd2 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001344:	f000 ff8e 	bl	8002264 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001348:	f001 f8ba 	bl	80024c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800134c:	f7ff ff06 	bl	800115c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001350:	f000 fae0 	bl	8001914 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001354:	f000 ff10 	bl	8002178 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001358:	f000 fe60 	bl	800201c <MX_TIM1_Init>
  MX_ADC3_Init();
 800135c:	f7ff fa64 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001360:	f7ff f940 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001364:	f7ff fc0c 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001368:	f000 fa7c 	bl	8001864 <MX_SPI1_Init>
  MX_RTC_Init();
 800136c:	f000 f900 	bl	8001570 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001370:	f00d f820 	bl	800e3b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001374:	f7ff fd32 	bl	8000ddc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001378:	f00d f840 	bl	800e3fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800137c:	e7fe      	b.n	800137c <main+0x50>
	...

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09c      	sub	sp, #112	; 0x70
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	224c      	movs	r2, #76	; 0x4c
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f010 f92c 	bl	80115ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2220      	movs	r2, #32
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f010 f926 	bl	80115ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f006 f817 	bl	80073d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <SystemClock_Config+0xf8>)
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <SystemClock_Config+0xf8>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <SystemClock_Config+0xf8>)
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <SystemClock_Config+0xfc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c8:	4a2c      	ldr	r2, [pc, #176]	; (800147c <SystemClock_Config+0xfc>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <SystemClock_Config+0xfc>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013dc:	bf00      	nop
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <SystemClock_Config+0xfc>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ea:	d1f8      	bne.n	80013de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013ec:	2303      	movs	r3, #3
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80013f6:	2309      	movs	r3, #9
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	2302      	movs	r3, #2
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001406:	2304      	movs	r3, #4
 8001408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800140a:	2320      	movs	r3, #32
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800140e:	2304      	movs	r3, #4
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001412:	2304      	movs	r3, #4
 8001414:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001416:	2302      	movs	r3, #2
 8001418:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800141a:	2308      	movs	r3, #8
 800141c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800141e:	2300      	movs	r3, #0
 8001420:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4618      	mov	r0, r3
 800142c:	f006 f80c 	bl	8007448 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001436:	f000 f875 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	233f      	movs	r3, #63	; 0x3f
 800143c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2303      	movs	r3, #3
 8001440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f006 fc4c 	bl	8007cfc <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800146a:	f000 f85b 	bl	8001524 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3770      	adds	r7, #112	; 0x70
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	58000400 	.word	0x58000400
 800147c:	58024800 	.word	0x58024800

08001480 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0b0      	sub	sp, #192	; 0xc0
 8001484:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	22c0      	movs	r2, #192	; 0xc0
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f010 f8ad 	bl	80115ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001492:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800149e:	2304      	movs	r3, #4
 80014a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80014a2:	2320      	movs	r3, #32
 80014a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80014a6:	2308      	movs	r3, #8
 80014a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4618      	mov	r0, r3
 80014c8:	f006 ffe6 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014d2:	f000 f827 	bl	8001524 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	37c0      	adds	r7, #192	; 0xc0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_UART_TxCpltCallback+0x1c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	24000000 	.word	0x24000000

08001500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001512:	f001 f9d9 	bl	80028c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40001000 	.word	0x40001000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>

0800152e <create_packet>:
	default:
		return -1;
	}
}

packet_t create_packet(const uint8_t *data, uint16_t size) {
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	4613      	mov	r3, r2
 800153a:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4618      	mov	r0, r3
 8001540:	f010 f836 	bl	80115b0 <malloc>
 8001544:	4603      	mov	r3, r0
 8001546:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f010 f83e 	bl	80115d0 <memcpy>
	packet.size = size;
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	461a      	mov	r2, r3
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001564:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_RTC_Init+0xb4>)
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <MX_RTC_Init+0xb8>)
 800158c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <MX_RTC_Init+0xb4>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <MX_RTC_Init+0xb4>)
 8001596:	2263      	movs	r2, #99	; 0x63
 8001598:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_RTC_Init+0xb4>)
 800159c:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_RTC_Init+0xb4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_RTC_Init+0xb4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_RTC_Init+0xb4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_RTC_Init+0xb4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <MX_RTC_Init+0xb4>)
 80015bc:	f009 fc6a 	bl	800ae94 <HAL_RTC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015c6:	f7ff ffad 	bl	8001524 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2201      	movs	r2, #1
 80015e2:	4619      	mov	r1, r3
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <MX_RTC_Init+0xb4>)
 80015e6:	f009 fcd7 	bl	800af98 <HAL_RTC_SetTime>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80015f0:	f7ff ff98 	bl	8001524 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015f4:	2301      	movs	r3, #1
 80015f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015f8:	2301      	movs	r3, #1
 80015fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001600:	2300      	movs	r3, #0
 8001602:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	2201      	movs	r2, #1
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_RTC_Init+0xb4>)
 800160c:	f009 fd62 	bl	800b0d4 <HAL_RTC_SetDate>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001616:	f7ff ff85 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000368 	.word	0x24000368
 8001628:	58004000 	.word	0x58004000

0800162c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b2      	sub	sp, #200	; 0xc8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	22c0      	movs	r2, #192	; 0xc0
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f00f ffd5 	bl	80115ec <memset>
  if(rtcHandle->Instance==RTC)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_RTC_MspInit+0x5c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d118      	bne.n	800167e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800164c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RTC_MspInit+0x60>)
 800165a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f006 ff18 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800166e:	f7ff ff59 	bl	8001524 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_RTC_MspInit+0x64>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_RTC_MspInit+0x64>)
 8001678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	37c8      	adds	r7, #200	; 0xc8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58004000 	.word	0x58004000
 800168c:	00019300 	.word	0x00019300
 8001690:	58024400 	.word	0x58024400

08001694 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800169e:	2300      	movs	r3, #0
 80016a0:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	b299      	uxth	r1, r3
 80016a6:	f107 0208 	add.w	r2, r7, #8
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4816      	ldr	r0, [pc, #88]	; (800170c <poll_i2c_sensor+0x78>)
 80016b4:	f005 f91e 	bl	80068f4 <HAL_I2C_Master_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80016bc:	7b7b      	ldrb	r3, [r7, #13]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <poll_i2c_sensor+0x34>
		Error_Handler();
 80016c2:	f7ff ff2f 	bl	8001524 <Error_Handler>
 80016c6:	e01b      	b.n	8001700 <poll_i2c_sensor+0x6c>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	b299      	uxth	r1, r3
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <poll_i2c_sensor+0x78>)
 80016da:	f005 fa23 	bl	8006b24 <HAL_I2C_Master_Receive>
 80016de:	4603      	mov	r3, r0
 80016e0:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80016e2:	7b7b      	ldrb	r3, [r7, #13]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <poll_i2c_sensor+0x5a>
			Error_Handler();
 80016e8:	f7ff ff1c 	bl	8001524 <Error_Handler>
 80016ec:	e008      	b.n	8001700 <poll_i2c_sensor+0x6c>
		} else {
			output = (int16_t) (buf[0] << 8);
 80016ee:	7a3b      	ldrb	r3, [r7, #8]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80016f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f8:	7a7a      	ldrb	r2, [r7, #9]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	10db      	asrs	r3, r3, #3
 80016fe:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	24000314 	.word	0x24000314

08001710 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001718:	2390      	movs	r3, #144	; 0x90
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffba 	bl	8001694 <poll_i2c_sensor>
 8001720:	4603      	mov	r3, r0
 8001722:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001724:	2394      	movs	r3, #148	; 0x94
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffb4 	bl	8001694 <poll_i2c_sensor>
 800172c:	4603      	mov	r3, r0
 800172e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001730:	2392      	movs	r3, #146	; 0x92
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffae 	bl	8001694 <poll_i2c_sensor>
 8001738:	4603      	mov	r3, r0
 800173a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800173c:	2396      	movs	r3, #150	; 0x96
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ffa8 	bl	8001694 <poll_i2c_sensor>
 8001744:	4603      	mov	r3, r0
 8001746:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3302      	adds	r3, #2
 8001752:	89ba      	ldrh	r2, [r7, #12]
 8001754:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3304      	adds	r3, #4
 800175a:	897a      	ldrh	r2, [r7, #10]
 800175c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3306      	adds	r3, #6
 8001762:	893a      	ldrh	r2, [r7, #8]
 8001764:	801a      	strh	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <receive_hk_adc1+0xa0>)
 800177a:	8a9b      	ldrh	r3, [r3, #20]
 800177c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <receive_hk_adc1+0xa0>)
 8001780:	8a1b      	ldrh	r3, [r3, #16]
 8001782:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <receive_hk_adc1+0xa0>)
 8001786:	899b      	ldrh	r3, [r3, #12]
 8001788:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <receive_hk_adc1+0xa0>)
 800178c:	8a5b      	ldrh	r3, [r3, #18]
 800178e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <receive_hk_adc1+0xa0>)
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <receive_hk_adc1+0xa0>)
 8001798:	88db      	ldrh	r3, [r3, #6]
 800179a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <receive_hk_adc1+0xa0>)
 800179e:	89db      	ldrh	r3, [r3, #14]
 80017a0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <receive_hk_adc1+0xa0>)
 80017a4:	891b      	ldrh	r3, [r3, #8]
 80017a6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <receive_hk_adc1+0xa0>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <receive_hk_adc1+0xa0>)
 80017b0:	895b      	ldrh	r3, [r3, #10]
 80017b2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	8bfa      	ldrh	r2, [r7, #30]
 80017b8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3302      	adds	r3, #2
 80017be:	8bba      	ldrh	r2, [r7, #28]
 80017c0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3304      	adds	r3, #4
 80017c6:	8b7a      	ldrh	r2, [r7, #26]
 80017c8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3306      	adds	r3, #6
 80017ce:	8b3a      	ldrh	r2, [r7, #24]
 80017d0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3308      	adds	r3, #8
 80017d6:	8afa      	ldrh	r2, [r7, #22]
 80017d8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	330a      	adds	r3, #10
 80017de:	8aba      	ldrh	r2, [r7, #20]
 80017e0:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	330c      	adds	r3, #12
 80017e6:	8a7a      	ldrh	r2, [r7, #18]
 80017e8:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	330e      	adds	r3, #14
 80017ee:	8a3a      	ldrh	r2, [r7, #16]
 80017f0:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3310      	adds	r3, #16
 80017f6:	89fa      	ldrh	r2, [r7, #14]
 80017f8:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3312      	adds	r3, #18
 80017fe:	89ba      	ldrh	r2, [r7, #12]
 8001800:	801a      	strh	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	240003a0 	.word	0x240003a0

08001814 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <receive_hk_adc3+0x4c>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <receive_hk_adc3+0x4c>)
 8001824:	885b      	ldrh	r3, [r3, #2]
 8001826:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <receive_hk_adc3+0x4c>)
 800182a:	889b      	ldrh	r3, [r3, #4]
 800182c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <receive_hk_adc3+0x4c>)
 8001830:	88db      	ldrh	r3, [r3, #6]
 8001832:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	89fa      	ldrh	r2, [r7, #14]
 8001838:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3302      	adds	r3, #2
 800183e:	89ba      	ldrh	r2, [r7, #12]
 8001840:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	897a      	ldrh	r2, [r7, #10]
 8001848:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3306      	adds	r3, #6
 800184e:	893a      	ldrh	r2, [r7, #8]
 8001850:	801a      	strh	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	240003c0 	.word	0x240003c0

08001864 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_SPI1_Init+0xa8>)
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <MX_SPI1_Init+0xac>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_SPI1_Init+0xa8>)
 8001870:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_SPI1_Init+0xa8>)
 8001878:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800187c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_SPI1_Init+0xa8>)
 8001880:	220f      	movs	r2, #15
 8001882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_SPI1_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <MX_SPI1_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_SPI1_Init+0xa8>)
 8001892:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_SPI1_Init+0xa8>)
 800189a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800189e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_SPI1_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_SPI1_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI1_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0xa8>)
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI1_Init+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0xa8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0xa8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0xa8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_SPI1_Init+0xa8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0xa8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_SPI1_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0xa8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_SPI1_Init+0xa8>)
 80018f8:	f009 fd2a 	bl	800b350 <HAL_SPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001902:	f7ff fe0f 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	240003c8 	.word	0x240003c8
 8001910:	40013000 	.word	0x40013000

08001914 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <MX_SPI2_Init+0xa8>)
 800191a:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <MX_SPI2_Init+0xac>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001928:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800192c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800192e:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001930:	220f      	movs	r2, #15
 8001932:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_SPI2_Init+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001942:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001946:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MX_SPI2_Init+0xa8>)
 800194a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800194e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_SPI2_Init+0xa8>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_SPI2_Init+0xa8>)
 800196a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001972:	2200      	movs	r2, #0
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_SPI2_Init+0xa8>)
 800197e:	2200      	movs	r2, #0
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_SPI2_Init+0xa8>)
 800198a:	2200      	movs	r2, #0
 800198c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001990:	2200      	movs	r2, #0
 8001992:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_SPI2_Init+0xa8>)
 8001996:	2200      	movs	r2, #0
 8001998:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_SPI2_Init+0xa8>)
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_SPI2_Init+0xa8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_SPI2_Init+0xa8>)
 80019a8:	f009 fcd2 	bl	800b350 <HAL_SPI_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80019b2:	f7ff fdb7 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	24000450 	.word	0x24000450
 80019c0:	40003800 	.word	0x40003800

080019c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0bc      	sub	sp, #240	; 0xf0
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	22c0      	movs	r2, #192	; 0xc0
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00f fe01 	bl	80115ec <memset>
  if(spiHandle->Instance==SPI1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_SPI_MspInit+0x15c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d145      	bne.n	8001a80 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80019f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f006 fd45 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a14:	f7ff fd86 	bl	8001524 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a18:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a1e:	4a41      	ldr	r2, [pc, #260]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a28:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a39      	ldr	r2, [pc, #228]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a54:	2318      	movs	r3, #24
 8001a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a76:	4619      	mov	r1, r3
 8001a78:	482b      	ldr	r0, [pc, #172]	; (8001b28 <HAL_SPI_MspInit+0x164>)
 8001a7a:	f004 fcd5 	bl	8006428 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a7e:	e04a      	b.n	8001b16 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <HAL_SPI_MspInit+0x168>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d145      	bne.n	8001b16 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 fcfa 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8001aaa:	f7ff fd3b 	bl	8001524 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_SPI_MspInit+0x160>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001aea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b04:	2305      	movs	r3, #5
 8001b06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_SPI_MspInit+0x164>)
 8001b12:	f004 fc89 	bl	8006428 <HAL_GPIO_Init>
}
 8001b16:	bf00      	nop
 8001b18:	37f0      	adds	r7, #240	; 0xf0
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40013000 	.word	0x40013000
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58020400 	.word	0x58020400
 8001b2c:	40003800 	.word	0x40003800

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x38>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_MspInit+0x38>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_MspInit+0x38>)
 8001b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	210f      	movs	r1, #15
 8001b58:	f06f 0001 	mvn.w	r0, #1
 8001b5c:	f002 f848 	bl	8003bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58024400 	.word	0x58024400

08001b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b090      	sub	sp, #64	; 0x40
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d827      	bhi.n	8001bca <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	2036      	movs	r0, #54	; 0x36
 8001b80:	f002 f836 	bl	8003bf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b84:	2036      	movs	r0, #54	; 0x36
 8001b86:	f002 f84d 	bl	8003c24 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_InitTick+0xc4>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_InitTick+0xc8>)
 8001b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b96:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_InitTick+0xc8>)
 8001b98:	f043 0310 	orr.w	r3, r3, #16
 8001b9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_InitTick+0xc8>)
 8001ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bae:	f107 0210 	add.w	r2, r7, #16
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 fc2b 	bl	8008414 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d106      	bne.n	8001bd6 <HAL_InitTick+0x6a>
 8001bc8:	e001      	b.n	8001bce <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02b      	b.n	8001c26 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bce:	f006 fbf5 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 8001bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001bd4:	e004      	b.n	8001be0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bd6:	f006 fbf1 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_InitTick+0xcc>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	3b01      	subs	r3, #1
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_InitTick+0xd0>)
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_InitTick+0xd4>)
 8001bf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_InitTick+0xd0>)
 8001bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bfa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_InitTick+0xd0>)
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_InitTick+0xd0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_InitTick+0xd0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c0e:	480b      	ldr	r0, [pc, #44]	; (8001c3c <HAL_InitTick+0xd0>)
 8001c10:	f009 fcdd 	bl	800b5ce <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c1a:	4808      	ldr	r0, [pc, #32]	; (8001c3c <HAL_InitTick+0xd0>)
 8001c1c:	f009 fd2e 	bl	800b67c <HAL_TIM_Base_Start_IT>
 8001c20:	4603      	mov	r3, r0
 8001c22:	e000      	b.n	8001c26 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3740      	adds	r7, #64	; 0x40
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2400000c 	.word	0x2400000c
 8001c34:	58024400 	.word	0x58024400
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	240004d8 	.word	0x240004d8
 8001c40:	40001000 	.word	0x40001000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <DMA1_Stream0_IRQHandler+0x10>)
 8001c76:	f003 fa71 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24000164 	.word	0x24000164

08001c84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA1_Stream1_IRQHandler+0x10>)
 8001c8a:	f003 fa67 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	240001dc 	.word	0x240001dc

08001c98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA1_Stream2_IRQHandler+0x10>)
 8001c9e:	f003 fa5d 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	240006a0 	.word	0x240006a0

08001cac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA1_Stream5_IRQHandler+0x10>)
 8001cb2:	f003 fa53 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	24000268 	.word	0x24000268

08001cc0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_BRK_IRQHandler+0x10>)
 8001cc6:	f009 fdb2 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000528 	.word	0x24000528

08001cd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM1_UP_IRQHandler+0x10>)
 8001cda:	f009 fda8 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000528 	.word	0x24000528

08001ce8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001cee:	f009 fd9e 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	24000528 	.word	0x24000528

08001cfc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM1_CC_IRQHandler+0x10>)
 8001d02:	f009 fd94 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	24000528 	.word	0x24000528

08001d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM2_IRQHandler+0x10>)
 8001d16:	f009 fd8a 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	24000574 	.word	0x24000574

08001d24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM3_IRQHandler+0x10>)
 8001d2a:	f009 fd80 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	240005c0 	.word	0x240005c0

08001d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART1_IRQHandler+0x10>)
 8001d3e:	f00a fe3b 	bl	800c9b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2400060c 	.word	0x2400060c

08001d4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <TIM6_DAC_IRQHandler+0x20>)
 8001d52:	791b      	ldrb	r3, [r3, #4]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <TIM6_DAC_IRQHandler+0x20>)
 8001d5c:	f001 ff92 	bl	8003c84 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <TIM6_DAC_IRQHandler+0x24>)
 8001d62:	f009 fd64 	bl	800b82e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	24000254 	.word	0x24000254
 8001d70:	240004d8 	.word	0x240004d8

08001d74 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <ITM_SendChar+0x48>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <ITM_SendChar+0x48>)
 8001d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d88:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <ITM_SendChar+0x4c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <ITM_SendChar+0x4c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8001d96:	bf00      	nop
 8001d98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f8      	beq.n	8001d98 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8001da6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000edfc 	.word	0xe000edfc
 8001dc0:	e0000e00 	.word	0xe0000e00

08001dc4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
		*ptr++ = __io_getchar();
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
	}

	return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ffab 	bl	8001d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
	}
	return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_close>:

int _close(int file) {
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:

int _fstat(int file, struct stat *st) {
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_isatty>:

int _isatty(int file) {
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
		errno = ENOMEM;
 8001ed0:	f00f fb44 	bl	801155c <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24080000 	.word	0x24080000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	24000524 	.word	0x24000524
 8001f08:	24005130 	.word	0x24005130

08001f0c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <SystemInit+0xe4>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <SystemInit+0xe4>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <SystemInit+0xe8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d807      	bhi.n	8001f3c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <SystemInit+0xe8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 030f 	bic.w	r3, r3, #15
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <SystemInit+0xe8>)
 8001f36:	f043 0307 	orr.w	r3, r3, #7
 8001f3a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <SystemInit+0xec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <SystemInit+0xec>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <SystemInit+0xec>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <SystemInit+0xec>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4929      	ldr	r1, [pc, #164]	; (8001ff8 <SystemInit+0xec>)
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <SystemInit+0xf0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <SystemInit+0xe8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <SystemInit+0xe8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 030f 	bic.w	r3, r3, #15
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <SystemInit+0xe8>)
 8001f70:	f043 0307 	orr.w	r3, r3, #7
 8001f74:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <SystemInit+0xec>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <SystemInit+0xec>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <SystemInit+0xec>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <SystemInit+0xec>)
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <SystemInit+0xf4>)
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <SystemInit+0xec>)
 8001f90:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <SystemInit+0xf8>)
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <SystemInit+0xec>)
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <SystemInit+0xfc>)
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <SystemInit+0xec>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <SystemInit+0xec>)
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <SystemInit+0xfc>)
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <SystemInit+0xec>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <SystemInit+0xec>)
 8001fae:	4a16      	ldr	r2, [pc, #88]	; (8002008 <SystemInit+0xfc>)
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <SystemInit+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SystemInit+0xec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <SystemInit+0xec>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <SystemInit+0xec>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <SystemInit+0x100>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <SystemInit+0x104>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd6:	d202      	bcs.n	8001fde <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <SystemInit+0x108>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <SystemInit+0x10c>)
 8001fe0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fe4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00
 8001ff4:	52002000 	.word	0x52002000
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002000:	02020200 	.word	0x02020200
 8002004:	01ff0000 	.word	0x01ff0000
 8002008:	01010280 	.word	0x01010280
 800200c:	5c001000 	.word	0x5c001000
 8002010:	ffff0000 	.word	0xffff0000
 8002014:	51008108 	.word	0x51008108
 8002018:	52004000 	.word	0x52004000

0800201c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b09a      	sub	sp, #104	; 0x68
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	222c      	movs	r2, #44	; 0x2c
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00f fac8 	bl	80115ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800205c:	4b44      	ldr	r3, [pc, #272]	; (8002170 <MX_TIM1_Init+0x154>)
 800205e:	4a45      	ldr	r2, [pc, #276]	; (8002174 <MX_TIM1_Init+0x158>)
 8002060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <MX_TIM1_Init+0x154>)
 8002064:	2231      	movs	r2, #49	; 0x31
 8002066:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <MX_TIM1_Init+0x154>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <MX_TIM1_Init+0x154>)
 8002070:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <MX_TIM1_Init+0x154>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <MX_TIM1_Init+0x154>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <MX_TIM1_Init+0x154>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002088:	4839      	ldr	r0, [pc, #228]	; (8002170 <MX_TIM1_Init+0x154>)
 800208a:	f009 faa0 	bl	800b5ce <HAL_TIM_Base_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002094:	f7ff fa46 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800209e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020a2:	4619      	mov	r1, r3
 80020a4:	4832      	ldr	r0, [pc, #200]	; (8002170 <MX_TIM1_Init+0x154>)
 80020a6:	f009 fddd 	bl	800bc64 <HAL_TIM_ConfigClockSource>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020b0:	f7ff fa38 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020b4:	482e      	ldr	r0, [pc, #184]	; (8002170 <MX_TIM1_Init+0x154>)
 80020b6:	f009 fb59 	bl	800b76c <HAL_TIM_PWM_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020c0:	f7ff fa30 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d4:	4619      	mov	r1, r3
 80020d6:	4826      	ldr	r0, [pc, #152]	; (8002170 <MX_TIM1_Init+0x154>)
 80020d8:	f00a faf4 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020e2:	f7ff fa1f 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e6:	2360      	movs	r3, #96	; 0x60
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80020ea:	f240 13df 	movw	r3, #479	; 0x1df
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f0:	2300      	movs	r3, #0
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <MX_TIM1_Init+0x154>)
 800210e:	f009 fc95 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002118:	f7ff fa04 	bl	8001524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800213e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_TIM1_Init+0x154>)
 8002152:	f00a fb45 	bl	800c7e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800215c:	f7ff f9e2 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002160:	4803      	ldr	r0, [pc, #12]	; (8002170 <MX_TIM1_Init+0x154>)
 8002162:	f000 f949 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3768      	adds	r7, #104	; 0x68
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24000528 	.word	0x24000528
 8002174:	40010000 	.word	0x40010000

08002178 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021b4:	2231      	movs	r2, #49	; 0x31
 80021b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021c0:	f640 4234 	movw	r2, #3124	; 0xc34
 80021c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d2:	4823      	ldr	r0, [pc, #140]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021d4:	f009 f9fb 	bl	800b5ce <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021de:	f7ff f9a1 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ec:	4619      	mov	r1, r3
 80021ee:	481c      	ldr	r0, [pc, #112]	; (8002260 <MX_TIM2_Init+0xe8>)
 80021f0:	f009 fd38 	bl	800bc64 <HAL_TIM_ConfigClockSource>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021fa:	f7ff f993 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021fe:	4818      	ldr	r0, [pc, #96]	; (8002260 <MX_TIM2_Init+0xe8>)
 8002200:	f009 fab4 	bl	800b76c <HAL_TIM_PWM_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800220a:	f7ff f98b 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800220e:	2320      	movs	r3, #32
 8002210:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4810      	ldr	r0, [pc, #64]	; (8002260 <MX_TIM2_Init+0xe8>)
 800221e:	f00a fa51 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002228:	f7ff f97c 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222c:	2360      	movs	r3, #96	; 0x60
 800222e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	220c      	movs	r2, #12
 8002240:	4619      	mov	r1, r3
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM2_Init+0xe8>)
 8002244:	f009 fbfa 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800224e:	f7ff f969 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM2_Init+0xe8>)
 8002254:	f000 f8d0 	bl	80023f8 <HAL_TIM_MspPostInit>

}
 8002258:	bf00      	nop
 800225a:	3738      	adds	r7, #56	; 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	24000574 	.word	0x24000574

08002264 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_TIM3_Init+0x94>)
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <MX_TIM3_Init+0x98>)
 8002286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_TIM3_Init+0x94>)
 800228a:	2263      	movs	r2, #99	; 0x63
 800228c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MX_TIM3_Init+0x94>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_TIM3_Init+0x94>)
 8002296:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800229a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_TIM3_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_TIM3_Init+0x94>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022a8:	4813      	ldr	r0, [pc, #76]	; (80022f8 <MX_TIM3_Init+0x94>)
 80022aa:	f009 f990 	bl	800b5ce <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80022b4:	f7ff f936 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <MX_TIM3_Init+0x94>)
 80022c6:	f009 fccd 	bl	800bc64 <HAL_TIM_ConfigClockSource>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80022d0:	f7ff f928 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_TIM3_Init+0x94>)
 80022e2:	f00a f9ef 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80022ec:	f7ff f91a 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	240005c0 	.word	0x240005c0
 80022fc:	40000400 	.word	0x40000400

08002300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <HAL_TIM_Base_MspInit+0xec>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12f      	bne.n	8002372 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 8002314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002318:	4a35      	ldr	r2, [pc, #212]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2105      	movs	r1, #5
 8002334:	2018      	movs	r0, #24
 8002336:	f001 fc5b 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800233a:	2018      	movs	r0, #24
 800233c:	f001 fc72 	bl	8003c24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2105      	movs	r1, #5
 8002344:	2019      	movs	r0, #25
 8002346:	f001 fc53 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800234a:	2019      	movs	r0, #25
 800234c:	f001 fc6a 	bl	8003c24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2105      	movs	r1, #5
 8002354:	201a      	movs	r0, #26
 8002356:	f001 fc4b 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800235a:	201a      	movs	r0, #26
 800235c:	f001 fc62 	bl	8003c24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2105      	movs	r1, #5
 8002364:	201b      	movs	r0, #27
 8002366:	f001 fc43 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800236a:	201b      	movs	r0, #27
 800236c:	f001 fc5a 	bl	8003c24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002370:	e038      	b.n	80023e4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d117      	bne.n	80023ac <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 800237e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002382:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 800238e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2105      	movs	r1, #5
 800239e:	201c      	movs	r0, #28
 80023a0:	f001 fc26 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023a4:	201c      	movs	r0, #28
 80023a6:	f001 fc3d 	bl	8003c24 <HAL_NVIC_EnableIRQ>
}
 80023aa:	e01b      	b.n	80023e4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_TIM_Base_MspInit+0xf4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d116      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 80023b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_TIM_Base_MspInit+0xf0>)
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2105      	movs	r1, #5
 80023d8:	201d      	movs	r0, #29
 80023da:	f001 fc09 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023de:	201d      	movs	r0, #29
 80023e0:	f001 fc20 	bl	8003c24 <HAL_NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010000 	.word	0x40010000
 80023f0:	58024400 	.word	0x58024400
 80023f4:	40000400 	.word	0x40000400

080023f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <HAL_TIM_MspPostInit+0xb8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d120      	bne.n	800245c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800244a:	2301      	movs	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4818      	ldr	r0, [pc, #96]	; (80024b8 <HAL_TIM_MspPostInit+0xc0>)
 8002456:	f003 ffe7 	bl	8006428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800245a:	e024      	b.n	80024a6 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d11f      	bne.n	80024a6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_TIM_MspPostInit+0xbc>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4806      	ldr	r0, [pc, #24]	; (80024bc <HAL_TIM_MspPostInit+0xc4>)
 80024a2:	f003 ffc1 	bl	8006428 <HAL_GPIO_Init>
}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40010000 	.word	0x40010000
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58020000 	.word	0x58020000
 80024bc:	58020400 	.word	0x58020400

080024c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <MX_USART1_UART_Init+0x94>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024cc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_USART1_UART_Init+0x90>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <MX_USART1_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <MX_USART1_UART_Init+0x90>)
 800250a:	f00a fa05 	bl	800c918 <HAL_UART_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002514:	f7ff f806 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002518:	2100      	movs	r1, #0
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <MX_USART1_UART_Init+0x90>)
 800251c:	f00b fe3c 	bl	800e198 <HAL_UARTEx_SetTxFifoThreshold>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002526:	f7fe fffd 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800252a:	2100      	movs	r1, #0
 800252c:	4808      	ldr	r0, [pc, #32]	; (8002550 <MX_USART1_UART_Init+0x90>)
 800252e:	f00b fe71 	bl	800e214 <HAL_UARTEx_SetRxFifoThreshold>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002538:	f7fe fff4 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_USART1_UART_Init+0x90>)
 800253e:	f00b fdf2 	bl	800e126 <HAL_UARTEx_DisableFifoMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002548:	f7fe ffec 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2400060c 	.word	0x2400060c
 8002554:	40011000 	.word	0x40011000

08002558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0ba      	sub	sp, #232	; 0xe8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	22c0      	movs	r2, #192	; 0xc0
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f00f f837 	bl	80115ec <memset>
  if(uartHandle->Instance==USART1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a41      	ldr	r2, [pc, #260]	; (8002688 <HAL_UART_MspInit+0x130>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d17b      	bne.n	8002680 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002588:	f04f 0201 	mov.w	r2, #1
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002594:	2318      	movs	r3, #24
 8002596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 ff7a 	bl	8008498 <HAL_RCCEx_PeriphCLKConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025aa:	f7fe ffbb 	bl	8001524 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_UART_MspInit+0x134>)
 80025b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025b4:	4a35      	ldr	r2, [pc, #212]	; (800268c <HAL_UART_MspInit+0x134>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025be:	4b33      	ldr	r3, [pc, #204]	; (800268c <HAL_UART_MspInit+0x134>)
 80025c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_UART_MspInit+0x134>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_UART_MspInit+0x134>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_UART_MspInit+0x134>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002604:	2307      	movs	r3, #7
 8002606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800260e:	4619      	mov	r1, r3
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <HAL_UART_MspInit+0x138>)
 8002612:	f003 ff09 	bl	8006428 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_UART_MspInit+0x140>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_UART_MspInit+0x13c>)
 800261e:	222a      	movs	r2, #42	; 0x2a
 8002620:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_UART_MspInit+0x13c>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_UART_MspInit+0x13c>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_UART_MspInit+0x13c>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002654:	480f      	ldr	r0, [pc, #60]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002656:	f001 fcc1 	bl	8003fdc <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002660:	f7fe ff60 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_UART_MspInit+0x13c>)
 8002668:	67da      	str	r2, [r3, #124]	; 0x7c
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_UART_MspInit+0x13c>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2105      	movs	r1, #5
 8002674:	2025      	movs	r0, #37	; 0x25
 8002676:	f001 fabb 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800267a:	2025      	movs	r0, #37	; 0x25
 800267c:	f001 fad2 	bl	8003c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002680:	bf00      	nop
 8002682:	37e8      	adds	r7, #232	; 0xe8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40011000 	.word	0x40011000
 800268c:	58024400 	.word	0x58024400
 8002690:	58020000 	.word	0x58020000
 8002694:	240006a0 	.word	0x240006a0
 8002698:	40020040 	.word	0x40020040

0800269c <set_rail_monitor>:
	status = 1;

	return status;
}

uint8_t set_rail_monitor() {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 80026a6:	2014      	movs	r0, #20
 80026a8:	f00e ff82 	bl	80115b0 <malloc>
 80026ac:	4603      	mov	r3, r0
 80026ae:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 80026b0:	2008      	movs	r0, #8
 80026b2:	f00e ff7d 	bl	80115b0 <malloc>
 80026b6:	4603      	mov	r3, r0
 80026b8:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80026ba:	2008      	movs	r0, #8
 80026bc:	f00e ff78 	bl	80115b0 <malloc>
 80026c0:	4603      	mov	r3, r0
 80026c2:	603b      	str	r3, [r7, #0]

	receive_hk_i2c(hk_i2c);
 80026c4:	6838      	ldr	r0, [r7, #0]
 80026c6:	f7ff f823 	bl	8001710 <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 80026ca:	68b8      	ldr	r0, [r7, #8]
 80026cc:	f7ff f850 	bl	8001770 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff f89f 	bl	8001814 <receive_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	885a      	ldrh	r2, [r3, #2]
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <set_rail_monitor+0x118>)
 80026dc:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <set_rail_monitor+0x118>)
 80026e4:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <set_rail_monitor+0x118>)
 80026f0:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3302      	adds	r3, #2
 80026f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <set_rail_monitor+0x118>)
 80026fe:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3304      	adds	r3, #4
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <set_rail_monitor+0x118>)
 800270c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3306      	adds	r3, #6
 8002712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <set_rail_monitor+0x118>)
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <set_rail_monitor+0x118>)
 8002722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	885a      	ldrh	r2, [r3, #2]
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <set_rail_monitor+0x118>)
 800272c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	889a      	ldrh	r2, [r3, #4]
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <set_rail_monitor+0x118>)
 8002736:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	88da      	ldrh	r2, [r3, #6]
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <set_rail_monitor+0x118>)
 8002740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	899a      	ldrh	r2, [r3, #12]
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <set_rail_monitor+0x118>)
 800274a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	88da      	ldrh	r2, [r3, #6]
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <set_rail_monitor+0x118>)
 8002754:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	889a      	ldrh	r2, [r3, #4]
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <set_rail_monitor+0x118>)
 800275e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	89da      	ldrh	r2, [r3, #14]
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <set_rail_monitor+0x118>)
 8002768:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	8a1a      	ldrh	r2, [r3, #16]
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <set_rail_monitor+0x118>)
 8002772:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	891a      	ldrh	r2, [r3, #8]
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <set_rail_monitor+0x118>)
 800277c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	895a      	ldrh	r2, [r3, #10]
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <set_rail_monitor+0x118>)
 8002786:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	8a5a      	ldrh	r2, [r3, #18]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <set_rail_monitor+0x118>)
 8002790:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f00e ff13 	bl	80115c0 <free>
	free(hk_adc3);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f00e ff10 	bl	80115c0 <free>
	free(hk_i2c);
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f00e ff0d 	bl	80115c0 <free>

	status = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]

	return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	24000718 	.word	0x24000718

080027b8 <in_range>:
 * @param min The minimum value of the range (inclusive).
 * @param max The maximum value of the range (inclusive).
 *
 * @return int Returns 1 if the value is within the range, otherwise 0.
 */
uint8_t in_range(uint16_t raw, int min, int max) {
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 80027c6:	89fb      	ldrh	r3, [r7, #14]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	db05      	blt.n	80027da <in_range+0x22>
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dc01      	bgt.n	80027da <in_range+0x22>
		return 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <in_range+0x24>
	}
	return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	return rail_monitor;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <get_rail_monitor+0x10>)
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	24000718 	.word	0x24000718

080027fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002800:	f7ff fb84 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002806:	490d      	ldr	r1, [pc, #52]	; (800283c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800281c:	4c0a      	ldr	r4, [pc, #40]	; (8002848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282a:	f00e fe9d 	bl	8011568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282e:	f7fe fd7d 	bl	800132c <main>
  bx  lr
 8002832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800283c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002840:	08012484 	.word	0x08012484
  ldr r2, =_sbss
 8002844:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002848:	24005130 	.word	0x24005130

0800284c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC3_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002856:	2003      	movs	r0, #3
 8002858:	f001 f9bf 	bl	8003bda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800285c:	f005 fc04 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_Init+0x68>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	4913      	ldr	r1, [pc, #76]	; (80028bc <HAL_Init+0x6c>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_Init+0x68>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_Init+0x6c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_Init+0x70>)
 8002892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_Init+0x74>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289a:	2005      	movs	r0, #5
 800289c:	f7ff f966 	bl	8001b6c <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e002      	b.n	80028b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028aa:	f7ff f941 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58024400 	.word	0x58024400
 80028bc:	080123d0 	.word	0x080123d0
 80028c0:	24000008 	.word	0x24000008
 80028c4:	24000004 	.word	0x24000004

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	24000010 	.word	0x24000010
 80028ec:	240007cc 	.word	0x240007cc

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	240007cc 	.word	0x240007cc

08002908 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetREVID+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0c1b      	lsrs	r3, r3, #16
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	5c001000 	.word	0x5c001000

08002920 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	4904      	ldr	r1, [pc, #16]	; (8002948 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	58000400 	.word	0x58000400

0800294c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
  }
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3330      	adds	r3, #48	; 0x30
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	4413      	add	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	211f      	movs	r1, #31
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 011f 	and.w	r1, r3, #31
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0e5b      	lsrs	r3, r3, #25
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0d1b      	lsrs	r3, r3, #20
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2107      	movs	r1, #7
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0318 	and.w	r3, r3, #24
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	400b      	ands	r3, r1
 8002b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	000fffff 	.word	0x000fffff

08002b54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6093      	str	r3, [r2, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5fffffc0 	.word	0x5fffffc0

08002b78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	6fffffc0 	.word	0x6fffffc0

08002bc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <LL_ADC_IsEnabled+0x18>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <LL_ADC_IsEnabled+0x1a>
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d101      	bne.n	8002c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d101      	bne.n	8002c54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e18f      	b.n	8002f9e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fd fe5d 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff67 	bl	8002b78 <LL_ADC_IsDeepPowerDownEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff4d 	bl	8002b54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff82 	bl	8002bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d114      	bne.n	8002cf4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff66 	bl	8002ba0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd4:	4b87      	ldr	r3, [pc, #540]	; (8002ef4 <HAL_ADC_Init+0x290>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <HAL_ADC_Init+0x294>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff65 	bl	8002bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0210 	orr.w	r2, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff76 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 8002d2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 8129 	bne.w	8002f8c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 8125 	bne.w	8002f8c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff4a 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d136      	bne.n	8002dd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_ADC_Init+0x298>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_Init+0x112>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_ADC_Init+0x29c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <HAL_ADC_Init+0x130>
 8002d76:	4861      	ldr	r0, [pc, #388]	; (8002efc <HAL_ADC_Init+0x298>)
 8002d78:	f7ff ff3a 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4860      	ldr	r0, [pc, #384]	; (8002f00 <HAL_ADC_Init+0x29c>)
 8002d80:	f7ff ff36 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4323      	orrs	r3, r4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e008      	b.n	8002da6 <HAL_ADC_Init+0x142>
 8002d94:	485b      	ldr	r0, [pc, #364]	; (8002f04 <HAL_ADC_Init+0x2a0>)
 8002d96:	f7ff ff2b 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_ADC_Init+0x298>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_ADC_Init+0x15a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_ADC_Init+0x29c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_Init+0x15e>
 8002dbe:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_ADC_Init+0x2a4>)
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_Init+0x160>
 8002dc2:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_ADC_Init+0x2a8>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f7ff fdbe 	bl	800294c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002dd0:	f7ff fd9a 	bl	8002908 <HAL_GetREVID>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d914      	bls.n	8002e08 <HAL_ADC_Init+0x1a4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d110      	bne.n	8002e08 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7d5b      	ldrb	r3, [r3, #21]
 8002dea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002df6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7f1b      	ldrb	r3, [r3, #28]
 8002dfc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dfe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e00:	f043 030c 	orr.w	r3, r3, #12
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e00d      	b.n	8002e24 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7d5b      	ldrb	r3, [r3, #21]
 8002e0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7f1b      	ldrb	r3, [r3, #28]
 8002e1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d106      	bne.n	8002e3a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	045b      	lsls	r3, r3, #17
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_ADC_Init+0x2ac>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fed1 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fede 	bl	8002c3c <LL_ADC_INJ_IsConversionOngoing>
 8002e80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d15f      	bne.n	8002f48 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d15c      	bne.n	8002f48 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7d1b      	ldrb	r3, [r3, #20]
 8002e92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_ADC_Init+0x2b0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d130      	bne.n	8002f1c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_ADC_Init+0x2b4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	0411      	lsls	r1, r2, #16
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	611a      	str	r2, [r3, #16]
 8002ef0:	e01c      	b.n	8002f2c <HAL_ADC_Init+0x2c8>
 8002ef2:	bf00      	nop
 8002ef4:	24000004 	.word	0x24000004
 8002ef8:	053e2d63 	.word	0x053e2d63
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40022100 	.word	0x40022100
 8002f04:	58026000 	.word	0x58026000
 8002f08:	40022300 	.word	0x40022300
 8002f0c:	58026300 	.word	0x58026300
 8002f10:	fff0c003 	.word	0xfff0c003
 8002f14:	ffffbffc 	.word	0xffffbffc
 8002f18:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fb8c 	bl	8003660 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f023 010f 	bic.w	r1, r3, #15
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	1e5a      	subs	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	e007      	b.n	8002f7a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 020f 	bic.w	r2, r2, #15
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
 8002f8a:	e007      	b.n	8002f9c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b0a1      	sub	sp, #132	; 0x84
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a65      	ldr	r2, [pc, #404]	; (8003158 <HAL_ADC_ConfigChannel+0x1b0>)
 8002fc2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x2a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e32e      	b.n	8003630 <HAL_ADC_ConfigChannel+0x688>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fe19 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 8313 	bne.w	8003612 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db2c      	blt.n	800304e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x6a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2201      	movs	r2, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	e016      	b.n	8003040 <HAL_ADC_ConfigChannel+0x98>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003022:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e003      	b.n	8003036 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800302e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2201      	movs	r2, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	69d1      	ldr	r1, [r2, #28]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	430b      	orrs	r3, r1
 800304c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f7ff fcfe 	bl	8002a5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fdd6 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 800306a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fde3 	bl	8002c3c <LL_ADC_INJ_IsConversionOngoing>
 8003076:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80b8 	bne.w	80031f0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 80b4 	bne.w	80031f0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	461a      	mov	r2, r3
 8003096:	f7ff fd0d 	bl	8002ab4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_ADC_ConfigChannel+0x1b4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a6:	d10b      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x118>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	e01d      	b.n	80030fc <HAL_ADC_ConfigChannel+0x154>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x13e>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	e00a      	b.n	80030fc <HAL_ADC_ConfigChannel+0x154>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d02c      	beq.n	8003160 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6919      	ldr	r1, [r3, #16]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003114:	f7ff fc4e 	bl	80029b4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6919      	ldr	r1, [r3, #16]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	7e5b      	ldrb	r3, [r3, #25]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_ADC_ConfigChannel+0x186>
 8003128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800312c:	e000      	b.n	8003130 <HAL_ADC_ConfigChannel+0x188>
 800312e:	2300      	movs	r3, #0
 8003130:	461a      	mov	r2, r3
 8003132:	f7ff fc78 	bl	8002a26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	7e1b      	ldrb	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1a4>
 8003146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314a:	e000      	b.n	800314e <HAL_ADC_ConfigChannel+0x1a6>
 800314c:	2300      	movs	r3, #0
 800314e:	461a      	mov	r2, r3
 8003150:	f7ff fc50 	bl	80029f4 <LL_ADC_SetDataRightShift>
 8003154:	e04c      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x248>
 8003156:	bf00      	nop
 8003158:	47ff0000 	.word	0x47ff0000
 800315c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	069b      	lsls	r3, r3, #26
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003182:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	069b      	lsls	r3, r3, #26
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	429a      	cmp	r2, r3
 80031de:	d107      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fcfb 	bl	8002bf0 <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8211 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	461a      	mov	r2, r3
 8003210:	f7ff fc7c 	bl	8002b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4aa1      	ldr	r2, [pc, #644]	; (80034a0 <HAL_ADC_ConfigChannel+0x4f8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	f040 812e 	bne.w	800347c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x2a0>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	3301      	adds	r3, #1
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2b09      	cmp	r3, #9
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e019      	b.n	800327c <HAL_ADC_ConfigChannel+0x2d4>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800325a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e003      	b.n	800326c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2b09      	cmp	r3, #9
 8003274:	bf94      	ite	ls
 8003276:	2301      	movls	r3, #1
 8003278:	2300      	movhi	r3, #0
 800327a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327c:	2b00      	cmp	r3, #0
 800327e:	d079      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_ADC_ConfigChannel+0x2f4>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	3301      	adds	r3, #1
 8003294:	069b      	lsls	r3, r3, #26
 8003296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329a:	e015      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x320>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	069b      	lsls	r3, r3, #26
 80032c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x340>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	e017      	b.n	8003318 <HAL_ADC_ConfigChannel+0x370>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80032fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e003      	b.n	800330c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	ea42 0103 	orr.w	r1, r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_ADC_ConfigChannel+0x396>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0e9b      	lsrs	r3, r3, #26
 800332e:	3301      	adds	r3, #1
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	051b      	lsls	r3, r3, #20
 800333c:	e018      	b.n	8003370 <HAL_ADC_ConfigChannel+0x3c8>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e003      	b.n	8003362 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003370:	430b      	orrs	r3, r1
 8003372:	e07e      	b.n	8003472 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x3e8>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	069b      	lsls	r3, r3, #26
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	e015      	b.n	80033bc <HAL_ADC_ConfigChannel+0x414>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	069b      	lsls	r3, r3, #26
 80033b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x434>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	e017      	b.n	800340c <HAL_ADC_ConfigChannel+0x464>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	61bb      	str	r3, [r7, #24]
  return result;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	ea42 0103 	orr.w	r1, r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x490>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	3301      	adds	r3, #1
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	3b1e      	subs	r3, #30
 8003430:	051b      	lsls	r3, r3, #20
 8003432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003436:	e01b      	b.n	8003470 <HAL_ADC_ConfigChannel+0x4c8>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	60fb      	str	r3, [r7, #12]
  return result;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	3b1e      	subs	r3, #30
 800346a:	051b      	lsls	r3, r3, #20
 800346c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003470:	430b      	orrs	r3, r1
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	4619      	mov	r1, r3
 8003478:	f7ff fb1c 	bl	8002ab4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f280 80cf 	bge.w	8003624 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <HAL_ADC_ConfigChannel+0x4fc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_ADC_ConfigChannel+0x4f2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <HAL_ADC_ConfigChannel+0x500>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x508>
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_ADC_ConfigChannel+0x504>)
 800349c:	e009      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x50a>
 800349e:	bf00      	nop
 80034a0:	47ff0000 	.word	0x47ff0000
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40022100 	.word	0x40022100
 80034ac:	40022300 	.word	0x40022300
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_ADC_ConfigChannel+0x690>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fa70 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 80034b8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5f      	ldr	r2, [pc, #380]	; (800363c <HAL_ADC_ConfigChannel+0x694>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x526>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_ADC_ConfigChannel+0x698>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10e      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x544>
 80034ce:	485b      	ldr	r0, [pc, #364]	; (800363c <HAL_ADC_ConfigChannel+0x694>)
 80034d0:	f7ff fb8e 	bl	8002bf0 <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	485a      	ldr	r0, [pc, #360]	; (8003640 <HAL_ADC_ConfigChannel+0x698>)
 80034d8:	f7ff fb8a 	bl	8002bf0 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e008      	b.n	80034fe <HAL_ADC_ConfigChannel+0x556>
 80034ec:	4855      	ldr	r0, [pc, #340]	; (8003644 <HAL_ADC_ConfigChannel+0x69c>)
 80034ee:	f7ff fb7f 	bl	8002bf0 <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07d      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a50      	ldr	r2, [pc, #320]	; (8003648 <HAL_ADC_ConfigChannel+0x6a0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d130      	bne.n	800356e <HAL_ADC_ConfigChannel+0x5c6>
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <HAL_ADC_ConfigChannel+0x69c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	f040 8081 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a45      	ldr	r2, [pc, #276]	; (800363c <HAL_ADC_ConfigChannel+0x694>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x58e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a43      	ldr	r2, [pc, #268]	; (8003640 <HAL_ADC_ConfigChannel+0x698>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x592>
 8003536:	4a45      	ldr	r2, [pc, #276]	; (800364c <HAL_ADC_ConfigChannel+0x6a4>)
 8003538:	e000      	b.n	800353c <HAL_ADC_ConfigChannel+0x594>
 800353a:	4a3f      	ldr	r2, [pc, #252]	; (8003638 <HAL_ADC_ConfigChannel+0x690>)
 800353c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f7ff fa14 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_ADC_ConfigChannel+0x6a8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	4a40      	ldr	r2, [pc, #256]	; (8003654 <HAL_ADC_ConfigChannel+0x6ac>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	3301      	adds	r3, #1
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800355e:	e002      	b.n	8003566 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3b01      	subs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800356c:	e05a      	b.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a39      	ldr	r2, [pc, #228]	; (8003658 <HAL_ADC_ConfigChannel+0x6b0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d11e      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x60e>
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <HAL_ADC_ConfigChannel+0x69c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d14b      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_ADC_ConfigChannel+0x694>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x5f8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a29      	ldr	r2, [pc, #164]	; (8003640 <HAL_ADC_ConfigChannel+0x698>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x5fc>
 80035a0:	4a2a      	ldr	r2, [pc, #168]	; (800364c <HAL_ADC_ConfigChannel+0x6a4>)
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x5fe>
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_ADC_ConfigChannel+0x690>)
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7ff f9df 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b4:	e036      	b.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a28      	ldr	r2, [pc, #160]	; (800365c <HAL_ADC_ConfigChannel+0x6b4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d131      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d12c      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_ADC_ConfigChannel+0x69c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d127      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_ADC_ConfigChannel+0x694>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_ConfigChannel+0x640>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_ADC_ConfigChannel+0x698>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x644>
 80035e8:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_ADC_ConfigChannel+0x6a4>)
 80035ea:	e000      	b.n	80035ee <HAL_ADC_ConfigChannel+0x646>
 80035ec:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_ADC_ConfigChannel+0x690>)
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7ff f9bb 	bl	8002972 <LL_ADC_SetCommonPathInternalCh>
 80035fc:	e012      	b.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003610:	e008      	b.n	8003624 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800362c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003630:	4618      	mov	r0, r3
 8003632:	3784      	adds	r7, #132	; 0x84
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	58026300 	.word	0x58026300
 800363c:	40022000 	.word	0x40022000
 8003640:	40022100 	.word	0x40022100
 8003644:	58026000 	.word	0x58026000
 8003648:	cb840000 	.word	0xcb840000
 800364c:	40022300 	.word	0x40022300
 8003650:	24000004 	.word	0x24000004
 8003654:	053e2d63 	.word	0x053e2d63
 8003658:	c7520000 	.word	0xc7520000
 800365c:	cfb80000 	.word	0xcfb80000

08003660 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7a      	ldr	r2, [pc, #488]	; (8003858 <ADC_ConfigureBoostMode+0x1f8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <ADC_ConfigureBoostMode+0x1c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a79      	ldr	r2, [pc, #484]	; (800385c <ADC_ConfigureBoostMode+0x1fc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d109      	bne.n	8003690 <ADC_ConfigureBoostMode+0x30>
 800367c:	4b78      	ldr	r3, [pc, #480]	; (8003860 <ADC_ConfigureBoostMode+0x200>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e008      	b.n	80036a2 <ADC_ConfigureBoostMode+0x42>
 8003690:	4b74      	ldr	r3, [pc, #464]	; (8003864 <ADC_ConfigureBoostMode+0x204>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01c      	beq.n	80036e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036a6:	f004 fe59 	bl	800835c <HAL_RCC_GetHCLKFreq>
 80036aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036b4:	d010      	beq.n	80036d8 <ADC_ConfigureBoostMode+0x78>
 80036b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036ba:	d873      	bhi.n	80037a4 <ADC_ConfigureBoostMode+0x144>
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d002      	beq.n	80036c8 <ADC_ConfigureBoostMode+0x68>
 80036c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c6:	d16d      	bne.n	80037a4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	60fb      	str	r3, [r7, #12]
        break;
 80036d6:	e068      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	60fb      	str	r3, [r7, #12]
        break;
 80036de:	e064      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f006 f8e0 	bl	80098ac <HAL_RCCEx_GetPeriphCLKFreq>
 80036ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036f6:	d051      	beq.n	800379c <ADC_ConfigureBoostMode+0x13c>
 80036f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036fc:	d854      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 80036fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003702:	d047      	beq.n	8003794 <ADC_ConfigureBoostMode+0x134>
 8003704:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003708:	d84e      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 800370a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800370e:	d03d      	beq.n	800378c <ADC_ConfigureBoostMode+0x12c>
 8003710:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003714:	d848      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 8003716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371a:	d033      	beq.n	8003784 <ADC_ConfigureBoostMode+0x124>
 800371c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003720:	d842      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 8003722:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003726:	d029      	beq.n	800377c <ADC_ConfigureBoostMode+0x11c>
 8003728:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800372c:	d83c      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 800372e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003732:	d01a      	beq.n	800376a <ADC_ConfigureBoostMode+0x10a>
 8003734:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003738:	d836      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 800373a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800373e:	d014      	beq.n	800376a <ADC_ConfigureBoostMode+0x10a>
 8003740:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003744:	d830      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 8003746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374a:	d00e      	beq.n	800376a <ADC_ConfigureBoostMode+0x10a>
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d82a      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 8003752:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003756:	d008      	beq.n	800376a <ADC_ConfigureBoostMode+0x10a>
 8003758:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800375c:	d824      	bhi.n	80037a8 <ADC_ConfigureBoostMode+0x148>
 800375e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003762:	d002      	beq.n	800376a <ADC_ConfigureBoostMode+0x10a>
 8003764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003768:	d11e      	bne.n	80037a8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]
        break;
 800377a:	e016      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
        break;
 8003782:	e012      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	60fb      	str	r3, [r7, #12]
        break;
 800378a:	e00e      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	60fb      	str	r3, [r7, #12]
        break;
 8003792:	e00a      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	09db      	lsrs	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e006      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	60fb      	str	r3, [r7, #12]
        break;
 80037a2:	e002      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
        break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80037a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80037aa:	f7ff f8ad 	bl	8002908 <HAL_GetREVID>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d815      	bhi.n	80037e4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <ADC_ConfigureBoostMode+0x208>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d908      	bls.n	80037d2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037d0:	e03e      	b.n	8003850 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	e035      	b.n	8003850 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <ADC_ConfigureBoostMode+0x20c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d808      	bhi.n	8003804 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	e025      	b.n	8003850 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <ADC_ConfigureBoostMode+0x210>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d80a      	bhi.n	8003822 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	e016      	b.n	8003850 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <ADC_ConfigureBoostMode+0x214>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d80a      	bhi.n	8003840 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	e007      	b.n	8003850 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40022000 	.word	0x40022000
 800385c:	40022100 	.word	0x40022100
 8003860:	40022300 	.word	0x40022300
 8003864:	58026300 	.word	0x58026300
 8003868:	01312d00 	.word	0x01312d00
 800386c:	005f5e10 	.word	0x005f5e10
 8003870:	00bebc20 	.word	0x00bebc20
 8003874:	017d7840 	.word	0x017d7840

08003878 <LL_ADC_IsEnabled>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <LL_ADC_IsEnabled+0x18>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <LL_ADC_IsEnabled+0x1a>
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_ADC_REG_IsConversionOngoing>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d101      	bne.n	80038b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b09f      	sub	sp, #124	; 0x7c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0be      	b.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5c      	ldr	r2, [pc, #368]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d102      	bne.n	8003902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038fc:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	e001      	b.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e09d      	b.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ffb9 	bl	800389e <LL_ADC_REG_IsConversionOngoing>
 800392c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffb3 	bl	800389e <LL_ADC_REG_IsConversionOngoing>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d17f      	bne.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800393e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003940:	2b00      	cmp	r3, #0
 8003942:	d17c      	bne.n	8003a3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a47      	ldr	r2, [pc, #284]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003958:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800395a:	e000      	b.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800395e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d039      	beq.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	431a      	orrs	r2, r3
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a38      	ldr	r2, [pc, #224]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10e      	bne.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800398e:	4836      	ldr	r0, [pc, #216]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003990:	f7ff ff72 	bl	8003878 <LL_ADC_IsEnabled>
 8003994:	4604      	mov	r4, r0
 8003996:	4835      	ldr	r0, [pc, #212]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003998:	f7ff ff6e 	bl	8003878 <LL_ADC_IsEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	4323      	orrs	r3, r4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e008      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80039ac:	4832      	ldr	r0, [pc, #200]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80039ae:	f7ff ff63 	bl	8003878 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d047      	beq.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	431a      	orrs	r2, r3
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039da:	e03a      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10e      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80039fc:	481a      	ldr	r0, [pc, #104]	; (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039fe:	f7ff ff3b 	bl	8003878 <LL_ADC_IsEnabled>
 8003a02:	4604      	mov	r4, r0
 8003a04:	4819      	ldr	r0, [pc, #100]	; (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a06:	f7ff ff37 	bl	8003878 <LL_ADC_IsEnabled>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4323      	orrs	r3, r4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e008      	b.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a1a:	4817      	ldr	r0, [pc, #92]	; (8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a1c:	f7ff ff2c 	bl	8003878 <LL_ADC_IsEnabled>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a3c:	e009      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a50:	e000      	b.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	377c      	adds	r7, #124	; 0x7c
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40022100 	.word	0x40022100
 8003a70:	40022300 	.word	0x40022300
 8003a74:	58026300 	.word	0x58026300
 8003a78:	58026000 	.word	0x58026000
 8003a7c:	fffff0e0 	.word	0xfffff0e0

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00
 8003ac4:	05fa0000 	.word	0x05fa0000

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db0b      	blt.n	8003b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <__NVIC_EnableIRQ+0x38>)
 8003afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	; (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f1c3 0307 	rsb	r3, r3, #7
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	bf28      	it	cs
 8003b92:	2304      	movcs	r3, #4
 8003b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <NVIC_EncodePriority+0x30>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3b03      	subs	r3, #3
 8003ba2:	e000      	b.n	8003ba6 <NVIC_EncodePriority+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43d9      	mvns	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	4313      	orrs	r3, r2
         );
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff4c 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfe:	f7ff ff63 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f7ff ffb3 	bl	8003b74 <NVIC_EncodePriority>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff82 	bl	8003b20 <__NVIC_SetPriority>
}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff56 	bl	8003ae4 <__NVIC_EnableIRQ>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e014      	b.n	8003c7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc ffbe 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d018      	beq.n	8003ce2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cda:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f827 	bl	8003d30 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01d      	beq.n	8003d28 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f950 	bl	8003fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_DAC_ConfigChannel+0x1e>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e12a      	b.n	8003fbc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	795b      	ldrb	r3, [r3, #5]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_DAC_ConfigChannel+0x2e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e124      	b.n	8003fbc <HAL_DAC_ConfigChannel+0x278>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d17a      	bne.n	8003e7c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fdb3 	bl	80028f0 <HAL_GetTick>
 8003d8a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d13d      	bne.n	8003e0e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d92:	e018      	b.n	8003dc6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d94:	f7fe fdac 	bl	80028f0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d911      	bls.n	8003dc6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da8:	4b86      	ldr	r3, [pc, #536]	; (8003fc4 <HAL_DAC_ConfigChannel+0x280>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f043 0208 	orr.w	r2, r3, #8
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0fa      	b.n	8003fbc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dcc:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <HAL_DAC_ConfigChannel+0x280>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1df      	bne.n	8003d94 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	6992      	ldr	r2, [r2, #24]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8003dde:	e020      	b.n	8003e22 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003de0:	f7fe fd86 	bl	80028f0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d90f      	bls.n	8003e0e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da0a      	bge.n	8003e0e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f043 0208 	orr.w	r2, r3, #8
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2203      	movs	r2, #3
 8003e08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0d6      	b.n	8003fbc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dbe3      	blt.n	8003de0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	6992      	ldr	r2, [r2, #24]
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	ea02 0103 	and.w	r1, r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	21ff      	movs	r1, #255	; 0xff
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	ea02 0103 	and.w	r1, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d11d      	bne.n	8003ec0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	221f      	movs	r2, #31
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2207      	movs	r2, #7
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee8:	e00f      	b.n	8003f0a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d102      	bne.n	8003ef8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e008      	b.n	8003f0a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003f00:	2301      	movs	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	e001      	b.n	8003f0a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	400a      	ands	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	22c0      	movs	r2, #192	; 0xc0
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20008000 	.word	0x20008000

08003fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7fe fc84 	bl	80028f0 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e316      	b.n	8004622 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a66      	ldr	r2, [pc, #408]	; (8004194 <HAL_DMA_Init+0x1b8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_DMA_Init+0x1bc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a63      	ldr	r2, [pc, #396]	; (800419c <HAL_DMA_Init+0x1c0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a62      	ldr	r2, [pc, #392]	; (80041a0 <HAL_DMA_Init+0x1c4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a60      	ldr	r2, [pc, #384]	; (80041a4 <HAL_DMA_Init+0x1c8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <HAL_DMA_Init+0x1cc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_DMA_Init+0x1d0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a5c      	ldr	r2, [pc, #368]	; (80041b0 <HAL_DMA_Init+0x1d4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a5a      	ldr	r2, [pc, #360]	; (80041b4 <HAL_DMA_Init+0x1d8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a59      	ldr	r2, [pc, #356]	; (80041b8 <HAL_DMA_Init+0x1dc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a57      	ldr	r2, [pc, #348]	; (80041bc <HAL_DMA_Init+0x1e0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_DMA_Init+0x1e4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a54      	ldr	r2, [pc, #336]	; (80041c4 <HAL_DMA_Init+0x1e8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <HAL_DMA_Init+0x1ec>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a51      	ldr	r2, [pc, #324]	; (80041cc <HAL_DMA_Init+0x1f0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_DMA_Init+0xb8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a50      	ldr	r2, [pc, #320]	; (80041d0 <HAL_DMA_Init+0x1f4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_DMA_Init+0xbc>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_DMA_Init+0xbe>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 813b 	beq.w	8004316 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a37      	ldr	r2, [pc, #220]	; (8004194 <HAL_DMA_Init+0x1b8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a36      	ldr	r2, [pc, #216]	; (8004198 <HAL_DMA_Init+0x1bc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_DMA_Init+0x1c0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a33      	ldr	r2, [pc, #204]	; (80041a0 <HAL_DMA_Init+0x1c4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <HAL_DMA_Init+0x1c8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <HAL_DMA_Init+0x1cc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2e      	ldr	r2, [pc, #184]	; (80041ac <HAL_DMA_Init+0x1d0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_Init+0x174>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2d      	ldr	r2, [pc, #180]	; (80041b0 <HAL_DMA_Init+0x1d4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_Init+0x174>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <HAL_DMA_Init+0x1d8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_Init+0x174>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <HAL_DMA_Init+0x1dc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_Init+0x174>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <HAL_DMA_Init+0x1e0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_Init+0x174>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <HAL_DMA_Init+0x1e4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_Init+0x174>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <HAL_DMA_Init+0x1e8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_Init+0x174>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <HAL_DMA_Init+0x1ec>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_Init+0x174>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_DMA_Init+0x1f0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_Init+0x174>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_DMA_Init+0x1f4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d108      	bne.n	8004162 <HAL_DMA_Init+0x186>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e007      	b.n	8004172 <HAL_DMA_Init+0x196>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004172:	e02f      	b.n	80041d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004174:	f7fe fbbc 	bl	80028f0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b05      	cmp	r3, #5
 8004180:	d928      	bls.n	80041d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e246      	b.n	8004622 <HAL_DMA_Init+0x646>
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1c8      	bne.n	8004174 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4b83      	ldr	r3, [pc, #524]	; (80043fc <HAL_DMA_Init+0x420>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004206:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004212:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b04      	cmp	r3, #4
 8004226:	d107      	bne.n	8004238 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4313      	orrs	r3, r2
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004238:	4b71      	ldr	r3, [pc, #452]	; (8004400 <HAL_DMA_Init+0x424>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b71      	ldr	r3, [pc, #452]	; (8004404 <HAL_DMA_Init+0x428>)
 800423e:	4013      	ands	r3, r2
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004244:	d328      	bcc.n	8004298 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b28      	cmp	r3, #40	; 0x28
 800424c:	d903      	bls.n	8004256 <HAL_DMA_Init+0x27a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b2e      	cmp	r3, #46	; 0x2e
 8004254:	d917      	bls.n	8004286 <HAL_DMA_Init+0x2aa>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b3e      	cmp	r3, #62	; 0x3e
 800425c:	d903      	bls.n	8004266 <HAL_DMA_Init+0x28a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b42      	cmp	r3, #66	; 0x42
 8004264:	d90f      	bls.n	8004286 <HAL_DMA_Init+0x2aa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b46      	cmp	r3, #70	; 0x46
 800426c:	d903      	bls.n	8004276 <HAL_DMA_Init+0x29a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b48      	cmp	r3, #72	; 0x48
 8004274:	d907      	bls.n	8004286 <HAL_DMA_Init+0x2aa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b4e      	cmp	r3, #78	; 0x4e
 800427c:	d905      	bls.n	800428a <HAL_DMA_Init+0x2ae>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b52      	cmp	r3, #82	; 0x52
 8004284:	d801      	bhi.n	800428a <HAL_DMA_Init+0x2ae>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_DMA_Init+0x2b0>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0307 	bic.w	r3, r3, #7
 80042ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d117      	bne.n	80042f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f001 ff1d 	bl	8006114 <DMA_CheckFifoParam>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e197      	b.n	8004622 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 fe58 	bl	8005fb0 <DMA_CalcBaseAndBitshift>
 8004300:	4603      	mov	r3, r0
 8004302:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	223f      	movs	r2, #63	; 0x3f
 800430e:	409a      	lsls	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	e0cd      	b.n	80044b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3b      	ldr	r2, [pc, #236]	; (8004408 <HAL_DMA_Init+0x42c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d022      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a39      	ldr	r2, [pc, #228]	; (800440c <HAL_DMA_Init+0x430>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01d      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a38      	ldr	r2, [pc, #224]	; (8004410 <HAL_DMA_Init+0x434>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d018      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a36      	ldr	r2, [pc, #216]	; (8004414 <HAL_DMA_Init+0x438>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a35      	ldr	r2, [pc, #212]	; (8004418 <HAL_DMA_Init+0x43c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a33      	ldr	r2, [pc, #204]	; (800441c <HAL_DMA_Init+0x440>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a32      	ldr	r2, [pc, #200]	; (8004420 <HAL_DMA_Init+0x444>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_DMA_Init+0x38a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_DMA_Init+0x448>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_DMA_Init+0x38e>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_DMA_Init+0x390>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8097 	beq.w	80044a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_DMA_Init+0x42c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d021      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_DMA_Init+0x430>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01c      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a21      	ldr	r2, [pc, #132]	; (8004410 <HAL_DMA_Init+0x434>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d017      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_DMA_Init+0x438>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d012      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <HAL_DMA_Init+0x43c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00d      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_DMA_Init+0x440>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d008      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_DMA_Init+0x444>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <HAL_DMA_Init+0x3e4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_DMA_Init+0x448>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_DMA_Init+0x44c>)
 80043de:	4013      	ands	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d020      	beq.n	800442c <HAL_DMA_Init+0x450>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d102      	bne.n	80043f8 <HAL_DMA_Init+0x41c>
 80043f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043f6:	e01a      	b.n	800442e <HAL_DMA_Init+0x452>
 80043f8:	2300      	movs	r3, #0
 80043fa:	e018      	b.n	800442e <HAL_DMA_Init+0x452>
 80043fc:	fe10803f 	.word	0xfe10803f
 8004400:	5c001000 	.word	0x5c001000
 8004404:	ffff0000 	.word	0xffff0000
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
 8004428:	fffe000f 	.word	0xfffe000f
 800442c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68d2      	ldr	r2, [r2, #12]
 8004432:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800443c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800444c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800445c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b6e      	ldr	r3, [pc, #440]	; (800462c <HAL_DMA_Init+0x650>)
 8004474:	4413      	add	r3, r2
 8004476:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_DMA_Init+0x654>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	009a      	lsls	r2, r3, #2
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 fd93 	bl	8005fb0 <DMA_CalcBaseAndBitshift>
 800448a:	4603      	mov	r3, r0
 800448c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2201      	movs	r2, #1
 8004498:	409a      	lsls	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e008      	b.n	80044b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0b7      	b.n	8004622 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <HAL_DMA_Init+0x658>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d072      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a5d      	ldr	r2, [pc, #372]	; (8004638 <HAL_DMA_Init+0x65c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d06d      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a5c      	ldr	r2, [pc, #368]	; (800463c <HAL_DMA_Init+0x660>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d068      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a5a      	ldr	r2, [pc, #360]	; (8004640 <HAL_DMA_Init+0x664>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d063      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a59      	ldr	r2, [pc, #356]	; (8004644 <HAL_DMA_Init+0x668>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d05e      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a57      	ldr	r2, [pc, #348]	; (8004648 <HAL_DMA_Init+0x66c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d059      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a56      	ldr	r2, [pc, #344]	; (800464c <HAL_DMA_Init+0x670>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d054      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a54      	ldr	r2, [pc, #336]	; (8004650 <HAL_DMA_Init+0x674>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04f      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a53      	ldr	r2, [pc, #332]	; (8004654 <HAL_DMA_Init+0x678>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a51      	ldr	r2, [pc, #324]	; (8004658 <HAL_DMA_Init+0x67c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a50      	ldr	r2, [pc, #320]	; (800465c <HAL_DMA_Init+0x680>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a4e      	ldr	r2, [pc, #312]	; (8004660 <HAL_DMA_Init+0x684>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <HAL_DMA_Init+0x688>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a4b      	ldr	r2, [pc, #300]	; (8004668 <HAL_DMA_Init+0x68c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4a      	ldr	r2, [pc, #296]	; (800466c <HAL_DMA_Init+0x690>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a48      	ldr	r2, [pc, #288]	; (8004670 <HAL_DMA_Init+0x694>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a47      	ldr	r2, [pc, #284]	; (8004674 <HAL_DMA_Init+0x698>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a45      	ldr	r2, [pc, #276]	; (8004678 <HAL_DMA_Init+0x69c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a44      	ldr	r2, [pc, #272]	; (800467c <HAL_DMA_Init+0x6a0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a42      	ldr	r2, [pc, #264]	; (8004680 <HAL_DMA_Init+0x6a4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a41      	ldr	r2, [pc, #260]	; (8004684 <HAL_DMA_Init+0x6a8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_DMA_Init+0x6ac>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a3e      	ldr	r2, [pc, #248]	; (800468c <HAL_DMA_Init+0x6b0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_Init+0x5c6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <HAL_DMA_Init+0x6b4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_DMA_Init+0x5ca>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_Init+0x5cc>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d032      	beq.n	8004612 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 fe2d 	bl	800620c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d102      	bne.n	80045c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HAL_DMA_Init+0x624>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d80c      	bhi.n	8004600 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 feaa 	bl	8006340 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e008      	b.n	8004612 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	a7fdabf8 	.word	0xa7fdabf8
 8004630:	cccccccd 	.word	0xcccccccd
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
 8004674:	58025408 	.word	0x58025408
 8004678:	5802541c 	.word	0x5802541c
 800467c:	58025430 	.word	0x58025430
 8004680:	58025444 	.word	0x58025444
 8004684:	58025458 	.word	0x58025458
 8004688:	5802546c 	.word	0x5802546c
 800468c:	58025480 	.word	0x58025480
 8004690:	58025494 	.word	0x58025494

08004694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800469c:	f7fe f928 	bl	80028f0 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e2dc      	b.n	8004c66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d008      	beq.n	80046ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2280      	movs	r2, #128	; 0x80
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e2cd      	b.n	8004c66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a76      	ldr	r2, [pc, #472]	; (80048a8 <HAL_DMA_Abort+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d04a      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a74      	ldr	r2, [pc, #464]	; (80048ac <HAL_DMA_Abort+0x218>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d045      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a73      	ldr	r2, [pc, #460]	; (80048b0 <HAL_DMA_Abort+0x21c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d040      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <HAL_DMA_Abort+0x220>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03b      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a70      	ldr	r2, [pc, #448]	; (80048b8 <HAL_DMA_Abort+0x224>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d036      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6e      	ldr	r2, [pc, #440]	; (80048bc <HAL_DMA_Abort+0x228>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d031      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a6d      	ldr	r2, [pc, #436]	; (80048c0 <HAL_DMA_Abort+0x22c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02c      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6b      	ldr	r2, [pc, #428]	; (80048c4 <HAL_DMA_Abort+0x230>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d027      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6a      	ldr	r2, [pc, #424]	; (80048c8 <HAL_DMA_Abort+0x234>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a68      	ldr	r2, [pc, #416]	; (80048cc <HAL_DMA_Abort+0x238>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01d      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a67      	ldr	r2, [pc, #412]	; (80048d0 <HAL_DMA_Abort+0x23c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_DMA_Abort+0x240>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a64      	ldr	r2, [pc, #400]	; (80048d8 <HAL_DMA_Abort+0x244>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a62      	ldr	r2, [pc, #392]	; (80048dc <HAL_DMA_Abort+0x248>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a61      	ldr	r2, [pc, #388]	; (80048e0 <HAL_DMA_Abort+0x24c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_DMA_Abort+0xd6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5f      	ldr	r2, [pc, #380]	; (80048e4 <HAL_DMA_Abort+0x250>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d101      	bne.n	800476e <HAL_DMA_Abort+0xda>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_DMA_Abort+0xdc>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 021e 	bic.w	r2, r2, #30
 8004782:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004792:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e00a      	b.n	80047b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020e 	bic.w	r2, r2, #14
 80047aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_DMA_Abort+0x214>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d072      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_DMA_Abort+0x218>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d06d      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	; (80048b0 <HAL_DMA_Abort+0x21c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d068      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <HAL_DMA_Abort+0x220>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d063      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a36      	ldr	r2, [pc, #216]	; (80048b8 <HAL_DMA_Abort+0x224>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d05e      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	; (80048bc <HAL_DMA_Abort+0x228>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d059      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <HAL_DMA_Abort+0x22c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d054      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a31      	ldr	r2, [pc, #196]	; (80048c4 <HAL_DMA_Abort+0x230>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d04f      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a30      	ldr	r2, [pc, #192]	; (80048c8 <HAL_DMA_Abort+0x234>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d04a      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2e      	ldr	r2, [pc, #184]	; (80048cc <HAL_DMA_Abort+0x238>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d045      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2d      	ldr	r2, [pc, #180]	; (80048d0 <HAL_DMA_Abort+0x23c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d040      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <HAL_DMA_Abort+0x240>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d03b      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <HAL_DMA_Abort+0x244>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d036      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a28      	ldr	r2, [pc, #160]	; (80048dc <HAL_DMA_Abort+0x248>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d031      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <HAL_DMA_Abort+0x24c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d02c      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <HAL_DMA_Abort+0x250>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d027      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <HAL_DMA_Abort+0x254>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a22      	ldr	r2, [pc, #136]	; (80048ec <HAL_DMA_Abort+0x258>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <HAL_DMA_Abort+0x25c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <HAL_DMA_Abort+0x260>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <HAL_DMA_Abort+0x264>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_DMA_Abort+0x268>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <HAL_DMA_Abort+0x26c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_Abort+0x20e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <HAL_DMA_Abort+0x270>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d132      	bne.n	8004908 <HAL_DMA_Abort+0x274>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e031      	b.n	800490a <HAL_DMA_Abort+0x276>
 80048a6:	bf00      	nop
 80048a8:	40020010 	.word	0x40020010
 80048ac:	40020028 	.word	0x40020028
 80048b0:	40020040 	.word	0x40020040
 80048b4:	40020058 	.word	0x40020058
 80048b8:	40020070 	.word	0x40020070
 80048bc:	40020088 	.word	0x40020088
 80048c0:	400200a0 	.word	0x400200a0
 80048c4:	400200b8 	.word	0x400200b8
 80048c8:	40020410 	.word	0x40020410
 80048cc:	40020428 	.word	0x40020428
 80048d0:	40020440 	.word	0x40020440
 80048d4:	40020458 	.word	0x40020458
 80048d8:	40020470 	.word	0x40020470
 80048dc:	40020488 	.word	0x40020488
 80048e0:	400204a0 	.word	0x400204a0
 80048e4:	400204b8 	.word	0x400204b8
 80048e8:	58025408 	.word	0x58025408
 80048ec:	5802541c 	.word	0x5802541c
 80048f0:	58025430 	.word	0x58025430
 80048f4:	58025444 	.word	0x58025444
 80048f8:	58025458 	.word	0x58025458
 80048fc:	5802546c 	.word	0x5802546c
 8004900:	58025480 	.word	0x58025480
 8004904:	58025494 	.word	0x58025494
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6d      	ldr	r2, [pc, #436]	; (8004ad8 <HAL_DMA_Abort+0x444>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6b      	ldr	r2, [pc, #428]	; (8004adc <HAL_DMA_Abort+0x448>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6a      	ldr	r2, [pc, #424]	; (8004ae0 <HAL_DMA_Abort+0x44c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a68      	ldr	r2, [pc, #416]	; (8004ae4 <HAL_DMA_Abort+0x450>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_DMA_Abort+0x454>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a65      	ldr	r2, [pc, #404]	; (8004aec <HAL_DMA_Abort+0x458>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a64      	ldr	r2, [pc, #400]	; (8004af0 <HAL_DMA_Abort+0x45c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a62      	ldr	r2, [pc, #392]	; (8004af4 <HAL_DMA_Abort+0x460>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a61      	ldr	r2, [pc, #388]	; (8004af8 <HAL_DMA_Abort+0x464>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5f      	ldr	r2, [pc, #380]	; (8004afc <HAL_DMA_Abort+0x468>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5e      	ldr	r2, [pc, #376]	; (8004b00 <HAL_DMA_Abort+0x46c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5c      	ldr	r2, [pc, #368]	; (8004b04 <HAL_DMA_Abort+0x470>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <HAL_DMA_Abort+0x474>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a59      	ldr	r2, [pc, #356]	; (8004b0c <HAL_DMA_Abort+0x478>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_DMA_Abort+0x47c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_Abort+0x32a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a56      	ldr	r2, [pc, #344]	; (8004b14 <HAL_DMA_Abort+0x480>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <HAL_DMA_Abort+0x33c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e007      	b.n	80049e0 <HAL_DMA_Abort+0x34c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049e0:	e013      	b.n	8004a0a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e2:	f7fd ff85 	bl	80028f0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d90c      	bls.n	8004a0a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e12d      	b.n	8004c66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e5      	bne.n	80049e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <HAL_DMA_Abort+0x444>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d04a      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2d      	ldr	r2, [pc, #180]	; (8004adc <HAL_DMA_Abort+0x448>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d045      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ae0 <HAL_DMA_Abort+0x44c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d040      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <HAL_DMA_Abort+0x450>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d03b      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <HAL_DMA_Abort+0x454>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d036      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	; (8004aec <HAL_DMA_Abort+0x458>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <HAL_DMA_Abort+0x45c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d02c      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a24      	ldr	r2, [pc, #144]	; (8004af4 <HAL_DMA_Abort+0x460>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d027      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <HAL_DMA_Abort+0x464>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a21      	ldr	r2, [pc, #132]	; (8004afc <HAL_DMA_Abort+0x468>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <HAL_DMA_Abort+0x46c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_DMA_Abort+0x470>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <HAL_DMA_Abort+0x474>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_DMA_Abort+0x478>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	; (8004b10 <HAL_DMA_Abort+0x47c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_Abort+0x422>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <HAL_DMA_Abort+0x480>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA_Abort+0x426>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_DMA_Abort+0x428>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02b      	beq.n	8004b18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	223f      	movs	r2, #63	; 0x3f
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	e02a      	b.n	8004b2e <HAL_DMA_Abort+0x49a>
 8004ad8:	40020010 	.word	0x40020010
 8004adc:	40020028 	.word	0x40020028
 8004ae0:	40020040 	.word	0x40020040
 8004ae4:	40020058 	.word	0x40020058
 8004ae8:	40020070 	.word	0x40020070
 8004aec:	40020088 	.word	0x40020088
 8004af0:	400200a0 	.word	0x400200a0
 8004af4:	400200b8 	.word	0x400200b8
 8004af8:	40020410 	.word	0x40020410
 8004afc:	40020428 	.word	0x40020428
 8004b00:	40020440 	.word	0x40020440
 8004b04:	40020458 	.word	0x40020458
 8004b08:	40020470 	.word	0x40020470
 8004b0c:	40020488 	.word	0x40020488
 8004b10:	400204a0 	.word	0x400204a0
 8004b14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4f      	ldr	r2, [pc, #316]	; (8004c70 <HAL_DMA_Abort+0x5dc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d072      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a4d      	ldr	r2, [pc, #308]	; (8004c74 <HAL_DMA_Abort+0x5e0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d06d      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a4c      	ldr	r2, [pc, #304]	; (8004c78 <HAL_DMA_Abort+0x5e4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d068      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a4a      	ldr	r2, [pc, #296]	; (8004c7c <HAL_DMA_Abort+0x5e8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d063      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a49      	ldr	r2, [pc, #292]	; (8004c80 <HAL_DMA_Abort+0x5ec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d05e      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <HAL_DMA_Abort+0x5f0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d059      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a46      	ldr	r2, [pc, #280]	; (8004c88 <HAL_DMA_Abort+0x5f4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d054      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a44      	ldr	r2, [pc, #272]	; (8004c8c <HAL_DMA_Abort+0x5f8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d04f      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a43      	ldr	r2, [pc, #268]	; (8004c90 <HAL_DMA_Abort+0x5fc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <HAL_DMA_Abort+0x600>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <HAL_DMA_Abort+0x604>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3e      	ldr	r2, [pc, #248]	; (8004c9c <HAL_DMA_Abort+0x608>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <HAL_DMA_Abort+0x60c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <HAL_DMA_Abort+0x610>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ca8 <HAL_DMA_Abort+0x614>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_DMA_Abort+0x618>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a37      	ldr	r2, [pc, #220]	; (8004cb0 <HAL_DMA_Abort+0x61c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a35      	ldr	r2, [pc, #212]	; (8004cb4 <HAL_DMA_Abort+0x620>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a34      	ldr	r2, [pc, #208]	; (8004cb8 <HAL_DMA_Abort+0x624>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <HAL_DMA_Abort+0x628>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a31      	ldr	r2, [pc, #196]	; (8004cc0 <HAL_DMA_Abort+0x62c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <HAL_DMA_Abort+0x630>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2e      	ldr	r2, [pc, #184]	; (8004cc8 <HAL_DMA_Abort+0x634>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_Abort+0x58a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <HAL_DMA_Abort+0x638>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_DMA_Abort+0x58e>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_DMA_Abort+0x590>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020040 	.word	0x40020040
 8004c7c:	40020058 	.word	0x40020058
 8004c80:	40020070 	.word	0x40020070
 8004c84:	40020088 	.word	0x40020088
 8004c88:	400200a0 	.word	0x400200a0
 8004c8c:	400200b8 	.word	0x400200b8
 8004c90:	40020410 	.word	0x40020410
 8004c94:	40020428 	.word	0x40020428
 8004c98:	40020440 	.word	0x40020440
 8004c9c:	40020458 	.word	0x40020458
 8004ca0:	40020470 	.word	0x40020470
 8004ca4:	40020488 	.word	0x40020488
 8004ca8:	400204a0 	.word	0x400204a0
 8004cac:	400204b8 	.word	0x400204b8
 8004cb0:	58025408 	.word	0x58025408
 8004cb4:	5802541c 	.word	0x5802541c
 8004cb8:	58025430 	.word	0x58025430
 8004cbc:	58025444 	.word	0x58025444
 8004cc0:	58025458 	.word	0x58025458
 8004cc4:	5802546c 	.word	0x5802546c
 8004cc8:	58025480 	.word	0x58025480
 8004ccc:	58025494 	.word	0x58025494

08004cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e237      	b.n	8005152 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d004      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e22c      	b.n	8005152 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5c      	ldr	r2, [pc, #368]	; (8004e70 <HAL_DMA_Abort_IT+0x1a0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d04a      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <HAL_DMA_Abort_IT+0x1a4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d045      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a59      	ldr	r2, [pc, #356]	; (8004e78 <HAL_DMA_Abort_IT+0x1a8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d040      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <HAL_DMA_Abort_IT+0x1ac>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d03b      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a56      	ldr	r2, [pc, #344]	; (8004e80 <HAL_DMA_Abort_IT+0x1b0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d036      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a55      	ldr	r2, [pc, #340]	; (8004e84 <HAL_DMA_Abort_IT+0x1b4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d031      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a53      	ldr	r2, [pc, #332]	; (8004e88 <HAL_DMA_Abort_IT+0x1b8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d02c      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_DMA_Abort_IT+0x1bc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d027      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a50      	ldr	r2, [pc, #320]	; (8004e90 <HAL_DMA_Abort_IT+0x1c0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d022      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4f      	ldr	r2, [pc, #316]	; (8004e94 <HAL_DMA_Abort_IT+0x1c4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d01d      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a4d      	ldr	r2, [pc, #308]	; (8004e98 <HAL_DMA_Abort_IT+0x1c8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d018      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4c      	ldr	r2, [pc, #304]	; (8004e9c <HAL_DMA_Abort_IT+0x1cc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d013      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a4a      	ldr	r2, [pc, #296]	; (8004ea0 <HAL_DMA_Abort_IT+0x1d0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a49      	ldr	r2, [pc, #292]	; (8004ea4 <HAL_DMA_Abort_IT+0x1d4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a47      	ldr	r2, [pc, #284]	; (8004ea8 <HAL_DMA_Abort_IT+0x1d8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_DMA_Abort_IT+0xc8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a46      	ldr	r2, [pc, #280]	; (8004eac <HAL_DMA_Abort_IT+0x1dc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_DMA_Abort_IT+0xcc>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_DMA_Abort_IT+0xce>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8086 	beq.w	8004eb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2204      	movs	r2, #4
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <HAL_DMA_Abort_IT+0x1a0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d04a      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <HAL_DMA_Abort_IT+0x1a4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d045      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <HAL_DMA_Abort_IT+0x1a8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d040      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <HAL_DMA_Abort_IT+0x1ac>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d03b      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	; (8004e80 <HAL_DMA_Abort_IT+0x1b0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d036      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_DMA_Abort_IT+0x1b4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d031      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_DMA_Abort_IT+0x1b8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02c      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_DMA_Abort_IT+0x1bc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d027      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <HAL_DMA_Abort_IT+0x1c0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <HAL_DMA_Abort_IT+0x1c4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d01d      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <HAL_DMA_Abort_IT+0x1c8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <HAL_DMA_Abort_IT+0x1cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <HAL_DMA_Abort_IT+0x1d0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_DMA_Abort_IT+0x1d4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <HAL_DMA_Abort_IT+0x1d8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x17c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_DMA_Abort_IT+0x1dc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d108      	bne.n	8004e5e <HAL_DMA_Abort_IT+0x18e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e178      	b.n	8005150 <HAL_DMA_Abort_IT+0x480>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e16f      	b.n	8005150 <HAL_DMA_Abort_IT+0x480>
 8004e70:	40020010 	.word	0x40020010
 8004e74:	40020028 	.word	0x40020028
 8004e78:	40020040 	.word	0x40020040
 8004e7c:	40020058 	.word	0x40020058
 8004e80:	40020070 	.word	0x40020070
 8004e84:	40020088 	.word	0x40020088
 8004e88:	400200a0 	.word	0x400200a0
 8004e8c:	400200b8 	.word	0x400200b8
 8004e90:	40020410 	.word	0x40020410
 8004e94:	40020428 	.word	0x40020428
 8004e98:	40020440 	.word	0x40020440
 8004e9c:	40020458 	.word	0x40020458
 8004ea0:	40020470 	.word	0x40020470
 8004ea4:	40020488 	.word	0x40020488
 8004ea8:	400204a0 	.word	0x400204a0
 8004eac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 020e 	bic.w	r2, r2, #14
 8004ebe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6c      	ldr	r2, [pc, #432]	; (8005078 <HAL_DMA_Abort_IT+0x3a8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d04a      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6b      	ldr	r2, [pc, #428]	; (800507c <HAL_DMA_Abort_IT+0x3ac>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d045      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a69      	ldr	r2, [pc, #420]	; (8005080 <HAL_DMA_Abort_IT+0x3b0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d040      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a68      	ldr	r2, [pc, #416]	; (8005084 <HAL_DMA_Abort_IT+0x3b4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a66      	ldr	r2, [pc, #408]	; (8005088 <HAL_DMA_Abort_IT+0x3b8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d036      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_DMA_Abort_IT+0x3bc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d031      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a63      	ldr	r2, [pc, #396]	; (8005090 <HAL_DMA_Abort_IT+0x3c0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a62      	ldr	r2, [pc, #392]	; (8005094 <HAL_DMA_Abort_IT+0x3c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a60      	ldr	r2, [pc, #384]	; (8005098 <HAL_DMA_Abort_IT+0x3c8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5f      	ldr	r2, [pc, #380]	; (800509c <HAL_DMA_Abort_IT+0x3cc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5d      	ldr	r2, [pc, #372]	; (80050a0 <HAL_DMA_Abort_IT+0x3d0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a5c      	ldr	r2, [pc, #368]	; (80050a4 <HAL_DMA_Abort_IT+0x3d4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5a      	ldr	r2, [pc, #360]	; (80050a8 <HAL_DMA_Abort_IT+0x3d8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a59      	ldr	r2, [pc, #356]	; (80050ac <HAL_DMA_Abort_IT+0x3dc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a57      	ldr	r2, [pc, #348]	; (80050b0 <HAL_DMA_Abort_IT+0x3e0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x290>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a56      	ldr	r2, [pc, #344]	; (80050b4 <HAL_DMA_Abort_IT+0x3e4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <HAL_DMA_Abort_IT+0x2a2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_DMA_Abort_IT+0x2b2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a3c      	ldr	r2, [pc, #240]	; (8005078 <HAL_DMA_Abort_IT+0x3a8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d072      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3a      	ldr	r2, [pc, #232]	; (800507c <HAL_DMA_Abort_IT+0x3ac>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d06d      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a39      	ldr	r2, [pc, #228]	; (8005080 <HAL_DMA_Abort_IT+0x3b0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d068      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a37      	ldr	r2, [pc, #220]	; (8005084 <HAL_DMA_Abort_IT+0x3b4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d063      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a36      	ldr	r2, [pc, #216]	; (8005088 <HAL_DMA_Abort_IT+0x3b8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d05e      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a34      	ldr	r2, [pc, #208]	; (800508c <HAL_DMA_Abort_IT+0x3bc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d059      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a33      	ldr	r2, [pc, #204]	; (8005090 <HAL_DMA_Abort_IT+0x3c0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d054      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a31      	ldr	r2, [pc, #196]	; (8005094 <HAL_DMA_Abort_IT+0x3c4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04f      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a30      	ldr	r2, [pc, #192]	; (8005098 <HAL_DMA_Abort_IT+0x3c8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <HAL_DMA_Abort_IT+0x3cc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <HAL_DMA_Abort_IT+0x3d0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_DMA_Abort_IT+0x3d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <HAL_DMA_Abort_IT+0x3d8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <HAL_DMA_Abort_IT+0x3dc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_DMA_Abort_IT+0x3e4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a24      	ldr	r2, [pc, #144]	; (80050b8 <HAL_DMA_Abort_IT+0x3e8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_DMA_Abort_IT+0x3ec>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <HAL_DMA_Abort_IT+0x3f0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_DMA_Abort_IT+0x3f4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_DMA_Abort_IT+0x3f8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_DMA_Abort_IT+0x3fc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_DMA_Abort_IT+0x400>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_Abort_IT+0x3a2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_DMA_Abort_IT+0x404>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d132      	bne.n	80050d8 <HAL_DMA_Abort_IT+0x408>
 8005072:	2301      	movs	r3, #1
 8005074:	e031      	b.n	80050da <HAL_DMA_Abort_IT+0x40a>
 8005076:	bf00      	nop
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	58025408 	.word	0x58025408
 80050bc:	5802541c 	.word	0x5802541c
 80050c0:	58025430 	.word	0x58025430
 80050c4:	58025444 	.word	0x58025444
 80050c8:	58025458 	.word	0x58025458
 80050cc:	5802546c 	.word	0x5802546c
 80050d0:	58025480 	.word	0x58025480
 80050d4:	58025494 	.word	0x58025494
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d028      	beq.n	8005130 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2201      	movs	r2, #1
 80050fe:	409a      	lsls	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800510c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800512e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop

0800515c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005168:	4b67      	ldr	r3, [pc, #412]	; (8005308 <HAL_DMA_IRQHandler+0x1ac>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a67      	ldr	r2, [pc, #412]	; (800530c <HAL_DMA_IRQHandler+0x1b0>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0a9b      	lsrs	r3, r3, #10
 8005174:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5f      	ldr	r2, [pc, #380]	; (8005310 <HAL_DMA_IRQHandler+0x1b4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d04a      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5d      	ldr	r2, [pc, #372]	; (8005314 <HAL_DMA_IRQHandler+0x1b8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d045      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5c      	ldr	r2, [pc, #368]	; (8005318 <HAL_DMA_IRQHandler+0x1bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d040      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a5a      	ldr	r2, [pc, #360]	; (800531c <HAL_DMA_IRQHandler+0x1c0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d03b      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a59      	ldr	r2, [pc, #356]	; (8005320 <HAL_DMA_IRQHandler+0x1c4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d036      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a57      	ldr	r2, [pc, #348]	; (8005324 <HAL_DMA_IRQHandler+0x1c8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d031      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a56      	ldr	r2, [pc, #344]	; (8005328 <HAL_DMA_IRQHandler+0x1cc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d02c      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a54      	ldr	r2, [pc, #336]	; (800532c <HAL_DMA_IRQHandler+0x1d0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d027      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a53      	ldr	r2, [pc, #332]	; (8005330 <HAL_DMA_IRQHandler+0x1d4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a51      	ldr	r2, [pc, #324]	; (8005334 <HAL_DMA_IRQHandler+0x1d8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01d      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a50      	ldr	r2, [pc, #320]	; (8005338 <HAL_DMA_IRQHandler+0x1dc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4e      	ldr	r2, [pc, #312]	; (800533c <HAL_DMA_IRQHandler+0x1e0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4d      	ldr	r2, [pc, #308]	; (8005340 <HAL_DMA_IRQHandler+0x1e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a4b      	ldr	r2, [pc, #300]	; (8005344 <HAL_DMA_IRQHandler+0x1e8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4a      	ldr	r2, [pc, #296]	; (8005348 <HAL_DMA_IRQHandler+0x1ec>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_DMA_IRQHandler+0xd2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a48      	ldr	r2, [pc, #288]	; (800534c <HAL_DMA_IRQHandler+0x1f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <HAL_DMA_IRQHandler+0xd6>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_DMA_IRQHandler+0xd8>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 842b 	beq.w	8005a90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2208      	movs	r2, #8
 8005244:	409a      	lsls	r2, r3
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80a2 	beq.w	8005394 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <HAL_DMA_IRQHandler+0x1b4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <HAL_DMA_IRQHandler+0x1b8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d045      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <HAL_DMA_IRQHandler+0x1bc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2a      	ldr	r2, [pc, #168]	; (800531c <HAL_DMA_IRQHandler+0x1c0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d03b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <HAL_DMA_IRQHandler+0x1c4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d036      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a27      	ldr	r2, [pc, #156]	; (8005324 <HAL_DMA_IRQHandler+0x1c8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d031      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a25      	ldr	r2, [pc, #148]	; (8005328 <HAL_DMA_IRQHandler+0x1cc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a24      	ldr	r2, [pc, #144]	; (800532c <HAL_DMA_IRQHandler+0x1d0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d027      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_DMA_IRQHandler+0x1d4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <HAL_DMA_IRQHandler+0x1d8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_DMA_IRQHandler+0x1dc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_DMA_IRQHandler+0x1e0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_DMA_IRQHandler+0x1e4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_DMA_IRQHandler+0x1e8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_DMA_IRQHandler+0x1ec>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x194>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_DMA_IRQHandler+0x1f0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d12f      	bne.n	8005350 <HAL_DMA_IRQHandler+0x1f4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e02e      	b.n	8005364 <HAL_DMA_IRQHandler+0x208>
 8005306:	bf00      	nop
 8005308:	24000004 	.word	0x24000004
 800530c:	1b4e81b5 	.word	0x1b4e81b5
 8005310:	40020010 	.word	0x40020010
 8005314:	40020028 	.word	0x40020028
 8005318:	40020040 	.word	0x40020040
 800531c:	40020058 	.word	0x40020058
 8005320:	40020070 	.word	0x40020070
 8005324:	40020088 	.word	0x40020088
 8005328:	400200a0 	.word	0x400200a0
 800532c:	400200b8 	.word	0x400200b8
 8005330:	40020410 	.word	0x40020410
 8005334:	40020428 	.word	0x40020428
 8005338:	40020440 	.word	0x40020440
 800533c:	40020458 	.word	0x40020458
 8005340:	40020470 	.word	0x40020470
 8005344:	40020488 	.word	0x40020488
 8005348:	400204a0 	.word	0x400204a0
 800534c:	400204b8 	.word	0x400204b8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0204 	bic.w	r2, r2, #4
 8005376:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2208      	movs	r2, #8
 8005382:	409a      	lsls	r2, r3
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	f043 0201 	orr.w	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06e      	beq.n	8005488 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a69      	ldr	r2, [pc, #420]	; (8005554 <HAL_DMA_IRQHandler+0x3f8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a67      	ldr	r2, [pc, #412]	; (8005558 <HAL_DMA_IRQHandler+0x3fc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a66      	ldr	r2, [pc, #408]	; (800555c <HAL_DMA_IRQHandler+0x400>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a64      	ldr	r2, [pc, #400]	; (8005560 <HAL_DMA_IRQHandler+0x404>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a63      	ldr	r2, [pc, #396]	; (8005564 <HAL_DMA_IRQHandler+0x408>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a61      	ldr	r2, [pc, #388]	; (8005568 <HAL_DMA_IRQHandler+0x40c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a60      	ldr	r2, [pc, #384]	; (800556c <HAL_DMA_IRQHandler+0x410>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5e      	ldr	r2, [pc, #376]	; (8005570 <HAL_DMA_IRQHandler+0x414>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5d      	ldr	r2, [pc, #372]	; (8005574 <HAL_DMA_IRQHandler+0x418>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5b      	ldr	r2, [pc, #364]	; (8005578 <HAL_DMA_IRQHandler+0x41c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a5a      	ldr	r2, [pc, #360]	; (800557c <HAL_DMA_IRQHandler+0x420>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a58      	ldr	r2, [pc, #352]	; (8005580 <HAL_DMA_IRQHandler+0x424>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a57      	ldr	r2, [pc, #348]	; (8005584 <HAL_DMA_IRQHandler+0x428>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a55      	ldr	r2, [pc, #340]	; (8005588 <HAL_DMA_IRQHandler+0x42c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a54      	ldr	r2, [pc, #336]	; (800558c <HAL_DMA_IRQHandler+0x430>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0x2ee>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a52      	ldr	r2, [pc, #328]	; (8005590 <HAL_DMA_IRQHandler+0x434>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10a      	bne.n	8005460 <HAL_DMA_IRQHandler+0x304>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e003      	b.n	8005468 <HAL_DMA_IRQHandler+0x30c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2201      	movs	r2, #1
 8005476:	409a      	lsls	r2, r3
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f043 0202 	orr.w	r2, r3, #2
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2204      	movs	r2, #4
 8005492:	409a      	lsls	r2, r3
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 808f 	beq.w	80055bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <HAL_DMA_IRQHandler+0x3f8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_DMA_IRQHandler+0x3fc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a29      	ldr	r2, [pc, #164]	; (800555c <HAL_DMA_IRQHandler+0x400>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a27      	ldr	r2, [pc, #156]	; (8005560 <HAL_DMA_IRQHandler+0x404>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a26      	ldr	r2, [pc, #152]	; (8005564 <HAL_DMA_IRQHandler+0x408>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a24      	ldr	r2, [pc, #144]	; (8005568 <HAL_DMA_IRQHandler+0x40c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a23      	ldr	r2, [pc, #140]	; (800556c <HAL_DMA_IRQHandler+0x410>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a21      	ldr	r2, [pc, #132]	; (8005570 <HAL_DMA_IRQHandler+0x414>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a20      	ldr	r2, [pc, #128]	; (8005574 <HAL_DMA_IRQHandler+0x418>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <HAL_DMA_IRQHandler+0x41c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1d      	ldr	r2, [pc, #116]	; (800557c <HAL_DMA_IRQHandler+0x420>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <HAL_DMA_IRQHandler+0x424>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <HAL_DMA_IRQHandler+0x428>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_DMA_IRQHandler+0x42c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_DMA_IRQHandler+0x430>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_IRQHandler+0x3e2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <HAL_DMA_IRQHandler+0x434>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d12a      	bne.n	8005594 <HAL_DMA_IRQHandler+0x438>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e023      	b.n	800559c <HAL_DMA_IRQHandler+0x440>
 8005554:	40020010 	.word	0x40020010
 8005558:	40020028 	.word	0x40020028
 800555c:	40020040 	.word	0x40020040
 8005560:	40020058 	.word	0x40020058
 8005564:	40020070 	.word	0x40020070
 8005568:	40020088 	.word	0x40020088
 800556c:	400200a0 	.word	0x400200a0
 8005570:	400200b8 	.word	0x400200b8
 8005574:	40020410 	.word	0x40020410
 8005578:	40020428 	.word	0x40020428
 800557c:	40020440 	.word	0x40020440
 8005580:	40020458 	.word	0x40020458
 8005584:	40020470 	.word	0x40020470
 8005588:	40020488 	.word	0x40020488
 800558c:	400204a0 	.word	0x400204a0
 8005590:	400204b8 	.word	0x400204b8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2204      	movs	r2, #4
 80055aa:	409a      	lsls	r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f043 0204 	orr.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2210      	movs	r2, #16
 80055c6:	409a      	lsls	r2, r3
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a6 	beq.w	800571e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a85      	ldr	r2, [pc, #532]	; (80057ec <HAL_DMA_IRQHandler+0x690>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a83      	ldr	r2, [pc, #524]	; (80057f0 <HAL_DMA_IRQHandler+0x694>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a82      	ldr	r2, [pc, #520]	; (80057f4 <HAL_DMA_IRQHandler+0x698>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a80      	ldr	r2, [pc, #512]	; (80057f8 <HAL_DMA_IRQHandler+0x69c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7f      	ldr	r2, [pc, #508]	; (80057fc <HAL_DMA_IRQHandler+0x6a0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7d      	ldr	r2, [pc, #500]	; (8005800 <HAL_DMA_IRQHandler+0x6a4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7c      	ldr	r2, [pc, #496]	; (8005804 <HAL_DMA_IRQHandler+0x6a8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a7a      	ldr	r2, [pc, #488]	; (8005808 <HAL_DMA_IRQHandler+0x6ac>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a79      	ldr	r2, [pc, #484]	; (800580c <HAL_DMA_IRQHandler+0x6b0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a77      	ldr	r2, [pc, #476]	; (8005810 <HAL_DMA_IRQHandler+0x6b4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a76      	ldr	r2, [pc, #472]	; (8005814 <HAL_DMA_IRQHandler+0x6b8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a74      	ldr	r2, [pc, #464]	; (8005818 <HAL_DMA_IRQHandler+0x6bc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a73      	ldr	r2, [pc, #460]	; (800581c <HAL_DMA_IRQHandler+0x6c0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a71      	ldr	r2, [pc, #452]	; (8005820 <HAL_DMA_IRQHandler+0x6c4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a70      	ldr	r2, [pc, #448]	; (8005824 <HAL_DMA_IRQHandler+0x6c8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_IRQHandler+0x516>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_DMA_IRQHandler+0x6cc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10a      	bne.n	8005688 <HAL_DMA_IRQHandler+0x52c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e009      	b.n	800569c <HAL_DMA_IRQHandler+0x540>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d03e      	beq.n	800571e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2210      	movs	r2, #16
 80056aa:	409a      	lsls	r2, r3
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d024      	beq.n	800571e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	e01f      	b.n	800571e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01b      	beq.n	800571e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
 80056ee:	e016      	b.n	800571e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d107      	bne.n	800570e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0208 	bic.w	r2, r2, #8
 800570c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2220      	movs	r2, #32
 8005728:	409a      	lsls	r2, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 8110 	beq.w	8005954 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <HAL_DMA_IRQHandler+0x690>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2b      	ldr	r2, [pc, #172]	; (80057f0 <HAL_DMA_IRQHandler+0x694>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <HAL_DMA_IRQHandler+0x698>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a28      	ldr	r2, [pc, #160]	; (80057f8 <HAL_DMA_IRQHandler+0x69c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <HAL_DMA_IRQHandler+0x6a0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a25      	ldr	r2, [pc, #148]	; (8005800 <HAL_DMA_IRQHandler+0x6a4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a23      	ldr	r2, [pc, #140]	; (8005804 <HAL_DMA_IRQHandler+0x6a8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a22      	ldr	r2, [pc, #136]	; (8005808 <HAL_DMA_IRQHandler+0x6ac>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a20      	ldr	r2, [pc, #128]	; (800580c <HAL_DMA_IRQHandler+0x6b0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <HAL_DMA_IRQHandler+0x6b4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <HAL_DMA_IRQHandler+0x6b8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_DMA_IRQHandler+0x6bc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	; (800581c <HAL_DMA_IRQHandler+0x6c0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a19      	ldr	r2, [pc, #100]	; (8005820 <HAL_DMA_IRQHandler+0x6c4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_DMA_IRQHandler+0x6c8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x678>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_DMA_IRQHandler+0x6cc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d12b      	bne.n	800582c <HAL_DMA_IRQHandler+0x6d0>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e02a      	b.n	8005840 <HAL_DMA_IRQHandler+0x6e4>
 80057ea:	bf00      	nop
 80057ec:	40020010 	.word	0x40020010
 80057f0:	40020028 	.word	0x40020028
 80057f4:	40020040 	.word	0x40020040
 80057f8:	40020058 	.word	0x40020058
 80057fc:	40020070 	.word	0x40020070
 8005800:	40020088 	.word	0x40020088
 8005804:	400200a0 	.word	0x400200a0
 8005808:	400200b8 	.word	0x400200b8
 800580c:	40020410 	.word	0x40020410
 8005810:	40020428 	.word	0x40020428
 8005814:	40020440 	.word	0x40020440
 8005818:	40020458 	.word	0x40020458
 800581c:	40020470 	.word	0x40020470
 8005820:	40020488 	.word	0x40020488
 8005824:	400204a0 	.word	0x400204a0
 8005828:	400204b8 	.word	0x400204b8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8087 	beq.w	8005954 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2220      	movs	r2, #32
 8005850:	409a      	lsls	r2, r3
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b04      	cmp	r3, #4
 8005860:	d139      	bne.n	80058d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0216 	bic.w	r2, r2, #22
 8005870:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005880:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_DMA_IRQHandler+0x736>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0208 	bic.w	r2, r2, #8
 80058a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	223f      	movs	r2, #63	; 0x3f
 80058ac:	409a      	lsls	r2, r3
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 834a 	beq.w	8005f60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	4798      	blx	r3
          }
          return;
 80058d4:	e344      	b.n	8005f60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02c      	beq.n	8005954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	e027      	b.n	8005954 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d023      	beq.n	8005954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	e01e      	b.n	8005954 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0210 	bic.w	r2, r2, #16
 8005932:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8306 	beq.w	8005f6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8088 	beq.w	8005a7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2204      	movs	r2, #4
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7a      	ldr	r2, [pc, #488]	; (8005b64 <HAL_DMA_IRQHandler+0xa08>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d04a      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a79      	ldr	r2, [pc, #484]	; (8005b68 <HAL_DMA_IRQHandler+0xa0c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d045      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a77      	ldr	r2, [pc, #476]	; (8005b6c <HAL_DMA_IRQHandler+0xa10>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d040      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a76      	ldr	r2, [pc, #472]	; (8005b70 <HAL_DMA_IRQHandler+0xa14>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d03b      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a74      	ldr	r2, [pc, #464]	; (8005b74 <HAL_DMA_IRQHandler+0xa18>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d036      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a73      	ldr	r2, [pc, #460]	; (8005b78 <HAL_DMA_IRQHandler+0xa1c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d031      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a71      	ldr	r2, [pc, #452]	; (8005b7c <HAL_DMA_IRQHandler+0xa20>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d02c      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a70      	ldr	r2, [pc, #448]	; (8005b80 <HAL_DMA_IRQHandler+0xa24>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d027      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	; (8005b84 <HAL_DMA_IRQHandler+0xa28>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d022      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6d      	ldr	r2, [pc, #436]	; (8005b88 <HAL_DMA_IRQHandler+0xa2c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d01d      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6b      	ldr	r2, [pc, #428]	; (8005b8c <HAL_DMA_IRQHandler+0xa30>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d018      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6a      	ldr	r2, [pc, #424]	; (8005b90 <HAL_DMA_IRQHandler+0xa34>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a68      	ldr	r2, [pc, #416]	; (8005b94 <HAL_DMA_IRQHandler+0xa38>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00e      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a67      	ldr	r2, [pc, #412]	; (8005b98 <HAL_DMA_IRQHandler+0xa3c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d009      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_DMA_IRQHandler+0xa40>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x8b8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a64      	ldr	r2, [pc, #400]	; (8005ba0 <HAL_DMA_IRQHandler+0xa44>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <HAL_DMA_IRQHandler+0x8ca>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e007      	b.n	8005a36 <HAL_DMA_IRQHandler+0x8da>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d307      	bcc.n	8005a52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f2      	bne.n	8005a36 <HAL_DMA_IRQHandler+0x8da>
 8005a50:	e000      	b.n	8005a54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a6a:	e003      	b.n	8005a74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8272 	beq.w	8005f6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4798      	blx	r3
 8005a8e:	e26c      	b.n	8005f6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a43      	ldr	r2, [pc, #268]	; (8005ba4 <HAL_DMA_IRQHandler+0xa48>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a42      	ldr	r2, [pc, #264]	; (8005ba8 <HAL_DMA_IRQHandler+0xa4c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a40      	ldr	r2, [pc, #256]	; (8005bac <HAL_DMA_IRQHandler+0xa50>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3f      	ldr	r2, [pc, #252]	; (8005bb0 <HAL_DMA_IRQHandler+0xa54>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3d      	ldr	r2, [pc, #244]	; (8005bb4 <HAL_DMA_IRQHandler+0xa58>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <HAL_DMA_IRQHandler+0xa5c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_DMA_IRQHandler+0xa60>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x984>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a39      	ldr	r2, [pc, #228]	; (8005bc0 <HAL_DMA_IRQHandler+0xa64>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x988>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x98a>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 823f 	beq.w	8005f6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	2204      	movs	r2, #4
 8005afe:	409a      	lsls	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80cd 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0xb48>
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80c7 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	2204      	movs	r2, #4
 8005b20:	409a      	lsls	r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d049      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8210 	beq.w	8005f64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b4c:	e20a      	b.n	8005f64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8206 	beq.w	8005f64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b60:	e200      	b.n	8005f64 <HAL_DMA_IRQHandler+0xe08>
 8005b62:	bf00      	nop
 8005b64:	40020010 	.word	0x40020010
 8005b68:	40020028 	.word	0x40020028
 8005b6c:	40020040 	.word	0x40020040
 8005b70:	40020058 	.word	0x40020058
 8005b74:	40020070 	.word	0x40020070
 8005b78:	40020088 	.word	0x40020088
 8005b7c:	400200a0 	.word	0x400200a0
 8005b80:	400200b8 	.word	0x400200b8
 8005b84:	40020410 	.word	0x40020410
 8005b88:	40020428 	.word	0x40020428
 8005b8c:	40020440 	.word	0x40020440
 8005b90:	40020458 	.word	0x40020458
 8005b94:	40020470 	.word	0x40020470
 8005b98:	40020488 	.word	0x40020488
 8005b9c:	400204a0 	.word	0x400204a0
 8005ba0:	400204b8 	.word	0x400204b8
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d160      	bne.n	8005c90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7f      	ldr	r2, [pc, #508]	; (8005dd0 <HAL_DMA_IRQHandler+0xc74>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d04a      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a7d      	ldr	r2, [pc, #500]	; (8005dd4 <HAL_DMA_IRQHandler+0xc78>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d045      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a7c      	ldr	r2, [pc, #496]	; (8005dd8 <HAL_DMA_IRQHandler+0xc7c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d040      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a7a      	ldr	r2, [pc, #488]	; (8005ddc <HAL_DMA_IRQHandler+0xc80>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a79      	ldr	r2, [pc, #484]	; (8005de0 <HAL_DMA_IRQHandler+0xc84>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d036      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a77      	ldr	r2, [pc, #476]	; (8005de4 <HAL_DMA_IRQHandler+0xc88>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d031      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a76      	ldr	r2, [pc, #472]	; (8005de8 <HAL_DMA_IRQHandler+0xc8c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d02c      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a74      	ldr	r2, [pc, #464]	; (8005dec <HAL_DMA_IRQHandler+0xc90>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d027      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a73      	ldr	r2, [pc, #460]	; (8005df0 <HAL_DMA_IRQHandler+0xc94>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a71      	ldr	r2, [pc, #452]	; (8005df4 <HAL_DMA_IRQHandler+0xc98>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01d      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a70      	ldr	r2, [pc, #448]	; (8005df8 <HAL_DMA_IRQHandler+0xc9c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6e      	ldr	r2, [pc, #440]	; (8005dfc <HAL_DMA_IRQHandler+0xca0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6d      	ldr	r2, [pc, #436]	; (8005e00 <HAL_DMA_IRQHandler+0xca4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a6b      	ldr	r2, [pc, #428]	; (8005e04 <HAL_DMA_IRQHandler+0xca8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6a      	ldr	r2, [pc, #424]	; (8005e08 <HAL_DMA_IRQHandler+0xcac>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_DMA_IRQHandler+0xb12>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a68      	ldr	r2, [pc, #416]	; (8005e0c <HAL_DMA_IRQHandler+0xcb0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <HAL_DMA_IRQHandler+0xb24>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0208 	bic.w	r2, r2, #8
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e007      	b.n	8005c90 <HAL_DMA_IRQHandler+0xb34>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0204 	bic.w	r2, r2, #4
 8005c8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8165 	beq.w	8005f64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ca2:	e15f      	b.n	8005f64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	2202      	movs	r2, #2
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80c5 	beq.w	8005e44 <HAL_DMA_IRQHandler+0xce8>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80bf 	beq.w	8005e44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2202      	movs	r2, #2
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d018      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 813a 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfc:	e134      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8130 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d10:	e12a      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 8089 	bne.w	8005e30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <HAL_DMA_IRQHandler+0xc74>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d04a      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <HAL_DMA_IRQHandler+0xc78>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d045      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_DMA_IRQHandler+0xc7c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d040      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a26      	ldr	r2, [pc, #152]	; (8005ddc <HAL_DMA_IRQHandler+0xc80>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d03b      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <HAL_DMA_IRQHandler+0xc84>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d036      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <HAL_DMA_IRQHandler+0xc88>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d031      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_DMA_IRQHandler+0xc8c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d02c      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <HAL_DMA_IRQHandler+0xc90>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d027      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_DMA_IRQHandler+0xc94>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d022      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <HAL_DMA_IRQHandler+0xc98>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01d      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <HAL_DMA_IRQHandler+0xc9c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d018      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <HAL_DMA_IRQHandler+0xca0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d013      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <HAL_DMA_IRQHandler+0xca4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <HAL_DMA_IRQHandler+0xca8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d009      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_DMA_IRQHandler+0xcac>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_DMA_IRQHandler+0xc62>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <HAL_DMA_IRQHandler+0xcb0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d128      	bne.n	8005e10 <HAL_DMA_IRQHandler+0xcb4>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0214 	bic.w	r2, r2, #20
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e027      	b.n	8005e20 <HAL_DMA_IRQHandler+0xcc4>
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 020a 	bic.w	r2, r2, #10
 8005e1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8097 	beq.w	8005f68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e42:	e091      	b.n	8005f68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8088 	beq.w	8005f6a <HAL_DMA_IRQHandler+0xe0e>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8082 	beq.w	8005f6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a41      	ldr	r2, [pc, #260]	; (8005f70 <HAL_DMA_IRQHandler+0xe14>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d04a      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3f      	ldr	r2, [pc, #252]	; (8005f74 <HAL_DMA_IRQHandler+0xe18>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d045      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a3e      	ldr	r2, [pc, #248]	; (8005f78 <HAL_DMA_IRQHandler+0xe1c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d040      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a3c      	ldr	r2, [pc, #240]	; (8005f7c <HAL_DMA_IRQHandler+0xe20>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d03b      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <HAL_DMA_IRQHandler+0xe24>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d036      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a39      	ldr	r2, [pc, #228]	; (8005f84 <HAL_DMA_IRQHandler+0xe28>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d031      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a38      	ldr	r2, [pc, #224]	; (8005f88 <HAL_DMA_IRQHandler+0xe2c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d02c      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a36      	ldr	r2, [pc, #216]	; (8005f8c <HAL_DMA_IRQHandler+0xe30>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d027      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a35      	ldr	r2, [pc, #212]	; (8005f90 <HAL_DMA_IRQHandler+0xe34>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d022      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <HAL_DMA_IRQHandler+0xe38>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01d      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <HAL_DMA_IRQHandler+0xe3c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d018      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	; (8005f9c <HAL_DMA_IRQHandler+0xe40>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <HAL_DMA_IRQHandler+0xe44>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <HAL_DMA_IRQHandler+0xe48>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <HAL_DMA_IRQHandler+0xe4c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_DMA_IRQHandler+0xdaa>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <HAL_DMA_IRQHandler+0xe50>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d108      	bne.n	8005f18 <HAL_DMA_IRQHandler+0xdbc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 021c 	bic.w	r2, r2, #28
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e007      	b.n	8005f28 <HAL_DMA_IRQHandler+0xdcc>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 020e 	bic.w	r2, r2, #14
 8005f26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	e004      	b.n	8005f6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f6a:	3728      	adds	r7, #40	; 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40020010 	.word	0x40020010
 8005f74:	40020028 	.word	0x40020028
 8005f78:	40020040 	.word	0x40020040
 8005f7c:	40020058 	.word	0x40020058
 8005f80:	40020070 	.word	0x40020070
 8005f84:	40020088 	.word	0x40020088
 8005f88:	400200a0 	.word	0x400200a0
 8005f8c:	400200b8 	.word	0x400200b8
 8005f90:	40020410 	.word	0x40020410
 8005f94:	40020428 	.word	0x40020428
 8005f98:	40020440 	.word	0x40020440
 8005f9c:	40020458 	.word	0x40020458
 8005fa0:	40020470 	.word	0x40020470
 8005fa4:	40020488 	.word	0x40020488
 8005fa8:	400204a0 	.word	0x400204a0
 8005fac:	400204b8 	.word	0x400204b8

08005fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a42      	ldr	r2, [pc, #264]	; (80060c8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04a      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a41      	ldr	r2, [pc, #260]	; (80060cc <DMA_CalcBaseAndBitshift+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d045      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a3f      	ldr	r2, [pc, #252]	; (80060d0 <DMA_CalcBaseAndBitshift+0x120>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d040      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3e      	ldr	r2, [pc, #248]	; (80060d4 <DMA_CalcBaseAndBitshift+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d03b      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a3c      	ldr	r2, [pc, #240]	; (80060d8 <DMA_CalcBaseAndBitshift+0x128>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d036      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <DMA_CalcBaseAndBitshift+0x12c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d031      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a39      	ldr	r2, [pc, #228]	; (80060e0 <DMA_CalcBaseAndBitshift+0x130>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02c      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a38      	ldr	r2, [pc, #224]	; (80060e4 <DMA_CalcBaseAndBitshift+0x134>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d027      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a36      	ldr	r2, [pc, #216]	; (80060e8 <DMA_CalcBaseAndBitshift+0x138>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a35      	ldr	r2, [pc, #212]	; (80060ec <DMA_CalcBaseAndBitshift+0x13c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a33      	ldr	r2, [pc, #204]	; (80060f0 <DMA_CalcBaseAndBitshift+0x140>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a32      	ldr	r2, [pc, #200]	; (80060f4 <DMA_CalcBaseAndBitshift+0x144>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a30      	ldr	r2, [pc, #192]	; (80060f8 <DMA_CalcBaseAndBitshift+0x148>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <DMA_CalcBaseAndBitshift+0x14c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2d      	ldr	r2, [pc, #180]	; (8006100 <DMA_CalcBaseAndBitshift+0x150>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <DMA_CalcBaseAndBitshift+0xa8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <DMA_CalcBaseAndBitshift+0x154>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d101      	bne.n	800605c <DMA_CalcBaseAndBitshift+0xac>
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <DMA_CalcBaseAndBitshift+0xae>
 800605c:	2300      	movs	r3, #0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d024      	beq.n	80060ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	3b10      	subs	r3, #16
 800606a:	4a27      	ldr	r2, [pc, #156]	; (8006108 <DMA_CalcBaseAndBitshift+0x158>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	4a24      	ldr	r2, [pc, #144]	; (800610c <DMA_CalcBaseAndBitshift+0x15c>)
 800607c:	5cd3      	ldrb	r3, [r2, r3]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d908      	bls.n	800609c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	4b1f      	ldr	r3, [pc, #124]	; (8006110 <DMA_CalcBaseAndBitshift+0x160>)
 8006092:	4013      	ands	r3, r2
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	659a      	str	r2, [r3, #88]	; 0x58
 800609a:	e00d      	b.n	80060b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <DMA_CalcBaseAndBitshift+0x160>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6593      	str	r3, [r2, #88]	; 0x58
 80060aa:	e005      	b.n	80060b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	40020010 	.word	0x40020010
 80060cc:	40020028 	.word	0x40020028
 80060d0:	40020040 	.word	0x40020040
 80060d4:	40020058 	.word	0x40020058
 80060d8:	40020070 	.word	0x40020070
 80060dc:	40020088 	.word	0x40020088
 80060e0:	400200a0 	.word	0x400200a0
 80060e4:	400200b8 	.word	0x400200b8
 80060e8:	40020410 	.word	0x40020410
 80060ec:	40020428 	.word	0x40020428
 80060f0:	40020440 	.word	0x40020440
 80060f4:	40020458 	.word	0x40020458
 80060f8:	40020470 	.word	0x40020470
 80060fc:	40020488 	.word	0x40020488
 8006100:	400204a0 	.word	0x400204a0
 8006104:	400204b8 	.word	0x400204b8
 8006108:	aaaaaaab 	.word	0xaaaaaaab
 800610c:	080123e0 	.word	0x080123e0
 8006110:	fffffc00 	.word	0xfffffc00

08006114 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d120      	bne.n	800616a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	2b03      	cmp	r3, #3
 800612e:	d858      	bhi.n	80061e2 <DMA_CheckFifoParam+0xce>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <DMA_CheckFifoParam+0x24>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	08006149 	.word	0x08006149
 800613c:	0800615b 	.word	0x0800615b
 8006140:	08006149 	.word	0x08006149
 8006144:	080061e3 	.word	0x080061e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d048      	beq.n	80061e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006158:	e045      	b.n	80061e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006162:	d142      	bne.n	80061ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006168:	e03f      	b.n	80061ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006172:	d123      	bne.n	80061bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	2b03      	cmp	r3, #3
 800617a:	d838      	bhi.n	80061ee <DMA_CheckFifoParam+0xda>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <DMA_CheckFifoParam+0x70>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006195 	.word	0x08006195
 8006188:	0800619b 	.word	0x0800619b
 800618c:	08006195 	.word	0x08006195
 8006190:	080061ad 	.word	0x080061ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
        break;
 8006198:	e030      	b.n	80061fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d025      	beq.n	80061f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061aa:	e022      	b.n	80061f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061b4:	d11f      	bne.n	80061f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061ba:	e01c      	b.n	80061f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d902      	bls.n	80061ca <DMA_CheckFifoParam+0xb6>
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d003      	beq.n	80061d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061c8:	e018      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	73fb      	strb	r3, [r7, #15]
        break;
 80061ce:	e015      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
    break;
 80061e0:	e00b      	b.n	80061fa <DMA_CheckFifoParam+0xe6>
        break;
 80061e2:	bf00      	nop
 80061e4:	e00a      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e008      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        break;
 80061ea:	bf00      	nop
 80061ec:	e006      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        break;
 80061ee:	bf00      	nop
 80061f0:	e004      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        break;
 80061f2:	bf00      	nop
 80061f4:	e002      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
        break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <DMA_CheckFifoParam+0xe8>
    break;
 80061fa:	bf00      	nop
    }
  }

  return status;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop

0800620c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a38      	ldr	r2, [pc, #224]	; (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d022      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a36      	ldr	r2, [pc, #216]	; (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01d      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a35      	ldr	r2, [pc, #212]	; (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d018      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	; (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a32      	ldr	r2, [pc, #200]	; (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a30      	ldr	r2, [pc, #192]	; (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2d      	ldr	r2, [pc, #180]	; (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d101      	bne.n	800626e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01a      	beq.n	80062aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	3b08      	subs	r3, #8
 800627c:	4a28      	ldr	r2, [pc, #160]	; (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4b26      	ldr	r3, [pc, #152]	; (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a24      	ldr	r2, [pc, #144]	; (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062a8:	e024      	b.n	80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	3b10      	subs	r3, #16
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d806      	bhi.n	80062d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d902      	bls.n	80062d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3308      	adds	r3, #8
 80062d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4b18      	ldr	r3, [pc, #96]	; (8006338 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a16      	ldr	r2, [pc, #88]	; (800633c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	58025408 	.word	0x58025408
 8006304:	5802541c 	.word	0x5802541c
 8006308:	58025430 	.word	0x58025430
 800630c:	58025444 	.word	0x58025444
 8006310:	58025458 	.word	0x58025458
 8006314:	5802546c 	.word	0x5802546c
 8006318:	58025480 	.word	0x58025480
 800631c:	58025494 	.word	0x58025494
 8006320:	cccccccd 	.word	0xcccccccd
 8006324:	16009600 	.word	0x16009600
 8006328:	58025880 	.word	0x58025880
 800632c:	aaaaaaab 	.word	0xaaaaaaab
 8006330:	400204b8 	.word	0x400204b8
 8006334:	4002040f 	.word	0x4002040f
 8006338:	10008200 	.word	0x10008200
 800633c:	40020880 	.word	0x40020880

08006340 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d04a      	beq.n	80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d847      	bhi.n	80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a25      	ldr	r2, [pc, #148]	; (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a24      	ldr	r2, [pc, #144]	; (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d01d      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a22      	ldr	r2, [pc, #136]	; (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1e      	ldr	r2, [pc, #120]	; (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d101      	bne.n	80063b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a15      	ldr	r2, [pc, #84]	; (800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063c8:	671a      	str	r2, [r3, #112]	; 0x70
 80063ca:	e009      	b.n	80063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a11      	ldr	r2, [pc, #68]	; (8006424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2201      	movs	r2, #1
 80063e6:	409a      	lsls	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	58025408 	.word	0x58025408
 80063fc:	5802541c 	.word	0x5802541c
 8006400:	58025430 	.word	0x58025430
 8006404:	58025444 	.word	0x58025444
 8006408:	58025458 	.word	0x58025458
 800640c:	5802546c 	.word	0x5802546c
 8006410:	58025480 	.word	0x58025480
 8006414:	58025494 	.word	0x58025494
 8006418:	1600963f 	.word	0x1600963f
 800641c:	58025940 	.word	0x58025940
 8006420:	1000823f 	.word	0x1000823f
 8006424:	40020940 	.word	0x40020940

08006428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006436:	4b89      	ldr	r3, [pc, #548]	; (800665c <HAL_GPIO_Init+0x234>)
 8006438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800643a:	e194      	b.n	8006766 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
 8006448:	4013      	ands	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 8186 	beq.w	8006760 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d005      	beq.n	800646c <HAL_GPIO_Init+0x44>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d130      	bne.n	80064ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2203      	movs	r2, #3
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064a2:	2201      	movs	r2, #1
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43db      	mvns	r3, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4013      	ands	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	091b      	lsrs	r3, r3, #4
 80064b8:	f003 0201 	and.w	r2, r3, #1
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d017      	beq.n	800650a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	2203      	movs	r2, #3
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d123      	bne.n	800655e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	08da      	lsrs	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3208      	adds	r2, #8
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	220f      	movs	r2, #15
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4313      	orrs	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	08da      	lsrs	r2, r3, #3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3208      	adds	r2, #8
 8006558:	69b9      	ldr	r1, [r7, #24]
 800655a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	2203      	movs	r2, #3
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4013      	ands	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0203 	and.w	r2, r3, #3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80e0 	beq.w	8006760 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a0:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <HAL_GPIO_Init+0x238>)
 80065a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065a6:	4a2e      	ldr	r2, [pc, #184]	; (8006660 <HAL_GPIO_Init+0x238>)
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80065b0:	4b2b      	ldr	r3, [pc, #172]	; (8006660 <HAL_GPIO_Init+0x238>)
 80065b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065be:	4a29      	ldr	r2, [pc, #164]	; (8006664 <HAL_GPIO_Init+0x23c>)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	089b      	lsrs	r3, r3, #2
 80065c4:	3302      	adds	r3, #2
 80065c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	220f      	movs	r2, #15
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <HAL_GPIO_Init+0x240>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d052      	beq.n	8006690 <HAL_GPIO_Init+0x268>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <HAL_GPIO_Init+0x244>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d031      	beq.n	8006656 <HAL_GPIO_Init+0x22e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_GPIO_Init+0x248>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d02b      	beq.n	8006652 <HAL_GPIO_Init+0x22a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <HAL_GPIO_Init+0x24c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d025      	beq.n	800664e <HAL_GPIO_Init+0x226>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <HAL_GPIO_Init+0x250>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01f      	beq.n	800664a <HAL_GPIO_Init+0x222>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <HAL_GPIO_Init+0x254>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d019      	beq.n	8006646 <HAL_GPIO_Init+0x21e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <HAL_GPIO_Init+0x258>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_GPIO_Init+0x21a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <HAL_GPIO_Init+0x25c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00d      	beq.n	800663e <HAL_GPIO_Init+0x216>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a18      	ldr	r2, [pc, #96]	; (8006688 <HAL_GPIO_Init+0x260>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <HAL_GPIO_Init+0x212>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a17      	ldr	r2, [pc, #92]	; (800668c <HAL_GPIO_Init+0x264>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <HAL_GPIO_Init+0x20e>
 8006632:	2309      	movs	r3, #9
 8006634:	e02d      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 8006636:	230a      	movs	r3, #10
 8006638:	e02b      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 800663a:	2308      	movs	r3, #8
 800663c:	e029      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 800663e:	2307      	movs	r3, #7
 8006640:	e027      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 8006642:	2306      	movs	r3, #6
 8006644:	e025      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 8006646:	2305      	movs	r3, #5
 8006648:	e023      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 800664a:	2304      	movs	r3, #4
 800664c:	e021      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 800664e:	2303      	movs	r3, #3
 8006650:	e01f      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 8006652:	2302      	movs	r3, #2
 8006654:	e01d      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 8006656:	2301      	movs	r3, #1
 8006658:	e01b      	b.n	8006692 <HAL_GPIO_Init+0x26a>
 800665a:	bf00      	nop
 800665c:	58000080 	.word	0x58000080
 8006660:	58024400 	.word	0x58024400
 8006664:	58000400 	.word	0x58000400
 8006668:	58020000 	.word	0x58020000
 800666c:	58020400 	.word	0x58020400
 8006670:	58020800 	.word	0x58020800
 8006674:	58020c00 	.word	0x58020c00
 8006678:	58021000 	.word	0x58021000
 800667c:	58021400 	.word	0x58021400
 8006680:	58021800 	.word	0x58021800
 8006684:	58021c00 	.word	0x58021c00
 8006688:	58022000 	.word	0x58022000
 800668c:	58022400 	.word	0x58022400
 8006690:	2300      	movs	r3, #0
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	f002 0203 	and.w	r2, r2, #3
 8006698:	0092      	lsls	r2, r2, #2
 800669a:	4093      	lsls	r3, r2
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a2:	4938      	ldr	r1, [pc, #224]	; (8006784 <HAL_GPIO_Init+0x35c>)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	3302      	adds	r3, #2
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	f47f ae63 	bne.w	800643c <HAL_GPIO_Init+0x14>
  }
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	3724      	adds	r7, #36	; 0x24
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	58000400 	.word	0x58000400

08006788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
 8006794:	4613      	mov	r3, r2
 8006796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006798:	787b      	ldrb	r3, [r7, #1]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800679e:	887a      	ldrh	r2, [r7, #2]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067a4:	e003      	b.n	80067ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	041a      	lsls	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	619a      	str	r2, [r3, #24]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e08b      	b.n	80068e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fa fcfc 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2224      	movs	r2, #36	; 0x24
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800680c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800681c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d107      	bne.n	8006836 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	e006      	b.n	8006844 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006842:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d108      	bne.n	800685e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	e007      	b.n	800686e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800686c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <HAL_I2C_Init+0x134>)
 800687a:	430b      	orrs	r3, r1
 800687c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800688c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1a      	ldr	r2, [r3, #32]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	02008000 	.word	0x02008000

080068f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	461a      	mov	r2, r3
 8006900:	460b      	mov	r3, r1
 8006902:	817b      	strh	r3, [r7, #10]
 8006904:	4613      	mov	r3, r2
 8006906:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b20      	cmp	r3, #32
 8006912:	f040 80fd 	bne.w	8006b10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_I2C_Master_Transmit+0x30>
 8006920:	2302      	movs	r3, #2
 8006922:	e0f6      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800692c:	f7fb ffe0 	bl	80028f0 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2319      	movs	r3, #25
 8006938:	2201      	movs	r2, #1
 800693a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fa0a 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e0e1      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2221      	movs	r2, #33	; 0x21
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2210      	movs	r2, #16
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	893a      	ldrh	r2, [r7, #8]
 800696e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	2bff      	cmp	r3, #255	; 0xff
 800697e:	d906      	bls.n	800698e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e007      	b.n	800699e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d024      	beq.n	80069f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	3301      	adds	r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	8979      	ldrh	r1, [r7, #10]
 80069e2:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <HAL_I2C_Master_Transmit+0x228>)
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fc05 	bl	80071f8 <I2C_TransferConfig>
 80069ee:	e066      	b.n	8006abe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	8979      	ldrh	r1, [r7, #10]
 80069f8:	4b48      	ldr	r3, [pc, #288]	; (8006b1c <HAL_I2C_Master_Transmit+0x228>)
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fbfa 	bl	80071f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006a04:	e05b      	b.n	8006abe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f9fd 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07b      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d034      	beq.n	8006abe <HAL_I2C_Master_Transmit+0x1ca>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d130      	bne.n	8006abe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f976 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e04d      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2bff      	cmp	r3, #255	; 0xff
 8006a7e:	d90e      	bls.n	8006a9e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	22ff      	movs	r2, #255	; 0xff
 8006a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	8979      	ldrh	r1, [r7, #10]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fbae 	bl	80071f8 <I2C_TransferConfig>
 8006a9c:	e00f      	b.n	8006abe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	8979      	ldrh	r1, [r7, #10]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fb9d 	bl	80071f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d19e      	bne.n	8006a06 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	6a39      	ldr	r1, [r7, #32]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f9e3 	bl	8006e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01a      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <HAL_I2C_Master_Transmit+0x22c>)
 8006af0:	400b      	ands	r3, r1
 8006af2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e000      	b.n	8006b12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	80002000 	.word	0x80002000
 8006b20:	fe00e800 	.word	0xfe00e800

08006b24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	460b      	mov	r3, r1
 8006b32:	817b      	strh	r3, [r7, #10]
 8006b34:	4613      	mov	r3, r2
 8006b36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	f040 80db 	bne.w	8006cfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_I2C_Master_Receive+0x30>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e0d4      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b5c:	f7fb fec8 	bl	80028f0 <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	2319      	movs	r3, #25
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f8f2 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e0bf      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2222      	movs	r2, #34	; 0x22
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2210      	movs	r2, #16
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	893a      	ldrh	r2, [r7, #8]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2bff      	cmp	r3, #255	; 0xff
 8006bae:	d90e      	bls.n	8006bce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	8979      	ldrh	r1, [r7, #10]
 8006bbe:	4b52      	ldr	r3, [pc, #328]	; (8006d08 <HAL_I2C_Master_Receive+0x1e4>)
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fb16 	bl	80071f8 <I2C_TransferConfig>
 8006bcc:	e06d      	b.n	8006caa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	8979      	ldrh	r1, [r7, #10]
 8006be0:	4b49      	ldr	r3, [pc, #292]	; (8006d08 <HAL_I2C_Master_Receive+0x1e4>)
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fb05 	bl	80071f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006bee:	e05c      	b.n	8006caa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	6a39      	ldr	r1, [r7, #32]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f993 	bl	8006f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e07c      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d034      	beq.n	8006caa <HAL_I2C_Master_Receive+0x186>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d130      	bne.n	8006caa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f880 	bl	8006d58 <I2C_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e04d      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2bff      	cmp	r3, #255	; 0xff
 8006c6a:	d90e      	bls.n	8006c8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	8979      	ldrh	r1, [r7, #10]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fab8 	bl	80071f8 <I2C_TransferConfig>
 8006c88:	e00f      	b.n	8006caa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	8979      	ldrh	r1, [r7, #10]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 faa7 	bl	80071f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d19d      	bne.n	8006bf0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	6a39      	ldr	r1, [r7, #32]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f8ed 	bl	8006e98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e01a      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <HAL_I2C_Master_Receive+0x1e8>)
 8006cdc:	400b      	ands	r3, r1
 8006cde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e000      	b.n	8006cfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	80002400 	.word	0x80002400
 8006d0c:	fe00e800 	.word	0xfe00e800

08006d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d103      	bne.n	8006d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d007      	beq.n	8006d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	619a      	str	r2, [r3, #24]
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d68:	e03b      	b.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f962 	bl	8007038 <I2C_IsErrorOccurred>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e041      	b.n	8006e02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d84:	d02d      	beq.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d86:	f7fb fdb3 	bl	80028f0 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d122      	bne.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4013      	ands	r3, r2
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	bf0c      	ite	eq
 8006dac:	2301      	moveq	r3, #1
 8006dae:	2300      	movne	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d113      	bne.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e00f      	b.n	8006e02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	bf0c      	ite	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	2300      	movne	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d0b4      	beq.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e16:	e033      	b.n	8006e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f90b 	bl	8007038 <I2C_IsErrorOccurred>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e031      	b.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e32:	d025      	beq.n	8006e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e34:	f7fb fd5c 	bl	80028f0 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d11a      	bne.n	8006e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d013      	beq.n	8006e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e007      	b.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d1c4      	bne.n	8006e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ea4:	e02f      	b.n	8006f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f8c4 	bl	8007038 <I2C_IsErrorOccurred>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e02d      	b.n	8006f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fb fd19 	bl	80028f0 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11a      	bne.n	8006f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d013      	beq.n	8006f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee2:	f043 0220 	orr.w	r2, r3, #32
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e007      	b.n	8006f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d1c8      	bne.n	8006ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006f30:	e071      	b.n	8007016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f87e 	bl	8007038 <I2C_IsErrorOccurred>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d13b      	bne.n	8006fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d138      	bne.n	8006fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d105      	bne.n	8006f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d121      	bne.n	8006fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2210      	movs	r2, #16
 8006f88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2220      	movs	r2, #32
 8006f96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006fa4:	400b      	ands	r3, r1
 8006fa6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]
 8006fc4:	e002      	b.n	8006fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006fcc:	f7fb fc90 	bl	80028f0 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d302      	bcc.n	8006fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d119      	bne.n	8007016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d116      	bne.n	8007016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d00f      	beq.n	8007016 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	f043 0220 	orr.w	r2, r3, #32
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d002      	beq.n	800702a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d083      	beq.n	8006f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	fe00e800 	.word	0xfe00e800

08007038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d068      	beq.n	8007136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2210      	movs	r2, #16
 800706a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800706c:	e049      	b.n	8007102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007074:	d045      	beq.n	8007102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007076:	f7fb fc3b 	bl	80028f0 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <I2C_IsErrorOccurred+0x54>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d13a      	bne.n	8007102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800709e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ae:	d121      	bne.n	80070f4 <I2C_IsErrorOccurred+0xbc>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b6:	d01d      	beq.n	80070f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d01a      	beq.n	80070f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80070ce:	f7fb fc0f 	bl	80028f0 <HAL_GetTick>
 80070d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d4:	e00e      	b.n	80070f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80070d6:	f7fb fc0b 	bl	80028f0 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b19      	cmp	r3, #25
 80070e2:	d907      	bls.n	80070f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	f043 0320 	orr.w	r3, r3, #32
 80070ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80070f2:	e006      	b.n	8007102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d1e9      	bne.n	80070d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d003      	beq.n	8007118 <I2C_IsErrorOccurred+0xe0>
 8007110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0aa      	beq.n	800706e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2220      	movs	r2, #32
 8007126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	f043 0304 	orr.w	r3, r3, #4
 800712e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f043 0308 	orr.w	r3, r3, #8
 8007170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800717a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	f043 0302 	orr.w	r3, r3, #2
 8007192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01c      	beq.n	80071e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff fdaf 	bl	8006d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6859      	ldr	r1, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <I2C_IsErrorOccurred+0x1bc>)
 80071be:	400b      	ands	r3, r1
 80071c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80071e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3728      	adds	r7, #40	; 0x28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	fe00e800 	.word	0xfe00e800

080071f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	817b      	strh	r3, [r7, #10]
 8007206:	4613      	mov	r3, r2
 8007208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007210:	7a7b      	ldrb	r3, [r7, #9]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	4313      	orrs	r3, r2
 8007222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	0d5b      	lsrs	r3, r3, #21
 8007232:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <I2C_TransferConfig+0x60>)
 8007238:	430b      	orrs	r3, r1
 800723a:	43db      	mvns	r3, r3
 800723c:	ea02 0103 	and.w	r1, r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	03ff63ff 	.word	0x03ff63ff

0800725c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b20      	cmp	r3, #32
 8007270:	d138      	bne.n	80072e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800727c:	2302      	movs	r3, #2
 800727e:	e032      	b.n	80072e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2224      	movs	r2, #36	; 0x24
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6819      	ldr	r1, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e000      	b.n	80072e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b20      	cmp	r3, #32
 8007306:	d139      	bne.n	800737c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007312:	2302      	movs	r3, #2
 8007314:	e033      	b.n	800737e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2224      	movs	r2, #36	; 0x24
 8007322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007394:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800739a:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073a4:	4b09      	ldr	r3, [pc, #36]	; (80073cc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80073a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4906      	ldr	r1, [pc, #24]	; (80073d0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	604b      	str	r3, [r1, #4]
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	58000400 	.word	0x58000400

080073d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <HAL_PWREx_ConfigSupply+0x70>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d00a      	beq.n	80073fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <HAL_PWREx_ConfigSupply+0x70>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d001      	beq.n	80073fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e01f      	b.n	800743a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e01d      	b.n	800743a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80073fe:	4b11      	ldr	r3, [pc, #68]	; (8007444 <HAL_PWREx_ConfigSupply+0x70>)
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f023 0207 	bic.w	r2, r3, #7
 8007406:	490f      	ldr	r1, [pc, #60]	; (8007444 <HAL_PWREx_ConfigSupply+0x70>)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4313      	orrs	r3, r2
 800740c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800740e:	f7fb fa6f 	bl	80028f0 <HAL_GetTick>
 8007412:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007414:	e009      	b.n	800742a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007416:	f7fb fa6b 	bl	80028f0 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007424:	d901      	bls.n	800742a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e007      	b.n	800743a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_PWREx_ConfigSupply+0x70>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d1ee      	bne.n	8007416 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	58024800 	.word	0x58024800

08007448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08c      	sub	sp, #48	; 0x30
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f000 bc48 	b.w	8007cec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8088 	beq.w	800757a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800746a:	4b99      	ldr	r3, [pc, #612]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007474:	4b96      	ldr	r3, [pc, #600]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	2b10      	cmp	r3, #16
 800747e:	d007      	beq.n	8007490 <HAL_RCC_OscConfig+0x48>
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	2b18      	cmp	r3, #24
 8007484:	d111      	bne.n	80074aa <HAL_RCC_OscConfig+0x62>
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d10c      	bne.n	80074aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007490:	4b8f      	ldr	r3, [pc, #572]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d06d      	beq.n	8007578 <HAL_RCC_OscConfig+0x130>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d169      	bne.n	8007578 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f000 bc21 	b.w	8007cec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b2:	d106      	bne.n	80074c2 <HAL_RCC_OscConfig+0x7a>
 80074b4:	4b86      	ldr	r3, [pc, #536]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a85      	ldr	r2, [pc, #532]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	e02e      	b.n	8007520 <HAL_RCC_OscConfig+0xd8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCC_OscConfig+0x9c>
 80074ca:	4b81      	ldr	r3, [pc, #516]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a80      	ldr	r2, [pc, #512]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	4b7e      	ldr	r3, [pc, #504]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a7d      	ldr	r2, [pc, #500]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e01d      	b.n	8007520 <HAL_RCC_OscConfig+0xd8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ec:	d10c      	bne.n	8007508 <HAL_RCC_OscConfig+0xc0>
 80074ee:	4b78      	ldr	r3, [pc, #480]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a77      	ldr	r2, [pc, #476]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	4b75      	ldr	r3, [pc, #468]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a74      	ldr	r2, [pc, #464]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	e00b      	b.n	8007520 <HAL_RCC_OscConfig+0xd8>
 8007508:	4b71      	ldr	r3, [pc, #452]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a70      	ldr	r2, [pc, #448]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800750e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	4b6e      	ldr	r3, [pc, #440]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a6d      	ldr	r2, [pc, #436]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800751a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800751e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d013      	beq.n	8007550 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fb f9e2 	bl	80028f0 <HAL_GetTick>
 800752c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007530:	f7fb f9de 	bl	80028f0 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b64      	cmp	r3, #100	; 0x64
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e3d4      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007542:	4b63      	ldr	r3, [pc, #396]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0xe8>
 800754e:	e014      	b.n	800757a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fb f9ce 	bl	80028f0 <HAL_GetTick>
 8007554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007558:	f7fb f9ca 	bl	80028f0 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b64      	cmp	r3, #100	; 0x64
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e3c0      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800756a:	4b59      	ldr	r3, [pc, #356]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f0      	bne.n	8007558 <HAL_RCC_OscConfig+0x110>
 8007576:	e000      	b.n	800757a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80ca 	beq.w	800771c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007588:	4b51      	ldr	r3, [pc, #324]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007590:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007592:	4b4f      	ldr	r3, [pc, #316]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_RCC_OscConfig+0x166>
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	2b18      	cmp	r3, #24
 80075a2:	d156      	bne.n	8007652 <HAL_RCC_OscConfig+0x20a>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d151      	bne.n	8007652 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ae:	4b48      	ldr	r3, [pc, #288]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_RCC_OscConfig+0x17e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e392      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075c6:	4b42      	ldr	r3, [pc, #264]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f023 0219 	bic.w	r2, r3, #25
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	493f      	ldr	r1, [pc, #252]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fb f98a 	bl	80028f0 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e0:	f7fb f986 	bl	80028f0 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e37c      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075f2:	4b37      	ldr	r3, [pc, #220]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fe:	f7fb f983 	bl	8002908 <HAL_GetREVID>
 8007602:	4603      	mov	r3, r0
 8007604:	f241 0203 	movw	r2, #4099	; 0x1003
 8007608:	4293      	cmp	r3, r2
 800760a:	d817      	bhi.n	800763c <HAL_RCC_OscConfig+0x1f4>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d108      	bne.n	8007626 <HAL_RCC_OscConfig+0x1de>
 8007614:	4b2e      	ldr	r3, [pc, #184]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800761c:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800761e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007622:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007624:	e07a      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007626:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	031b      	lsls	r3, r3, #12
 8007634:	4926      	ldr	r1, [pc, #152]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007636:	4313      	orrs	r3, r2
 8007638:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800763a:	e06f      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763c:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	061b      	lsls	r3, r3, #24
 800764a:	4921      	ldr	r1, [pc, #132]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800764c:	4313      	orrs	r3, r2
 800764e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007650:	e064      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d047      	beq.n	80076ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800765a:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 0219 	bic.w	r2, r3, #25
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	491a      	ldr	r1, [pc, #104]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007668:	4313      	orrs	r3, r2
 800766a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fb f940 	bl	80028f0 <HAL_GetTick>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007674:	f7fb f93c 	bl	80028f0 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e332      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007692:	f7fb f939 	bl	8002908 <HAL_GetREVID>
 8007696:	4603      	mov	r3, r0
 8007698:	f241 0203 	movw	r2, #4099	; 0x1003
 800769c:	4293      	cmp	r3, r2
 800769e:	d819      	bhi.n	80076d4 <HAL_RCC_OscConfig+0x28c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d108      	bne.n	80076ba <HAL_RCC_OscConfig+0x272>
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076b0:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80076b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b6:	6053      	str	r3, [r2, #4]
 80076b8:	e030      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	031b      	lsls	r3, r3, #12
 80076c8:	4901      	ldr	r1, [pc, #4]	; (80076d0 <HAL_RCC_OscConfig+0x288>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	604b      	str	r3, [r1, #4]
 80076ce:	e025      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
 80076d0:	58024400 	.word	0x58024400
 80076d4:	4b9a      	ldr	r3, [pc, #616]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	4997      	ldr	r1, [pc, #604]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]
 80076e8:	e018      	b.n	800771c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ea:	4b95      	ldr	r3, [pc, #596]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a94      	ldr	r2, [pc, #592]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80076f0:	f023 0301 	bic.w	r3, r3, #1
 80076f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f6:	f7fb f8fb 	bl	80028f0 <HAL_GetTick>
 80076fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076fe:	f7fb f8f7 	bl	80028f0 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e2ed      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007710:	4b8b      	ldr	r3, [pc, #556]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80a9 	beq.w	800787c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772a:	4b85      	ldr	r3, [pc, #532]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007732:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007734:	4b82      	ldr	r3, [pc, #520]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d007      	beq.n	8007750 <HAL_RCC_OscConfig+0x308>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b18      	cmp	r3, #24
 8007744:	d13a      	bne.n	80077bc <HAL_RCC_OscConfig+0x374>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d135      	bne.n	80077bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007750:	4b7b      	ldr	r3, [pc, #492]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_RCC_OscConfig+0x320>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d001      	beq.n	8007768 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e2c1      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007768:	f7fb f8ce 	bl	8002908 <HAL_GetREVID>
 800776c:	4603      	mov	r3, r0
 800776e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007772:	4293      	cmp	r3, r2
 8007774:	d817      	bhi.n	80077a6 <HAL_RCC_OscConfig+0x35e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	2b20      	cmp	r3, #32
 800777c:	d108      	bne.n	8007790 <HAL_RCC_OscConfig+0x348>
 800777e:	4b70      	ldr	r3, [pc, #448]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007786:	4a6e      	ldr	r2, [pc, #440]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800778c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800778e:	e075      	b.n	800787c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007790:	4b6b      	ldr	r3, [pc, #428]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	069b      	lsls	r3, r3, #26
 800779e:	4968      	ldr	r1, [pc, #416]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077a4:	e06a      	b.n	800787c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077a6:	4b66      	ldr	r3, [pc, #408]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	061b      	lsls	r3, r3, #24
 80077b4:	4962      	ldr	r1, [pc, #392]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077ba:	e05f      	b.n	800787c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d042      	beq.n	800784a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80077c4:	4b5e      	ldr	r3, [pc, #376]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a5d      	ldr	r2, [pc, #372]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fb f88e 	bl	80028f0 <HAL_GetTick>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80077d8:	f7fb f88a 	bl	80028f0 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e280      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077ea:	4b55      	ldr	r3, [pc, #340]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f0      	beq.n	80077d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077f6:	f7fb f887 	bl	8002908 <HAL_GetREVID>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007800:	4293      	cmp	r3, r2
 8007802:	d817      	bhi.n	8007834 <HAL_RCC_OscConfig+0x3ec>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	2b20      	cmp	r3, #32
 800780a:	d108      	bne.n	800781e <HAL_RCC_OscConfig+0x3d6>
 800780c:	4b4c      	ldr	r3, [pc, #304]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007814:	4a4a      	ldr	r2, [pc, #296]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007816:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800781a:	6053      	str	r3, [r2, #4]
 800781c:	e02e      	b.n	800787c <HAL_RCC_OscConfig+0x434>
 800781e:	4b48      	ldr	r3, [pc, #288]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	069b      	lsls	r3, r3, #26
 800782c:	4944      	ldr	r1, [pc, #272]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 800782e:	4313      	orrs	r3, r2
 8007830:	604b      	str	r3, [r1, #4]
 8007832:	e023      	b.n	800787c <HAL_RCC_OscConfig+0x434>
 8007834:	4b42      	ldr	r3, [pc, #264]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	061b      	lsls	r3, r3, #24
 8007842:	493f      	ldr	r1, [pc, #252]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007844:	4313      	orrs	r3, r2
 8007846:	60cb      	str	r3, [r1, #12]
 8007848:	e018      	b.n	800787c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800784a:	4b3d      	ldr	r3, [pc, #244]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a3c      	ldr	r2, [pc, #240]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007856:	f7fb f84b 	bl	80028f0 <HAL_GetTick>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800785c:	e008      	b.n	8007870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800785e:	f7fb f847 	bl	80028f0 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e23d      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007870:	4b33      	ldr	r3, [pc, #204]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f0      	bne.n	800785e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d036      	beq.n	80078f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d019      	beq.n	80078c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007894:	4a2a      	ldr	r2, [pc, #168]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fb f828 	bl	80028f0 <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078a4:	f7fb f824 	bl	80028f0 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e21a      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078b6:	4b22      	ldr	r3, [pc, #136]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80078b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCC_OscConfig+0x45c>
 80078c2:	e018      	b.n	80078f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078c4:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80078c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c8:	4a1d      	ldr	r2, [pc, #116]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d0:	f7fb f80e 	bl	80028f0 <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078d8:	f7fb f80a 	bl	80028f0 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e200      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 80078ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1f0      	bne.n	80078d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d039      	beq.n	8007976 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01c      	beq.n	8007944 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a0c      	ldr	r2, [pc, #48]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007914:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007916:	f7fa ffeb 	bl	80028f0 <HAL_GetTick>
 800791a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800791c:	e008      	b.n	8007930 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800791e:	f7fa ffe7 	bl	80028f0 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e1dd      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <HAL_RCC_OscConfig+0x4f8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0f0      	beq.n	800791e <HAL_RCC_OscConfig+0x4d6>
 800793c:	e01b      	b.n	8007976 <HAL_RCC_OscConfig+0x52e>
 800793e:	bf00      	nop
 8007940:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007944:	4b9b      	ldr	r3, [pc, #620]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a9a      	ldr	r2, [pc, #616]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 800794a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007950:	f7fa ffce 	bl	80028f0 <HAL_GetTick>
 8007954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007958:	f7fa ffca 	bl	80028f0 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e1c0      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800796a:	4b92      	ldr	r3, [pc, #584]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8081 	beq.w	8007a86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007984:	4b8c      	ldr	r3, [pc, #560]	; (8007bb8 <HAL_RCC_OscConfig+0x770>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a8b      	ldr	r2, [pc, #556]	; (8007bb8 <HAL_RCC_OscConfig+0x770>)
 800798a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007990:	f7fa ffae 	bl	80028f0 <HAL_GetTick>
 8007994:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007998:	f7fa ffaa 	bl	80028f0 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b64      	cmp	r3, #100	; 0x64
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e1a0      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079aa:	4b83      	ldr	r3, [pc, #524]	; (8007bb8 <HAL_RCC_OscConfig+0x770>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0f0      	beq.n	8007998 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d106      	bne.n	80079cc <HAL_RCC_OscConfig+0x584>
 80079be:	4b7d      	ldr	r3, [pc, #500]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	4a7c      	ldr	r2, [pc, #496]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	6713      	str	r3, [r2, #112]	; 0x70
 80079ca:	e02d      	b.n	8007a28 <HAL_RCC_OscConfig+0x5e0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10c      	bne.n	80079ee <HAL_RCC_OscConfig+0x5a6>
 80079d4:	4b77      	ldr	r3, [pc, #476]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d8:	4a76      	ldr	r2, [pc, #472]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	6713      	str	r3, [r2, #112]	; 0x70
 80079e0:	4b74      	ldr	r3, [pc, #464]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	4a73      	ldr	r2, [pc, #460]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079e6:	f023 0304 	bic.w	r3, r3, #4
 80079ea:	6713      	str	r3, [r2, #112]	; 0x70
 80079ec:	e01c      	b.n	8007a28 <HAL_RCC_OscConfig+0x5e0>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCC_OscConfig+0x5c8>
 80079f6:	4b6f      	ldr	r3, [pc, #444]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	4a6e      	ldr	r2, [pc, #440]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 80079fc:	f043 0304 	orr.w	r3, r3, #4
 8007a00:	6713      	str	r3, [r2, #112]	; 0x70
 8007a02:	4b6c      	ldr	r3, [pc, #432]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	4a6b      	ldr	r2, [pc, #428]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a08:	f043 0301 	orr.w	r3, r3, #1
 8007a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0e:	e00b      	b.n	8007a28 <HAL_RCC_OscConfig+0x5e0>
 8007a10:	4b68      	ldr	r3, [pc, #416]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	4a67      	ldr	r2, [pc, #412]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a1c:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	4a64      	ldr	r2, [pc, #400]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a22:	f023 0304 	bic.w	r3, r3, #4
 8007a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d015      	beq.n	8007a5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a30:	f7fa ff5e 	bl	80028f0 <HAL_GetTick>
 8007a34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a36:	e00a      	b.n	8007a4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a38:	f7fa ff5a 	bl	80028f0 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e14e      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a4e:	4b59      	ldr	r3, [pc, #356]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0ee      	beq.n	8007a38 <HAL_RCC_OscConfig+0x5f0>
 8007a5a:	e014      	b.n	8007a86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fa ff48 	bl	80028f0 <HAL_GetTick>
 8007a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a62:	e00a      	b.n	8007a7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a64:	f7fa ff44 	bl	80028f0 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e138      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a7a:	4b4e      	ldr	r3, [pc, #312]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1ee      	bne.n	8007a64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 812d 	beq.w	8007cea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a90:	4b48      	ldr	r3, [pc, #288]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a98:	2b18      	cmp	r3, #24
 8007a9a:	f000 80bd 	beq.w	8007c18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	f040 809e 	bne.w	8007be4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a41      	ldr	r2, [pc, #260]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab4:	f7fa ff1c 	bl	80028f0 <HAL_GetTick>
 8007ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007abc:	f7fa ff18 	bl	80028f0 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e10e      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ace:	4b39      	ldr	r3, [pc, #228]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ada:	4b36      	ldr	r3, [pc, #216]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ade:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <HAL_RCC_OscConfig+0x774>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007aea:	0112      	lsls	r2, r2, #4
 8007aec:	430a      	orrs	r2, r1
 8007aee:	4931      	ldr	r1, [pc, #196]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	628b      	str	r3, [r1, #40]	; 0x28
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	3b01      	subs	r3, #1
 8007afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	3b01      	subs	r3, #1
 8007b04:	025b      	lsls	r3, r3, #9
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b24:	4923      	ldr	r1, [pc, #140]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007b2a:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	4a21      	ldr	r2, [pc, #132]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b36:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <HAL_RCC_OscConfig+0x778>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b42:	00d2      	lsls	r2, r2, #3
 8007b44:	491b      	ldr	r1, [pc, #108]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	f023 020c 	bic.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	4917      	ldr	r1, [pc, #92]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b5c:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	f023 0202 	bic.w	r2, r3, #2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b68:	4912      	ldr	r1, [pc, #72]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	4a07      	ldr	r2, [pc, #28]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007b98:	f043 0301 	orr.w	r3, r3, #1
 8007b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <HAL_RCC_OscConfig+0x76c>)
 8007ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007baa:	f7fa fea1 	bl	80028f0 <HAL_GetTick>
 8007bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bb0:	e011      	b.n	8007bd6 <HAL_RCC_OscConfig+0x78e>
 8007bb2:	bf00      	nop
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	58024800 	.word	0x58024800
 8007bbc:	fffffc0c 	.word	0xfffffc0c
 8007bc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc4:	f7fa fe94 	bl	80028f0 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e08a      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bd6:	4b47      	ldr	r3, [pc, #284]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x77c>
 8007be2:	e082      	b.n	8007cea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a42      	ldr	r2, [pc, #264]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fa fe7e 	bl	80028f0 <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fa fe7a 	bl	80028f0 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e070      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c0a:	4b3a      	ldr	r3, [pc, #232]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x7b0>
 8007c16:	e068      	b.n	8007cea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c18:	4b36      	ldr	r3, [pc, #216]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c1e:	4b35      	ldr	r3, [pc, #212]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d031      	beq.n	8007c90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f003 0203 	and.w	r2, r3, #3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d12a      	bne.n	8007c90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	091b      	lsrs	r3, r3, #4
 8007c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d122      	bne.n	8007c90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d11a      	bne.n	8007c90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	0a5b      	lsrs	r3, r3, #9
 8007c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d111      	bne.n	8007c90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0c1b      	lsrs	r3, r3, #16
 8007c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d108      	bne.n	8007c90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	0e1b      	lsrs	r3, r3, #24
 8007c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e02b      	b.n	8007cec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007c94:	4b17      	ldr	r3, [pc, #92]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	08db      	lsrs	r3, r3, #3
 8007c9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d01f      	beq.n	8007cea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cb6:	f7fa fe1b 	bl	80028f0 <HAL_GetTick>
 8007cba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007cbc:	bf00      	nop
 8007cbe:	f7fa fe17 	bl	80028f0 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d0f9      	beq.n	8007cbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <HAL_RCC_OscConfig+0x8b0>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cd6:	00d2      	lsls	r2, r2, #3
 8007cd8:	4906      	ldr	r1, [pc, #24]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	4a04      	ldr	r2, [pc, #16]	; (8007cf4 <HAL_RCC_OscConfig+0x8ac>)
 8007ce4:	f043 0301 	orr.w	r3, r3, #1
 8007ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3730      	adds	r7, #48	; 0x30
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	ffff0007 	.word	0xffff0007

08007cfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e19c      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d10:	4b8a      	ldr	r3, [pc, #552]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d910      	bls.n	8007d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d1e:	4b87      	ldr	r3, [pc, #540]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f023 020f 	bic.w	r2, r3, #15
 8007d26:	4985      	ldr	r1, [pc, #532]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d2e:	4b83      	ldr	r3, [pc, #524]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e184      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	4b7b      	ldr	r3, [pc, #492]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d908      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d5c:	4b78      	ldr	r3, [pc, #480]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	4975      	ldr	r1, [pc, #468]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695a      	ldr	r2, [r3, #20]
 8007d7e:	4b70      	ldr	r3, [pc, #448]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d908      	bls.n	8007d9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d8a:	4b6d      	ldr	r3, [pc, #436]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	496a      	ldr	r1, [pc, #424]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d010      	beq.n	8007dca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	4b64      	ldr	r3, [pc, #400]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d908      	bls.n	8007dca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007db8:	4b61      	ldr	r3, [pc, #388]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	495e      	ldr	r1, [pc, #376]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69da      	ldr	r2, [r3, #28]
 8007dda:	4b59      	ldr	r3, [pc, #356]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d908      	bls.n	8007df8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007de6:	4b56      	ldr	r3, [pc, #344]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	4953      	ldr	r1, [pc, #332]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	4b4d      	ldr	r3, [pc, #308]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d908      	bls.n	8007e26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e14:	4b4a      	ldr	r3, [pc, #296]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	f023 020f 	bic.w	r2, r3, #15
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4947      	ldr	r1, [pc, #284]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d055      	beq.n	8007ede <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e32:	4b43      	ldr	r3, [pc, #268]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	4940      	ldr	r1, [pc, #256]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d107      	bne.n	8007e5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e4c:	4b3c      	ldr	r3, [pc, #240]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d121      	bne.n	8007e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0f6      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d107      	bne.n	8007e74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e64:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d115      	bne.n	8007e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0ea      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e7c:	4b30      	ldr	r3, [pc, #192]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0de      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e8c:	4b2c      	ldr	r3, [pc, #176]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0d6      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e9c:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f023 0207 	bic.w	r2, r3, #7
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4925      	ldr	r1, [pc, #148]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eae:	f7fa fd1f 	bl	80028f0 <HAL_GetTick>
 8007eb2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eb4:	e00a      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb6:	f7fa fd1b 	bl	80028f0 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e0be      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d1eb      	bne.n	8007eb6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d010      	beq.n	8007f0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d208      	bcs.n	8007f0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f023 020f 	bic.w	r2, r3, #15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	490e      	ldr	r1, [pc, #56]	; (8007f40 <HAL_RCC_ClockConfig+0x244>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d214      	bcs.n	8007f44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f1a:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f023 020f 	bic.w	r2, r3, #15
 8007f22:	4906      	ldr	r1, [pc, #24]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2a:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <HAL_RCC_ClockConfig+0x240>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d005      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e086      	b.n	800804a <HAL_RCC_ClockConfig+0x34e>
 8007f3c:	52002000 	.word	0x52002000
 8007f40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d010      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	4b3f      	ldr	r3, [pc, #252]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d208      	bcs.n	8007f72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f60:	4b3c      	ldr	r3, [pc, #240]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	4939      	ldr	r1, [pc, #228]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695a      	ldr	r2, [r3, #20]
 8007f82:	4b34      	ldr	r3, [pc, #208]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d208      	bcs.n	8007fa0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	492e      	ldr	r1, [pc, #184]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d010      	beq.n	8007fce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	4b28      	ldr	r3, [pc, #160]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d208      	bcs.n	8007fce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fbc:	4b25      	ldr	r3, [pc, #148]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	4922      	ldr	r1, [pc, #136]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d010      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69da      	ldr	r2, [r3, #28]
 8007fde:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d208      	bcs.n	8007ffc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007fea:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	4917      	ldr	r1, [pc, #92]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ffc:	f000 f834 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 8008000:	4602      	mov	r2, r0
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	4912      	ldr	r1, [pc, #72]	; (8008058 <HAL_RCC_ClockConfig+0x35c>)
 800800e:	5ccb      	ldrb	r3, [r1, r3]
 8008010:	f003 031f 	and.w	r3, r3, #31
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <HAL_RCC_ClockConfig+0x358>)
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	4a0d      	ldr	r2, [pc, #52]	; (8008058 <HAL_RCC_ClockConfig+0x35c>)
 8008024:	5cd3      	ldrb	r3, [r2, r3]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <HAL_RCC_ClockConfig+0x360>)
 8008032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008034:	4a0a      	ldr	r2, [pc, #40]	; (8008060 <HAL_RCC_ClockConfig+0x364>)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <HAL_RCC_ClockConfig+0x368>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 fd94 	bl	8001b6c <HAL_InitTick>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	58024400 	.word	0x58024400
 8008058:	080123d0 	.word	0x080123d0
 800805c:	24000008 	.word	0x24000008
 8008060:	24000004 	.word	0x24000004
 8008064:	2400000c 	.word	0x2400000c

08008068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008068:	b480      	push	{r7}
 800806a:	b089      	sub	sp, #36	; 0x24
 800806c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800806e:	4bb3      	ldr	r3, [pc, #716]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008076:	2b18      	cmp	r3, #24
 8008078:	f200 8155 	bhi.w	8008326 <HAL_RCC_GetSysClockFreq+0x2be>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <HAL_RCC_GetSysClockFreq+0x1c>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080e9 	.word	0x080080e9
 8008088:	08008327 	.word	0x08008327
 800808c:	08008327 	.word	0x08008327
 8008090:	08008327 	.word	0x08008327
 8008094:	08008327 	.word	0x08008327
 8008098:	08008327 	.word	0x08008327
 800809c:	08008327 	.word	0x08008327
 80080a0:	08008327 	.word	0x08008327
 80080a4:	0800810f 	.word	0x0800810f
 80080a8:	08008327 	.word	0x08008327
 80080ac:	08008327 	.word	0x08008327
 80080b0:	08008327 	.word	0x08008327
 80080b4:	08008327 	.word	0x08008327
 80080b8:	08008327 	.word	0x08008327
 80080bc:	08008327 	.word	0x08008327
 80080c0:	08008327 	.word	0x08008327
 80080c4:	08008115 	.word	0x08008115
 80080c8:	08008327 	.word	0x08008327
 80080cc:	08008327 	.word	0x08008327
 80080d0:	08008327 	.word	0x08008327
 80080d4:	08008327 	.word	0x08008327
 80080d8:	08008327 	.word	0x08008327
 80080dc:	08008327 	.word	0x08008327
 80080e0:	08008327 	.word	0x08008327
 80080e4:	0800811b 	.word	0x0800811b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e8:	4b94      	ldr	r3, [pc, #592]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d009      	beq.n	8008108 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f4:	4b91      	ldr	r3, [pc, #580]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	4a90      	ldr	r2, [pc, #576]	; (8008340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
 8008104:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008106:	e111      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008108:	4b8d      	ldr	r3, [pc, #564]	; (8008340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800810a:	61bb      	str	r3, [r7, #24]
      break;
 800810c:	e10e      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800810e:	4b8d      	ldr	r3, [pc, #564]	; (8008344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008110:	61bb      	str	r3, [r7, #24]
      break;
 8008112:	e10b      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008114:	4b8c      	ldr	r3, [pc, #560]	; (8008348 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008116:	61bb      	str	r3, [r7, #24]
      break;
 8008118:	e108      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800811a:	4b88      	ldr	r3, [pc, #544]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008124:	4b85      	ldr	r3, [pc, #532]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	091b      	lsrs	r3, r3, #4
 800812a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008130:	4b82      	ldr	r3, [pc, #520]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800813a:	4b80      	ldr	r3, [pc, #512]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	08db      	lsrs	r3, r3, #3
 8008140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008152:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80e1 	beq.w	8008320 <HAL_RCC_GetSysClockFreq+0x2b8>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b02      	cmp	r3, #2
 8008162:	f000 8083 	beq.w	800826c <HAL_RCC_GetSysClockFreq+0x204>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b02      	cmp	r3, #2
 800816a:	f200 80a1 	bhi.w	80082b0 <HAL_RCC_GetSysClockFreq+0x248>
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0x114>
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d056      	beq.n	8008228 <HAL_RCC_GetSysClockFreq+0x1c0>
 800817a:	e099      	b.n	80082b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800817c:	4b6f      	ldr	r3, [pc, #444]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02d      	beq.n	80081e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008188:	4b6c      	ldr	r3, [pc, #432]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a6b      	ldr	r2, [pc, #428]	; (8008340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b62      	ldr	r3, [pc, #392]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800834c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80081e2:	e087      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008350 <HAL_RCC_GetSysClockFreq+0x2e8>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b51      	ldr	r3, [pc, #324]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a02 	vldr	s12, [r7, #8]
 800820a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800834c <HAL_RCC_GetSysClockFreq+0x2e4>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008226:	e065      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008354 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823a:	4b40      	ldr	r3, [pc, #256]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824a:	ed97 6a02 	vldr	s12, [r7, #8]
 800824e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800834c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800826a:	e043      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008358 <HAL_RCC_GetSysClockFreq+0x2f0>
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b2f      	ldr	r3, [pc, #188]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008292:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800834c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082ae:	e021      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008354 <HAL_RCC_GetSysClockFreq+0x2ec>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b1e      	ldr	r3, [pc, #120]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800834c <HAL_RCC_GetSysClockFreq+0x2e4>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80082f4:	4b11      	ldr	r3, [pc, #68]	; (800833c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	0a5b      	lsrs	r3, r3, #9
 80082fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fe:	3301      	adds	r3, #1
 8008300:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800830c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008318:	ee17 3a90 	vmov	r3, s15
 800831c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800831e:	e005      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	61bb      	str	r3, [r7, #24]
      break;
 8008324:	e002      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008326:	4b07      	ldr	r3, [pc, #28]	; (8008344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008328:	61bb      	str	r3, [r7, #24]
      break;
 800832a:	bf00      	nop
  }

  return sysclockfreq;
 800832c:	69bb      	ldr	r3, [r7, #24]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3724      	adds	r7, #36	; 0x24
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400
 8008340:	03d09000 	.word	0x03d09000
 8008344:	003d0900 	.word	0x003d0900
 8008348:	017d7840 	.word	0x017d7840
 800834c:	46000000 	.word	0x46000000
 8008350:	4c742400 	.word	0x4c742400
 8008354:	4a742400 	.word	0x4a742400
 8008358:	4bbebc20 	.word	0x4bbebc20

0800835c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008362:	f7ff fe81 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 8008366:	4602      	mov	r2, r0
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <HAL_RCC_GetHCLKFreq+0x50>)
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	490f      	ldr	r1, [pc, #60]	; (80083b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008374:	5ccb      	ldrb	r3, [r1, r3]
 8008376:	f003 031f 	and.w	r3, r3, #31
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_RCC_GetHCLKFreq+0x50>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800838a:	5cd3      	ldrb	r3, [r2, r3]
 800838c:	f003 031f 	and.w	r3, r3, #31
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	fa22 f303 	lsr.w	r3, r2, r3
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800839a:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	58024400 	.word	0x58024400
 80083b0:	080123d0 	.word	0x080123d0
 80083b4:	24000008 	.word	0x24000008
 80083b8:	24000004 	.word	0x24000004

080083bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80083c0:	f7ff ffcc 	bl	800835c <HAL_RCC_GetHCLKFreq>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	091b      	lsrs	r3, r3, #4
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	4904      	ldr	r1, [pc, #16]	; (80083e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80083d2:	5ccb      	ldrb	r3, [r1, r3]
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80083dc:	4618      	mov	r0, r3
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	58024400 	.word	0x58024400
 80083e4:	080123d0 	.word	0x080123d0

080083e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80083ec:	f7ff ffb6 	bl	800835c <HAL_RCC_GetHCLKFreq>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <HAL_RCC_GetPCLK2Freq+0x24>)
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4904      	ldr	r1, [pc, #16]	; (8008410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083fe:	5ccb      	ldrb	r3, [r1, r3]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008408:	4618      	mov	r0, r3
 800840a:	bd80      	pop	{r7, pc}
 800840c:	58024400 	.word	0x58024400
 8008410:	080123d0 	.word	0x080123d0

08008414 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	223f      	movs	r2, #63	; 0x3f
 8008422:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008424:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0207 	and.w	r2, r3, #7
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008430:	4b17      	ldr	r3, [pc, #92]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800846c:	4b08      	ldr	r3, [pc, #32]	; (8008490 <HAL_RCC_GetClockConfig+0x7c>)
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <HAL_RCC_GetClockConfig+0x80>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	58024400 	.word	0x58024400
 8008494:	52002000 	.word	0x52002000

08008498 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800849c:	b0ca      	sub	sp, #296	; 0x128
 800849e:	af00      	add	r7, sp, #0
 80084a0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80084bc:	2500      	movs	r5, #0
 80084be:	ea54 0305 	orrs.w	r3, r4, r5
 80084c2:	d049      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ce:	d02f      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80084d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084d4:	d828      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80084d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084da:	d01a      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80084dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084e0:	d822      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80084e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ea:	d007      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084ec:	e01c      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ee:	4bb8      	ldr	r3, [pc, #736]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	4ab7      	ldr	r2, [pc, #732]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084fa:	e01a      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008500:	3308      	adds	r3, #8
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f002 fb61 	bl	800abcc <RCCEx_PLL2_Config>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008510:	e00f      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008516:	3328      	adds	r3, #40	; 0x28
 8008518:	2102      	movs	r1, #2
 800851a:	4618      	mov	r0, r3
 800851c:	f002 fc08 	bl	800ad30 <RCCEx_PLL3_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008526:	e004      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800852e:	e000      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800853a:	4ba5      	ldr	r3, [pc, #660]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800853c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008548:	4aa1      	ldr	r2, [pc, #644]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800854a:	430b      	orrs	r3, r1
 800854c:	6513      	str	r3, [r2, #80]	; 0x50
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008564:	f04f 0900 	mov.w	r9, #0
 8008568:	ea58 0309 	orrs.w	r3, r8, r9
 800856c:	d047      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008574:	2b04      	cmp	r3, #4
 8008576:	d82a      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008595 	.word	0x08008595
 8008584:	080085a3 	.word	0x080085a3
 8008588:	080085b9 	.word	0x080085b9
 800858c:	080085d7 	.word	0x080085d7
 8008590:	080085d7 	.word	0x080085d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008594:	4b8e      	ldr	r3, [pc, #568]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	4a8d      	ldr	r2, [pc, #564]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800859a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085a0:	e01a      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a6:	3308      	adds	r3, #8
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fb0e 	bl	800abcc <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085b6:	e00f      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085bc:	3328      	adds	r3, #40	; 0x28
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f002 fbb5 	bl	800ad30 <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085cc:	e004      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085d4:	e000      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80085d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e0:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e4:	f023 0107 	bic.w	r1, r3, #7
 80085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	4a78      	ldr	r2, [pc, #480]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6513      	str	r3, [r2, #80]	; 0x50
 80085f4:	e003      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800860a:	f04f 0b00 	mov.w	fp, #0
 800860e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008612:	d04c      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861e:	d030      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008624:	d829      	bhi.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008626:	2bc0      	cmp	r3, #192	; 0xc0
 8008628:	d02d      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800862a:	2bc0      	cmp	r3, #192	; 0xc0
 800862c:	d825      	bhi.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d018      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	d821      	bhi.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d007      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800863e:	e01c      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008640:	4b63      	ldr	r3, [pc, #396]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	4a62      	ldr	r2, [pc, #392]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800864a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800864c:	e01c      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008652:	3308      	adds	r3, #8
 8008654:	2100      	movs	r1, #0
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fab8 	bl	800abcc <RCCEx_PLL2_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008662:	e011      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008668:	3328      	adds	r3, #40	; 0x28
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f002 fb5f 	bl	800ad30 <RCCEx_PLL3_Config>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008678:	e006      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008690:	4b4f      	ldr	r3, [pc, #316]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008694:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869e:	4a4c      	ldr	r2, [pc, #304]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6513      	str	r3, [r2, #80]	; 0x50
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80086ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80086c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d053      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086da:	d035      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80086dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086e0:	d82e      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80086e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086e6:	d031      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80086e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086ec:	d828      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80086ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f2:	d01a      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80086f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f8:	d822      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80086fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008702:	d007      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008704:	e01c      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008706:	4b32      	ldr	r3, [pc, #200]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4a31      	ldr	r2, [pc, #196]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800870c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008712:	e01c      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	3308      	adds	r3, #8
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f002 fa55 	bl	800abcc <RCCEx_PLL2_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008728:	e011      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	3328      	adds	r3, #40	; 0x28
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f002 fafc 	bl	800ad30 <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800873e:	e006      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008746:	e002      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800874c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008756:	4b1e      	ldr	r3, [pc, #120]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008766:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008768:	430b      	orrs	r3, r1
 800876a:	6593      	str	r3, [r2, #88]	; 0x58
 800876c:	e003      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800878c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008790:	460b      	mov	r3, r1
 8008792:	4313      	orrs	r3, r2
 8008794:	d056      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800879e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087a2:	d038      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80087a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087a8:	d831      	bhi.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087ae:	d034      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80087b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087b4:	d82b      	bhi.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ba:	d01d      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80087bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c0:	d825      	bhi.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80087c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087ca:	d00a      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80087cc:	e01f      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d4:	4ba2      	ldr	r3, [pc, #648]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	4aa1      	ldr	r2, [pc, #644]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087e0:	e01c      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e6:	3308      	adds	r3, #8
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f002 f9ee 	bl	800abcc <RCCEx_PLL2_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087f6:	e011      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	3328      	adds	r3, #40	; 0x28
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f002 fa95 	bl	800ad30 <RCCEx_PLL3_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800880c:	e006      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008814:	e002      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800881a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800881c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008824:	4b8e      	ldr	r3, [pc, #568]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008830:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008834:	4a8a      	ldr	r2, [pc, #552]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008836:	430b      	orrs	r3, r1
 8008838:	6593      	str	r3, [r2, #88]	; 0x58
 800883a:	e003      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008854:	2300      	movs	r3, #0
 8008856:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800885a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800885e:	460b      	mov	r3, r1
 8008860:	4313      	orrs	r3, r2
 8008862:	d03a      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886a:	2b30      	cmp	r3, #48	; 0x30
 800886c:	d01f      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800886e:	2b30      	cmp	r3, #48	; 0x30
 8008870:	d819      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008872:	2b20      	cmp	r3, #32
 8008874:	d00c      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008876:	2b20      	cmp	r3, #32
 8008878:	d815      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d019      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800887e:	2b10      	cmp	r3, #16
 8008880:	d111      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008882:	4b77      	ldr	r3, [pc, #476]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	4a76      	ldr	r2, [pc, #472]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800888e:	e011      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	3308      	adds	r3, #8
 8008896:	2102      	movs	r1, #2
 8008898:	4618      	mov	r0, r3
 800889a:	f002 f997 	bl	800abcc <RCCEx_PLL2_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80088a4:	e006      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80088b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10a      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088bc:	4b68      	ldr	r3, [pc, #416]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ca:	4a65      	ldr	r2, [pc, #404]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088cc:	430b      	orrs	r3, r1
 80088ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088d0:	e003      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80088e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088ea:	2300      	movs	r3, #0
 80088ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4313      	orrs	r3, r2
 80088f8:	d051      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008904:	d035      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800890a:	d82e      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800890c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008910:	d031      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008916:	d828      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891c:	d01a      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800891e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008922:	d822      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892c:	d007      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800892e:	e01c      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008930:	4b4b      	ldr	r3, [pc, #300]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a4a      	ldr	r2, [pc, #296]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800893a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800893c:	e01c      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	3308      	adds	r3, #8
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f002 f940 	bl	800abcc <RCCEx_PLL2_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008952:	e011      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008958:	3328      	adds	r3, #40	; 0x28
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f002 f9e7 	bl	800ad30 <RCCEx_PLL3_Config>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008968:	e006      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008970:	e002      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008980:	4b37      	ldr	r3, [pc, #220]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008984:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898e:	4a34      	ldr	r2, [pc, #208]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008990:	430b      	orrs	r3, r1
 8008992:	6513      	str	r3, [r2, #80]	; 0x50
 8008994:	e003      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80089aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089ae:	2300      	movs	r3, #0
 80089b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80089b8:	460b      	mov	r3, r1
 80089ba:	4313      	orrs	r3, r2
 80089bc:	d056      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089c8:	d033      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80089ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089ce:	d82c      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80089d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089d4:	d02f      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80089d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089da:	d826      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80089dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089e0:	d02b      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80089e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089e6:	d820      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80089e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ec:	d012      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80089ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089f2:	d81a      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d022      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80089f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fc:	d115      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3308      	adds	r3, #8
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 f8e0 	bl	800abcc <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a12:	e015      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a18:	3328      	adds	r3, #40	; 0x28
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f002 f987 	bl	800ad30 <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a28:	e00a      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a30:	e006      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a32:	bf00      	nop
 8008a34:	e004      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10d      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a56:	4a02      	ldr	r2, [pc, #8]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6513      	str	r3, [r2, #80]	; 0x50
 8008a5c:	e006      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008a5e:	bf00      	nop
 8008a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	d055      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a98:	d033      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a9e:	d82c      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d02f      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aaa:	d826      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ab0:	d02b      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008ab2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ab6:	d820      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abc:	d012      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac2:	d81a      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d022      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008acc:	d115      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 f878 	bl	800abcc <RCCEx_PLL2_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ae2:	e015      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae8:	3328      	adds	r3, #40	; 0x28
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f002 f91f 	bl	800ad30 <RCCEx_PLL3_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008af8:	e00a      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b00:	e006      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b02:	bf00      	nop
 8008b04:	e004      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b06:	bf00      	nop
 8008b08:	e002      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b18:	4ba3      	ldr	r3, [pc, #652]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b28:	4a9f      	ldr	r2, [pc, #636]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b2e:	e003      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d037      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b62:	d00e      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b68:	d816      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d018      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b72:	d111      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b74:	4b8c      	ldr	r3, [pc, #560]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	4a8b      	ldr	r2, [pc, #556]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008b80:	e00f      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b86:	3308      	adds	r3, #8
 8008b88:	2101      	movs	r1, #1
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 f81e 	bl	800abcc <RCCEx_PLL2_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008b96:	e004      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b9e:	e000      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008baa:	4b7f      	ldr	r3, [pc, #508]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb8:	4a7b      	ldr	r2, [pc, #492]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	6513      	str	r3, [r2, #80]	; 0x50
 8008bbe:	e003      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4313      	orrs	r3, r2
 8008be6:	d039      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d81c      	bhi.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c35 	.word	0x08008c35
 8008bfc:	08008c09 	.word	0x08008c09
 8008c00:	08008c17 	.word	0x08008c17
 8008c04:	08008c35 	.word	0x08008c35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4b67      	ldr	r3, [pc, #412]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	4a66      	ldr	r2, [pc, #408]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c14:	e00f      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	2102      	movs	r1, #2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 ffd4 	bl	800abcc <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c2a:	e004      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c3e:	4b5a      	ldr	r3, [pc, #360]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c42:	f023 0103 	bic.w	r1, r3, #3
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4c:	4a56      	ldr	r2, [pc, #344]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008c76:	460b      	mov	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f000 809f 	beq.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c7e:	4b4b      	ldr	r3, [pc, #300]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a4a      	ldr	r2, [pc, #296]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c8a:	f7f9 fe31 	bl	80028f0 <HAL_GetTick>
 8008c8e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c92:	e00b      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c94:	f7f9 fe2c 	bl	80028f0 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b64      	cmp	r3, #100	; 0x64
 8008ca2:	d903      	bls.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008caa:	e005      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cac:	4b3f      	ldr	r3, [pc, #252]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ed      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d179      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008cc0:	4b39      	ldr	r3, [pc, #228]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ccc:	4053      	eors	r3, r2
 8008cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d015      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cd6:	4b34      	ldr	r3, [pc, #208]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ce2:	4b31      	ldr	r3, [pc, #196]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	4a30      	ldr	r2, [pc, #192]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008cee:	4b2e      	ldr	r3, [pc, #184]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	4a2d      	ldr	r2, [pc, #180]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008cfa:	4a2b      	ldr	r2, [pc, #172]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0e:	d118      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d10:	f7f9 fdee 	bl	80028f0 <HAL_GetTick>
 8008d14:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d18:	e00d      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7f9 fde9 	bl	80028f0 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d24:	1ad2      	subs	r2, r2, r3
 8008d26:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d903      	bls.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008d34:	e005      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d36:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0eb      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d129      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d5a:	d10e      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d6c:	091a      	lsrs	r2, r3, #4
 8008d6e:	4b10      	ldr	r3, [pc, #64]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	4a0d      	ldr	r2, [pc, #52]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6113      	str	r3, [r2, #16]
 8008d78:	e005      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d84:	6113      	str	r3, [r2, #16]
 8008d86:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d96:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9c:	e00e      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008da6:	e009      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008da8:	58024400 	.word	0x58024400
 8008dac:	58024800 	.word	0x58024800
 8008db0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 0301 	and.w	r3, r2, #1
 8008dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f000 8089 	beq.w	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de4:	2b28      	cmp	r3, #40	; 0x28
 8008de6:	d86b      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008ec9 	.word	0x08008ec9
 8008df4:	08008ec1 	.word	0x08008ec1
 8008df8:	08008ec1 	.word	0x08008ec1
 8008dfc:	08008ec1 	.word	0x08008ec1
 8008e00:	08008ec1 	.word	0x08008ec1
 8008e04:	08008ec1 	.word	0x08008ec1
 8008e08:	08008ec1 	.word	0x08008ec1
 8008e0c:	08008ec1 	.word	0x08008ec1
 8008e10:	08008e95 	.word	0x08008e95
 8008e14:	08008ec1 	.word	0x08008ec1
 8008e18:	08008ec1 	.word	0x08008ec1
 8008e1c:	08008ec1 	.word	0x08008ec1
 8008e20:	08008ec1 	.word	0x08008ec1
 8008e24:	08008ec1 	.word	0x08008ec1
 8008e28:	08008ec1 	.word	0x08008ec1
 8008e2c:	08008ec1 	.word	0x08008ec1
 8008e30:	08008eab 	.word	0x08008eab
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008ec1 	.word	0x08008ec1
 8008e3c:	08008ec1 	.word	0x08008ec1
 8008e40:	08008ec1 	.word	0x08008ec1
 8008e44:	08008ec1 	.word	0x08008ec1
 8008e48:	08008ec1 	.word	0x08008ec1
 8008e4c:	08008ec1 	.word	0x08008ec1
 8008e50:	08008ec9 	.word	0x08008ec9
 8008e54:	08008ec1 	.word	0x08008ec1
 8008e58:	08008ec1 	.word	0x08008ec1
 8008e5c:	08008ec1 	.word	0x08008ec1
 8008e60:	08008ec1 	.word	0x08008ec1
 8008e64:	08008ec1 	.word	0x08008ec1
 8008e68:	08008ec1 	.word	0x08008ec1
 8008e6c:	08008ec1 	.word	0x08008ec1
 8008e70:	08008ec9 	.word	0x08008ec9
 8008e74:	08008ec1 	.word	0x08008ec1
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008ec1 	.word	0x08008ec1
 8008e80:	08008ec1 	.word	0x08008ec1
 8008e84:	08008ec1 	.word	0x08008ec1
 8008e88:	08008ec1 	.word	0x08008ec1
 8008e8c:	08008ec1 	.word	0x08008ec1
 8008e90:	08008ec9 	.word	0x08008ec9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e98:	3308      	adds	r3, #8
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fe95 	bl	800abcc <RCCEx_PLL2_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e00f      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eae:	3328      	adds	r3, #40	; 0x28
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 ff3c 	bl	800ad30 <RCCEx_PLL3_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ebe:	e004      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ec6:	e000      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ed2:	4bbf      	ldr	r3, [pc, #764]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee0:	4abb      	ldr	r2, [pc, #748]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	6553      	str	r3, [r2, #84]	; 0x54
 8008ee6:	e003      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f002 0302 	and.w	r3, r2, #2
 8008efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	d041      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d824      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f4f 	.word	0x08008f4f
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f6d 	.word	0x08008f6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 fe43 	bl	800abcc <RCCEx_PLL2_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008f4c:	e00f      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f52:	3328      	adds	r3, #40	; 0x28
 8008f54:	2101      	movs	r1, #1
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 feea 	bl	800ad30 <RCCEx_PLL3_Config>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008f62:	e004      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f6a:	e000      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f76:	4b96      	ldr	r3, [pc, #600]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f023 0107 	bic.w	r1, r3, #7
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f84:	4a92      	ldr	r2, [pc, #584]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	6553      	str	r3, [r2, #84]	; 0x54
 8008f8a:	e003      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 0304 	and.w	r3, r2, #4
 8008fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008faa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d044      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fbc:	2b05      	cmp	r3, #5
 8008fbe:	d825      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08009015 	.word	0x08009015
 8008fcc:	08008fe1 	.word	0x08008fe1
 8008fd0:	08008ff7 	.word	0x08008ff7
 8008fd4:	08009015 	.word	0x08009015
 8008fd8:	08009015 	.word	0x08009015
 8008fdc:	08009015 	.word	0x08009015
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 fdef 	bl	800abcc <RCCEx_PLL2_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ff4:	e00f      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	3328      	adds	r3, #40	; 0x28
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 fe96 	bl	800ad30 <RCCEx_PLL3_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800900a:	e004      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009012:	e000      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10b      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800901e:	4b6c      	ldr	r3, [pc, #432]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009022:	f023 0107 	bic.w	r1, r3, #7
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800902e:	4a68      	ldr	r2, [pc, #416]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009030:	430b      	orrs	r3, r1
 8009032:	6593      	str	r3, [r2, #88]	; 0x58
 8009034:	e003      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f002 0320 	and.w	r3, r2, #32
 800904a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800904e:	2300      	movs	r3, #0
 8009050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009058:	460b      	mov	r3, r1
 800905a:	4313      	orrs	r3, r2
 800905c:	d055      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800906a:	d033      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800906c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009070:	d82c      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009076:	d02f      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907c:	d826      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800907e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009082:	d02b      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009088:	d820      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800908a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908e:	d012      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009094:	d81a      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d022      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800909a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909e:	d115      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a4:	3308      	adds	r3, #8
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 fd8f 	bl	800abcc <RCCEx_PLL2_Config>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80090b4:	e015      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ba:	3328      	adds	r3, #40	; 0x28
 80090bc:	2102      	movs	r1, #2
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fe36 	bl	800ad30 <RCCEx_PLL3_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80090ca:	e00a      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090d2:	e006      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80090d4:	bf00      	nop
 80090d6:	e004      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80090d8:	bf00      	nop
 80090da:	e002      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80090e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090ea:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fa:	4a35      	ldr	r2, [pc, #212]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	6553      	str	r3, [r2, #84]	; 0x54
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800911a:	2300      	movs	r3, #0
 800911c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009120:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009124:	460b      	mov	r3, r1
 8009126:	4313      	orrs	r3, r2
 8009128:	d058      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009132:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009136:	d033      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009138:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800913c:	d82c      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d02f      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009148:	d826      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800914a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800914e:	d02b      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009154:	d820      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800915a:	d012      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d81a      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d022      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916a:	d115      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009170:	3308      	adds	r3, #8
 8009172:	2100      	movs	r1, #0
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fd29 	bl	800abcc <RCCEx_PLL2_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009180:	e015      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009186:	3328      	adds	r3, #40	; 0x28
 8009188:	2102      	movs	r1, #2
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fdd0 	bl	800ad30 <RCCEx_PLL3_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009196:	e00a      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800919e:	e006      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091a0:	bf00      	nop
 80091a2:	e004      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10e      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091b6:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091c6:	4a02      	ldr	r2, [pc, #8]	; (80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6593      	str	r3, [r2, #88]	; 0x58
 80091cc:	e006      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80091ce:	bf00      	nop
 80091d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80091e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d055      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009208:	d033      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800920a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800920e:	d82c      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009214:	d02f      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800921a:	d826      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800921c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009220:	d02b      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009222:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009226:	d820      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800922c:	d012      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800922e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009232:	d81a      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d022      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800923c:	d115      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009242:	3308      	adds	r3, #8
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fcc0 	bl	800abcc <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009252:	e015      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009258:	3328      	adds	r3, #40	; 0x28
 800925a:	2102      	movs	r1, #2
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fd67 	bl	800ad30 <RCCEx_PLL3_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009268:	e00a      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009270:	e006      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009272:	bf00      	nop
 8009274:	e004      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009276:	bf00      	nop
 8009278:	e002      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800927a:	bf00      	nop
 800927c:	e000      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800927e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009288:	4ba1      	ldr	r3, [pc, #644]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800928a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009298:	4a9d      	ldr	r2, [pc, #628]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800929a:	430b      	orrs	r3, r1
 800929c:	6593      	str	r3, [r2, #88]	; 0x58
 800929e:	e003      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f002 0308 	and.w	r3, r2, #8
 80092b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092b8:	2300      	movs	r3, #0
 80092ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d01e      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d4:	d10c      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092da:	3328      	adds	r3, #40	; 0x28
 80092dc:	2102      	movs	r1, #2
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fd26 	bl	800ad30 <RCCEx_PLL3_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80092f0:	4b87      	ldr	r3, [pc, #540]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009300:	4a83      	ldr	r2, [pc, #524]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009302:	430b      	orrs	r3, r1
 8009304:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f002 0310 	and.w	r3, r2, #16
 8009312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800931c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009320:	460b      	mov	r3, r1
 8009322:	4313      	orrs	r3, r2
 8009324:	d01e      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d10c      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009338:	3328      	adds	r3, #40	; 0x28
 800933a:	2102      	movs	r1, #2
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fcf7 	bl	800ad30 <RCCEx_PLL3_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800934e:	4b70      	ldr	r3, [pc, #448]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800935e:	4a6c      	ldr	r2, [pc, #432]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009360:	430b      	orrs	r3, r1
 8009362:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009374:	2300      	movs	r3, #0
 8009376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800937a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800937e:	460b      	mov	r3, r1
 8009380:	4313      	orrs	r3, r2
 8009382:	d03e      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800938c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009390:	d022      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009396:	d81b      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800939c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a0:	d00b      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80093a2:	e015      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a8:	3308      	adds	r3, #8
 80093aa:	2100      	movs	r1, #0
 80093ac:	4618      	mov	r0, r3
 80093ae:	f001 fc0d 	bl	800abcc <RCCEx_PLL2_Config>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80093b8:	e00f      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093be:	3328      	adds	r3, #40	; 0x28
 80093c0:	2102      	movs	r1, #2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fcb4 	bl	800ad30 <RCCEx_PLL3_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80093ce:	e004      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093d6:	e000      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80093d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10b      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093e2:	4b4b      	ldr	r3, [pc, #300]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80093ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093f2:	4a47      	ldr	r2, [pc, #284]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6593      	str	r3, [r2, #88]	; 0x58
 80093f8:	e003      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800940e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009410:	2300      	movs	r3, #0
 8009412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009414:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009418:	460b      	mov	r3, r1
 800941a:	4313      	orrs	r3, r2
 800941c:	d03b      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800941e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800942a:	d01f      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800942c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009430:	d818      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009436:	d003      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800943c:	d007      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800943e:	e011      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009440:	4b33      	ldr	r3, [pc, #204]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	4a32      	ldr	r2, [pc, #200]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800944a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800944c:	e00f      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009452:	3328      	adds	r3, #40	; 0x28
 8009454:	2101      	movs	r1, #1
 8009456:	4618      	mov	r0, r3
 8009458:	f001 fc6a 	bl	800ad30 <RCCEx_PLL3_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009462:	e004      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800946a:	e000      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800946c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009476:	4b26      	ldr	r3, [pc, #152]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009486:	4a22      	ldr	r2, [pc, #136]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009488:	430b      	orrs	r3, r1
 800948a:	6553      	str	r3, [r2, #84]	; 0x54
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80094a2:	673b      	str	r3, [r7, #112]	; 0x70
 80094a4:	2300      	movs	r3, #0
 80094a6:	677b      	str	r3, [r7, #116]	; 0x74
 80094a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d034      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c0:	d007      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80094c2:	e011      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c4:	4b12      	ldr	r3, [pc, #72]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	4a11      	ldr	r2, [pc, #68]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80094d0:	e00e      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d6:	3308      	adds	r3, #8
 80094d8:	2102      	movs	r1, #2
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 fb76 	bl	800abcc <RCCEx_PLL2_Config>
 80094e0:	4603      	mov	r3, r0
 80094e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80094e6:	e003      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10d      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009506:	4a02      	ldr	r2, [pc, #8]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009508:	430b      	orrs	r3, r1
 800950a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800950c:	e006      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009528:	66bb      	str	r3, [r7, #104]	; 0x68
 800952a:	2300      	movs	r3, #0
 800952c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800952e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	d00c      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953c:	3328      	adds	r3, #40	; 0x28
 800953e:	2102      	movs	r1, #2
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fbf5 	bl	800ad30 <RCCEx_PLL3_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800955e:	663b      	str	r3, [r7, #96]	; 0x60
 8009560:	2300      	movs	r3, #0
 8009562:	667b      	str	r3, [r7, #100]	; 0x64
 8009564:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009568:	460b      	mov	r3, r1
 800956a:	4313      	orrs	r3, r2
 800956c:	d038      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800957a:	d018      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800957c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009580:	d811      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009586:	d014      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800958c:	d80b      	bhi.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009596:	d106      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009598:	4bc3      	ldr	r3, [pc, #780]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	4ac2      	ldr	r2, [pc, #776]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800959e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80095a4:	e008      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ac:	e004      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095ae:	bf00      	nop
 80095b0:	e002      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095b2:	bf00      	nop
 80095b4:	e000      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10b      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095c0:	4bb9      	ldr	r3, [pc, #740]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d0:	4ab5      	ldr	r2, [pc, #724]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095d2:	430b      	orrs	r3, r1
 80095d4:	6553      	str	r3, [r2, #84]	; 0x54
 80095d6:	e003      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80095e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80095ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80095ee:	2300      	movs	r3, #0
 80095f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80095f6:	460b      	mov	r3, r1
 80095f8:	4313      	orrs	r3, r2
 80095fa:	d009      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80095fc:	4baa      	ldr	r3, [pc, #680]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009600:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800960a:	4aa7      	ldr	r2, [pc, #668]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800960c:	430b      	orrs	r3, r1
 800960e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800961c:	653b      	str	r3, [r7, #80]	; 0x50
 800961e:	2300      	movs	r3, #0
 8009620:	657b      	str	r3, [r7, #84]	; 0x54
 8009622:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	d00a      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800962c:	4b9e      	ldr	r3, [pc, #632]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009638:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800963c:	4a9a      	ldr	r2, [pc, #616]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800963e:	430b      	orrs	r3, r1
 8009640:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800964e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009650:	2300      	movs	r3, #0
 8009652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009654:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009658:	460b      	mov	r3, r1
 800965a:	4313      	orrs	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800965e:	4b92      	ldr	r3, [pc, #584]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009662:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	4a8e      	ldr	r2, [pc, #568]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800966e:	430b      	orrs	r3, r1
 8009670:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800967e:	643b      	str	r3, [r7, #64]	; 0x40
 8009680:	2300      	movs	r3, #0
 8009682:	647b      	str	r3, [r7, #68]	; 0x44
 8009684:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009688:	460b      	mov	r3, r1
 800968a:	4313      	orrs	r3, r2
 800968c:	d00e      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800968e:	4b86      	ldr	r3, [pc, #536]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	4a85      	ldr	r2, [pc, #532]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009694:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009698:	6113      	str	r3, [r2, #16]
 800969a:	4b83      	ldr	r3, [pc, #524]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800969c:	6919      	ldr	r1, [r3, #16]
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80096a6:	4a80      	ldr	r2, [pc, #512]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80096b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80096ba:	2300      	movs	r3, #0
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80096c2:	460b      	mov	r3, r1
 80096c4:	4313      	orrs	r3, r2
 80096c6:	d009      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80096c8:	4b77      	ldr	r3, [pc, #476]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d6:	4a74      	ldr	r2, [pc, #464]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096d8:	430b      	orrs	r3, r1
 80096da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80096e8:	633b      	str	r3, [r7, #48]	; 0x30
 80096ea:	2300      	movs	r3, #0
 80096ec:	637b      	str	r3, [r7, #52]	; 0x34
 80096ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80096f2:	460b      	mov	r3, r1
 80096f4:	4313      	orrs	r3, r2
 80096f6:	d00a      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096f8:	4b6b      	ldr	r3, [pc, #428]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009708:	4a67      	ldr	r2, [pc, #412]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800970a:	430b      	orrs	r3, r1
 800970c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	2100      	movs	r1, #0
 8009718:	62b9      	str	r1, [r7, #40]	; 0x28
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009720:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009724:	460b      	mov	r3, r1
 8009726:	4313      	orrs	r3, r2
 8009728:	d011      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	3308      	adds	r3, #8
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fa4a 	bl	800abcc <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	2100      	movs	r1, #0
 8009758:	6239      	str	r1, [r7, #32]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
 8009760:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009764:	460b      	mov	r3, r1
 8009766:	4313      	orrs	r3, r2
 8009768:	d011      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	3308      	adds	r3, #8
 8009770:	2101      	movs	r1, #1
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fa2a 	bl	800abcc <RCCEx_PLL2_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800977e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	2100      	movs	r1, #0
 8009798:	61b9      	str	r1, [r7, #24]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80097a4:	460b      	mov	r3, r1
 80097a6:	4313      	orrs	r3, r2
 80097a8:	d011      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ae:	3308      	adds	r3, #8
 80097b0:	2102      	movs	r1, #2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fa0a 	bl	800abcc <RCCEx_PLL2_Config>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80097be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	2100      	movs	r1, #0
 80097d8:	6139      	str	r1, [r7, #16]
 80097da:	f003 0308 	and.w	r3, r3, #8
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80097e4:	460b      	mov	r3, r1
 80097e6:	4313      	orrs	r3, r2
 80097e8:	d011      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ee:	3328      	adds	r3, #40	; 0x28
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 fa9c 	bl	800ad30 <RCCEx_PLL3_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80097fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800980a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	2100      	movs	r1, #0
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009824:	460b      	mov	r3, r1
 8009826:	4313      	orrs	r3, r2
 8009828:	d011      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982e:	3328      	adds	r3, #40	; 0x28
 8009830:	2101      	movs	r1, #1
 8009832:	4618      	mov	r0, r3
 8009834:	f001 fa7c 	bl	800ad30 <RCCEx_PLL3_Config>
 8009838:	4603      	mov	r3, r0
 800983a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800983e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800984a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800984e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	2100      	movs	r1, #0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	f003 0320 	and.w	r3, r3, #32
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009864:	460b      	mov	r3, r1
 8009866:	4313      	orrs	r3, r2
 8009868:	d011      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986e:	3328      	adds	r3, #40	; 0x28
 8009870:	2102      	movs	r1, #2
 8009872:	4618      	mov	r0, r3
 8009874:	f001 fa5c 	bl	800ad30 <RCCEx_PLL3_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800987e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800988a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800988e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e000      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
}
 800989c:	4618      	mov	r0, r3
 800989e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80098a2:	46bd      	mov	sp, r7
 80098a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098a8:	58024400 	.word	0x58024400

080098ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b090      	sub	sp, #64	; 0x40
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80098be:	430b      	orrs	r3, r1
 80098c0:	f040 8094 	bne.w	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80098c4:	4b9e      	ldr	r3, [pc, #632]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	f200 8087 	bhi.w	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	08009919 	.word	0x08009919
 80098e4:	08009941 	.word	0x08009941
 80098e8:	080099dd 	.word	0x080099dd
 80098ec:	08009969 	.word	0x08009969
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098f0:	4b93      	ldr	r3, [pc, #588]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098fc:	d108      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009902:	4618      	mov	r0, r3
 8009904:	f001 f810 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800990c:	f000 bd45 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009914:	f000 bd41 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009918:	4b89      	ldr	r3, [pc, #548]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009924:	d108      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009926:	f107 0318 	add.w	r3, r7, #24
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fd54 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009934:	f000 bd31 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993c:	f000 bd2d 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009940:	4b7f      	ldr	r3, [pc, #508]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800994c:	d108      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800994e:	f107 030c 	add.w	r3, r7, #12
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fe94 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995c:	f000 bd1d 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009964:	f000 bd19 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009968:	4b75      	ldr	r3, [pc, #468]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800996a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009970:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009972:	4b73      	ldr	r3, [pc, #460]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b04      	cmp	r3, #4
 800997c:	d10c      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009984:	4b6e      	ldr	r3, [pc, #440]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	08db      	lsrs	r3, r3, #3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	4a6d      	ldr	r2, [pc, #436]	; (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
 8009994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009996:	e01f      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009998:	4b69      	ldr	r3, [pc, #420]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a4:	d106      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099ac:	d102      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099ae:	4b66      	ldr	r3, [pc, #408]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	e011      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099b4:	4b62      	ldr	r3, [pc, #392]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c0:	d106      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c8:	d102      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099ca:	4b60      	ldr	r3, [pc, #384]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ce:	e003      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80099d4:	f000 bce1 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099d8:	f000 bcdf 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099dc:	4b5c      	ldr	r3, [pc, #368]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e0:	f000 bcdb 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e8:	f000 bcd7 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80099ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80099f4:	430b      	orrs	r3, r1
 80099f6:	f040 80ad 	bne.w	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80099fa:	4b51      	ldr	r3, [pc, #324]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a0a:	d056      	beq.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	f200 8090 	bhi.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	2bc0      	cmp	r3, #192	; 0xc0
 8009a1a:	f000 8088 	beq.w	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	2bc0      	cmp	r3, #192	; 0xc0
 8009a22:	f200 8088 	bhi.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	2b80      	cmp	r3, #128	; 0x80
 8009a2a:	d032      	beq.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	2b80      	cmp	r3, #128	; 0x80
 8009a30:	f200 8081 	bhi.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	2b40      	cmp	r3, #64	; 0x40
 8009a3e:	d014      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009a40:	e079      	b.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a42:	4b3f      	ldr	r3, [pc, #252]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a4e:	d108      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 ff67 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a5e:	f000 bc9c 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a66:	f000 bc98 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a6a:	4b35      	ldr	r3, [pc, #212]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a76:	d108      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a78:	f107 0318 	add.w	r3, r7, #24
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fcab 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a86:	f000 bc88 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a8e:	f000 bc84 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a92:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a9e:	d108      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fdeb 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aae:	f000 bc74 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab6:	f000 bc70 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ac2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ac4:	4b1e      	ldr	r3, [pc, #120]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d10c      	bne.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ad6:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	4a18      	ldr	r2, [pc, #96]	; (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae8:	e01f      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009af6:	d106      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009afe:	d102      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b00:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b04:	e011      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b12:	d106      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b1a:	d102      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b20:	e003      	b.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009b26:	f000 bc38 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b2a:	f000 bc36 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b2e:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b32:	f000 bc32 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b3a:	f000 bc2e 	b.w	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b3e:	bf00      	nop
 8009b40:	58024400 	.word	0x58024400
 8009b44:	03d09000 	.word	0x03d09000
 8009b48:	003d0900 	.word	0x003d0900
 8009b4c:	017d7840 	.word	0x017d7840
 8009b50:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b58:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	f040 809c 	bne.w	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009b62:	4b9e      	ldr	r3, [pc, #632]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b66:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009b6a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b72:	d054      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b7a:	f200 808b 	bhi.w	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b84:	f000 8083 	beq.w	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b8e:	f200 8081 	bhi.w	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b98:	d02f      	beq.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ba0:	d878      	bhi.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bae:	d012      	beq.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009bb0:	e070      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bb2:	4b8a      	ldr	r3, [pc, #552]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bbe:	d107      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 feaf 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bce:	e3e4      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bd4:	e3e1      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bd6:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009be2:	d107      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be4:	f107 0318 	add.w	r3, r7, #24
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fbf5 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf2:	e3d2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf8:	e3cf      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bfa:	4b78      	ldr	r3, [pc, #480]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c06:	d107      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c08:	f107 030c 	add.w	r3, r7, #12
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fd37 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c16:	e3c0      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c1c:	e3bd      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c1e:	4b6f      	ldr	r3, [pc, #444]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c28:	4b6c      	ldr	r3, [pc, #432]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d10c      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c3a:	4b68      	ldr	r3, [pc, #416]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	08db      	lsrs	r3, r3, #3
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	4a66      	ldr	r2, [pc, #408]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c46:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4c:	e01e      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4e:	4b63      	ldr	r3, [pc, #396]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c62:	d102      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c64:	4b5f      	ldr	r3, [pc, #380]	; (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c68:	e010      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c6a:	4b5c      	ldr	r3, [pc, #368]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c76:	d106      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d102      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c80:	4b59      	ldr	r3, [pc, #356]	; (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c84:	e002      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c8a:	e386      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c8c:	e385      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c8e:	4b57      	ldr	r3, [pc, #348]	; (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c92:	e382      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c98:	e37f      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c9e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009ca2:	430b      	orrs	r3, r1
 8009ca4:	f040 80a7 	bne.w	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009ca8:	4b4c      	ldr	r3, [pc, #304]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cac:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009cb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cb8:	d055      	beq.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cc0:	f200 8096 	bhi.w	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cca:	f000 8084 	beq.w	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cd4:	f200 808c 	bhi.w	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cde:	d030      	beq.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ce6:	f200 8083 	bhi.w	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cf6:	d012      	beq.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009cf8:	e07a      	b.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cfa:	4b38      	ldr	r3, [pc, #224]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d06:	d107      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fe0b 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d16:	e340      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d1c:	e33d      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d1e:	4b2f      	ldr	r3, [pc, #188]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d2a:	d107      	bne.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d2c:	f107 0318 	add.w	r3, r7, #24
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fb51 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d3a:	e32e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d40:	e32b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d42:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d4e:	d107      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d50:	f107 030c 	add.w	r3, r7, #12
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 fc93 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d5e:	e31c      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d64:	e319      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d66:	4b1d      	ldr	r3, [pc, #116]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d70:	4b1a      	ldr	r3, [pc, #104]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d10c      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d82:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	08db      	lsrs	r3, r3, #3
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	4a14      	ldr	r2, [pc, #80]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d94:	e01e      	b.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d96:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d106      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009daa:	d102      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009db0:	e010      	b.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dbe:	d106      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc6:	d102      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dcc:	e002      	b.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009dd2:	e2e2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dd4:	e2e1      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dda:	e2de      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ddc:	58024400 	.word	0x58024400
 8009de0:	03d09000 	.word	0x03d09000
 8009de4:	003d0900 	.word	0x003d0900
 8009de8:	017d7840 	.word	0x017d7840
 8009dec:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df4:	e2d1      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	f040 809c 	bne.w	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009e04:	4b93      	ldr	r3, [pc, #588]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009e0c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e14:	d054      	beq.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e1c:	f200 808b 	bhi.w	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e26:	f000 8083 	beq.w	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e30:	f200 8081 	bhi.w	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e3a:	d02f      	beq.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e42:	d878      	bhi.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e50:	d012      	beq.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009e52:	e070      	b.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e54:	4b7f      	ldr	r3, [pc, #508]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e60:	d107      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 fd5e 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e70:	e293      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e76:	e290      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e78:	4b76      	ldr	r3, [pc, #472]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e84:	d107      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e86:	f107 0318 	add.w	r3, r7, #24
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 faa4 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e94:	e281      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e9a:	e27e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e9c:	4b6d      	ldr	r3, [pc, #436]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea8:	d107      	bne.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eaa:	f107 030c 	add.w	r3, r7, #12
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fbe6 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eb8:	e26f      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ebe:	e26c      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ec0:	4b64      	ldr	r3, [pc, #400]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009eca:	4b62      	ldr	r3, [pc, #392]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0304 	and.w	r3, r3, #4
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d10c      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d109      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009edc:	4b5d      	ldr	r3, [pc, #372]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	4a5c      	ldr	r2, [pc, #368]	; (800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eee:	e01e      	b.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ef0:	4b58      	ldr	r3, [pc, #352]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009efc:	d106      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f04:	d102      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f06:	4b55      	ldr	r3, [pc, #340]	; (800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f0a:	e010      	b.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f0c:	4b51      	ldr	r3, [pc, #324]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f18:	d106      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f20:	d102      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f22:	4b4f      	ldr	r3, [pc, #316]	; (800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f26:	e002      	b.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009f2c:	e235      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f2e:	e234      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f30:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f34:	e231      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f3a:	e22e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f40:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009f44:	430b      	orrs	r3, r1
 8009f46:	f040 808f 	bne.w	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009f4a:	4b42      	ldr	r3, [pc, #264]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009f52:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f5a:	d06b      	beq.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f62:	d874      	bhi.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f6a:	d056      	beq.n	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f72:	d86c      	bhi.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f7a:	d03b      	beq.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f82:	d864      	bhi.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f8a:	d021      	beq.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f92:	d85c      	bhi.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa0:	d004      	beq.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009fa2:	e054      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009fa4:	f7fe fa0a 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 8009fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009faa:	e1f6      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fac:	4b29      	ldr	r3, [pc, #164]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fb8:	d107      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fba:	f107 0318 	add.w	r3, r7, #24
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa0a 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc8:	e1e7      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fce:	e1e4      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fd0:	4b20      	ldr	r3, [pc, #128]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fdc:	d107      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fde:	f107 030c 	add.w	r3, r7, #12
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 fb4c 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fec:	e1d5      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff2:	e1d2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ff4:	4b17      	ldr	r3, [pc, #92]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d109      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a000:	4b14      	ldr	r3, [pc, #80]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	08db      	lsrs	r3, r3, #3
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	4a13      	ldr	r2, [pc, #76]	; (800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a00c:	fa22 f303 	lsr.w	r3, r2, r3
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a012:	e1c2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a018:	e1bf      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a01a:	4b0e      	ldr	r3, [pc, #56]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a026:	d102      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a02c:	e1b5      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a032:	e1b2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a034:	4b07      	ldr	r3, [pc, #28]	; (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a03c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a040:	d102      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a042:	4b07      	ldr	r3, [pc, #28]	; (800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a046:	e1a8      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04c:	e1a5      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a052:	e1a2      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a054:	58024400 	.word	0x58024400
 800a058:	03d09000 	.word	0x03d09000
 800a05c:	003d0900 	.word	0x003d0900
 800a060:	017d7840 	.word	0x017d7840
 800a064:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a070:	430b      	orrs	r3, r1
 800a072:	d173      	bne.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a074:	4b9c      	ldr	r3, [pc, #624]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a07c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a084:	d02f      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a08c:	d863      	bhi.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a09a:	d012      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a09c:	e05b      	b.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a09e:	4b92      	ldr	r3, [pc, #584]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ac:	f107 0318 	add.w	r3, r7, #24
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f991 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e16e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c0:	e16b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0c2:	4b89      	ldr	r3, [pc, #548]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d0:	f107 030c 	add.w	r3, r7, #12
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fad3 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0de:	e15c      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e4:	e159      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e6:	4b80      	ldr	r3, [pc, #512]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f0:	4b7d      	ldr	r3, [pc, #500]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d10c      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a102:	4b79      	ldr	r3, [pc, #484]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	08db      	lsrs	r3, r3, #3
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	4a77      	ldr	r2, [pc, #476]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a10e:	fa22 f303 	lsr.w	r3, r2, r3
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a114:	e01e      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a116:	4b74      	ldr	r3, [pc, #464]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a122:	d106      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a12a:	d102      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a12c:	4b70      	ldr	r3, [pc, #448]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a130:	e010      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a132:	4b6d      	ldr	r3, [pc, #436]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a13e:	d106      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a146:	d102      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a148:	4b6a      	ldr	r3, [pc, #424]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a14c:	e002      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a152:	e122      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a154:	e121      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a15a:	e11e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a15c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a160:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a164:	430b      	orrs	r3, r1
 800a166:	d133      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a168:	4b5f      	ldr	r3, [pc, #380]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a170:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17e:	d012      	beq.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a180:	e023      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a182:	4b59      	ldr	r3, [pc, #356]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a18e:	d107      	bne.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a194:	4618      	mov	r0, r3
 800a196:	f000 fbc7 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a19e:	e0fc      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1a4:	e0f9      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1a6:	4b50      	ldr	r3, [pc, #320]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1b2:	d107      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b4:	f107 0318 	add.w	r3, r7, #24
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f90d 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c2:	e0ea      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1c8:	e0e7      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ce:	e0e4      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	f040 808d 	bne.w	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a1de:	4b42      	ldr	r3, [pc, #264]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a1e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1ee:	d06b      	beq.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1f6:	d874      	bhi.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1fe:	d056      	beq.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d86c      	bhi.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a20e:	d03b      	beq.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a216:	d864      	bhi.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a21e:	d021      	beq.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a226:	d85c      	bhi.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a234:	d004      	beq.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a236:	e054      	b.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a238:	f000 f8b8 	bl	800a3ac <HAL_RCCEx_GetD3PCLK1Freq>
 800a23c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a23e:	e0ac      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a240:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a24c:	d107      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a24e:	f107 0318 	add.w	r3, r7, #24
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f8c0 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a25c:	e09d      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a262:	e09a      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a264:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a270:	d107      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fa02 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a280:	e08b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a286:	e088      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a288:	4b17      	ldr	r3, [pc, #92]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b04      	cmp	r3, #4
 800a292:	d109      	bne.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a294:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	08db      	lsrs	r3, r3, #3
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	4a13      	ldr	r2, [pc, #76]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a6:	e078      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ac:	e075      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a2ae:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ba:	d102      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c0:	e06b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c6:	e068      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2d4:	d102      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a2d6:	4b07      	ldr	r3, [pc, #28]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2da:	e05e      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e0:	e05b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e6:	e058      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	03d09000 	.word	0x03d09000
 800a2f0:	003d0900 	.word	0x003d0900
 800a2f4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a300:	430b      	orrs	r3, r1
 800a302:	d148      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a304:	4b27      	ldr	r3, [pc, #156]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a30c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a314:	d02a      	beq.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31c:	d838      	bhi.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a32a:	d00d      	beq.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a32c:	e030      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a32e:	4b1d      	ldr	r3, [pc, #116]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33a:	d102      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a33c:	4b1a      	ldr	r3, [pc, #104]	; (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a340:	e02b      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a346:	e028      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a348:	4b16      	ldr	r3, [pc, #88]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a354:	d107      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fae4 	bl	800a928 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a364:	e019      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36a:	e016      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a378:	d107      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37a:	f107 0318 	add.w	r3, r7, #24
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f82a 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a388:	e007      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38e:	e004      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a394:	e001      	b.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3740      	adds	r7, #64	; 0x40
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	017d7840 	.word	0x017d7840

0800a3ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a3b0:	f7fd ffd4 	bl	800835c <HAL_RCC_GetHCLKFreq>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	091b      	lsrs	r3, r3, #4
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	4904      	ldr	r1, [pc, #16]	; (800a3d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a3c2:	5ccb      	ldrb	r3, [r1, r3]
 800a3c4:	f003 031f 	and.w	r3, r3, #31
 800a3c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	58024400 	.word	0x58024400
 800a3d4:	080123d0 	.word	0x080123d0

0800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b089      	sub	sp, #36	; 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3e0:	4ba1      	ldr	r3, [pc, #644]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a3ea:	4b9f      	ldr	r3, [pc, #636]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	0b1b      	lsrs	r3, r3, #12
 800a3f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a3f6:	4b9c      	ldr	r3, [pc, #624]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	091b      	lsrs	r3, r3, #4
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a402:	4b99      	ldr	r3, [pc, #612]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8111 	beq.w	800a648 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f000 8083 	beq.w	800a534 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b02      	cmp	r3, #2
 800a432:	f200 80a1 	bhi.w	800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d056      	beq.n	800a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a442:	e099      	b.n	800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a444:	4b88      	ldr	r3, [pc, #544]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0320 	and.w	r3, r3, #32
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d02d      	beq.n	800a4ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a450:	4b85      	ldr	r3, [pc, #532]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	08db      	lsrs	r3, r3, #3
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	4a84      	ldr	r2, [pc, #528]	; (800a66c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a45c:	fa22 f303 	lsr.w	r3, r2, r3
 800a460:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47a:	4b7b      	ldr	r3, [pc, #492]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a48e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a670 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a4aa:	e087      	b.n	800a5bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a674 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4be:	4b6a      	ldr	r3, [pc, #424]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a670 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ee:	e065      	b.n	800a5bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a502:	4b59      	ldr	r3, [pc, #356]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a512:	ed97 6a03 	vldr	s12, [r7, #12]
 800a516:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a670 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a532:	e043      	b.n	800a5bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a67c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a546:	4b48      	ldr	r3, [pc, #288]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	ed97 6a03 	vldr	s12, [r7, #12]
 800a55a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a670 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a576:	e021      	b.n	800a5bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a678 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58a:	4b37      	ldr	r3, [pc, #220]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a59e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a670 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a5bc:	4b2a      	ldr	r3, [pc, #168]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c0:	0a5b      	lsrs	r3, r3, #9
 800a5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	ee17 2a90 	vmov	r2, s15
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a5ea:	4b1f      	ldr	r3, [pc, #124]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a600:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a604:	edd7 6a07 	vldr	s13, [r7, #28]
 800a608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a610:	ee17 2a90 	vmov	r2, s15
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a618:	4b13      	ldr	r3, [pc, #76]	; (800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	0e1b      	lsrs	r3, r3, #24
 800a61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a62e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a632:	edd7 6a07 	vldr	s13, [r7, #28]
 800a636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a63e:	ee17 2a90 	vmov	r2, s15
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a646:	e008      	b.n	800a65a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	609a      	str	r2, [r3, #8]
}
 800a65a:	bf00      	nop
 800a65c:	3724      	adds	r7, #36	; 0x24
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	58024400 	.word	0x58024400
 800a66c:	03d09000 	.word	0x03d09000
 800a670:	46000000 	.word	0x46000000
 800a674:	4c742400 	.word	0x4c742400
 800a678:	4a742400 	.word	0x4a742400
 800a67c:	4bbebc20 	.word	0x4bbebc20

0800a680 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a688:	4ba1      	ldr	r3, [pc, #644]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a692:	4b9f      	ldr	r3, [pc, #636]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	0d1b      	lsrs	r3, r3, #20
 800a698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a69c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a69e:	4b9c      	ldr	r3, [pc, #624]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	0a1b      	lsrs	r3, r3, #8
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a6aa:	4b99      	ldr	r3, [pc, #612]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ae:	08db      	lsrs	r3, r3, #3
 800a6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 8111 	beq.w	800a8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	f000 8083 	beq.w	800a7dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	f200 80a1 	bhi.w	800a820 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d056      	beq.n	800a798 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a6ea:	e099      	b.n	800a820 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ec:	4b88      	ldr	r3, [pc, #544]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d02d      	beq.n	800a754 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6f8:	4b85      	ldr	r3, [pc, #532]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	08db      	lsrs	r3, r3, #3
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	4a84      	ldr	r2, [pc, #528]	; (800a914 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a704:	fa22 f303 	lsr.w	r3, r2, r3
 800a708:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	ee07 3a90 	vmov	s15, r3
 800a710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a732:	ed97 6a03 	vldr	s12, [r7, #12]
 800a736:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a918 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a752:	e087      	b.n	800a864 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a766:	4b6a      	ldr	r3, [pc, #424]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76e:	ee07 3a90 	vmov	s15, r3
 800a772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a776:	ed97 6a03 	vldr	s12, [r7, #12]
 800a77a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a918 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a796:	e065      	b.n	800a864 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7aa:	4b59      	ldr	r3, [pc, #356]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a918 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7da:	e043      	b.n	800a864 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a924 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ee:	4b48      	ldr	r3, [pc, #288]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a802:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a918 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a81e:	e021      	b.n	800a864 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a920 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a832:	4b37      	ldr	r3, [pc, #220]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a842:	ed97 6a03 	vldr	s12, [r7, #12]
 800a846:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a918 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a862:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a864:	4b2a      	ldr	r3, [pc, #168]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	0a5b      	lsrs	r3, r3, #9
 800a86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a87a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88a:	ee17 2a90 	vmov	r2, s15
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a892:	4b1f      	ldr	r3, [pc, #124]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	0c1b      	lsrs	r3, r3, #16
 800a898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89c:	ee07 3a90 	vmov	s15, r3
 800a8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b8:	ee17 2a90 	vmov	r2, s15
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a8c0:	4b13      	ldr	r3, [pc, #76]	; (800a910 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c4:	0e1b      	lsrs	r3, r3, #24
 800a8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e6:	ee17 2a90 	vmov	r2, s15
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a8ee:	e008      	b.n	800a902 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	609a      	str	r2, [r3, #8]
}
 800a902:	bf00      	nop
 800a904:	3724      	adds	r7, #36	; 0x24
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	58024400 	.word	0x58024400
 800a914:	03d09000 	.word	0x03d09000
 800a918:	46000000 	.word	0x46000000
 800a91c:	4c742400 	.word	0x4c742400
 800a920:	4a742400 	.word	0x4a742400
 800a924:	4bbebc20 	.word	0x4bbebc20

0800a928 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a928:	b480      	push	{r7}
 800a92a:	b089      	sub	sp, #36	; 0x24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a930:	4ba0      	ldr	r3, [pc, #640]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a93a:	4b9e      	ldr	r3, [pc, #632]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	091b      	lsrs	r3, r3, #4
 800a940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a944:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a946:	4b9b      	ldr	r3, [pc, #620]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a950:	4b98      	ldr	r3, [pc, #608]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a954:	08db      	lsrs	r3, r3, #3
 800a956:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	fb02 f303 	mul.w	r3, r2, r3
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 8111 	beq.w	800ab96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b02      	cmp	r3, #2
 800a978:	f000 8083 	beq.w	800aa82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	f200 80a1 	bhi.w	800aac6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d056      	beq.n	800aa3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a990:	e099      	b.n	800aac6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a992:	4b88      	ldr	r3, [pc, #544]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d02d      	beq.n	800a9fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a99e:	4b85      	ldr	r3, [pc, #532]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	08db      	lsrs	r3, r3, #3
 800a9a4:	f003 0303 	and.w	r3, r3, #3
 800a9a8:	4a83      	ldr	r2, [pc, #524]	; (800abb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c8:	4b7a      	ldr	r3, [pc, #488]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d0:	ee07 3a90 	vmov	s15, r3
 800a9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9f8:	e087      	b.n	800ab0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800abc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aa08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0c:	4b69      	ldr	r3, [pc, #420]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa20:	eddf 5a66 	vldr	s11, [pc, #408]	; 800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa3c:	e065      	b.n	800ab0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	ee07 3a90 	vmov	s15, r3
 800aa44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aa4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa50:	4b58      	ldr	r3, [pc, #352]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa58:	ee07 3a90 	vmov	s15, r3
 800aa5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa60:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa64:	eddf 5a55 	vldr	s11, [pc, #340]	; 800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa80:	e043      	b.n	800ab0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800abc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aa90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa94:	4b47      	ldr	r3, [pc, #284]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9c:	ee07 3a90 	vmov	s15, r3
 800aaa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaa8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aaac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aac4:	e021      	b.n	800ab0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	ee07 3a90 	vmov	s15, r3
 800aacc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800abc0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad8:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae0:	ee07 3a90 	vmov	s15, r3
 800aae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaec:	eddf 5a33 	vldr	s11, [pc, #204]	; 800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aaf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ab0a:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	0a5b      	lsrs	r3, r3, #9
 800ab10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab30:	ee17 2a90 	vmov	r2, s15
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	0c1b      	lsrs	r3, r3, #16
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5e:	ee17 2a90 	vmov	r2, s15
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6a:	0e1b      	lsrs	r3, r3, #24
 800ab6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab8c:	ee17 2a90 	vmov	r2, s15
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ab94:	e008      	b.n	800aba8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	609a      	str	r2, [r3, #8]
}
 800aba8:	bf00      	nop
 800abaa:	3724      	adds	r7, #36	; 0x24
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	58024400 	.word	0x58024400
 800abb8:	03d09000 	.word	0x03d09000
 800abbc:	46000000 	.word	0x46000000
 800abc0:	4c742400 	.word	0x4c742400
 800abc4:	4a742400 	.word	0x4a742400
 800abc8:	4bbebc20 	.word	0x4bbebc20

0800abcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abda:	4b53      	ldr	r3, [pc, #332]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d101      	bne.n	800abea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e099      	b.n	800ad1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800abea:	4b4f      	ldr	r3, [pc, #316]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a4e      	ldr	r2, [pc, #312]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800abf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800abf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abf6:	f7f7 fe7b 	bl	80028f0 <HAL_GetTick>
 800abfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800abfc:	e008      	b.n	800ac10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abfe:	f7f7 fe77 	bl	80028f0 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d901      	bls.n	800ac10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e086      	b.n	800ad1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac10:	4b45      	ldr	r3, [pc, #276]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f0      	bne.n	800abfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac1c:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	031b      	lsls	r3, r3, #12
 800ac2a:	493f      	ldr	r1, [pc, #252]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	025b      	lsls	r3, r3, #9
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	431a      	orrs	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	041b      	lsls	r3, r3, #16
 800ac4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	061b      	lsls	r3, r3, #24
 800ac5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac60:	4931      	ldr	r1, [pc, #196]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ac66:	4b30      	ldr	r3, [pc, #192]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	492d      	ldr	r1, [pc, #180]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f023 0220 	bic.w	r2, r3, #32
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	4928      	ldr	r1, [pc, #160]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ac8a:	4b27      	ldr	r3, [pc, #156]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac90:	f023 0310 	bic.w	r3, r3, #16
 800ac94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ac98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <RCCEx_PLL2_Config+0x160>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	69d2      	ldr	r2, [r2, #28]
 800aca2:	00d2      	lsls	r2, r2, #3
 800aca4:	4920      	ldr	r1, [pc, #128]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800acaa:	4b1f      	ldr	r3, [pc, #124]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	4a1e      	ldr	r2, [pc, #120]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acb0:	f043 0310 	orr.w	r3, r3, #16
 800acb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d106      	bne.n	800acca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	4a19      	ldr	r2, [pc, #100]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acc8:	e00f      	b.n	800acea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d106      	bne.n	800acde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800acd0:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a14      	ldr	r2, [pc, #80]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acdc:	e005      	b.n	800acea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800acde:	4b12      	ldr	r3, [pc, #72]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	4a11      	ldr	r2, [pc, #68]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ace4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ace8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800acea:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800acf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800acf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acf6:	f7f7 fdfb 	bl	80028f0 <HAL_GetTick>
 800acfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800acfc:	e008      	b.n	800ad10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acfe:	f7f7 fdf7 	bl	80028f0 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e006      	b.n	800ad1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <RCCEx_PLL2_Config+0x15c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	ffff0007 	.word	0xffff0007

0800ad30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad3e:	4b53      	ldr	r3, [pc, #332]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d101      	bne.n	800ad4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e099      	b.n	800ae82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad4e:	4b4f      	ldr	r3, [pc, #316]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a4e      	ldr	r2, [pc, #312]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad5a:	f7f7 fdc9 	bl	80028f0 <HAL_GetTick>
 800ad5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad60:	e008      	b.n	800ad74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad62:	f7f7 fdc5 	bl	80028f0 <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d901      	bls.n	800ad74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e086      	b.n	800ae82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad74:	4b45      	ldr	r3, [pc, #276]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1f0      	bne.n	800ad62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad80:	4b42      	ldr	r3, [pc, #264]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	051b      	lsls	r3, r3, #20
 800ad8e:	493f      	ldr	r1, [pc, #252]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	628b      	str	r3, [r1, #40]	; 0x28
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	025b      	lsls	r3, r3, #9
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	431a      	orrs	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	3b01      	subs	r3, #1
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adb6:	431a      	orrs	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	061b      	lsls	r3, r3, #24
 800adc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800adc4:	4931      	ldr	r1, [pc, #196]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800adca:	4b30      	ldr	r3, [pc, #192]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	492d      	ldr	r1, [pc, #180]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800add8:	4313      	orrs	r3, r2
 800adda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800addc:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	4928      	ldr	r1, [pc, #160]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adea:	4313      	orrs	r3, r2
 800adec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800adee:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	4a26      	ldr	r2, [pc, #152]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800adfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adfe:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <RCCEx_PLL3_Config+0x160>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	69d2      	ldr	r2, [r2, #28]
 800ae06:	00d2      	lsls	r2, r2, #3
 800ae08:	4920      	ldr	r1, [pc, #128]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae0e:	4b1f      	ldr	r3, [pc, #124]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae12:	4a1e      	ldr	r2, [pc, #120]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d106      	bne.n	800ae2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae20:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae2c:	e00f      	b.n	800ae4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d106      	bne.n	800ae42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae34:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a14      	ldr	r2, [pc, #80]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae40:	e005      	b.n	800ae4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a11      	ldr	r2, [pc, #68]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae4e:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a0e      	ldr	r2, [pc, #56]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae5a:	f7f7 fd49 	bl	80028f0 <HAL_GetTick>
 800ae5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae60:	e008      	b.n	800ae74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae62:	f7f7 fd45 	bl	80028f0 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d901      	bls.n	800ae74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e006      	b.n	800ae82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <RCCEx_PLL3_Config+0x15c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0f0      	beq.n	800ae62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	58024400 	.word	0x58024400
 800ae90:	ffff0007 	.word	0xffff0007

0800ae94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d071      	beq.n	800af8a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7f6 fbb6 	bl	800162c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f003 0310 	and.w	r3, r3, #16
 800aed2:	2b10      	cmp	r3, #16
 800aed4:	d050      	beq.n	800af78 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	22ca      	movs	r2, #202	; 0xca
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2253      	movs	r2, #83	; 0x53
 800aee4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9a0 	bl	800b22c <RTC_EnterInitMode>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d124      	bne.n	800af40 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6899      	ldr	r1, [r3, #8]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4b24      	ldr	r3, [pc, #144]	; (800af94 <HAL_RTC_Init+0x100>)
 800af02:	400b      	ands	r3, r1
 800af04:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6899      	ldr	r1, [r3, #8]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	431a      	orrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	431a      	orrs	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	430a      	orrs	r2, r1
 800af22:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	0419      	lsls	r1, r3, #16
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f9ac 	bl	800b294 <RTC_ExitInitMode>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d113      	bne.n	800af6e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0203 	bic.w	r2, r2, #3
 800af54:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	431a      	orrs	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	625a      	str	r2, [r3, #36]	; 0x24
 800af76:	e001      	b.n	800af7c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d103      	bne.n	800af8a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	ff8fffbf 	.word	0xff8fffbf

0800af98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800af98:	b590      	push	{r4, r7, lr}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d101      	bne.n	800afb2 <HAL_RTC_SetTime+0x1a>
 800afae:	2302      	movs	r3, #2
 800afb0:	e089      	b.n	800b0c6 <HAL_RTC_SetTime+0x12e>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2202      	movs	r2, #2
 800afbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	22ca      	movs	r2, #202	; 0xca
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2253      	movs	r2, #83	; 0x53
 800afd0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f92a 	bl	800b22c <RTC_EnterInitMode>
 800afd8:	4603      	mov	r3, r0
 800afda:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800afdc:	7cfb      	ldrb	r3, [r7, #19]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d161      	bne.n	800b0a6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d126      	bne.n	800b036 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f000 f985 	bl	800b310 <RTC_ByteToBcd2>
 800b006:	4603      	mov	r3, r0
 800b008:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	785b      	ldrb	r3, [r3, #1]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f97e 	bl	800b310 <RTC_ByteToBcd2>
 800b014:	4603      	mov	r3, r0
 800b016:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b018:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	789b      	ldrb	r3, [r3, #2]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 f976 	bl	800b310 <RTC_ByteToBcd2>
 800b024:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b026:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	78db      	ldrb	r3, [r3, #3]
 800b02e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b030:	4313      	orrs	r3, r2
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e018      	b.n	800b068 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b056:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b05c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	78db      	ldrb	r3, [r3, #3]
 800b062:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b064:	4313      	orrs	r3, r2
 800b066:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	6979      	ldr	r1, [r7, #20]
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <HAL_RTC_SetTime+0x138>)
 800b070:	400b      	ands	r3, r1
 800b072:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b082:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6899      	ldr	r1, [r3, #8]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	431a      	orrs	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	430a      	orrs	r2, r1
 800b09a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 f8f9 	bl	800b294 <RTC_ExitInitMode>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	22ff      	movs	r2, #255	; 0xff
 800b0ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b0ae:	7cfb      	ldrb	r3, [r7, #19]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b0c4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd90      	pop	{r4, r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	007f7f7f 	.word	0x007f7f7f

0800b0d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b0d4:	b590      	push	{r4, r7, lr}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d101      	bne.n	800b0ee <HAL_RTC_SetDate+0x1a>
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	e073      	b.n	800b1d6 <HAL_RTC_SetDate+0x102>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10e      	bne.n	800b122 <HAL_RTC_SetDate+0x4e>
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d008      	beq.n	800b122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	f023 0310 	bic.w	r3, r3, #16
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	330a      	adds	r3, #10
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d11c      	bne.n	800b162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	78db      	ldrb	r3, [r3, #3]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f8ef 	bl	800b310 <RTC_ByteToBcd2>
 800b132:	4603      	mov	r3, r0
 800b134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	785b      	ldrb	r3, [r3, #1]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f8e8 	bl	800b310 <RTC_ByteToBcd2>
 800b140:	4603      	mov	r3, r0
 800b142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	789b      	ldrb	r3, [r3, #2]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 f8e0 	bl	800b310 <RTC_ByteToBcd2>
 800b150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b15c:	4313      	orrs	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	e00e      	b.n	800b180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	78db      	ldrb	r3, [r3, #3]
 800b166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	785b      	ldrb	r3, [r3, #1]
 800b16c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b16e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b17c:	4313      	orrs	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	22ca      	movs	r2, #202	; 0xca
 800b186:	625a      	str	r2, [r3, #36]	; 0x24
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2253      	movs	r2, #83	; 0x53
 800b18e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f84b 	bl	800b22c <RTC_EnterInitMode>
 800b196:	4603      	mov	r3, r0
 800b198:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b19a:	7cfb      	ldrb	r3, [r7, #19]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	6979      	ldr	r1, [r7, #20]
 800b1a6:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <HAL_RTC_SetDate+0x10c>)
 800b1a8:	400b      	ands	r3, r1
 800b1aa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 f871 	bl	800b294 <RTC_ExitInitMode>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	22ff      	movs	r2, #255	; 0xff
 800b1bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b1be:	7cfb      	ldrb	r3, [r7, #19]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d103      	bne.n	800b1cc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b1d4:	7cfb      	ldrb	r3, [r7, #19]


}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd90      	pop	{r4, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	00ffff3f 	.word	0x00ffff3f

0800b1e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0d      	ldr	r2, [pc, #52]	; (800b228 <HAL_RTC_WaitForSynchro+0x44>)
 800b1f2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b1f4:	f7f7 fb7c 	bl	80028f0 <HAL_GetTick>
 800b1f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b1fa:	e009      	b.n	800b210 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1fc:	f7f7 fb78 	bl	80028f0 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b20a:	d901      	bls.n	800b210 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e007      	b.n	800b220 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0ee      	beq.n	800b1fc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	0003ff5f 	.word	0x0003ff5f

0800b22c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b242:	2b00      	cmp	r3, #0
 800b244:	d120      	bne.n	800b288 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b24e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b250:	f7f7 fb4e 	bl	80028f0 <HAL_GetTick>
 800b254:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b256:	e00d      	b.n	800b274 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b258:	f7f7 fb4a 	bl	80028f0 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b266:	d905      	bls.n	800b274 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2203      	movs	r2, #3
 800b270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <RTC_EnterInitMode+0x5c>
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	2b03      	cmp	r3, #3
 800b286:	d1e7      	bne.n	800b258 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	4a19      	ldr	r2, [pc, #100]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2aa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b2ac:	4b17      	ldr	r3, [pc, #92]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f003 0320 	and.w	r3, r3, #32
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10c      	bne.n	800b2d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff ff93 	bl	800b1e4 <HAL_RTC_WaitForSynchro>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01e      	beq.n	800b302 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2203      	movs	r2, #3
 800b2c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	73fb      	strb	r3, [r7, #15]
 800b2d0:	e017      	b.n	800b302 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b2d2:	4b0e      	ldr	r3, [pc, #56]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	4a0d      	ldr	r2, [pc, #52]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2d8:	f023 0320 	bic.w	r3, r3, #32
 800b2dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff ff80 	bl	800b1e4 <HAL_RTC_WaitForSynchro>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4a04      	ldr	r2, [pc, #16]	; (800b30c <RTC_ExitInitMode+0x78>)
 800b2fc:	f043 0320 	orr.w	r3, r3, #32
 800b300:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	58004000 	.word	0x58004000

0800b310 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b322:	e005      	b.n	800b330 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	3b0a      	subs	r3, #10
 800b32e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	2b09      	cmp	r3, #9
 800b334:	d8f6      	bhi.n	800b324 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	7afb      	ldrb	r3, [r7, #11]
 800b340:	4313      	orrs	r3, r2
 800b342:	b2db      	uxtb	r3, r3
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e10f      	b.n	800b582 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a87      	ldr	r2, [pc, #540]	; (800b58c <HAL_SPI_Init+0x23c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00f      	beq.n	800b392 <HAL_SPI_Init+0x42>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a86      	ldr	r2, [pc, #536]	; (800b590 <HAL_SPI_Init+0x240>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00a      	beq.n	800b392 <HAL_SPI_Init+0x42>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a84      	ldr	r2, [pc, #528]	; (800b594 <HAL_SPI_Init+0x244>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d005      	beq.n	800b392 <HAL_SPI_Init+0x42>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	2b0f      	cmp	r3, #15
 800b38c:	d901      	bls.n	800b392 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e0f7      	b.n	800b582 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f900 	bl	800b598 <SPI_GetPacketSize>
 800b398:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a7b      	ldr	r2, [pc, #492]	; (800b58c <HAL_SPI_Init+0x23c>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00c      	beq.n	800b3be <HAL_SPI_Init+0x6e>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a79      	ldr	r2, [pc, #484]	; (800b590 <HAL_SPI_Init+0x240>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d007      	beq.n	800b3be <HAL_SPI_Init+0x6e>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a78      	ldr	r2, [pc, #480]	; (800b594 <HAL_SPI_Init+0x244>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d002      	beq.n	800b3be <HAL_SPI_Init+0x6e>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d811      	bhi.n	800b3e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3c2:	4a72      	ldr	r2, [pc, #456]	; (800b58c <HAL_SPI_Init+0x23c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d009      	beq.n	800b3dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a70      	ldr	r2, [pc, #448]	; (800b590 <HAL_SPI_Init+0x240>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d004      	beq.n	800b3dc <HAL_SPI_Init+0x8c>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a6f      	ldr	r2, [pc, #444]	; (800b594 <HAL_SPI_Init+0x244>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d104      	bne.n	800b3e6 <HAL_SPI_Init+0x96>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b10      	cmp	r3, #16
 800b3e0:	d901      	bls.n	800b3e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e0cd      	b.n	800b582 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7f6 fae2 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b422:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b42c:	d119      	bne.n	800b462 <HAL_SPI_Init+0x112>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b436:	d103      	bne.n	800b440 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10c      	bne.n	800b462 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b44c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b450:	d107      	bne.n	800b462 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00f      	beq.n	800b48e <HAL_SPI_Init+0x13e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	2b06      	cmp	r3, #6
 800b474:	d90b      	bls.n	800b48e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	430a      	orrs	r2, r1
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	e007      	b.n	800b49e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b49c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	69da      	ldr	r2, [r3, #28]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b0:	ea42 0103 	orr.w	r1, r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	431a      	orrs	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ce:	431a      	orrs	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	431a      	orrs	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fe:	ea42 0103 	orr.w	r1, r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d113      	bne.n	800b53e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b528:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b53c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 0201 	bic.w	r2, r2, #1
 800b54c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	430a      	orrs	r2, r1
 800b56e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40013000 	.word	0x40013000
 800b590:	40003800 	.word	0x40003800
 800b594:	40003c00 	.word	0x40003c00

0800b598 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a4:	095b      	lsrs	r3, r3, #5
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	3307      	adds	r3, #7
 800b5b6:	08db      	lsrs	r3, r3, #3
 800b5b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	fb02 f303 	mul.w	r3, r2, r3
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e049      	b.n	800b674 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7f6 fe83 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3304      	adds	r3, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4610      	mov	r0, r2
 800b60e:	f000 fc3f 	bl	800be90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d001      	beq.n	800b694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e054      	b.n	800b73e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f042 0201 	orr.w	r2, r2, #1
 800b6aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a26      	ldr	r2, [pc, #152]	; (800b74c <HAL_TIM_Base_Start_IT+0xd0>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d022      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6be:	d01d      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a22      	ldr	r2, [pc, #136]	; (800b750 <HAL_TIM_Base_Start_IT+0xd4>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d018      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a21      	ldr	r2, [pc, #132]	; (800b754 <HAL_TIM_Base_Start_IT+0xd8>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d013      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a1f      	ldr	r2, [pc, #124]	; (800b758 <HAL_TIM_Base_Start_IT+0xdc>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00e      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a1e      	ldr	r2, [pc, #120]	; (800b75c <HAL_TIM_Base_Start_IT+0xe0>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d009      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a1c      	ldr	r2, [pc, #112]	; (800b760 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d004      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x80>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a1b      	ldr	r2, [pc, #108]	; (800b764 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d115      	bne.n	800b728 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	4b19      	ldr	r3, [pc, #100]	; (800b768 <HAL_TIM_Base_Start_IT+0xec>)
 800b704:	4013      	ands	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	d015      	beq.n	800b73a <HAL_TIM_Base_Start_IT+0xbe>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b714:	d011      	beq.n	800b73a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b726:	e008      	b.n	800b73a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e000      	b.n	800b73c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b73a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40010000 	.word	0x40010000
 800b750:	40000400 	.word	0x40000400
 800b754:	40000800 	.word	0x40000800
 800b758:	40000c00 	.word	0x40000c00
 800b75c:	40010400 	.word	0x40010400
 800b760:	40001800 	.word	0x40001800
 800b764:	40014000 	.word	0x40014000
 800b768:	00010007 	.word	0x00010007

0800b76c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e049      	b.n	800b812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f841 	bl	800b81a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f000 fb70 	bl	800be90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d020      	beq.n	800b892 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d01b      	beq.n	800b892 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f06f 0202 	mvn.w	r2, #2
 800b862:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	f003 0303 	and.w	r3, r3, #3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d003      	beq.n	800b880 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 faeb 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b87e:	e005      	b.n	800b88c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f5 fd17 	bl	80012b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 faee 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d020      	beq.n	800b8de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f003 0304 	and.w	r3, r3, #4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d01b      	beq.n	800b8de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f06f 0204 	mvn.w	r2, #4
 800b8ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fac5 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b8ca:	e005      	b.n	800b8d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7f5 fcf1 	bl	80012b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fac8 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d020      	beq.n	800b92a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01b      	beq.n	800b92a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f06f 0208 	mvn.w	r2, #8
 800b8fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2204      	movs	r2, #4
 800b900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	f003 0303 	and.w	r3, r3, #3
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d003      	beq.n	800b918 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fa9f 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b916:	e005      	b.n	800b924 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7f5 fccb 	bl	80012b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 faa2 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b00      	cmp	r3, #0
 800b932:	d020      	beq.n	800b976 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f003 0310 	and.w	r3, r3, #16
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01b      	beq.n	800b976 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f06f 0210 	mvn.w	r2, #16
 800b946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2208      	movs	r2, #8
 800b94c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	69db      	ldr	r3, [r3, #28]
 800b954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fa79 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b962:	e005      	b.n	800b970 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7f5 fca5 	bl	80012b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa7c 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00c      	beq.n	800b99a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b00      	cmp	r3, #0
 800b988:	d007      	beq.n	800b99a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f06f 0201 	mvn.w	r2, #1
 800b992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7f5 fdb3 	bl	8001500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d104      	bne.n	800b9ae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 ff94 	bl	800c8f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00c      	beq.n	800b9ec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 ff8c 	bl	800c904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00c      	beq.n	800ba10 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d007      	beq.n	800ba10 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fa36 	bl	800be7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00c      	beq.n	800ba34 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f003 0320 	and.w	r3, r3, #32
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f06f 0220 	mvn.w	r2, #32
 800ba2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 ff54 	bl	800c8dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d101      	bne.n	800ba5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba56:	2302      	movs	r3, #2
 800ba58:	e0ff      	b.n	800bc5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b14      	cmp	r3, #20
 800ba66:	f200 80f0 	bhi.w	800bc4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800bac5 	.word	0x0800bac5
 800ba74:	0800bc4b 	.word	0x0800bc4b
 800ba78:	0800bc4b 	.word	0x0800bc4b
 800ba7c:	0800bc4b 	.word	0x0800bc4b
 800ba80:	0800bb05 	.word	0x0800bb05
 800ba84:	0800bc4b 	.word	0x0800bc4b
 800ba88:	0800bc4b 	.word	0x0800bc4b
 800ba8c:	0800bc4b 	.word	0x0800bc4b
 800ba90:	0800bb47 	.word	0x0800bb47
 800ba94:	0800bc4b 	.word	0x0800bc4b
 800ba98:	0800bc4b 	.word	0x0800bc4b
 800ba9c:	0800bc4b 	.word	0x0800bc4b
 800baa0:	0800bb87 	.word	0x0800bb87
 800baa4:	0800bc4b 	.word	0x0800bc4b
 800baa8:	0800bc4b 	.word	0x0800bc4b
 800baac:	0800bc4b 	.word	0x0800bc4b
 800bab0:	0800bbc9 	.word	0x0800bbc9
 800bab4:	0800bc4b 	.word	0x0800bc4b
 800bab8:	0800bc4b 	.word	0x0800bc4b
 800babc:	0800bc4b 	.word	0x0800bc4b
 800bac0:	0800bc09 	.word	0x0800bc09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fa86 	bl	800bfdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	699a      	ldr	r2, [r3, #24]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f042 0208 	orr.w	r2, r2, #8
 800bade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699a      	ldr	r2, [r3, #24]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 0204 	bic.w	r2, r2, #4
 800baee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6999      	ldr	r1, [r3, #24]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	691a      	ldr	r2, [r3, #16]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	430a      	orrs	r2, r1
 800bb00:	619a      	str	r2, [r3, #24]
      break;
 800bb02:	e0a5      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 faf6 	bl	800c0fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	699a      	ldr	r2, [r3, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	699a      	ldr	r2, [r3, #24]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6999      	ldr	r1, [r3, #24]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	021a      	lsls	r2, r3, #8
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	619a      	str	r2, [r3, #24]
      break;
 800bb44:	e084      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fb5f 	bl	800c210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0208 	orr.w	r2, r2, #8
 800bb60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69da      	ldr	r2, [r3, #28]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0204 	bic.w	r2, r2, #4
 800bb70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69d9      	ldr	r1, [r3, #28]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	691a      	ldr	r2, [r3, #16]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	430a      	orrs	r2, r1
 800bb82:	61da      	str	r2, [r3, #28]
      break;
 800bb84:	e064      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 fbc7 	bl	800c320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	69da      	ldr	r2, [r3, #28]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69da      	ldr	r2, [r3, #28]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69d9      	ldr	r1, [r3, #28]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	021a      	lsls	r2, r3, #8
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	61da      	str	r2, [r3, #28]
      break;
 800bbc6:	e043      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68b9      	ldr	r1, [r7, #8]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fc10 	bl	800c3f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f042 0208 	orr.w	r2, r2, #8
 800bbe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f022 0204 	bic.w	r2, r2, #4
 800bbf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	691a      	ldr	r2, [r3, #16]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc06:	e023      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fc54 	bl	800c4bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	021a      	lsls	r2, r3, #8
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	430a      	orrs	r2, r1
 800bc46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc48:	e002      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop

0800bc64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d101      	bne.n	800bc80 <HAL_TIM_ConfigClockSource+0x1c>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e0dc      	b.n	800be3a <HAL_TIM_ConfigClockSource+0x1d6>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	4b6a      	ldr	r3, [pc, #424]	; (800be44 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a64      	ldr	r2, [pc, #400]	; (800be48 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	f000 80a9 	beq.w	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcbc:	4a62      	ldr	r2, [pc, #392]	; (800be48 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	f200 80ae 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcc4:	4a61      	ldr	r2, [pc, #388]	; (800be4c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	f000 80a1 	beq.w	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bccc:	4a5f      	ldr	r2, [pc, #380]	; (800be4c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	f200 80a6 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcd4:	4a5e      	ldr	r2, [pc, #376]	; (800be50 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	f000 8099 	beq.w	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcdc:	4a5c      	ldr	r2, [pc, #368]	; (800be50 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f200 809e 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bce4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bce8:	f000 8091 	beq.w	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bcf0:	f200 8096 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcf8:	f000 8089 	beq.w	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bcfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd00:	f200 808e 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd08:	d03e      	beq.n	800bd88 <HAL_TIM_ConfigClockSource+0x124>
 800bd0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd0e:	f200 8087 	bhi.w	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd16:	f000 8086 	beq.w	800be26 <HAL_TIM_ConfigClockSource+0x1c2>
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d87f      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd20:	2b70      	cmp	r3, #112	; 0x70
 800bd22:	d01a      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0xf6>
 800bd24:	2b70      	cmp	r3, #112	; 0x70
 800bd26:	d87b      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd28:	2b60      	cmp	r3, #96	; 0x60
 800bd2a:	d050      	beq.n	800bdce <HAL_TIM_ConfigClockSource+0x16a>
 800bd2c:	2b60      	cmp	r3, #96	; 0x60
 800bd2e:	d877      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd30:	2b50      	cmp	r3, #80	; 0x50
 800bd32:	d03c      	beq.n	800bdae <HAL_TIM_ConfigClockSource+0x14a>
 800bd34:	2b50      	cmp	r3, #80	; 0x50
 800bd36:	d873      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd38:	2b40      	cmp	r3, #64	; 0x40
 800bd3a:	d058      	beq.n	800bdee <HAL_TIM_ConfigClockSource+0x18a>
 800bd3c:	2b40      	cmp	r3, #64	; 0x40
 800bd3e:	d86f      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd40:	2b30      	cmp	r3, #48	; 0x30
 800bd42:	d064      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd44:	2b30      	cmp	r3, #48	; 0x30
 800bd46:	d86b      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd48:	2b20      	cmp	r3, #32
 800bd4a:	d060      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d867      	bhi.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d05c      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d05a      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0x1aa>
 800bd58:	e062      	b.n	800be20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	6899      	ldr	r1, [r3, #8]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	f000 fc8b 	bl	800c684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	609a      	str	r2, [r3, #8]
      break;
 800bd86:	e04f      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6818      	ldr	r0, [r3, #0]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	6899      	ldr	r1, [r3, #8]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f000 fc74 	bl	800c684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdaa:	609a      	str	r2, [r3, #8]
      break;
 800bdac:	e03c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	6859      	ldr	r1, [r3, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f000 fbe4 	bl	800c588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2150      	movs	r1, #80	; 0x50
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fc3e 	bl	800c648 <TIM_ITRx_SetConfig>
      break;
 800bdcc:	e02c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	6859      	ldr	r1, [r3, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	461a      	mov	r2, r3
 800bddc:	f000 fc03 	bl	800c5e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2160      	movs	r1, #96	; 0x60
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 fc2e 	bl	800c648 <TIM_ITRx_SetConfig>
      break;
 800bdec:	e01c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	6859      	ldr	r1, [r3, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f000 fbc4 	bl	800c588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2140      	movs	r1, #64	; 0x40
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fc1e 	bl	800c648 <TIM_ITRx_SetConfig>
      break;
 800be0c:	e00c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f000 fc15 	bl	800c648 <TIM_ITRx_SetConfig>
      break;
 800be1e:	e003      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	73fb      	strb	r3, [r7, #15]
      break;
 800be24:	e000      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800be26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	ffceff88 	.word	0xffceff88
 800be48:	00100040 	.word	0x00100040
 800be4c:	00100030 	.word	0x00100030
 800be50:	00100020 	.word	0x00100020

0800be54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a46      	ldr	r2, [pc, #280]	; (800bfbc <TIM_Base_SetConfig+0x12c>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d013      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beae:	d00f      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a43      	ldr	r2, [pc, #268]	; (800bfc0 <TIM_Base_SetConfig+0x130>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00b      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a42      	ldr	r2, [pc, #264]	; (800bfc4 <TIM_Base_SetConfig+0x134>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d007      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a41      	ldr	r2, [pc, #260]	; (800bfc8 <TIM_Base_SetConfig+0x138>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d003      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a40      	ldr	r2, [pc, #256]	; (800bfcc <TIM_Base_SetConfig+0x13c>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d108      	bne.n	800bee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a35      	ldr	r2, [pc, #212]	; (800bfbc <TIM_Base_SetConfig+0x12c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d01f      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef0:	d01b      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a32      	ldr	r2, [pc, #200]	; (800bfc0 <TIM_Base_SetConfig+0x130>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d017      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a31      	ldr	r2, [pc, #196]	; (800bfc4 <TIM_Base_SetConfig+0x134>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d013      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a30      	ldr	r2, [pc, #192]	; (800bfc8 <TIM_Base_SetConfig+0x138>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00f      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a2f      	ldr	r2, [pc, #188]	; (800bfcc <TIM_Base_SetConfig+0x13c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00b      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a2e      	ldr	r2, [pc, #184]	; (800bfd0 <TIM_Base_SetConfig+0x140>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d007      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a2d      	ldr	r2, [pc, #180]	; (800bfd4 <TIM_Base_SetConfig+0x144>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d003      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a2c      	ldr	r2, [pc, #176]	; (800bfd8 <TIM_Base_SetConfig+0x148>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d108      	bne.n	800bf3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a16      	ldr	r2, [pc, #88]	; (800bfbc <TIM_Base_SetConfig+0x12c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00f      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <TIM_Base_SetConfig+0x13c>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d00b      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a17      	ldr	r2, [pc, #92]	; (800bfd0 <TIM_Base_SetConfig+0x140>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d007      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a16      	ldr	r2, [pc, #88]	; (800bfd4 <TIM_Base_SetConfig+0x144>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d003      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a15      	ldr	r2, [pc, #84]	; (800bfd8 <TIM_Base_SetConfig+0x148>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d103      	bne.n	800bf90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d105      	bne.n	800bfae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	f023 0201 	bic.w	r2, r3, #1
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	611a      	str	r2, [r3, #16]
  }
}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	40010000 	.word	0x40010000
 800bfc0:	40000400 	.word	0x40000400
 800bfc4:	40000800 	.word	0x40000800
 800bfc8:	40000c00 	.word	0x40000c00
 800bfcc:	40010400 	.word	0x40010400
 800bfd0:	40014000 	.word	0x40014000
 800bfd4:	40014400 	.word	0x40014400
 800bfd8:	40014800 	.word	0x40014800

0800bfdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	f023 0201 	bic.w	r2, r3, #1
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4b37      	ldr	r3, [pc, #220]	; (800c0e4 <TIM_OC1_SetConfig+0x108>)
 800c008:	4013      	ands	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0303 	bic.w	r3, r3, #3
 800c012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f023 0302 	bic.w	r3, r3, #2
 800c024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a2d      	ldr	r2, [pc, #180]	; (800c0e8 <TIM_OC1_SetConfig+0x10c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d00f      	beq.n	800c058 <TIM_OC1_SetConfig+0x7c>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a2c      	ldr	r2, [pc, #176]	; (800c0ec <TIM_OC1_SetConfig+0x110>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d00b      	beq.n	800c058 <TIM_OC1_SetConfig+0x7c>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a2b      	ldr	r2, [pc, #172]	; (800c0f0 <TIM_OC1_SetConfig+0x114>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d007      	beq.n	800c058 <TIM_OC1_SetConfig+0x7c>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a2a      	ldr	r2, [pc, #168]	; (800c0f4 <TIM_OC1_SetConfig+0x118>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d003      	beq.n	800c058 <TIM_OC1_SetConfig+0x7c>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a29      	ldr	r2, [pc, #164]	; (800c0f8 <TIM_OC1_SetConfig+0x11c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d10c      	bne.n	800c072 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f023 0308 	bic.w	r3, r3, #8
 800c05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	4313      	orrs	r3, r2
 800c068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f023 0304 	bic.w	r3, r3, #4
 800c070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a1c      	ldr	r2, [pc, #112]	; (800c0e8 <TIM_OC1_SetConfig+0x10c>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d00f      	beq.n	800c09a <TIM_OC1_SetConfig+0xbe>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a1b      	ldr	r2, [pc, #108]	; (800c0ec <TIM_OC1_SetConfig+0x110>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d00b      	beq.n	800c09a <TIM_OC1_SetConfig+0xbe>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a1a      	ldr	r2, [pc, #104]	; (800c0f0 <TIM_OC1_SetConfig+0x114>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d007      	beq.n	800c09a <TIM_OC1_SetConfig+0xbe>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a19      	ldr	r2, [pc, #100]	; (800c0f4 <TIM_OC1_SetConfig+0x118>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d003      	beq.n	800c09a <TIM_OC1_SetConfig+0xbe>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a18      	ldr	r2, [pc, #96]	; (800c0f8 <TIM_OC1_SetConfig+0x11c>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d111      	bne.n	800c0be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	693a      	ldr	r2, [r7, #16]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	621a      	str	r2, [r3, #32]
}
 800c0d8:	bf00      	nop
 800c0da:	371c      	adds	r7, #28
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	fffeff8f 	.word	0xfffeff8f
 800c0e8:	40010000 	.word	0x40010000
 800c0ec:	40010400 	.word	0x40010400
 800c0f0:	40014000 	.word	0x40014000
 800c0f4:	40014400 	.word	0x40014400
 800c0f8:	40014800 	.word	0x40014800

0800c0fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b087      	sub	sp, #28
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a1b      	ldr	r3, [r3, #32]
 800c110:	f023 0210 	bic.w	r2, r3, #16
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	4b34      	ldr	r3, [pc, #208]	; (800c1f8 <TIM_OC2_SetConfig+0xfc>)
 800c128:	4013      	ands	r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	021b      	lsls	r3, r3, #8
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	f023 0320 	bic.w	r3, r3, #32
 800c146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	011b      	lsls	r3, r3, #4
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	4313      	orrs	r3, r2
 800c152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a29      	ldr	r2, [pc, #164]	; (800c1fc <TIM_OC2_SetConfig+0x100>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_OC2_SetConfig+0x68>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a28      	ldr	r2, [pc, #160]	; (800c200 <TIM_OC2_SetConfig+0x104>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d10d      	bne.n	800c180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	4313      	orrs	r3, r2
 800c176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c17e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a1e      	ldr	r2, [pc, #120]	; (800c1fc <TIM_OC2_SetConfig+0x100>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00f      	beq.n	800c1a8 <TIM_OC2_SetConfig+0xac>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a1d      	ldr	r2, [pc, #116]	; (800c200 <TIM_OC2_SetConfig+0x104>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00b      	beq.n	800c1a8 <TIM_OC2_SetConfig+0xac>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a1c      	ldr	r2, [pc, #112]	; (800c204 <TIM_OC2_SetConfig+0x108>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d007      	beq.n	800c1a8 <TIM_OC2_SetConfig+0xac>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a1b      	ldr	r2, [pc, #108]	; (800c208 <TIM_OC2_SetConfig+0x10c>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d003      	beq.n	800c1a8 <TIM_OC2_SetConfig+0xac>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a1a      	ldr	r2, [pc, #104]	; (800c20c <TIM_OC2_SetConfig+0x110>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d113      	bne.n	800c1d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	699b      	ldr	r3, [r3, #24]
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	621a      	str	r2, [r3, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	feff8fff 	.word	0xfeff8fff
 800c1fc:	40010000 	.word	0x40010000
 800c200:	40010400 	.word	0x40010400
 800c204:	40014000 	.word	0x40014000
 800c208:	40014400 	.word	0x40014400
 800c20c:	40014800 	.word	0x40014800

0800c210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	4b33      	ldr	r3, [pc, #204]	; (800c308 <TIM_OC3_SetConfig+0xf8>)
 800c23c:	4013      	ands	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	021b      	lsls	r3, r3, #8
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	4313      	orrs	r3, r2
 800c264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a28      	ldr	r2, [pc, #160]	; (800c30c <TIM_OC3_SetConfig+0xfc>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d003      	beq.n	800c276 <TIM_OC3_SetConfig+0x66>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a27      	ldr	r2, [pc, #156]	; (800c310 <TIM_OC3_SetConfig+0x100>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d10d      	bne.n	800c292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	021b      	lsls	r3, r3, #8
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a1d      	ldr	r2, [pc, #116]	; (800c30c <TIM_OC3_SetConfig+0xfc>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_OC3_SetConfig+0xaa>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a1c      	ldr	r2, [pc, #112]	; (800c310 <TIM_OC3_SetConfig+0x100>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_OC3_SetConfig+0xaa>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a1b      	ldr	r2, [pc, #108]	; (800c314 <TIM_OC3_SetConfig+0x104>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_OC3_SetConfig+0xaa>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a1a      	ldr	r2, [pc, #104]	; (800c318 <TIM_OC3_SetConfig+0x108>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_OC3_SetConfig+0xaa>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a19      	ldr	r2, [pc, #100]	; (800c31c <TIM_OC3_SetConfig+0x10c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d113      	bne.n	800c2e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	011b      	lsls	r3, r3, #4
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	621a      	str	r2, [r3, #32]
}
 800c2fc:	bf00      	nop
 800c2fe:	371c      	adds	r7, #28
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	fffeff8f 	.word	0xfffeff8f
 800c30c:	40010000 	.word	0x40010000
 800c310:	40010400 	.word	0x40010400
 800c314:	40014000 	.word	0x40014000
 800c318:	40014400 	.word	0x40014400
 800c31c:	40014800 	.word	0x40014800

0800c320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4b24      	ldr	r3, [pc, #144]	; (800c3dc <TIM_OC4_SetConfig+0xbc>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	021b      	lsls	r3, r3, #8
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c36a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	031b      	lsls	r3, r3, #12
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	4313      	orrs	r3, r2
 800c376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a19      	ldr	r2, [pc, #100]	; (800c3e0 <TIM_OC4_SetConfig+0xc0>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00f      	beq.n	800c3a0 <TIM_OC4_SetConfig+0x80>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a18      	ldr	r2, [pc, #96]	; (800c3e4 <TIM_OC4_SetConfig+0xc4>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d00b      	beq.n	800c3a0 <TIM_OC4_SetConfig+0x80>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a17      	ldr	r2, [pc, #92]	; (800c3e8 <TIM_OC4_SetConfig+0xc8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d007      	beq.n	800c3a0 <TIM_OC4_SetConfig+0x80>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <TIM_OC4_SetConfig+0xcc>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d003      	beq.n	800c3a0 <TIM_OC4_SetConfig+0x80>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a15      	ldr	r2, [pc, #84]	; (800c3f0 <TIM_OC4_SetConfig+0xd0>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d109      	bne.n	800c3b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	019b      	lsls	r3, r3, #6
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	621a      	str	r2, [r3, #32]
}
 800c3ce:	bf00      	nop
 800c3d0:	371c      	adds	r7, #28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	feff8fff 	.word	0xfeff8fff
 800c3e0:	40010000 	.word	0x40010000
 800c3e4:	40010400 	.word	0x40010400
 800c3e8:	40014000 	.word	0x40014000
 800c3ec:	40014400 	.word	0x40014400
 800c3f0:	40014800 	.word	0x40014800

0800c3f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a1b      	ldr	r3, [r3, #32]
 800c408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	4b21      	ldr	r3, [pc, #132]	; (800c4a4 <TIM_OC5_SetConfig+0xb0>)
 800c420:	4013      	ands	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	041b      	lsls	r3, r3, #16
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4313      	orrs	r3, r2
 800c440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a18      	ldr	r2, [pc, #96]	; (800c4a8 <TIM_OC5_SetConfig+0xb4>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d00f      	beq.n	800c46a <TIM_OC5_SetConfig+0x76>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a17      	ldr	r2, [pc, #92]	; (800c4ac <TIM_OC5_SetConfig+0xb8>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00b      	beq.n	800c46a <TIM_OC5_SetConfig+0x76>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a16      	ldr	r2, [pc, #88]	; (800c4b0 <TIM_OC5_SetConfig+0xbc>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d007      	beq.n	800c46a <TIM_OC5_SetConfig+0x76>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a15      	ldr	r2, [pc, #84]	; (800c4b4 <TIM_OC5_SetConfig+0xc0>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d003      	beq.n	800c46a <TIM_OC5_SetConfig+0x76>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a14      	ldr	r2, [pc, #80]	; (800c4b8 <TIM_OC5_SetConfig+0xc4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d109      	bne.n	800c47e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	621a      	str	r2, [r3, #32]
}
 800c498:	bf00      	nop
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	fffeff8f 	.word	0xfffeff8f
 800c4a8:	40010000 	.word	0x40010000
 800c4ac:	40010400 	.word	0x40010400
 800c4b0:	40014000 	.word	0x40014000
 800c4b4:	40014400 	.word	0x40014400
 800c4b8:	40014800 	.word	0x40014800

0800c4bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4b22      	ldr	r3, [pc, #136]	; (800c570 <TIM_OC6_SetConfig+0xb4>)
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	021b      	lsls	r3, r3, #8
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	051b      	lsls	r3, r3, #20
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	4313      	orrs	r3, r2
 800c50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a19      	ldr	r2, [pc, #100]	; (800c574 <TIM_OC6_SetConfig+0xb8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d00f      	beq.n	800c534 <TIM_OC6_SetConfig+0x78>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a18      	ldr	r2, [pc, #96]	; (800c578 <TIM_OC6_SetConfig+0xbc>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d00b      	beq.n	800c534 <TIM_OC6_SetConfig+0x78>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a17      	ldr	r2, [pc, #92]	; (800c57c <TIM_OC6_SetConfig+0xc0>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d007      	beq.n	800c534 <TIM_OC6_SetConfig+0x78>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a16      	ldr	r2, [pc, #88]	; (800c580 <TIM_OC6_SetConfig+0xc4>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d003      	beq.n	800c534 <TIM_OC6_SetConfig+0x78>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a15      	ldr	r2, [pc, #84]	; (800c584 <TIM_OC6_SetConfig+0xc8>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d109      	bne.n	800c548 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c53a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	029b      	lsls	r3, r3, #10
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	621a      	str	r2, [r3, #32]
}
 800c562:	bf00      	nop
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	feff8fff 	.word	0xfeff8fff
 800c574:	40010000 	.word	0x40010000
 800c578:	40010400 	.word	0x40010400
 800c57c:	40014000 	.word	0x40014000
 800c580:	40014400 	.word	0x40014400
 800c584:	40014800 	.word	0x40014800

0800c588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a1b      	ldr	r3, [r3, #32]
 800c598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	f023 0201 	bic.w	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	011b      	lsls	r3, r3, #4
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f023 030a 	bic.w	r3, r3, #10
 800c5c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	621a      	str	r2, [r3, #32]
}
 800c5da:	bf00      	nop
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b087      	sub	sp, #28
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	60f8      	str	r0, [r7, #12]
 800c5ee:	60b9      	str	r1, [r7, #8]
 800c5f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a1b      	ldr	r3, [r3, #32]
 800c5fc:	f023 0210 	bic.w	r2, r3, #16
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	031b      	lsls	r3, r3, #12
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	4313      	orrs	r3, r2
 800c61a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	011b      	lsls	r3, r3, #4
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	621a      	str	r2, [r3, #32]
}
 800c63a:	bf00      	nop
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
	...

0800c648 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	4b09      	ldr	r3, [pc, #36]	; (800c680 <TIM_ITRx_SetConfig+0x38>)
 800c65c:	4013      	ands	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	f043 0307 	orr.w	r3, r3, #7
 800c66a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	609a      	str	r2, [r3, #8]
}
 800c672:	bf00      	nop
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	ffcfff8f 	.word	0xffcfff8f

0800c684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c684:	b480      	push	{r7}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c69e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	021a      	lsls	r2, r3, #8
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	609a      	str	r2, [r3, #8]
}
 800c6b8:	bf00      	nop
 800c6ba:	371c      	adds	r7, #28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d101      	bne.n	800c6dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6d8:	2302      	movs	r3, #2
 800c6da:	e06d      	b.n	800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a30      	ldr	r2, [pc, #192]	; (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d004      	beq.n	800c710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2f      	ldr	r2, [pc, #188]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d108      	bne.n	800c722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	4313      	orrs	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	4313      	orrs	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d022      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c74e:	d01d      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a1d      	ldr	r2, [pc, #116]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d018      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a1c      	ldr	r2, [pc, #112]	; (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d013      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a1a      	ldr	r2, [pc, #104]	; (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d00e      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d009      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a16      	ldr	r2, [pc, #88]	; (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d004      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a15      	ldr	r2, [pc, #84]	; (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d10c      	bne.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	40010000 	.word	0x40010000
 800c7c8:	40010400 	.word	0x40010400
 800c7cc:	40000400 	.word	0x40000400
 800c7d0:	40000800 	.word	0x40000800
 800c7d4:	40000c00 	.word	0x40000c00
 800c7d8:	40001800 	.word	0x40001800
 800c7dc:	40014000 	.word	0x40014000

0800c7e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d101      	bne.n	800c7fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e065      	b.n	800c8c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4313      	orrs	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	4313      	orrs	r3, r2
 800c848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	4313      	orrs	r3, r2
 800c856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c862:	4313      	orrs	r3, r2
 800c864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	041b      	lsls	r3, r3, #16
 800c872:	4313      	orrs	r3, r2
 800c874:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a16      	ldr	r2, [pc, #88]	; (800c8d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d004      	beq.n	800c88a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a14      	ldr	r2, [pc, #80]	; (800c8d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d115      	bne.n	800c8b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c894:	051b      	lsls	r3, r3, #20
 800c896:	4313      	orrs	r3, r2
 800c898:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	40010000 	.word	0x40010000
 800c8d8:	40010400 	.word	0x40010400

0800c8dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e042      	b.n	800c9b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7f5 fe0b 	bl	8002558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2224      	movs	r2, #36	; 0x24
 800c946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0201 	bic.w	r2, r2, #1
 800c958:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 f960 	bl	800dc28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fbf5 	bl	800d158 <UART_SetConfig>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e01b      	b.n	800c9b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	689a      	ldr	r2, [r3, #8]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f042 0201 	orr.w	r2, r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 f9df 	bl	800dd6c <UART_CheckIdleState>
 800c9ae:	4603      	mov	r3, r0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b0ba      	sub	sp, #232	; 0xe8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c9de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c9e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c9ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d11b      	bne.n	800ca2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9f8:	f003 0320 	and.w	r3, r3, #32
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d015      	beq.n	800ca2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d105      	bne.n	800ca18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d009      	beq.n	800ca2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 8377 	beq.w	800d110 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	4798      	blx	r3
      }
      return;
 800ca2a:	e371      	b.n	800d110 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 8123 	beq.w	800cc7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ca3a:	4b8d      	ldr	r3, [pc, #564]	; (800cc70 <HAL_UART_IRQHandler+0x2b8>)
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ca42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca46:	4b8b      	ldr	r3, [pc, #556]	; (800cc74 <HAL_UART_IRQHandler+0x2bc>)
 800ca48:	4013      	ands	r3, r2
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 8116 	beq.w	800cc7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d011      	beq.n	800ca80 <HAL_UART_IRQHandler+0xc8>
 800ca5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca76:	f043 0201 	orr.w	r2, r3, #1
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca84:	f003 0302 	and.w	r3, r3, #2
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d011      	beq.n	800cab0 <HAL_UART_IRQHandler+0xf8>
 800ca8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00b      	beq.n	800cab0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caa6:	f043 0204 	orr.w	r2, r3, #4
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cab4:	f003 0304 	and.w	r3, r3, #4
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d011      	beq.n	800cae0 <HAL_UART_IRQHandler+0x128>
 800cabc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00b      	beq.n	800cae0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2204      	movs	r2, #4
 800cace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad6:	f043 0202 	orr.w	r2, r3, #2
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cae4:	f003 0308 	and.w	r3, r3, #8
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d017      	beq.n	800cb1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800caec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d105      	bne.n	800cb04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800caf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cafc:	4b5c      	ldr	r3, [pc, #368]	; (800cc70 <HAL_UART_IRQHandler+0x2b8>)
 800cafe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb12:	f043 0208 	orr.w	r2, r3, #8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d012      	beq.n	800cb4e <HAL_UART_IRQHandler+0x196>
 800cb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00c      	beq.n	800cb4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb44:	f043 0220 	orr.w	r2, r3, #32
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 82dd 	beq.w	800d114 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb5e:	f003 0320 	and.w	r3, r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d013      	beq.n	800cb8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb6a:	f003 0320 	and.w	r3, r3, #32
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d007      	beq.n	800cb8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d003      	beq.n	800cb8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba2:	2b40      	cmp	r3, #64	; 0x40
 800cba4:	d005      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d054      	beq.n	800cc5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f001 f9f2 	bl	800df9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc2:	2b40      	cmp	r3, #64	; 0x40
 800cbc4:	d146      	bne.n	800cc54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cbdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3308      	adds	r3, #8
 800cbee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cbf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cbf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cbfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cc0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1d9      	bne.n	800cbc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d017      	beq.n	800cc4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc22:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <HAL_UART_IRQHandler+0x2c0>)
 800cc24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f8 f84f 	bl	8004cd0 <HAL_DMA_Abort_IT>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d019      	beq.n	800cc6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800cc46:	4610      	mov	r0, r2
 800cc48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc4a:	e00f      	b.n	800cc6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fa6d 	bl	800d12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc52:	e00b      	b.n	800cc6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fa69 	bl	800d12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc5a:	e007      	b.n	800cc6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fa65 	bl	800d12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800cc6a:	e253      	b.n	800d114 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc6c:	bf00      	nop
    return;
 800cc6e:	e251      	b.n	800d114 <HAL_UART_IRQHandler+0x75c>
 800cc70:	10000001 	.word	0x10000001
 800cc74:	04000120 	.word	0x04000120
 800cc78:	0800e069 	.word	0x0800e069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	f040 81e7 	bne.w	800d054 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc8a:	f003 0310 	and.w	r3, r3, #16
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 81e0 	beq.w	800d054 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cc94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc98:	f003 0310 	and.w	r3, r3, #16
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 81d9 	beq.w	800d054 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2210      	movs	r2, #16
 800cca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb4:	2b40      	cmp	r3, #64	; 0x40
 800ccb6:	f040 8151 	bne.w	800cf5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a96      	ldr	r2, [pc, #600]	; (800cf1c <HAL_UART_IRQHandler+0x564>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d068      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a93      	ldr	r2, [pc, #588]	; (800cf20 <HAL_UART_IRQHandler+0x568>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d061      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a91      	ldr	r2, [pc, #580]	; (800cf24 <HAL_UART_IRQHandler+0x56c>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d05a      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a8e      	ldr	r2, [pc, #568]	; (800cf28 <HAL_UART_IRQHandler+0x570>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d053      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a8c      	ldr	r2, [pc, #560]	; (800cf2c <HAL_UART_IRQHandler+0x574>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d04c      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a89      	ldr	r2, [pc, #548]	; (800cf30 <HAL_UART_IRQHandler+0x578>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d045      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a87      	ldr	r2, [pc, #540]	; (800cf34 <HAL_UART_IRQHandler+0x57c>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d03e      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a84      	ldr	r2, [pc, #528]	; (800cf38 <HAL_UART_IRQHandler+0x580>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d037      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a82      	ldr	r2, [pc, #520]	; (800cf3c <HAL_UART_IRQHandler+0x584>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d030      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a7f      	ldr	r2, [pc, #508]	; (800cf40 <HAL_UART_IRQHandler+0x588>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d029      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a7d      	ldr	r2, [pc, #500]	; (800cf44 <HAL_UART_IRQHandler+0x58c>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d022      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a7a      	ldr	r2, [pc, #488]	; (800cf48 <HAL_UART_IRQHandler+0x590>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d01b      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a78      	ldr	r2, [pc, #480]	; (800cf4c <HAL_UART_IRQHandler+0x594>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d014      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a75      	ldr	r2, [pc, #468]	; (800cf50 <HAL_UART_IRQHandler+0x598>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d00d      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a73      	ldr	r2, [pc, #460]	; (800cf54 <HAL_UART_IRQHandler+0x59c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d006      	beq.n	800cd9a <HAL_UART_IRQHandler+0x3e2>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a70      	ldr	r2, [pc, #448]	; (800cf58 <HAL_UART_IRQHandler+0x5a0>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d106      	bne.n	800cda8 <HAL_UART_IRQHandler+0x3f0>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	e005      	b.n	800cdb4 <HAL_UART_IRQHandler+0x3fc>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 81ab 	beq.w	800d118 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	f080 81a3 	bcs.w	800d118 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cde8:	f000 8087 	beq.w	800cefa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cdf8:	e853 3f00 	ldrex	r3, [r3]
 800cdfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	461a      	mov	r2, r3
 800ce12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ce16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce26:	e841 2300 	strex	r3, r2, [r1]
 800ce2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ce2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1da      	bne.n	800cdec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce40:	e853 3f00 	ldrex	r3, [r3]
 800ce44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce48:	f023 0301 	bic.w	r3, r3, #1
 800ce4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3308      	adds	r3, #8
 800ce56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce66:	e841 2300 	strex	r3, r2, [r1]
 800ce6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1e1      	bne.n	800ce36 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3308      	adds	r3, #8
 800ce78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce7c:	e853 3f00 	ldrex	r3, [r3]
 800ce80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ce82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3308      	adds	r3, #8
 800ce92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ce96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce9e:	e841 2300 	strex	r3, r2, [r1]
 800cea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e3      	bne.n	800ce72 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2220      	movs	r2, #32
 800ceae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cec8:	f023 0310 	bic.w	r3, r3, #16
 800cecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	461a      	mov	r2, r3
 800ced6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ceda:	65bb      	str	r3, [r7, #88]	; 0x58
 800cedc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e4      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7f7 fbcd 	bl	8004694 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2202      	movs	r2, #2
 800cefe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f913 	bl	800d140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf1a:	e0fd      	b.n	800d118 <HAL_UART_IRQHandler+0x760>
 800cf1c:	40020010 	.word	0x40020010
 800cf20:	40020028 	.word	0x40020028
 800cf24:	40020040 	.word	0x40020040
 800cf28:	40020058 	.word	0x40020058
 800cf2c:	40020070 	.word	0x40020070
 800cf30:	40020088 	.word	0x40020088
 800cf34:	400200a0 	.word	0x400200a0
 800cf38:	400200b8 	.word	0x400200b8
 800cf3c:	40020410 	.word	0x40020410
 800cf40:	40020428 	.word	0x40020428
 800cf44:	40020440 	.word	0x40020440
 800cf48:	40020458 	.word	0x40020458
 800cf4c:	40020470 	.word	0x40020470
 800cf50:	40020488 	.word	0x40020488
 800cf54:	400204a0 	.word	0x400204a0
 800cf58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 80cf 	beq.w	800d11c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cf7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 80ca 	beq.w	800d11c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	e853 3f00 	ldrex	r3, [r3]
 800cf94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cfaa:	647b      	str	r3, [r7, #68]	; 0x44
 800cfac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e4      	bne.n	800cf88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	623b      	str	r3, [r7, #32]
   return(result);
 800cfce:	6a3a      	ldr	r2, [r7, #32]
 800cfd0:	4b55      	ldr	r3, [pc, #340]	; (800d128 <HAL_UART_IRQHandler+0x770>)
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cfe2:	633a      	str	r2, [r7, #48]	; 0x30
 800cfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfea:	e841 2300 	strex	r3, r2, [r1]
 800cfee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e3      	bne.n	800cfbe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2220      	movs	r2, #32
 800cffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	e853 3f00 	ldrex	r3, [r3]
 800d016:	60fb      	str	r3, [r7, #12]
   return(result);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0310 	bic.w	r3, r3, #16
 800d01e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d02c:	61fb      	str	r3, [r7, #28]
 800d02e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d030:	69b9      	ldr	r1, [r7, #24]
 800d032:	69fa      	ldr	r2, [r7, #28]
 800d034:	e841 2300 	strex	r3, r2, [r1]
 800d038:	617b      	str	r3, [r7, #20]
   return(result);
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1e4      	bne.n	800d00a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2202      	movs	r2, #2
 800d044:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f877 	bl	800d140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d052:	e063      	b.n	800d11c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00e      	beq.n	800d07e <HAL_UART_IRQHandler+0x6c6>
 800d060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d008      	beq.n	800d07e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 f837 	bl	800e0ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d07c:	e051      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d086:	2b00      	cmp	r3, #0
 800d088:	d014      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d09a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d008      	beq.n	800d0b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d03a      	beq.n	800d120 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	4798      	blx	r3
    }
    return;
 800d0b2:	e035      	b.n	800d120 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d009      	beq.n	800d0d4 <HAL_UART_IRQHandler+0x71c>
 800d0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d003      	beq.n	800d0d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 ffe1 	bl	800e094 <UART_EndTransmit_IT>
    return;
 800d0d2:	e026      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d009      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x73c>
 800d0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f001 f810 	bl	800e112 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0f2:	e016      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d010      	beq.n	800d122 <HAL_UART_IRQHandler+0x76a>
 800d100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d104:	2b00      	cmp	r3, #0
 800d106:	da0c      	bge.n	800d122 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fff8 	bl	800e0fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d10e:	e008      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
      return;
 800d110:	bf00      	nop
 800d112:	e006      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
    return;
 800d114:	bf00      	nop
 800d116:	e004      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
      return;
 800d118:	bf00      	nop
 800d11a:	e002      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
      return;
 800d11c:	bf00      	nop
 800d11e:	e000      	b.n	800d122 <HAL_UART_IRQHandler+0x76a>
    return;
 800d120:	bf00      	nop
  }
}
 800d122:	37e8      	adds	r7, #232	; 0xe8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	effffffe 	.word	0xeffffffe

0800d12c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d15c:	b092      	sub	sp, #72	; 0x48
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	431a      	orrs	r2, r3
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	431a      	orrs	r2, r3
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4bbe      	ldr	r3, [pc, #760]	; (800d480 <UART_SetConfig+0x328>)
 800d188:	4013      	ands	r3, r2
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d190:	430b      	orrs	r3, r1
 800d192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	430a      	orrs	r2, r1
 800d1a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4ab3      	ldr	r2, [pc, #716]	; (800d484 <UART_SetConfig+0x32c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d004      	beq.n	800d1c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689a      	ldr	r2, [r3, #8]
 800d1ca:	4baf      	ldr	r3, [pc, #700]	; (800d488 <UART_SetConfig+0x330>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	6812      	ldr	r2, [r2, #0]
 800d1d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1de:	f023 010f 	bic.w	r1, r3, #15
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4aa6      	ldr	r2, [pc, #664]	; (800d48c <UART_SetConfig+0x334>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d177      	bne.n	800d2e8 <UART_SetConfig+0x190>
 800d1f8:	4ba5      	ldr	r3, [pc, #660]	; (800d490 <UART_SetConfig+0x338>)
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d200:	2b28      	cmp	r3, #40	; 0x28
 800d202:	d86d      	bhi.n	800d2e0 <UART_SetConfig+0x188>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <UART_SetConfig+0xb4>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d2b1 	.word	0x0800d2b1
 800d210:	0800d2e1 	.word	0x0800d2e1
 800d214:	0800d2e1 	.word	0x0800d2e1
 800d218:	0800d2e1 	.word	0x0800d2e1
 800d21c:	0800d2e1 	.word	0x0800d2e1
 800d220:	0800d2e1 	.word	0x0800d2e1
 800d224:	0800d2e1 	.word	0x0800d2e1
 800d228:	0800d2e1 	.word	0x0800d2e1
 800d22c:	0800d2b9 	.word	0x0800d2b9
 800d230:	0800d2e1 	.word	0x0800d2e1
 800d234:	0800d2e1 	.word	0x0800d2e1
 800d238:	0800d2e1 	.word	0x0800d2e1
 800d23c:	0800d2e1 	.word	0x0800d2e1
 800d240:	0800d2e1 	.word	0x0800d2e1
 800d244:	0800d2e1 	.word	0x0800d2e1
 800d248:	0800d2e1 	.word	0x0800d2e1
 800d24c:	0800d2c1 	.word	0x0800d2c1
 800d250:	0800d2e1 	.word	0x0800d2e1
 800d254:	0800d2e1 	.word	0x0800d2e1
 800d258:	0800d2e1 	.word	0x0800d2e1
 800d25c:	0800d2e1 	.word	0x0800d2e1
 800d260:	0800d2e1 	.word	0x0800d2e1
 800d264:	0800d2e1 	.word	0x0800d2e1
 800d268:	0800d2e1 	.word	0x0800d2e1
 800d26c:	0800d2c9 	.word	0x0800d2c9
 800d270:	0800d2e1 	.word	0x0800d2e1
 800d274:	0800d2e1 	.word	0x0800d2e1
 800d278:	0800d2e1 	.word	0x0800d2e1
 800d27c:	0800d2e1 	.word	0x0800d2e1
 800d280:	0800d2e1 	.word	0x0800d2e1
 800d284:	0800d2e1 	.word	0x0800d2e1
 800d288:	0800d2e1 	.word	0x0800d2e1
 800d28c:	0800d2d1 	.word	0x0800d2d1
 800d290:	0800d2e1 	.word	0x0800d2e1
 800d294:	0800d2e1 	.word	0x0800d2e1
 800d298:	0800d2e1 	.word	0x0800d2e1
 800d29c:	0800d2e1 	.word	0x0800d2e1
 800d2a0:	0800d2e1 	.word	0x0800d2e1
 800d2a4:	0800d2e1 	.word	0x0800d2e1
 800d2a8:	0800d2e1 	.word	0x0800d2e1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e222      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e21e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e21a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e216      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e212      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e20e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e20a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a69      	ldr	r2, [pc, #420]	; (800d494 <UART_SetConfig+0x33c>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d130      	bne.n	800d354 <UART_SetConfig+0x1fc>
 800d2f2:	4b67      	ldr	r3, [pc, #412]	; (800d490 <UART_SetConfig+0x338>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d826      	bhi.n	800d34c <UART_SetConfig+0x1f4>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <UART_SetConfig+0x1ac>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d345 	.word	0x0800d345
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1ec      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e1e8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e1e4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e1e0      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d33c:	2320      	movs	r3, #32
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e1dc      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d344:	2340      	movs	r3, #64	; 0x40
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e1d8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d34c:	2380      	movs	r3, #128	; 0x80
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e1d4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a4f      	ldr	r2, [pc, #316]	; (800d498 <UART_SetConfig+0x340>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d130      	bne.n	800d3c0 <UART_SetConfig+0x268>
 800d35e:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <UART_SetConfig+0x338>)
 800d360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b05      	cmp	r3, #5
 800d368:	d826      	bhi.n	800d3b8 <UART_SetConfig+0x260>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <UART_SetConfig+0x218>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d389 	.word	0x0800d389
 800d374:	0800d391 	.word	0x0800d391
 800d378:	0800d399 	.word	0x0800d399
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e1b6      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e1b2      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e1ae      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e1aa      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e1a6      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e1a2      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e19e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a35      	ldr	r2, [pc, #212]	; (800d49c <UART_SetConfig+0x344>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d130      	bne.n	800d42c <UART_SetConfig+0x2d4>
 800d3ca:	4b31      	ldr	r3, [pc, #196]	; (800d490 <UART_SetConfig+0x338>)
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	2b05      	cmp	r3, #5
 800d3d4:	d826      	bhi.n	800d424 <UART_SetConfig+0x2cc>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <UART_SetConfig+0x284>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fd 	.word	0x0800d3fd
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d415 	.word	0x0800d415
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e180      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e17c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e178      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e174      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d414:	2320      	movs	r3, #32
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e170      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e16c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d424:	2380      	movs	r3, #128	; 0x80
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e168      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a1b      	ldr	r2, [pc, #108]	; (800d4a0 <UART_SetConfig+0x348>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d142      	bne.n	800d4bc <UART_SetConfig+0x364>
 800d436:	4b16      	ldr	r3, [pc, #88]	; (800d490 <UART_SetConfig+0x338>)
 800d438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d838      	bhi.n	800d4b4 <UART_SetConfig+0x35c>
 800d442:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <UART_SetConfig+0x2f0>)
 800d444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d448:	0800d461 	.word	0x0800d461
 800d44c:	0800d469 	.word	0x0800d469
 800d450:	0800d471 	.word	0x0800d471
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d4a5 	.word	0x0800d4a5
 800d45c:	0800d4ad 	.word	0x0800d4ad
 800d460:	2300      	movs	r3, #0
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e14a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e146      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e142      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e13e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d480:	cfff69f3 	.word	0xcfff69f3
 800d484:	58000c00 	.word	0x58000c00
 800d488:	11fff4ff 	.word	0x11fff4ff
 800d48c:	40011000 	.word	0x40011000
 800d490:	58024400 	.word	0x58024400
 800d494:	40004400 	.word	0x40004400
 800d498:	40004800 	.word	0x40004800
 800d49c:	40004c00 	.word	0x40004c00
 800d4a0:	40005000 	.word	0x40005000
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e128      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4ac:	2340      	movs	r3, #64	; 0x40
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e124      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4b4:	2380      	movs	r3, #128	; 0x80
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e120      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4acb      	ldr	r2, [pc, #812]	; (800d7f0 <UART_SetConfig+0x698>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d176      	bne.n	800d5b4 <UART_SetConfig+0x45c>
 800d4c6:	4bcb      	ldr	r3, [pc, #812]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4ce:	2b28      	cmp	r3, #40	; 0x28
 800d4d0:	d86c      	bhi.n	800d5ac <UART_SetConfig+0x454>
 800d4d2:	a201      	add	r2, pc, #4	; (adr r2, 800d4d8 <UART_SetConfig+0x380>)
 800d4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d8:	0800d57d 	.word	0x0800d57d
 800d4dc:	0800d5ad 	.word	0x0800d5ad
 800d4e0:	0800d5ad 	.word	0x0800d5ad
 800d4e4:	0800d5ad 	.word	0x0800d5ad
 800d4e8:	0800d5ad 	.word	0x0800d5ad
 800d4ec:	0800d5ad 	.word	0x0800d5ad
 800d4f0:	0800d5ad 	.word	0x0800d5ad
 800d4f4:	0800d5ad 	.word	0x0800d5ad
 800d4f8:	0800d585 	.word	0x0800d585
 800d4fc:	0800d5ad 	.word	0x0800d5ad
 800d500:	0800d5ad 	.word	0x0800d5ad
 800d504:	0800d5ad 	.word	0x0800d5ad
 800d508:	0800d5ad 	.word	0x0800d5ad
 800d50c:	0800d5ad 	.word	0x0800d5ad
 800d510:	0800d5ad 	.word	0x0800d5ad
 800d514:	0800d5ad 	.word	0x0800d5ad
 800d518:	0800d58d 	.word	0x0800d58d
 800d51c:	0800d5ad 	.word	0x0800d5ad
 800d520:	0800d5ad 	.word	0x0800d5ad
 800d524:	0800d5ad 	.word	0x0800d5ad
 800d528:	0800d5ad 	.word	0x0800d5ad
 800d52c:	0800d5ad 	.word	0x0800d5ad
 800d530:	0800d5ad 	.word	0x0800d5ad
 800d534:	0800d5ad 	.word	0x0800d5ad
 800d538:	0800d595 	.word	0x0800d595
 800d53c:	0800d5ad 	.word	0x0800d5ad
 800d540:	0800d5ad 	.word	0x0800d5ad
 800d544:	0800d5ad 	.word	0x0800d5ad
 800d548:	0800d5ad 	.word	0x0800d5ad
 800d54c:	0800d5ad 	.word	0x0800d5ad
 800d550:	0800d5ad 	.word	0x0800d5ad
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d59d 	.word	0x0800d59d
 800d55c:	0800d5ad 	.word	0x0800d5ad
 800d560:	0800d5ad 	.word	0x0800d5ad
 800d564:	0800d5ad 	.word	0x0800d5ad
 800d568:	0800d5ad 	.word	0x0800d5ad
 800d56c:	0800d5ad 	.word	0x0800d5ad
 800d570:	0800d5ad 	.word	0x0800d5ad
 800d574:	0800d5ad 	.word	0x0800d5ad
 800d578:	0800d5a5 	.word	0x0800d5a5
 800d57c:	2301      	movs	r3, #1
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e0bc      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d584:	2304      	movs	r3, #4
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e0b8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d58c:	2308      	movs	r3, #8
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e0b4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d594:	2310      	movs	r3, #16
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e0b0      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d59c:	2320      	movs	r3, #32
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e0ac      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5a4:	2340      	movs	r3, #64	; 0x40
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e0a8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5ac:	2380      	movs	r3, #128	; 0x80
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b2:	e0a4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a8f      	ldr	r2, [pc, #572]	; (800d7f8 <UART_SetConfig+0x6a0>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d130      	bne.n	800d620 <UART_SetConfig+0x4c8>
 800d5be:	4b8d      	ldr	r3, [pc, #564]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d826      	bhi.n	800d618 <UART_SetConfig+0x4c0>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <UART_SetConfig+0x478>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d5e9 	.word	0x0800d5e9
 800d5d4:	0800d5f1 	.word	0x0800d5f1
 800d5d8:	0800d5f9 	.word	0x0800d5f9
 800d5dc:	0800d601 	.word	0x0800d601
 800d5e0:	0800d609 	.word	0x0800d609
 800d5e4:	0800d611 	.word	0x0800d611
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e086      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5f0:	2304      	movs	r3, #4
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e082      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5f8:	2308      	movs	r3, #8
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e07e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d600:	2310      	movs	r3, #16
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e07a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d608:	2320      	movs	r3, #32
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e076      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e072      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d618:	2380      	movs	r3, #128	; 0x80
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e06e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a75      	ldr	r2, [pc, #468]	; (800d7fc <UART_SetConfig+0x6a4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d130      	bne.n	800d68c <UART_SetConfig+0x534>
 800d62a:	4b72      	ldr	r3, [pc, #456]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b05      	cmp	r3, #5
 800d634:	d826      	bhi.n	800d684 <UART_SetConfig+0x52c>
 800d636:	a201      	add	r2, pc, #4	; (adr r2, 800d63c <UART_SetConfig+0x4e4>)
 800d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63c:	0800d655 	.word	0x0800d655
 800d640:	0800d65d 	.word	0x0800d65d
 800d644:	0800d665 	.word	0x0800d665
 800d648:	0800d66d 	.word	0x0800d66d
 800d64c:	0800d675 	.word	0x0800d675
 800d650:	0800d67d 	.word	0x0800d67d
 800d654:	2300      	movs	r3, #0
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e050      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d65c:	2304      	movs	r3, #4
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e04c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d664:	2308      	movs	r3, #8
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e048      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d66c:	2310      	movs	r3, #16
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e044      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d674:	2320      	movs	r3, #32
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e040      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d67c:	2340      	movs	r3, #64	; 0x40
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e03c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d684:	2380      	movs	r3, #128	; 0x80
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e038      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a5b      	ldr	r2, [pc, #364]	; (800d800 <UART_SetConfig+0x6a8>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d130      	bne.n	800d6f8 <UART_SetConfig+0x5a0>
 800d696:	4b57      	ldr	r3, [pc, #348]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	2b05      	cmp	r3, #5
 800d6a0:	d826      	bhi.n	800d6f0 <UART_SetConfig+0x598>
 800d6a2:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <UART_SetConfig+0x550>)
 800d6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a8:	0800d6c1 	.word	0x0800d6c1
 800d6ac:	0800d6c9 	.word	0x0800d6c9
 800d6b0:	0800d6d1 	.word	0x0800d6d1
 800d6b4:	0800d6d9 	.word	0x0800d6d9
 800d6b8:	0800d6e1 	.word	0x0800d6e1
 800d6bc:	0800d6e9 	.word	0x0800d6e9
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e01a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e016      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6d0:	2308      	movs	r3, #8
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e012      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6d8:	2310      	movs	r3, #16
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e00e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6e0:	2320      	movs	r3, #32
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e00a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6e8:	2340      	movs	r3, #64	; 0x40
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e006      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6f0:	2380      	movs	r3, #128	; 0x80
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e002      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a3f      	ldr	r2, [pc, #252]	; (800d800 <UART_SetConfig+0x6a8>)
 800d704:	4293      	cmp	r3, r2
 800d706:	f040 80f8 	bne.w	800d8fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d70a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d70e:	2b20      	cmp	r3, #32
 800d710:	dc46      	bgt.n	800d7a0 <UART_SetConfig+0x648>
 800d712:	2b02      	cmp	r3, #2
 800d714:	f2c0 8082 	blt.w	800d81c <UART_SetConfig+0x6c4>
 800d718:	3b02      	subs	r3, #2
 800d71a:	2b1e      	cmp	r3, #30
 800d71c:	d87e      	bhi.n	800d81c <UART_SetConfig+0x6c4>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <UART_SetConfig+0x5cc>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d7a7 	.word	0x0800d7a7
 800d728:	0800d81d 	.word	0x0800d81d
 800d72c:	0800d7af 	.word	0x0800d7af
 800d730:	0800d81d 	.word	0x0800d81d
 800d734:	0800d81d 	.word	0x0800d81d
 800d738:	0800d81d 	.word	0x0800d81d
 800d73c:	0800d7bf 	.word	0x0800d7bf
 800d740:	0800d81d 	.word	0x0800d81d
 800d744:	0800d81d 	.word	0x0800d81d
 800d748:	0800d81d 	.word	0x0800d81d
 800d74c:	0800d81d 	.word	0x0800d81d
 800d750:	0800d81d 	.word	0x0800d81d
 800d754:	0800d81d 	.word	0x0800d81d
 800d758:	0800d81d 	.word	0x0800d81d
 800d75c:	0800d7cf 	.word	0x0800d7cf
 800d760:	0800d81d 	.word	0x0800d81d
 800d764:	0800d81d 	.word	0x0800d81d
 800d768:	0800d81d 	.word	0x0800d81d
 800d76c:	0800d81d 	.word	0x0800d81d
 800d770:	0800d81d 	.word	0x0800d81d
 800d774:	0800d81d 	.word	0x0800d81d
 800d778:	0800d81d 	.word	0x0800d81d
 800d77c:	0800d81d 	.word	0x0800d81d
 800d780:	0800d81d 	.word	0x0800d81d
 800d784:	0800d81d 	.word	0x0800d81d
 800d788:	0800d81d 	.word	0x0800d81d
 800d78c:	0800d81d 	.word	0x0800d81d
 800d790:	0800d81d 	.word	0x0800d81d
 800d794:	0800d81d 	.word	0x0800d81d
 800d798:	0800d81d 	.word	0x0800d81d
 800d79c:	0800d80f 	.word	0x0800d80f
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	d037      	beq.n	800d814 <UART_SetConfig+0x6bc>
 800d7a4:	e03a      	b.n	800d81c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d7a6:	f7fc fe01 	bl	800a3ac <HAL_RCCEx_GetD3PCLK1Freq>
 800d7aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d7ac:	e03c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fc fe10 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7bc:	e034      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7be:	f107 0318 	add.w	r3, r7, #24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fc ff5c 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7cc:	e02c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7ce:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0320 	and.w	r3, r3, #32
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d016      	beq.n	800d808 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7da:	4b06      	ldr	r3, [pc, #24]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	08db      	lsrs	r3, r3, #3
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	4a07      	ldr	r2, [pc, #28]	; (800d804 <UART_SetConfig+0x6ac>)
 800d7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7ec:	e01c      	b.n	800d828 <UART_SetConfig+0x6d0>
 800d7ee:	bf00      	nop
 800d7f0:	40011400 	.word	0x40011400
 800d7f4:	58024400 	.word	0x58024400
 800d7f8:	40007800 	.word	0x40007800
 800d7fc:	40007c00 	.word	0x40007c00
 800d800:	58000c00 	.word	0x58000c00
 800d804:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d808:	4b9d      	ldr	r3, [pc, #628]	; (800da80 <UART_SetConfig+0x928>)
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d80c:	e00c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d80e:	4b9d      	ldr	r3, [pc, #628]	; (800da84 <UART_SetConfig+0x92c>)
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d812:	e009      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d81a:	e005      	b.n	800d828 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d826:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 81de 	beq.w	800dbec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	4a94      	ldr	r2, [pc, #592]	; (800da88 <UART_SetConfig+0x930>)
 800d836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d842:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	4613      	mov	r3, r2
 800d84a:	005b      	lsls	r3, r3, #1
 800d84c:	4413      	add	r3, r2
 800d84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d850:	429a      	cmp	r2, r3
 800d852:	d305      	bcc.n	800d860 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d903      	bls.n	800d868 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d866:	e1c1      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86a:	2200      	movs	r2, #0
 800d86c:	60bb      	str	r3, [r7, #8]
 800d86e:	60fa      	str	r2, [r7, #12]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	4a84      	ldr	r2, [pc, #528]	; (800da88 <UART_SetConfig+0x930>)
 800d876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	2200      	movs	r2, #0
 800d87e:	603b      	str	r3, [r7, #0]
 800d880:	607a      	str	r2, [r7, #4]
 800d882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d88a:	f7f2 fd29 	bl	80002e0 <__aeabi_uldivmod>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4610      	mov	r0, r2
 800d894:	4619      	mov	r1, r3
 800d896:	f04f 0200 	mov.w	r2, #0
 800d89a:	f04f 0300 	mov.w	r3, #0
 800d89e:	020b      	lsls	r3, r1, #8
 800d8a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8a4:	0202      	lsls	r2, r0, #8
 800d8a6:	6979      	ldr	r1, [r7, #20]
 800d8a8:	6849      	ldr	r1, [r1, #4]
 800d8aa:	0849      	lsrs	r1, r1, #1
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	eb12 0804 	adds.w	r8, r2, r4
 800d8b6:	eb43 0905 	adc.w	r9, r3, r5
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	469a      	mov	sl, r3
 800d8c2:	4693      	mov	fp, r2
 800d8c4:	4652      	mov	r2, sl
 800d8c6:	465b      	mov	r3, fp
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	4649      	mov	r1, r9
 800d8cc:	f7f2 fd08 	bl	80002e0 <__aeabi_uldivmod>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8de:	d308      	bcc.n	800d8f2 <UART_SetConfig+0x79a>
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8e6:	d204      	bcs.n	800d8f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ee:	60da      	str	r2, [r3, #12]
 800d8f0:	e17c      	b.n	800dbec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8f8:	e178      	b.n	800dbec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d902:	f040 80c5 	bne.w	800da90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d906:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	dc48      	bgt.n	800d9a0 <UART_SetConfig+0x848>
 800d90e:	2b00      	cmp	r3, #0
 800d910:	db7b      	blt.n	800da0a <UART_SetConfig+0x8b2>
 800d912:	2b20      	cmp	r3, #32
 800d914:	d879      	bhi.n	800da0a <UART_SetConfig+0x8b2>
 800d916:	a201      	add	r2, pc, #4	; (adr r2, 800d91c <UART_SetConfig+0x7c4>)
 800d918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800d9af 	.word	0x0800d9af
 800d924:	0800da0b 	.word	0x0800da0b
 800d928:	0800da0b 	.word	0x0800da0b
 800d92c:	0800d9b7 	.word	0x0800d9b7
 800d930:	0800da0b 	.word	0x0800da0b
 800d934:	0800da0b 	.word	0x0800da0b
 800d938:	0800da0b 	.word	0x0800da0b
 800d93c:	0800d9c7 	.word	0x0800d9c7
 800d940:	0800da0b 	.word	0x0800da0b
 800d944:	0800da0b 	.word	0x0800da0b
 800d948:	0800da0b 	.word	0x0800da0b
 800d94c:	0800da0b 	.word	0x0800da0b
 800d950:	0800da0b 	.word	0x0800da0b
 800d954:	0800da0b 	.word	0x0800da0b
 800d958:	0800da0b 	.word	0x0800da0b
 800d95c:	0800d9d7 	.word	0x0800d9d7
 800d960:	0800da0b 	.word	0x0800da0b
 800d964:	0800da0b 	.word	0x0800da0b
 800d968:	0800da0b 	.word	0x0800da0b
 800d96c:	0800da0b 	.word	0x0800da0b
 800d970:	0800da0b 	.word	0x0800da0b
 800d974:	0800da0b 	.word	0x0800da0b
 800d978:	0800da0b 	.word	0x0800da0b
 800d97c:	0800da0b 	.word	0x0800da0b
 800d980:	0800da0b 	.word	0x0800da0b
 800d984:	0800da0b 	.word	0x0800da0b
 800d988:	0800da0b 	.word	0x0800da0b
 800d98c:	0800da0b 	.word	0x0800da0b
 800d990:	0800da0b 	.word	0x0800da0b
 800d994:	0800da0b 	.word	0x0800da0b
 800d998:	0800da0b 	.word	0x0800da0b
 800d99c:	0800d9fd 	.word	0x0800d9fd
 800d9a0:	2b40      	cmp	r3, #64	; 0x40
 800d9a2:	d02e      	beq.n	800da02 <UART_SetConfig+0x8aa>
 800d9a4:	e031      	b.n	800da0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9a6:	f7fa fd09 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 800d9aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9ac:	e033      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9ae:	f7fa fd1b 	bl	80083e8 <HAL_RCC_GetPCLK2Freq>
 800d9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9b4:	e02f      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fc fd0c 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9c4:	e027      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9c6:	f107 0318 	add.w	r3, r7, #24
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fc fe58 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9d4:	e01f      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9d6:	4b2d      	ldr	r3, [pc, #180]	; (800da8c <UART_SetConfig+0x934>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d009      	beq.n	800d9f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9e2:	4b2a      	ldr	r3, [pc, #168]	; (800da8c <UART_SetConfig+0x934>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	08db      	lsrs	r3, r3, #3
 800d9e8:	f003 0303 	and.w	r3, r3, #3
 800d9ec:	4a24      	ldr	r2, [pc, #144]	; (800da80 <UART_SetConfig+0x928>)
 800d9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9f4:	e00f      	b.n	800da16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d9f6:	4b22      	ldr	r3, [pc, #136]	; (800da80 <UART_SetConfig+0x928>)
 800d9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9fa:	e00c      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9fc:	4b21      	ldr	r3, [pc, #132]	; (800da84 <UART_SetConfig+0x92c>)
 800d9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da00:	e009      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da08:	e005      	b.n	800da16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da0a:	2300      	movs	r3, #0
 800da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80e7 	beq.w	800dbec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	4a19      	ldr	r2, [pc, #100]	; (800da88 <UART_SetConfig+0x930>)
 800da24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da28:	461a      	mov	r2, r3
 800da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da30:	005a      	lsls	r2, r3, #1
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	085b      	lsrs	r3, r3, #1
 800da38:	441a      	add	r2, r3
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da46:	2b0f      	cmp	r3, #15
 800da48:	d916      	bls.n	800da78 <UART_SetConfig+0x920>
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da50:	d212      	bcs.n	800da78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	b29b      	uxth	r3, r3
 800da56:	f023 030f 	bic.w	r3, r3, #15
 800da5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	085b      	lsrs	r3, r3, #1
 800da60:	b29b      	uxth	r3, r3
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	b29a      	uxth	r2, r3
 800da68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da6a:	4313      	orrs	r3, r2
 800da6c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da74:	60da      	str	r2, [r3, #12]
 800da76:	e0b9      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da7e:	e0b5      	b.n	800dbec <UART_SetConfig+0xa94>
 800da80:	03d09000 	.word	0x03d09000
 800da84:	003d0900 	.word	0x003d0900
 800da88:	080123e8 	.word	0x080123e8
 800da8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da94:	2b20      	cmp	r3, #32
 800da96:	dc49      	bgt.n	800db2c <UART_SetConfig+0x9d4>
 800da98:	2b00      	cmp	r3, #0
 800da9a:	db7c      	blt.n	800db96 <UART_SetConfig+0xa3e>
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d87a      	bhi.n	800db96 <UART_SetConfig+0xa3e>
 800daa0:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <UART_SetConfig+0x950>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800db33 	.word	0x0800db33
 800daac:	0800db3b 	.word	0x0800db3b
 800dab0:	0800db97 	.word	0x0800db97
 800dab4:	0800db97 	.word	0x0800db97
 800dab8:	0800db43 	.word	0x0800db43
 800dabc:	0800db97 	.word	0x0800db97
 800dac0:	0800db97 	.word	0x0800db97
 800dac4:	0800db97 	.word	0x0800db97
 800dac8:	0800db53 	.word	0x0800db53
 800dacc:	0800db97 	.word	0x0800db97
 800dad0:	0800db97 	.word	0x0800db97
 800dad4:	0800db97 	.word	0x0800db97
 800dad8:	0800db97 	.word	0x0800db97
 800dadc:	0800db97 	.word	0x0800db97
 800dae0:	0800db97 	.word	0x0800db97
 800dae4:	0800db97 	.word	0x0800db97
 800dae8:	0800db63 	.word	0x0800db63
 800daec:	0800db97 	.word	0x0800db97
 800daf0:	0800db97 	.word	0x0800db97
 800daf4:	0800db97 	.word	0x0800db97
 800daf8:	0800db97 	.word	0x0800db97
 800dafc:	0800db97 	.word	0x0800db97
 800db00:	0800db97 	.word	0x0800db97
 800db04:	0800db97 	.word	0x0800db97
 800db08:	0800db97 	.word	0x0800db97
 800db0c:	0800db97 	.word	0x0800db97
 800db10:	0800db97 	.word	0x0800db97
 800db14:	0800db97 	.word	0x0800db97
 800db18:	0800db97 	.word	0x0800db97
 800db1c:	0800db97 	.word	0x0800db97
 800db20:	0800db97 	.word	0x0800db97
 800db24:	0800db97 	.word	0x0800db97
 800db28:	0800db89 	.word	0x0800db89
 800db2c:	2b40      	cmp	r3, #64	; 0x40
 800db2e:	d02e      	beq.n	800db8e <UART_SetConfig+0xa36>
 800db30:	e031      	b.n	800db96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db32:	f7fa fc43 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 800db36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db38:	e033      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db3a:	f7fa fc55 	bl	80083e8 <HAL_RCC_GetPCLK2Freq>
 800db3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db40:	e02f      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f7fc fc46 	bl	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db50:	e027      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db52:	f107 0318 	add.w	r3, r7, #24
 800db56:	4618      	mov	r0, r3
 800db58:	f7fc fd92 	bl	800a680 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db60:	e01f      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db62:	4b2d      	ldr	r3, [pc, #180]	; (800dc18 <UART_SetConfig+0xac0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0320 	and.w	r3, r3, #32
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d009      	beq.n	800db82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db6e:	4b2a      	ldr	r3, [pc, #168]	; (800dc18 <UART_SetConfig+0xac0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	08db      	lsrs	r3, r3, #3
 800db74:	f003 0303 	and.w	r3, r3, #3
 800db78:	4a28      	ldr	r2, [pc, #160]	; (800dc1c <UART_SetConfig+0xac4>)
 800db7a:	fa22 f303 	lsr.w	r3, r2, r3
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db80:	e00f      	b.n	800dba2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db82:	4b26      	ldr	r3, [pc, #152]	; (800dc1c <UART_SetConfig+0xac4>)
 800db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db86:	e00c      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db88:	4b25      	ldr	r3, [pc, #148]	; (800dc20 <UART_SetConfig+0xac8>)
 800db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db8c:	e009      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db94:	e005      	b.n	800dba2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db96:	2300      	movs	r3, #0
 800db98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dba0:	bf00      	nop
    }

    if (pclk != 0U)
 800dba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d021      	beq.n	800dbec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	4a1d      	ldr	r2, [pc, #116]	; (800dc24 <UART_SetConfig+0xacc>)
 800dbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	085b      	lsrs	r3, r3, #1
 800dbc0:	441a      	add	r2, r3
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	2b0f      	cmp	r3, #15
 800dbd0:	d909      	bls.n	800dbe6 <UART_SetConfig+0xa8e>
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd8:	d205      	bcs.n	800dbe6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	60da      	str	r2, [r3, #12]
 800dbe4:	e002      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2200      	movs	r2, #0
 800dc06:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dc08:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3748      	adds	r7, #72	; 0x48
 800dc10:	46bd      	mov	sp, r7
 800dc12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc16:	bf00      	nop
 800dc18:	58024400 	.word	0x58024400
 800dc1c:	03d09000 	.word	0x03d09000
 800dc20:	003d0900 	.word	0x003d0900
 800dc24:	080123e8 	.word	0x080123e8

0800dc28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	f003 0308 	and.w	r3, r3, #8
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00a      	beq.n	800dc52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00a      	beq.n	800dcb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00a      	beq.n	800dcda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcde:	f003 0320 	and.w	r3, r3, #32
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00a      	beq.n	800dcfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d01a      	beq.n	800dd3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd26:	d10a      	bne.n	800dd3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	430a      	orrs	r2, r1
 800dd3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	430a      	orrs	r2, r1
 800dd5e:	605a      	str	r2, [r3, #4]
  }
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b098      	sub	sp, #96	; 0x60
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd7c:	f7f4 fdb8 	bl	80028f0 <HAL_GetTick>
 800dd80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0308 	and.w	r3, r3, #8
 800dd8c:	2b08      	cmp	r3, #8
 800dd8e:	d12f      	bne.n	800ddf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f88e 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d022      	beq.n	800ddf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	e853 3f00 	ldrex	r3, [r3]
 800ddb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddbe:	653b      	str	r3, [r7, #80]	; 0x50
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc8:	647b      	str	r3, [r7, #68]	; 0x44
 800ddca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ddce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddd0:	e841 2300 	strex	r3, r2, [r1]
 800ddd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1e6      	bne.n	800ddaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2220      	movs	r2, #32
 800dde0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e063      	b.n	800deb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f003 0304 	and.w	r3, r3, #4
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d149      	bne.n	800de92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de06:	2200      	movs	r2, #0
 800de08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f857 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d03c      	beq.n	800de92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	e853 3f00 	ldrex	r3, [r3]
 800de24:	623b      	str	r3, [r7, #32]
   return(result);
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	461a      	mov	r2, r3
 800de34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de36:	633b      	str	r3, [r7, #48]	; 0x30
 800de38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de3e:	e841 2300 	strex	r3, r2, [r1]
 800de42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1e6      	bne.n	800de18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3308      	adds	r3, #8
 800de50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	e853 3f00 	ldrex	r3, [r3]
 800de58:	60fb      	str	r3, [r7, #12]
   return(result);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f023 0301 	bic.w	r3, r3, #1
 800de60:	64bb      	str	r3, [r7, #72]	; 0x48
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3308      	adds	r3, #8
 800de68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de6a:	61fa      	str	r2, [r7, #28]
 800de6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6e:	69b9      	ldr	r1, [r7, #24]
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	e841 2300 	strex	r3, r2, [r1]
 800de76:	617b      	str	r3, [r7, #20]
   return(result);
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1e5      	bne.n	800de4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2220      	movs	r2, #32
 800de82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	e012      	b.n	800deb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2220      	movs	r2, #32
 800de96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2220      	movs	r2, #32
 800de9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3758      	adds	r7, #88	; 0x58
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	4613      	mov	r3, r2
 800dece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ded0:	e04f      	b.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ded8:	d04b      	beq.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deda:	f7f4 fd09 	bl	80028f0 <HAL_GetTick>
 800dede:	4602      	mov	r2, r0
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d302      	bcc.n	800def0 <UART_WaitOnFlagUntilTimeout+0x30>
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800def0:	2303      	movs	r3, #3
 800def2:	e04e      	b.n	800df92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0304 	and.w	r3, r3, #4
 800defe:	2b00      	cmp	r3, #0
 800df00:	d037      	beq.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b80      	cmp	r3, #128	; 0x80
 800df06:	d034      	beq.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b40      	cmp	r3, #64	; 0x40
 800df0c:	d031      	beq.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	f003 0308 	and.w	r3, r3, #8
 800df18:	2b08      	cmp	r3, #8
 800df1a:	d110      	bne.n	800df3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2208      	movs	r2, #8
 800df22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 f839 	bl	800df9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2208      	movs	r2, #8
 800df2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e029      	b.n	800df92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df4c:	d111      	bne.n	800df72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 f81f 	bl	800df9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2220      	movs	r2, #32
 800df62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800df6e:	2303      	movs	r3, #3
 800df70:	e00f      	b.n	800df92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	69da      	ldr	r2, [r3, #28]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	4013      	ands	r3, r2
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	429a      	cmp	r2, r3
 800df80:	bf0c      	ite	eq
 800df82:	2301      	moveq	r3, #1
 800df84:	2300      	movne	r3, #0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	461a      	mov	r2, r3
 800df8a:	79fb      	ldrb	r3, [r7, #7]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d0a0      	beq.n	800ded2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b095      	sub	sp, #84	; 0x54
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfac:	e853 3f00 	ldrex	r3, [r3]
 800dfb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc2:	643b      	str	r3, [r7, #64]	; 0x40
 800dfc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfca:	e841 2300 	strex	r3, r2, [r1]
 800dfce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1e6      	bne.n	800dfa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3308      	adds	r3, #8
 800dfdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	e853 3f00 	ldrex	r3, [r3]
 800dfe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfe6:	69fa      	ldr	r2, [r7, #28]
 800dfe8:	4b1e      	ldr	r3, [pc, #120]	; (800e064 <UART_EndRxTransfer+0xc8>)
 800dfea:	4013      	ands	r3, r2
 800dfec:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3308      	adds	r3, #8
 800dff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dffe:	e841 2300 	strex	r3, r2, [r1]
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1e5      	bne.n	800dfd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d118      	bne.n	800e044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	e853 3f00 	ldrex	r3, [r3]
 800e01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	f023 0310 	bic.w	r3, r3, #16
 800e026:	647b      	str	r3, [r7, #68]	; 0x44
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	461a      	mov	r2, r3
 800e02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e030:	61bb      	str	r3, [r7, #24]
 800e032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e034:	6979      	ldr	r1, [r7, #20]
 800e036:	69ba      	ldr	r2, [r7, #24]
 800e038:	e841 2300 	strex	r3, r2, [r1]
 800e03c:	613b      	str	r3, [r7, #16]
   return(result);
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e6      	bne.n	800e012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e058:	bf00      	nop
 800e05a:	3754      	adds	r7, #84	; 0x54
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	effffffe 	.word	0xeffffffe

0800e068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff f850 	bl	800d12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e08c:	bf00      	nop
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b088      	sub	sp, #32
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	e853 3f00 	ldrex	r3, [r3]
 800e0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0b0:	61fb      	str	r3, [r7, #28]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	61bb      	str	r3, [r7, #24]
 800e0bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0be:	6979      	ldr	r1, [r7, #20]
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	e841 2300 	strex	r3, r2, [r1]
 800e0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1e6      	bne.n	800e09c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2220      	movs	r2, #32
 800e0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7f3 f9ff 	bl	80014e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0e2:	bf00      	nop
 800e0e4:	3720      	adds	r7, #32
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0ea:	b480      	push	{r7}
 800e0ec:	b083      	sub	sp, #12
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0f2:	bf00      	nop
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0fe:	b480      	push	{r7}
 800e100:	b083      	sub	sp, #12
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e106:	bf00      	nop
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e112:	b480      	push	{r7}
 800e114:	b083      	sub	sp, #12
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e11a:	bf00      	nop
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e126:	b480      	push	{r7}
 800e128:	b085      	sub	sp, #20
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e134:	2b01      	cmp	r3, #1
 800e136:	d101      	bne.n	800e13c <HAL_UARTEx_DisableFifoMode+0x16>
 800e138:	2302      	movs	r3, #2
 800e13a:	e027      	b.n	800e18c <HAL_UARTEx_DisableFifoMode+0x66>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2224      	movs	r2, #36	; 0x24
 800e148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f022 0201 	bic.w	r2, r2, #1
 800e162:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e16a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2220      	movs	r2, #32
 800e17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d101      	bne.n	800e1b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	e02d      	b.n	800e20c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2224      	movs	r2, #36	; 0x24
 800e1bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f022 0201 	bic.w	r2, r2, #1
 800e1d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f84f 	bl	800e290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e224:	2b01      	cmp	r3, #1
 800e226:	d101      	bne.n	800e22c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e228:	2302      	movs	r3, #2
 800e22a:	e02d      	b.n	800e288 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2224      	movs	r2, #36	; 0x24
 800e238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f022 0201 	bic.w	r2, r2, #1
 800e252:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	430a      	orrs	r2, r1
 800e266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f811 	bl	800e290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2220      	movs	r2, #32
 800e27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d108      	bne.n	800e2b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e2b0:	e031      	b.n	800e316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e2b2:	2310      	movs	r3, #16
 800e2b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e2b6:	2310      	movs	r3, #16
 800e2b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	0e5b      	lsrs	r3, r3, #25
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 0307 	and.w	r3, r3, #7
 800e2c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	0f5b      	lsrs	r3, r3, #29
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f003 0307 	and.w	r3, r3, #7
 800e2d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	7b3a      	ldrb	r2, [r7, #12]
 800e2de:	4911      	ldr	r1, [pc, #68]	; (800e324 <UARTEx_SetNbDataToProcess+0x94>)
 800e2e0:	5c8a      	ldrb	r2, [r1, r2]
 800e2e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e2e6:	7b3a      	ldrb	r2, [r7, #12]
 800e2e8:	490f      	ldr	r1, [pc, #60]	; (800e328 <UARTEx_SetNbDataToProcess+0x98>)
 800e2ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	7b7a      	ldrb	r2, [r7, #13]
 800e2fc:	4909      	ldr	r1, [pc, #36]	; (800e324 <UARTEx_SetNbDataToProcess+0x94>)
 800e2fe:	5c8a      	ldrb	r2, [r1, r2]
 800e300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e304:	7b7a      	ldrb	r2, [r7, #13]
 800e306:	4908      	ldr	r1, [pc, #32]	; (800e328 <UARTEx_SetNbDataToProcess+0x98>)
 800e308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e30a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e316:	bf00      	nop
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	08012400 	.word	0x08012400
 800e328:	08012408 	.word	0x08012408

0800e32c <__NVIC_SetPriority>:
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	4603      	mov	r3, r0
 800e334:	6039      	str	r1, [r7, #0]
 800e336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	db0a      	blt.n	800e356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	b2da      	uxtb	r2, r3
 800e344:	490c      	ldr	r1, [pc, #48]	; (800e378 <__NVIC_SetPriority+0x4c>)
 800e346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e34a:	0112      	lsls	r2, r2, #4
 800e34c:	b2d2      	uxtb	r2, r2
 800e34e:	440b      	add	r3, r1
 800e350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e354:	e00a      	b.n	800e36c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	4908      	ldr	r1, [pc, #32]	; (800e37c <__NVIC_SetPriority+0x50>)
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	f003 030f 	and.w	r3, r3, #15
 800e362:	3b04      	subs	r3, #4
 800e364:	0112      	lsls	r2, r2, #4
 800e366:	b2d2      	uxtb	r2, r2
 800e368:	440b      	add	r3, r1
 800e36a:	761a      	strb	r2, [r3, #24]
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	e000e100 	.word	0xe000e100
 800e37c:	e000ed00 	.word	0xe000ed00

0800e380 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e384:	4b05      	ldr	r3, [pc, #20]	; (800e39c <SysTick_Handler+0x1c>)
 800e386:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e388:	f002 f84a 	bl	8010420 <xTaskGetSchedulerState>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d001      	beq.n	800e396 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e392:	f002 fe69 	bl	8011068 <xPortSysTickHandler>
  }
}
 800e396:	bf00      	nop
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	e000e010 	.word	0xe000e010

0800e3a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	f06f 0004 	mvn.w	r0, #4
 800e3aa:	f7ff ffbf 	bl	800e32c <__NVIC_SetPriority>
#endif
}
 800e3ae:	bf00      	nop
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3ba:	f3ef 8305 	mrs	r3, IPSR
 800e3be:	603b      	str	r3, [r7, #0]
  return(result);
 800e3c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e3c6:	f06f 0305 	mvn.w	r3, #5
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	e00c      	b.n	800e3e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <osKernelInitialize+0x44>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d105      	bne.n	800e3e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e3d6:	4b08      	ldr	r3, [pc, #32]	; (800e3f8 <osKernelInitialize+0x44>)
 800e3d8:	2201      	movs	r2, #1
 800e3da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	607b      	str	r3, [r7, #4]
 800e3e0:	e002      	b.n	800e3e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e3e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e3e8:	687b      	ldr	r3, [r7, #4]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	240007d0 	.word	0x240007d0

0800e3fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e402:	f3ef 8305 	mrs	r3, IPSR
 800e406:	603b      	str	r3, [r7, #0]
  return(result);
 800e408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e40e:	f06f 0305 	mvn.w	r3, #5
 800e412:	607b      	str	r3, [r7, #4]
 800e414:	e010      	b.n	800e438 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e416:	4b0b      	ldr	r3, [pc, #44]	; (800e444 <osKernelStart+0x48>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d109      	bne.n	800e432 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e41e:	f7ff ffbf 	bl	800e3a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e422:	4b08      	ldr	r3, [pc, #32]	; (800e444 <osKernelStart+0x48>)
 800e424:	2202      	movs	r2, #2
 800e426:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e428:	f001 fb0c 	bl	800fa44 <vTaskStartScheduler>
      stat = osOK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	607b      	str	r3, [r7, #4]
 800e430:	e002      	b.n	800e438 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e438:	687b      	ldr	r3, [r7, #4]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	240007d0 	.word	0x240007d0

0800e448 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08e      	sub	sp, #56	; 0x38
 800e44c:	af04      	add	r7, sp, #16
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e458:	f3ef 8305 	mrs	r3, IPSR
 800e45c:	617b      	str	r3, [r7, #20]
  return(result);
 800e45e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e460:	2b00      	cmp	r3, #0
 800e462:	d17e      	bne.n	800e562 <osThreadNew+0x11a>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d07b      	beq.n	800e562 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e46a:	2380      	movs	r3, #128	; 0x80
 800e46c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e46e:	2318      	movs	r3, #24
 800e470:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e47a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d045      	beq.n	800e50e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <osThreadNew+0x48>
        name = attr->name;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d008      	beq.n	800e4b6 <osThreadNew+0x6e>
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	2b38      	cmp	r3, #56	; 0x38
 800e4a8:	d805      	bhi.n	800e4b6 <osThreadNew+0x6e>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	f003 0301 	and.w	r3, r3, #1
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <osThreadNew+0x72>
        return (NULL);
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e054      	b.n	800e564 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d003      	beq.n	800e4ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	089b      	lsrs	r3, r3, #2
 800e4c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00e      	beq.n	800e4f0 <osThreadNew+0xa8>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	2b5b      	cmp	r3, #91	; 0x5b
 800e4d8:	d90a      	bls.n	800e4f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d006      	beq.n	800e4f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d002      	beq.n	800e4f0 <osThreadNew+0xa8>
        mem = 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	61bb      	str	r3, [r7, #24]
 800e4ee:	e010      	b.n	800e512 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10c      	bne.n	800e512 <osThreadNew+0xca>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d108      	bne.n	800e512 <osThreadNew+0xca>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <osThreadNew+0xca>
          mem = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	61bb      	str	r3, [r7, #24]
 800e50c:	e001      	b.n	800e512 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d110      	bne.n	800e53a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e520:	9202      	str	r2, [sp, #8]
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6a3a      	ldr	r2, [r7, #32]
 800e52c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f001 f8b2 	bl	800f698 <xTaskCreateStatic>
 800e534:	4603      	mov	r3, r0
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	e013      	b.n	800e562 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d110      	bne.n	800e562 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	b29a      	uxth	r2, r3
 800e544:	f107 0310 	add.w	r3, r7, #16
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f001 f8fd 	bl	800f752 <xTaskCreate>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d001      	beq.n	800e562 <osThreadNew+0x11a>
            hTask = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e562:	693b      	ldr	r3, [r7, #16]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3728      	adds	r7, #40	; 0x28
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e574:	f3ef 8305 	mrs	r3, IPSR
 800e578:	60bb      	str	r3, [r7, #8]
  return(result);
 800e57a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d003      	beq.n	800e588 <osDelay+0x1c>
    stat = osErrorISR;
 800e580:	f06f 0305 	mvn.w	r3, #5
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	e007      	b.n	800e598 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e588:	2300      	movs	r3, #0
 800e58a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d002      	beq.n	800e598 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f001 fa22 	bl	800f9dc <vTaskDelay>
    }
  }

  return (stat);
 800e598:	68fb      	ldr	r3, [r7, #12]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
	...

0800e5a4 <osEventFlagsSet>:
  }

  return ((osEventFlagsId_t)hEventGroup);
}

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <osEventFlagsSet+0x1e>
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d003      	beq.n	800e5ca <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800e5c2:	f06f 0303 	mvn.w	r3, #3
 800e5c6:	617b      	str	r3, [r7, #20]
 800e5c8:	e028      	b.n	800e61c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5ca:	f3ef 8305 	mrs	r3, IPSR
 800e5ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d01d      	beq.n	800e612 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800e5da:	f107 0308 	add.w	r3, r7, #8
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6938      	ldr	r0, [r7, #16]
 800e5e4:	f000 faa4 	bl	800eb30 <xEventGroupSetBitsFromISR>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d103      	bne.n	800e5f6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800e5ee:	f06f 0302 	mvn.w	r3, #2
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e012      	b.n	800e61c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00d      	beq.n	800e61c <osEventFlagsSet+0x78>
 800e600:	4b09      	ldr	r3, [pc, #36]	; (800e628 <osEventFlagsSet+0x84>)
 800e602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e606:	601a      	str	r2, [r3, #0]
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	e004      	b.n	800e61c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6938      	ldr	r0, [r7, #16]
 800e616:	f000 f9d1 	bl	800e9bc <xEventGroupSetBits>
 800e61a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e61c:	697b      	ldr	r3, [r7, #20]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	e000ed04 	.word	0xe000ed04

0800e62c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08c      	sub	sp, #48	; 0x30
 800e630:	af02      	add	r7, sp, #8
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d004      	beq.n	800e64e <osEventFlagsWait+0x22>
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800e64e:	f06f 0303 	mvn.w	r3, #3
 800e652:	61fb      	str	r3, [r7, #28]
 800e654:	e04b      	b.n	800e6ee <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e656:	f3ef 8305 	mrs	r3, IPSR
 800e65a:	617b      	str	r3, [r7, #20]
  return(result);
 800e65c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800e662:	f06f 0305 	mvn.w	r3, #5
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	e041      	b.n	800e6ee <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800e674:	2301      	movs	r3, #1
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
 800e678:	e001      	b.n	800e67e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f003 0302 	and.w	r3, r3, #2
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800e688:	2300      	movs	r3, #0
 800e68a:	623b      	str	r3, [r7, #32]
 800e68c:	e001      	b.n	800e692 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	6a3a      	ldr	r2, [r7, #32]
 800e69a:	68b9      	ldr	r1, [r7, #8]
 800e69c:	69b8      	ldr	r0, [r7, #24]
 800e69e:	f000 f8bf 	bl	800e820 <xEventGroupWaitBits>
 800e6a2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d010      	beq.n	800e6d0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	4013      	ands	r3, r2
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d019      	beq.n	800e6ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d003      	beq.n	800e6c8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800e6c0:	f06f 0301 	mvn.w	r3, #1
 800e6c4:	61fb      	str	r3, [r7, #28]
 800e6c6:	e012      	b.n	800e6ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e6c8:	f06f 0302 	mvn.w	r3, #2
 800e6cc:	61fb      	str	r3, [r7, #28]
 800e6ce:	e00e      	b.n	800e6ee <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d109      	bne.n	800e6ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d003      	beq.n	800e6e8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800e6e0:	f06f 0301 	mvn.w	r3, #1
 800e6e4:	61fb      	str	r3, [r7, #28]
 800e6e6:	e002      	b.n	800e6ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e6e8:	f06f 0302 	mvn.w	r3, #2
 800e6ec:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e6ee:	69fb      	ldr	r3, [r7, #28]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3728      	adds	r7, #40	; 0x28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b088      	sub	sp, #32
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	4613      	mov	r3, r2
 800e706:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e710:	f3ef 8305 	mrs	r3, IPSR
 800e714:	617b      	str	r3, [r7, #20]
  return(result);
 800e716:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d028      	beq.n	800e76e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <osMessageQueuePut+0x36>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <osMessageQueuePut+0x36>
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d003      	beq.n	800e736 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e72e:	f06f 0303 	mvn.w	r3, #3
 800e732:	61fb      	str	r3, [r7, #28]
 800e734:	e038      	b.n	800e7a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e736:	2300      	movs	r3, #0
 800e738:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e73a:	f107 0210 	add.w	r2, r7, #16
 800e73e:	2300      	movs	r3, #0
 800e740:	68b9      	ldr	r1, [r7, #8]
 800e742:	69b8      	ldr	r0, [r7, #24]
 800e744:	f000 fcbe 	bl	800f0c4 <xQueueGenericSendFromISR>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d003      	beq.n	800e756 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e74e:	f06f 0302 	mvn.w	r3, #2
 800e752:	61fb      	str	r3, [r7, #28]
 800e754:	e028      	b.n	800e7a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d025      	beq.n	800e7a8 <osMessageQueuePut+0xb0>
 800e75c:	4b15      	ldr	r3, [pc, #84]	; (800e7b4 <osMessageQueuePut+0xbc>)
 800e75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e762:	601a      	str	r2, [r3, #0]
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	e01c      	b.n	800e7a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <osMessageQueuePut+0x82>
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d103      	bne.n	800e782 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e77a:	f06f 0303 	mvn.w	r3, #3
 800e77e:	61fb      	str	r3, [r7, #28]
 800e780:	e012      	b.n	800e7a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e782:	2300      	movs	r3, #0
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	68b9      	ldr	r1, [r7, #8]
 800e788:	69b8      	ldr	r0, [r7, #24]
 800e78a:	f000 fb9d 	bl	800eec8 <xQueueGenericSend>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b01      	cmp	r3, #1
 800e792:	d009      	beq.n	800e7a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e79a:	f06f 0301 	mvn.w	r3, #1
 800e79e:	61fb      	str	r3, [r7, #28]
 800e7a0:	e002      	b.n	800e7a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e7a2:	f06f 0302 	mvn.w	r3, #2
 800e7a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e7a8:	69fb      	ldr	r3, [r7, #28]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3720      	adds	r7, #32
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4a07      	ldr	r2, [pc, #28]	; (800e7e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800e7c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	4a06      	ldr	r2, [pc, #24]	; (800e7e8 <vApplicationGetIdleTaskMemory+0x30>)
 800e7ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2280      	movs	r2, #128	; 0x80
 800e7d4:	601a      	str	r2, [r3, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	240007d4 	.word	0x240007d4
 800e7e8:	24000830 	.word	0x24000830

0800e7ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4a07      	ldr	r2, [pc, #28]	; (800e818 <vApplicationGetTimerTaskMemory+0x2c>)
 800e7fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	4a06      	ldr	r2, [pc, #24]	; (800e81c <vApplicationGetTimerTaskMemory+0x30>)
 800e802:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e80a:	601a      	str	r2, [r3, #0]
}
 800e80c:	bf00      	nop
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	24000a30 	.word	0x24000a30
 800e81c:	24000a8c 	.word	0x24000a8c

0800e820 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b090      	sub	sp, #64	; 0x40
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e836:	2300      	movs	r3, #0
 800e838:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10a      	bne.n	800e856 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e852:	bf00      	nop
 800e854:	e7fe      	b.n	800e854 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00a      	beq.n	800e876 <xEventGroupWaitBits+0x56>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	61fb      	str	r3, [r7, #28]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d10a      	bne.n	800e892 <xEventGroupWaitBits+0x72>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	61bb      	str	r3, [r7, #24]
}
 800e88e:	bf00      	nop
 800e890:	e7fe      	b.n	800e890 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e892:	f001 fdc5 	bl	8010420 <xTaskGetSchedulerState>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <xEventGroupWaitBits+0x82>
 800e89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <xEventGroupWaitBits+0x86>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e000      	b.n	800e8a8 <xEventGroupWaitBits+0x88>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10a      	bne.n	800e8c2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	617b      	str	r3, [r7, #20]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e8c2:	f001 f925 	bl	800fb10 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d2:	f000 f90b 	bl	800eaec <prvTestWaitCondition>
 800e8d6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00e      	beq.n	800e8fc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d028      	beq.n	800e93e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	43db      	mvns	r3, r3
 800e8f4:	401a      	ands	r2, r3
 800e8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	e020      	b.n	800e93e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d104      	bne.n	800e90c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e906:	2301      	movs	r3, #1
 800e908:	633b      	str	r3, [r7, #48]	; 0x30
 800e90a:	e018      	b.n	800e93e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d003      	beq.n	800e91a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e918:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e926:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92a:	1d18      	adds	r0, r3, #4
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e930:	4313      	orrs	r3, r2
 800e932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e934:	4619      	mov	r1, r3
 800e936:	f001 faeb 	bl	800ff10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e93e:	f001 f8f5 	bl	800fb2c <xTaskResumeAll>
 800e942:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e946:	2b00      	cmp	r3, #0
 800e948:	d031      	beq.n	800e9ae <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d107      	bne.n	800e960 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e950:	4b19      	ldr	r3, [pc, #100]	; (800e9b8 <xEventGroupWaitBits+0x198>)
 800e952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e960:	f001 fdea 	bl	8010538 <uxTaskResetEventItemValue>
 800e964:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d11a      	bne.n	800e9a6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e970:	f002 fae8 	bl	8010f44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	68b9      	ldr	r1, [r7, #8]
 800e97e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e980:	f000 f8b4 	bl	800eaec <prvTestWaitCondition>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d009      	beq.n	800e99e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d006      	beq.n	800e99e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	43db      	mvns	r3, r3
 800e998:	401a      	ands	r2, r3
 800e99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e9a2:	f002 faff 	bl	8010fa4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3740      	adds	r7, #64	; 0x40
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08e      	sub	sp, #56	; 0x38
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <xEventGroupSetBits+0x32>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	613b      	str	r3, [r7, #16]
}
 800e9ea:	bf00      	nop
 800e9ec:	e7fe      	b.n	800e9ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00a      	beq.n	800ea0e <xEventGroupSetBits+0x52>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fc:	f383 8811 	msr	BASEPRI, r3
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	60fb      	str	r3, [r7, #12]
}
 800ea0a:	bf00      	nop
 800ea0c:	e7fe      	b.n	800ea0c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	3304      	adds	r3, #4
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	3308      	adds	r3, #8
 800ea18:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ea1a:	f001 f879 	bl	800fb10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ea30:	e03c      	b.n	800eaac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ea32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ea38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ea48:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea50:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d108      	bne.n	800ea6e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	4013      	ands	r3, r2
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00b      	beq.n	800ea80 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea6c:	e008      	b.n	800ea80 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	4013      	ands	r3, r2
 800ea76:	69ba      	ldr	r2, [r7, #24]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d101      	bne.n	800ea80 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d010      	beq.n	800eaa8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ea90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	4313      	orrs	r3, r2
 800ea96:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaa4:	f001 fb00 	bl	80100a8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800eaac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaae:	6a3b      	ldr	r3, [r7, #32]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d1be      	bne.n	800ea32 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	43db      	mvns	r3, r3
 800eabc:	401a      	ands	r2, r3
 800eabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800eac2:	f001 f833 	bl	800fb2c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	681b      	ldr	r3, [r3, #0]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3738      	adds	r7, #56	; 0x38
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
 800eada:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7ff ff6c 	bl	800e9bc <xEventGroupSetBits>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800eaec:	b480      	push	{r7}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d107      	bne.n	800eb12 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4013      	ands	r3, r2
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00a      	beq.n	800eb22 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	617b      	str	r3, [r7, #20]
 800eb10:	e007      	b.n	800eb22 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	4013      	ands	r3, r2
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d101      	bne.n	800eb22 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800eb22:	697b      	ldr	r3, [r7, #20]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	371c      	adds	r7, #28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	4804      	ldr	r0, [pc, #16]	; (800eb54 <xEventGroupSetBitsFromISR+0x24>)
 800eb44:	f002 f8b2 	bl	8010cac <xTimerPendFunctionCallFromISR>
 800eb48:	6178      	str	r0, [r7, #20]

		return xReturn;
 800eb4a:	697b      	ldr	r3, [r7, #20]
	}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	0800ead3 	.word	0x0800ead3

0800eb58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f103 0208 	add.w	r2, r3, #8
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f103 0208 	add.w	r2, r3, #8
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f103 0208 	add.w	r2, r3, #8
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eba6:	bf00      	nop
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr

0800ebb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b085      	sub	sp, #20
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	689a      	ldr	r2, [r3, #8]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	683a      	ldr	r2, [r7, #0]
 800ebd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	1c5a      	adds	r2, r3, #1
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	601a      	str	r2, [r3, #0]
}
 800ebee:	bf00      	nop
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec10:	d103      	bne.n	800ec1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e00c      	b.n	800ec34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	3308      	adds	r3, #8
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e002      	b.n	800ec28 <vListInsert+0x2e>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68ba      	ldr	r2, [r7, #8]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d2f6      	bcs.n	800ec22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	601a      	str	r2, [r3, #0]
}
 800ec60:	bf00      	nop
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	6892      	ldr	r2, [r2, #8]
 800ec82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	6852      	ldr	r2, [r2, #4]
 800ec8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d103      	bne.n	800eca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	689a      	ldr	r2, [r3, #8]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	1e5a      	subs	r2, r3, #1
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <xQueueGenericReset+0x2a>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60bb      	str	r3, [r7, #8]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ecea:	f002 f92b 	bl	8010f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf6:	68f9      	ldr	r1, [r7, #12]
 800ecf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecfa:	fb01 f303 	mul.w	r3, r1, r3
 800ecfe:	441a      	add	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2200      	movs	r2, #0
 800ed08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	68f9      	ldr	r1, [r7, #12]
 800ed1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed20:	fb01 f303 	mul.w	r3, r1, r3
 800ed24:	441a      	add	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	22ff      	movs	r2, #255	; 0xff
 800ed2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	22ff      	movs	r2, #255	; 0xff
 800ed36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d114      	bne.n	800ed6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d01a      	beq.n	800ed7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3310      	adds	r3, #16
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f001 f947 	bl	800ffe0 <xTaskRemoveFromEventList>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d012      	beq.n	800ed7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed58:	4b0c      	ldr	r3, [pc, #48]	; (800ed8c <xQueueGenericReset+0xcc>)
 800ed5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	e009      	b.n	800ed7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3310      	adds	r3, #16
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff fef2 	bl	800eb58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	3324      	adds	r3, #36	; 0x24
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7ff feed 	bl	800eb58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed7e:	f002 f911 	bl	8010fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed82:	2301      	movs	r3, #1
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	e000ed04 	.word	0xe000ed04

0800ed90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b08e      	sub	sp, #56	; 0x38
 800ed94:	af02      	add	r7, sp, #8
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10a      	bne.n	800edba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800edb6:	bf00      	nop
 800edb8:	e7fe      	b.n	800edb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d10a      	bne.n	800edd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800edd2:	bf00      	nop
 800edd4:	e7fe      	b.n	800edd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <xQueueGenericCreateStatic+0x52>
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d001      	beq.n	800ede6 <xQueueGenericCreateStatic+0x56>
 800ede2:	2301      	movs	r3, #1
 800ede4:	e000      	b.n	800ede8 <xQueueGenericCreateStatic+0x58>
 800ede6:	2300      	movs	r3, #0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10a      	bne.n	800ee02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	623b      	str	r3, [r7, #32]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d102      	bne.n	800ee0e <xQueueGenericCreateStatic+0x7e>
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d101      	bne.n	800ee12 <xQueueGenericCreateStatic+0x82>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e000      	b.n	800ee14 <xQueueGenericCreateStatic+0x84>
 800ee12:	2300      	movs	r3, #0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	61fb      	str	r3, [r7, #28]
}
 800ee2a:	bf00      	nop
 800ee2c:	e7fe      	b.n	800ee2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee2e:	2350      	movs	r3, #80	; 0x50
 800ee30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	2b50      	cmp	r3, #80	; 0x50
 800ee36:	d00a      	beq.n	800ee4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	61bb      	str	r3, [r7, #24]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00d      	beq.n	800ee76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 f805 	bl	800ee80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3730      	adds	r7, #48	; 0x30
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d103      	bne.n	800ee9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	e002      	b.n	800eea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eeae:	2101      	movs	r1, #1
 800eeb0:	69b8      	ldr	r0, [r7, #24]
 800eeb2:	f7ff ff05 	bl	800ecc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
	...

0800eec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08e      	sub	sp, #56	; 0x38
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eed6:	2300      	movs	r3, #0
 800eed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10a      	bne.n	800eefa <xQueueGenericSend+0x32>
	__asm volatile
 800eee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eef6:	bf00      	nop
 800eef8:	e7fe      	b.n	800eef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d103      	bne.n	800ef08 <xQueueGenericSend+0x40>
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d101      	bne.n	800ef0c <xQueueGenericSend+0x44>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e000      	b.n	800ef0e <xQueueGenericSend+0x46>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d10a      	bne.n	800ef28 <xQueueGenericSend+0x60>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef24:	bf00      	nop
 800ef26:	e7fe      	b.n	800ef26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d103      	bne.n	800ef36 <xQueueGenericSend+0x6e>
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d101      	bne.n	800ef3a <xQueueGenericSend+0x72>
 800ef36:	2301      	movs	r3, #1
 800ef38:	e000      	b.n	800ef3c <xQueueGenericSend+0x74>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10a      	bne.n	800ef56 <xQueueGenericSend+0x8e>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	623b      	str	r3, [r7, #32]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef56:	f001 fa63 	bl	8010420 <xTaskGetSchedulerState>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d102      	bne.n	800ef66 <xQueueGenericSend+0x9e>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <xQueueGenericSend+0xa2>
 800ef66:	2301      	movs	r3, #1
 800ef68:	e000      	b.n	800ef6c <xQueueGenericSend+0xa4>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10a      	bne.n	800ef86 <xQueueGenericSend+0xbe>
	__asm volatile
 800ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	61fb      	str	r3, [r7, #28]
}
 800ef82:	bf00      	nop
 800ef84:	e7fe      	b.n	800ef84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef86:	f001 ffdd 	bl	8010f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d302      	bcc.n	800ef9c <xQueueGenericSend+0xd4>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d129      	bne.n	800eff0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	68b9      	ldr	r1, [r7, #8]
 800efa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efa2:	f000 fa0b 	bl	800f3bc <prvCopyDataToQueue>
 800efa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	2b00      	cmp	r3, #0
 800efae:	d010      	beq.n	800efd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	3324      	adds	r3, #36	; 0x24
 800efb4:	4618      	mov	r0, r3
 800efb6:	f001 f813 	bl	800ffe0 <xTaskRemoveFromEventList>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d013      	beq.n	800efe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efc0:	4b3f      	ldr	r3, [pc, #252]	; (800f0c0 <xQueueGenericSend+0x1f8>)
 800efc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	e00a      	b.n	800efe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efd8:	4b39      	ldr	r3, [pc, #228]	; (800f0c0 <xQueueGenericSend+0x1f8>)
 800efda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800efe8:	f001 ffdc 	bl	8010fa4 <vPortExitCritical>
				return pdPASS;
 800efec:	2301      	movs	r3, #1
 800efee:	e063      	b.n	800f0b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d103      	bne.n	800effe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eff6:	f001 ffd5 	bl	8010fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800effa:	2300      	movs	r3, #0
 800effc:	e05c      	b.n	800f0b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800effe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f004:	f107 0314 	add.w	r3, r7, #20
 800f008:	4618      	mov	r0, r3
 800f00a:	f001 f8af 	bl	801016c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f00e:	2301      	movs	r3, #1
 800f010:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f012:	f001 ffc7 	bl	8010fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f016:	f000 fd7b 	bl	800fb10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f01a:	f001 ff93 	bl	8010f44 <vPortEnterCritical>
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f024:	b25b      	sxtb	r3, r3
 800f026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f02a:	d103      	bne.n	800f034 <xQueueGenericSend+0x16c>
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f03a:	b25b      	sxtb	r3, r3
 800f03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f040:	d103      	bne.n	800f04a <xQueueGenericSend+0x182>
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f04a:	f001 ffab 	bl	8010fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f04e:	1d3a      	adds	r2, r7, #4
 800f050:	f107 0314 	add.w	r3, r7, #20
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f001 f89e 	bl	8010198 <xTaskCheckForTimeOut>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d124      	bne.n	800f0ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f064:	f000 faa2 	bl	800f5ac <prvIsQueueFull>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d018      	beq.n	800f0a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	3310      	adds	r3, #16
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	4611      	mov	r1, r2
 800f076:	4618      	mov	r0, r3
 800f078:	f000 ff26 	bl	800fec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f07c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f07e:	f000 fa2d 	bl	800f4dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f082:	f000 fd53 	bl	800fb2c <xTaskResumeAll>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f47f af7c 	bne.w	800ef86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f08e:	4b0c      	ldr	r3, [pc, #48]	; (800f0c0 <xQueueGenericSend+0x1f8>)
 800f090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	f3bf 8f6f 	isb	sy
 800f09e:	e772      	b.n	800ef86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0a2:	f000 fa1b 	bl	800f4dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0a6:	f000 fd41 	bl	800fb2c <xTaskResumeAll>
 800f0aa:	e76c      	b.n	800ef86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ae:	f000 fa15 	bl	800f4dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0b2:	f000 fd3b 	bl	800fb2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3738      	adds	r7, #56	; 0x38
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	e000ed04 	.word	0xe000ed04

0800f0c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b090      	sub	sp, #64	; 0x40
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
 800f0d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10a      	bne.n	800f0f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0ee:	bf00      	nop
 800f0f0:	e7fe      	b.n	800f0f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d103      	bne.n	800f100 <xQueueGenericSendFromISR+0x3c>
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d101      	bne.n	800f104 <xQueueGenericSendFromISR+0x40>
 800f100:	2301      	movs	r3, #1
 800f102:	e000      	b.n	800f106 <xQueueGenericSendFromISR+0x42>
 800f104:	2300      	movs	r3, #0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10a      	bne.n	800f120 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b02      	cmp	r3, #2
 800f124:	d103      	bne.n	800f12e <xQueueGenericSendFromISR+0x6a>
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <xQueueGenericSendFromISR+0x6e>
 800f12e:	2301      	movs	r3, #1
 800f130:	e000      	b.n	800f134 <xQueueGenericSendFromISR+0x70>
 800f132:	2300      	movs	r3, #0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10a      	bne.n	800f14e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	623b      	str	r3, [r7, #32]
}
 800f14a:	bf00      	nop
 800f14c:	e7fe      	b.n	800f14c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f14e:	f001 ffdb 	bl	8011108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f152:	f3ef 8211 	mrs	r2, BASEPRI
 800f156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15a:	f383 8811 	msr	BASEPRI, r3
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f3bf 8f4f 	dsb	sy
 800f166:	61fa      	str	r2, [r7, #28]
 800f168:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f16a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f16c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f176:	429a      	cmp	r2, r3
 800f178:	d302      	bcc.n	800f180 <xQueueGenericSendFromISR+0xbc>
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d12f      	bne.n	800f1e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f190:	683a      	ldr	r2, [r7, #0]
 800f192:	68b9      	ldr	r1, [r7, #8]
 800f194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f196:	f000 f911 	bl	800f3bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f19a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f19e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1a2:	d112      	bne.n	800f1ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d016      	beq.n	800f1da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ae:	3324      	adds	r3, #36	; 0x24
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 ff15 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00e      	beq.n	800f1da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00b      	beq.n	800f1da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	601a      	str	r2, [r3, #0]
 800f1c8:	e007      	b.n	800f1da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f1ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	b25a      	sxtb	r2, r3
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f1de:	e001      	b.n	800f1e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f1ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3740      	adds	r7, #64	; 0x40
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
	...

0800f1fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08c      	sub	sp, #48	; 0x30
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f208:	2300      	movs	r3, #0
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10a      	bne.n	800f22c <xQueueReceive+0x30>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	623b      	str	r3, [r7, #32]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d103      	bne.n	800f23a <xQueueReceive+0x3e>
 800f232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f236:	2b00      	cmp	r3, #0
 800f238:	d101      	bne.n	800f23e <xQueueReceive+0x42>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e000      	b.n	800f240 <xQueueReceive+0x44>
 800f23e:	2300      	movs	r3, #0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10a      	bne.n	800f25a <xQueueReceive+0x5e>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	61fb      	str	r3, [r7, #28]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f25a:	f001 f8e1 	bl	8010420 <xTaskGetSchedulerState>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <xQueueReceive+0x6e>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d101      	bne.n	800f26e <xQueueReceive+0x72>
 800f26a:	2301      	movs	r3, #1
 800f26c:	e000      	b.n	800f270 <xQueueReceive+0x74>
 800f26e:	2300      	movs	r3, #0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10a      	bne.n	800f28a <xQueueReceive+0x8e>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	61bb      	str	r3, [r7, #24]
}
 800f286:	bf00      	nop
 800f288:	e7fe      	b.n	800f288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f28a:	f001 fe5b 	bl	8010f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01f      	beq.n	800f2da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f29e:	f000 f8f7 	bl	800f490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a4:	1e5a      	subs	r2, r3, #1
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00f      	beq.n	800f2d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b4:	3310      	adds	r3, #16
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 fe92 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d007      	beq.n	800f2d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2c2:	4b3d      	ldr	r3, [pc, #244]	; (800f3b8 <xQueueReceive+0x1bc>)
 800f2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2d2:	f001 fe67 	bl	8010fa4 <vPortExitCritical>
				return pdPASS;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e069      	b.n	800f3ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d103      	bne.n	800f2e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f2e0:	f001 fe60 	bl	8010fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e062      	b.n	800f3ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2ee:	f107 0310 	add.w	r3, r7, #16
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 ff3a 	bl	801016c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2fc:	f001 fe52 	bl	8010fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f300:	f000 fc06 	bl	800fb10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f304:	f001 fe1e 	bl	8010f44 <vPortEnterCritical>
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f30e:	b25b      	sxtb	r3, r3
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f314:	d103      	bne.n	800f31e <xQueueReceive+0x122>
 800f316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f318:	2200      	movs	r2, #0
 800f31a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f324:	b25b      	sxtb	r3, r3
 800f326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f32a:	d103      	bne.n	800f334 <xQueueReceive+0x138>
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f334:	f001 fe36 	bl	8010fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f338:	1d3a      	adds	r2, r7, #4
 800f33a:	f107 0310 	add.w	r3, r7, #16
 800f33e:	4611      	mov	r1, r2
 800f340:	4618      	mov	r0, r3
 800f342:	f000 ff29 	bl	8010198 <xTaskCheckForTimeOut>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d123      	bne.n	800f394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f34e:	f000 f917 	bl	800f580 <prvIsQueueEmpty>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d017      	beq.n	800f388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	3324      	adds	r3, #36	; 0x24
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	4611      	mov	r1, r2
 800f360:	4618      	mov	r0, r3
 800f362:	f000 fdb1 	bl	800fec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f368:	f000 f8b8 	bl	800f4dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f36c:	f000 fbde 	bl	800fb2c <xTaskResumeAll>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d189      	bne.n	800f28a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f376:	4b10      	ldr	r3, [pc, #64]	; (800f3b8 <xQueueReceive+0x1bc>)
 800f378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	e780      	b.n	800f28a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f38a:	f000 f8a7 	bl	800f4dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f38e:	f000 fbcd 	bl	800fb2c <xTaskResumeAll>
 800f392:	e77a      	b.n	800f28a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f396:	f000 f8a1 	bl	800f4dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f39a:	f000 fbc7 	bl	800fb2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f39e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3a0:	f000 f8ee 	bl	800f580 <prvIsQueueEmpty>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f43f af6f 	beq.w	800f28a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3730      	adds	r7, #48	; 0x30
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	e000ed04 	.word	0xe000ed04

0800f3bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10d      	bne.n	800f3f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d14d      	bne.n	800f47e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f001 f838 	bl	801045c <xTaskPriorityDisinherit>
 800f3ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	609a      	str	r2, [r3, #8]
 800f3f4:	e043      	b.n	800f47e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d119      	bne.n	800f430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6858      	ldr	r0, [r3, #4]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	461a      	mov	r2, r3
 800f406:	68b9      	ldr	r1, [r7, #8]
 800f408:	f002 f8e2 	bl	80115d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	685a      	ldr	r2, [r3, #4]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f414:	441a      	add	r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	429a      	cmp	r2, r3
 800f424:	d32b      	bcc.n	800f47e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	605a      	str	r2, [r3, #4]
 800f42e:	e026      	b.n	800f47e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	68d8      	ldr	r0, [r3, #12]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f438:	461a      	mov	r2, r3
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	f002 f8c8 	bl	80115d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	68da      	ldr	r2, [r3, #12]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f448:	425b      	negs	r3, r3
 800f44a:	441a      	add	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	68da      	ldr	r2, [r3, #12]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d207      	bcs.n	800f46c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	689a      	ldr	r2, [r3, #8]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f464:	425b      	negs	r3, r3
 800f466:	441a      	add	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d105      	bne.n	800f47e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f486:	697b      	ldr	r3, [r7, #20]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3718      	adds	r7, #24
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d018      	beq.n	800f4d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68da      	ldr	r2, [r3, #12]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4aa:	441a      	add	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	68da      	ldr	r2, [r3, #12]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d303      	bcc.n	800f4c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	68d9      	ldr	r1, [r3, #12]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	6838      	ldr	r0, [r7, #0]
 800f4d0:	f002 f87e 	bl	80115d0 <memcpy>
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f4e4:	f001 fd2e 	bl	8010f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4f0:	e011      	b.n	800f516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d012      	beq.n	800f520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3324      	adds	r3, #36	; 0x24
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 fd6e 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f50a:	f000 fea7 	bl	801025c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	3b01      	subs	r3, #1
 800f512:	b2db      	uxtb	r3, r3
 800f514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	dce9      	bgt.n	800f4f2 <prvUnlockQueue+0x16>
 800f51e:	e000      	b.n	800f522 <prvUnlockQueue+0x46>
					break;
 800f520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	22ff      	movs	r2, #255	; 0xff
 800f526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f52a:	f001 fd3b 	bl	8010fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f52e:	f001 fd09 	bl	8010f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f53a:	e011      	b.n	800f560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d012      	beq.n	800f56a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3310      	adds	r3, #16
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 fd49 	bl	800ffe0 <xTaskRemoveFromEventList>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f554:	f000 fe82 	bl	801025c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f558:	7bbb      	ldrb	r3, [r7, #14]
 800f55a:	3b01      	subs	r3, #1
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f564:	2b00      	cmp	r3, #0
 800f566:	dce9      	bgt.n	800f53c <prvUnlockQueue+0x60>
 800f568:	e000      	b.n	800f56c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f56a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	22ff      	movs	r2, #255	; 0xff
 800f570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f574:	f001 fd16 	bl	8010fa4 <vPortExitCritical>
}
 800f578:	bf00      	nop
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f588:	f001 fcdc 	bl	8010f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f594:	2301      	movs	r3, #1
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e001      	b.n	800f59e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f59e:	f001 fd01 	bl	8010fa4 <vPortExitCritical>

	return xReturn;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5b4:	f001 fcc6 	bl	8010f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d102      	bne.n	800f5ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	e001      	b.n	800f5ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5ce:	f001 fce9 	bl	8010fa4 <vPortExitCritical>

	return xReturn;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	60fb      	str	r3, [r7, #12]
 800f5ea:	e014      	b.n	800f616 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5ec:	4a0f      	ldr	r2, [pc, #60]	; (800f62c <vQueueAddToRegistry+0x50>)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10b      	bne.n	800f610 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5f8:	490c      	ldr	r1, [pc, #48]	; (800f62c <vQueueAddToRegistry+0x50>)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f602:	4a0a      	ldr	r2, [pc, #40]	; (800f62c <vQueueAddToRegistry+0x50>)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	4413      	add	r3, r2
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f60e:	e006      	b.n	800f61e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	3301      	adds	r3, #1
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b07      	cmp	r3, #7
 800f61a:	d9e7      	bls.n	800f5ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f61c:	bf00      	nop
 800f61e:	bf00      	nop
 800f620:	3714      	adds	r7, #20
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	24000e8c 	.word	0x24000e8c

0800f630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f640:	f001 fc80 	bl	8010f44 <vPortEnterCritical>
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f64a:	b25b      	sxtb	r3, r3
 800f64c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f650:	d103      	bne.n	800f65a <vQueueWaitForMessageRestricted+0x2a>
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f660:	b25b      	sxtb	r3, r3
 800f662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f666:	d103      	bne.n	800f670 <vQueueWaitForMessageRestricted+0x40>
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f670:	f001 fc98 	bl	8010fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	3324      	adds	r3, #36	; 0x24
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	4618      	mov	r0, r3
 800f686:	f000 fc7f 	bl	800ff88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f68a:	6978      	ldr	r0, [r7, #20]
 800f68c:	f7ff ff26 	bl	800f4dc <prvUnlockQueue>
	}
 800f690:	bf00      	nop
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b08e      	sub	sp, #56	; 0x38
 800f69c:	af04      	add	r7, sp, #16
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10a      	bne.n	800f6c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	623b      	str	r3, [r7, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	e7fe      	b.n	800f6c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10a      	bne.n	800f6de <xTaskCreateStatic+0x46>
	__asm volatile
 800f6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	61fb      	str	r3, [r7, #28]
}
 800f6da:	bf00      	nop
 800f6dc:	e7fe      	b.n	800f6dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f6de:	235c      	movs	r3, #92	; 0x5c
 800f6e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	2b5c      	cmp	r3, #92	; 0x5c
 800f6e6:	d00a      	beq.n	800f6fe <xTaskCreateStatic+0x66>
	__asm volatile
 800f6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ec:	f383 8811 	msr	BASEPRI, r3
 800f6f0:	f3bf 8f6f 	isb	sy
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	61bb      	str	r3, [r7, #24]
}
 800f6fa:	bf00      	nop
 800f6fc:	e7fe      	b.n	800f6fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f702:	2b00      	cmp	r3, #0
 800f704:	d01e      	beq.n	800f744 <xTaskCreateStatic+0xac>
 800f706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01b      	beq.n	800f744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	2202      	movs	r2, #2
 800f71a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f71e:	2300      	movs	r3, #0
 800f720:	9303      	str	r3, [sp, #12]
 800f722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f724:	9302      	str	r3, [sp, #8]
 800f726:	f107 0314 	add.w	r3, r7, #20
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	68b9      	ldr	r1, [r7, #8]
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f000 f850 	bl	800f7dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f73c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f73e:	f000 f8dd 	bl	800f8fc <prvAddNewTaskToReadyList>
 800f742:	e001      	b.n	800f748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f744:	2300      	movs	r3, #0
 800f746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f748:	697b      	ldr	r3, [r7, #20]
	}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3728      	adds	r7, #40	; 0x28
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f752:	b580      	push	{r7, lr}
 800f754:	b08c      	sub	sp, #48	; 0x30
 800f756:	af04      	add	r7, sp, #16
 800f758:	60f8      	str	r0, [r7, #12]
 800f75a:	60b9      	str	r1, [r7, #8]
 800f75c:	603b      	str	r3, [r7, #0]
 800f75e:	4613      	mov	r3, r2
 800f760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f762:	88fb      	ldrh	r3, [r7, #6]
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4618      	mov	r0, r3
 800f768:	f001 fd0e 	bl	8011188 <pvPortMalloc>
 800f76c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00e      	beq.n	800f792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f774:	205c      	movs	r0, #92	; 0x5c
 800f776:	f001 fd07 	bl	8011188 <pvPortMalloc>
 800f77a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d003      	beq.n	800f78a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	697a      	ldr	r2, [r7, #20]
 800f786:	631a      	str	r2, [r3, #48]	; 0x30
 800f788:	e005      	b.n	800f796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f78a:	6978      	ldr	r0, [r7, #20]
 800f78c:	f001 fdc8 	bl	8011320 <vPortFree>
 800f790:	e001      	b.n	800f796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f792:	2300      	movs	r3, #0
 800f794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d017      	beq.n	800f7cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7a4:	88fa      	ldrh	r2, [r7, #6]
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	9303      	str	r3, [sp, #12]
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	9302      	str	r3, [sp, #8]
 800f7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b0:	9301      	str	r3, [sp, #4]
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	9300      	str	r3, [sp, #0]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	68b9      	ldr	r1, [r7, #8]
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	f000 f80e 	bl	800f7dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7c0:	69f8      	ldr	r0, [r7, #28]
 800f7c2:	f000 f89b 	bl	800f8fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	61bb      	str	r3, [r7, #24]
 800f7ca:	e002      	b.n	800f7d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7d2:	69bb      	ldr	r3, [r7, #24]
	}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3720      	adds	r7, #32
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b088      	sub	sp, #32
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	21a5      	movs	r1, #165	; 0xa5
 800f7f6:	f001 fef9 	bl	80115ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f804:	440b      	add	r3, r1
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	f023 0307 	bic.w	r3, r3, #7
 800f812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00a      	beq.n	800f834 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	617b      	str	r3, [r7, #20]
}
 800f830:	bf00      	nop
 800f832:	e7fe      	b.n	800f832 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d01f      	beq.n	800f87a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f83a:	2300      	movs	r3, #0
 800f83c:	61fb      	str	r3, [r7, #28]
 800f83e:	e012      	b.n	800f866 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	4413      	add	r3, r2
 800f846:	7819      	ldrb	r1, [r3, #0]
 800f848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	4413      	add	r3, r2
 800f84e:	3334      	adds	r3, #52	; 0x34
 800f850:	460a      	mov	r2, r1
 800f852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	4413      	add	r3, r2
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d006      	beq.n	800f86e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	3301      	adds	r3, #1
 800f864:	61fb      	str	r3, [r7, #28]
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	2b0f      	cmp	r3, #15
 800f86a:	d9e9      	bls.n	800f840 <prvInitialiseNewTask+0x64>
 800f86c:	e000      	b.n	800f870 <prvInitialiseNewTask+0x94>
			{
				break;
 800f86e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f878:	e003      	b.n	800f882 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f884:	2b37      	cmp	r3, #55	; 0x37
 800f886:	d901      	bls.n	800f88c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f888:	2337      	movs	r3, #55	; 0x37
 800f88a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89a:	2200      	movs	r2, #0
 800f89c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff f978 	bl	800eb98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	3318      	adds	r3, #24
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff f973 	bl	800eb98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	68f9      	ldr	r1, [r7, #12]
 800f8da:	69b8      	ldr	r0, [r7, #24]
 800f8dc:	f001 fa06 	bl	8010cec <pxPortInitialiseStack>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d002      	beq.n	800f8f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8f2:	bf00      	nop
 800f8f4:	3720      	adds	r7, #32
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f904:	f001 fb1e 	bl	8010f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f908:	4b2d      	ldr	r3, [pc, #180]	; (800f9c0 <prvAddNewTaskToReadyList+0xc4>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3301      	adds	r3, #1
 800f90e:	4a2c      	ldr	r2, [pc, #176]	; (800f9c0 <prvAddNewTaskToReadyList+0xc4>)
 800f910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f912:	4b2c      	ldr	r3, [pc, #176]	; (800f9c4 <prvAddNewTaskToReadyList+0xc8>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d109      	bne.n	800f92e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f91a:	4a2a      	ldr	r2, [pc, #168]	; (800f9c4 <prvAddNewTaskToReadyList+0xc8>)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f920:	4b27      	ldr	r3, [pc, #156]	; (800f9c0 <prvAddNewTaskToReadyList+0xc4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d110      	bne.n	800f94a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f928:	f000 fcbc 	bl	80102a4 <prvInitialiseTaskLists>
 800f92c:	e00d      	b.n	800f94a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f92e:	4b26      	ldr	r3, [pc, #152]	; (800f9c8 <prvAddNewTaskToReadyList+0xcc>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d109      	bne.n	800f94a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f936:	4b23      	ldr	r3, [pc, #140]	; (800f9c4 <prvAddNewTaskToReadyList+0xc8>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f940:	429a      	cmp	r2, r3
 800f942:	d802      	bhi.n	800f94a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f944:	4a1f      	ldr	r2, [pc, #124]	; (800f9c4 <prvAddNewTaskToReadyList+0xc8>)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f94a:	4b20      	ldr	r3, [pc, #128]	; (800f9cc <prvAddNewTaskToReadyList+0xd0>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	3301      	adds	r3, #1
 800f950:	4a1e      	ldr	r2, [pc, #120]	; (800f9cc <prvAddNewTaskToReadyList+0xd0>)
 800f952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f954:	4b1d      	ldr	r3, [pc, #116]	; (800f9cc <prvAddNewTaskToReadyList+0xd0>)
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f960:	4b1b      	ldr	r3, [pc, #108]	; (800f9d0 <prvAddNewTaskToReadyList+0xd4>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	429a      	cmp	r2, r3
 800f966:	d903      	bls.n	800f970 <prvAddNewTaskToReadyList+0x74>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	4a18      	ldr	r2, [pc, #96]	; (800f9d0 <prvAddNewTaskToReadyList+0xd4>)
 800f96e:	6013      	str	r3, [r2, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f974:	4613      	mov	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4413      	add	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4a15      	ldr	r2, [pc, #84]	; (800f9d4 <prvAddNewTaskToReadyList+0xd8>)
 800f97e:	441a      	add	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3304      	adds	r3, #4
 800f984:	4619      	mov	r1, r3
 800f986:	4610      	mov	r0, r2
 800f988:	f7ff f913 	bl	800ebb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f98c:	f001 fb0a 	bl	8010fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f990:	4b0d      	ldr	r3, [pc, #52]	; (800f9c8 <prvAddNewTaskToReadyList+0xcc>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00e      	beq.n	800f9b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f998:	4b0a      	ldr	r3, [pc, #40]	; (800f9c4 <prvAddNewTaskToReadyList+0xc8>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d207      	bcs.n	800f9b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	; (800f9d8 <prvAddNewTaskToReadyList+0xdc>)
 800f9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9b6:	bf00      	nop
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	240013a0 	.word	0x240013a0
 800f9c4:	24000ecc 	.word	0x24000ecc
 800f9c8:	240013ac 	.word	0x240013ac
 800f9cc:	240013bc 	.word	0x240013bc
 800f9d0:	240013a8 	.word	0x240013a8
 800f9d4:	24000ed0 	.word	0x24000ed0
 800f9d8:	e000ed04 	.word	0xe000ed04

0800f9dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d017      	beq.n	800fa1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9ee:	4b13      	ldr	r3, [pc, #76]	; (800fa3c <vTaskDelay+0x60>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00a      	beq.n	800fa0c <vTaskDelay+0x30>
	__asm volatile
 800f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	60bb      	str	r3, [r7, #8]
}
 800fa08:	bf00      	nop
 800fa0a:	e7fe      	b.n	800fa0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa0c:	f000 f880 	bl	800fb10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa10:	2100      	movs	r1, #0
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fda8 	bl	8010568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa18:	f000 f888 	bl	800fb2c <xTaskResumeAll>
 800fa1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d107      	bne.n	800fa34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa24:	4b06      	ldr	r3, [pc, #24]	; (800fa40 <vTaskDelay+0x64>)
 800fa26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa34:	bf00      	nop
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	240013c8 	.word	0x240013c8
 800fa40:	e000ed04 	.word	0xe000ed04

0800fa44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b08a      	sub	sp, #40	; 0x28
 800fa48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa52:	463a      	mov	r2, r7
 800fa54:	1d39      	adds	r1, r7, #4
 800fa56:	f107 0308 	add.w	r3, r7, #8
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe feac 	bl	800e7b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68ba      	ldr	r2, [r7, #8]
 800fa66:	9202      	str	r2, [sp, #8]
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	460a      	mov	r2, r1
 800fa72:	4921      	ldr	r1, [pc, #132]	; (800faf8 <vTaskStartScheduler+0xb4>)
 800fa74:	4821      	ldr	r0, [pc, #132]	; (800fafc <vTaskStartScheduler+0xb8>)
 800fa76:	f7ff fe0f 	bl	800f698 <xTaskCreateStatic>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	4a20      	ldr	r2, [pc, #128]	; (800fb00 <vTaskStartScheduler+0xbc>)
 800fa7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa80:	4b1f      	ldr	r3, [pc, #124]	; (800fb00 <vTaskStartScheduler+0xbc>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	617b      	str	r3, [r7, #20]
 800fa8c:	e001      	b.n	800fa92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d102      	bne.n	800fa9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa98:	f000 fdba 	bl	8010610 <xTimerCreateTimerTask>
 800fa9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d116      	bne.n	800fad2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	613b      	str	r3, [r7, #16]
}
 800fab6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fab8:	4b12      	ldr	r3, [pc, #72]	; (800fb04 <vTaskStartScheduler+0xc0>)
 800faba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fabe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fac0:	4b11      	ldr	r3, [pc, #68]	; (800fb08 <vTaskStartScheduler+0xc4>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fac6:	4b11      	ldr	r3, [pc, #68]	; (800fb0c <vTaskStartScheduler+0xc8>)
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800facc:	f001 f998 	bl	8010e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fad0:	e00e      	b.n	800faf0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fad8:	d10a      	bne.n	800faf0 <vTaskStartScheduler+0xac>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	60fb      	str	r3, [r7, #12]
}
 800faec:	bf00      	nop
 800faee:	e7fe      	b.n	800faee <vTaskStartScheduler+0xaa>
}
 800faf0:	bf00      	nop
 800faf2:	3718      	adds	r7, #24
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08012250 	.word	0x08012250
 800fafc:	08010275 	.word	0x08010275
 800fb00:	240013c4 	.word	0x240013c4
 800fb04:	240013c0 	.word	0x240013c0
 800fb08:	240013ac 	.word	0x240013ac
 800fb0c:	240013a4 	.word	0x240013a4

0800fb10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb10:	b480      	push	{r7}
 800fb12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb14:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <vTaskSuspendAll+0x18>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	4a03      	ldr	r2, [pc, #12]	; (800fb28 <vTaskSuspendAll+0x18>)
 800fb1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb1e:	bf00      	nop
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	240013c8 	.word	0x240013c8

0800fb2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb32:	2300      	movs	r3, #0
 800fb34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb3a:	4b42      	ldr	r3, [pc, #264]	; (800fc44 <xTaskResumeAll+0x118>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10a      	bne.n	800fb58 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb46:	f383 8811 	msr	BASEPRI, r3
 800fb4a:	f3bf 8f6f 	isb	sy
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	603b      	str	r3, [r7, #0]
}
 800fb54:	bf00      	nop
 800fb56:	e7fe      	b.n	800fb56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb58:	f001 f9f4 	bl	8010f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb5c:	4b39      	ldr	r3, [pc, #228]	; (800fc44 <xTaskResumeAll+0x118>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	4a38      	ldr	r2, [pc, #224]	; (800fc44 <xTaskResumeAll+0x118>)
 800fb64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb66:	4b37      	ldr	r3, [pc, #220]	; (800fc44 <xTaskResumeAll+0x118>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d162      	bne.n	800fc34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb6e:	4b36      	ldr	r3, [pc, #216]	; (800fc48 <xTaskResumeAll+0x11c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d05e      	beq.n	800fc34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb76:	e02f      	b.n	800fbd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb78:	4b34      	ldr	r3, [pc, #208]	; (800fc4c <xTaskResumeAll+0x120>)
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	3318      	adds	r3, #24
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff f871 	bl	800ec6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff f86c 	bl	800ec6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb98:	4b2d      	ldr	r3, [pc, #180]	; (800fc50 <xTaskResumeAll+0x124>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d903      	bls.n	800fba8 <xTaskResumeAll+0x7c>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba4:	4a2a      	ldr	r2, [pc, #168]	; (800fc50 <xTaskResumeAll+0x124>)
 800fba6:	6013      	str	r3, [r2, #0]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbac:	4613      	mov	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4a27      	ldr	r2, [pc, #156]	; (800fc54 <xTaskResumeAll+0x128>)
 800fbb6:	441a      	add	r2, r3
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	3304      	adds	r3, #4
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fe fff7 	bl	800ebb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc8:	4b23      	ldr	r3, [pc, #140]	; (800fc58 <xTaskResumeAll+0x12c>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d302      	bcc.n	800fbd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fbd2:	4b22      	ldr	r3, [pc, #136]	; (800fc5c <xTaskResumeAll+0x130>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbd8:	4b1c      	ldr	r3, [pc, #112]	; (800fc4c <xTaskResumeAll+0x120>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1cb      	bne.n	800fb78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbe6:	f000 fbfb 	bl	80103e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbea:	4b1d      	ldr	r3, [pc, #116]	; (800fc60 <xTaskResumeAll+0x134>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d010      	beq.n	800fc18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbf6:	f000 f847 	bl	800fc88 <xTaskIncrementTick>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fc00:	4b16      	ldr	r3, [pc, #88]	; (800fc5c <xTaskResumeAll+0x130>)
 800fc02:	2201      	movs	r2, #1
 800fc04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1f1      	bne.n	800fbf6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc12:	4b13      	ldr	r3, [pc, #76]	; (800fc60 <xTaskResumeAll+0x134>)
 800fc14:	2200      	movs	r2, #0
 800fc16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc18:	4b10      	ldr	r3, [pc, #64]	; (800fc5c <xTaskResumeAll+0x130>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d009      	beq.n	800fc34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc20:	2301      	movs	r3, #1
 800fc22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <xTaskResumeAll+0x138>)
 800fc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc2a:	601a      	str	r2, [r3, #0]
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc34:	f001 f9b6 	bl	8010fa4 <vPortExitCritical>

	return xAlreadyYielded;
 800fc38:	68bb      	ldr	r3, [r7, #8]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	240013c8 	.word	0x240013c8
 800fc48:	240013a0 	.word	0x240013a0
 800fc4c:	24001360 	.word	0x24001360
 800fc50:	240013a8 	.word	0x240013a8
 800fc54:	24000ed0 	.word	0x24000ed0
 800fc58:	24000ecc 	.word	0x24000ecc
 800fc5c:	240013b4 	.word	0x240013b4
 800fc60:	240013b0 	.word	0x240013b0
 800fc64:	e000ed04 	.word	0xe000ed04

0800fc68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <xTaskGetTickCount+0x1c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc74:	687b      	ldr	r3, [r7, #4]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	370c      	adds	r7, #12
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	240013a4 	.word	0x240013a4

0800fc88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b086      	sub	sp, #24
 800fc8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc92:	4b53      	ldr	r3, [pc, #332]	; (800fde0 <xTaskIncrementTick+0x158>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f040 8095 	bne.w	800fdc6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc9c:	4b51      	ldr	r3, [pc, #324]	; (800fde4 <xTaskIncrementTick+0x15c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3301      	adds	r3, #1
 800fca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fca4:	4a4f      	ldr	r2, [pc, #316]	; (800fde4 <xTaskIncrementTick+0x15c>)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d120      	bne.n	800fcf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcb0:	4b4d      	ldr	r3, [pc, #308]	; (800fde8 <xTaskIncrementTick+0x160>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00a      	beq.n	800fcd0 <xTaskIncrementTick+0x48>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	603b      	str	r3, [r7, #0]
}
 800fccc:	bf00      	nop
 800fcce:	e7fe      	b.n	800fcce <xTaskIncrementTick+0x46>
 800fcd0:	4b45      	ldr	r3, [pc, #276]	; (800fde8 <xTaskIncrementTick+0x160>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	60fb      	str	r3, [r7, #12]
 800fcd6:	4b45      	ldr	r3, [pc, #276]	; (800fdec <xTaskIncrementTick+0x164>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4a43      	ldr	r2, [pc, #268]	; (800fde8 <xTaskIncrementTick+0x160>)
 800fcdc:	6013      	str	r3, [r2, #0]
 800fcde:	4a43      	ldr	r2, [pc, #268]	; (800fdec <xTaskIncrementTick+0x164>)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6013      	str	r3, [r2, #0]
 800fce4:	4b42      	ldr	r3, [pc, #264]	; (800fdf0 <xTaskIncrementTick+0x168>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	4a41      	ldr	r2, [pc, #260]	; (800fdf0 <xTaskIncrementTick+0x168>)
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	f000 fb77 	bl	80103e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcf2:	4b40      	ldr	r3, [pc, #256]	; (800fdf4 <xTaskIncrementTick+0x16c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	693a      	ldr	r2, [r7, #16]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d349      	bcc.n	800fd90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcfc:	4b3a      	ldr	r3, [pc, #232]	; (800fde8 <xTaskIncrementTick+0x160>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d104      	bne.n	800fd10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd06:	4b3b      	ldr	r3, [pc, #236]	; (800fdf4 <xTaskIncrementTick+0x16c>)
 800fd08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd0c:	601a      	str	r2, [r3, #0]
					break;
 800fd0e:	e03f      	b.n	800fd90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd10:	4b35      	ldr	r3, [pc, #212]	; (800fde8 <xTaskIncrementTick+0x160>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d203      	bcs.n	800fd30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd28:	4a32      	ldr	r2, [pc, #200]	; (800fdf4 <xTaskIncrementTick+0x16c>)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd2e:	e02f      	b.n	800fd90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fe ff99 	bl	800ec6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d004      	beq.n	800fd4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	3318      	adds	r3, #24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fe ff90 	bl	800ec6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd50:	4b29      	ldr	r3, [pc, #164]	; (800fdf8 <xTaskIncrementTick+0x170>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d903      	bls.n	800fd60 <xTaskIncrementTick+0xd8>
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5c:	4a26      	ldr	r2, [pc, #152]	; (800fdf8 <xTaskIncrementTick+0x170>)
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd64:	4613      	mov	r3, r2
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	4a23      	ldr	r2, [pc, #140]	; (800fdfc <xTaskIncrementTick+0x174>)
 800fd6e:	441a      	add	r2, r3
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	3304      	adds	r3, #4
 800fd74:	4619      	mov	r1, r3
 800fd76:	4610      	mov	r0, r2
 800fd78:	f7fe ff1b 	bl	800ebb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd80:	4b1f      	ldr	r3, [pc, #124]	; (800fe00 <xTaskIncrementTick+0x178>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d3b8      	bcc.n	800fcfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd8e:	e7b5      	b.n	800fcfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd90:	4b1b      	ldr	r3, [pc, #108]	; (800fe00 <xTaskIncrementTick+0x178>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd96:	4919      	ldr	r1, [pc, #100]	; (800fdfc <xTaskIncrementTick+0x174>)
 800fd98:	4613      	mov	r3, r2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	440b      	add	r3, r1
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d901      	bls.n	800fdac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800fdac:	4b15      	ldr	r3, [pc, #84]	; (800fe04 <xTaskIncrementTick+0x17c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800fdb4:	f7f1 f804 	bl	8000dc0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdb8:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <xTaskIncrementTick+0x180>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d009      	beq.n	800fdd4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	617b      	str	r3, [r7, #20]
 800fdc4:	e006      	b.n	800fdd4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdc6:	4b0f      	ldr	r3, [pc, #60]	; (800fe04 <xTaskIncrementTick+0x17c>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	4a0d      	ldr	r2, [pc, #52]	; (800fe04 <xTaskIncrementTick+0x17c>)
 800fdce:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800fdd0:	f7f0 fff6 	bl	8000dc0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800fdd4:	697b      	ldr	r3, [r7, #20]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3718      	adds	r7, #24
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	240013c8 	.word	0x240013c8
 800fde4:	240013a4 	.word	0x240013a4
 800fde8:	24001358 	.word	0x24001358
 800fdec:	2400135c 	.word	0x2400135c
 800fdf0:	240013b8 	.word	0x240013b8
 800fdf4:	240013c0 	.word	0x240013c0
 800fdf8:	240013a8 	.word	0x240013a8
 800fdfc:	24000ed0 	.word	0x24000ed0
 800fe00:	24000ecc 	.word	0x24000ecc
 800fe04:	240013b0 	.word	0x240013b0
 800fe08:	240013b4 	.word	0x240013b4

0800fe0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe12:	4b28      	ldr	r3, [pc, #160]	; (800feb4 <vTaskSwitchContext+0xa8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d003      	beq.n	800fe22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe1a:	4b27      	ldr	r3, [pc, #156]	; (800feb8 <vTaskSwitchContext+0xac>)
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe20:	e041      	b.n	800fea6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fe22:	4b25      	ldr	r3, [pc, #148]	; (800feb8 <vTaskSwitchContext+0xac>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe28:	4b24      	ldr	r3, [pc, #144]	; (800febc <vTaskSwitchContext+0xb0>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	60fb      	str	r3, [r7, #12]
 800fe2e:	e010      	b.n	800fe52 <vTaskSwitchContext+0x46>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10a      	bne.n	800fe4c <vTaskSwitchContext+0x40>
	__asm volatile
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	f383 8811 	msr	BASEPRI, r3
 800fe3e:	f3bf 8f6f 	isb	sy
 800fe42:	f3bf 8f4f 	dsb	sy
 800fe46:	607b      	str	r3, [r7, #4]
}
 800fe48:	bf00      	nop
 800fe4a:	e7fe      	b.n	800fe4a <vTaskSwitchContext+0x3e>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	491b      	ldr	r1, [pc, #108]	; (800fec0 <vTaskSwitchContext+0xb4>)
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	4613      	mov	r3, r2
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	4413      	add	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	440b      	add	r3, r1
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0e4      	beq.n	800fe30 <vTaskSwitchContext+0x24>
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	4613      	mov	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	4413      	add	r3, r2
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	4a13      	ldr	r2, [pc, #76]	; (800fec0 <vTaskSwitchContext+0xb4>)
 800fe72:	4413      	add	r3, r2
 800fe74:	60bb      	str	r3, [r7, #8]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	605a      	str	r2, [r3, #4]
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	3308      	adds	r3, #8
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d104      	bne.n	800fe96 <vTaskSwitchContext+0x8a>
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	605a      	str	r2, [r3, #4]
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	4a09      	ldr	r2, [pc, #36]	; (800fec4 <vTaskSwitchContext+0xb8>)
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	4a06      	ldr	r2, [pc, #24]	; (800febc <vTaskSwitchContext+0xb0>)
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6013      	str	r3, [r2, #0]
}
 800fea6:	bf00      	nop
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	240013c8 	.word	0x240013c8
 800feb8:	240013b4 	.word	0x240013b4
 800febc:	240013a8 	.word	0x240013a8
 800fec0:	24000ed0 	.word	0x24000ed0
 800fec4:	24000ecc 	.word	0x24000ecc

0800fec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10a      	bne.n	800feee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	60fb      	str	r3, [r7, #12]
}
 800feea:	bf00      	nop
 800feec:	e7fe      	b.n	800feec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800feee:	4b07      	ldr	r3, [pc, #28]	; (800ff0c <vTaskPlaceOnEventList+0x44>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3318      	adds	r3, #24
 800fef4:	4619      	mov	r1, r3
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7fe fe7f 	bl	800ebfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fefc:	2101      	movs	r1, #1
 800fefe:	6838      	ldr	r0, [r7, #0]
 800ff00:	f000 fb32 	bl	8010568 <prvAddCurrentTaskToDelayedList>
}
 800ff04:	bf00      	nop
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	24000ecc 	.word	0x24000ecc

0800ff10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d10a      	bne.n	800ff38 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800ff22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff26:	f383 8811 	msr	BASEPRI, r3
 800ff2a:	f3bf 8f6f 	isb	sy
 800ff2e:	f3bf 8f4f 	dsb	sy
 800ff32:	617b      	str	r3, [r7, #20]
}
 800ff34:	bf00      	nop
 800ff36:	e7fe      	b.n	800ff36 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ff38:	4b11      	ldr	r3, [pc, #68]	; (800ff80 <vTaskPlaceOnUnorderedEventList+0x70>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d10a      	bne.n	800ff56 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	613b      	str	r3, [r7, #16]
}
 800ff52:	bf00      	nop
 800ff54:	e7fe      	b.n	800ff54 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ff56:	4b0b      	ldr	r3, [pc, #44]	; (800ff84 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68ba      	ldr	r2, [r7, #8]
 800ff5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ff60:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff62:	4b08      	ldr	r3, [pc, #32]	; (800ff84 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	3318      	adds	r3, #24
 800ff68:	4619      	mov	r1, r3
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f7fe fe21 	bl	800ebb2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff70:	2101      	movs	r1, #1
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 faf8 	bl	8010568 <prvAddCurrentTaskToDelayedList>
}
 800ff78:	bf00      	nop
 800ff7a:	3718      	adds	r7, #24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	240013c8 	.word	0x240013c8
 800ff84:	24000ecc 	.word	0x24000ecc

0800ff88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10a      	bne.n	800ffb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	617b      	str	r3, [r7, #20]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffb0:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <vTaskPlaceOnEventListRestricted+0x54>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3318      	adds	r3, #24
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7fe fdfa 	bl	800ebb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d002      	beq.n	800ffca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ffc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffca:	6879      	ldr	r1, [r7, #4]
 800ffcc:	68b8      	ldr	r0, [r7, #8]
 800ffce:	f000 facb 	bl	8010568 <prvAddCurrentTaskToDelayedList>
	}
 800ffd2:	bf00      	nop
 800ffd4:	3718      	adds	r7, #24
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	24000ecc 	.word	0x24000ecc

0800ffe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10a      	bne.n	801000c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	60fb      	str	r3, [r7, #12]
}
 8010008:	bf00      	nop
 801000a:	e7fe      	b.n	801000a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	3318      	adds	r3, #24
 8010010:	4618      	mov	r0, r3
 8010012:	f7fe fe2b 	bl	800ec6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010016:	4b1e      	ldr	r3, [pc, #120]	; (8010090 <xTaskRemoveFromEventList+0xb0>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d11d      	bne.n	801005a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	3304      	adds	r3, #4
 8010022:	4618      	mov	r0, r3
 8010024:	f7fe fe22 	bl	800ec6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002c:	4b19      	ldr	r3, [pc, #100]	; (8010094 <xTaskRemoveFromEventList+0xb4>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	429a      	cmp	r2, r3
 8010032:	d903      	bls.n	801003c <xTaskRemoveFromEventList+0x5c>
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010038:	4a16      	ldr	r2, [pc, #88]	; (8010094 <xTaskRemoveFromEventList+0xb4>)
 801003a:	6013      	str	r3, [r2, #0]
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4a13      	ldr	r2, [pc, #76]	; (8010098 <xTaskRemoveFromEventList+0xb8>)
 801004a:	441a      	add	r2, r3
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	3304      	adds	r3, #4
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7fe fdad 	bl	800ebb2 <vListInsertEnd>
 8010058:	e005      	b.n	8010066 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	3318      	adds	r3, #24
 801005e:	4619      	mov	r1, r3
 8010060:	480e      	ldr	r0, [pc, #56]	; (801009c <xTaskRemoveFromEventList+0xbc>)
 8010062:	f7fe fda6 	bl	800ebb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006a:	4b0d      	ldr	r3, [pc, #52]	; (80100a0 <xTaskRemoveFromEventList+0xc0>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010070:	429a      	cmp	r2, r3
 8010072:	d905      	bls.n	8010080 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010074:	2301      	movs	r3, #1
 8010076:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010078:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <xTaskRemoveFromEventList+0xc4>)
 801007a:	2201      	movs	r2, #1
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	e001      	b.n	8010084 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010080:	2300      	movs	r3, #0
 8010082:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010084:	697b      	ldr	r3, [r7, #20]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	240013c8 	.word	0x240013c8
 8010094:	240013a8 	.word	0x240013a8
 8010098:	24000ed0 	.word	0x24000ed0
 801009c:	24001360 	.word	0x24001360
 80100a0:	24000ecc 	.word	0x24000ecc
 80100a4:	240013b4 	.word	0x240013b4

080100a8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80100b2:	4b29      	ldr	r3, [pc, #164]	; (8010158 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10a      	bne.n	80100d0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	613b      	str	r3, [r7, #16]
}
 80100cc:	bf00      	nop
 80100ce:	e7fe      	b.n	80100ce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10a      	bne.n	80100fc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80100e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ea:	f383 8811 	msr	BASEPRI, r3
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	f3bf 8f4f 	dsb	sy
 80100f6:	60fb      	str	r3, [r7, #12]
}
 80100f8:	bf00      	nop
 80100fa:	e7fe      	b.n	80100fa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7fe fdb5 	bl	800ec6c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	3304      	adds	r3, #4
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fdb0 	bl	800ec6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010110:	4b12      	ldr	r3, [pc, #72]	; (801015c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	429a      	cmp	r2, r3
 8010116:	d903      	bls.n	8010120 <vTaskRemoveFromUnorderedEventList+0x78>
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011c:	4a0f      	ldr	r2, [pc, #60]	; (801015c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010124:	4613      	mov	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	4413      	add	r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	4a0c      	ldr	r2, [pc, #48]	; (8010160 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801012e:	441a      	add	r2, r3
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	3304      	adds	r3, #4
 8010134:	4619      	mov	r1, r3
 8010136:	4610      	mov	r0, r2
 8010138:	f7fe fd3b 	bl	800ebb2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010140:	4b08      	ldr	r3, [pc, #32]	; (8010164 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010146:	429a      	cmp	r2, r3
 8010148:	d902      	bls.n	8010150 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801014a:	4b07      	ldr	r3, [pc, #28]	; (8010168 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801014c:	2201      	movs	r2, #1
 801014e:	601a      	str	r2, [r3, #0]
	}
}
 8010150:	bf00      	nop
 8010152:	3718      	adds	r7, #24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	240013c8 	.word	0x240013c8
 801015c:	240013a8 	.word	0x240013a8
 8010160:	24000ed0 	.word	0x24000ed0
 8010164:	24000ecc 	.word	0x24000ecc
 8010168:	240013b4 	.word	0x240013b4

0801016c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010174:	4b06      	ldr	r3, [pc, #24]	; (8010190 <vTaskInternalSetTimeOutState+0x24>)
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801017c:	4b05      	ldr	r3, [pc, #20]	; (8010194 <vTaskInternalSetTimeOutState+0x28>)
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	605a      	str	r2, [r3, #4]
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr
 8010190:	240013b8 	.word	0x240013b8
 8010194:	240013a4 	.word	0x240013a4

08010198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b088      	sub	sp, #32
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10a      	bne.n	80101be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80101a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	613b      	str	r3, [r7, #16]
}
 80101ba:	bf00      	nop
 80101bc:	e7fe      	b.n	80101bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10a      	bne.n	80101da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	60fb      	str	r3, [r7, #12]
}
 80101d6:	bf00      	nop
 80101d8:	e7fe      	b.n	80101d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80101da:	f000 feb3 	bl	8010f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80101de:	4b1d      	ldr	r3, [pc, #116]	; (8010254 <xTaskCheckForTimeOut+0xbc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101f6:	d102      	bne.n	80101fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80101f8:	2300      	movs	r3, #0
 80101fa:	61fb      	str	r3, [r7, #28]
 80101fc:	e023      	b.n	8010246 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <xTaskCheckForTimeOut+0xc0>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	429a      	cmp	r2, r3
 8010208:	d007      	beq.n	801021a <xTaskCheckForTimeOut+0x82>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	429a      	cmp	r2, r3
 8010212:	d302      	bcc.n	801021a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010214:	2301      	movs	r3, #1
 8010216:	61fb      	str	r3, [r7, #28]
 8010218:	e015      	b.n	8010246 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	697a      	ldr	r2, [r7, #20]
 8010220:	429a      	cmp	r2, r3
 8010222:	d20b      	bcs.n	801023c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	1ad2      	subs	r2, r2, r3
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7ff ff9b 	bl	801016c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010236:	2300      	movs	r3, #0
 8010238:	61fb      	str	r3, [r7, #28]
 801023a:	e004      	b.n	8010246 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010242:	2301      	movs	r3, #1
 8010244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010246:	f000 fead 	bl	8010fa4 <vPortExitCritical>

	return xReturn;
 801024a:	69fb      	ldr	r3, [r7, #28]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3720      	adds	r7, #32
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	240013a4 	.word	0x240013a4
 8010258:	240013b8 	.word	0x240013b8

0801025c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010260:	4b03      	ldr	r3, [pc, #12]	; (8010270 <vTaskMissedYield+0x14>)
 8010262:	2201      	movs	r2, #1
 8010264:	601a      	str	r2, [r3, #0]
}
 8010266:	bf00      	nop
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr
 8010270:	240013b4 	.word	0x240013b4

08010274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801027c:	f000 f852 	bl	8010324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010280:	4b06      	ldr	r3, [pc, #24]	; (801029c <prvIdleTask+0x28>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d9f9      	bls.n	801027c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010288:	4b05      	ldr	r3, [pc, #20]	; (80102a0 <prvIdleTask+0x2c>)
 801028a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010298:	e7f0      	b.n	801027c <prvIdleTask+0x8>
 801029a:	bf00      	nop
 801029c:	24000ed0 	.word	0x24000ed0
 80102a0:	e000ed04 	.word	0xe000ed04

080102a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102aa:	2300      	movs	r3, #0
 80102ac:	607b      	str	r3, [r7, #4]
 80102ae:	e00c      	b.n	80102ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	4613      	mov	r3, r2
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4413      	add	r3, r2
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4a12      	ldr	r2, [pc, #72]	; (8010304 <prvInitialiseTaskLists+0x60>)
 80102bc:	4413      	add	r3, r2
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fe fc4a 	bl	800eb58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3301      	adds	r3, #1
 80102c8:	607b      	str	r3, [r7, #4]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b37      	cmp	r3, #55	; 0x37
 80102ce:	d9ef      	bls.n	80102b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80102d0:	480d      	ldr	r0, [pc, #52]	; (8010308 <prvInitialiseTaskLists+0x64>)
 80102d2:	f7fe fc41 	bl	800eb58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80102d6:	480d      	ldr	r0, [pc, #52]	; (801030c <prvInitialiseTaskLists+0x68>)
 80102d8:	f7fe fc3e 	bl	800eb58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80102dc:	480c      	ldr	r0, [pc, #48]	; (8010310 <prvInitialiseTaskLists+0x6c>)
 80102de:	f7fe fc3b 	bl	800eb58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80102e2:	480c      	ldr	r0, [pc, #48]	; (8010314 <prvInitialiseTaskLists+0x70>)
 80102e4:	f7fe fc38 	bl	800eb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80102e8:	480b      	ldr	r0, [pc, #44]	; (8010318 <prvInitialiseTaskLists+0x74>)
 80102ea:	f7fe fc35 	bl	800eb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80102ee:	4b0b      	ldr	r3, [pc, #44]	; (801031c <prvInitialiseTaskLists+0x78>)
 80102f0:	4a05      	ldr	r2, [pc, #20]	; (8010308 <prvInitialiseTaskLists+0x64>)
 80102f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80102f4:	4b0a      	ldr	r3, [pc, #40]	; (8010320 <prvInitialiseTaskLists+0x7c>)
 80102f6:	4a05      	ldr	r2, [pc, #20]	; (801030c <prvInitialiseTaskLists+0x68>)
 80102f8:	601a      	str	r2, [r3, #0]
}
 80102fa:	bf00      	nop
 80102fc:	3708      	adds	r7, #8
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	24000ed0 	.word	0x24000ed0
 8010308:	24001330 	.word	0x24001330
 801030c:	24001344 	.word	0x24001344
 8010310:	24001360 	.word	0x24001360
 8010314:	24001374 	.word	0x24001374
 8010318:	2400138c 	.word	0x2400138c
 801031c:	24001358 	.word	0x24001358
 8010320:	2400135c 	.word	0x2400135c

08010324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801032a:	e019      	b.n	8010360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801032c:	f000 fe0a 	bl	8010f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010330:	4b10      	ldr	r3, [pc, #64]	; (8010374 <prvCheckTasksWaitingTermination+0x50>)
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	3304      	adds	r3, #4
 801033c:	4618      	mov	r0, r3
 801033e:	f7fe fc95 	bl	800ec6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010342:	4b0d      	ldr	r3, [pc, #52]	; (8010378 <prvCheckTasksWaitingTermination+0x54>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3b01      	subs	r3, #1
 8010348:	4a0b      	ldr	r2, [pc, #44]	; (8010378 <prvCheckTasksWaitingTermination+0x54>)
 801034a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801034c:	4b0b      	ldr	r3, [pc, #44]	; (801037c <prvCheckTasksWaitingTermination+0x58>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3b01      	subs	r3, #1
 8010352:	4a0a      	ldr	r2, [pc, #40]	; (801037c <prvCheckTasksWaitingTermination+0x58>)
 8010354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010356:	f000 fe25 	bl	8010fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f810 	bl	8010380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010360:	4b06      	ldr	r3, [pc, #24]	; (801037c <prvCheckTasksWaitingTermination+0x58>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1e1      	bne.n	801032c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010368:	bf00      	nop
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	24001374 	.word	0x24001374
 8010378:	240013a0 	.word	0x240013a0
 801037c:	24001388 	.word	0x24001388

08010380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801038e:	2b00      	cmp	r3, #0
 8010390:	d108      	bne.n	80103a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010396:	4618      	mov	r0, r3
 8010398:	f000 ffc2 	bl	8011320 <vPortFree>
				vPortFree( pxTCB );
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 ffbf 	bl	8011320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80103a2:	e018      	b.n	80103d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d103      	bne.n	80103b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 ffb6 	bl	8011320 <vPortFree>
	}
 80103b4:	e00f      	b.n	80103d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103bc:	2b02      	cmp	r3, #2
 80103be:	d00a      	beq.n	80103d6 <prvDeleteTCB+0x56>
	__asm volatile
 80103c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c4:	f383 8811 	msr	BASEPRI, r3
 80103c8:	f3bf 8f6f 	isb	sy
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	60fb      	str	r3, [r7, #12]
}
 80103d2:	bf00      	nop
 80103d4:	e7fe      	b.n	80103d4 <prvDeleteTCB+0x54>
	}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <prvResetNextTaskUnblockTime+0x38>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d104      	bne.n	80103fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80103f0:	4b0a      	ldr	r3, [pc, #40]	; (801041c <prvResetNextTaskUnblockTime+0x3c>)
 80103f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80103f8:	e008      	b.n	801040c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103fa:	4b07      	ldr	r3, [pc, #28]	; (8010418 <prvResetNextTaskUnblockTime+0x38>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4a04      	ldr	r2, [pc, #16]	; (801041c <prvResetNextTaskUnblockTime+0x3c>)
 801040a:	6013      	str	r3, [r2, #0]
}
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	24001358 	.word	0x24001358
 801041c:	240013c0 	.word	0x240013c0

08010420 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010426:	4b0b      	ldr	r3, [pc, #44]	; (8010454 <xTaskGetSchedulerState+0x34>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d102      	bne.n	8010434 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801042e:	2301      	movs	r3, #1
 8010430:	607b      	str	r3, [r7, #4]
 8010432:	e008      	b.n	8010446 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010434:	4b08      	ldr	r3, [pc, #32]	; (8010458 <xTaskGetSchedulerState+0x38>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d102      	bne.n	8010442 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801043c:	2302      	movs	r3, #2
 801043e:	607b      	str	r3, [r7, #4]
 8010440:	e001      	b.n	8010446 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010442:	2300      	movs	r3, #0
 8010444:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010446:	687b      	ldr	r3, [r7, #4]
	}
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr
 8010454:	240013ac 	.word	0x240013ac
 8010458:	240013c8 	.word	0x240013c8

0801045c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801045c:	b580      	push	{r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010468:	2300      	movs	r3, #0
 801046a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d056      	beq.n	8010520 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010472:	4b2e      	ldr	r3, [pc, #184]	; (801052c <xTaskPriorityDisinherit+0xd0>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	693a      	ldr	r2, [r7, #16]
 8010478:	429a      	cmp	r2, r3
 801047a:	d00a      	beq.n	8010492 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010480:	f383 8811 	msr	BASEPRI, r3
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	60fb      	str	r3, [r7, #12]
}
 801048e:	bf00      	nop
 8010490:	e7fe      	b.n	8010490 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10a      	bne.n	80104b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	60bb      	str	r3, [r7, #8]
}
 80104ac:	bf00      	nop
 80104ae:	e7fe      	b.n	80104ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104b4:	1e5a      	subs	r2, r3, #1
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d02c      	beq.n	8010520 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d128      	bne.n	8010520 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	3304      	adds	r3, #4
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fe fbca 	bl	800ec6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f0:	4b0f      	ldr	r3, [pc, #60]	; (8010530 <xTaskPriorityDisinherit+0xd4>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d903      	bls.n	8010500 <xTaskPriorityDisinherit+0xa4>
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fc:	4a0c      	ldr	r2, [pc, #48]	; (8010530 <xTaskPriorityDisinherit+0xd4>)
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010504:	4613      	mov	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4413      	add	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4a09      	ldr	r2, [pc, #36]	; (8010534 <xTaskPriorityDisinherit+0xd8>)
 801050e:	441a      	add	r2, r3
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	3304      	adds	r3, #4
 8010514:	4619      	mov	r1, r3
 8010516:	4610      	mov	r0, r2
 8010518:	f7fe fb4b 	bl	800ebb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801051c:	2301      	movs	r3, #1
 801051e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010520:	697b      	ldr	r3, [r7, #20]
	}
 8010522:	4618      	mov	r0, r3
 8010524:	3718      	adds	r7, #24
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	24000ecc 	.word	0x24000ecc
 8010530:	240013a8 	.word	0x240013a8
 8010534:	24000ed0 	.word	0x24000ed0

08010538 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801053e:	4b09      	ldr	r3, [pc, #36]	; (8010564 <uxTaskResetEventItemValue+0x2c>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	699b      	ldr	r3, [r3, #24]
 8010544:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010546:	4b07      	ldr	r3, [pc, #28]	; (8010564 <uxTaskResetEventItemValue+0x2c>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801054c:	4b05      	ldr	r3, [pc, #20]	; (8010564 <uxTaskResetEventItemValue+0x2c>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010554:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010556:	687b      	ldr	r3, [r7, #4]
}
 8010558:	4618      	mov	r0, r3
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	24000ecc 	.word	0x24000ecc

08010568 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010572:	4b21      	ldr	r3, [pc, #132]	; (80105f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010578:	4b20      	ldr	r3, [pc, #128]	; (80105fc <prvAddCurrentTaskToDelayedList+0x94>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3304      	adds	r3, #4
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fb74 	bl	800ec6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801058a:	d10a      	bne.n	80105a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d007      	beq.n	80105a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010592:	4b1a      	ldr	r3, [pc, #104]	; (80105fc <prvAddCurrentTaskToDelayedList+0x94>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3304      	adds	r3, #4
 8010598:	4619      	mov	r1, r3
 801059a:	4819      	ldr	r0, [pc, #100]	; (8010600 <prvAddCurrentTaskToDelayedList+0x98>)
 801059c:	f7fe fb09 	bl	800ebb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80105a0:	e026      	b.n	80105f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4413      	add	r3, r2
 80105a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80105aa:	4b14      	ldr	r3, [pc, #80]	; (80105fc <prvAddCurrentTaskToDelayedList+0x94>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d209      	bcs.n	80105ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105ba:	4b12      	ldr	r3, [pc, #72]	; (8010604 <prvAddCurrentTaskToDelayedList+0x9c>)
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <prvAddCurrentTaskToDelayedList+0x94>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3304      	adds	r3, #4
 80105c4:	4619      	mov	r1, r3
 80105c6:	4610      	mov	r0, r2
 80105c8:	f7fe fb17 	bl	800ebfa <vListInsert>
}
 80105cc:	e010      	b.n	80105f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105ce:	4b0e      	ldr	r3, [pc, #56]	; (8010608 <prvAddCurrentTaskToDelayedList+0xa0>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b0a      	ldr	r3, [pc, #40]	; (80105fc <prvAddCurrentTaskToDelayedList+0x94>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3304      	adds	r3, #4
 80105d8:	4619      	mov	r1, r3
 80105da:	4610      	mov	r0, r2
 80105dc:	f7fe fb0d 	bl	800ebfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80105e0:	4b0a      	ldr	r3, [pc, #40]	; (801060c <prvAddCurrentTaskToDelayedList+0xa4>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d202      	bcs.n	80105f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80105ea:	4a08      	ldr	r2, [pc, #32]	; (801060c <prvAddCurrentTaskToDelayedList+0xa4>)
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	6013      	str	r3, [r2, #0]
}
 80105f0:	bf00      	nop
 80105f2:	3710      	adds	r7, #16
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	240013a4 	.word	0x240013a4
 80105fc:	24000ecc 	.word	0x24000ecc
 8010600:	2400138c 	.word	0x2400138c
 8010604:	2400135c 	.word	0x2400135c
 8010608:	24001358 	.word	0x24001358
 801060c:	240013c0 	.word	0x240013c0

08010610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b08a      	sub	sp, #40	; 0x28
 8010614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801061a:	f000 fb07 	bl	8010c2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801061e:	4b1c      	ldr	r3, [pc, #112]	; (8010690 <xTimerCreateTimerTask+0x80>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d021      	beq.n	801066a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010626:	2300      	movs	r3, #0
 8010628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801062a:	2300      	movs	r3, #0
 801062c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801062e:	1d3a      	adds	r2, r7, #4
 8010630:	f107 0108 	add.w	r1, r7, #8
 8010634:	f107 030c 	add.w	r3, r7, #12
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe f8d7 	bl	800e7ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	9202      	str	r2, [sp, #8]
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	2302      	movs	r3, #2
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	2300      	movs	r3, #0
 801064e:	460a      	mov	r2, r1
 8010650:	4910      	ldr	r1, [pc, #64]	; (8010694 <xTimerCreateTimerTask+0x84>)
 8010652:	4811      	ldr	r0, [pc, #68]	; (8010698 <xTimerCreateTimerTask+0x88>)
 8010654:	f7ff f820 	bl	800f698 <xTaskCreateStatic>
 8010658:	4603      	mov	r3, r0
 801065a:	4a10      	ldr	r2, [pc, #64]	; (801069c <xTimerCreateTimerTask+0x8c>)
 801065c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801065e:	4b0f      	ldr	r3, [pc, #60]	; (801069c <xTimerCreateTimerTask+0x8c>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010666:	2301      	movs	r3, #1
 8010668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10a      	bne.n	8010686 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	613b      	str	r3, [r7, #16]
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010686:	697b      	ldr	r3, [r7, #20]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	240013fc 	.word	0x240013fc
 8010694:	08012258 	.word	0x08012258
 8010698:	080107d5 	.word	0x080107d5
 801069c:	24001400 	.word	0x24001400

080106a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
 80106ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d10a      	bne.n	80106ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80106b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	623b      	str	r3, [r7, #32]
}
 80106ca:	bf00      	nop
 80106cc:	e7fe      	b.n	80106cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80106ce:	4b1a      	ldr	r3, [pc, #104]	; (8010738 <xTimerGenericCommand+0x98>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d02a      	beq.n	801072c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b05      	cmp	r3, #5
 80106e6:	dc18      	bgt.n	801071a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80106e8:	f7ff fe9a 	bl	8010420 <xTaskGetSchedulerState>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d109      	bne.n	8010706 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80106f2:	4b11      	ldr	r3, [pc, #68]	; (8010738 <xTimerGenericCommand+0x98>)
 80106f4:	6818      	ldr	r0, [r3, #0]
 80106f6:	f107 0110 	add.w	r1, r7, #16
 80106fa:	2300      	movs	r3, #0
 80106fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106fe:	f7fe fbe3 	bl	800eec8 <xQueueGenericSend>
 8010702:	6278      	str	r0, [r7, #36]	; 0x24
 8010704:	e012      	b.n	801072c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010706:	4b0c      	ldr	r3, [pc, #48]	; (8010738 <xTimerGenericCommand+0x98>)
 8010708:	6818      	ldr	r0, [r3, #0]
 801070a:	f107 0110 	add.w	r1, r7, #16
 801070e:	2300      	movs	r3, #0
 8010710:	2200      	movs	r2, #0
 8010712:	f7fe fbd9 	bl	800eec8 <xQueueGenericSend>
 8010716:	6278      	str	r0, [r7, #36]	; 0x24
 8010718:	e008      	b.n	801072c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801071a:	4b07      	ldr	r3, [pc, #28]	; (8010738 <xTimerGenericCommand+0x98>)
 801071c:	6818      	ldr	r0, [r3, #0]
 801071e:	f107 0110 	add.w	r1, r7, #16
 8010722:	2300      	movs	r3, #0
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	f7fe fccd 	bl	800f0c4 <xQueueGenericSendFromISR>
 801072a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801072e:	4618      	mov	r0, r3
 8010730:	3728      	adds	r7, #40	; 0x28
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	240013fc 	.word	0x240013fc

0801073c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b088      	sub	sp, #32
 8010740:	af02      	add	r7, sp, #8
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010746:	4b22      	ldr	r3, [pc, #136]	; (80107d0 <prvProcessExpiredTimer+0x94>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	3304      	adds	r3, #4
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fa89 	bl	800ec6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010760:	f003 0304 	and.w	r3, r3, #4
 8010764:	2b00      	cmp	r3, #0
 8010766:	d022      	beq.n	80107ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	699a      	ldr	r2, [r3, #24]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	18d1      	adds	r1, r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	683a      	ldr	r2, [r7, #0]
 8010774:	6978      	ldr	r0, [r7, #20]
 8010776:	f000 f8d1 	bl	801091c <prvInsertTimerInActiveList>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d01f      	beq.n	80107c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010780:	2300      	movs	r3, #0
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	2300      	movs	r3, #0
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	2100      	movs	r1, #0
 801078a:	6978      	ldr	r0, [r7, #20]
 801078c:	f7ff ff88 	bl	80106a0 <xTimerGenericCommand>
 8010790:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d113      	bne.n	80107c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079c:	f383 8811 	msr	BASEPRI, r3
 80107a0:	f3bf 8f6f 	isb	sy
 80107a4:	f3bf 8f4f 	dsb	sy
 80107a8:	60fb      	str	r3, [r7, #12]
}
 80107aa:	bf00      	nop
 80107ac:	e7fe      	b.n	80107ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107b4:	f023 0301 	bic.w	r3, r3, #1
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	6a1b      	ldr	r3, [r3, #32]
 80107c4:	6978      	ldr	r0, [r7, #20]
 80107c6:	4798      	blx	r3
}
 80107c8:	bf00      	nop
 80107ca:	3718      	adds	r7, #24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	240013f4 	.word	0x240013f4

080107d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107dc:	f107 0308 	add.w	r3, r7, #8
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 f857 	bl	8010894 <prvGetNextExpireTime>
 80107e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	4619      	mov	r1, r3
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 f803 	bl	80107f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80107f2:	f000 f8d5 	bl	80109a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107f6:	e7f1      	b.n	80107dc <prvTimerTask+0x8>

080107f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010802:	f7ff f985 	bl	800fb10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010806:	f107 0308 	add.w	r3, r7, #8
 801080a:	4618      	mov	r0, r3
 801080c:	f000 f866 	bl	80108dc <prvSampleTimeNow>
 8010810:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d130      	bne.n	801087a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10a      	bne.n	8010834 <prvProcessTimerOrBlockTask+0x3c>
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	429a      	cmp	r2, r3
 8010824:	d806      	bhi.n	8010834 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010826:	f7ff f981 	bl	800fb2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801082a:	68f9      	ldr	r1, [r7, #12]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7ff ff85 	bl	801073c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010832:	e024      	b.n	801087e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d008      	beq.n	801084c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801083a:	4b13      	ldr	r3, [pc, #76]	; (8010888 <prvProcessTimerOrBlockTask+0x90>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d101      	bne.n	8010848 <prvProcessTimerOrBlockTask+0x50>
 8010844:	2301      	movs	r3, #1
 8010846:	e000      	b.n	801084a <prvProcessTimerOrBlockTask+0x52>
 8010848:	2300      	movs	r3, #0
 801084a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801084c:	4b0f      	ldr	r3, [pc, #60]	; (801088c <prvProcessTimerOrBlockTask+0x94>)
 801084e:	6818      	ldr	r0, [r3, #0]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	683a      	ldr	r2, [r7, #0]
 8010858:	4619      	mov	r1, r3
 801085a:	f7fe fee9 	bl	800f630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801085e:	f7ff f965 	bl	800fb2c <xTaskResumeAll>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10a      	bne.n	801087e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010868:	4b09      	ldr	r3, [pc, #36]	; (8010890 <prvProcessTimerOrBlockTask+0x98>)
 801086a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801086e:	601a      	str	r2, [r3, #0]
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	f3bf 8f6f 	isb	sy
}
 8010878:	e001      	b.n	801087e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801087a:	f7ff f957 	bl	800fb2c <xTaskResumeAll>
}
 801087e:	bf00      	nop
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	240013f8 	.word	0x240013f8
 801088c:	240013fc 	.word	0x240013fc
 8010890:	e000ed04 	.word	0xe000ed04

08010894 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801089c:	4b0e      	ldr	r3, [pc, #56]	; (80108d8 <prvGetNextExpireTime+0x44>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d101      	bne.n	80108aa <prvGetNextExpireTime+0x16>
 80108a6:	2201      	movs	r2, #1
 80108a8:	e000      	b.n	80108ac <prvGetNextExpireTime+0x18>
 80108aa:	2200      	movs	r2, #0
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d105      	bne.n	80108c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108b8:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <prvGetNextExpireTime+0x44>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	60fb      	str	r3, [r7, #12]
 80108c2:	e001      	b.n	80108c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80108c8:	68fb      	ldr	r3, [r7, #12]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	240013f4 	.word	0x240013f4

080108dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80108e4:	f7ff f9c0 	bl	800fc68 <xTaskGetTickCount>
 80108e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80108ea:	4b0b      	ldr	r3, [pc, #44]	; (8010918 <prvSampleTimeNow+0x3c>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d205      	bcs.n	8010900 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80108f4:	f000 f936 	bl	8010b64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2201      	movs	r2, #1
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	e002      	b.n	8010906 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010906:	4a04      	ldr	r2, [pc, #16]	; (8010918 <prvSampleTimeNow+0x3c>)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801090c:	68fb      	ldr	r3, [r7, #12]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	24001404 	.word	0x24001404

0801091c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801092a:	2300      	movs	r3, #0
 801092c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	429a      	cmp	r2, r3
 8010940:	d812      	bhi.n	8010968 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	1ad2      	subs	r2, r2, r3
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	699b      	ldr	r3, [r3, #24]
 801094c:	429a      	cmp	r2, r3
 801094e:	d302      	bcc.n	8010956 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010950:	2301      	movs	r3, #1
 8010952:	617b      	str	r3, [r7, #20]
 8010954:	e01b      	b.n	801098e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010956:	4b10      	ldr	r3, [pc, #64]	; (8010998 <prvInsertTimerInActiveList+0x7c>)
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	3304      	adds	r3, #4
 801095e:	4619      	mov	r1, r3
 8010960:	4610      	mov	r0, r2
 8010962:	f7fe f94a 	bl	800ebfa <vListInsert>
 8010966:	e012      	b.n	801098e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	429a      	cmp	r2, r3
 801096e:	d206      	bcs.n	801097e <prvInsertTimerInActiveList+0x62>
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d302      	bcc.n	801097e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010978:	2301      	movs	r3, #1
 801097a:	617b      	str	r3, [r7, #20]
 801097c:	e007      	b.n	801098e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801097e:	4b07      	ldr	r3, [pc, #28]	; (801099c <prvInsertTimerInActiveList+0x80>)
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3304      	adds	r3, #4
 8010986:	4619      	mov	r1, r3
 8010988:	4610      	mov	r0, r2
 801098a:	f7fe f936 	bl	800ebfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801098e:	697b      	ldr	r3, [r7, #20]
}
 8010990:	4618      	mov	r0, r3
 8010992:	3718      	adds	r7, #24
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	240013f8 	.word	0x240013f8
 801099c:	240013f4 	.word	0x240013f4

080109a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08e      	sub	sp, #56	; 0x38
 80109a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109a6:	e0ca      	b.n	8010b3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	da18      	bge.n	80109e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80109ae:	1d3b      	adds	r3, r7, #4
 80109b0:	3304      	adds	r3, #4
 80109b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d10a      	bne.n	80109d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	61fb      	str	r3, [r7, #28]
}
 80109cc:	bf00      	nop
 80109ce:	e7fe      	b.n	80109ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109d6:	6850      	ldr	r0, [r2, #4]
 80109d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109da:	6892      	ldr	r2, [r2, #8]
 80109dc:	4611      	mov	r1, r2
 80109de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f2c0 80aa 	blt.w	8010b3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80109ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	3304      	adds	r3, #4
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fe f937 	bl	800ec6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109fe:	463b      	mov	r3, r7
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff ff6b 	bl	80108dc <prvSampleTimeNow>
 8010a06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2b09      	cmp	r3, #9
 8010a0c:	f200 8097 	bhi.w	8010b3e <prvProcessReceivedCommands+0x19e>
 8010a10:	a201      	add	r2, pc, #4	; (adr r2, 8010a18 <prvProcessReceivedCommands+0x78>)
 8010a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a16:	bf00      	nop
 8010a18:	08010a41 	.word	0x08010a41
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a41 	.word	0x08010a41
 8010a24:	08010ab5 	.word	0x08010ab5
 8010a28:	08010ac9 	.word	0x08010ac9
 8010a2c:	08010b13 	.word	0x08010b13
 8010a30:	08010a41 	.word	0x08010a41
 8010a34:	08010a41 	.word	0x08010a41
 8010a38:	08010ab5 	.word	0x08010ab5
 8010a3c:	08010ac9 	.word	0x08010ac9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a46:	f043 0301 	orr.w	r3, r3, #1
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a52:	68ba      	ldr	r2, [r7, #8]
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	699b      	ldr	r3, [r3, #24]
 8010a58:	18d1      	adds	r1, r2, r3
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a60:	f7ff ff5c 	bl	801091c <prvInsertTimerInActiveList>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d069      	beq.n	8010b3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d05e      	beq.n	8010b3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	441a      	add	r2, r3
 8010a88:	2300      	movs	r3, #0
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	2100      	movs	r1, #0
 8010a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a92:	f7ff fe05 	bl	80106a0 <xTimerGenericCommand>
 8010a96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010a98:	6a3b      	ldr	r3, [r7, #32]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d14f      	bne.n	8010b3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa2:	f383 8811 	msr	BASEPRI, r3
 8010aa6:	f3bf 8f6f 	isb	sy
 8010aaa:	f3bf 8f4f 	dsb	sy
 8010aae:	61bb      	str	r3, [r7, #24]
}
 8010ab0:	bf00      	nop
 8010ab2:	e7fe      	b.n	8010ab2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aba:	f023 0301 	bic.w	r3, r3, #1
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ac6:	e03a      	b.n	8010b3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ace:	f043 0301 	orr.w	r3, r3, #1
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ade:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae2:	699b      	ldr	r3, [r3, #24]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10a      	bne.n	8010afe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aec:	f383 8811 	msr	BASEPRI, r3
 8010af0:	f3bf 8f6f 	isb	sy
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	617b      	str	r3, [r7, #20]
}
 8010afa:	bf00      	nop
 8010afc:	e7fe      	b.n	8010afc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	699a      	ldr	r2, [r3, #24]
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	18d1      	adds	r1, r2, r3
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b0c:	f7ff ff06 	bl	801091c <prvInsertTimerInActiveList>
					break;
 8010b10:	e015      	b.n	8010b3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b18:	f003 0302 	and.w	r3, r3, #2
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d103      	bne.n	8010b28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b22:	f000 fbfd 	bl	8011320 <vPortFree>
 8010b26:	e00a      	b.n	8010b3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b2e:	f023 0301 	bic.w	r3, r3, #1
 8010b32:	b2da      	uxtb	r2, r3
 8010b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010b3a:	e000      	b.n	8010b3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010b3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b3e:	4b08      	ldr	r3, [pc, #32]	; (8010b60 <prvProcessReceivedCommands+0x1c0>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	1d39      	adds	r1, r7, #4
 8010b44:	2200      	movs	r2, #0
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fb58 	bl	800f1fc <xQueueReceive>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	f47f af2a 	bne.w	80109a8 <prvProcessReceivedCommands+0x8>
	}
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	3730      	adds	r7, #48	; 0x30
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	240013fc 	.word	0x240013fc

08010b64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b088      	sub	sp, #32
 8010b68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b6a:	e048      	b.n	8010bfe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b6c:	4b2d      	ldr	r3, [pc, #180]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b76:	4b2b      	ldr	r3, [pc, #172]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	3304      	adds	r3, #4
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe f871 	bl	800ec6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d02e      	beq.n	8010bfe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010baa:	68ba      	ldr	r2, [r7, #8]
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d90e      	bls.n	8010bd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bbe:	4b19      	ldr	r3, [pc, #100]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	4610      	mov	r0, r2
 8010bca:	f7fe f816 	bl	800ebfa <vListInsert>
 8010bce:	e016      	b.n	8010bfe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	9300      	str	r3, [sp, #0]
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	693a      	ldr	r2, [r7, #16]
 8010bd8:	2100      	movs	r1, #0
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7ff fd60 	bl	80106a0 <xTimerGenericCommand>
 8010be0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d10a      	bne.n	8010bfe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	603b      	str	r3, [r7, #0]
}
 8010bfa:	bf00      	nop
 8010bfc:	e7fe      	b.n	8010bfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bfe:	4b09      	ldr	r3, [pc, #36]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1b1      	bne.n	8010b6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c08:	4b06      	ldr	r3, [pc, #24]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c0e:	4b06      	ldr	r3, [pc, #24]	; (8010c28 <prvSwitchTimerLists+0xc4>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	4a04      	ldr	r2, [pc, #16]	; (8010c24 <prvSwitchTimerLists+0xc0>)
 8010c14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c16:	4a04      	ldr	r2, [pc, #16]	; (8010c28 <prvSwitchTimerLists+0xc4>)
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	6013      	str	r3, [r2, #0]
}
 8010c1c:	bf00      	nop
 8010c1e:	3718      	adds	r7, #24
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	240013f4 	.word	0x240013f4
 8010c28:	240013f8 	.word	0x240013f8

08010c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010c32:	f000 f987 	bl	8010f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010c36:	4b15      	ldr	r3, [pc, #84]	; (8010c8c <prvCheckForValidListAndQueue+0x60>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d120      	bne.n	8010c80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c3e:	4814      	ldr	r0, [pc, #80]	; (8010c90 <prvCheckForValidListAndQueue+0x64>)
 8010c40:	f7fd ff8a 	bl	800eb58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c44:	4813      	ldr	r0, [pc, #76]	; (8010c94 <prvCheckForValidListAndQueue+0x68>)
 8010c46:	f7fd ff87 	bl	800eb58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c4a:	4b13      	ldr	r3, [pc, #76]	; (8010c98 <prvCheckForValidListAndQueue+0x6c>)
 8010c4c:	4a10      	ldr	r2, [pc, #64]	; (8010c90 <prvCheckForValidListAndQueue+0x64>)
 8010c4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010c50:	4b12      	ldr	r3, [pc, #72]	; (8010c9c <prvCheckForValidListAndQueue+0x70>)
 8010c52:	4a10      	ldr	r2, [pc, #64]	; (8010c94 <prvCheckForValidListAndQueue+0x68>)
 8010c54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c56:	2300      	movs	r3, #0
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	4b11      	ldr	r3, [pc, #68]	; (8010ca0 <prvCheckForValidListAndQueue+0x74>)
 8010c5c:	4a11      	ldr	r2, [pc, #68]	; (8010ca4 <prvCheckForValidListAndQueue+0x78>)
 8010c5e:	2110      	movs	r1, #16
 8010c60:	200a      	movs	r0, #10
 8010c62:	f7fe f895 	bl	800ed90 <xQueueGenericCreateStatic>
 8010c66:	4603      	mov	r3, r0
 8010c68:	4a08      	ldr	r2, [pc, #32]	; (8010c8c <prvCheckForValidListAndQueue+0x60>)
 8010c6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010c6c:	4b07      	ldr	r3, [pc, #28]	; (8010c8c <prvCheckForValidListAndQueue+0x60>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d005      	beq.n	8010c80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010c74:	4b05      	ldr	r3, [pc, #20]	; (8010c8c <prvCheckForValidListAndQueue+0x60>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	490b      	ldr	r1, [pc, #44]	; (8010ca8 <prvCheckForValidListAndQueue+0x7c>)
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fe fcae 	bl	800f5dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c80:	f000 f990 	bl	8010fa4 <vPortExitCritical>
}
 8010c84:	bf00      	nop
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	240013fc 	.word	0x240013fc
 8010c90:	240013cc 	.word	0x240013cc
 8010c94:	240013e0 	.word	0x240013e0
 8010c98:	240013f4 	.word	0x240013f4
 8010c9c:	240013f8 	.word	0x240013f8
 8010ca0:	240014a8 	.word	0x240014a8
 8010ca4:	24001408 	.word	0x24001408
 8010ca8:	08012260 	.word	0x08012260

08010cac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08a      	sub	sp, #40	; 0x28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010cba:	f06f 0301 	mvn.w	r3, #1
 8010cbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ccc:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <xTimerPendFunctionCallFromISR+0x3c>)
 8010cce:	6818      	ldr	r0, [r3, #0]
 8010cd0:	f107 0114 	add.w	r1, r7, #20
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	683a      	ldr	r2, [r7, #0]
 8010cd8:	f7fe f9f4 	bl	800f0c4 <xQueueGenericSendFromISR>
 8010cdc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3728      	adds	r7, #40	; 0x28
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	240013fc 	.word	0x240013fc

08010cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3b04      	subs	r3, #4
 8010cfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	3b04      	subs	r3, #4
 8010d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	f023 0201 	bic.w	r2, r3, #1
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	3b04      	subs	r3, #4
 8010d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d1c:	4a0c      	ldr	r2, [pc, #48]	; (8010d50 <pxPortInitialiseStack+0x64>)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	3b14      	subs	r3, #20
 8010d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	3b04      	subs	r3, #4
 8010d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f06f 0202 	mvn.w	r2, #2
 8010d3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	3b20      	subs	r3, #32
 8010d40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d42:	68fb      	ldr	r3, [r7, #12]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3714      	adds	r7, #20
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	08010d55 	.word	0x08010d55

08010d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d5e:	4b12      	ldr	r3, [pc, #72]	; (8010da8 <prvTaskExitError+0x54>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d66:	d00a      	beq.n	8010d7e <prvTaskExitError+0x2a>
	__asm volatile
 8010d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	60fb      	str	r3, [r7, #12]
}
 8010d7a:	bf00      	nop
 8010d7c:	e7fe      	b.n	8010d7c <prvTaskExitError+0x28>
	__asm volatile
 8010d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	60bb      	str	r3, [r7, #8]
}
 8010d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d92:	bf00      	nop
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d0fc      	beq.n	8010d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d9a:	bf00      	nop
 8010d9c:	bf00      	nop
 8010d9e:	3714      	adds	r7, #20
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr
 8010da8:	24000014 	.word	0x24000014
 8010dac:	00000000 	.word	0x00000000

08010db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010db0:	4b07      	ldr	r3, [pc, #28]	; (8010dd0 <pxCurrentTCBConst2>)
 8010db2:	6819      	ldr	r1, [r3, #0]
 8010db4:	6808      	ldr	r0, [r1, #0]
 8010db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dba:	f380 8809 	msr	PSP, r0
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f04f 0000 	mov.w	r0, #0
 8010dc6:	f380 8811 	msr	BASEPRI, r0
 8010dca:	4770      	bx	lr
 8010dcc:	f3af 8000 	nop.w

08010dd0 <pxCurrentTCBConst2>:
 8010dd0:	24000ecc 	.word	0x24000ecc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop

08010dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010dd8:	4808      	ldr	r0, [pc, #32]	; (8010dfc <prvPortStartFirstTask+0x24>)
 8010dda:	6800      	ldr	r0, [r0, #0]
 8010ddc:	6800      	ldr	r0, [r0, #0]
 8010dde:	f380 8808 	msr	MSP, r0
 8010de2:	f04f 0000 	mov.w	r0, #0
 8010de6:	f380 8814 	msr	CONTROL, r0
 8010dea:	b662      	cpsie	i
 8010dec:	b661      	cpsie	f
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	df00      	svc	0
 8010df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010dfa:	bf00      	nop
 8010dfc:	e000ed08 	.word	0xe000ed08

08010e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e06:	4b46      	ldr	r3, [pc, #280]	; (8010f20 <xPortStartScheduler+0x120>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a46      	ldr	r2, [pc, #280]	; (8010f24 <xPortStartScheduler+0x124>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10a      	bne.n	8010e26 <xPortStartScheduler+0x26>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	613b      	str	r3, [r7, #16]
}
 8010e22:	bf00      	nop
 8010e24:	e7fe      	b.n	8010e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e26:	4b3e      	ldr	r3, [pc, #248]	; (8010f20 <xPortStartScheduler+0x120>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a3f      	ldr	r2, [pc, #252]	; (8010f28 <xPortStartScheduler+0x128>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d10a      	bne.n	8010e46 <xPortStartScheduler+0x46>
	__asm volatile
 8010e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e34:	f383 8811 	msr	BASEPRI, r3
 8010e38:	f3bf 8f6f 	isb	sy
 8010e3c:	f3bf 8f4f 	dsb	sy
 8010e40:	60fb      	str	r3, [r7, #12]
}
 8010e42:	bf00      	nop
 8010e44:	e7fe      	b.n	8010e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e46:	4b39      	ldr	r3, [pc, #228]	; (8010f2c <xPortStartScheduler+0x12c>)
 8010e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	22ff      	movs	r2, #255	; 0xff
 8010e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010e60:	78fb      	ldrb	r3, [r7, #3]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	4b31      	ldr	r3, [pc, #196]	; (8010f30 <xPortStartScheduler+0x130>)
 8010e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010e6e:	4b31      	ldr	r3, [pc, #196]	; (8010f34 <xPortStartScheduler+0x134>)
 8010e70:	2207      	movs	r2, #7
 8010e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e74:	e009      	b.n	8010e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010e76:	4b2f      	ldr	r3, [pc, #188]	; (8010f34 <xPortStartScheduler+0x134>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	4a2d      	ldr	r2, [pc, #180]	; (8010f34 <xPortStartScheduler+0x134>)
 8010e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010e80:	78fb      	ldrb	r3, [r7, #3]
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010e8a:	78fb      	ldrb	r3, [r7, #3]
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e92:	2b80      	cmp	r3, #128	; 0x80
 8010e94:	d0ef      	beq.n	8010e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e96:	4b27      	ldr	r3, [pc, #156]	; (8010f34 <xPortStartScheduler+0x134>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f1c3 0307 	rsb	r3, r3, #7
 8010e9e:	2b04      	cmp	r3, #4
 8010ea0:	d00a      	beq.n	8010eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea6:	f383 8811 	msr	BASEPRI, r3
 8010eaa:	f3bf 8f6f 	isb	sy
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	60bb      	str	r3, [r7, #8]
}
 8010eb4:	bf00      	nop
 8010eb6:	e7fe      	b.n	8010eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010eb8:	4b1e      	ldr	r3, [pc, #120]	; (8010f34 <xPortStartScheduler+0x134>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	021b      	lsls	r3, r3, #8
 8010ebe:	4a1d      	ldr	r2, [pc, #116]	; (8010f34 <xPortStartScheduler+0x134>)
 8010ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ec2:	4b1c      	ldr	r3, [pc, #112]	; (8010f34 <xPortStartScheduler+0x134>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010eca:	4a1a      	ldr	r2, [pc, #104]	; (8010f34 <xPortStartScheduler+0x134>)
 8010ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	b2da      	uxtb	r2, r3
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010ed6:	4b18      	ldr	r3, [pc, #96]	; (8010f38 <xPortStartScheduler+0x138>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a17      	ldr	r2, [pc, #92]	; (8010f38 <xPortStartScheduler+0x138>)
 8010edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ee2:	4b15      	ldr	r3, [pc, #84]	; (8010f38 <xPortStartScheduler+0x138>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4a14      	ldr	r2, [pc, #80]	; (8010f38 <xPortStartScheduler+0x138>)
 8010ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010eee:	f000 f8dd 	bl	80110ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ef2:	4b12      	ldr	r3, [pc, #72]	; (8010f3c <xPortStartScheduler+0x13c>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ef8:	f000 f8fc 	bl	80110f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010efc:	4b10      	ldr	r3, [pc, #64]	; (8010f40 <xPortStartScheduler+0x140>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a0f      	ldr	r2, [pc, #60]	; (8010f40 <xPortStartScheduler+0x140>)
 8010f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f08:	f7ff ff66 	bl	8010dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f0c:	f7fe ff7e 	bl	800fe0c <vTaskSwitchContext>
	prvTaskExitError();
 8010f10:	f7ff ff20 	bl	8010d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	e000ed00 	.word	0xe000ed00
 8010f24:	410fc271 	.word	0x410fc271
 8010f28:	410fc270 	.word	0x410fc270
 8010f2c:	e000e400 	.word	0xe000e400
 8010f30:	240014f8 	.word	0x240014f8
 8010f34:	240014fc 	.word	0x240014fc
 8010f38:	e000ed20 	.word	0xe000ed20
 8010f3c:	24000014 	.word	0x24000014
 8010f40:	e000ef34 	.word	0xe000ef34

08010f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
	__asm volatile
 8010f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	607b      	str	r3, [r7, #4]
}
 8010f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f5e:	4b0f      	ldr	r3, [pc, #60]	; (8010f9c <vPortEnterCritical+0x58>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	3301      	adds	r3, #1
 8010f64:	4a0d      	ldr	r2, [pc, #52]	; (8010f9c <vPortEnterCritical+0x58>)
 8010f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010f68:	4b0c      	ldr	r3, [pc, #48]	; (8010f9c <vPortEnterCritical+0x58>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d10f      	bne.n	8010f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010f70:	4b0b      	ldr	r3, [pc, #44]	; (8010fa0 <vPortEnterCritical+0x5c>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00a      	beq.n	8010f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	f383 8811 	msr	BASEPRI, r3
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	603b      	str	r3, [r7, #0]
}
 8010f8c:	bf00      	nop
 8010f8e:	e7fe      	b.n	8010f8e <vPortEnterCritical+0x4a>
	}
}
 8010f90:	bf00      	nop
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	24000014 	.word	0x24000014
 8010fa0:	e000ed04 	.word	0xe000ed04

08010fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010faa:	4b12      	ldr	r3, [pc, #72]	; (8010ff4 <vPortExitCritical+0x50>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10a      	bne.n	8010fc8 <vPortExitCritical+0x24>
	__asm volatile
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	607b      	str	r3, [r7, #4]
}
 8010fc4:	bf00      	nop
 8010fc6:	e7fe      	b.n	8010fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010fc8:	4b0a      	ldr	r3, [pc, #40]	; (8010ff4 <vPortExitCritical+0x50>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	4a09      	ldr	r2, [pc, #36]	; (8010ff4 <vPortExitCritical+0x50>)
 8010fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010fd2:	4b08      	ldr	r3, [pc, #32]	; (8010ff4 <vPortExitCritical+0x50>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d105      	bne.n	8010fe6 <vPortExitCritical+0x42>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	f383 8811 	msr	BASEPRI, r3
}
 8010fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010fe6:	bf00      	nop
 8010fe8:	370c      	adds	r7, #12
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	24000014 	.word	0x24000014
	...

08011000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011000:	f3ef 8009 	mrs	r0, PSP
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	4b15      	ldr	r3, [pc, #84]	; (8011060 <pxCurrentTCBConst>)
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	f01e 0f10 	tst.w	lr, #16
 8011010:	bf08      	it	eq
 8011012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101a:	6010      	str	r0, [r2, #0]
 801101c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011024:	f380 8811 	msr	BASEPRI, r0
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f7fe feec 	bl	800fe0c <vTaskSwitchContext>
 8011034:	f04f 0000 	mov.w	r0, #0
 8011038:	f380 8811 	msr	BASEPRI, r0
 801103c:	bc09      	pop	{r0, r3}
 801103e:	6819      	ldr	r1, [r3, #0]
 8011040:	6808      	ldr	r0, [r1, #0]
 8011042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011046:	f01e 0f10 	tst.w	lr, #16
 801104a:	bf08      	it	eq
 801104c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011050:	f380 8809 	msr	PSP, r0
 8011054:	f3bf 8f6f 	isb	sy
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	f3af 8000 	nop.w

08011060 <pxCurrentTCBConst>:
 8011060:	24000ecc 	.word	0x24000ecc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011064:	bf00      	nop
 8011066:	bf00      	nop

08011068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
	__asm volatile
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	607b      	str	r3, [r7, #4]
}
 8011080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011082:	f7fe fe01 	bl	800fc88 <xTaskIncrementTick>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801108c:	4b06      	ldr	r3, [pc, #24]	; (80110a8 <xPortSysTickHandler+0x40>)
 801108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	2300      	movs	r3, #0
 8011096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	f383 8811 	msr	BASEPRI, r3
}
 801109e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	e000ed04 	.word	0xe000ed04

080110ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80110ac:	b480      	push	{r7}
 80110ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80110b0:	4b0b      	ldr	r3, [pc, #44]	; (80110e0 <vPortSetupTimerInterrupt+0x34>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80110b6:	4b0b      	ldr	r3, [pc, #44]	; (80110e4 <vPortSetupTimerInterrupt+0x38>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110bc:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <vPortSetupTimerInterrupt+0x3c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a0a      	ldr	r2, [pc, #40]	; (80110ec <vPortSetupTimerInterrupt+0x40>)
 80110c2:	fba2 2303 	umull	r2, r3, r2, r3
 80110c6:	099b      	lsrs	r3, r3, #6
 80110c8:	4a09      	ldr	r2, [pc, #36]	; (80110f0 <vPortSetupTimerInterrupt+0x44>)
 80110ca:	3b01      	subs	r3, #1
 80110cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80110ce:	4b04      	ldr	r3, [pc, #16]	; (80110e0 <vPortSetupTimerInterrupt+0x34>)
 80110d0:	2207      	movs	r2, #7
 80110d2:	601a      	str	r2, [r3, #0]
}
 80110d4:	bf00      	nop
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	e000e010 	.word	0xe000e010
 80110e4:	e000e018 	.word	0xe000e018
 80110e8:	24000004 	.word	0x24000004
 80110ec:	10624dd3 	.word	0x10624dd3
 80110f0:	e000e014 	.word	0xe000e014

080110f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80110f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011104 <vPortEnableVFP+0x10>
 80110f8:	6801      	ldr	r1, [r0, #0]
 80110fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80110fe:	6001      	str	r1, [r0, #0]
 8011100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011102:	bf00      	nop
 8011104:	e000ed88 	.word	0xe000ed88

08011108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801110e:	f3ef 8305 	mrs	r3, IPSR
 8011112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b0f      	cmp	r3, #15
 8011118:	d914      	bls.n	8011144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801111a:	4a17      	ldr	r2, [pc, #92]	; (8011178 <vPortValidateInterruptPriority+0x70>)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	4413      	add	r3, r2
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011124:	4b15      	ldr	r3, [pc, #84]	; (801117c <vPortValidateInterruptPriority+0x74>)
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	7afa      	ldrb	r2, [r7, #11]
 801112a:	429a      	cmp	r2, r3
 801112c:	d20a      	bcs.n	8011144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	607b      	str	r3, [r7, #4]
}
 8011140:	bf00      	nop
 8011142:	e7fe      	b.n	8011142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011144:	4b0e      	ldr	r3, [pc, #56]	; (8011180 <vPortValidateInterruptPriority+0x78>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801114c:	4b0d      	ldr	r3, [pc, #52]	; (8011184 <vPortValidateInterruptPriority+0x7c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	429a      	cmp	r2, r3
 8011152:	d90a      	bls.n	801116a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011158:	f383 8811 	msr	BASEPRI, r3
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	603b      	str	r3, [r7, #0]
}
 8011166:	bf00      	nop
 8011168:	e7fe      	b.n	8011168 <vPortValidateInterruptPriority+0x60>
	}
 801116a:	bf00      	nop
 801116c:	3714      	adds	r7, #20
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	e000e3f0 	.word	0xe000e3f0
 801117c:	240014f8 	.word	0x240014f8
 8011180:	e000ed0c 	.word	0xe000ed0c
 8011184:	240014fc 	.word	0x240014fc

08011188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08a      	sub	sp, #40	; 0x28
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011190:	2300      	movs	r3, #0
 8011192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011194:	f7fe fcbc 	bl	800fb10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011198:	4b5b      	ldr	r3, [pc, #364]	; (8011308 <pvPortMalloc+0x180>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d101      	bne.n	80111a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80111a0:	f000 f920 	bl	80113e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80111a4:	4b59      	ldr	r3, [pc, #356]	; (801130c <pvPortMalloc+0x184>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4013      	ands	r3, r2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f040 8093 	bne.w	80112d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d01d      	beq.n	80111f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80111b8:	2208      	movs	r2, #8
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f003 0307 	and.w	r3, r3, #7
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d014      	beq.n	80111f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f023 0307 	bic.w	r3, r3, #7
 80111d0:	3308      	adds	r3, #8
 80111d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f003 0307 	and.w	r3, r3, #7
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00a      	beq.n	80111f4 <pvPortMalloc+0x6c>
	__asm volatile
 80111de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e2:	f383 8811 	msr	BASEPRI, r3
 80111e6:	f3bf 8f6f 	isb	sy
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	617b      	str	r3, [r7, #20]
}
 80111f0:	bf00      	nop
 80111f2:	e7fe      	b.n	80111f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d06e      	beq.n	80112d8 <pvPortMalloc+0x150>
 80111fa:	4b45      	ldr	r3, [pc, #276]	; (8011310 <pvPortMalloc+0x188>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	429a      	cmp	r2, r3
 8011202:	d869      	bhi.n	80112d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011204:	4b43      	ldr	r3, [pc, #268]	; (8011314 <pvPortMalloc+0x18c>)
 8011206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011208:	4b42      	ldr	r3, [pc, #264]	; (8011314 <pvPortMalloc+0x18c>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801120e:	e004      	b.n	801121a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	429a      	cmp	r2, r3
 8011222:	d903      	bls.n	801122c <pvPortMalloc+0xa4>
 8011224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1f1      	bne.n	8011210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801122c:	4b36      	ldr	r3, [pc, #216]	; (8011308 <pvPortMalloc+0x180>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011232:	429a      	cmp	r2, r3
 8011234:	d050      	beq.n	80112d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2208      	movs	r2, #8
 801123c:	4413      	add	r3, r2
 801123e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	6a3b      	ldr	r3, [r7, #32]
 8011246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	1ad2      	subs	r2, r2, r3
 8011250:	2308      	movs	r3, #8
 8011252:	005b      	lsls	r3, r3, #1
 8011254:	429a      	cmp	r2, r3
 8011256:	d91f      	bls.n	8011298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4413      	add	r3, r2
 801125e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	f003 0307 	and.w	r3, r3, #7
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00a      	beq.n	8011280 <pvPortMalloc+0xf8>
	__asm volatile
 801126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	613b      	str	r3, [r7, #16]
}
 801127c:	bf00      	nop
 801127e:	e7fe      	b.n	801127e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	1ad2      	subs	r2, r2, r3
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011292:	69b8      	ldr	r0, [r7, #24]
 8011294:	f000 f908 	bl	80114a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011298:	4b1d      	ldr	r3, [pc, #116]	; (8011310 <pvPortMalloc+0x188>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	4a1b      	ldr	r2, [pc, #108]	; (8011310 <pvPortMalloc+0x188>)
 80112a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80112a6:	4b1a      	ldr	r3, [pc, #104]	; (8011310 <pvPortMalloc+0x188>)
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	4b1b      	ldr	r3, [pc, #108]	; (8011318 <pvPortMalloc+0x190>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d203      	bcs.n	80112ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112b2:	4b17      	ldr	r3, [pc, #92]	; (8011310 <pvPortMalloc+0x188>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a18      	ldr	r2, [pc, #96]	; (8011318 <pvPortMalloc+0x190>)
 80112b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112bc:	685a      	ldr	r2, [r3, #4]
 80112be:	4b13      	ldr	r3, [pc, #76]	; (801130c <pvPortMalloc+0x184>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	431a      	orrs	r2, r3
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80112ce:	4b13      	ldr	r3, [pc, #76]	; (801131c <pvPortMalloc+0x194>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	3301      	adds	r3, #1
 80112d4:	4a11      	ldr	r2, [pc, #68]	; (801131c <pvPortMalloc+0x194>)
 80112d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80112d8:	f7fe fc28 	bl	800fb2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	f003 0307 	and.w	r3, r3, #7
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00a      	beq.n	80112fc <pvPortMalloc+0x174>
	__asm volatile
 80112e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ea:	f383 8811 	msr	BASEPRI, r3
 80112ee:	f3bf 8f6f 	isb	sy
 80112f2:	f3bf 8f4f 	dsb	sy
 80112f6:	60fb      	str	r3, [r7, #12]
}
 80112f8:	bf00      	nop
 80112fa:	e7fe      	b.n	80112fa <pvPortMalloc+0x172>
	return pvReturn;
 80112fc:	69fb      	ldr	r3, [r7, #28]
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3728      	adds	r7, #40	; 0x28
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	24005108 	.word	0x24005108
 801130c:	2400511c 	.word	0x2400511c
 8011310:	2400510c 	.word	0x2400510c
 8011314:	24005100 	.word	0x24005100
 8011318:	24005110 	.word	0x24005110
 801131c:	24005114 	.word	0x24005114

08011320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b086      	sub	sp, #24
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d04d      	beq.n	80113ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011332:	2308      	movs	r3, #8
 8011334:	425b      	negs	r3, r3
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	4413      	add	r3, r2
 801133a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	4b24      	ldr	r3, [pc, #144]	; (80113d8 <vPortFree+0xb8>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4013      	ands	r3, r2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d10a      	bne.n	8011364 <vPortFree+0x44>
	__asm volatile
 801134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	60fb      	str	r3, [r7, #12]
}
 8011360:	bf00      	nop
 8011362:	e7fe      	b.n	8011362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00a      	beq.n	8011382 <vPortFree+0x62>
	__asm volatile
 801136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011370:	f383 8811 	msr	BASEPRI, r3
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	60bb      	str	r3, [r7, #8]
}
 801137e:	bf00      	nop
 8011380:	e7fe      	b.n	8011380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	685a      	ldr	r2, [r3, #4]
 8011386:	4b14      	ldr	r3, [pc, #80]	; (80113d8 <vPortFree+0xb8>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	4013      	ands	r3, r2
 801138c:	2b00      	cmp	r3, #0
 801138e:	d01e      	beq.n	80113ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d11a      	bne.n	80113ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	685a      	ldr	r2, [r3, #4]
 801139c:	4b0e      	ldr	r3, [pc, #56]	; (80113d8 <vPortFree+0xb8>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	43db      	mvns	r3, r3
 80113a2:	401a      	ands	r2, r3
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80113a8:	f7fe fbb2 	bl	800fb10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	685a      	ldr	r2, [r3, #4]
 80113b0:	4b0a      	ldr	r3, [pc, #40]	; (80113dc <vPortFree+0xbc>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4413      	add	r3, r2
 80113b6:	4a09      	ldr	r2, [pc, #36]	; (80113dc <vPortFree+0xbc>)
 80113b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113ba:	6938      	ldr	r0, [r7, #16]
 80113bc:	f000 f874 	bl	80114a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80113c0:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <vPortFree+0xc0>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	3301      	adds	r3, #1
 80113c6:	4a06      	ldr	r2, [pc, #24]	; (80113e0 <vPortFree+0xc0>)
 80113c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80113ca:	f7fe fbaf 	bl	800fb2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80113ce:	bf00      	nop
 80113d0:	3718      	adds	r7, #24
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	2400511c 	.word	0x2400511c
 80113dc:	2400510c 	.word	0x2400510c
 80113e0:	24005118 	.word	0x24005118

080113e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80113e4:	b480      	push	{r7}
 80113e6:	b085      	sub	sp, #20
 80113e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80113ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80113ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80113f0:	4b27      	ldr	r3, [pc, #156]	; (8011490 <prvHeapInit+0xac>)
 80113f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f003 0307 	and.w	r3, r3, #7
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00c      	beq.n	8011418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3307      	adds	r3, #7
 8011402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f023 0307 	bic.w	r3, r3, #7
 801140a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	1ad3      	subs	r3, r2, r3
 8011412:	4a1f      	ldr	r2, [pc, #124]	; (8011490 <prvHeapInit+0xac>)
 8011414:	4413      	add	r3, r2
 8011416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801141c:	4a1d      	ldr	r2, [pc, #116]	; (8011494 <prvHeapInit+0xb0>)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011422:	4b1c      	ldr	r3, [pc, #112]	; (8011494 <prvHeapInit+0xb0>)
 8011424:	2200      	movs	r2, #0
 8011426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	68ba      	ldr	r2, [r7, #8]
 801142c:	4413      	add	r3, r2
 801142e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011430:	2208      	movs	r2, #8
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	1a9b      	subs	r3, r3, r2
 8011436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f023 0307 	bic.w	r3, r3, #7
 801143e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4a15      	ldr	r2, [pc, #84]	; (8011498 <prvHeapInit+0xb4>)
 8011444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011446:	4b14      	ldr	r3, [pc, #80]	; (8011498 <prvHeapInit+0xb4>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2200      	movs	r2, #0
 801144c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801144e:	4b12      	ldr	r3, [pc, #72]	; (8011498 <prvHeapInit+0xb4>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2200      	movs	r2, #0
 8011454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	1ad2      	subs	r2, r2, r3
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011464:	4b0c      	ldr	r3, [pc, #48]	; (8011498 <prvHeapInit+0xb4>)
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	4a0a      	ldr	r2, [pc, #40]	; (801149c <prvHeapInit+0xb8>)
 8011472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	4a09      	ldr	r2, [pc, #36]	; (80114a0 <prvHeapInit+0xbc>)
 801147a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801147c:	4b09      	ldr	r3, [pc, #36]	; (80114a4 <prvHeapInit+0xc0>)
 801147e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011482:	601a      	str	r2, [r3, #0]
}
 8011484:	bf00      	nop
 8011486:	3714      	adds	r7, #20
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	24001500 	.word	0x24001500
 8011494:	24005100 	.word	0x24005100
 8011498:	24005108 	.word	0x24005108
 801149c:	24005110 	.word	0x24005110
 80114a0:	2400510c 	.word	0x2400510c
 80114a4:	2400511c 	.word	0x2400511c

080114a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80114a8:	b480      	push	{r7}
 80114aa:	b085      	sub	sp, #20
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80114b0:	4b28      	ldr	r3, [pc, #160]	; (8011554 <prvInsertBlockIntoFreeList+0xac>)
 80114b2:	60fb      	str	r3, [r7, #12]
 80114b4:	e002      	b.n	80114bc <prvInsertBlockIntoFreeList+0x14>
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	60fb      	str	r3, [r7, #12]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d8f7      	bhi.n	80114b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	68ba      	ldr	r2, [r7, #8]
 80114d0:	4413      	add	r3, r2
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d108      	bne.n	80114ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	441a      	add	r2, r3
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	441a      	add	r2, r3
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d118      	bne.n	8011530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	4b15      	ldr	r3, [pc, #84]	; (8011558 <prvInsertBlockIntoFreeList+0xb0>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	429a      	cmp	r2, r3
 8011508:	d00d      	beq.n	8011526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	685a      	ldr	r2, [r3, #4]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	441a      	add	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	601a      	str	r2, [r3, #0]
 8011524:	e008      	b.n	8011538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011526:	4b0c      	ldr	r3, [pc, #48]	; (8011558 <prvInsertBlockIntoFreeList+0xb0>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	e003      	b.n	8011538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	429a      	cmp	r2, r3
 801153e:	d002      	beq.n	8011546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011546:	bf00      	nop
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	24005100 	.word	0x24005100
 8011558:	24005108 	.word	0x24005108

0801155c <__errno>:
 801155c:	4b01      	ldr	r3, [pc, #4]	; (8011564 <__errno+0x8>)
 801155e:	6818      	ldr	r0, [r3, #0]
 8011560:	4770      	bx	lr
 8011562:	bf00      	nop
 8011564:	24000018 	.word	0x24000018

08011568 <__libc_init_array>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	4d0d      	ldr	r5, [pc, #52]	; (80115a0 <__libc_init_array+0x38>)
 801156c:	4c0d      	ldr	r4, [pc, #52]	; (80115a4 <__libc_init_array+0x3c>)
 801156e:	1b64      	subs	r4, r4, r5
 8011570:	10a4      	asrs	r4, r4, #2
 8011572:	2600      	movs	r6, #0
 8011574:	42a6      	cmp	r6, r4
 8011576:	d109      	bne.n	801158c <__libc_init_array+0x24>
 8011578:	4d0b      	ldr	r5, [pc, #44]	; (80115a8 <__libc_init_array+0x40>)
 801157a:	4c0c      	ldr	r4, [pc, #48]	; (80115ac <__libc_init_array+0x44>)
 801157c:	f000 fd3c 	bl	8011ff8 <_init>
 8011580:	1b64      	subs	r4, r4, r5
 8011582:	10a4      	asrs	r4, r4, #2
 8011584:	2600      	movs	r6, #0
 8011586:	42a6      	cmp	r6, r4
 8011588:	d105      	bne.n	8011596 <__libc_init_array+0x2e>
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011590:	4798      	blx	r3
 8011592:	3601      	adds	r6, #1
 8011594:	e7ee      	b.n	8011574 <__libc_init_array+0xc>
 8011596:	f855 3b04 	ldr.w	r3, [r5], #4
 801159a:	4798      	blx	r3
 801159c:	3601      	adds	r6, #1
 801159e:	e7f2      	b.n	8011586 <__libc_init_array+0x1e>
 80115a0:	0801247c 	.word	0x0801247c
 80115a4:	0801247c 	.word	0x0801247c
 80115a8:	0801247c 	.word	0x0801247c
 80115ac:	08012480 	.word	0x08012480

080115b0 <malloc>:
 80115b0:	4b02      	ldr	r3, [pc, #8]	; (80115bc <malloc+0xc>)
 80115b2:	4601      	mov	r1, r0
 80115b4:	6818      	ldr	r0, [r3, #0]
 80115b6:	f000 b88d 	b.w	80116d4 <_malloc_r>
 80115ba:	bf00      	nop
 80115bc:	24000018 	.word	0x24000018

080115c0 <free>:
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <free+0xc>)
 80115c2:	4601      	mov	r1, r0
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	f000 b819 	b.w	80115fc <_free_r>
 80115ca:	bf00      	nop
 80115cc:	24000018 	.word	0x24000018

080115d0 <memcpy>:
 80115d0:	440a      	add	r2, r1
 80115d2:	4291      	cmp	r1, r2
 80115d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80115d8:	d100      	bne.n	80115dc <memcpy+0xc>
 80115da:	4770      	bx	lr
 80115dc:	b510      	push	{r4, lr}
 80115de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115e6:	4291      	cmp	r1, r2
 80115e8:	d1f9      	bne.n	80115de <memcpy+0xe>
 80115ea:	bd10      	pop	{r4, pc}

080115ec <memset>:
 80115ec:	4402      	add	r2, r0
 80115ee:	4603      	mov	r3, r0
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d100      	bne.n	80115f6 <memset+0xa>
 80115f4:	4770      	bx	lr
 80115f6:	f803 1b01 	strb.w	r1, [r3], #1
 80115fa:	e7f9      	b.n	80115f0 <memset+0x4>

080115fc <_free_r>:
 80115fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115fe:	2900      	cmp	r1, #0
 8011600:	d044      	beq.n	801168c <_free_r+0x90>
 8011602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011606:	9001      	str	r0, [sp, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	f1a1 0404 	sub.w	r4, r1, #4
 801160e:	bfb8      	it	lt
 8011610:	18e4      	addlt	r4, r4, r3
 8011612:	f000 fc39 	bl	8011e88 <__malloc_lock>
 8011616:	4a1e      	ldr	r2, [pc, #120]	; (8011690 <_free_r+0x94>)
 8011618:	9801      	ldr	r0, [sp, #4]
 801161a:	6813      	ldr	r3, [r2, #0]
 801161c:	b933      	cbnz	r3, 801162c <_free_r+0x30>
 801161e:	6063      	str	r3, [r4, #4]
 8011620:	6014      	str	r4, [r2, #0]
 8011622:	b003      	add	sp, #12
 8011624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011628:	f000 bc34 	b.w	8011e94 <__malloc_unlock>
 801162c:	42a3      	cmp	r3, r4
 801162e:	d908      	bls.n	8011642 <_free_r+0x46>
 8011630:	6825      	ldr	r5, [r4, #0]
 8011632:	1961      	adds	r1, r4, r5
 8011634:	428b      	cmp	r3, r1
 8011636:	bf01      	itttt	eq
 8011638:	6819      	ldreq	r1, [r3, #0]
 801163a:	685b      	ldreq	r3, [r3, #4]
 801163c:	1949      	addeq	r1, r1, r5
 801163e:	6021      	streq	r1, [r4, #0]
 8011640:	e7ed      	b.n	801161e <_free_r+0x22>
 8011642:	461a      	mov	r2, r3
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	b10b      	cbz	r3, 801164c <_free_r+0x50>
 8011648:	42a3      	cmp	r3, r4
 801164a:	d9fa      	bls.n	8011642 <_free_r+0x46>
 801164c:	6811      	ldr	r1, [r2, #0]
 801164e:	1855      	adds	r5, r2, r1
 8011650:	42a5      	cmp	r5, r4
 8011652:	d10b      	bne.n	801166c <_free_r+0x70>
 8011654:	6824      	ldr	r4, [r4, #0]
 8011656:	4421      	add	r1, r4
 8011658:	1854      	adds	r4, r2, r1
 801165a:	42a3      	cmp	r3, r4
 801165c:	6011      	str	r1, [r2, #0]
 801165e:	d1e0      	bne.n	8011622 <_free_r+0x26>
 8011660:	681c      	ldr	r4, [r3, #0]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	6053      	str	r3, [r2, #4]
 8011666:	4421      	add	r1, r4
 8011668:	6011      	str	r1, [r2, #0]
 801166a:	e7da      	b.n	8011622 <_free_r+0x26>
 801166c:	d902      	bls.n	8011674 <_free_r+0x78>
 801166e:	230c      	movs	r3, #12
 8011670:	6003      	str	r3, [r0, #0]
 8011672:	e7d6      	b.n	8011622 <_free_r+0x26>
 8011674:	6825      	ldr	r5, [r4, #0]
 8011676:	1961      	adds	r1, r4, r5
 8011678:	428b      	cmp	r3, r1
 801167a:	bf04      	itt	eq
 801167c:	6819      	ldreq	r1, [r3, #0]
 801167e:	685b      	ldreq	r3, [r3, #4]
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	bf04      	itt	eq
 8011684:	1949      	addeq	r1, r1, r5
 8011686:	6021      	streq	r1, [r4, #0]
 8011688:	6054      	str	r4, [r2, #4]
 801168a:	e7ca      	b.n	8011622 <_free_r+0x26>
 801168c:	b003      	add	sp, #12
 801168e:	bd30      	pop	{r4, r5, pc}
 8011690:	24005120 	.word	0x24005120

08011694 <sbrk_aligned>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4e0e      	ldr	r6, [pc, #56]	; (80116d0 <sbrk_aligned+0x3c>)
 8011698:	460c      	mov	r4, r1
 801169a:	6831      	ldr	r1, [r6, #0]
 801169c:	4605      	mov	r5, r0
 801169e:	b911      	cbnz	r1, 80116a6 <sbrk_aligned+0x12>
 80116a0:	f000 f902 	bl	80118a8 <_sbrk_r>
 80116a4:	6030      	str	r0, [r6, #0]
 80116a6:	4621      	mov	r1, r4
 80116a8:	4628      	mov	r0, r5
 80116aa:	f000 f8fd 	bl	80118a8 <_sbrk_r>
 80116ae:	1c43      	adds	r3, r0, #1
 80116b0:	d00a      	beq.n	80116c8 <sbrk_aligned+0x34>
 80116b2:	1cc4      	adds	r4, r0, #3
 80116b4:	f024 0403 	bic.w	r4, r4, #3
 80116b8:	42a0      	cmp	r0, r4
 80116ba:	d007      	beq.n	80116cc <sbrk_aligned+0x38>
 80116bc:	1a21      	subs	r1, r4, r0
 80116be:	4628      	mov	r0, r5
 80116c0:	f000 f8f2 	bl	80118a8 <_sbrk_r>
 80116c4:	3001      	adds	r0, #1
 80116c6:	d101      	bne.n	80116cc <sbrk_aligned+0x38>
 80116c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80116cc:	4620      	mov	r0, r4
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	24005124 	.word	0x24005124

080116d4 <_malloc_r>:
 80116d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d8:	1ccd      	adds	r5, r1, #3
 80116da:	f025 0503 	bic.w	r5, r5, #3
 80116de:	3508      	adds	r5, #8
 80116e0:	2d0c      	cmp	r5, #12
 80116e2:	bf38      	it	cc
 80116e4:	250c      	movcc	r5, #12
 80116e6:	2d00      	cmp	r5, #0
 80116e8:	4607      	mov	r7, r0
 80116ea:	db01      	blt.n	80116f0 <_malloc_r+0x1c>
 80116ec:	42a9      	cmp	r1, r5
 80116ee:	d905      	bls.n	80116fc <_malloc_r+0x28>
 80116f0:	230c      	movs	r3, #12
 80116f2:	603b      	str	r3, [r7, #0]
 80116f4:	2600      	movs	r6, #0
 80116f6:	4630      	mov	r0, r6
 80116f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116fc:	4e2e      	ldr	r6, [pc, #184]	; (80117b8 <_malloc_r+0xe4>)
 80116fe:	f000 fbc3 	bl	8011e88 <__malloc_lock>
 8011702:	6833      	ldr	r3, [r6, #0]
 8011704:	461c      	mov	r4, r3
 8011706:	bb34      	cbnz	r4, 8011756 <_malloc_r+0x82>
 8011708:	4629      	mov	r1, r5
 801170a:	4638      	mov	r0, r7
 801170c:	f7ff ffc2 	bl	8011694 <sbrk_aligned>
 8011710:	1c43      	adds	r3, r0, #1
 8011712:	4604      	mov	r4, r0
 8011714:	d14d      	bne.n	80117b2 <_malloc_r+0xde>
 8011716:	6834      	ldr	r4, [r6, #0]
 8011718:	4626      	mov	r6, r4
 801171a:	2e00      	cmp	r6, #0
 801171c:	d140      	bne.n	80117a0 <_malloc_r+0xcc>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	4631      	mov	r1, r6
 8011722:	4638      	mov	r0, r7
 8011724:	eb04 0803 	add.w	r8, r4, r3
 8011728:	f000 f8be 	bl	80118a8 <_sbrk_r>
 801172c:	4580      	cmp	r8, r0
 801172e:	d13a      	bne.n	80117a6 <_malloc_r+0xd2>
 8011730:	6821      	ldr	r1, [r4, #0]
 8011732:	3503      	adds	r5, #3
 8011734:	1a6d      	subs	r5, r5, r1
 8011736:	f025 0503 	bic.w	r5, r5, #3
 801173a:	3508      	adds	r5, #8
 801173c:	2d0c      	cmp	r5, #12
 801173e:	bf38      	it	cc
 8011740:	250c      	movcc	r5, #12
 8011742:	4629      	mov	r1, r5
 8011744:	4638      	mov	r0, r7
 8011746:	f7ff ffa5 	bl	8011694 <sbrk_aligned>
 801174a:	3001      	adds	r0, #1
 801174c:	d02b      	beq.n	80117a6 <_malloc_r+0xd2>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	442b      	add	r3, r5
 8011752:	6023      	str	r3, [r4, #0]
 8011754:	e00e      	b.n	8011774 <_malloc_r+0xa0>
 8011756:	6822      	ldr	r2, [r4, #0]
 8011758:	1b52      	subs	r2, r2, r5
 801175a:	d41e      	bmi.n	801179a <_malloc_r+0xc6>
 801175c:	2a0b      	cmp	r2, #11
 801175e:	d916      	bls.n	801178e <_malloc_r+0xba>
 8011760:	1961      	adds	r1, r4, r5
 8011762:	42a3      	cmp	r3, r4
 8011764:	6025      	str	r5, [r4, #0]
 8011766:	bf18      	it	ne
 8011768:	6059      	strne	r1, [r3, #4]
 801176a:	6863      	ldr	r3, [r4, #4]
 801176c:	bf08      	it	eq
 801176e:	6031      	streq	r1, [r6, #0]
 8011770:	5162      	str	r2, [r4, r5]
 8011772:	604b      	str	r3, [r1, #4]
 8011774:	4638      	mov	r0, r7
 8011776:	f104 060b 	add.w	r6, r4, #11
 801177a:	f000 fb8b 	bl	8011e94 <__malloc_unlock>
 801177e:	f026 0607 	bic.w	r6, r6, #7
 8011782:	1d23      	adds	r3, r4, #4
 8011784:	1af2      	subs	r2, r6, r3
 8011786:	d0b6      	beq.n	80116f6 <_malloc_r+0x22>
 8011788:	1b9b      	subs	r3, r3, r6
 801178a:	50a3      	str	r3, [r4, r2]
 801178c:	e7b3      	b.n	80116f6 <_malloc_r+0x22>
 801178e:	6862      	ldr	r2, [r4, #4]
 8011790:	42a3      	cmp	r3, r4
 8011792:	bf0c      	ite	eq
 8011794:	6032      	streq	r2, [r6, #0]
 8011796:	605a      	strne	r2, [r3, #4]
 8011798:	e7ec      	b.n	8011774 <_malloc_r+0xa0>
 801179a:	4623      	mov	r3, r4
 801179c:	6864      	ldr	r4, [r4, #4]
 801179e:	e7b2      	b.n	8011706 <_malloc_r+0x32>
 80117a0:	4634      	mov	r4, r6
 80117a2:	6876      	ldr	r6, [r6, #4]
 80117a4:	e7b9      	b.n	801171a <_malloc_r+0x46>
 80117a6:	230c      	movs	r3, #12
 80117a8:	603b      	str	r3, [r7, #0]
 80117aa:	4638      	mov	r0, r7
 80117ac:	f000 fb72 	bl	8011e94 <__malloc_unlock>
 80117b0:	e7a1      	b.n	80116f6 <_malloc_r+0x22>
 80117b2:	6025      	str	r5, [r4, #0]
 80117b4:	e7de      	b.n	8011774 <_malloc_r+0xa0>
 80117b6:	bf00      	nop
 80117b8:	24005120 	.word	0x24005120

080117bc <_puts_r>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	460e      	mov	r6, r1
 80117c0:	4605      	mov	r5, r0
 80117c2:	b118      	cbz	r0, 80117cc <_puts_r+0x10>
 80117c4:	6983      	ldr	r3, [r0, #24]
 80117c6:	b90b      	cbnz	r3, 80117cc <_puts_r+0x10>
 80117c8:	f000 fa58 	bl	8011c7c <__sinit>
 80117cc:	69ab      	ldr	r3, [r5, #24]
 80117ce:	68ac      	ldr	r4, [r5, #8]
 80117d0:	b913      	cbnz	r3, 80117d8 <_puts_r+0x1c>
 80117d2:	4628      	mov	r0, r5
 80117d4:	f000 fa52 	bl	8011c7c <__sinit>
 80117d8:	4b2c      	ldr	r3, [pc, #176]	; (801188c <_puts_r+0xd0>)
 80117da:	429c      	cmp	r4, r3
 80117dc:	d120      	bne.n	8011820 <_puts_r+0x64>
 80117de:	686c      	ldr	r4, [r5, #4]
 80117e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117e2:	07db      	lsls	r3, r3, #31
 80117e4:	d405      	bmi.n	80117f2 <_puts_r+0x36>
 80117e6:	89a3      	ldrh	r3, [r4, #12]
 80117e8:	0598      	lsls	r0, r3, #22
 80117ea:	d402      	bmi.n	80117f2 <_puts_r+0x36>
 80117ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117ee:	f000 fae3 	bl	8011db8 <__retarget_lock_acquire_recursive>
 80117f2:	89a3      	ldrh	r3, [r4, #12]
 80117f4:	0719      	lsls	r1, r3, #28
 80117f6:	d51d      	bpl.n	8011834 <_puts_r+0x78>
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	b1db      	cbz	r3, 8011834 <_puts_r+0x78>
 80117fc:	3e01      	subs	r6, #1
 80117fe:	68a3      	ldr	r3, [r4, #8]
 8011800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011804:	3b01      	subs	r3, #1
 8011806:	60a3      	str	r3, [r4, #8]
 8011808:	bb39      	cbnz	r1, 801185a <_puts_r+0x9e>
 801180a:	2b00      	cmp	r3, #0
 801180c:	da38      	bge.n	8011880 <_puts_r+0xc4>
 801180e:	4622      	mov	r2, r4
 8011810:	210a      	movs	r1, #10
 8011812:	4628      	mov	r0, r5
 8011814:	f000 f858 	bl	80118c8 <__swbuf_r>
 8011818:	3001      	adds	r0, #1
 801181a:	d011      	beq.n	8011840 <_puts_r+0x84>
 801181c:	250a      	movs	r5, #10
 801181e:	e011      	b.n	8011844 <_puts_r+0x88>
 8011820:	4b1b      	ldr	r3, [pc, #108]	; (8011890 <_puts_r+0xd4>)
 8011822:	429c      	cmp	r4, r3
 8011824:	d101      	bne.n	801182a <_puts_r+0x6e>
 8011826:	68ac      	ldr	r4, [r5, #8]
 8011828:	e7da      	b.n	80117e0 <_puts_r+0x24>
 801182a:	4b1a      	ldr	r3, [pc, #104]	; (8011894 <_puts_r+0xd8>)
 801182c:	429c      	cmp	r4, r3
 801182e:	bf08      	it	eq
 8011830:	68ec      	ldreq	r4, [r5, #12]
 8011832:	e7d5      	b.n	80117e0 <_puts_r+0x24>
 8011834:	4621      	mov	r1, r4
 8011836:	4628      	mov	r0, r5
 8011838:	f000 f898 	bl	801196c <__swsetup_r>
 801183c:	2800      	cmp	r0, #0
 801183e:	d0dd      	beq.n	80117fc <_puts_r+0x40>
 8011840:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011846:	07da      	lsls	r2, r3, #31
 8011848:	d405      	bmi.n	8011856 <_puts_r+0x9a>
 801184a:	89a3      	ldrh	r3, [r4, #12]
 801184c:	059b      	lsls	r3, r3, #22
 801184e:	d402      	bmi.n	8011856 <_puts_r+0x9a>
 8011850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011852:	f000 fab2 	bl	8011dba <__retarget_lock_release_recursive>
 8011856:	4628      	mov	r0, r5
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	2b00      	cmp	r3, #0
 801185c:	da04      	bge.n	8011868 <_puts_r+0xac>
 801185e:	69a2      	ldr	r2, [r4, #24]
 8011860:	429a      	cmp	r2, r3
 8011862:	dc06      	bgt.n	8011872 <_puts_r+0xb6>
 8011864:	290a      	cmp	r1, #10
 8011866:	d004      	beq.n	8011872 <_puts_r+0xb6>
 8011868:	6823      	ldr	r3, [r4, #0]
 801186a:	1c5a      	adds	r2, r3, #1
 801186c:	6022      	str	r2, [r4, #0]
 801186e:	7019      	strb	r1, [r3, #0]
 8011870:	e7c5      	b.n	80117fe <_puts_r+0x42>
 8011872:	4622      	mov	r2, r4
 8011874:	4628      	mov	r0, r5
 8011876:	f000 f827 	bl	80118c8 <__swbuf_r>
 801187a:	3001      	adds	r0, #1
 801187c:	d1bf      	bne.n	80117fe <_puts_r+0x42>
 801187e:	e7df      	b.n	8011840 <_puts_r+0x84>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	250a      	movs	r5, #10
 8011884:	1c5a      	adds	r2, r3, #1
 8011886:	6022      	str	r2, [r4, #0]
 8011888:	701d      	strb	r5, [r3, #0]
 801188a:	e7db      	b.n	8011844 <_puts_r+0x88>
 801188c:	08012434 	.word	0x08012434
 8011890:	08012454 	.word	0x08012454
 8011894:	08012414 	.word	0x08012414

08011898 <puts>:
 8011898:	4b02      	ldr	r3, [pc, #8]	; (80118a4 <puts+0xc>)
 801189a:	4601      	mov	r1, r0
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	f7ff bf8d 	b.w	80117bc <_puts_r>
 80118a2:	bf00      	nop
 80118a4:	24000018 	.word	0x24000018

080118a8 <_sbrk_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d06      	ldr	r5, [pc, #24]	; (80118c4 <_sbrk_r+0x1c>)
 80118ac:	2300      	movs	r3, #0
 80118ae:	4604      	mov	r4, r0
 80118b0:	4608      	mov	r0, r1
 80118b2:	602b      	str	r3, [r5, #0]
 80118b4:	f7f0 faf4 	bl	8001ea0 <_sbrk>
 80118b8:	1c43      	adds	r3, r0, #1
 80118ba:	d102      	bne.n	80118c2 <_sbrk_r+0x1a>
 80118bc:	682b      	ldr	r3, [r5, #0]
 80118be:	b103      	cbz	r3, 80118c2 <_sbrk_r+0x1a>
 80118c0:	6023      	str	r3, [r4, #0]
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	2400512c 	.word	0x2400512c

080118c8 <__swbuf_r>:
 80118c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ca:	460e      	mov	r6, r1
 80118cc:	4614      	mov	r4, r2
 80118ce:	4605      	mov	r5, r0
 80118d0:	b118      	cbz	r0, 80118da <__swbuf_r+0x12>
 80118d2:	6983      	ldr	r3, [r0, #24]
 80118d4:	b90b      	cbnz	r3, 80118da <__swbuf_r+0x12>
 80118d6:	f000 f9d1 	bl	8011c7c <__sinit>
 80118da:	4b21      	ldr	r3, [pc, #132]	; (8011960 <__swbuf_r+0x98>)
 80118dc:	429c      	cmp	r4, r3
 80118de:	d12b      	bne.n	8011938 <__swbuf_r+0x70>
 80118e0:	686c      	ldr	r4, [r5, #4]
 80118e2:	69a3      	ldr	r3, [r4, #24]
 80118e4:	60a3      	str	r3, [r4, #8]
 80118e6:	89a3      	ldrh	r3, [r4, #12]
 80118e8:	071a      	lsls	r2, r3, #28
 80118ea:	d52f      	bpl.n	801194c <__swbuf_r+0x84>
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	b36b      	cbz	r3, 801194c <__swbuf_r+0x84>
 80118f0:	6923      	ldr	r3, [r4, #16]
 80118f2:	6820      	ldr	r0, [r4, #0]
 80118f4:	1ac0      	subs	r0, r0, r3
 80118f6:	6963      	ldr	r3, [r4, #20]
 80118f8:	b2f6      	uxtb	r6, r6
 80118fa:	4283      	cmp	r3, r0
 80118fc:	4637      	mov	r7, r6
 80118fe:	dc04      	bgt.n	801190a <__swbuf_r+0x42>
 8011900:	4621      	mov	r1, r4
 8011902:	4628      	mov	r0, r5
 8011904:	f000 f926 	bl	8011b54 <_fflush_r>
 8011908:	bb30      	cbnz	r0, 8011958 <__swbuf_r+0x90>
 801190a:	68a3      	ldr	r3, [r4, #8]
 801190c:	3b01      	subs	r3, #1
 801190e:	60a3      	str	r3, [r4, #8]
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	1c5a      	adds	r2, r3, #1
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	701e      	strb	r6, [r3, #0]
 8011918:	6963      	ldr	r3, [r4, #20]
 801191a:	3001      	adds	r0, #1
 801191c:	4283      	cmp	r3, r0
 801191e:	d004      	beq.n	801192a <__swbuf_r+0x62>
 8011920:	89a3      	ldrh	r3, [r4, #12]
 8011922:	07db      	lsls	r3, r3, #31
 8011924:	d506      	bpl.n	8011934 <__swbuf_r+0x6c>
 8011926:	2e0a      	cmp	r6, #10
 8011928:	d104      	bne.n	8011934 <__swbuf_r+0x6c>
 801192a:	4621      	mov	r1, r4
 801192c:	4628      	mov	r0, r5
 801192e:	f000 f911 	bl	8011b54 <_fflush_r>
 8011932:	b988      	cbnz	r0, 8011958 <__swbuf_r+0x90>
 8011934:	4638      	mov	r0, r7
 8011936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011938:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <__swbuf_r+0x9c>)
 801193a:	429c      	cmp	r4, r3
 801193c:	d101      	bne.n	8011942 <__swbuf_r+0x7a>
 801193e:	68ac      	ldr	r4, [r5, #8]
 8011940:	e7cf      	b.n	80118e2 <__swbuf_r+0x1a>
 8011942:	4b09      	ldr	r3, [pc, #36]	; (8011968 <__swbuf_r+0xa0>)
 8011944:	429c      	cmp	r4, r3
 8011946:	bf08      	it	eq
 8011948:	68ec      	ldreq	r4, [r5, #12]
 801194a:	e7ca      	b.n	80118e2 <__swbuf_r+0x1a>
 801194c:	4621      	mov	r1, r4
 801194e:	4628      	mov	r0, r5
 8011950:	f000 f80c 	bl	801196c <__swsetup_r>
 8011954:	2800      	cmp	r0, #0
 8011956:	d0cb      	beq.n	80118f0 <__swbuf_r+0x28>
 8011958:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801195c:	e7ea      	b.n	8011934 <__swbuf_r+0x6c>
 801195e:	bf00      	nop
 8011960:	08012434 	.word	0x08012434
 8011964:	08012454 	.word	0x08012454
 8011968:	08012414 	.word	0x08012414

0801196c <__swsetup_r>:
 801196c:	4b32      	ldr	r3, [pc, #200]	; (8011a38 <__swsetup_r+0xcc>)
 801196e:	b570      	push	{r4, r5, r6, lr}
 8011970:	681d      	ldr	r5, [r3, #0]
 8011972:	4606      	mov	r6, r0
 8011974:	460c      	mov	r4, r1
 8011976:	b125      	cbz	r5, 8011982 <__swsetup_r+0x16>
 8011978:	69ab      	ldr	r3, [r5, #24]
 801197a:	b913      	cbnz	r3, 8011982 <__swsetup_r+0x16>
 801197c:	4628      	mov	r0, r5
 801197e:	f000 f97d 	bl	8011c7c <__sinit>
 8011982:	4b2e      	ldr	r3, [pc, #184]	; (8011a3c <__swsetup_r+0xd0>)
 8011984:	429c      	cmp	r4, r3
 8011986:	d10f      	bne.n	80119a8 <__swsetup_r+0x3c>
 8011988:	686c      	ldr	r4, [r5, #4]
 801198a:	89a3      	ldrh	r3, [r4, #12]
 801198c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011990:	0719      	lsls	r1, r3, #28
 8011992:	d42c      	bmi.n	80119ee <__swsetup_r+0x82>
 8011994:	06dd      	lsls	r5, r3, #27
 8011996:	d411      	bmi.n	80119bc <__swsetup_r+0x50>
 8011998:	2309      	movs	r3, #9
 801199a:	6033      	str	r3, [r6, #0]
 801199c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119a0:	81a3      	strh	r3, [r4, #12]
 80119a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119a6:	e03e      	b.n	8011a26 <__swsetup_r+0xba>
 80119a8:	4b25      	ldr	r3, [pc, #148]	; (8011a40 <__swsetup_r+0xd4>)
 80119aa:	429c      	cmp	r4, r3
 80119ac:	d101      	bne.n	80119b2 <__swsetup_r+0x46>
 80119ae:	68ac      	ldr	r4, [r5, #8]
 80119b0:	e7eb      	b.n	801198a <__swsetup_r+0x1e>
 80119b2:	4b24      	ldr	r3, [pc, #144]	; (8011a44 <__swsetup_r+0xd8>)
 80119b4:	429c      	cmp	r4, r3
 80119b6:	bf08      	it	eq
 80119b8:	68ec      	ldreq	r4, [r5, #12]
 80119ba:	e7e6      	b.n	801198a <__swsetup_r+0x1e>
 80119bc:	0758      	lsls	r0, r3, #29
 80119be:	d512      	bpl.n	80119e6 <__swsetup_r+0x7a>
 80119c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119c2:	b141      	cbz	r1, 80119d6 <__swsetup_r+0x6a>
 80119c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119c8:	4299      	cmp	r1, r3
 80119ca:	d002      	beq.n	80119d2 <__swsetup_r+0x66>
 80119cc:	4630      	mov	r0, r6
 80119ce:	f7ff fe15 	bl	80115fc <_free_r>
 80119d2:	2300      	movs	r3, #0
 80119d4:	6363      	str	r3, [r4, #52]	; 0x34
 80119d6:	89a3      	ldrh	r3, [r4, #12]
 80119d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119dc:	81a3      	strh	r3, [r4, #12]
 80119de:	2300      	movs	r3, #0
 80119e0:	6063      	str	r3, [r4, #4]
 80119e2:	6923      	ldr	r3, [r4, #16]
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	89a3      	ldrh	r3, [r4, #12]
 80119e8:	f043 0308 	orr.w	r3, r3, #8
 80119ec:	81a3      	strh	r3, [r4, #12]
 80119ee:	6923      	ldr	r3, [r4, #16]
 80119f0:	b94b      	cbnz	r3, 8011a06 <__swsetup_r+0x9a>
 80119f2:	89a3      	ldrh	r3, [r4, #12]
 80119f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119fc:	d003      	beq.n	8011a06 <__swsetup_r+0x9a>
 80119fe:	4621      	mov	r1, r4
 8011a00:	4630      	mov	r0, r6
 8011a02:	f000 fa01 	bl	8011e08 <__smakebuf_r>
 8011a06:	89a0      	ldrh	r0, [r4, #12]
 8011a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a0c:	f010 0301 	ands.w	r3, r0, #1
 8011a10:	d00a      	beq.n	8011a28 <__swsetup_r+0xbc>
 8011a12:	2300      	movs	r3, #0
 8011a14:	60a3      	str	r3, [r4, #8]
 8011a16:	6963      	ldr	r3, [r4, #20]
 8011a18:	425b      	negs	r3, r3
 8011a1a:	61a3      	str	r3, [r4, #24]
 8011a1c:	6923      	ldr	r3, [r4, #16]
 8011a1e:	b943      	cbnz	r3, 8011a32 <__swsetup_r+0xc6>
 8011a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a24:	d1ba      	bne.n	801199c <__swsetup_r+0x30>
 8011a26:	bd70      	pop	{r4, r5, r6, pc}
 8011a28:	0781      	lsls	r1, r0, #30
 8011a2a:	bf58      	it	pl
 8011a2c:	6963      	ldrpl	r3, [r4, #20]
 8011a2e:	60a3      	str	r3, [r4, #8]
 8011a30:	e7f4      	b.n	8011a1c <__swsetup_r+0xb0>
 8011a32:	2000      	movs	r0, #0
 8011a34:	e7f7      	b.n	8011a26 <__swsetup_r+0xba>
 8011a36:	bf00      	nop
 8011a38:	24000018 	.word	0x24000018
 8011a3c:	08012434 	.word	0x08012434
 8011a40:	08012454 	.word	0x08012454
 8011a44:	08012414 	.word	0x08012414

08011a48 <__sflush_r>:
 8011a48:	898a      	ldrh	r2, [r1, #12]
 8011a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a4e:	4605      	mov	r5, r0
 8011a50:	0710      	lsls	r0, r2, #28
 8011a52:	460c      	mov	r4, r1
 8011a54:	d458      	bmi.n	8011b08 <__sflush_r+0xc0>
 8011a56:	684b      	ldr	r3, [r1, #4]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	dc05      	bgt.n	8011a68 <__sflush_r+0x20>
 8011a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dc02      	bgt.n	8011a68 <__sflush_r+0x20>
 8011a62:	2000      	movs	r0, #0
 8011a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a6a:	2e00      	cmp	r6, #0
 8011a6c:	d0f9      	beq.n	8011a62 <__sflush_r+0x1a>
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a74:	682f      	ldr	r7, [r5, #0]
 8011a76:	602b      	str	r3, [r5, #0]
 8011a78:	d032      	beq.n	8011ae0 <__sflush_r+0x98>
 8011a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	075a      	lsls	r2, r3, #29
 8011a80:	d505      	bpl.n	8011a8e <__sflush_r+0x46>
 8011a82:	6863      	ldr	r3, [r4, #4]
 8011a84:	1ac0      	subs	r0, r0, r3
 8011a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a88:	b10b      	cbz	r3, 8011a8e <__sflush_r+0x46>
 8011a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a8c:	1ac0      	subs	r0, r0, r3
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4602      	mov	r2, r0
 8011a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a94:	6a21      	ldr	r1, [r4, #32]
 8011a96:	4628      	mov	r0, r5
 8011a98:	47b0      	blx	r6
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	d106      	bne.n	8011aae <__sflush_r+0x66>
 8011aa0:	6829      	ldr	r1, [r5, #0]
 8011aa2:	291d      	cmp	r1, #29
 8011aa4:	d82c      	bhi.n	8011b00 <__sflush_r+0xb8>
 8011aa6:	4a2a      	ldr	r2, [pc, #168]	; (8011b50 <__sflush_r+0x108>)
 8011aa8:	40ca      	lsrs	r2, r1
 8011aaa:	07d6      	lsls	r6, r2, #31
 8011aac:	d528      	bpl.n	8011b00 <__sflush_r+0xb8>
 8011aae:	2200      	movs	r2, #0
 8011ab0:	6062      	str	r2, [r4, #4]
 8011ab2:	04d9      	lsls	r1, r3, #19
 8011ab4:	6922      	ldr	r2, [r4, #16]
 8011ab6:	6022      	str	r2, [r4, #0]
 8011ab8:	d504      	bpl.n	8011ac4 <__sflush_r+0x7c>
 8011aba:	1c42      	adds	r2, r0, #1
 8011abc:	d101      	bne.n	8011ac2 <__sflush_r+0x7a>
 8011abe:	682b      	ldr	r3, [r5, #0]
 8011ac0:	b903      	cbnz	r3, 8011ac4 <__sflush_r+0x7c>
 8011ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8011ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ac6:	602f      	str	r7, [r5, #0]
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	d0ca      	beq.n	8011a62 <__sflush_r+0x1a>
 8011acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ad0:	4299      	cmp	r1, r3
 8011ad2:	d002      	beq.n	8011ada <__sflush_r+0x92>
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f7ff fd91 	bl	80115fc <_free_r>
 8011ada:	2000      	movs	r0, #0
 8011adc:	6360      	str	r0, [r4, #52]	; 0x34
 8011ade:	e7c1      	b.n	8011a64 <__sflush_r+0x1c>
 8011ae0:	6a21      	ldr	r1, [r4, #32]
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	47b0      	blx	r6
 8011ae8:	1c41      	adds	r1, r0, #1
 8011aea:	d1c7      	bne.n	8011a7c <__sflush_r+0x34>
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d0c4      	beq.n	8011a7c <__sflush_r+0x34>
 8011af2:	2b1d      	cmp	r3, #29
 8011af4:	d001      	beq.n	8011afa <__sflush_r+0xb2>
 8011af6:	2b16      	cmp	r3, #22
 8011af8:	d101      	bne.n	8011afe <__sflush_r+0xb6>
 8011afa:	602f      	str	r7, [r5, #0]
 8011afc:	e7b1      	b.n	8011a62 <__sflush_r+0x1a>
 8011afe:	89a3      	ldrh	r3, [r4, #12]
 8011b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b04:	81a3      	strh	r3, [r4, #12]
 8011b06:	e7ad      	b.n	8011a64 <__sflush_r+0x1c>
 8011b08:	690f      	ldr	r7, [r1, #16]
 8011b0a:	2f00      	cmp	r7, #0
 8011b0c:	d0a9      	beq.n	8011a62 <__sflush_r+0x1a>
 8011b0e:	0793      	lsls	r3, r2, #30
 8011b10:	680e      	ldr	r6, [r1, #0]
 8011b12:	bf08      	it	eq
 8011b14:	694b      	ldreq	r3, [r1, #20]
 8011b16:	600f      	str	r7, [r1, #0]
 8011b18:	bf18      	it	ne
 8011b1a:	2300      	movne	r3, #0
 8011b1c:	eba6 0807 	sub.w	r8, r6, r7
 8011b20:	608b      	str	r3, [r1, #8]
 8011b22:	f1b8 0f00 	cmp.w	r8, #0
 8011b26:	dd9c      	ble.n	8011a62 <__sflush_r+0x1a>
 8011b28:	6a21      	ldr	r1, [r4, #32]
 8011b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b2c:	4643      	mov	r3, r8
 8011b2e:	463a      	mov	r2, r7
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b0      	blx	r6
 8011b34:	2800      	cmp	r0, #0
 8011b36:	dc06      	bgt.n	8011b46 <__sflush_r+0xfe>
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b3e:	81a3      	strh	r3, [r4, #12]
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b44:	e78e      	b.n	8011a64 <__sflush_r+0x1c>
 8011b46:	4407      	add	r7, r0
 8011b48:	eba8 0800 	sub.w	r8, r8, r0
 8011b4c:	e7e9      	b.n	8011b22 <__sflush_r+0xda>
 8011b4e:	bf00      	nop
 8011b50:	20400001 	.word	0x20400001

08011b54 <_fflush_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	690b      	ldr	r3, [r1, #16]
 8011b58:	4605      	mov	r5, r0
 8011b5a:	460c      	mov	r4, r1
 8011b5c:	b913      	cbnz	r3, 8011b64 <_fflush_r+0x10>
 8011b5e:	2500      	movs	r5, #0
 8011b60:	4628      	mov	r0, r5
 8011b62:	bd38      	pop	{r3, r4, r5, pc}
 8011b64:	b118      	cbz	r0, 8011b6e <_fflush_r+0x1a>
 8011b66:	6983      	ldr	r3, [r0, #24]
 8011b68:	b90b      	cbnz	r3, 8011b6e <_fflush_r+0x1a>
 8011b6a:	f000 f887 	bl	8011c7c <__sinit>
 8011b6e:	4b14      	ldr	r3, [pc, #80]	; (8011bc0 <_fflush_r+0x6c>)
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d11b      	bne.n	8011bac <_fflush_r+0x58>
 8011b74:	686c      	ldr	r4, [r5, #4]
 8011b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0ef      	beq.n	8011b5e <_fflush_r+0xa>
 8011b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b80:	07d0      	lsls	r0, r2, #31
 8011b82:	d404      	bmi.n	8011b8e <_fflush_r+0x3a>
 8011b84:	0599      	lsls	r1, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_fflush_r+0x3a>
 8011b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b8a:	f000 f915 	bl	8011db8 <__retarget_lock_acquire_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	4621      	mov	r1, r4
 8011b92:	f7ff ff59 	bl	8011a48 <__sflush_r>
 8011b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b98:	07da      	lsls	r2, r3, #31
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	d4e0      	bmi.n	8011b60 <_fflush_r+0xc>
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	059b      	lsls	r3, r3, #22
 8011ba2:	d4dd      	bmi.n	8011b60 <_fflush_r+0xc>
 8011ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ba6:	f000 f908 	bl	8011dba <__retarget_lock_release_recursive>
 8011baa:	e7d9      	b.n	8011b60 <_fflush_r+0xc>
 8011bac:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <_fflush_r+0x70>)
 8011bae:	429c      	cmp	r4, r3
 8011bb0:	d101      	bne.n	8011bb6 <_fflush_r+0x62>
 8011bb2:	68ac      	ldr	r4, [r5, #8]
 8011bb4:	e7df      	b.n	8011b76 <_fflush_r+0x22>
 8011bb6:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <_fflush_r+0x74>)
 8011bb8:	429c      	cmp	r4, r3
 8011bba:	bf08      	it	eq
 8011bbc:	68ec      	ldreq	r4, [r5, #12]
 8011bbe:	e7da      	b.n	8011b76 <_fflush_r+0x22>
 8011bc0:	08012434 	.word	0x08012434
 8011bc4:	08012454 	.word	0x08012454
 8011bc8:	08012414 	.word	0x08012414

08011bcc <std>:
 8011bcc:	2300      	movs	r3, #0
 8011bce:	b510      	push	{r4, lr}
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8011bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bda:	6083      	str	r3, [r0, #8]
 8011bdc:	8181      	strh	r1, [r0, #12]
 8011bde:	6643      	str	r3, [r0, #100]	; 0x64
 8011be0:	81c2      	strh	r2, [r0, #14]
 8011be2:	6183      	str	r3, [r0, #24]
 8011be4:	4619      	mov	r1, r3
 8011be6:	2208      	movs	r2, #8
 8011be8:	305c      	adds	r0, #92	; 0x5c
 8011bea:	f7ff fcff 	bl	80115ec <memset>
 8011bee:	4b05      	ldr	r3, [pc, #20]	; (8011c04 <std+0x38>)
 8011bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8011bf2:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <std+0x3c>)
 8011bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bf6:	4b05      	ldr	r3, [pc, #20]	; (8011c0c <std+0x40>)
 8011bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bfa:	4b05      	ldr	r3, [pc, #20]	; (8011c10 <std+0x44>)
 8011bfc:	6224      	str	r4, [r4, #32]
 8011bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8011c00:	bd10      	pop	{r4, pc}
 8011c02:	bf00      	nop
 8011c04:	08011ea1 	.word	0x08011ea1
 8011c08:	08011ec3 	.word	0x08011ec3
 8011c0c:	08011efb 	.word	0x08011efb
 8011c10:	08011f1f 	.word	0x08011f1f

08011c14 <_cleanup_r>:
 8011c14:	4901      	ldr	r1, [pc, #4]	; (8011c1c <_cleanup_r+0x8>)
 8011c16:	f000 b8af 	b.w	8011d78 <_fwalk_reent>
 8011c1a:	bf00      	nop
 8011c1c:	08011b55 	.word	0x08011b55

08011c20 <__sfmoreglue>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	2268      	movs	r2, #104	; 0x68
 8011c24:	1e4d      	subs	r5, r1, #1
 8011c26:	4355      	muls	r5, r2
 8011c28:	460e      	mov	r6, r1
 8011c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c2e:	f7ff fd51 	bl	80116d4 <_malloc_r>
 8011c32:	4604      	mov	r4, r0
 8011c34:	b140      	cbz	r0, 8011c48 <__sfmoreglue+0x28>
 8011c36:	2100      	movs	r1, #0
 8011c38:	e9c0 1600 	strd	r1, r6, [r0]
 8011c3c:	300c      	adds	r0, #12
 8011c3e:	60a0      	str	r0, [r4, #8]
 8011c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c44:	f7ff fcd2 	bl	80115ec <memset>
 8011c48:	4620      	mov	r0, r4
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}

08011c4c <__sfp_lock_acquire>:
 8011c4c:	4801      	ldr	r0, [pc, #4]	; (8011c54 <__sfp_lock_acquire+0x8>)
 8011c4e:	f000 b8b3 	b.w	8011db8 <__retarget_lock_acquire_recursive>
 8011c52:	bf00      	nop
 8011c54:	24005129 	.word	0x24005129

08011c58 <__sfp_lock_release>:
 8011c58:	4801      	ldr	r0, [pc, #4]	; (8011c60 <__sfp_lock_release+0x8>)
 8011c5a:	f000 b8ae 	b.w	8011dba <__retarget_lock_release_recursive>
 8011c5e:	bf00      	nop
 8011c60:	24005129 	.word	0x24005129

08011c64 <__sinit_lock_acquire>:
 8011c64:	4801      	ldr	r0, [pc, #4]	; (8011c6c <__sinit_lock_acquire+0x8>)
 8011c66:	f000 b8a7 	b.w	8011db8 <__retarget_lock_acquire_recursive>
 8011c6a:	bf00      	nop
 8011c6c:	2400512a 	.word	0x2400512a

08011c70 <__sinit_lock_release>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <__sinit_lock_release+0x8>)
 8011c72:	f000 b8a2 	b.w	8011dba <__retarget_lock_release_recursive>
 8011c76:	bf00      	nop
 8011c78:	2400512a 	.word	0x2400512a

08011c7c <__sinit>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	4604      	mov	r4, r0
 8011c80:	f7ff fff0 	bl	8011c64 <__sinit_lock_acquire>
 8011c84:	69a3      	ldr	r3, [r4, #24]
 8011c86:	b11b      	cbz	r3, 8011c90 <__sinit+0x14>
 8011c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c8c:	f7ff bff0 	b.w	8011c70 <__sinit_lock_release>
 8011c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c94:	6523      	str	r3, [r4, #80]	; 0x50
 8011c96:	4b13      	ldr	r3, [pc, #76]	; (8011ce4 <__sinit+0x68>)
 8011c98:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <__sinit+0x6c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c9e:	42a3      	cmp	r3, r4
 8011ca0:	bf04      	itt	eq
 8011ca2:	2301      	moveq	r3, #1
 8011ca4:	61a3      	streq	r3, [r4, #24]
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 f820 	bl	8011cec <__sfp>
 8011cac:	6060      	str	r0, [r4, #4]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 f81c 	bl	8011cec <__sfp>
 8011cb4:	60a0      	str	r0, [r4, #8]
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 f818 	bl	8011cec <__sfp>
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	60e0      	str	r0, [r4, #12]
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	6860      	ldr	r0, [r4, #4]
 8011cc4:	f7ff ff82 	bl	8011bcc <std>
 8011cc8:	68a0      	ldr	r0, [r4, #8]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	2109      	movs	r1, #9
 8011cce:	f7ff ff7d 	bl	8011bcc <std>
 8011cd2:	68e0      	ldr	r0, [r4, #12]
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	2112      	movs	r1, #18
 8011cd8:	f7ff ff78 	bl	8011bcc <std>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	61a3      	str	r3, [r4, #24]
 8011ce0:	e7d2      	b.n	8011c88 <__sinit+0xc>
 8011ce2:	bf00      	nop
 8011ce4:	08012410 	.word	0x08012410
 8011ce8:	08011c15 	.word	0x08011c15

08011cec <__sfp>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	4607      	mov	r7, r0
 8011cf0:	f7ff ffac 	bl	8011c4c <__sfp_lock_acquire>
 8011cf4:	4b1e      	ldr	r3, [pc, #120]	; (8011d70 <__sfp+0x84>)
 8011cf6:	681e      	ldr	r6, [r3, #0]
 8011cf8:	69b3      	ldr	r3, [r6, #24]
 8011cfa:	b913      	cbnz	r3, 8011d02 <__sfp+0x16>
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	f7ff ffbd 	bl	8011c7c <__sinit>
 8011d02:	3648      	adds	r6, #72	; 0x48
 8011d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	d503      	bpl.n	8011d14 <__sfp+0x28>
 8011d0c:	6833      	ldr	r3, [r6, #0]
 8011d0e:	b30b      	cbz	r3, 8011d54 <__sfp+0x68>
 8011d10:	6836      	ldr	r6, [r6, #0]
 8011d12:	e7f7      	b.n	8011d04 <__sfp+0x18>
 8011d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d18:	b9d5      	cbnz	r5, 8011d50 <__sfp+0x64>
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <__sfp+0x88>)
 8011d1c:	60e3      	str	r3, [r4, #12]
 8011d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d22:	6665      	str	r5, [r4, #100]	; 0x64
 8011d24:	f000 f847 	bl	8011db6 <__retarget_lock_init_recursive>
 8011d28:	f7ff ff96 	bl	8011c58 <__sfp_lock_release>
 8011d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d34:	6025      	str	r5, [r4, #0]
 8011d36:	61a5      	str	r5, [r4, #24]
 8011d38:	2208      	movs	r2, #8
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d40:	f7ff fc54 	bl	80115ec <memset>
 8011d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d50:	3468      	adds	r4, #104	; 0x68
 8011d52:	e7d9      	b.n	8011d08 <__sfp+0x1c>
 8011d54:	2104      	movs	r1, #4
 8011d56:	4638      	mov	r0, r7
 8011d58:	f7ff ff62 	bl	8011c20 <__sfmoreglue>
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	6030      	str	r0, [r6, #0]
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1d5      	bne.n	8011d10 <__sfp+0x24>
 8011d64:	f7ff ff78 	bl	8011c58 <__sfp_lock_release>
 8011d68:	230c      	movs	r3, #12
 8011d6a:	603b      	str	r3, [r7, #0]
 8011d6c:	e7ee      	b.n	8011d4c <__sfp+0x60>
 8011d6e:	bf00      	nop
 8011d70:	08012410 	.word	0x08012410
 8011d74:	ffff0001 	.word	0xffff0001

08011d78 <_fwalk_reent>:
 8011d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	4688      	mov	r8, r1
 8011d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d84:	2700      	movs	r7, #0
 8011d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8011d8e:	d505      	bpl.n	8011d9c <_fwalk_reent+0x24>
 8011d90:	6824      	ldr	r4, [r4, #0]
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	d1f7      	bne.n	8011d86 <_fwalk_reent+0xe>
 8011d96:	4638      	mov	r0, r7
 8011d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9c:	89ab      	ldrh	r3, [r5, #12]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d907      	bls.n	8011db2 <_fwalk_reent+0x3a>
 8011da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011da6:	3301      	adds	r3, #1
 8011da8:	d003      	beq.n	8011db2 <_fwalk_reent+0x3a>
 8011daa:	4629      	mov	r1, r5
 8011dac:	4630      	mov	r0, r6
 8011dae:	47c0      	blx	r8
 8011db0:	4307      	orrs	r7, r0
 8011db2:	3568      	adds	r5, #104	; 0x68
 8011db4:	e7e9      	b.n	8011d8a <_fwalk_reent+0x12>

08011db6 <__retarget_lock_init_recursive>:
 8011db6:	4770      	bx	lr

08011db8 <__retarget_lock_acquire_recursive>:
 8011db8:	4770      	bx	lr

08011dba <__retarget_lock_release_recursive>:
 8011dba:	4770      	bx	lr

08011dbc <__swhatbuf_r>:
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	460e      	mov	r6, r1
 8011dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	b096      	sub	sp, #88	; 0x58
 8011dc8:	4614      	mov	r4, r2
 8011dca:	461d      	mov	r5, r3
 8011dcc:	da08      	bge.n	8011de0 <__swhatbuf_r+0x24>
 8011dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	602a      	str	r2, [r5, #0]
 8011dd6:	061a      	lsls	r2, r3, #24
 8011dd8:	d410      	bmi.n	8011dfc <__swhatbuf_r+0x40>
 8011dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dde:	e00e      	b.n	8011dfe <__swhatbuf_r+0x42>
 8011de0:	466a      	mov	r2, sp
 8011de2:	f000 f8c3 	bl	8011f6c <_fstat_r>
 8011de6:	2800      	cmp	r0, #0
 8011de8:	dbf1      	blt.n	8011dce <__swhatbuf_r+0x12>
 8011dea:	9a01      	ldr	r2, [sp, #4]
 8011dec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011df0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011df4:	425a      	negs	r2, r3
 8011df6:	415a      	adcs	r2, r3
 8011df8:	602a      	str	r2, [r5, #0]
 8011dfa:	e7ee      	b.n	8011dda <__swhatbuf_r+0x1e>
 8011dfc:	2340      	movs	r3, #64	; 0x40
 8011dfe:	2000      	movs	r0, #0
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	b016      	add	sp, #88	; 0x58
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e08 <__smakebuf_r>:
 8011e08:	898b      	ldrh	r3, [r1, #12]
 8011e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e0c:	079d      	lsls	r5, r3, #30
 8011e0e:	4606      	mov	r6, r0
 8011e10:	460c      	mov	r4, r1
 8011e12:	d507      	bpl.n	8011e24 <__smakebuf_r+0x1c>
 8011e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e18:	6023      	str	r3, [r4, #0]
 8011e1a:	6123      	str	r3, [r4, #16]
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	6163      	str	r3, [r4, #20]
 8011e20:	b002      	add	sp, #8
 8011e22:	bd70      	pop	{r4, r5, r6, pc}
 8011e24:	ab01      	add	r3, sp, #4
 8011e26:	466a      	mov	r2, sp
 8011e28:	f7ff ffc8 	bl	8011dbc <__swhatbuf_r>
 8011e2c:	9900      	ldr	r1, [sp, #0]
 8011e2e:	4605      	mov	r5, r0
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7ff fc4f 	bl	80116d4 <_malloc_r>
 8011e36:	b948      	cbnz	r0, 8011e4c <__smakebuf_r+0x44>
 8011e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e3c:	059a      	lsls	r2, r3, #22
 8011e3e:	d4ef      	bmi.n	8011e20 <__smakebuf_r+0x18>
 8011e40:	f023 0303 	bic.w	r3, r3, #3
 8011e44:	f043 0302 	orr.w	r3, r3, #2
 8011e48:	81a3      	strh	r3, [r4, #12]
 8011e4a:	e7e3      	b.n	8011e14 <__smakebuf_r+0xc>
 8011e4c:	4b0d      	ldr	r3, [pc, #52]	; (8011e84 <__smakebuf_r+0x7c>)
 8011e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	6020      	str	r0, [r4, #0]
 8011e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e58:	81a3      	strh	r3, [r4, #12]
 8011e5a:	9b00      	ldr	r3, [sp, #0]
 8011e5c:	6163      	str	r3, [r4, #20]
 8011e5e:	9b01      	ldr	r3, [sp, #4]
 8011e60:	6120      	str	r0, [r4, #16]
 8011e62:	b15b      	cbz	r3, 8011e7c <__smakebuf_r+0x74>
 8011e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f000 f891 	bl	8011f90 <_isatty_r>
 8011e6e:	b128      	cbz	r0, 8011e7c <__smakebuf_r+0x74>
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	f023 0303 	bic.w	r3, r3, #3
 8011e76:	f043 0301 	orr.w	r3, r3, #1
 8011e7a:	81a3      	strh	r3, [r4, #12]
 8011e7c:	89a0      	ldrh	r0, [r4, #12]
 8011e7e:	4305      	orrs	r5, r0
 8011e80:	81a5      	strh	r5, [r4, #12]
 8011e82:	e7cd      	b.n	8011e20 <__smakebuf_r+0x18>
 8011e84:	08011c15 	.word	0x08011c15

08011e88 <__malloc_lock>:
 8011e88:	4801      	ldr	r0, [pc, #4]	; (8011e90 <__malloc_lock+0x8>)
 8011e8a:	f7ff bf95 	b.w	8011db8 <__retarget_lock_acquire_recursive>
 8011e8e:	bf00      	nop
 8011e90:	24005128 	.word	0x24005128

08011e94 <__malloc_unlock>:
 8011e94:	4801      	ldr	r0, [pc, #4]	; (8011e9c <__malloc_unlock+0x8>)
 8011e96:	f7ff bf90 	b.w	8011dba <__retarget_lock_release_recursive>
 8011e9a:	bf00      	nop
 8011e9c:	24005128 	.word	0x24005128

08011ea0 <__sread>:
 8011ea0:	b510      	push	{r4, lr}
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ea8:	f000 f894 	bl	8011fd4 <_read_r>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	bfab      	itete	ge
 8011eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8011eb4:	181b      	addge	r3, r3, r0
 8011eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011eba:	bfac      	ite	ge
 8011ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ebe:	81a3      	strhlt	r3, [r4, #12]
 8011ec0:	bd10      	pop	{r4, pc}

08011ec2 <__swrite>:
 8011ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec6:	461f      	mov	r7, r3
 8011ec8:	898b      	ldrh	r3, [r1, #12]
 8011eca:	05db      	lsls	r3, r3, #23
 8011ecc:	4605      	mov	r5, r0
 8011ece:	460c      	mov	r4, r1
 8011ed0:	4616      	mov	r6, r2
 8011ed2:	d505      	bpl.n	8011ee0 <__swrite+0x1e>
 8011ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ed8:	2302      	movs	r3, #2
 8011eda:	2200      	movs	r2, #0
 8011edc:	f000 f868 	bl	8011fb0 <_lseek_r>
 8011ee0:	89a3      	ldrh	r3, [r4, #12]
 8011ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011eea:	81a3      	strh	r3, [r4, #12]
 8011eec:	4632      	mov	r2, r6
 8011eee:	463b      	mov	r3, r7
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef6:	f000 b817 	b.w	8011f28 <_write_r>

08011efa <__sseek>:
 8011efa:	b510      	push	{r4, lr}
 8011efc:	460c      	mov	r4, r1
 8011efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f02:	f000 f855 	bl	8011fb0 <_lseek_r>
 8011f06:	1c43      	adds	r3, r0, #1
 8011f08:	89a3      	ldrh	r3, [r4, #12]
 8011f0a:	bf15      	itete	ne
 8011f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f16:	81a3      	strheq	r3, [r4, #12]
 8011f18:	bf18      	it	ne
 8011f1a:	81a3      	strhne	r3, [r4, #12]
 8011f1c:	bd10      	pop	{r4, pc}

08011f1e <__sclose>:
 8011f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f22:	f000 b813 	b.w	8011f4c <_close_r>
	...

08011f28 <_write_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	4d07      	ldr	r5, [pc, #28]	; (8011f48 <_write_r+0x20>)
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	4608      	mov	r0, r1
 8011f30:	4611      	mov	r1, r2
 8011f32:	2200      	movs	r2, #0
 8011f34:	602a      	str	r2, [r5, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	f7ef ff61 	bl	8001dfe <_write>
 8011f3c:	1c43      	adds	r3, r0, #1
 8011f3e:	d102      	bne.n	8011f46 <_write_r+0x1e>
 8011f40:	682b      	ldr	r3, [r5, #0]
 8011f42:	b103      	cbz	r3, 8011f46 <_write_r+0x1e>
 8011f44:	6023      	str	r3, [r4, #0]
 8011f46:	bd38      	pop	{r3, r4, r5, pc}
 8011f48:	2400512c 	.word	0x2400512c

08011f4c <_close_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d06      	ldr	r5, [pc, #24]	; (8011f68 <_close_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	f7ef ff6d 	bl	8001e36 <_close>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_close_r+0x1a>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_close_r+0x1a>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	2400512c 	.word	0x2400512c

08011f6c <_fstat_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d07      	ldr	r5, [pc, #28]	; (8011f8c <_fstat_r+0x20>)
 8011f70:	2300      	movs	r3, #0
 8011f72:	4604      	mov	r4, r0
 8011f74:	4608      	mov	r0, r1
 8011f76:	4611      	mov	r1, r2
 8011f78:	602b      	str	r3, [r5, #0]
 8011f7a:	f7ef ff68 	bl	8001e4e <_fstat>
 8011f7e:	1c43      	adds	r3, r0, #1
 8011f80:	d102      	bne.n	8011f88 <_fstat_r+0x1c>
 8011f82:	682b      	ldr	r3, [r5, #0]
 8011f84:	b103      	cbz	r3, 8011f88 <_fstat_r+0x1c>
 8011f86:	6023      	str	r3, [r4, #0]
 8011f88:	bd38      	pop	{r3, r4, r5, pc}
 8011f8a:	bf00      	nop
 8011f8c:	2400512c 	.word	0x2400512c

08011f90 <_isatty_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d06      	ldr	r5, [pc, #24]	; (8011fac <_isatty_r+0x1c>)
 8011f94:	2300      	movs	r3, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	602b      	str	r3, [r5, #0]
 8011f9c:	f7ef ff67 	bl	8001e6e <_isatty>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d102      	bne.n	8011faa <_isatty_r+0x1a>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	b103      	cbz	r3, 8011faa <_isatty_r+0x1a>
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	2400512c 	.word	0x2400512c

08011fb0 <_lseek_r>:
 8011fb0:	b538      	push	{r3, r4, r5, lr}
 8011fb2:	4d07      	ldr	r5, [pc, #28]	; (8011fd0 <_lseek_r+0x20>)
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	4608      	mov	r0, r1
 8011fb8:	4611      	mov	r1, r2
 8011fba:	2200      	movs	r2, #0
 8011fbc:	602a      	str	r2, [r5, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	f7ef ff60 	bl	8001e84 <_lseek>
 8011fc4:	1c43      	adds	r3, r0, #1
 8011fc6:	d102      	bne.n	8011fce <_lseek_r+0x1e>
 8011fc8:	682b      	ldr	r3, [r5, #0]
 8011fca:	b103      	cbz	r3, 8011fce <_lseek_r+0x1e>
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	bd38      	pop	{r3, r4, r5, pc}
 8011fd0:	2400512c 	.word	0x2400512c

08011fd4 <_read_r>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	4d07      	ldr	r5, [pc, #28]	; (8011ff4 <_read_r+0x20>)
 8011fd8:	4604      	mov	r4, r0
 8011fda:	4608      	mov	r0, r1
 8011fdc:	4611      	mov	r1, r2
 8011fde:	2200      	movs	r2, #0
 8011fe0:	602a      	str	r2, [r5, #0]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	f7ef feee 	bl	8001dc4 <_read>
 8011fe8:	1c43      	adds	r3, r0, #1
 8011fea:	d102      	bne.n	8011ff2 <_read_r+0x1e>
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	b103      	cbz	r3, 8011ff2 <_read_r+0x1e>
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	bd38      	pop	{r3, r4, r5, pc}
 8011ff4:	2400512c 	.word	0x2400512c

08011ff8 <_init>:
 8011ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ffa:	bf00      	nop
 8011ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ffe:	bc08      	pop	{r3}
 8012000:	469e      	mov	lr, r3
 8012002:	4770      	bx	lr

08012004 <_fini>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	bf00      	nop
 8012008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801200a:	bc08      	pop	{r3}
 801200c:	469e      	mov	lr, r3
 801200e:	4770      	bx	lr
