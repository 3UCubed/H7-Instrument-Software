
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a960  0801a960  0002a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801adf8  0801adf8  0002adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ae00  0801ae00  0002ae00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ae04  0801ae04  0002ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  24000000  0801ae08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801af3c  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801af3c  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040b9e  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c8f  00000000  00000000  00070d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b90  00000000  00000000  00078990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002848  00000000  00000000  0007b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000431b9  00000000  00000000  000c454b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196996  00000000  00000000  00107704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e09a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc38  00000000  00000000  0029e0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a948 	.word	0x0801a948

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801a948 	.word	0x0801a948

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fc17 	bl	8005e9c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f8f8 	bl	8003868 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fd32 	bl	80070ec <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f8eb 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fe75 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f8d2 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fe67 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f8c4 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fe59 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f8b6 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fe4b 	bl	80063a4 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f8a8 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fe3c 	bl	80063a4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f899 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fe2d 	bl	80063a4 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f88a 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fe1e 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f87b 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fe0f 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f86c 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fe00 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f85d 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fdf1 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f84e 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fde2 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f83f 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 faff 	bl	8005e9c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 ffe0 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fd6a 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 ffc7 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fd5c 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 ffb9 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fd4e 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 ffab 	bl	8003868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fd40 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 ff9d 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fa6a 	bl	800aed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fa5e 	bl	800aed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fa52 	bl	800aed4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f8fd 	bl	8007c74 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 fef2 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 ffb8 	bl	8005a54 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 ffb2 	bl	8005a54 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f89d 	bl	8007c74 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fe92 	bl	8003868 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 f9d5 	bl	8019f3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fc65 	bl	8007468 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fe60 	bl	8003868 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fe80 	bl	80078c8 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fe4b 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f93d 	bl	800aed4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 ffe8 	bl	8007c74 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fddd 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fbaa 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fbc1 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fb81 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fb98 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fb79 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fb90 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fb71 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fb88 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fb69 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fb80 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fb61 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fb78 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fb59 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fb70 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fb51 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fb68 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fb49 	bl	8007418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fb60 	bl	800744c <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f8b6 	bl	8019f3c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fec0 	bl	800abf0 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fe65 	bl	800abf0 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fcb2 	bl	800a920 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1a      	cmp	r3, #26
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fc06 	bl	800a920 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fd12 	bl	800abf0 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fcaf 	bl	800abf0 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fafc 	bl	800a920 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fbda 	bl	800abf0 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1a      	cmp	r3, #26
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f9e5 	bl	800a920 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 faf2 	bl	800abf0 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fba2 	bl	8019f3c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f9cd 	bl	800abf0 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 f81b 	bl	800a920 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f92f 	bl	800abf0 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fa3d 	bl	8019f3c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fa34 	bl	8019f3c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fee7 	bl	800a920 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 fed4 	bl	800a920 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f97f 	bl	8019f3c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f978 	bl	8019f3c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fe2d 	bl	800a920 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1a      	cmp	r3, #26
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fe45 	bl	800aa44 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 feed 	bl	800abf0 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fd39 	bl	800a920 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NB_OF_VAR];

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]

	switch (error.category) {
 8001f38:	793b      	ldrb	r3, [r7, #4]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d826      	bhi.n	8001f8c <handle_error+0x5c>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <handle_error+0x14>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f59 	.word	0x08001f59
 8001f48:	08001f6d 	.word	0x08001f6d
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001f7d 	.word	0x08001f7d
 8001f54:	08001f85 	.word	0x08001f85
	case EC_power_supply_rail:
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <handle_error+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f014 ff28 	bl	8016db4 <osEventFlagsSet>
		increment_error_counter(error);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f84d 	bl	8002004 <increment_error_counter>
//		osEventFlagsSet(mode_event_flags, IDLE_FLAG);

		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f6a:	e010      	b.n	8001f8e <handle_error+0x5e>
	case EC_seu:
		increment_error_counter(error);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f849 	bl	8002004 <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f72:	e00c      	b.n	8001f8e <handle_error+0x5e>
	case EC_peripheral:
		increment_error_counter(error);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f845 	bl	8002004 <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f7a:	e008      	b.n	8001f8e <handle_error+0x5e>
	case EC_brownout:
		increment_error_counter(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f841 	bl	8002004 <increment_error_counter>
		break;
 8001f82:	e004      	b.n	8001f8e <handle_error+0x5e>
	case EC_watchdog:
		increment_error_counter(error);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f83d 	bl	8002004 <increment_error_counter>
		break;
 8001f8a:	e000      	b.n	8001f8e <handle_error+0x5e>
	default:
		//send_error_packet(error);
		break;
 8001f8c:	bf00      	nop
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	24001a98 	.word	0x24001a98

08001f9c <error_counter_init>:

void error_counter_init() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	// Starting up EEPROM Emulator
	HAL_FLASH_Unlock();
 8001fa2:	f008 fd4f 	bl	800aa44 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fa6:	f7fe fef7 	bl	8000d98 <EE_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <error_counter_init+0x18>
		Error_Handler();
 8001fb0:	f001 fc5a 	bl	8003868 <Error_Handler>
	}

	// Updating our local copy of error counters from EE
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	e018      	b.n	8001fec <error_counter_init+0x50>
		uint16_t tmp = 7;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	807b      	strh	r3, [r7, #2]
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <error_counter_init+0x60>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <error_counter_init+0x64>)
 8001fcc:	440b      	add	r3, r1
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7ff fb99 	bl	8001708 <EE_ReadVariable>
			//Error_Handler();
		}
		tmp = local_cpy[i];
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <error_counter_init+0x64>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fde:	807b      	strh	r3, [r7, #2]
		tmp++;
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b1a      	cmp	r3, #26
 8001ff0:	dde3      	ble.n	8001fba <error_counter_init+0x1e>
	}


}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24000000 	.word	0x24000000
 8002000:	240003a4 	.word	0x240003a4

08002004 <increment_error_counter>:


void increment_error_counter(ERROR_STRUCT error) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800200c:	793b      	ldrb	r3, [r7, #4]
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <increment_error_counter+0x38>)
 8002010:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002014:	3201      	adds	r2, #1
 8002016:	b291      	uxth	r1, r2
 8002018:	4a08      	ldr	r2, [pc, #32]	; (800203c <increment_error_counter+0x38>)
 800201a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800201e:	797b      	ldrb	r3, [r7, #5]
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <increment_error_counter+0x38>)
 8002022:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002026:	3201      	adds	r2, #1
 8002028:	b291      	uxth	r1, r2
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <increment_error_counter+0x38>)
 800202c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002030:	f000 f806 	bl	8002040 <update_error_counter>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240003a4 	.word	0x240003a4

08002040 <update_error_counter>:




void update_error_counter(){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
	// Writes our local copy of the error counters to EE
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e013      	b.n	8002074 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <update_error_counter+0x44>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <update_error_counter+0x48>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f7ff fb9a 	bl	8001798 <EE_WriteVariable>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <update_error_counter+0x2e>
			Error_Handler();
 800206a:	f001 fbfd 	bl	8003868 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3301      	adds	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b1a      	cmp	r3, #26
 8002078:	dde8      	ble.n	800204c <update_error_counter+0xc>
		}
	}
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	24000000 	.word	0x24000000
 8002088:	240003a4 	.word	0x240003a4

0800208c <reset_error_counters>:


void reset_error_counters() {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	e00f      	b.n	80020b8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <reset_error_counters+0x3c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fb78 	bl	8001798 <EE_WriteVariable>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <reset_error_counters+0x26>
			Error_Handler();
 80020ae:	f001 fbdb 	bl	8003868 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3301      	adds	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b1a      	cmp	r3, #26
 80020bc:	ddec      	ble.n	8002098 <reset_error_counters+0xc>
		}
	}
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	24000000 	.word	0x24000000

080020cc <send_previous_error_packet>:

void send_previous_error_packet() {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	; 0x38
 80020d0:	af00      	add	r7, sp, #0
	uint8_t buffer[PREVIOUS_ERROR_PACKET_SIZE];

	buffer[0] = ERROR_PACKET_SYNC;
 80020d2:	23cc      	movs	r3, #204	; 0xcc
 80020d4:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_PACKET_SYNC;
 80020d6:	23cc      	movs	r3, #204	; 0xcc
 80020d8:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80020da:	4b98      	ldr	r3, [pc, #608]	; (800233c <send_previous_error_packet+0x270>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 80020e6:	4b95      	ldr	r3, [pc, #596]	; (800233c <send_previous_error_packet+0x270>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80020ee:	4b93      	ldr	r3, [pc, #588]	; (800233c <send_previous_error_packet+0x270>)
 80020f0:	885b      	ldrh	r3, [r3, #2]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80020fa:	4b90      	ldr	r3, [pc, #576]	; (800233c <send_previous_error_packet+0x270>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 8002102:	4b8e      	ldr	r3, [pc, #568]	; (800233c <send_previous_error_packet+0x270>)
 8002104:	889b      	ldrh	r3, [r3, #4]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <send_previous_error_packet+0x270>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <send_previous_error_packet+0x270>)
 8002118:	88db      	ldrh	r3, [r3, #6]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b29b      	uxth	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 8002122:	4b86      	ldr	r3, [pc, #536]	; (800233c <send_previous_error_packet+0x270>)
 8002124:	88db      	ldrh	r3, [r3, #6]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 800212a:	4b84      	ldr	r3, [pc, #528]	; (800233c <send_previous_error_packet+0x270>)
 800212c:	891b      	ldrh	r3, [r3, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 8002136:	4b81      	ldr	r3, [pc, #516]	; (800233c <send_previous_error_packet+0x270>)
 8002138:	891b      	ldrh	r3, [r3, #8]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 800213e:	4b7f      	ldr	r3, [pc, #508]	; (800233c <send_previous_error_packet+0x270>)
 8002140:	895b      	ldrh	r3, [r3, #10]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	b29b      	uxth	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 800214a:	4b7c      	ldr	r3, [pc, #496]	; (800233c <send_previous_error_packet+0x270>)
 800214c:	895b      	ldrh	r3, [r3, #10]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8002152:	4b7a      	ldr	r3, [pc, #488]	; (800233c <send_previous_error_packet+0x270>)
 8002154:	899b      	ldrh	r3, [r3, #12]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 800215e:	4b77      	ldr	r3, [pc, #476]	; (800233c <send_previous_error_packet+0x270>)
 8002160:	899b      	ldrh	r3, [r3, #12]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 8002166:	4b75      	ldr	r3, [pc, #468]	; (800233c <send_previous_error_packet+0x270>)
 8002168:	89db      	ldrh	r3, [r3, #14]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <send_previous_error_packet+0x270>)
 8002174:	89db      	ldrh	r3, [r3, #14]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800217a:	4b70      	ldr	r3, [pc, #448]	; (800233c <send_previous_error_packet+0x270>)
 800217c:	8a1b      	ldrh	r3, [r3, #16]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 8002186:	4b6d      	ldr	r3, [pc, #436]	; (800233c <send_previous_error_packet+0x270>)
 8002188:	8a1b      	ldrh	r3, [r3, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <send_previous_error_packet+0x270>)
 8002190:	8a5b      	ldrh	r3, [r3, #18]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 800219a:	4b68      	ldr	r3, [pc, #416]	; (800233c <send_previous_error_packet+0x270>)
 800219c:	8a5b      	ldrh	r3, [r3, #18]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 80021a2:	4b66      	ldr	r3, [pc, #408]	; (800233c <send_previous_error_packet+0x270>)
 80021a4:	8a9b      	ldrh	r3, [r3, #20]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <send_previous_error_packet+0x270>)
 80021b0:	8a9b      	ldrh	r3, [r3, #20]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 80021b6:	4b61      	ldr	r3, [pc, #388]	; (800233c <send_previous_error_packet+0x270>)
 80021b8:	8adb      	ldrh	r3, [r3, #22]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 80021c2:	4b5e      	ldr	r3, [pc, #376]	; (800233c <send_previous_error_packet+0x270>)
 80021c4:	8adb      	ldrh	r3, [r3, #22]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 80021ca:	4b5c      	ldr	r3, [pc, #368]	; (800233c <send_previous_error_packet+0x270>)
 80021cc:	8b1b      	ldrh	r3, [r3, #24]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 80021d6:	4b59      	ldr	r3, [pc, #356]	; (800233c <send_previous_error_packet+0x270>)
 80021d8:	8b1b      	ldrh	r3, [r3, #24]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80021de:	4b57      	ldr	r3, [pc, #348]	; (800233c <send_previous_error_packet+0x270>)
 80021e0:	8b5b      	ldrh	r3, [r3, #26]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <send_previous_error_packet+0x270>)
 80021ec:	8b5b      	ldrh	r3, [r3, #26]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80021f2:	4b52      	ldr	r3, [pc, #328]	; (800233c <send_previous_error_packet+0x270>)
 80021f4:	8b9b      	ldrh	r3, [r3, #28]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80021fe:	4b4f      	ldr	r3, [pc, #316]	; (800233c <send_previous_error_packet+0x270>)
 8002200:	8b9b      	ldrh	r3, [r3, #28]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 8002206:	4b4d      	ldr	r3, [pc, #308]	; (800233c <send_previous_error_packet+0x270>)
 8002208:	8bdb      	ldrh	r3, [r3, #30]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 8002214:	4b49      	ldr	r3, [pc, #292]	; (800233c <send_previous_error_packet+0x270>)
 8002216:	8bdb      	ldrh	r3, [r3, #30]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <send_previous_error_packet+0x270>)
 8002220:	8c1b      	ldrh	r3, [r3, #32]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <send_previous_error_packet+0x270>)
 800222e:	8c1b      	ldrh	r3, [r3, #32]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <send_previous_error_packet+0x270>)
 8002238:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 8002244:	4b3d      	ldr	r3, [pc, #244]	; (800233c <send_previous_error_packet+0x270>)
 8002246:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <send_previous_error_packet+0x270>)
 8002250:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 800225c:	4b37      	ldr	r3, [pc, #220]	; (800233c <send_previous_error_packet+0x270>)
 800225e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <send_previous_error_packet+0x270>)
 8002268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29b      	uxth	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <send_previous_error_packet+0x270>)
 8002276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <send_previous_error_packet+0x270>)
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <send_previous_error_packet+0x270>)
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 8002296:	4b29      	ldr	r3, [pc, #164]	; (800233c <send_previous_error_packet+0x270>)
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <send_previous_error_packet+0x270>)
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <send_previous_error_packet+0x270>)
 80022b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <send_previous_error_packet+0x270>)
 80022be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <send_previous_error_packet+0x270>)
 80022c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <send_previous_error_packet+0x270>)
 80022d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <send_previous_error_packet+0x270>)
 80022e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <send_previous_error_packet+0x270>)
 80022ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <send_previous_error_packet+0x270>)
 80022f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <send_previous_error_packet+0x270>)
 8002306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <send_previous_error_packet+0x270>)
 8002310:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <send_previous_error_packet+0x270>)
 800231e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, PREVIOUS_ERROR_PACKET_SIZE, 100);
 8002326:	4639      	mov	r1, r7
 8002328:	2364      	movs	r3, #100	; 0x64
 800232a:	2238      	movs	r2, #56	; 0x38
 800232c:	4804      	ldr	r0, [pc, #16]	; (8002340 <send_previous_error_packet+0x274>)
 800232e:	f011 fddd 	bl	8013eec <HAL_UART_Transmit>
}
 8002332:	bf00      	nop
 8002334:	3738      	adds	r7, #56	; 0x38
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	240003a4 	.word	0x240003a4
 8002340:	24001e3c 	.word	0x24001e3c

08002344 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <vApplicationTickHook+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	4a03      	ldr	r2, [pc, #12]	; (800235c <vApplicationTickHook+0x18>)
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	24001ae0 	.word	0x24001ae0

08002360 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <MX_FREERTOS_Init+0x98>)
 800237e:	2100      	movs	r1, #0
 8002380:	4824      	ldr	r0, [pc, #144]	; (8002414 <MX_FREERTOS_Init+0x9c>)
 8002382:	f014 fc0b 	bl	8016b9c <osThreadNew>
 8002386:	4603      	mov	r3, r0
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <MX_FREERTOS_Init+0xa0>)
 800238a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <MX_FREERTOS_Init+0xa4>)
 800238e:	2100      	movs	r1, #0
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <MX_FREERTOS_Init+0xa8>)
 8002392:	f014 fc03 	bl	8016b9c <osThreadNew>
 8002396:	4603      	mov	r3, r0
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <MX_FREERTOS_Init+0xac>)
 800239a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800239c:	4a22      	ldr	r2, [pc, #136]	; (8002428 <MX_FREERTOS_Init+0xb0>)
 800239e:	2100      	movs	r1, #0
 80023a0:	4822      	ldr	r0, [pc, #136]	; (800242c <MX_FREERTOS_Init+0xb4>)
 80023a2:	f014 fbfb 	bl	8016b9c <osThreadNew>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <MX_FREERTOS_Init+0xb8>)
 80023aa:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80023ac:	4a21      	ldr	r2, [pc, #132]	; (8002434 <MX_FREERTOS_Init+0xbc>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	4821      	ldr	r0, [pc, #132]	; (8002438 <MX_FREERTOS_Init+0xc0>)
 80023b2:	f014 fbf3 	bl	8016b9c <osThreadNew>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <MX_FREERTOS_Init+0xc4>)
 80023ba:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <MX_FREERTOS_Init+0xc8>)
 80023be:	2100      	movs	r1, #0
 80023c0:	4820      	ldr	r0, [pc, #128]	; (8002444 <MX_FREERTOS_Init+0xcc>)
 80023c2:	f014 fbeb 	bl	8016b9c <osThreadNew>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <MX_FREERTOS_Init+0xd0>)
 80023ca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <MX_FREERTOS_Init+0xd4>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	481f      	ldr	r0, [pc, #124]	; (8002450 <MX_FREERTOS_Init+0xd8>)
 80023d2:	f014 fbe3 	bl	8016b9c <osThreadNew>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <MX_FREERTOS_Init+0xdc>)
 80023da:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <MX_FREERTOS_Init+0xe0>)
 80023de:	2100      	movs	r1, #0
 80023e0:	481e      	ldr	r0, [pc, #120]	; (800245c <MX_FREERTOS_Init+0xe4>)
 80023e2:	f014 fbdb 	bl	8016b9c <osThreadNew>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <MX_FREERTOS_Init+0xe8>)
 80023ea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <MX_FREERTOS_Init+0xec>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <MX_FREERTOS_Init+0xf0>)
 80023f2:	f014 fbd3 	bl	8016b9c <osThreadNew>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a1c      	ldr	r2, [pc, #112]	; (800246c <MX_FREERTOS_Init+0xf4>)
 80023fa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <MX_FREERTOS_Init+0xf8>)
 80023fe:	2100      	movs	r1, #0
 8002400:	481c      	ldr	r0, [pc, #112]	; (8002474 <MX_FREERTOS_Init+0xfc>)
 8002402:	f014 fbcb 	bl	8016b9c <osThreadNew>
 8002406:	4603      	mov	r3, r0
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <MX_FREERTOS_Init+0x100>)
 800240a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	0801abc8 	.word	0x0801abc8
 8002414:	0800247d 	.word	0x0800247d
 8002418:	240003dc 	.word	0x240003dc
 800241c:	0801abec 	.word	0x0801abec
 8002420:	080024a5 	.word	0x080024a5
 8002424:	2400063c 	.word	0x2400063c
 8002428:	0801ac10 	.word	0x0801ac10
 800242c:	080024cd 	.word	0x080024cd
 8002430:	2400089c 	.word	0x2400089c
 8002434:	0801ac34 	.word	0x0801ac34
 8002438:	080024f5 	.word	0x080024f5
 800243c:	24000afc 	.word	0x24000afc
 8002440:	0801ac58 	.word	0x0801ac58
 8002444:	0800256d 	.word	0x0800256d
 8002448:	24000d5c 	.word	0x24000d5c
 800244c:	0801ac7c 	.word	0x0801ac7c
 8002450:	080025e5 	.word	0x080025e5
 8002454:	24000fbc 	.word	0x24000fbc
 8002458:	0801aca0 	.word	0x0801aca0
 800245c:	08002615 	.word	0x08002615
 8002460:	2400121c 	.word	0x2400121c
 8002464:	0801acc4 	.word	0x0801acc4
 8002468:	08002645 	.word	0x08002645
 800246c:	2400147c 	.word	0x2400147c
 8002470:	0801ace8 	.word	0x0801ace8
 8002474:	08002725 	.word	0x08002725
 8002478:	240016dc 	.word	0x240016dc

0800247c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <PMT_init+0x24>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800248c:	2200      	movs	r2, #0
 800248e:	2101      	movs	r1, #1
 8002490:	f014 fd06 	bl	8016ea0 <osEventFlagsWait>

		create_pmt_packet();
 8002494:	f001 f9f6 	bl	8003884 <create_pmt_packet>

		osThreadYield();
 8002498:	f014 fc12 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800249c:	e7f2      	b.n	8002484 <PMT_init+0x8>
 800249e:	bf00      	nop
 80024a0:	24001a90 	.word	0x24001a90

080024a4 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <ERPA_init+0x24>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b4:	2200      	movs	r2, #0
 80024b6:	2102      	movs	r1, #2
 80024b8:	f014 fcf2 	bl	8016ea0 <osEventFlagsWait>

		create_erpa_packet();
 80024bc:	f001 fa28 	bl	8003910 <create_erpa_packet>

		osThreadYield();
 80024c0:	f014 fbfe 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024c4:	e7f2      	b.n	80024ac <ERPA_init+0x8>
 80024c6:	bf00      	nop
 80024c8:	24001a90 	.word	0x24001a90

080024cc <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HK_init+0x24>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024dc:	2200      	movs	r2, #0
 80024de:	2104      	movs	r1, #4
 80024e0:	f014 fcde 	bl	8016ea0 <osEventFlagsWait>

		create_hk_packet();
 80024e4:	f001 fa72 	bl	80039cc <create_hk_packet>

		osThreadYield();
 80024e8:	f014 fbea 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024ec:	e7f2      	b.n	80024d4 <HK_init+0x8>
 80024ee:	bf00      	nop
 80024f0:	24001a90 	.word	0x24001a90

080024f4 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <AUTOINIT_init+0x70>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002504:	2200      	movs	r2, #0
 8002506:	2104      	movs	r1, #4
 8002508:	f014 fcca 	bl	8016ea0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e012      	b.n	8002538 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002512:	4a15      	ldr	r2, [pc, #84]	; (8002568 <AUTOINIT_init+0x74>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <AUTOINIT_init+0x74>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	f008 fe9c 	bl	800b264 <HAL_GPIO_WritePin>
			osDelay(100);
 800252c:	2064      	movs	r0, #100	; 0x64
 800252e:	f014 fbe7 	bl	8016d00 <osDelay>
		for (int i = 0; i < 7; i++) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3301      	adds	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b06      	cmp	r3, #6
 800253c:	dde9      	ble.n	8002512 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800253e:	2308      	movs	r3, #8
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e008      	b.n	8002556 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f003 f87c 	bl	8005648 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b0d      	cmp	r3, #13
 800255a:	ddf3      	ble.n	8002544 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 800255c:	f014 fbb0 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002560:	e7cc      	b.n	80024fc <AUTOINIT_init+0x8>
 8002562:	bf00      	nop
 8002564:	24001a94 	.word	0x24001a94
 8002568:	0801ad0c 	.word	0x0801ad0c

0800256c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <AUTODEINIT_init+0x70>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257c:	2200      	movs	r2, #0
 800257e:	2108      	movs	r1, #8
 8002580:	f014 fc8e 	bl	8016ea0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002584:	230d      	movs	r3, #13
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e008      	b.n	800259c <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f003 f859 	bl	8005648 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	dcf3      	bgt.n	800258a <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80025a2:	2306      	movs	r3, #6
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	e012      	b.n	80025ce <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <AUTODEINIT_init+0x74>)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <AUTODEINIT_init+0x74>)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	4619      	mov	r1, r3
 80025be:	f008 fe51 	bl	800b264 <HAL_GPIO_WritePin>
			osDelay(100);
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	f014 fb9c 	bl	8016d00 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dae9      	bge.n	80025a8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80025d4:	f014 fb74 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025d8:	e7cc      	b.n	8002574 <AUTODEINIT_init+0x8>
 80025da:	bf00      	nop
 80025dc:	24001a94 	.word	0x24001a94
 80025e0:	0801ad0c 	.word	0x0801ad0c

080025e4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <Voltage_Monitor_init+0x28>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f4:	2200      	movs	r2, #0
 80025f6:	2101      	movs	r1, #1
 80025f8:	f014 fc52 	bl	8016ea0 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <Voltage_Monitor_init+0x2c>)
 80025fe:	f00b f9af 	bl	800d960 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 8002602:	f003 f841 	bl	8005688 <set_rail_monitor>
	  monitor_rails();
 8002606:	f003 f8c3 	bl	8005790 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800260a:	e7ef      	b.n	80025ec <Voltage_Monitor_init+0x8>
 800260c:	24001a94 	.word	0x24001a94
 8002610:	24001a80 	.word	0x24001a80

08002614 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <STOP_init+0x2c>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	2200      	movs	r2, #0
 8002626:	2102      	movs	r1, #2
 8002628:	f014 fc3a 	bl	8016ea0 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <STOP_init+0x2c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2102      	movs	r1, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f014 fc02 	bl	8016e3c <osEventFlagsClear>

	  enter_stop();
 8002638:	f001 f8f8 	bl	800382c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800263c:	e7ee      	b.n	800261c <STOP_init+0x8>
 800263e:	bf00      	nop
 8002640:	24001a94 	.word	0x24001a94

08002644 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <Science_init+0xbc>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	f014 fc22 	bl	8016ea0 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e012      	b.n	8002688 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <Science_init+0xc0>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <Science_init+0xc0>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	889b      	ldrh	r3, [r3, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	4619      	mov	r1, r3
 8002678:	f008 fdf4 	bl	800b264 <HAL_GPIO_WritePin>
			osDelay(200);
 800267c:	20c8      	movs	r0, #200	; 0xc8
 800267e:	f014 fb3f 	bl	8016d00 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b08      	cmp	r3, #8
 800268c:	dde9      	ble.n	8002662 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800268e:	2308      	movs	r3, #8
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	e008      	b.n	80026a6 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f002 ffd4 	bl	8005648 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	ddf3      	ble.n	8002694 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80026b0:	2300      	movs	r3, #0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2320      	movs	r3, #32
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <Science_init+0xc4>)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <Science_init+0xc8>)
 80026bc:	f004 ff4e 	bl	800755c <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <Science_init+0xcc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <Science_init+0xd0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <Science_init+0xd4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80026d2:	f001 fac9 	bl	8003c68 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <Science_init+0xd8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2104      	movs	r1, #4
 80026dc:	4618      	mov	r0, r3
 80026de:	f014 fb69 	bl	8016db4 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80026e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80026ec:	2100      	movs	r1, #0
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <Science_init+0xdc>)
 80026f0:	f010 f872 	bl	80127d8 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80026f4:	b662      	cpsie	i
}
 80026f6:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 80026f8:	f014 fae2 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80026fc:	e7a6      	b.n	800264c <Science_init+0x8>
 80026fe:	bf00      	nop
 8002700:	24001a98 	.word	0x24001a98
 8002704:	0801ad0c 	.word	0x0801ad0c
 8002708:	24000038 	.word	0x24000038
 800270c:	24000314 	.word	0x24000314
 8002710:	24001adc 	.word	0x24001adc
 8002714:	24001add 	.word	0x24001add
 8002718:	24001ae0 	.word	0x24001ae0
 800271c:	24001a90 	.word	0x24001a90
 8002720:	24001da4 	.word	0x24001da4

08002724 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <Idle_init+0x94>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002734:	2200      	movs	r2, #0
 8002736:	2102      	movs	r1, #2
 8002738:	f014 fbb2 	bl	8016ea0 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <Idle_init+0x98>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800274a:	2100      	movs	r1, #0
 800274c:	481c      	ldr	r0, [pc, #112]	; (80027c0 <Idle_init+0x9c>)
 800274e:	f010 f99d 	bl	8012a8c <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <Idle_init+0xa0>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002758:	2100      	movs	r1, #0
 800275a:	481b      	ldr	r0, [pc, #108]	; (80027c8 <Idle_init+0xa4>)
 800275c:	f004 ffbe 	bl	80076dc <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002760:	2310      	movs	r3, #16
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e008      	b.n	8002778 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f002 ff6b 	bl	8005648 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b07      	cmp	r3, #7
 800277c:	dcf3      	bgt.n	8002766 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800277e:	2308      	movs	r3, #8
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	e012      	b.n	80027aa <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <Idle_init+0xa8>)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <Idle_init+0xa8>)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	889b      	ldrh	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	4619      	mov	r1, r3
 800279a:	f008 fd63 	bl	800b264 <HAL_GPIO_WritePin>
			osDelay(200);
 800279e:	20c8      	movs	r0, #200	; 0xc8
 80027a0:	f014 faae 	bl	8016d00 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dae9      	bge.n	8002784 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80027b0:	f014 fa86 	bl	8016cc0 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80027b4:	e7ba      	b.n	800272c <Idle_init+0x8>
 80027b6:	bf00      	nop
 80027b8:	24001a98 	.word	0x24001a98
 80027bc:	24001add 	.word	0x24001add
 80027c0:	24001da4 	.word	0x24001da4
 80027c4:	24001adc 	.word	0x24001adc
 80027c8:	24000314 	.word	0x24000314
 80027cc:	0801ad0c 	.word	0x0801ad0c

080027d0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <MX_GPIO_Init+0xe8>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ec:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <MX_GPIO_Init+0xe8>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f6:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <MX_GPIO_Init+0xe8>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280a:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <MX_GPIO_Init+0xe8>)
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <MX_GPIO_Init+0xe8>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <MX_GPIO_Init+0xe8>)
 8002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002864:	4815      	ldr	r0, [pc, #84]	; (80028bc <MX_GPIO_Init+0xec>)
 8002866:	f008 fcfd 	bl	800b264 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	2164      	movs	r1, #100	; 0x64
 800286e:	4814      	ldr	r0, [pc, #80]	; (80028c0 <MX_GPIO_Init+0xf0>)
 8002870:	f008 fcf8 	bl	800b264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002874:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002878:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800287e:	2302      	movs	r3, #2
 8002880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	480b      	ldr	r0, [pc, #44]	; (80028bc <MX_GPIO_Init+0xec>)
 800288e:	f008 fb21 	bl	800aed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002892:	2364      	movs	r3, #100	; 0x64
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800289a:	2302      	movs	r3, #2
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_GPIO_Init+0xf0>)
 80028aa:	f008 fb13 	bl	800aed4 <HAL_GPIO_Init>

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
 80028bc:	58020800 	.word	0x58020800
 80028c0:	58020400 	.word	0x58020400

080028c4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <MX_I2C1_Init+0x78>)
 80028ca:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <MX_I2C1_Init+0x7c>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_I2C1_Init+0x78>)
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <MX_I2C1_Init+0x80>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <MX_I2C1_Init+0x78>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_I2C1_Init+0x78>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_I2C1_Init+0x78>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_I2C1_Init+0x78>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_I2C1_Init+0x78>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_I2C1_Init+0x78>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_I2C1_Init+0x78>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fe:	480f      	ldr	r0, [pc, #60]	; (800293c <MX_I2C1_Init+0x78>)
 8002900:	f008 fcca 	bl	800b298 <HAL_I2C_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 ffad 	bl	8003868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	2100      	movs	r1, #0
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <MX_I2C1_Init+0x78>)
 8002912:	f00a ff69 	bl	800d7e8 <HAL_I2CEx_ConfigAnalogFilter>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 ffa4 	bl	8003868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <MX_I2C1_Init+0x78>)
 8002924:	f00a ffab 	bl	800d87e <HAL_I2CEx_ConfigDigitalFilter>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 ff9b 	bl	8003868 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002932:	2001      	movs	r0, #1
 8002934:	f00a fff0 	bl	800d918 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2400193c 	.word	0x2400193c
 8002940:	40005400 	.word	0x40005400
 8002944:	00100517 	.word	0x00100517

08002948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ba      	sub	sp, #232	; 0xe8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	22c0      	movs	r2, #192	; 0xc0
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f017 fae7 	bl	8019f3c <memset>
  if(i2cHandle->Instance==I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <HAL_I2C_MspInit+0x1a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	f040 80b3 	bne.w	8002ae0 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800297a:	f04f 0208 	mov.w	r2, #8
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f00c f893 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800299c:	f000 ff64 	bl	8003868 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a6:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c6:	2312      	movs	r3, #18
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029d8:	2304      	movs	r3, #4
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4842      	ldr	r0, [pc, #264]	; (8002af0 <HAL_I2C_MspInit+0x1a8>)
 80029e6:	f008 fa75 	bl	800aed4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ea:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029f0:	4a3e      	ldr	r2, [pc, #248]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <HAL_I2C_MspInit+0x1a4>)
 80029fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a0a:	4a3b      	ldr	r2, [pc, #236]	; (8002af8 <HAL_I2C_MspInit+0x1b0>)
 8002a0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a10:	2222      	movs	r2, #34	; 0x22
 8002a12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a26:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a40:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002a48:	482a      	ldr	r0, [pc, #168]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a4a:	f005 f913 	bl	8007c74 <HAL_DMA_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002a54:	f000 ff08 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_I2C_MspInit+0x1ac>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <HAL_I2C_MspInit+0x1b8>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002a98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002aa4:	4815      	ldr	r0, [pc, #84]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002aa6:	f005 f8e5 	bl	8007c74 <HAL_DMA_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002ab0:	f000 feda 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_I2C_MspInit+0x1b4>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2105      	movs	r1, #5
 8002ac4:	201f      	movs	r0, #31
 8002ac6:	f004 fca7 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002aca:	201f      	movs	r0, #31
 8002acc:	f004 fcbe 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	2020      	movs	r0, #32
 8002ad6:	f004 fc9f 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ada:	2020      	movs	r0, #32
 8002adc:	f004 fcb6 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	37e8      	adds	r7, #232	; 0xe8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	58024400 	.word	0x58024400
 8002af0:	58020400 	.word	0x58020400
 8002af4:	24001990 	.word	0x24001990
 8002af8:	400200a0 	.word	0x400200a0
 8002afc:	24001a08 	.word	0x24001a08
 8002b00:	400200b8 	.word	0x400200b8

08002b04 <__NVIC_SystemReset>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002b08:	f3bf 8f4f 	dsb	sy
}
 8002b0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <__NVIC_SystemReset+0x24>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <__NVIC_SystemReset+0x24>)
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_SystemReset+0x28>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1e:	f3bf 8f4f 	dsb	sy
}
 8002b22:	bf00      	nop
    __NOP();
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <__NVIC_SystemReset+0x20>
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	05fa0004 	.word	0x05fa0004

08002b30 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d106      	bne.n	8002b4e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f014 f934 	bl	8016db4 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002b4c:	e032      	b.n	8002bb4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d12b      	bne.n	8002bae <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2102      	movs	r1, #2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f014 f924 	bl	8016db4 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d113      	bne.n	8002b9e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f014 f919 	bl	8016db4 <osEventFlagsSet>
			if (HK_ENABLED){
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2104      	movs	r1, #4
 8002b92:	4618      	mov	r0, r3
 8002b94:	f014 f90e 	bl	8016db4 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	e002      	b.n	8002bb4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002bae:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002bb0:	f017 fa3a 	bl	801a028 <puts>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	24001da4 	.word	0x24001da4
 8002bc0:	24001a90 	.word	0x24001a90
 8002bc4:	24001df0 	.word	0x24001df0
 8002bc8:	24001add 	.word	0x24001add
 8002bcc:	24001ae4 	.word	0x24001ae4
 8002bd0:	24001a94 	.word	0x24001a94
 8002bd4:	24001adc 	.word	0x24001adc
 8002bd8:	0801a9d8 	.word	0x0801a9d8

08002bdc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002be4:	2201      	movs	r2, #1
 8002be6:	49f2      	ldr	r1, [pc, #968]	; (8002fb0 <HAL_UART_RxCpltCallback+0x3d4>)
 8002be8:	48f2      	ldr	r0, [pc, #968]	; (8002fb4 <HAL_UART_RxCpltCallback+0x3d8>)
 8002bea:	f011 fad5 	bl	8014198 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002bee:	4bf0      	ldr	r3, [pc, #960]	; (8002fb0 <HAL_UART_RxCpltCallback+0x3d4>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2be0      	cmp	r3, #224	; 0xe0
 8002bf8:	f200 8424 	bhi.w	8003444 <HAL_UART_RxCpltCallback+0x868>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_UART_RxCpltCallback+0x28>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002f9d 	.word	0x08002f9d
 8002c08:	08002fe1 	.word	0x08002fe1
 8002c0c:	08003051 	.word	0x08003051
 8002c10:	0800308b 	.word	0x0800308b
 8002c14:	080030c3 	.word	0x080030c3
 8002c18:	080030fd 	.word	0x080030fd
 8002c1c:	08003139 	.word	0x08003139
 8002c20:	08003175 	.word	0x08003175
 8002c24:	080031af 	.word	0x080031af
 8002c28:	080031e3 	.word	0x080031e3
 8002c2c:	08003217 	.word	0x08003217
 8002c30:	08003249 	.word	0x08003249
 8002c34:	08003273 	.word	0x08003273
 8002c38:	08003351 	.word	0x08003351
 8002c3c:	080033b9 	.word	0x080033b9
 8002c40:	080033e1 	.word	0x080033e1
 8002c44:	08002f89 	.word	0x08002f89
 8002c48:	08002fc5 	.word	0x08002fc5
 8002c4c:	08003033 	.word	0x08003033
 8002c50:	0800306f 	.word	0x0800306f
 8002c54:	080030a7 	.word	0x080030a7
 8002c58:	080030df 	.word	0x080030df
 8002c5c:	0800311b 	.word	0x0800311b
 8002c60:	08003157 	.word	0x08003157
 8002c64:	08003193 	.word	0x08003193
 8002c68:	080031cb 	.word	0x080031cb
 8002c6c:	080031f3 	.word	0x080031f3
 8002c70:	0800322d 	.word	0x0800322d
 8002c74:	08003259 	.word	0x08003259
 8002c78:	08003281 	.word	0x08003281
 8002c7c:	08003391 	.word	0x08003391
 8002c80:	08003445 	.word	0x08003445
 8002c84:	08003445 	.word	0x08003445
 8002c88:	08003445 	.word	0x08003445
 8002c8c:	08003445 	.word	0x08003445
 8002c90:	08003445 	.word	0x08003445
 8002c94:	08003445 	.word	0x08003445
 8002c98:	08003445 	.word	0x08003445
 8002c9c:	08003445 	.word	0x08003445
 8002ca0:	08003445 	.word	0x08003445
 8002ca4:	08003445 	.word	0x08003445
 8002ca8:	08003445 	.word	0x08003445
 8002cac:	08003445 	.word	0x08003445
 8002cb0:	08003445 	.word	0x08003445
 8002cb4:	08003445 	.word	0x08003445
 8002cb8:	08003445 	.word	0x08003445
 8002cbc:	08003445 	.word	0x08003445
 8002cc0:	08003445 	.word	0x08003445
 8002cc4:	08003445 	.word	0x08003445
 8002cc8:	08003445 	.word	0x08003445
 8002ccc:	08003445 	.word	0x08003445
 8002cd0:	08003445 	.word	0x08003445
 8002cd4:	08003445 	.word	0x08003445
 8002cd8:	08003445 	.word	0x08003445
 8002cdc:	08003445 	.word	0x08003445
 8002ce0:	08003445 	.word	0x08003445
 8002ce4:	08003445 	.word	0x08003445
 8002ce8:	08003445 	.word	0x08003445
 8002cec:	08003445 	.word	0x08003445
 8002cf0:	08003445 	.word	0x08003445
 8002cf4:	08003445 	.word	0x08003445
 8002cf8:	08003445 	.word	0x08003445
 8002cfc:	08003445 	.word	0x08003445
 8002d00:	08003445 	.word	0x08003445
 8002d04:	08003445 	.word	0x08003445
 8002d08:	08003445 	.word	0x08003445
 8002d0c:	08003445 	.word	0x08003445
 8002d10:	08003445 	.word	0x08003445
 8002d14:	08003445 	.word	0x08003445
 8002d18:	08003445 	.word	0x08003445
 8002d1c:	08003445 	.word	0x08003445
 8002d20:	08003445 	.word	0x08003445
 8002d24:	08003445 	.word	0x08003445
 8002d28:	08003445 	.word	0x08003445
 8002d2c:	08003445 	.word	0x08003445
 8002d30:	08003445 	.word	0x08003445
 8002d34:	08003445 	.word	0x08003445
 8002d38:	08003445 	.word	0x08003445
 8002d3c:	08003445 	.word	0x08003445
 8002d40:	08003445 	.word	0x08003445
 8002d44:	08003445 	.word	0x08003445
 8002d48:	08003445 	.word	0x08003445
 8002d4c:	08003445 	.word	0x08003445
 8002d50:	08003445 	.word	0x08003445
 8002d54:	08003445 	.word	0x08003445
 8002d58:	08003445 	.word	0x08003445
 8002d5c:	08003445 	.word	0x08003445
 8002d60:	08003445 	.word	0x08003445
 8002d64:	08003445 	.word	0x08003445
 8002d68:	08003445 	.word	0x08003445
 8002d6c:	08003445 	.word	0x08003445
 8002d70:	08003445 	.word	0x08003445
 8002d74:	08003445 	.word	0x08003445
 8002d78:	08003445 	.word	0x08003445
 8002d7c:	08003445 	.word	0x08003445
 8002d80:	08003445 	.word	0x08003445
 8002d84:	08003445 	.word	0x08003445
 8002d88:	08003445 	.word	0x08003445
 8002d8c:	08003445 	.word	0x08003445
 8002d90:	08003445 	.word	0x08003445
 8002d94:	08003445 	.word	0x08003445
 8002d98:	08003445 	.word	0x08003445
 8002d9c:	08003445 	.word	0x08003445
 8002da0:	08003445 	.word	0x08003445
 8002da4:	08003445 	.word	0x08003445
 8002da8:	08003445 	.word	0x08003445
 8002dac:	08003445 	.word	0x08003445
 8002db0:	08003445 	.word	0x08003445
 8002db4:	08003445 	.word	0x08003445
 8002db8:	08003445 	.word	0x08003445
 8002dbc:	08003445 	.word	0x08003445
 8002dc0:	08003445 	.word	0x08003445
 8002dc4:	08003445 	.word	0x08003445
 8002dc8:	08003445 	.word	0x08003445
 8002dcc:	08003445 	.word	0x08003445
 8002dd0:	08003445 	.word	0x08003445
 8002dd4:	08003445 	.word	0x08003445
 8002dd8:	08003445 	.word	0x08003445
 8002ddc:	08003445 	.word	0x08003445
 8002de0:	08003445 	.word	0x08003445
 8002de4:	08003445 	.word	0x08003445
 8002de8:	08003445 	.word	0x08003445
 8002dec:	08003445 	.word	0x08003445
 8002df0:	08003445 	.word	0x08003445
 8002df4:	08003445 	.word	0x08003445
 8002df8:	08003445 	.word	0x08003445
 8002dfc:	08003445 	.word	0x08003445
 8002e00:	08003445 	.word	0x08003445
 8002e04:	08003445 	.word	0x08003445
 8002e08:	08003445 	.word	0x08003445
 8002e0c:	08003445 	.word	0x08003445
 8002e10:	08003445 	.word	0x08003445
 8002e14:	08003445 	.word	0x08003445
 8002e18:	08003445 	.word	0x08003445
 8002e1c:	08003445 	.word	0x08003445
 8002e20:	08003445 	.word	0x08003445
 8002e24:	08003445 	.word	0x08003445
 8002e28:	08003445 	.word	0x08003445
 8002e2c:	08003445 	.word	0x08003445
 8002e30:	08003445 	.word	0x08003445
 8002e34:	08003445 	.word	0x08003445
 8002e38:	08003445 	.word	0x08003445
 8002e3c:	08003445 	.word	0x08003445
 8002e40:	08003445 	.word	0x08003445
 8002e44:	08003445 	.word	0x08003445
 8002e48:	08003445 	.word	0x08003445
 8002e4c:	08003445 	.word	0x08003445
 8002e50:	08003445 	.word	0x08003445
 8002e54:	08003445 	.word	0x08003445
 8002e58:	08003445 	.word	0x08003445
 8002e5c:	08003445 	.word	0x08003445
 8002e60:	08003445 	.word	0x08003445
 8002e64:	08003445 	.word	0x08003445
 8002e68:	08003445 	.word	0x08003445
 8002e6c:	08003445 	.word	0x08003445
 8002e70:	08003445 	.word	0x08003445
 8002e74:	08003445 	.word	0x08003445
 8002e78:	08003445 	.word	0x08003445
 8002e7c:	08003445 	.word	0x08003445
 8002e80:	08003445 	.word	0x08003445
 8002e84:	08003445 	.word	0x08003445
 8002e88:	08003445 	.word	0x08003445
 8002e8c:	08003445 	.word	0x08003445
 8002e90:	08003445 	.word	0x08003445
 8002e94:	08003445 	.word	0x08003445
 8002e98:	08003445 	.word	0x08003445
 8002e9c:	08003445 	.word	0x08003445
 8002ea0:	08003445 	.word	0x08003445
 8002ea4:	08003445 	.word	0x08003445
 8002ea8:	08003445 	.word	0x08003445
 8002eac:	08003445 	.word	0x08003445
 8002eb0:	08003445 	.word	0x08003445
 8002eb4:	08003445 	.word	0x08003445
 8002eb8:	08003445 	.word	0x08003445
 8002ebc:	08003445 	.word	0x08003445
 8002ec0:	0800341d 	.word	0x0800341d
 8002ec4:	08003445 	.word	0x08003445
 8002ec8:	08003445 	.word	0x08003445
 8002ecc:	08003445 	.word	0x08003445
 8002ed0:	08003445 	.word	0x08003445
 8002ed4:	08003445 	.word	0x08003445
 8002ed8:	08003445 	.word	0x08003445
 8002edc:	08003445 	.word	0x08003445
 8002ee0:	08003445 	.word	0x08003445
 8002ee4:	08003445 	.word	0x08003445
 8002ee8:	08003445 	.word	0x08003445
 8002eec:	08003445 	.word	0x08003445
 8002ef0:	08003445 	.word	0x08003445
 8002ef4:	08003445 	.word	0x08003445
 8002ef8:	08003445 	.word	0x08003445
 8002efc:	08003445 	.word	0x08003445
 8002f00:	08003423 	.word	0x08003423
 8002f04:	08003445 	.word	0x08003445
 8002f08:	08003445 	.word	0x08003445
 8002f0c:	08003445 	.word	0x08003445
 8002f10:	08003445 	.word	0x08003445
 8002f14:	08003445 	.word	0x08003445
 8002f18:	08003445 	.word	0x08003445
 8002f1c:	08003445 	.word	0x08003445
 8002f20:	08003445 	.word	0x08003445
 8002f24:	08003445 	.word	0x08003445
 8002f28:	08003445 	.word	0x08003445
 8002f2c:	08003445 	.word	0x08003445
 8002f30:	08003445 	.word	0x08003445
 8002f34:	08003445 	.word	0x08003445
 8002f38:	08003445 	.word	0x08003445
 8002f3c:	08003445 	.word	0x08003445
 8002f40:	08003431 	.word	0x08003431
 8002f44:	08003409 	.word	0x08003409
 8002f48:	08003445 	.word	0x08003445
 8002f4c:	08003445 	.word	0x08003445
 8002f50:	08003445 	.word	0x08003445
 8002f54:	08003445 	.word	0x08003445
 8002f58:	08003445 	.word	0x08003445
 8002f5c:	08003445 	.word	0x08003445
 8002f60:	08003445 	.word	0x08003445
 8002f64:	08003445 	.word	0x08003445
 8002f68:	08003445 	.word	0x08003445
 8002f6c:	08003445 	.word	0x08003445
 8002f70:	08003445 	.word	0x08003445
 8002f74:	08003445 	.word	0x08003445
 8002f78:	08003445 	.word	0x08003445
 8002f7c:	08003445 	.word	0x08003445
 8002f80:	0800343f 	.word	0x0800343f
 8002f84:	080033f5 	.word	0x080033f5
	case 0x10: {
		printf("SDN1 ON\n");
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <HAL_UART_RxCpltCallback+0x3dc>)
 8002f8a:	f017 f84d 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_UART_RxCpltCallback+0x3e0>)
 8002f90:	2104      	movs	r1, #4
 8002f92:	2201      	movs	r2, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f008 f965 	bl	800b264 <HAL_GPIO_WritePin>
		break;
 8002f9a:	e25e      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002f9c:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <HAL_UART_RxCpltCallback+0x3e4>)
 8002f9e:	f017 f843 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_UART_RxCpltCallback+0x3e0>)
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f008 f95b 	bl	800b264 <HAL_GPIO_WritePin>
		break;
 8002fae:	e254      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
 8002fb0:	24001a9c 	.word	0x24001a9c
 8002fb4:	24001e3c 	.word	0x24001e3c
 8002fb8:	0801a9f0 	.word	0x0801a9f0
 8002fbc:	58020400 	.word	0x58020400
 8002fc0:	0801a9f8 	.word	0x0801a9f8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002fc4:	48bf      	ldr	r0, [pc, #764]	; (80032c4 <HAL_UART_RxCpltCallback+0x6e8>)
 8002fc6:	f017 f82f 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002fca:	4bbf      	ldr	r3, [pc, #764]	; (80032c8 <HAL_UART_RxCpltCallback+0x6ec>)
 8002fcc:	2120      	movs	r1, #32
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f008 f947 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	2008      	movs	r0, #8
 8002fda:	f002 fb35 	bl	8005648 <set_rail_monitor_enable>
		break;
 8002fde:	e23c      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002fe0:	48ba      	ldr	r0, [pc, #744]	; (80032cc <HAL_UART_RxCpltCallback+0x6f0>)
 8002fe2:	f017 f821 	bl	801a028 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e00f      	b.n	800300c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002fec:	4ab8      	ldr	r2, [pc, #736]	; (80032d0 <HAL_UART_RxCpltCallback+0x6f4>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002ff4:	4ab6      	ldr	r2, [pc, #728]	; (80032d0 <HAL_UART_RxCpltCallback+0x6f4>)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	889b      	ldrh	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	4619      	mov	r1, r3
 8003002:	f008 f92f 	bl	800b264 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3b01      	subs	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	dcec      	bgt.n	8002fec <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003012:	2310      	movs	r3, #16
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e008      	b.n	800302a <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fb12 	bl	8005648 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3b01      	subs	r3, #1
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b07      	cmp	r3, #7
 800302e:	dcf3      	bgt.n	8003018 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8003030:	e213      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003032:	48a8      	ldr	r0, [pc, #672]	; (80032d4 <HAL_UART_RxCpltCallback+0x6f8>)
 8003034:	f016 fff8 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003038:	4ba7      	ldr	r3, [pc, #668]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 800303a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800303e:	2201      	movs	r2, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f008 f90f 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003046:	2101      	movs	r1, #1
 8003048:	2009      	movs	r0, #9
 800304a:	f002 fafd 	bl	8005648 <set_rail_monitor_enable>

		break;
 800304e:	e204      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003050:	48a2      	ldr	r0, [pc, #648]	; (80032dc <HAL_UART_RxCpltCallback+0x700>)
 8003052:	f016 ffe9 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003056:	4ba0      	ldr	r3, [pc, #640]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305c:	2200      	movs	r2, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f008 f900 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003064:	2100      	movs	r1, #0
 8003066:	2009      	movs	r0, #9
 8003068:	f002 faee 	bl	8005648 <set_rail_monitor_enable>
		break;
 800306c:	e1f5      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800306e:	489c      	ldr	r0, [pc, #624]	; (80032e0 <HAL_UART_RxCpltCallback+0x704>)
 8003070:	f016 ffda 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003074:	4b98      	ldr	r3, [pc, #608]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	2201      	movs	r2, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f008 f8f2 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003080:	2101      	movs	r1, #1
 8003082:	200a      	movs	r0, #10
 8003084:	f002 fae0 	bl	8005648 <set_rail_monitor_enable>

		break;
 8003088:	e1e7      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800308a:	4896      	ldr	r0, [pc, #600]	; (80032e4 <HAL_UART_RxCpltCallback+0x708>)
 800308c:	f016 ffcc 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003090:	4b91      	ldr	r3, [pc, #580]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	2200      	movs	r2, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f008 f8e4 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800309c:	2100      	movs	r1, #0
 800309e:	200a      	movs	r0, #10
 80030a0:	f002 fad2 	bl	8005648 <set_rail_monitor_enable>
		break;
 80030a4:	e1d9      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80030a6:	4890      	ldr	r0, [pc, #576]	; (80032e8 <HAL_UART_RxCpltCallback+0x70c>)
 80030a8:	f016 ffbe 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80030ac:	4b8a      	ldr	r3, [pc, #552]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	2201      	movs	r2, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f008 f8d6 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80030b8:	2101      	movs	r1, #1
 80030ba:	200b      	movs	r0, #11
 80030bc:	f002 fac4 	bl	8005648 <set_rail_monitor_enable>

		break;
 80030c0:	e1cb      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80030c2:	488a      	ldr	r0, [pc, #552]	; (80032ec <HAL_UART_RxCpltCallback+0x710>)
 80030c4:	f016 ffb0 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80030c8:	4b83      	ldr	r3, [pc, #524]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	2200      	movs	r2, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f008 f8c8 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80030d4:	2100      	movs	r1, #0
 80030d6:	200b      	movs	r0, #11
 80030d8:	f002 fab6 	bl	8005648 <set_rail_monitor_enable>
		break;
 80030dc:	e1bd      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80030de:	4884      	ldr	r0, [pc, #528]	; (80032f0 <HAL_UART_RxCpltCallback+0x714>)
 80030e0:	f016 ffa2 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80030e4:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 80030e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ea:	2201      	movs	r2, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f008 f8b9 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80030f2:	2101      	movs	r1, #1
 80030f4:	200c      	movs	r0, #12
 80030f6:	f002 faa7 	bl	8005648 <set_rail_monitor_enable>

		break;
 80030fa:	e1ae      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80030fc:	487d      	ldr	r0, [pc, #500]	; (80032f4 <HAL_UART_RxCpltCallback+0x718>)
 80030fe:	f016 ff93 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8003102:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003108:	2200      	movs	r2, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f008 f8aa 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003110:	2100      	movs	r1, #0
 8003112:	200c      	movs	r0, #12
 8003114:	f002 fa98 	bl	8005648 <set_rail_monitor_enable>
		break;
 8003118:	e19f      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800311a:	4877      	ldr	r0, [pc, #476]	; (80032f8 <HAL_UART_RxCpltCallback+0x71c>)
 800311c:	f016 ff84 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003120:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003126:	2201      	movs	r2, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f008 f89b 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800312e:	2101      	movs	r1, #1
 8003130:	200d      	movs	r0, #13
 8003132:	f002 fa89 	bl	8005648 <set_rail_monitor_enable>

		break;
 8003136:	e190      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003138:	4870      	ldr	r0, [pc, #448]	; (80032fc <HAL_UART_RxCpltCallback+0x720>)
 800313a:	f016 ff75 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800313e:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 8003140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003144:	2200      	movs	r2, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f008 f88c 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800314c:	2100      	movs	r1, #0
 800314e:	200d      	movs	r0, #13
 8003150:	f002 fa7a 	bl	8005648 <set_rail_monitor_enable>
		break;
 8003154:	e181      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003156:	486a      	ldr	r0, [pc, #424]	; (8003300 <HAL_UART_RxCpltCallback+0x724>)
 8003158:	f016 ff66 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800315c:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 800315e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003162:	2201      	movs	r2, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f008 f87d 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800316a:	2101      	movs	r1, #1
 800316c:	200f      	movs	r0, #15
 800316e:	f002 fa6b 	bl	8005648 <set_rail_monitor_enable>

		break;
 8003172:	e172      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003174:	4863      	ldr	r0, [pc, #396]	; (8003304 <HAL_UART_RxCpltCallback+0x728>)
 8003176:	f016 ff57 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_UART_RxCpltCallback+0x6fc>)
 800317c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003180:	2200      	movs	r2, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f008 f86e 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003188:	2100      	movs	r1, #0
 800318a:	200f      	movs	r0, #15
 800318c:	f002 fa5c 	bl	8005648 <set_rail_monitor_enable>
		break;
 8003190:	e163      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003192:	485d      	ldr	r0, [pc, #372]	; (8003308 <HAL_UART_RxCpltCallback+0x72c>)
 8003194:	f016 ff48 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003198:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <HAL_UART_RxCpltCallback+0x6ec>)
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	2201      	movs	r2, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f008 f860 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80031a4:	2101      	movs	r1, #1
 80031a6:	2010      	movs	r0, #16
 80031a8:	f002 fa4e 	bl	8005648 <set_rail_monitor_enable>

		break;
 80031ac:	e155      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80031ae:	4857      	ldr	r0, [pc, #348]	; (800330c <HAL_UART_RxCpltCallback+0x730>)
 80031b0:	f016 ff3a 	bl	801a028 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80031b4:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_UART_RxCpltCallback+0x6ec>)
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	2200      	movs	r2, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f008 f852 	bl	800b264 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80031c0:	2100      	movs	r1, #0
 80031c2:	2010      	movs	r0, #16
 80031c4:	f002 fa40 	bl	8005648 <set_rail_monitor_enable>
		break;
 80031c8:	e147      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80031ca:	4851      	ldr	r0, [pc, #324]	; (8003310 <HAL_UART_RxCpltCallback+0x734>)
 80031cc:	f016 ff2c 	bl	801a028 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2320      	movs	r3, #32
 80031d6:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_UART_RxCpltCallback+0x738>)
 80031d8:	2100      	movs	r1, #0
 80031da:	484f      	ldr	r0, [pc, #316]	; (8003318 <HAL_UART_RxCpltCallback+0x73c>)
 80031dc:	f004 f9be 	bl	800755c <HAL_DAC_Start_DMA>
		break;
 80031e0:	e13b      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80031e2:	484e      	ldr	r0, [pc, #312]	; (800331c <HAL_UART_RxCpltCallback+0x740>)
 80031e4:	f016 ff20 	bl	801a028 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80031e8:	2100      	movs	r1, #0
 80031ea:	484b      	ldr	r0, [pc, #300]	; (8003318 <HAL_UART_RxCpltCallback+0x73c>)
 80031ec:	f004 fa76 	bl	80076dc <HAL_DAC_Stop_DMA>
		break;
 80031f0:	e133      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80031f2:	484b      	ldr	r0, [pc, #300]	; (8003320 <HAL_UART_RxCpltCallback+0x744>)
 80031f4:	f016 ff18 	bl	801a028 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_UART_RxCpltCallback+0x748>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f013 fdd8 	bl	8016db4 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8003204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003208:	f44f 729c 	mov.w	r2, #312	; 0x138
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_UART_RxCpltCallback+0x74c>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]

		break;
 8003214:	e121      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8003216:	4845      	ldr	r0, [pc, #276]	; (800332c <HAL_UART_RxCpltCallback+0x750>)
 8003218:	f016 ff06 	bl	801a028 <puts>
		ERPA_ENABLED = 0;
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_UART_RxCpltCallback+0x74c>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003226:	2200      	movs	r2, #0
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800322a:	e116      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800322c:	4840      	ldr	r0, [pc, #256]	; (8003330 <HAL_UART_RxCpltCallback+0x754>)
 800322e:	f016 fefb 	bl	801a028 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003232:	2100      	movs	r1, #0
 8003234:	483f      	ldr	r0, [pc, #252]	; (8003334 <HAL_UART_RxCpltCallback+0x758>)
 8003236:	f00f facf 	bl	80127d8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800323a:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_UART_RxCpltCallback+0x748>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f013 fdb7 	bl	8016db4 <osEventFlagsSet>
		break;
 8003246:	e108      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003248:	483b      	ldr	r0, [pc, #236]	; (8003338 <HAL_UART_RxCpltCallback+0x75c>)
 800324a:	f016 feed 	bl	801a028 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800324e:	2100      	movs	r1, #0
 8003250:	4838      	ldr	r0, [pc, #224]	; (8003334 <HAL_UART_RxCpltCallback+0x758>)
 8003252:	f00f fc1b 	bl	8012a8c <HAL_TIM_OC_Stop_IT>
		break;
 8003256:	e100      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003258:	4838      	ldr	r0, [pc, #224]	; (800333c <HAL_UART_RxCpltCallback+0x760>)
 800325a:	f016 fee5 	bl	801a028 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_UART_RxCpltCallback+0x748>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2104      	movs	r1, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f013 fda5 	bl	8016db4 <osEventFlagsSet>
		HK_ENABLED = 1;
 800326a:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_UART_RxCpltCallback+0x764>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
		break;
 8003270:	e0f3      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003272:	4834      	ldr	r0, [pc, #208]	; (8003344 <HAL_UART_RxCpltCallback+0x768>)
 8003274:	f016 fed8 	bl	801a028 <puts>
		HK_ENABLED = 0;
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_UART_RxCpltCallback+0x764>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
		break;
 800327e:	e0ec      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8003280:	4831      	ldr	r0, [pc, #196]	; (8003348 <HAL_UART_RxCpltCallback+0x76c>)
 8003282:	f016 fed1 	bl	801a028 <puts>
		if (step < 14) {
 8003286:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_UART_RxCpltCallback+0x770>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b0d      	cmp	r3, #13
 800328e:	f200 80dd 	bhi.w	800344c <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 8003292:	4b2e      	ldr	r3, [pc, #184]	; (800334c <HAL_UART_RxCpltCallback+0x770>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3302      	adds	r3, #2
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_UART_RxCpltCallback+0x770>)
 800329e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_UART_RxCpltCallback+0x770>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_UART_RxCpltCallback+0x738>)
 80032aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	4819      	ldr	r0, [pc, #100]	; (8003318 <HAL_UART_RxCpltCallback+0x73c>)
 80032b4:	f004 fab5 	bl	8007822 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80032b8:	2100      	movs	r1, #0
 80032ba:	4817      	ldr	r0, [pc, #92]	; (8003318 <HAL_UART_RxCpltCallback+0x73c>)
 80032bc:	f004 f8f6 	bl	80074ac <HAL_DAC_Start>
		}
		break;
 80032c0:	e0c4      	b.n	800344c <HAL_UART_RxCpltCallback+0x870>
 80032c2:	bf00      	nop
 80032c4:	0801aa04 	.word	0x0801aa04
 80032c8:	58020400 	.word	0x58020400
 80032cc:	0801aa10 	.word	0x0801aa10
 80032d0:	0801ad0c 	.word	0x0801ad0c
 80032d4:	0801aa1c 	.word	0x0801aa1c
 80032d8:	58020800 	.word	0x58020800
 80032dc:	0801aa28 	.word	0x0801aa28
 80032e0:	0801aa38 	.word	0x0801aa38
 80032e4:	0801aa44 	.word	0x0801aa44
 80032e8:	0801aa50 	.word	0x0801aa50
 80032ec:	0801aa5c 	.word	0x0801aa5c
 80032f0:	0801aa6c 	.word	0x0801aa6c
 80032f4:	0801aa78 	.word	0x0801aa78
 80032f8:	0801aa84 	.word	0x0801aa84
 80032fc:	0801aa90 	.word	0x0801aa90
 8003300:	0801aa9c 	.word	0x0801aa9c
 8003304:	0801aaac 	.word	0x0801aaac
 8003308:	0801aabc 	.word	0x0801aabc
 800330c:	0801aac8 	.word	0x0801aac8
 8003310:	0801aad8 	.word	0x0801aad8
 8003314:	24000038 	.word	0x24000038
 8003318:	24000314 	.word	0x24000314
 800331c:	0801aae8 	.word	0x0801aae8
 8003320:	0801aaf8 	.word	0x0801aaf8
 8003324:	24001a90 	.word	0x24001a90
 8003328:	24001add 	.word	0x24001add
 800332c:	0801ab00 	.word	0x0801ab00
 8003330:	0801ab0c 	.word	0x0801ab0c
 8003334:	24001da4 	.word	0x24001da4
 8003338:	0801ab14 	.word	0x0801ab14
 800333c:	0801ab1c 	.word	0x0801ab1c
 8003340:	24001adc 	.word	0x24001adc
 8003344:	0801ab24 	.word	0x0801ab24
 8003348:	0801ab2c 	.word	0x0801ab2c
 800334c:	24001ade 	.word	0x24001ade
	}
	case 0x0D: {
		printf("Step Down\n");
 8003350:	4844      	ldr	r0, [pc, #272]	; (8003464 <HAL_UART_RxCpltCallback+0x888>)
 8003352:	f016 fe69 	bl	801a028 <puts>
		if (step > 1) {
 8003356:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_UART_RxCpltCallback+0x88c>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d977      	bls.n	8003450 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 8003360:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_UART_RxCpltCallback+0x88c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b02      	subs	r3, #2
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_UART_RxCpltCallback+0x88c>)
 800336c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_UART_RxCpltCallback+0x88c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_UART_RxCpltCallback+0x890>)
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	2200      	movs	r2, #0
 800337e:	2100      	movs	r1, #0
 8003380:	483b      	ldr	r0, [pc, #236]	; (8003470 <HAL_UART_RxCpltCallback+0x894>)
 8003382:	f004 fa4e 	bl	8007822 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003386:	2100      	movs	r1, #0
 8003388:	4839      	ldr	r0, [pc, #228]	; (8003470 <HAL_UART_RxCpltCallback+0x894>)
 800338a:	f004 f88f 	bl	80074ac <HAL_DAC_Start>
		}
		break;
 800338e:	e05f      	b.n	8003450 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003390:	4838      	ldr	r0, [pc, #224]	; (8003474 <HAL_UART_RxCpltCallback+0x898>)
 8003392:	f016 fe49 	bl	801a028 <puts>
		if (cadence <= 50000) {
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800339e:	4293      	cmp	r3, r2
 80033a0:	d858      	bhi.n	8003454 <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4a33      	ldr	r2, [pc, #204]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033aa:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80033ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80033b6:	e04d      	b.n	8003454 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80033b8:	4830      	ldr	r0, [pc, #192]	; (800347c <HAL_UART_RxCpltCallback+0x8a0>)
 80033ba:	f016 fe35 	bl	801a028 <puts>
		if (cadence >= 6250) {
 80033be:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f641 0269 	movw	r2, #6249	; 0x1869
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d946      	bls.n	8003458 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033d2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80033d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_UART_RxCpltCallback+0x89c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80033de:	e03b      	b.n	8003458 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80033e0:	4827      	ldr	r0, [pc, #156]	; (8003480 <HAL_UART_RxCpltCallback+0x8a4>)
 80033e2:	f016 fe21 	bl	801a028 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_UART_RxCpltCallback+0x8a8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2102      	movs	r1, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f013 fce1 	bl	8016db4 <osEventFlagsSet>
		break;
 80033f2:	e032      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80033f4:	4824      	ldr	r0, [pc, #144]	; (8003488 <HAL_UART_RxCpltCallback+0x8ac>)
 80033f6:	f016 fe17 	bl	801a028 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_UART_RxCpltCallback+0x8a8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2104      	movs	r1, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f013 fcd7 	bl	8016db4 <osEventFlagsSet>
		break;
 8003406:	e028      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003408:	4820      	ldr	r0, [pc, #128]	; (800348c <HAL_UART_RxCpltCallback+0x8b0>)
 800340a:	f016 fe0d 	bl	801a028 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_UART_RxCpltCallback+0x8a8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2108      	movs	r1, #8
 8003414:	4618      	mov	r0, r3
 8003416:	f013 fccd 	bl	8016db4 <osEventFlagsSet>
		break;
 800341a:	e01e      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 800341c:	f000 f96c 	bl	80036f8 <sync>
		break;
 8003420:	e01b      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_UART_RxCpltCallback+0x8b4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f013 fcc3 	bl	8016db4 <osEventFlagsSet>
		break;
 800342e:	e014      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003430:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_UART_RxCpltCallback+0x8b4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f013 fcbc 	bl	8016db4 <osEventFlagsSet>
		break;
 800343c:	e00d      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_error_counters();
 800343e:	f7fe fe25 	bl	800208c <reset_error_counters>
		break;
 8003442:	e00a      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 8003444:	4813      	ldr	r0, [pc, #76]	; (8003494 <HAL_UART_RxCpltCallback+0x8b8>)
 8003446:	f016 fdef 	bl	801a028 <puts>
		break;
 800344a:	e006      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
		break;
 800344c:	bf00      	nop
 800344e:	e004      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003450:	bf00      	nop
 8003452:	e002      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003458:	bf00      	nop
	}
	}
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	0801ab34 	.word	0x0801ab34
 8003468:	24001ade 	.word	0x24001ade
 800346c:	24000038 	.word	0x24000038
 8003470:	24000314 	.word	0x24000314
 8003474:	0801ab40 	.word	0x0801ab40
 8003478:	240000b8 	.word	0x240000b8
 800347c:	0801ab4c 	.word	0x0801ab4c
 8003480:	0801ab58 	.word	0x0801ab58
 8003484:	24001a94 	.word	0x24001a94
 8003488:	0801ab68 	.word	0x0801ab68
 800348c:	0801ab74 	.word	0x0801ab74
 8003490:	24001a98 	.word	0x24001a98
 8003494:	0801ab80 	.word	0x0801ab80

08003498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800349e:	f002 fa71 	bl	8005984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a2:	f000 f82b 	bl	80034fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80034a6:	f000 f8ab 	bl	8003600 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034aa:	f7ff f991 	bl	80027d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80034ae:	f7fd fc1b 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034b2:	f001 fe01 	bl	80050b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80034b6:	f7ff fa05 	bl	80028c4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80034ba:	f000 fe75 	bl	80041a8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80034be:	f001 fb61 	bl	8004b84 <MX_TIM2_Init>
  MX_TIM1_Init();
 80034c2:	f001 fab1 	bl	8004a28 <MX_TIM1_Init>
  MX_ADC3_Init();
 80034c6:	f7fd f9af 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80034ca:	f7fd f88b 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80034ce:	f7fd fb57 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80034d2:	f000 fe11 	bl	80040f8 <MX_SPI1_Init>
  MX_RTC_Init();
 80034d6:	f000 fbdd 	bl	8003c94 <MX_RTC_Init>
 // MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
  //get_reset_cause();
  system_setup();
 80034da:	f000 f8c1 	bl	8003660 <system_setup>

  ERROR_STRUCT error;
  error.category = EC_watchdog;
 80034de:	2304      	movs	r3, #4
 80034e0:	713b      	strb	r3, [r7, #4]
  error.detail = ED_UNDEFINED;
 80034e2:	231a      	movs	r3, #26
 80034e4:	717b      	strb	r3, [r7, #5]
  handle_error(error);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fd22 	bl	8001f30 <handle_error>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034ec:	f013 fb0c 	bl	8016b08 <osKernelInitialize>
  MX_FREERTOS_Init();
 80034f0:	f7fe ff42 	bl	8002378 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80034f4:	f013 fb2c 	bl	8016b50 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80034f8:	e7fe      	b.n	80034f8 <main+0x60>
	...

080034fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b09c      	sub	sp, #112	; 0x70
 8003500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	224c      	movs	r2, #76	; 0x4c
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f016 fd16 	bl	8019f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	2220      	movs	r2, #32
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f016 fd10 	bl	8019f3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800351c:	2002      	movs	r0, #2
 800351e:	f00a fa6b 	bl	800d9f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <SystemClock_Config+0xfc>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <SystemClock_Config+0xfc>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003532:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <SystemClock_Config+0xfc>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <SystemClock_Config+0x100>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003544:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <SystemClock_Config+0x100>)
 8003546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354a:	6193      	str	r3, [r2, #24]
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <SystemClock_Config+0x100>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003558:	bf00      	nop
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <SystemClock_Config+0x100>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	d1f8      	bne.n	800355a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003568:	230b      	movs	r3, #11
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800356c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003572:	2309      	movs	r3, #9
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800357a:	2301      	movs	r3, #1
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357e:	2302      	movs	r3, #2
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003582:	2302      	movs	r3, #2
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003586:	2304      	movs	r3, #4
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800358a:	2318      	movs	r3, #24
 800358c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800358e:	2302      	movs	r3, #2
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003592:	2302      	movs	r3, #2
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003596:	2302      	movs	r3, #2
 8003598:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800359a:	2308      	movs	r3, #8
 800359c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800359e:	2302      	movs	r3, #2
 80035a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f00a fa5e 	bl	800da6c <HAL_RCC_OscConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80035b6:	f000 f957 	bl	8003868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ba:	233f      	movs	r3, #63	; 0x3f
 80035bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035be:	2303      	movs	r3, #3
 80035c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f00a fe9e 	bl	800e320 <HAL_RCC_ClockConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80035ea:	f000 f93d 	bl	8003868 <Error_Handler>
  }
}
 80035ee:	bf00      	nop
 80035f0:	3770      	adds	r7, #112	; 0x70
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	58000400 	.word	0x58000400
 80035fc:	58024800 	.word	0x58024800

08003600 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b0b0      	sub	sp, #192	; 0xc0
 8003604:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003606:	463b      	mov	r3, r7
 8003608:	22c0      	movs	r2, #192	; 0xc0
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f016 fc95 	bl	8019f3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003612:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800361e:	2304      	movs	r3, #4
 8003620:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003622:	2318      	movs	r3, #24
 8003624:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003626:	2308      	movs	r3, #8
 8003628:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800362e:	2302      	movs	r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003636:	2320      	movs	r3, #32
 8003638:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003644:	463b      	mov	r3, r7
 8003646:	4618      	mov	r0, r3
 8003648:	f00b fa38 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003652:	f000 f909 	bl	8003868 <Error_Handler>
  }
}
 8003656:	bf00      	nop
 8003658:	37c0      	adds	r7, #192	; 0xc0
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003664:	f7fe fc9a 	bl	8001f9c <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003668:	2000      	movs	r0, #0
 800366a:	f013 fb64 	bl	8016d36 <osEventFlagsNew>
 800366e:	4603      	mov	r3, r0
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <system_setup+0x80>)
 8003672:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <system_setup+0x80>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d100      	bne.n	800367e <system_setup+0x1e>
        while (1);
 800367c:	e7fe      	b.n	800367c <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800367e:	2000      	movs	r0, #0
 8003680:	f013 fb59 	bl	8016d36 <osEventFlagsNew>
 8003684:	4603      	mov	r3, r0
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <system_setup+0x84>)
 8003688:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <system_setup+0x84>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d100      	bne.n	8003694 <system_setup+0x34>
        while (1);
 8003692:	e7fe      	b.n	8003692 <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003694:	2000      	movs	r0, #0
 8003696:	f013 fb4e 	bl	8016d36 <osEventFlagsNew>
 800369a:	4603      	mov	r3, r0
 800369c:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <system_setup+0x88>)
 800369e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <system_setup+0x88>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d100      	bne.n	80036aa <system_setup+0x4a>
        while (1);
 80036a8:	e7fe      	b.n	80036a8 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 80036aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ae:	2200      	movs	r2, #0
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80036b2:	210c      	movs	r1, #12
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <system_setup+0x8c>)
 80036b6:	f00f f88f 	bl	80127d8 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80036ba:	f001 fe07 	bl	80052cc <voltage_monitor_init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <system_setup+0x66>
		while (1);
 80036c4:	e7fe      	b.n	80036c4 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 80036c6:	f000 fb77 	bl	8003db8 <init_adc_dma>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <system_setup+0x72>
		while (1);
 80036d0:	e7fe      	b.n	80036d0 <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80036d2:	2201      	movs	r2, #1
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <system_setup+0x90>)
 80036d6:	4807      	ldr	r0, [pc, #28]	; (80036f4 <system_setup+0x94>)
 80036d8:	f010 fd5e 	bl	8014198 <HAL_UART_Receive_IT>

}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	24001a90 	.word	0x24001a90
 80036e4:	24001a94 	.word	0x24001a94
 80036e8:	24001a98 	.word	0x24001a98
 80036ec:	24001df0 	.word	0x24001df0
 80036f0:	24001a9c 	.word	0x24001a9c
 80036f4:	24001e3c 	.word	0x24001e3c

080036f8 <sync>:

void sync() {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	send_ACK();
 80036fe:	f000 f821 	bl	8003744 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8003702:	480e      	ldr	r0, [pc, #56]	; (800373c <sync+0x44>)
 8003704:	f010 fd94 	bl	8014230 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003708:	2364      	movs	r3, #100	; 0x64
 800370a:	2209      	movs	r2, #9
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <sync+0x48>)
 800370e:	480b      	ldr	r0, [pc, #44]	; (800373c <sync+0x44>)
 8003710:	f010 fc7a 	bl	8014008 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <sync+0x48>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2bff      	cmp	r3, #255	; 0xff
 800371e:	d1f3      	bne.n	8003708 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003720:	4807      	ldr	r0, [pc, #28]	; (8003740 <sync+0x48>)
 8003722:	f001 fc07 	bl	8004f34 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003726:	2201      	movs	r2, #1
 8003728:	4905      	ldr	r1, [pc, #20]	; (8003740 <sync+0x48>)
 800372a:	4804      	ldr	r0, [pc, #16]	; (800373c <sync+0x44>)
 800372c:	f010 fd34 	bl	8014198 <HAL_UART_Receive_IT>
	send_previous_error_packet();
 8003730:	f7fe fccc 	bl	80020cc <send_previous_error_packet>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	24001e3c 	.word	0x24001e3c
 8003740:	24001a9c 	.word	0x24001a9c

08003744 <send_ACK>:

void send_ACK() {
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <send_ACK+0x1c>)
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800374e:	2364      	movs	r3, #100	; 0x64
 8003750:	2201      	movs	r2, #1
 8003752:	4903      	ldr	r1, [pc, #12]	; (8003760 <send_ACK+0x1c>)
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <send_ACK+0x20>)
 8003756:	f010 fbc9 	bl	8013eec <HAL_UART_Transmit>
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	24001ae8 	.word	0x24001ae8
 8003764:	24001e3c 	.word	0x24001e3c

08003768 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <get_current_step+0xc0>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f640 72ff 	movw	r2, #4095	; 0xfff
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <get_current_step+0xac>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003784:	da48      	bge.n	8003818 <get_current_step+0xb0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f640 628b 	movw	r2, #3723	; 0xe8b
 800378c:	4293      	cmp	r3, r2
 800378e:	d03f      	beq.n	8003810 <get_current_step+0xa8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003796:	4293      	cmp	r3, r2
 8003798:	dc3e      	bgt.n	8003818 <get_current_step+0xb0>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f640 421f 	movw	r2, #3103	; 0xc1f
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d033      	beq.n	800380c <get_current_step+0xa4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80037aa:	da35      	bge.n	8003818 <get_current_step+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d028      	beq.n	8003808 <get_current_step+0xa0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80037bc:	4293      	cmp	r3, r2
 80037be:	dc2b      	bgt.n	8003818 <get_current_step+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f240 7245 	movw	r2, #1861	; 0x745
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01c      	beq.n	8003804 <get_current_step+0x9c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f240 7245 	movw	r2, #1861	; 0x745
 80037d0:	4293      	cmp	r3, r2
 80037d2:	dc21      	bgt.n	8003818 <get_current_step+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80037da:	4293      	cmp	r3, r2
 80037dc:	d010      	beq.n	8003800 <get_current_step+0x98>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80037e4:	4293      	cmp	r3, r2
 80037e6:	dc17      	bgt.n	8003818 <get_current_step+0xb0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <get_current_step+0x90>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80037f4:	d002      	beq.n	80037fc <get_current_step+0x94>
 80037f6:	e00f      	b.n	8003818 <get_current_step+0xb0>
	case 0:
		return 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e00e      	b.n	800381a <get_current_step+0xb2>
	case 620:
		return 1;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00c      	b.n	800381a <get_current_step+0xb2>
	case 1241:
		return 2;
 8003800:	2302      	movs	r3, #2
 8003802:	e00a      	b.n	800381a <get_current_step+0xb2>
	case 1861:
		return 3;
 8003804:	2303      	movs	r3, #3
 8003806:	e008      	b.n	800381a <get_current_step+0xb2>
	case 2482:
		return 4;
 8003808:	2304      	movs	r3, #4
 800380a:	e006      	b.n	800381a <get_current_step+0xb2>
	case 3103:
		return 5;
 800380c:	2305      	movs	r3, #5
 800380e:	e004      	b.n	800381a <get_current_step+0xb2>
	case 3723:
		return 6;
 8003810:	2306      	movs	r3, #6
 8003812:	e002      	b.n	800381a <get_current_step+0xb2>
	case 4095:
		return 7;
 8003814:	2307      	movs	r3, #7
 8003816:	e000      	b.n	800381a <get_current_step+0xb2>
	default:
		return -1;
 8003818:	23ff      	movs	r3, #255	; 0xff
	}
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007400 	.word	0x40007400

0800382c <enter_stop>:

void enter_stop() {
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	  send_ACK();
 8003830:	f7ff ff88 	bl	8003744 <send_ACK>

	  vTaskSuspendAll();
 8003834:	f014 fe16 	bl	8018464 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003838:	2101      	movs	r1, #1
 800383a:	2001      	movs	r0, #1
 800383c:	f00a f8a0 	bl	800d980 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003840:	f7ff f960 	bl	8002b04 <__NVIC_SystemReset>

08003844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003856:	f002 f8d1 	bl	80059fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40001000 	.word	0x40001000

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 800386e:	2302      	movs	r3, #2
 8003870:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003872:	231a      	movs	r3, #26
 8003874:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe fb5a 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800388a:	bf00      	nop
 800388c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003890:	481c      	ldr	r0, [pc, #112]	; (8003904 <create_pmt_packet+0x80>)
 8003892:	f007 fccf 	bl	800b234 <HAL_GPIO_ReadPin>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f7      	bne.n	800388c <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 faa8 	bl	8004df4 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80038a4:	f107 0308 	add.w	r3, r7, #8
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fad9 	bl	8003e60 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80038ae:	23ff      	movs	r3, #255	; 0xff
 80038b0:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80038b2:	23ff      	movs	r3, #255	; 0xff
 80038b4:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <create_pmt_packet+0x84>)
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <create_pmt_packet+0x84>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80038ca:	7a3b      	ldrb	r3, [r7, #8]
 80038cc:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80038ce:	7a7b      	ldrb	r3, [r7, #9]
 80038d0:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80038d2:	793b      	ldrb	r3, [r7, #4]
 80038d4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 80038d6:	797b      	ldrb	r3, [r7, #5]
 80038d8:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 80038da:	79bb      	ldrb	r3, [r7, #6]
 80038dc:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 80038e2:	f107 010c 	add.w	r1, r7, #12
 80038e6:	2364      	movs	r3, #100	; 0x64
 80038e8:	220a      	movs	r2, #10
 80038ea:	4808      	ldr	r0, [pc, #32]	; (800390c <create_pmt_packet+0x88>)
 80038ec:	f010 fafe 	bl	8013eec <HAL_UART_Transmit>

	pmt_seq++;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <create_pmt_packet+0x84>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <create_pmt_packet+0x84>)
 80038fa:	801a      	strh	r2, [r3, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	58020000 	.word	0x58020000
 8003908:	24001aea 	.word	0x24001aea
 800390c:	24001e3c 	.word	0x24001e3c

08003910 <create_erpa_packet>:


void create_erpa_packet() {
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003916:	bf00      	nop
 8003918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800391c:	4828      	ldr	r0, [pc, #160]	; (80039c0 <create_erpa_packet+0xb0>)
 800391e:	f007 fc89 	bl	800b234 <HAL_GPIO_ReadPin>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f7      	bne.n	8003918 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003928:	23ff      	movs	r3, #255	; 0xff
 800392a:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fa60 	bl	8004df4 <get_uptime>
	sweep_step = get_current_step();
 8003934:	f7ff ff18 	bl	8003768 <get_current_step>
 8003938:	4603      	mov	r3, r0
 800393a:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4618      	mov	r0, r3
 8003942:	f000 faad 	bl	8003ea0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fac8 	bl	8003ee0 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003950:	23ee      	movs	r3, #238	; 0xee
 8003952:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003954:	23ee      	movs	r3, #238	; 0xee
 8003956:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <create_erpa_packet+0xb4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	b2db      	uxtb	r3, r3
 8003960:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <create_erpa_packet+0xb4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b2db      	uxtb	r3, r3
 800396a:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <create_erpa_packet+0xb4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29b      	uxth	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003988:	7b3b      	ldrb	r3, [r7, #12]
 800398a:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800398c:	7b7b      	ldrb	r3, [r7, #13]
 800398e:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003990:	793b      	ldrb	r3, [r7, #4]
 8003992:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003994:	797b      	ldrb	r3, [r7, #5]
 8003996:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003998:	79bb      	ldrb	r3, [r7, #6]
 800399a:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80039a0:	f107 0110 	add.w	r1, r7, #16
 80039a4:	2364      	movs	r3, #100	; 0x64
 80039a6:	220e      	movs	r2, #14
 80039a8:	4807      	ldr	r0, [pc, #28]	; (80039c8 <create_erpa_packet+0xb8>)
 80039aa:	f010 fa9f 	bl	8013eec <HAL_UART_Transmit>

	erpa_seq++;
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <create_erpa_packet+0xb4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	4a03      	ldr	r2, [pc, #12]	; (80039c4 <create_erpa_packet+0xb4>)
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58020400 	.word	0x58020400
 80039c4:	24001aec 	.word	0x24001aec
 80039c8:	24001e3c 	.word	0x24001e3c

080039cc <create_hk_packet>:


void create_hk_packet() {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b094      	sub	sp, #80	; 0x50
 80039d0:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fa0d 	bl	8004df4 <get_uptime>
	get_timestamp(timestamp);
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa58 	bl	8004e94 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 80039e4:	f001 feb2 	bl	800574c <get_rail_monitor>
 80039e8:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80039ea:	23dd      	movs	r3, #221	; 0xdd
 80039ec:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80039ee:	23dd      	movs	r3, #221	; 0xdd
 80039f0:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80039f2:	4b9b      	ldr	r3, [pc, #620]	; (8003c60 <create_hk_packet+0x294>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80039fe:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <create_hk_packet+0x294>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	889b      	ldrh	r3, [r3, #4]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	889b      	ldrh	r3, [r3, #4]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	330a      	adds	r3, #10
 8003a1e:	889b      	ldrh	r3, [r3, #4]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2a:	330a      	adds	r3, #10
 8003a2c:	889b      	ldrh	r3, [r3, #4]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	3314      	adds	r3, #20
 8003a36:	889b      	ldrh	r3, [r3, #4]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	3314      	adds	r3, #20
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	331e      	adds	r3, #30
 8003a4e:	889b      	ldrh	r3, [r3, #4]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	331e      	adds	r3, #30
 8003a5c:	889b      	ldrh	r3, [r3, #4]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a64:	3328      	adds	r3, #40	; 0x28
 8003a66:	889b      	ldrh	r3, [r3, #4]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	3328      	adds	r3, #40	; 0x28
 8003a76:	889b      	ldrh	r3, [r3, #4]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	889b      	ldrh	r3, [r3, #4]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	889b      	ldrh	r3, [r3, #4]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9c:	333c      	adds	r3, #60	; 0x3c
 8003a9e:	889b      	ldrh	r3, [r3, #4]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	333c      	adds	r3, #60	; 0x3c
 8003aae:	889b      	ldrh	r3, [r3, #4]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	3346      	adds	r3, #70	; 0x46
 8003aba:	889b      	ldrh	r3, [r3, #4]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	3346      	adds	r3, #70	; 0x46
 8003aca:	889b      	ldrh	r3, [r3, #4]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	3350      	adds	r3, #80	; 0x50
 8003ad6:	889b      	ldrh	r3, [r3, #4]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae4:	3350      	adds	r3, #80	; 0x50
 8003ae6:	889b      	ldrh	r3, [r3, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	335a      	adds	r3, #90	; 0x5a
 8003af2:	889b      	ldrh	r3, [r3, #4]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	335a      	adds	r3, #90	; 0x5a
 8003b02:	889b      	ldrh	r3, [r3, #4]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	3364      	adds	r3, #100	; 0x64
 8003b0e:	889b      	ldrh	r3, [r3, #4]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1c:	3364      	adds	r3, #100	; 0x64
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b28:	336e      	adds	r3, #110	; 0x6e
 8003b2a:	889b      	ldrh	r3, [r3, #4]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	336e      	adds	r3, #110	; 0x6e
 8003b3a:	889b      	ldrh	r3, [r3, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b44:	3378      	adds	r3, #120	; 0x78
 8003b46:	889b      	ldrh	r3, [r3, #4]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	3378      	adds	r3, #120	; 0x78
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	3382      	adds	r3, #130	; 0x82
 8003b62:	889b      	ldrh	r3, [r3, #4]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	3382      	adds	r3, #130	; 0x82
 8003b72:	889b      	ldrh	r3, [r3, #4]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	338c      	adds	r3, #140	; 0x8c
 8003b7e:	889b      	ldrh	r3, [r3, #4]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	338c      	adds	r3, #140	; 0x8c
 8003b8e:	889b      	ldrh	r3, [r3, #4]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b98:	3396      	adds	r3, #150	; 0x96
 8003b9a:	889b      	ldrh	r3, [r3, #4]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	3396      	adds	r3, #150	; 0x96
 8003baa:	889b      	ldrh	r3, [r3, #4]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	33a0      	adds	r3, #160	; 0xa0
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	33a0      	adds	r3, #160	; 0xa0
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	33aa      	adds	r3, #170	; 0xaa
 8003bd2:	889b      	ldrh	r3, [r3, #4]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	33aa      	adds	r3, #170	; 0xaa
 8003be2:	889b      	ldrh	r3, [r3, #4]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003bea:	7a3b      	ldrb	r3, [r7, #8]
 8003bec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003bf0:	7a7b      	ldrb	r3, [r7, #9]
 8003bf2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003bf6:	7abb      	ldrb	r3, [r7, #10]
 8003bf8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
 8003bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003c02:	7b3b      	ldrb	r3, [r7, #12]
 8003c04:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003c08:	7b7b      	ldrb	r3, [r7, #13]
 8003c0a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003c1a:	7c3b      	ldrb	r3, [r7, #16]
 8003c1c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003c26:	793b      	ldrb	r3, [r7, #4]
 8003c28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003c2c:	797b      	ldrb	r3, [r7, #5]
 8003c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003c32:	79bb      	ldrb	r3, [r7, #6]
 8003c34:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003c3e:	f107 0114 	add.w	r1, r7, #20
 8003c42:	2364      	movs	r3, #100	; 0x64
 8003c44:	2236      	movs	r2, #54	; 0x36
 8003c46:	4807      	ldr	r0, [pc, #28]	; (8003c64 <create_hk_packet+0x298>)
 8003c48:	f010 f950 	bl	8013eec <HAL_UART_Transmit>

	hk_seq++;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <create_hk_packet+0x294>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <create_hk_packet+0x294>)
 8003c56:	801a      	strh	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3750      	adds	r7, #80	; 0x50
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	24001af0 	.word	0x24001af0
 8003c64:	24001e3c 	.word	0x24001e3c

08003c68 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <reset_packet_sequence_numbers+0x20>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <reset_packet_sequence_numbers+0x24>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <reset_packet_sequence_numbers+0x28>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	801a      	strh	r2, [r3, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	24001aea 	.word	0x24001aea
 8003c8c:	24001aec 	.word	0x24001aec
 8003c90:	24001af0 	.word	0x24001af0

08003c94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003ca8:	2300      	movs	r3, #0
 8003caa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <MX_RTC_Init+0xb8>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cb2:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cba:	2263      	movs	r2, #99	; 0x63
 8003cbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cc4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003cde:	481a      	ldr	r0, [pc, #104]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003ce0:	f00d fbea 	bl	80114b8 <HAL_RTC_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003cea:	f7ff fdbd 	bl	8003868 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	2201      	movs	r2, #1
 8003d06:	4619      	mov	r1, r3
 8003d08:	480f      	ldr	r0, [pc, #60]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003d0a:	f00d fc57 	bl	80115bc <HAL_RTC_SetTime>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003d14:	f7ff fda8 	bl	8003868 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003d20:	2301      	movs	r3, #1
 8003d22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003d28:	463b      	mov	r3, r7
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4806      	ldr	r0, [pc, #24]	; (8003d48 <MX_RTC_Init+0xb4>)
 8003d30:	f00d fd3e 	bl	80117b0 <HAL_RTC_SetDate>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003d3a:	f7ff fd95 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	24001af4 	.word	0x24001af4
 8003d4c:	58004000 	.word	0x58004000

08003d50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b0b2      	sub	sp, #200	; 0xc8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	22c0      	movs	r2, #192	; 0xc0
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f016 f8eb 	bl	8019f3c <memset>
  if(rtcHandle->Instance==RTC)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_RTC_MspInit+0x5c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d118      	bne.n	8003da2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RTC_MspInit+0x60>)
 8003d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	4618      	mov	r0, r3
 8003d88:	f00a fe98 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003d92:	f7ff fd69 	bl	8003868 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RTC_MspInit+0x64>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_RTC_MspInit+0x64>)
 8003d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003da2:	bf00      	nop
 8003da4:	37c8      	adds	r7, #200	; 0xc8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	58004000 	.word	0x58004000
 8003db0:	00019300 	.word	0x00019300
 8003db4:	58024400 	.word	0x58024400

08003db8 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003dc2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003dc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dca:	481f      	ldr	r0, [pc, #124]	; (8003e48 <init_adc_dma+0x90>)
 8003dcc:	f003 f92a 	bl	8007024 <HAL_ADCEx_Calibration_Start>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003dd6:	f7ff fd47 	bl	8003868 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003dda:	220b      	movs	r2, #11
 8003ddc:	491b      	ldr	r1, [pc, #108]	; (8003e4c <init_adc_dma+0x94>)
 8003dde:	481a      	ldr	r0, [pc, #104]	; (8003e48 <init_adc_dma+0x90>)
 8003de0:	f002 f9fe 	bl	80061e0 <HAL_ADC_Start_DMA>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003dea:	f7ff fd3d 	bl	8003868 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003dee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df6:	4816      	ldr	r0, [pc, #88]	; (8003e50 <init_adc_dma+0x98>)
 8003df8:	f003 f914 	bl	8007024 <HAL_ADCEx_Calibration_Start>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e02:	f7ff fd31 	bl	8003868 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003e06:	2204      	movs	r2, #4
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <init_adc_dma+0x9c>)
 8003e0a:	4811      	ldr	r0, [pc, #68]	; (8003e50 <init_adc_dma+0x98>)
 8003e0c:	f002 f9e8 	bl	80061e0 <HAL_ADC_Start_DMA>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003e16:	f7ff fd27 	bl	8003868 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <init_adc_dma+0xa0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <init_adc_dma+0xa0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <init_adc_dma+0xa4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <init_adc_dma+0xa4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e38:	601a      	str	r2, [r3, #0]


	status = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	2400015c 	.word	0x2400015c
 8003e4c:	24001b20 	.word	0x24001b20
 8003e50:	240001c0 	.word	0x240001c0
 8003e54:	24001b40 	.word	0x24001b40
 8003e58:	24001bdc 	.word	0x24001bdc
 8003e5c:	24001b54 	.word	0x24001b54

08003e60 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003e68:	2201      	movs	r2, #1
 8003e6a:	490b      	ldr	r1, [pc, #44]	; (8003e98 <sample_pmt_spi+0x38>)
 8003e6c:	480b      	ldr	r0, [pc, #44]	; (8003e9c <sample_pmt_spi+0x3c>)
 8003e6e:	f00d ff69 	bl	8011d44 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <sample_pmt_spi+0x38>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <sample_pmt_spi+0x38>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	7bba      	ldrb	r2, [r7, #14]
 8003e8e:	701a      	strb	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24001b4c 	.word	0x24001b4c
 8003e9c:	24001b54 	.word	0x24001b54

08003ea0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <sample_erpa_spi+0x38>)
 8003eac:	480b      	ldr	r0, [pc, #44]	; (8003edc <sample_erpa_spi+0x3c>)
 8003eae:	f00d ff49 	bl	8011d44 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <sample_erpa_spi+0x38>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <sample_erpa_spi+0x38>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	7bba      	ldrb	r2, [r7, #14]
 8003ece:	701a      	strb	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	24001b48 	.word	0x24001b48
 8003edc:	24001bdc 	.word	0x24001bdc

08003ee0 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <sample_erpa_adc+0x20>)
 8003eea:	885b      	ldrh	r3, [r3, #2]
 8003eec:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	89fa      	ldrh	r2, [r7, #14]
 8003ef2:	801a      	strh	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	24001b20 	.word	0x24001b20

08003f04 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003f0c:	2390      	movs	r3, #144	; 0x90
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f8a2 	bl	8004058 <poll_i2c_sensor>
 8003f14:	4603      	mov	r3, r0
 8003f16:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003f18:	2394      	movs	r3, #148	; 0x94
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f89c 	bl	8004058 <poll_i2c_sensor>
 8003f20:	4603      	mov	r3, r0
 8003f22:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003f24:	2392      	movs	r3, #146	; 0x92
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f896 	bl	8004058 <poll_i2c_sensor>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003f30:	2396      	movs	r3, #150	; 0x96
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f890 	bl	8004058 <poll_i2c_sensor>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	89fa      	ldrh	r2, [r7, #14]
 8003f40:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3302      	adds	r3, #2
 8003f46:	89ba      	ldrh	r2, [r7, #12]
 8003f48:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	897a      	ldrh	r2, [r7, #10]
 8003f50:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3306      	adds	r3, #6
 8003f56:	893a      	ldrh	r2, [r7, #8]
 8003f58:	801a      	strh	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f6e:	8a9b      	ldrh	r3, [r3, #20]
 8003f70:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f74:	8a1b      	ldrh	r3, [r3, #16]
 8003f76:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f7a:	899b      	ldrh	r3, [r3, #12]
 8003f7c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003f7e:	4b21      	ldr	r3, [pc, #132]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f80:	8a5b      	ldrh	r3, [r3, #18]
 8003f82:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003f84:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f86:	889b      	ldrh	r3, [r3, #4]
 8003f88:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f8c:	88db      	ldrh	r3, [r3, #6]
 8003f8e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003f90:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f92:	89db      	ldrh	r3, [r3, #14]
 8003f94:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f98:	891b      	ldrh	r3, [r3, #8]
 8003f9a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <sample_hk_adc1+0xa0>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003fa2:	4b18      	ldr	r3, [pc, #96]	; (8004004 <sample_hk_adc1+0xa0>)
 8003fa4:	895b      	ldrh	r3, [r3, #10]
 8003fa6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8bfa      	ldrh	r2, [r7, #30]
 8003fac:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	8bba      	ldrh	r2, [r7, #28]
 8003fb4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	8b7a      	ldrh	r2, [r7, #26]
 8003fbc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3306      	adds	r3, #6
 8003fc2:	8b3a      	ldrh	r2, [r7, #24]
 8003fc4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	8afa      	ldrh	r2, [r7, #22]
 8003fcc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	330a      	adds	r3, #10
 8003fd2:	8aba      	ldrh	r2, [r7, #20]
 8003fd4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	8a7a      	ldrh	r2, [r7, #18]
 8003fdc:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	330e      	adds	r3, #14
 8003fe2:	8a3a      	ldrh	r2, [r7, #16]
 8003fe4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3310      	adds	r3, #16
 8003fea:	89fa      	ldrh	r2, [r7, #14]
 8003fec:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3312      	adds	r3, #18
 8003ff2:	89ba      	ldrh	r2, [r7, #12]
 8003ff4:	801a      	strh	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	24001b20 	.word	0x24001b20

08004008 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <sample_hk_adc3+0x4c>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <sample_hk_adc3+0x4c>)
 8004018:	885b      	ldrh	r3, [r3, #2]
 800401a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <sample_hk_adc3+0x4c>)
 800401e:	889b      	ldrh	r3, [r3, #4]
 8004020:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <sample_hk_adc3+0x4c>)
 8004024:	88db      	ldrh	r3, [r3, #6]
 8004026:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	89fa      	ldrh	r2, [r7, #14]
 800402c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3302      	adds	r3, #2
 8004032:	89ba      	ldrh	r2, [r7, #12]
 8004034:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	897a      	ldrh	r2, [r7, #10]
 800403c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3306      	adds	r3, #6
 8004042:	893a      	ldrh	r2, [r7, #8]
 8004044:	801a      	strh	r2, [r3, #0]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	24001b40 	.word	0x24001b40

08004058 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004062:	2200      	movs	r2, #0
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <poll_i2c_sensor+0x90>)
 8004066:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	b299      	uxth	r1, r3
 800406c:	2301      	movs	r3, #1
 800406e:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <poll_i2c_sensor+0x90>)
 8004070:	481e      	ldr	r0, [pc, #120]	; (80040ec <poll_i2c_sensor+0x94>)
 8004072:	f007 f9ad 	bl	800b3d0 <HAL_I2C_Master_Transmit_DMA>
 8004076:	4603      	mov	r3, r0
 8004078:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004080:	481b      	ldr	r0, [pc, #108]	; (80040f0 <poll_i2c_sensor+0x98>)
 8004082:	f015 ffd1 	bl	801a028 <puts>
 8004086:	e028      	b.n	80040da <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004088:	bf00      	nop
 800408a:	4818      	ldr	r0, [pc, #96]	; (80040ec <poll_i2c_sensor+0x94>)
 800408c:	f007 fc87 	bl	800b99e <HAL_I2C_GetState>
 8004090:	4603      	mov	r3, r0
 8004092:	2b20      	cmp	r3, #32
 8004094:	d1f9      	bne.n	800408a <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	b299      	uxth	r1, r3
 800409a:	2302      	movs	r3, #2
 800409c:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <poll_i2c_sensor+0x90>)
 800409e:	4813      	ldr	r0, [pc, #76]	; (80040ec <poll_i2c_sensor+0x94>)
 80040a0:	f007 faaa 	bl	800b5f8 <HAL_I2C_Master_Receive_DMA>
 80040a4:	4603      	mov	r3, r0
 80040a6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80040a8:	7b7b      	ldrb	r3, [r7, #13]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80040ae:	4811      	ldr	r0, [pc, #68]	; (80040f4 <poll_i2c_sensor+0x9c>)
 80040b0:	f015 ffba 	bl	801a028 <puts>
 80040b4:	e011      	b.n	80040da <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80040b6:	bf00      	nop
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <poll_i2c_sensor+0x94>)
 80040ba:	f007 fc70 	bl	800b99e <HAL_I2C_GetState>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d1f9      	bne.n	80040b8 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <poll_i2c_sensor+0x90>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80040cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d0:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <poll_i2c_sensor+0x90>)
 80040d2:	7852      	ldrb	r2, [r2, #1]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	10db      	asrs	r3, r3, #3
 80040d8:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80040da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	24001b50 	.word	0x24001b50
 80040ec:	2400193c 	.word	0x2400193c
 80040f0:	0801ab90 	.word	0x0801ab90
 80040f4:	0801aba0 	.word	0x0801aba0

080040f8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <MX_SPI1_Init+0xa8>)
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <MX_SPI1_Init+0xac>)
 8004100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004102:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004104:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800410a:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800410c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004110:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004114:	220f      	movs	r2, #15
 8004116:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004126:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800412a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800412e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004132:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004136:	2200      	movs	r2, #0
 8004138:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800413c:	2200      	movs	r2, #0
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004142:	2200      	movs	r2, #0
 8004144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004148:	2200      	movs	r2, #0
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800414e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004152:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004156:	2200      	movs	r2, #0
 8004158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800415c:	2200      	movs	r2, #0
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800416e:	2200      	movs	r2, #0
 8004170:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004174:	2200      	movs	r2, #0
 8004176:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800417a:	2200      	movs	r2, #0
 800417c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004180:	2200      	movs	r2, #0
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <MX_SPI1_Init+0xa8>)
 8004186:	2200      	movs	r2, #0
 8004188:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800418a:	4805      	ldr	r0, [pc, #20]	; (80041a0 <MX_SPI1_Init+0xa8>)
 800418c:	f00d fcb6 	bl	8011afc <HAL_SPI_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004196:	f7ff fb67 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	24001b54 	.word	0x24001b54
 80041a4:	40013000 	.word	0x40013000

080041a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041ae:	4a29      	ldr	r2, [pc, #164]	; (8004254 <MX_SPI2_Init+0xac>)
 80041b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80041ba:	4b25      	ldr	r3, [pc, #148]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80041c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041c4:	220f      	movs	r2, #15
 80041c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041ce:	4b20      	ldr	r3, [pc, #128]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041d4:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041de:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80041e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <MX_SPI2_Init+0xa8>)
 80041fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004202:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004206:	2200      	movs	r2, #0
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <MX_SPI2_Init+0xa8>)
 800420c:	2200      	movs	r2, #0
 800420e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <MX_SPI2_Init+0xa8>)
 800421e:	2200      	movs	r2, #0
 8004220:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004224:	2200      	movs	r2, #0
 8004226:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <MX_SPI2_Init+0xa8>)
 800422a:	2200      	movs	r2, #0
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004230:	2200      	movs	r2, #0
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <MX_SPI2_Init+0xa8>)
 8004236:	2200      	movs	r2, #0
 8004238:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800423a:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_SPI2_Init+0xa8>)
 800423c:	f00d fc5e 	bl	8011afc <HAL_SPI_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004246:	f7ff fb0f 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	24001bdc 	.word	0x24001bdc
 8004254:	40003800 	.word	0x40003800

08004258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b0bc      	sub	sp, #240	; 0xf0
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	22c0      	movs	r2, #192	; 0xc0
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f015 fe5f 	bl	8019f3c <memset>
  if(spiHandle->Instance==SPI1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a83      	ldr	r2, [pc, #524]	; (8004490 <HAL_SPI_MspInit+0x238>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d17c      	bne.n	8004382 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004294:	2300      	movs	r3, #0
 8004296:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004298:	f107 0318 	add.w	r3, r7, #24
 800429c:	4618      	mov	r0, r3
 800429e:	f00a fc0d 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80042a8:	f7ff fade 	bl	8003868 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ac:	4b79      	ldr	r3, [pc, #484]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b2:	4a78      	ldr	r2, [pc, #480]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042bc:	4b75      	ldr	r3, [pc, #468]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	4b72      	ldr	r3, [pc, #456]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d0:	4a70      	ldr	r2, [pc, #448]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042da:	4b6e      	ldr	r3, [pc, #440]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80042e8:	2318      	movs	r3, #24
 80042ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004300:	2305      	movs	r3, #5
 8004302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800430a:	4619      	mov	r1, r3
 800430c:	4862      	ldr	r0, [pc, #392]	; (8004498 <HAL_SPI_MspInit+0x240>)
 800430e:	f006 fde1 	bl	800aed4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004312:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004314:	4a62      	ldr	r2, [pc, #392]	; (80044a0 <HAL_SPI_MspInit+0x248>)
 8004316:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004318:	4b60      	ldr	r3, [pc, #384]	; (800449c <HAL_SPI_MspInit+0x244>)
 800431a:	2225      	movs	r2, #37	; 0x25
 800431c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004324:	4b5d      	ldr	r3, [pc, #372]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004326:	2200      	movs	r2, #0
 8004328:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_SPI_MspInit+0x244>)
 800432c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004330:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004332:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004338:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800433a:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_SPI_MspInit+0x244>)
 800433c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004340:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004344:	2200      	movs	r2, #0
 8004346:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004348:	4b54      	ldr	r3, [pc, #336]	; (800449c <HAL_SPI_MspInit+0x244>)
 800434a:	2200      	movs	r2, #0
 800434c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434e:	4b53      	ldr	r3, [pc, #332]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004350:	2200      	movs	r2, #0
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004354:	4851      	ldr	r0, [pc, #324]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004356:	f003 fc8d 	bl	8007c74 <HAL_DMA_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004360:	f7ff fa82 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a4d      	ldr	r2, [pc, #308]	; (800449c <HAL_SPI_MspInit+0x244>)
 8004368:	67da      	str	r2, [r3, #124]	; 0x7c
 800436a:	4a4c      	ldr	r2, [pc, #304]	; (800449c <HAL_SPI_MspInit+0x244>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004370:	2200      	movs	r2, #0
 8004372:	2105      	movs	r1, #5
 8004374:	2023      	movs	r0, #35	; 0x23
 8004376:	f003 f84f 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800437a:	2023      	movs	r0, #35	; 0x23
 800437c:	f003 f866 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004380:	e081      	b.n	8004486 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a47      	ldr	r2, [pc, #284]	; (80044a4 <HAL_SPI_MspInit+0x24c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d17c      	bne.n	8004486 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800438c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004398:	2300      	movs	r3, #0
 800439a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f00a fb8b 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80043ac:	f7ff fa5c 	bl	8003868 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043b6:	4a37      	ldr	r2, [pc, #220]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043c0:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d4:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043de:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <HAL_SPI_MspInit+0x23c>)
 80043e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80043ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80043f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f4:	2302      	movs	r3, #2
 80043f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004406:	2305      	movs	r3, #5
 8004408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004410:	4619      	mov	r1, r3
 8004412:	4821      	ldr	r0, [pc, #132]	; (8004498 <HAL_SPI_MspInit+0x240>)
 8004414:	f006 fd5e 	bl	800aed4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <HAL_SPI_MspInit+0x254>)
 800441c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004420:	2227      	movs	r2, #39	; 0x27
 8004422:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004424:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004436:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800443a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004446:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004450:	2200      	movs	r2, #0
 8004452:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004456:	2200      	movs	r2, #0
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800445a:	4813      	ldr	r0, [pc, #76]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800445c:	f003 fc0a 	bl	8007c74 <HAL_DMA_Init>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004466:	f7ff f9ff 	bl	8003868 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 800446e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_SPI_MspInit+0x250>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2105      	movs	r1, #5
 800447a:	2024      	movs	r0, #36	; 0x24
 800447c:	f002 ffcc 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004480:	2024      	movs	r0, #36	; 0x24
 8004482:	f002 ffe3 	bl	800744c <HAL_NVIC_EnableIRQ>
}
 8004486:	bf00      	nop
 8004488:	37f0      	adds	r7, #240	; 0xf0
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40013000 	.word	0x40013000
 8004494:	58024400 	.word	0x58024400
 8004498:	58020400 	.word	0x58020400
 800449c:	24001c64 	.word	0x24001c64
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40003800 	.word	0x40003800
 80044a8:	24001cdc 	.word	0x24001cdc
 80044ac:	40020058 	.word	0x40020058

080044b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_MspInit+0x38>)
 80044b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_MspInit+0x38>)
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_MspInit+0x38>)
 80044c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044d4:	2200      	movs	r2, #0
 80044d6:	210f      	movs	r1, #15
 80044d8:	f06f 0001 	mvn.w	r0, #1
 80044dc:	f002 ff9c 	bl	8007418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	58024400 	.word	0x58024400

080044ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b090      	sub	sp, #64	; 0x40
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d827      	bhi.n	800454a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80044fa:	2200      	movs	r2, #0
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	2036      	movs	r0, #54	; 0x36
 8004500:	f002 ff8a 	bl	8007418 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004504:	2036      	movs	r0, #54	; 0x36
 8004506:	f002 ffa1 	bl	800744c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <HAL_InitTick+0xc4>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_InitTick+0xc8>)
 8004512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004516:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_InitTick+0xc8>)
 8004518:	f043 0310 	orr.w	r3, r3, #16
 800451c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_InitTick+0xc8>)
 8004522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800452e:	f107 0210 	add.w	r2, r7, #16
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f00a fa7d 	bl	800ea38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_InitTick+0x6a>
 8004548:	e001      	b.n	800454e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e02b      	b.n	80045a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800454e:	f00a fa47 	bl	800e9e0 <HAL_RCC_GetPCLK1Freq>
 8004552:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004554:	e004      	b.n	8004560 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004556:	f00a fa43 	bl	800e9e0 <HAL_RCC_GetPCLK1Freq>
 800455a:	4603      	mov	r3, r0
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <HAL_InitTick+0xcc>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	0c9b      	lsrs	r3, r3, #18
 800456a:	3b01      	subs	r3, #1
 800456c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_InitTick+0xd0>)
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <HAL_InitTick+0xd4>)
 8004572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_InitTick+0xd0>)
 8004576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800457a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800457c:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <HAL_InitTick+0xd0>)
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_InitTick+0xd0>)
 8004584:	2200      	movs	r2, #0
 8004586:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_InitTick+0xd0>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800458e:	480b      	ldr	r0, [pc, #44]	; (80045bc <HAL_InitTick+0xd0>)
 8004590:	f00e f853 	bl	801263a <HAL_TIM_Base_Init>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800459a:	4808      	ldr	r0, [pc, #32]	; (80045bc <HAL_InitTick+0xd0>)
 800459c:	f00e f8a4 	bl	80126e8 <HAL_TIM_Base_Start_IT>
 80045a0:	4603      	mov	r3, r0
 80045a2:	e000      	b.n	80045a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3740      	adds	r7, #64	; 0x40
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	240000c4 	.word	0x240000c4
 80045b4:	58024400 	.word	0x58024400
 80045b8:	431bde83 	.word	0x431bde83
 80045bc:	24001d54 	.word	0x24001d54
 80045c0:	40001000 	.word	0x40001000

080045c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80045c8:	e7fe      	b.n	80045c8 <NMI_Handler+0x4>

080045ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <HardFault_Handler+0x4>

080045d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <MemManage_Handler+0x4>

080045d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045da:	e7fe      	b.n	80045da <BusFault_Handler+0x4>

080045dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e0:	e7fe      	b.n	80045e0 <UsageFault_Handler+0x4>

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <DMA1_Stream0_IRQHandler+0x10>)
 80045f6:	f004 fe67 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	24000224 	.word	0x24000224

08004604 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004608:	4802      	ldr	r0, [pc, #8]	; (8004614 <DMA1_Stream1_IRQHandler+0x10>)
 800460a:	f004 fe5d 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2400029c 	.word	0x2400029c

08004618 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800461c:	4802      	ldr	r0, [pc, #8]	; (8004628 <DMA1_Stream2_IRQHandler+0x10>)
 800461e:	f004 fe53 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	24001ed0 	.word	0x24001ed0

0800462c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <DMA1_Stream3_IRQHandler+0x10>)
 8004632:	f004 fe49 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	24001cdc 	.word	0x24001cdc

08004640 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <DMA1_Stream4_IRQHandler+0x10>)
 8004646:	f004 fe3f 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	24001c64 	.word	0x24001c64

08004654 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004658:	4802      	ldr	r0, [pc, #8]	; (8004664 <DMA1_Stream5_IRQHandler+0x10>)
 800465a:	f004 fe35 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	24000328 	.word	0x24000328

08004668 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800466c:	4802      	ldr	r0, [pc, #8]	; (8004678 <DMA1_Stream6_IRQHandler+0x10>)
 800466e:	f004 fe2b 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	24001990 	.word	0x24001990

0800467c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <TIM1_BRK_IRQHandler+0x10>)
 8004682:	f00e fb48 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	24001da4 	.word	0x24001da4

08004690 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <TIM1_UP_IRQHandler+0x10>)
 8004696:	f00e fb3e 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	24001da4 	.word	0x24001da4

080046a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80046aa:	f00e fb34 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	24001da4 	.word	0x24001da4

080046b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <TIM1_CC_IRQHandler+0x10>)
 80046be:	f00e fb2a 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	24001da4 	.word	0x24001da4

080046cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <TIM2_IRQHandler+0x10>)
 80046d2:	f00e fb20 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	24001df0 	.word	0x24001df0

080046e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <I2C1_EV_IRQHandler+0x10>)
 80046e6:	f007 f877 	bl	800b7d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2400193c 	.word	0x2400193c

080046f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <I2C1_ER_IRQHandler+0x10>)
 80046fa:	f007 f887 	bl	800b80c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2400193c 	.word	0x2400193c

08004708 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <SPI1_IRQHandler+0x10>)
 800470e:	f00d fc61 	bl	8011fd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	24001b54 	.word	0x24001b54

0800471c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <SPI2_IRQHandler+0x10>)
 8004722:	f00d fc57 	bl	8011fd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	24001bdc 	.word	0x24001bdc

08004730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004734:	4802      	ldr	r0, [pc, #8]	; (8004740 <USART1_IRQHandler+0x10>)
 8004736:	f00f fe31 	bl	801439c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	24001e3c 	.word	0x24001e3c

08004744 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <DMA1_Stream7_IRQHandler+0x10>)
 800474a:	f004 fdbd 	bl	80092c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	24001a08 	.word	0x24001a08

08004758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <TIM6_DAC_IRQHandler+0x20>)
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004766:	4804      	ldr	r0, [pc, #16]	; (8004778 <TIM6_DAC_IRQHandler+0x20>)
 8004768:	f003 f805 	bl	8007776 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800476c:	4803      	ldr	r0, [pc, #12]	; (800477c <TIM6_DAC_IRQHandler+0x24>)
 800476e:	f00e fad2 	bl	8012d16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	24000314 	.word	0x24000314
 800477c:	24001d54 	.word	0x24001d54

08004780 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <ITM_SendChar+0x48>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <ITM_SendChar+0x48>)
 8004790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004794:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <ITM_SendChar+0x4c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <ITM_SendChar+0x4c>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80047a2:	bf00      	nop
 80047a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f8      	beq.n	80047a4 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80047b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000edfc 	.word	0xe000edfc
 80047cc:	e0000e00 	.word	0xe0000e00

080047d0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e00a      	b.n	80047f8 <_read+0x28>
		*ptr++ = __io_getchar();
 80047e2:	f3af 8000 	nop.w
 80047e6:	4601      	mov	r1, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	60ba      	str	r2, [r7, #8]
 80047ee:	b2ca      	uxtb	r2, r1
 80047f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	dbf0      	blt.n	80047e2 <_read+0x12>
	}

	return len;
 8004800:	687b      	ldr	r3, [r7, #4]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e009      	b.n	8004830 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	60ba      	str	r2, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ffab 	bl	8004780 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	dbf1      	blt.n	800481c <_write+0x12>
	}
	return len;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <_close>:

int _close(int file) {
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <_fstat>:

int _fstat(int file, struct stat *st) {
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486a:	605a      	str	r2, [r3, #4]
	return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <_isatty>:

int _isatty(int file) {
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <_sbrk+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <_sbrk+0x64>)
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <_sbrk+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <_sbrk+0x64>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d207      	bcs.n	80048ec <_sbrk+0x40>
		errno = ENOMEM;
 80048dc:	f015 faf6 	bl	8019ecc <__errno>
 80048e0:	4603      	mov	r3, r0
 80048e2:	220c      	movs	r2, #12
 80048e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ea:	e009      	b.n	8004900 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <_sbrk+0x64>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a05      	ldr	r2, [pc, #20]	; (8004910 <_sbrk+0x64>)
 80048fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	24080000 	.word	0x24080000
 800490c:	00000400 	.word	0x00000400
 8004910:	24001da0 	.word	0x24001da0
 8004914:	24006980 	.word	0x24006980

08004918 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800491c:	4b37      	ldr	r3, [pc, #220]	; (80049fc <SystemInit+0xe4>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	4a36      	ldr	r2, [pc, #216]	; (80049fc <SystemInit+0xe4>)
 8004924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800492c:	4b34      	ldr	r3, [pc, #208]	; (8004a00 <SystemInit+0xe8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b06      	cmp	r3, #6
 8004936:	d807      	bhi.n	8004948 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <SystemInit+0xe8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <SystemInit+0xe8>)
 8004942:	f043 0307 	orr.w	r3, r3, #7
 8004946:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <SystemInit+0xec>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <SystemInit+0xec>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <SystemInit+0xec>)
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800495a:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <SystemInit+0xec>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4929      	ldr	r1, [pc, #164]	; (8004a04 <SystemInit+0xec>)
 8004960:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <SystemInit+0xf0>)
 8004962:	4013      	ands	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004966:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <SystemInit+0xe8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <SystemInit+0xe8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 030f 	bic.w	r3, r3, #15
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <SystemInit+0xe8>)
 800497c:	f043 0307 	orr.w	r3, r3, #7
 8004980:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <SystemInit+0xec>)
 8004984:	2200      	movs	r2, #0
 8004986:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <SystemInit+0xec>)
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <SystemInit+0xec>)
 8004990:	2200      	movs	r2, #0
 8004992:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <SystemInit+0xec>)
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <SystemInit+0xf4>)
 8004998:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <SystemInit+0xec>)
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <SystemInit+0xf8>)
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80049a0:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <SystemInit+0xec>)
 80049a2:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <SystemInit+0xfc>)
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80049a6:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <SystemInit+0xec>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80049ac:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <SystemInit+0xec>)
 80049ae:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <SystemInit+0xfc>)
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <SystemInit+0xec>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <SystemInit+0xec>)
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <SystemInit+0xfc>)
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <SystemInit+0xec>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80049c4:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <SystemInit+0xec>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <SystemInit+0xec>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <SystemInit+0xec>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <SystemInit+0x100>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <SystemInit+0x104>)
 80049dc:	4013      	ands	r3, r2
 80049de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e2:	d202      	bcs.n	80049ea <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <SystemInit+0x108>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <SystemInit+0x10c>)
 80049ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00
 8004a00:	52002000 	.word	0x52002000
 8004a04:	58024400 	.word	0x58024400
 8004a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a0c:	02020200 	.word	0x02020200
 8004a10:	01ff0000 	.word	0x01ff0000
 8004a14:	01010280 	.word	0x01010280
 8004a18:	5c001000 	.word	0x5c001000
 8004a1c:	ffff0000 	.word	0xffff0000
 8004a20:	51008108 	.word	0x51008108
 8004a24:	52004000 	.word	0x52004000

08004a28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b09a      	sub	sp, #104	; 0x68
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	611a      	str	r2, [r3, #16]
 8004a58:	615a      	str	r2, [r3, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	222c      	movs	r2, #44	; 0x2c
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f015 fa6a 	bl	8019f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a68:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a6a:	4a45      	ldr	r2, [pc, #276]	; (8004b80 <MX_TIM1_Init+0x158>)
 8004a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004a6e:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a70:	224a      	movs	r2, #74	; 0x4a
 8004a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a74:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a7c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a82:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a88:	4b3c      	ldr	r3, [pc, #240]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a8e:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a94:	4839      	ldr	r0, [pc, #228]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004a96:	f00d fdd0 	bl	801263a <HAL_TIM_Base_Init>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004aa0:	f7fe fee2 	bl	8003868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004aaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4832      	ldr	r0, [pc, #200]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004ab2:	f00e fb4b 	bl	801314c <HAL_TIM_ConfigClockSource>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004abc:	f7fe fed4 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004ac0:	482e      	ldr	r0, [pc, #184]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004ac2:	f00e f8c7 	bl	8012c54 <HAL_TIM_PWM_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004acc:	f7fe fecc 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4826      	ldr	r0, [pc, #152]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004ae4:	f00f f888 	bl	8013bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004aee:	f7fe febb 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004af2:	2360      	movs	r3, #96	; 0x60
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004af6:	f240 13df 	movw	r3, #479	; 0x1df
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b00:	2300      	movs	r3, #0
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b14:	2200      	movs	r2, #0
 8004b16:	4619      	mov	r1, r3
 8004b18:	4818      	ldr	r0, [pc, #96]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004b1a:	f00e fa03 	bl	8012f24 <HAL_TIM_PWM_ConfigChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004b24:	f7fe fea0 	bl	8003868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004b5e:	f00f f8d9 	bl	8013d14 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004b68:	f7fe fe7e 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b6c:	4803      	ldr	r0, [pc, #12]	; (8004b7c <MX_TIM1_Init+0x154>)
 8004b6e:	f000 f8dd 	bl	8004d2c <HAL_TIM_MspPostInit>

}
 8004b72:	bf00      	nop
 8004b74:	3768      	adds	r7, #104	; 0x68
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	24001da4 	.word	0x24001da4
 8004b80:	40010000 	.word	0x40010000

08004b84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08e      	sub	sp, #56	; 0x38
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b98:	f107 031c 	add.w	r3, r7, #28
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	611a      	str	r2, [r3, #16]
 8004bb2:	615a      	str	r2, [r3, #20]
 8004bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bc0:	224a      	movs	r2, #74	; 0x4a
 8004bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004bca:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bcc:	f640 4234 	movw	r2, #3124	; 0xc34
 8004bd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bda:	2280      	movs	r2, #128	; 0x80
 8004bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bde:	4823      	ldr	r0, [pc, #140]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004be0:	f00d fd2b 	bl	801263a <HAL_TIM_Base_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004bea:	f7fe fe3d 	bl	8003868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	481c      	ldr	r0, [pc, #112]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004bfc:	f00e faa6 	bl	801314c <HAL_TIM_ConfigClockSource>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004c06:	f7fe fe2f 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c0a:	4818      	ldr	r0, [pc, #96]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004c0c:	f00e f822 	bl	8012c54 <HAL_TIM_PWM_Init>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004c16:	f7fe fe27 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c1a:	2320      	movs	r3, #32
 8004c1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c22:	f107 031c 	add.w	r3, r7, #28
 8004c26:	4619      	mov	r1, r3
 8004c28:	4810      	ldr	r0, [pc, #64]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004c2a:	f00e ffe5 	bl	8013bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004c34:	f7fe fe18 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c38:	2360      	movs	r3, #96	; 0x60
 8004c3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c48:	463b      	mov	r3, r7
 8004c4a:	220c      	movs	r2, #12
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4807      	ldr	r0, [pc, #28]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004c50:	f00e f968 	bl	8012f24 <HAL_TIM_PWM_ConfigChannel>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004c5a:	f7fe fe05 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c5e:	4803      	ldr	r0, [pc, #12]	; (8004c6c <MX_TIM2_Init+0xe8>)
 8004c60:	f000 f864 	bl	8004d2c <HAL_TIM_MspPostInit>

}
 8004c64:	bf00      	nop
 8004c66:	3738      	adds	r7, #56	; 0x38
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	24001df0 	.word	0x24001df0

08004c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_TIM_Base_MspInit+0xb4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d12f      	bne.n	8004ce2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c82:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c92:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2105      	movs	r1, #5
 8004ca4:	2018      	movs	r0, #24
 8004ca6:	f002 fbb7 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004caa:	2018      	movs	r0, #24
 8004cac:	f002 fbce 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2105      	movs	r1, #5
 8004cb4:	2019      	movs	r0, #25
 8004cb6:	f002 fbaf 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004cba:	2019      	movs	r0, #25
 8004cbc:	f002 fbc6 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2105      	movs	r1, #5
 8004cc4:	201a      	movs	r0, #26
 8004cc6:	f002 fba7 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004cca:	201a      	movs	r0, #26
 8004ccc:	f002 fbbe 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2105      	movs	r1, #5
 8004cd4:	201b      	movs	r0, #27
 8004cd6:	f002 fb9f 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004cda:	201b      	movs	r0, #27
 8004cdc:	f002 fbb6 	bl	800744c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004ce0:	e01b      	b.n	8004d1a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d116      	bne.n	8004d1a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <HAL_TIM_Base_MspInit+0xb8>)
 8004cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2105      	movs	r1, #5
 8004d0e:	201c      	movs	r0, #28
 8004d10:	f002 fb82 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d14:	201c      	movs	r0, #28
 8004d16:	f002 fb99 	bl	800744c <HAL_NVIC_EnableIRQ>
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	58024400 	.word	0x58024400

08004d2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <HAL_TIM_MspPostInit+0xb8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d120      	bne.n	8004d90 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d54:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2302      	movs	r3, #2
 8004d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d82:	f107 0314 	add.w	r3, r7, #20
 8004d86:	4619      	mov	r1, r3
 8004d88:	4818      	ldr	r0, [pc, #96]	; (8004dec <HAL_TIM_MspPostInit+0xc0>)
 8004d8a:	f006 f8a3 	bl	800aed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004d8e:	e024      	b.n	8004dda <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d11f      	bne.n	8004dda <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004da0:	4a11      	ldr	r2, [pc, #68]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_TIM_MspPostInit+0xbc>)
 8004dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <HAL_TIM_MspPostInit+0xc4>)
 8004dd6:	f006 f87d 	bl	800aed4 <HAL_GPIO_Init>
}
 8004dda:	bf00      	nop
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	58024400 	.word	0x58024400
 8004dec:	58020000 	.word	0x58020000
 8004df0:	58020400 	.word	0x58020400

08004df4 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004e00:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <get_uptime+0x94>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <get_uptime+0x98>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <get_uptime+0x94>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d005      	beq.n	8004e22 <get_uptime+0x2e>
		ms = uptime_millis;
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <get_uptime+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <get_uptime+0x98>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e28:	fb03 f202 	mul.w	r2, r3, r2
 8004e2c:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <get_uptime+0x98>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4917      	ldr	r1, [pc, #92]	; (8004e90 <get_uptime+0x9c>)
 8004e34:	fba1 1303 	umull	r1, r3, r1, r3
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <get_uptime+0x5a>
		uptime = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	0e1b      	lsrs	r3, r3, #24
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	0c1a      	lsrs	r2, r3, #16
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	0a1a      	lsrs	r2, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3303      	adds	r3, #3
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	24001ae0 	.word	0x24001ae0
 8004e8c:	e000e010 	.word	0xe000e010
 8004e90:	10624dd3 	.word	0x10624dd3

08004e94 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4821      	ldr	r0, [pc, #132]	; (8004f2c <get_timestamp+0x98>)
 8004ea6:	f00c fc27 	bl	80116f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004eaa:	f107 030c 	add.w	r3, r7, #12
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	481e      	ldr	r0, [pc, #120]	; (8004f2c <get_timestamp+0x98>)
 8004eb4:	f00c fd04 	bl	80118c0 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2264      	movs	r2, #100	; 0x64
 8004ebc:	fb03 f202 	mul.w	r2, r3, r2
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <get_timestamp+0x9c>)
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	7b7a      	ldrb	r2, [r7, #13]
 8004ed2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	7bba      	ldrb	r2, [r7, #14]
 8004eda:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3303      	adds	r3, #3
 8004ee0:	7c3a      	ldrb	r2, [r7, #16]
 8004ee2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	7c7a      	ldrb	r2, [r7, #17]
 8004eea:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3305      	adds	r3, #5
 8004ef0:	7cba      	ldrb	r2, [r7, #18]
 8004ef2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	0e1a      	lsrs	r2, r3, #24
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3306      	adds	r3, #6
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	0c1a      	lsrs	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3307      	adds	r3, #7
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	0a1a      	lsrs	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3308      	adds	r3, #8
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3309      	adds	r3, #9
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	24001af4 	.word	0x24001af4
 8004f30:	000f4240 	.word	0x000f4240

08004f34 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	789b      	ldrb	r3, [r3, #2]
 8004f48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	78db      	ldrb	r3, [r3, #3]
 8004f50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	799b      	ldrb	r3, [r3, #6]
 8004f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3307      	adds	r3, #7
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b21b      	sxth	r3, r3
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	b21b      	sxth	r3, r3
 8004f82:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8004f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8004f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8004f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8004f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fa0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8004fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8004fa8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004fac:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8004fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fb0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8004fb2:	f107 0320 	add.w	r3, r7, #32
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4619      	mov	r1, r3
 8004fba:	480b      	ldr	r0, [pc, #44]	; (8004fe8 <calibrateRTC+0xb4>)
 8004fbc:	f00c fbf8 	bl	80117b0 <HAL_RTC_SetDate>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8004fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <calibrateRTC+0x9e>
		Error_Handler();
 8004fce:	f7fe fc4b 	bl	8003868 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8004fd2:	f107 030c 	add.w	r3, r7, #12
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4803      	ldr	r0, [pc, #12]	; (8004fe8 <calibrateRTC+0xb4>)
 8004fdc:	f000 f806 	bl	8004fec <RTC_SetTime>
}
 8004fe0:	bf00      	nop
 8004fe2:	3730      	adds	r7, #48	; 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	24001af4 	.word	0x24001af4

08004fec <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <RTC_SetTime+0x1a>
 8005002:	2302      	movs	r3, #2
 8005004:	e051      	b.n	80050aa <RTC_SetTime+0xbe>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	22ca      	movs	r2, #202	; 0xca
 800501c:	625a      	str	r2, [r3, #36]	; 0x24
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2253      	movs	r2, #83	; 0x53
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f00c fcbc 	bl	80119a4 <RTC_EnterInitMode>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d129      	bne.n	800508a <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f00c fd21 	bl	8011a88 <RTC_ByteToBcd2>
 8005046:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005048:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	4618      	mov	r0, r3
 8005050:	f00c fd1a 	bl	8011a88 <RTC_ByteToBcd2>
 8005054:	4603      	mov	r3, r0
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	789b      	ldrb	r3, [r3, #2]
 800505e:	4618      	mov	r0, r3
 8005060:	f00c fd12 	bl	8011a88 <RTC_ByteToBcd2>
 8005064:	4603      	mov	r3, r0
 8005066:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	78db      	ldrb	r3, [r3, #3]
 800506e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	6939      	ldr	r1, [r7, #16]
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <RTC_SetTime+0xc8>)
 800507c:	400b      	ands	r3, r1
 800507e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f00c fcc3 	bl	8011a0c <RTC_ExitInitMode>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]

}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}
 80050b2:	bf00      	nop
 80050b4:	007f7f7f 	.word	0x007f7f7f

080050b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050be:	4a31      	ldr	r2, [pc, #196]	; (8005184 <MX_USART1_UART_Init+0xcc>)
 80050c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80050c2:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050c4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80050c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050d6:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050de:	220c      	movs	r2, #12
 80050e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005100:	481f      	ldr	r0, [pc, #124]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005102:	f00e fea3 	bl	8013e4c <HAL_UART_Init>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800510c:	f7fe fbac 	bl	8003868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005110:	2100      	movs	r1, #0
 8005112:	481b      	ldr	r0, [pc, #108]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005114:	f011 fbe9 	bl	80168ea <HAL_UARTEx_SetTxFifoThreshold>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800511e:	f7fe fba3 	bl	8003868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005122:	2100      	movs	r1, #0
 8005124:	4816      	ldr	r0, [pc, #88]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005126:	f011 fc1e 	bl	8016966 <HAL_UARTEx_SetRxFifoThreshold>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005130:	f7fe fb9a 	bl	8003868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005134:	4812      	ldr	r0, [pc, #72]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005136:	f011 fb9f 	bl	8016878 <HAL_UARTEx_DisableFifoMode>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005140:	f7fe fb92 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005144:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 800514a:	f011 fc0c 	bl	8016966 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800514e:	480c      	ldr	r0, [pc, #48]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005150:	f011 fb57 	bl	8016802 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005154:	480a      	ldr	r0, [pc, #40]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005156:	f011 fb21 	bl	801679c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005168:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <MX_USART1_UART_Init+0xc8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005178:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	24001e3c 	.word	0x24001e3c
 8005184:	40011000 	.word	0x40011000

08005188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b0ba      	sub	sp, #232	; 0xe8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005190:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	22c0      	movs	r2, #192	; 0xc0
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f014 fec7 	bl	8019f3c <memset>
  if(uartHandle->Instance==USART1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a41      	ldr	r2, [pc, #260]	; (80052b8 <HAL_UART_MspInit+0x130>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d17b      	bne.n	80052b0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051b8:	f04f 0201 	mov.w	r2, #1
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80051c4:	2318      	movs	r3, #24
 80051c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	4618      	mov	r0, r3
 80051d0:	f009 fc74 	bl	800eabc <HAL_RCCEx_PeriphCLKConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80051da:	f7fe fb45 	bl	8003868 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_UART_MspInit+0x134>)
 80051e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051e4:	4a35      	ldr	r2, [pc, #212]	; (80052bc <HAL_UART_MspInit+0x134>)
 80051e6:	f043 0310 	orr.w	r3, r3, #16
 80051ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051ee:	4b33      	ldr	r3, [pc, #204]	; (80052bc <HAL_UART_MspInit+0x134>)
 80051f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fc:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <HAL_UART_MspInit+0x134>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005202:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_UART_MspInit+0x134>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <HAL_UART_MspInit+0x134>)
 800520e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800521a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800521e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005222:	2302      	movs	r3, #2
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522e:	2300      	movs	r3, #0
 8005230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005234:	2307      	movs	r3, #7
 8005236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800523e:	4619      	mov	r1, r3
 8005240:	481f      	ldr	r0, [pc, #124]	; (80052c0 <HAL_UART_MspInit+0x138>)
 8005242:	f005 fe47 	bl	800aed4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005246:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005248:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <HAL_UART_MspInit+0x140>)
 800524a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 800524e:	222a      	movs	r2, #42	; 0x2a
 8005250:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 800525a:	2200      	movs	r2, #0
 800525c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005264:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005268:	2200      	movs	r2, #0
 800526a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800526c:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 800526e:	2200      	movs	r2, #0
 8005270:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005274:	2200      	movs	r2, #0
 8005276:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 800527a:	2200      	movs	r2, #0
 800527c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005280:	2200      	movs	r2, #0
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005284:	480f      	ldr	r0, [pc, #60]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005286:	f002 fcf5 	bl	8007c74 <HAL_DMA_Init>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005290:	f7fe faea 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 8005298:	67da      	str	r2, [r3, #124]	; 0x7c
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <HAL_UART_MspInit+0x13c>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80052a0:	2200      	movs	r2, #0
 80052a2:	2105      	movs	r1, #5
 80052a4:	2025      	movs	r0, #37	; 0x25
 80052a6:	f002 f8b7 	bl	8007418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052aa:	2025      	movs	r0, #37	; 0x25
 80052ac:	f002 f8ce 	bl	800744c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80052b0:	bf00      	nop
 80052b2:	37e8      	adds	r7, #232	; 0xe8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40011000 	.word	0x40011000
 80052bc:	58024400 	.word	0x58024400
 80052c0:	58020000 	.word	0x58020000
 80052c4:	24001ed0 	.word	0x24001ed0
 80052c8:	40020040 	.word	0x40020040

080052cc <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80052d6:	4bc2      	ldr	r3, [pc, #776]	; (80055e0 <voltage_monitor_init+0x314>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80052dc:	4bc0      	ldr	r3, [pc, #768]	; (80055e0 <voltage_monitor_init+0x314>)
 80052de:	2200      	movs	r2, #0
 80052e0:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80052e2:	4bbf      	ldr	r3, [pc, #764]	; (80055e0 <voltage_monitor_init+0x314>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80052e8:	4bbd      	ldr	r3, [pc, #756]	; (80055e0 <voltage_monitor_init+0x314>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052ee:	4bbc      	ldr	r3, [pc, #752]	; (80055e0 <voltage_monitor_init+0x314>)
 80052f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f4:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80052f6:	4bba      	ldr	r3, [pc, #744]	; (80055e0 <voltage_monitor_init+0x314>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80052fc:	4bb8      	ldr	r3, [pc, #736]	; (80055e0 <voltage_monitor_init+0x314>)
 80052fe:	2201      	movs	r2, #1
 8005300:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8005302:	4bb7      	ldr	r3, [pc, #732]	; (80055e0 <voltage_monitor_init+0x314>)
 8005304:	2200      	movs	r2, #0
 8005306:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005308:	4bb5      	ldr	r3, [pc, #724]	; (80055e0 <voltage_monitor_init+0x314>)
 800530a:	2201      	movs	r2, #1
 800530c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800530e:	4bb4      	ldr	r3, [pc, #720]	; (80055e0 <voltage_monitor_init+0x314>)
 8005310:	2200      	movs	r2, #0
 8005312:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005314:	4bb2      	ldr	r3, [pc, #712]	; (80055e0 <voltage_monitor_init+0x314>)
 8005316:	f242 7210 	movw	r2, #10000	; 0x2710
 800531a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 800531c:	4bb0      	ldr	r3, [pc, #704]	; (80055e0 <voltage_monitor_init+0x314>)
 800531e:	2200      	movs	r2, #0
 8005320:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8005322:	4baf      	ldr	r3, [pc, #700]	; (80055e0 <voltage_monitor_init+0x314>)
 8005324:	2202      	movs	r2, #2
 8005326:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005328:	4bad      	ldr	r3, [pc, #692]	; (80055e0 <voltage_monitor_init+0x314>)
 800532a:	2200      	movs	r2, #0
 800532c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800532e:	4bac      	ldr	r3, [pc, #688]	; (80055e0 <voltage_monitor_init+0x314>)
 8005330:	2201      	movs	r2, #1
 8005332:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005334:	4baa      	ldr	r3, [pc, #680]	; (80055e0 <voltage_monitor_init+0x314>)
 8005336:	2200      	movs	r2, #0
 8005338:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 800533a:	4ba9      	ldr	r3, [pc, #676]	; (80055e0 <voltage_monitor_init+0x314>)
 800533c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005340:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8005342:	4ba7      	ldr	r3, [pc, #668]	; (80055e0 <voltage_monitor_init+0x314>)
 8005344:	2200      	movs	r2, #0
 8005346:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005348:	4ba5      	ldr	r3, [pc, #660]	; (80055e0 <voltage_monitor_init+0x314>)
 800534a:	2203      	movs	r2, #3
 800534c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800534e:	4ba4      	ldr	r3, [pc, #656]	; (80055e0 <voltage_monitor_init+0x314>)
 8005350:	2200      	movs	r2, #0
 8005352:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005354:	4ba2      	ldr	r3, [pc, #648]	; (80055e0 <voltage_monitor_init+0x314>)
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 800535c:	4ba0      	ldr	r3, [pc, #640]	; (80055e0 <voltage_monitor_init+0x314>)
 800535e:	2200      	movs	r2, #0
 8005360:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005362:	4b9f      	ldr	r3, [pc, #636]	; (80055e0 <voltage_monitor_init+0x314>)
 8005364:	f242 7210 	movw	r2, #10000	; 0x2710
 8005368:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 800536a:	4b9d      	ldr	r3, [pc, #628]	; (80055e0 <voltage_monitor_init+0x314>)
 800536c:	2200      	movs	r2, #0
 800536e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005370:	4b9b      	ldr	r3, [pc, #620]	; (80055e0 <voltage_monitor_init+0x314>)
 8005372:	2204      	movs	r2, #4
 8005374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005378:	4b99      	ldr	r3, [pc, #612]	; (80055e0 <voltage_monitor_init+0x314>)
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005380:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <voltage_monitor_init+0x314>)
 8005382:	2201      	movs	r2, #1
 8005384:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005388:	4b95      	ldr	r3, [pc, #596]	; (80055e0 <voltage_monitor_init+0x314>)
 800538a:	2200      	movs	r2, #0
 800538c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800538e:	4b94      	ldr	r3, [pc, #592]	; (80055e0 <voltage_monitor_init+0x314>)
 8005390:	f242 7210 	movw	r2, #10000	; 0x2710
 8005394:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005396:	4b92      	ldr	r3, [pc, #584]	; (80055e0 <voltage_monitor_init+0x314>)
 8005398:	2200      	movs	r2, #0
 800539a:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800539c:	4b90      	ldr	r3, [pc, #576]	; (80055e0 <voltage_monitor_init+0x314>)
 800539e:	2205      	movs	r2, #5
 80053a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80053a4:	4b8e      	ldr	r3, [pc, #568]	; (80055e0 <voltage_monitor_init+0x314>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80053ac:	4b8c      	ldr	r3, [pc, #560]	; (80055e0 <voltage_monitor_init+0x314>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80053b4:	4b8a      	ldr	r3, [pc, #552]	; (80055e0 <voltage_monitor_init+0x314>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053ba:	4b89      	ldr	r3, [pc, #548]	; (80055e0 <voltage_monitor_init+0x314>)
 80053bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80053c0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80053c2:	4b87      	ldr	r3, [pc, #540]	; (80055e0 <voltage_monitor_init+0x314>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80053c8:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <voltage_monitor_init+0x314>)
 80053ca:	2206      	movs	r2, #6
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80053d0:	4b83      	ldr	r3, [pc, #524]	; (80055e0 <voltage_monitor_init+0x314>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80053d8:	4b81      	ldr	r3, [pc, #516]	; (80055e0 <voltage_monitor_init+0x314>)
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80053e0:	4b7f      	ldr	r3, [pc, #508]	; (80055e0 <voltage_monitor_init+0x314>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053e8:	4b7d      	ldr	r3, [pc, #500]	; (80055e0 <voltage_monitor_init+0x314>)
 80053ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80053f2:	4b7b      	ldr	r3, [pc, #492]	; (80055e0 <voltage_monitor_init+0x314>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80053fa:	4b79      	ldr	r3, [pc, #484]	; (80055e0 <voltage_monitor_init+0x314>)
 80053fc:	2207      	movs	r2, #7
 80053fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8005402:	4b77      	ldr	r3, [pc, #476]	; (80055e0 <voltage_monitor_init+0x314>)
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800540a:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <voltage_monitor_init+0x314>)
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8005412:	4b73      	ldr	r3, [pc, #460]	; (80055e0 <voltage_monitor_init+0x314>)
 8005414:	2200      	movs	r2, #0
 8005416:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800541a:	4b71      	ldr	r3, [pc, #452]	; (80055e0 <voltage_monitor_init+0x314>)
 800541c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005420:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005424:	4b6e      	ldr	r3, [pc, #440]	; (80055e0 <voltage_monitor_init+0x314>)
 8005426:	2200      	movs	r2, #0
 8005428:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 800542c:	4b6c      	ldr	r3, [pc, #432]	; (80055e0 <voltage_monitor_init+0x314>)
 800542e:	2208      	movs	r2, #8
 8005430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005434:	4b6a      	ldr	r3, [pc, #424]	; (80055e0 <voltage_monitor_init+0x314>)
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 800543c:	4b68      	ldr	r3, [pc, #416]	; (80055e0 <voltage_monitor_init+0x314>)
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005444:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <voltage_monitor_init+0x314>)
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 800544c:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <voltage_monitor_init+0x314>)
 800544e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8005452:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005456:	4b62      	ldr	r3, [pc, #392]	; (80055e0 <voltage_monitor_init+0x314>)
 8005458:	f640 3283 	movw	r2, #2947	; 0xb83
 800545c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005460:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <voltage_monitor_init+0x314>)
 8005462:	2209      	movs	r2, #9
 8005464:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005468:	4b5d      	ldr	r3, [pc, #372]	; (80055e0 <voltage_monitor_init+0x314>)
 800546a:	2200      	movs	r2, #0
 800546c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005470:	4b5b      	ldr	r3, [pc, #364]	; (80055e0 <voltage_monitor_init+0x314>)
 8005472:	2200      	movs	r2, #0
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <voltage_monitor_init+0x314>)
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005480:	4b57      	ldr	r3, [pc, #348]	; (80055e0 <voltage_monitor_init+0x314>)
 8005482:	f640 7245 	movw	r2, #3909	; 0xf45
 8005486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 800548a:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <voltage_monitor_init+0x314>)
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005492:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <voltage_monitor_init+0x314>)
 8005494:	220a      	movs	r2, #10
 8005496:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 800549a:	4b51      	ldr	r3, [pc, #324]	; (80055e0 <voltage_monitor_init+0x314>)
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 80054a2:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <voltage_monitor_init+0x314>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80054aa:	4b4d      	ldr	r3, [pc, #308]	; (80055e0 <voltage_monitor_init+0x314>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80054b2:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <voltage_monitor_init+0x314>)
 80054b4:	f640 7245 	movw	r2, #3909	; 0xf45
 80054b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3909;
 80054bc:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <voltage_monitor_init+0x314>)
 80054be:	f640 7245 	movw	r2, #3909	; 0xf45
 80054c2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
//	rail_monitor[RAIL_5v].min_voltage = 3537;

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80054c6:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <voltage_monitor_init+0x314>)
 80054c8:	220b      	movs	r2, #11
 80054ca:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80054ce:	4b44      	ldr	r3, [pc, #272]	; (80055e0 <voltage_monitor_init+0x314>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80054d6:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <voltage_monitor_init+0x314>)
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80054de:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <voltage_monitor_init+0x314>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80054e6:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <voltage_monitor_init+0x314>)
 80054e8:	f640 72fb 	movw	r2, #4091	; 0xffb
 80054ec:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80054f0:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <voltage_monitor_init+0x314>)
 80054f2:	f640 6276 	movw	r2, #3702	; 0xe76
 80054f6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <voltage_monitor_init+0x314>)
 80054fc:	220c      	movs	r2, #12
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8005502:	4b37      	ldr	r3, [pc, #220]	; (80055e0 <voltage_monitor_init+0x314>)
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800550a:	4b35      	ldr	r3, [pc, #212]	; (80055e0 <voltage_monitor_init+0x314>)
 800550c:	2200      	movs	r2, #0
 800550e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <voltage_monitor_init+0x314>)
 8005514:	2200      	movs	r2, #0
 8005516:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <voltage_monitor_init+0x314>)
 800551c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005520:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <voltage_monitor_init+0x314>)
 8005526:	2200      	movs	r2, #0
 8005528:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800552c:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <voltage_monitor_init+0x314>)
 800552e:	220d      	movs	r2, #13
 8005530:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005534:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <voltage_monitor_init+0x314>)
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 800553c:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <voltage_monitor_init+0x314>)
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005544:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <voltage_monitor_init+0x314>)
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <voltage_monitor_init+0x314>)
 800554e:	f640 7238 	movw	r2, #3896	; 0xf38
 8005552:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <voltage_monitor_init+0x314>)
 8005558:	f640 52c5 	movw	r2, #3525	; 0xdc5
 800555c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <voltage_monitor_init+0x314>)
 8005562:	220e      	movs	r2, #14
 8005564:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <voltage_monitor_init+0x314>)
 800556a:	2200      	movs	r2, #0
 800556c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <voltage_monitor_init+0x314>)
 8005572:	2200      	movs	r2, #0
 8005574:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <voltage_monitor_init+0x314>)
 800557a:	2200      	movs	r2, #0
 800557c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005580:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <voltage_monitor_init+0x314>)
 8005582:	f640 7245 	movw	r2, #3909	; 0xf45
 8005586:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <voltage_monitor_init+0x314>)
 800558c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005590:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <voltage_monitor_init+0x314>)
 8005596:	220f      	movs	r2, #15
 8005598:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <voltage_monitor_init+0x314>)
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <voltage_monitor_init+0x314>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <voltage_monitor_init+0x314>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <voltage_monitor_init+0x314>)
 80055b6:	f241 0264 	movw	r2, #4196	; 0x1064
 80055ba:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <voltage_monitor_init+0x314>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <voltage_monitor_init+0x314>)
 80055c8:	2210      	movs	r2, #16
 80055ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80055ce:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <voltage_monitor_init+0x314>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80055d6:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <voltage_monitor_init+0x314>)
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80055de:	e001      	b.n	80055e4 <voltage_monitor_init+0x318>
 80055e0:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 80055e4:	4b17      	ldr	r3, [pc, #92]	; (8005644 <voltage_monitor_init+0x378>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80055ec:	4b15      	ldr	r3, [pc, #84]	; (8005644 <voltage_monitor_init+0x378>)
 80055ee:	f640 5208 	movw	r2, #3336	; 0xd08
 80055f2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <voltage_monitor_init+0x378>)
 80055f8:	f640 32ca 	movw	r2, #3018	; 0xbca
 80055fc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005600:	4b10      	ldr	r3, [pc, #64]	; (8005644 <voltage_monitor_init+0x378>)
 8005602:	2211      	movs	r2, #17
 8005604:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005608:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <voltage_monitor_init+0x378>)
 800560a:	2200      	movs	r2, #0
 800560c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <voltage_monitor_init+0x378>)
 8005612:	2201      	movs	r2, #1
 8005614:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <voltage_monitor_init+0x378>)
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005620:	4b08      	ldr	r3, [pc, #32]	; (8005644 <voltage_monitor_init+0x378>)
 8005622:	f242 7210 	movw	r2, #10000	; 0x2710
 8005626:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <voltage_monitor_init+0x378>)
 800562c:	2200      	movs	r2, #0
 800562e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	71fb      	strb	r3, [r7, #7]

	return status;
 8005636:	79fb      	ldrb	r3, [r7, #7]
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	24001f48 	.word	0x24001f48

08005648 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	460a      	mov	r2, r1
 8005652:	71fb      	strb	r3, [r7, #7]
 8005654:	4613      	mov	r3, r2
 8005656:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 800565c:	79fa      	ldrb	r2, [r7, #7]
 800565e:	4909      	ldr	r1, [pc, #36]	; (8005684 <set_rail_monitor_enable+0x3c>)
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	440b      	add	r3, r1
 800566a:	3302      	adds	r3, #2
 800566c:	79ba      	ldrb	r2, [r7, #6]
 800566e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]

	return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	24001f48 	.word	0x24001f48

08005688 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005694:	463b      	mov	r3, r7
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fc34 	bl	8003f04 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800569c:	f107 0310 	add.w	r3, r7, #16
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fc5f 	bl	8003f64 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fcac 	bl	8004008 <sample_hk_adc3>
 80056b0:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 80056b2:	4b25      	ldr	r3, [pc, #148]	; (8005748 <set_rail_monitor+0xc0>)
 80056b4:	809a      	strh	r2, [r3, #4]
 80056b6:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 80056b8:	4b23      	ldr	r3, [pc, #140]	; (8005748 <set_rail_monitor+0xc0>)
 80056ba:	81da      	strh	r2, [r3, #14]
 80056bc:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <set_rail_monitor+0xc0>)
 80056c0:	831a      	strh	r2, [r3, #24]
 80056c2:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80056c4:	4b20      	ldr	r3, [pc, #128]	; (8005748 <set_rail_monitor+0xc0>)
 80056c6:	845a      	strh	r2, [r3, #34]	; 0x22
 80056c8:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80056ca:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <set_rail_monitor+0xc0>)
 80056cc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80056ce:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <set_rail_monitor+0xc0>)
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d4:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <set_rail_monitor+0xc0>)
 80056d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80056dc:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80056de:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <set_rail_monitor+0xc0>)
 80056e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80056e4:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <set_rail_monitor+0xc0>)
 80056e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80056ec:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <set_rail_monitor+0xc0>)
 80056f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80056f4:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <set_rail_monitor+0xc0>)
 80056f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80056fc:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <set_rail_monitor+0xc0>)
 8005700:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005704:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <set_rail_monitor+0xc0>)
 8005708:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800570c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <set_rail_monitor+0xc0>)
 8005710:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005714:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <set_rail_monitor+0xc0>)
 8005718:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 800571c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <set_rail_monitor+0xc0>)
 8005720:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005724:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <set_rail_monitor+0xc0>)
 8005728:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800572c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <set_rail_monitor+0xc0>)
 8005730:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 800573a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	24001f48 	.word	0x24001f48

0800574c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005750:	4b02      	ldr	r3, [pc, #8]	; (800575c <get_rail_monitor+0x10>)
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	24001f48 	.word	0x24001f48

08005760 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800576e:	89fb      	ldrh	r3, [r7, #14]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	db05      	blt.n	8005782 <in_range+0x22>
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	dc01      	bgt.n	8005782 <in_range+0x22>
		return 1;
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <in_range+0x24>
	}
	return 0;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <monitor_rails>:


void monitor_rails() {
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	e062      	b.n	8005862 <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 800579c:	4935      	ldr	r1, [pc, #212]	; (8005874 <monitor_rails+0xe4>)
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	440b      	add	r3, r1
 80057aa:	3302      	adds	r3, #2
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d054      	beq.n	800585c <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 80057b2:	4930      	ldr	r1, [pc, #192]	; (8005874 <monitor_rails+0xe4>)
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	440b      	add	r3, r1
 80057c0:	3304      	adds	r3, #4
 80057c2:	8818      	ldrh	r0, [r3, #0]
 80057c4:	492b      	ldr	r1, [pc, #172]	; (8005874 <monitor_rails+0xe4>)
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	440b      	add	r3, r1
 80057d2:	3308      	adds	r3, #8
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	461c      	mov	r4, r3
 80057d8:	4926      	ldr	r1, [pc, #152]	; (8005874 <monitor_rails+0xe4>)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	440b      	add	r3, r1
 80057e6:	3306      	adds	r3, #6
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	4621      	mov	r1, r4
 80057ee:	f7ff ffb7 	bl	8005760 <in_range>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d131      	bne.n	800585c <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80057f8:	491e      	ldr	r1, [pc, #120]	; (8005874 <monitor_rails+0xe4>)
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	440b      	add	r3, r1
 8005806:	3301      	adds	r3, #1
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	b2d8      	uxtb	r0, r3
 800580e:	4919      	ldr	r1, [pc, #100]	; (8005874 <monitor_rails+0xe4>)
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	440b      	add	r3, r1
 800581c:	3301      	adds	r3, #1
 800581e:	4602      	mov	r2, r0
 8005820:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005822:	4914      	ldr	r1, [pc, #80]	; (8005874 <monitor_rails+0xe4>)
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	440b      	add	r3, r1
 8005830:	3301      	adds	r3, #1
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d111      	bne.n	800585c <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005838:	490e      	ldr	r1, [pc, #56]	; (8005874 <monitor_rails+0xe4>)
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	440b      	add	r3, r1
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f815 	bl	8005878 <get_rail_name_error_detail>
 800584e:	4603      	mov	r3, r0
 8005850:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8005852:	2300      	movs	r3, #0
 8005854:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005856:	6838      	ldr	r0, [r7, #0]
 8005858:	f7fc fb6a 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3301      	adds	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b11      	cmp	r3, #17
 8005866:	dd99      	ble.n	800579c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bd90      	pop	{r4, r7, pc}
 8005872:	bf00      	nop
 8005874:	24001f48 	.word	0x24001f48

08005878 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	2b11      	cmp	r3, #17
 8005886:	d84b      	bhi.n	8005920 <get_rail_name_error_detail+0xa8>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <get_rail_name_error_detail+0x18>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058e5 	.word	0x080058e5
 80058a0:	080058e9 	.word	0x080058e9
 80058a4:	080058ed 	.word	0x080058ed
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	080058fd 	.word	0x080058fd
 80058b8:	08005901 	.word	0x08005901
 80058bc:	08005905 	.word	0x08005905
 80058c0:	08005909 	.word	0x08005909
 80058c4:	0800590d 	.word	0x0800590d
 80058c8:	08005911 	.word	0x08005911
 80058cc:	08005915 	.word	0x08005915
 80058d0:	08005919 	.word	0x08005919
 80058d4:	0800591d 	.word	0x0800591d
	case RAIL_vsense:
		return ED_vsense;
 80058d8:	2306      	movs	r3, #6
 80058da:	e022      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80058dc:	2307      	movs	r3, #7
 80058de:	e020      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80058e0:	2308      	movs	r3, #8
 80058e2:	e01e      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80058e4:	2309      	movs	r3, #9
 80058e6:	e01c      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80058e8:	230a      	movs	r3, #10
 80058ea:	e01a      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80058ec:	230b      	movs	r3, #11
 80058ee:	e018      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80058f0:	230c      	movs	r3, #12
 80058f2:	e016      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80058f4:	230d      	movs	r3, #13
 80058f6:	e014      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80058f8:	230e      	movs	r3, #14
 80058fa:	e012      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80058fc:	230f      	movs	r3, #15
 80058fe:	e010      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005900:	2310      	movs	r3, #16
 8005902:	e00e      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005904:	2311      	movs	r3, #17
 8005906:	e00c      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005908:	2312      	movs	r3, #18
 800590a:	e00a      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 800590c:	2313      	movs	r3, #19
 800590e:	e008      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005910:	2314      	movs	r3, #20
 8005912:	e006      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005914:	2315      	movs	r3, #21
 8005916:	e004      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005918:	2316      	movs	r3, #22
 800591a:	e002      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 800591c:	2317      	movs	r3, #23
 800591e:	e000      	b.n	8005922 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005920:	231a      	movs	r3, #26
	}
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005934:	f7fe fff0 	bl	8004918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005938:	480c      	ldr	r0, [pc, #48]	; (800596c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800593a:	490d      	ldr	r1, [pc, #52]	; (8005970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800593c:	4a0d      	ldr	r2, [pc, #52]	; (8005974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800593e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005940:	e002      	b.n	8005948 <LoopCopyDataInit>

08005942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005946:	3304      	adds	r3, #4

08005948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800594a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800594c:	d3f9      	bcc.n	8005942 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005950:	4c0a      	ldr	r4, [pc, #40]	; (800597c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005954:	e001      	b.n	800595a <LoopFillZerobss>

08005956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005958:	3204      	adds	r2, #4

0800595a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800595a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800595c:	d3fb      	bcc.n	8005956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800595e:	f014 fabb 	bl	8019ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005962:	f7fd fd99 	bl	8003498 <main>
  bx  lr
 8005966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005968:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800596c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005970:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8005974:	0801ae08 	.word	0x0801ae08
  ldr r2, =_sbss
 8005978:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 800597c:	2400697c 	.word	0x2400697c

08005980 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005980:	e7fe      	b.n	8005980 <ADC3_IRQHandler>
	...

08005984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800598a:	2003      	movs	r0, #3
 800598c:	f001 fd39 	bl	8007402 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005990:	f008 fe7c 	bl	800e68c <HAL_RCC_GetSysClockFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <HAL_Init+0x68>)
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4913      	ldr	r1, [pc, #76]	; (80059f0 <HAL_Init+0x6c>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <HAL_Init+0x68>)
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	4a0e      	ldr	r2, [pc, #56]	; (80059f0 <HAL_Init+0x6c>)
 80059b8:	5cd3      	ldrb	r3, [r2, r3]
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
 80059c4:	4a0b      	ldr	r2, [pc, #44]	; (80059f4 <HAL_Init+0x70>)
 80059c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c8:	4a0b      	ldr	r2, [pc, #44]	; (80059f8 <HAL_Init+0x74>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ce:	2005      	movs	r0, #5
 80059d0:	f7fe fd8c 	bl	80044ec <HAL_InitTick>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e002      	b.n	80059e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059de:	f7fe fd67 	bl	80044b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	58024400 	.word	0x58024400
 80059f0:	0801ad54 	.word	0x0801ad54
 80059f4:	240000c0 	.word	0x240000c0
 80059f8:	240000bc 	.word	0x240000bc

080059fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_IncTick+0x20>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_IncTick+0x24>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <HAL_IncTick+0x24>)
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	240000c8 	.word	0x240000c8
 8005a20:	24001ffc 	.word	0x24001ffc

08005a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return uwTick;
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <HAL_GetTick+0x14>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	24001ffc 	.word	0x24001ffc

08005a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005a40:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <HAL_GetREVID+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	0c1b      	lsrs	r3, r3, #16
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	5c001000 	.word	0x5c001000

08005a54 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	401a      	ands	r2, r3
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	604b      	str	r3, [r1, #4]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	58000400 	.word	0x58000400

08005a80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3360      	adds	r3, #96	; 0x60
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	431a      	orrs	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	611a      	str	r2, [r3, #16]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3360      	adds	r3, #96	; 0x60
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	601a      	str	r2, [r3, #0]
  }
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3330      	adds	r3, #48	; 0x30
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	4413      	add	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	211f      	movs	r1, #31
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	401a      	ands	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0e9b      	lsrs	r3, r3, #26
 8005bee:	f003 011f 	and.w	r1, r3, #31
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f023 0203 	bic.w	r2, r3, #3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3314      	adds	r3, #20
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0e5b      	lsrs	r3, r3, #25
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	4413      	add	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	0d1b      	lsrs	r3, r3, #20
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2107      	movs	r1, #7
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	401a      	ands	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	0d1b      	lsrs	r3, r3, #20
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0318 	and.w	r3, r3, #24
 8005cae:	4908      	ldr	r1, [pc, #32]	; (8005cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005cb0:	40d9      	lsrs	r1, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	000fffff 	.word	0x000fffff

08005cd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6093      	str	r3, [r2, #8]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	5fffffc0 	.word	0x5fffffc0

08005d14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d28:	d101      	bne.n	8005d2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <LL_ADC_EnableInternalRegulator+0x24>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	6fffffc0 	.word	0x6fffffc0

08005d64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d78:	d101      	bne.n	8005d7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <LL_ADC_Enable+0x24>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	f043 0201 	orr.w	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	7fffffc0 	.word	0x7fffffc0

08005db4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <LL_ADC_Disable+0x24>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	f043 0202 	orr.w	r2, r3, #2
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	7fffffc0 	.word	0x7fffffc0

08005ddc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <LL_ADC_IsEnabled+0x18>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <LL_ADC_IsEnabled+0x1a>
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d101      	bne.n	8005e1a <LL_ADC_IsDisableOngoing+0x18>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <LL_ADC_IsDisableOngoing+0x1a>
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <LL_ADC_REG_StartConversion+0x24>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	7fffffc0 	.word	0x7fffffc0

08005e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d101      	bne.n	8005e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d101      	bne.n	8005e8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e18f      	b.n	80061d6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fa fd41 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff ff19 	bl	8005d14 <LL_ADC_IsDeepPowerDownEnabled>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff feff 	bl	8005cf0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff34 	bl	8005d64 <LL_ADC_IsInternalRegulatorEnabled>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d114      	bne.n	8005f2c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff ff18 	bl	8005d3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f0c:	4b87      	ldr	r3, [pc, #540]	; (800612c <HAL_ADC_Init+0x290>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	099b      	lsrs	r3, r3, #6
 8005f12:	4a87      	ldr	r2, [pc, #540]	; (8006130 <HAL_ADC_Init+0x294>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f1e:	e002      	b.n	8005f26 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f9      	bne.n	8005f20 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ff17 	bl	8005d64 <LL_ADC_IsInternalRegulatorEnabled>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10d      	bne.n	8005f58 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	f043 0210 	orr.w	r2, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f043 0201 	orr.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ff77 	bl	8005e50 <LL_ADC_REG_IsConversionOngoing>
 8005f62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8129 	bne.w	80061c4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8125 	bne.w	80061c4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f82:	f043 0202 	orr.w	r2, r3, #2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff ff24 	bl	8005ddc <LL_ADC_IsEnabled>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d136      	bne.n	8006008 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a65      	ldr	r2, [pc, #404]	; (8006134 <HAL_ADC_Init+0x298>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_ADC_Init+0x112>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a63      	ldr	r2, [pc, #396]	; (8006138 <HAL_ADC_Init+0x29c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10e      	bne.n	8005fcc <HAL_ADC_Init+0x130>
 8005fae:	4861      	ldr	r0, [pc, #388]	; (8006134 <HAL_ADC_Init+0x298>)
 8005fb0:	f7ff ff14 	bl	8005ddc <LL_ADC_IsEnabled>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4860      	ldr	r0, [pc, #384]	; (8006138 <HAL_ADC_Init+0x29c>)
 8005fb8:	f7ff ff10 	bl	8005ddc <LL_ADC_IsEnabled>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4323      	orrs	r3, r4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e008      	b.n	8005fde <HAL_ADC_Init+0x142>
 8005fcc:	485b      	ldr	r0, [pc, #364]	; (800613c <HAL_ADC_Init+0x2a0>)
 8005fce:	f7ff ff05 	bl	8005ddc <LL_ADC_IsEnabled>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d012      	beq.n	8006008 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a53      	ldr	r2, [pc, #332]	; (8006134 <HAL_ADC_Init+0x298>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_ADC_Init+0x15a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a51      	ldr	r2, [pc, #324]	; (8006138 <HAL_ADC_Init+0x29c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_ADC_Init+0x15e>
 8005ff6:	4a52      	ldr	r2, [pc, #328]	; (8006140 <HAL_ADC_Init+0x2a4>)
 8005ff8:	e000      	b.n	8005ffc <HAL_ADC_Init+0x160>
 8005ffa:	4a52      	ldr	r2, [pc, #328]	; (8006144 <HAL_ADC_Init+0x2a8>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7ff fd3c 	bl	8005a80 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006008:	f7ff fd18 	bl	8005a3c <HAL_GetREVID>
 800600c:	4603      	mov	r3, r0
 800600e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006012:	4293      	cmp	r3, r2
 8006014:	d914      	bls.n	8006040 <HAL_ADC_Init+0x1a4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b10      	cmp	r3, #16
 800601c:	d110      	bne.n	8006040 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7d5b      	ldrb	r3, [r3, #21]
 8006022:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006028:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800602e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7f1b      	ldrb	r3, [r3, #28]
 8006034:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006036:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006038:	f043 030c 	orr.w	r3, r3, #12
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e00d      	b.n	800605c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7d5b      	ldrb	r3, [r3, #21]
 8006044:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800604a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006050:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7f1b      	ldrb	r3, [r3, #28]
 8006056:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7f1b      	ldrb	r3, [r3, #28]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d106      	bne.n	8006072 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	3b01      	subs	r3, #1
 800606a:	045b      	lsls	r3, r3, #17
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <HAL_ADC_Init+0x2ac>)
 8006096:	4013      	ands	r3, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	69b9      	ldr	r1, [r7, #24]
 800609e:	430b      	orrs	r3, r1
 80060a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fed2 	bl	8005e50 <LL_ADC_REG_IsConversionOngoing>
 80060ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fedf 	bl	8005e76 <LL_ADC_INJ_IsConversionOngoing>
 80060b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d15f      	bne.n	8006180 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d15c      	bne.n	8006180 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7d1b      	ldrb	r3, [r3, #20]
 80060ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	4b1c      	ldr	r3, [pc, #112]	; (800614c <HAL_ADC_Init+0x2b0>)
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	430b      	orrs	r3, r1
 80060e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d130      	bne.n	8006154 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <HAL_ADC_Init+0x2b4>)
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006106:	3a01      	subs	r2, #1
 8006108:	0411      	lsls	r1, r2, #16
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006114:	4311      	orrs	r1, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800611a:	430a      	orrs	r2, r1
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	611a      	str	r2, [r3, #16]
 8006128:	e01c      	b.n	8006164 <HAL_ADC_Init+0x2c8>
 800612a:	bf00      	nop
 800612c:	240000bc 	.word	0x240000bc
 8006130:	053e2d63 	.word	0x053e2d63
 8006134:	40022000 	.word	0x40022000
 8006138:	40022100 	.word	0x40022100
 800613c:	58026000 	.word	0x58026000
 8006140:	40022300 	.word	0x40022300
 8006144:	58026300 	.word	0x58026300
 8006148:	fff0c003 	.word	0xfff0c003
 800614c:	ffffbffc 	.word	0xffffbffc
 8006150:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fdec 	bl	8006d58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d10c      	bne.n	80061a2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f023 010f 	bic.w	r1, r3, #15
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	1e5a      	subs	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
 80061a0:	e007      	b.n	80061b2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 020f 	bic.w	r2, r2, #15
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	f043 0201 	orr.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
 80061c2:	e007      	b.n	80061d4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f043 0210 	orr.w	r2, r3, #16
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3724      	adds	r7, #36	; 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}
 80061de:	bf00      	nop

080061e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a55      	ldr	r2, [pc, #340]	; (8006348 <HAL_ADC_Start_DMA+0x168>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_ADC_Start_DMA+0x20>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a54      	ldr	r2, [pc, #336]	; (800634c <HAL_ADC_Start_DMA+0x16c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_ADC_Start_DMA+0x24>
 8006200:	4b53      	ldr	r3, [pc, #332]	; (8006350 <HAL_ADC_Start_DMA+0x170>)
 8006202:	e000      	b.n	8006206 <HAL_ADC_Start_DMA+0x26>
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_ADC_Start_DMA+0x174>)
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fd64 	bl	8005cd4 <LL_ADC_GetMultimode>
 800620c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fe1c 	bl	8005e50 <LL_ADC_REG_IsConversionOngoing>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	f040 808c 	bne.w	8006338 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_ADC_Start_DMA+0x4e>
 800622a:	2302      	movs	r3, #2
 800622c:	e087      	b.n	800633e <HAL_ADC_Start_DMA+0x15e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b05      	cmp	r3, #5
 8006240:	d002      	beq.n	8006248 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b09      	cmp	r3, #9
 8006246:	d170      	bne.n	800632a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fc07 	bl	8006a5c <ADC_Enable>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d163      	bne.n	8006320 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625c:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <HAL_ADC_Start_DMA+0x178>)
 800625e:	4013      	ands	r3, r2
 8006260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	; (800634c <HAL_ADC_Start_DMA+0x16c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d002      	beq.n	8006278 <HAL_ADC_Start_DMA+0x98>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	e000      	b.n	800627a <HAL_ADC_Start_DMA+0x9a>
 8006278:	4b33      	ldr	r3, [pc, #204]	; (8006348 <HAL_ADC_Start_DMA+0x168>)
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	4293      	cmp	r3, r2
 8006280:	d002      	beq.n	8006288 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	f023 0206 	bic.w	r2, r3, #6
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	659a      	str	r2, [r3, #88]	; 0x58
 80062ac:	e002      	b.n	80062b4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b8:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_ADC_Start_DMA+0x17c>)
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c0:	4a27      	ldr	r2, [pc, #156]	; (8006360 <HAL_ADC_Start_DMA+0x180>)
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c8:	4a26      	ldr	r2, [pc, #152]	; (8006364 <HAL_ADC_Start_DMA+0x184>)
 80062ca:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	221c      	movs	r2, #28
 80062d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0210 	orr.w	r2, r2, #16
 80062ea:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7ff fc89 	bl	8005c0e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3340      	adds	r3, #64	; 0x40
 8006306:	4619      	mov	r1, r3
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f002 f80e 	bl	800832c <HAL_DMA_Start_IT>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fd85 	bl	8005e28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800631e:	e00d      	b.n	800633c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006328:	e008      	b.n	800633c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006336:	e001      	b.n	800633c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40022000 	.word	0x40022000
 800634c:	40022100 	.word	0x40022100
 8006350:	40022300 	.word	0x40022300
 8006354:	58026300 	.word	0x58026300
 8006358:	fffff0fe 	.word	0xfffff0fe
 800635c:	08006c2f 	.word	0x08006c2f
 8006360:	08006d07 	.word	0x08006d07
 8006364:	08006d23 	.word	0x08006d23

08006368 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b0a1      	sub	sp, #132	; 0x84
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_ADC_ConfigChannel+0x1b0>)
 80063be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x2a>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e32e      	b.n	8006a2c <HAL_ADC_ConfigChannel+0x688>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fd38 	bl	8005e50 <LL_ADC_REG_IsConversionOngoing>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8313 	bne.w	8006a0e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	db2c      	blt.n	800644a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <HAL_ADC_ConfigChannel+0x6a>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0e9b      	lsrs	r3, r3, #26
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2201      	movs	r2, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	e016      	b.n	800643c <HAL_ADC_ConfigChannel+0x98>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006416:	fa93 f3a3 	rbit	r3, r3
 800641a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800641c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006426:	2320      	movs	r3, #32
 8006428:	e003      	b.n	8006432 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800642a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800642c:	fab3 f383 	clz	r3, r3
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2201      	movs	r2, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	69d1      	ldr	r1, [r2, #28]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	430b      	orrs	r3, r1
 8006448:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6859      	ldr	r1, [r3, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7ff fbad 	bl	8005bb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fcf5 	bl	8005e50 <LL_ADC_REG_IsConversionOngoing>
 8006466:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fd02 	bl	8005e76 <LL_ADC_INJ_IsConversionOngoing>
 8006472:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 80b8 	bne.w	80065ec <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800647c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 80b4 	bne.w	80065ec <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	461a      	mov	r2, r3
 8006492:	f7ff fbcf 	bl	8005c34 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006496:	4b30      	ldr	r3, [pc, #192]	; (8006558 <HAL_ADC_ConfigChannel+0x1b4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a2:	d10b      	bne.n	80064bc <HAL_ADC_ConfigChannel+0x118>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	e01d      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x154>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x13e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	e00a      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x154>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d02c      	beq.n	800655c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6919      	ldr	r1, [r3, #16]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006510:	f7ff faea 	bl	8005ae8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6919      	ldr	r1, [r3, #16]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	7e5b      	ldrb	r3, [r3, #25]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d102      	bne.n	800652a <HAL_ADC_ConfigChannel+0x186>
 8006524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006528:	e000      	b.n	800652c <HAL_ADC_ConfigChannel+0x188>
 800652a:	2300      	movs	r3, #0
 800652c:	461a      	mov	r2, r3
 800652e:	f7ff fb14 	bl	8005b5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6919      	ldr	r1, [r3, #16]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	7e1b      	ldrb	r3, [r3, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d102      	bne.n	8006548 <HAL_ADC_ConfigChannel+0x1a4>
 8006542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006546:	e000      	b.n	800654a <HAL_ADC_ConfigChannel+0x1a6>
 8006548:	2300      	movs	r3, #0
 800654a:	461a      	mov	r2, r3
 800654c:	f7ff faec 	bl	8005b28 <LL_ADC_SetDataRightShift>
 8006550:	e04c      	b.n	80065ec <HAL_ADC_ConfigChannel+0x248>
 8006552:	bf00      	nop
 8006554:	47ff0000 	.word	0x47ff0000
 8006558:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	069b      	lsls	r3, r3, #26
 800656c:	429a      	cmp	r2, r3
 800656e:	d107      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800657e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	069b      	lsls	r3, r3, #26
 8006590:	429a      	cmp	r2, r3
 8006592:	d107      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	069b      	lsls	r3, r3, #26
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d107      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	069b      	lsls	r3, r3, #26
 80065d8:	429a      	cmp	r2, r3
 80065da:	d107      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fbf3 	bl	8005ddc <LL_ADC_IsEnabled>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 8211 	bne.w	8006a20 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6819      	ldr	r1, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	461a      	mov	r2, r3
 800660c:	f7ff fb3e 	bl	8005c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4aa1      	ldr	r2, [pc, #644]	; (800689c <HAL_ADC_ConfigChannel+0x4f8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	f040 812e 	bne.w	8006878 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x2a0>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	0e9b      	lsrs	r3, r3, #26
 8006632:	3301      	adds	r3, #1
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2b09      	cmp	r3, #9
 800663a:	bf94      	ite	ls
 800663c:	2301      	movls	r3, #1
 800663e:	2300      	movhi	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e019      	b.n	8006678 <HAL_ADC_ConfigChannel+0x2d4>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664c:	fa93 f3a3 	rbit	r3, r3
 8006650:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800665c:	2320      	movs	r3, #32
 800665e:	e003      	b.n	8006668 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006662:	fab3 f383 	clz	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3301      	adds	r3, #1
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b09      	cmp	r3, #9
 8006670:	bf94      	ite	ls
 8006672:	2301      	movls	r3, #1
 8006674:	2300      	movhi	r3, #0
 8006676:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006678:	2b00      	cmp	r3, #0
 800667a:	d079      	beq.n	8006770 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006684:	2b00      	cmp	r3, #0
 8006686:	d107      	bne.n	8006698 <HAL_ADC_ConfigChannel+0x2f4>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	0e9b      	lsrs	r3, r3, #26
 800668e:	3301      	adds	r3, #1
 8006690:	069b      	lsls	r3, r3, #26
 8006692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006696:	e015      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x320>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	fa93 f3a3 	rbit	r3, r3
 80066a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80066a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80066aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80066b0:	2320      	movs	r3, #32
 80066b2:	e003      	b.n	80066bc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80066b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b6:	fab3 f383 	clz	r3, r3
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	3301      	adds	r3, #1
 80066be:	069b      	lsls	r3, r3, #26
 80066c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x340>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	0e9b      	lsrs	r3, r3, #26
 80066d6:	3301      	adds	r3, #1
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2101      	movs	r1, #1
 80066de:	fa01 f303 	lsl.w	r3, r1, r3
 80066e2:	e017      	b.n	8006714 <HAL_ADC_ConfigChannel+0x370>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ec:	fa93 f3a3 	rbit	r3, r3
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80066f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80066fc:	2320      	movs	r3, #32
 80066fe:	e003      	b.n	8006708 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006702:	fab3 f383 	clz	r3, r3
 8006706:	b2db      	uxtb	r3, r3
 8006708:	3301      	adds	r3, #1
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2101      	movs	r1, #1
 8006710:	fa01 f303 	lsl.w	r3, r1, r3
 8006714:	ea42 0103 	orr.w	r1, r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_ADC_ConfigChannel+0x396>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	0e9b      	lsrs	r3, r3, #26
 800672a:	3301      	adds	r3, #1
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	4613      	mov	r3, r2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4413      	add	r3, r2
 8006736:	051b      	lsls	r3, r3, #20
 8006738:	e018      	b.n	800676c <HAL_ADC_ConfigChannel+0x3c8>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	fa93 f3a3 	rbit	r3, r3
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006752:	2320      	movs	r3, #32
 8006754:	e003      	b.n	800675e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	fab3 f383 	clz	r3, r3
 800675c:	b2db      	uxtb	r3, r3
 800675e:	3301      	adds	r3, #1
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800676c:	430b      	orrs	r3, r1
 800676e:	e07e      	b.n	800686e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <HAL_ADC_ConfigChannel+0x3e8>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0e9b      	lsrs	r3, r3, #26
 8006782:	3301      	adds	r3, #1
 8006784:	069b      	lsls	r3, r3, #26
 8006786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800678a:	e015      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x414>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	fa93 f3a3 	rbit	r3, r3
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80067a4:	2320      	movs	r3, #32
 80067a6:	e003      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	fab3 f383 	clz	r3, r3
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	3301      	adds	r3, #1
 80067b2:	069b      	lsls	r3, r3, #26
 80067b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_ADC_ConfigChannel+0x434>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	0e9b      	lsrs	r3, r3, #26
 80067ca:	3301      	adds	r3, #1
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	e017      	b.n	8006808 <HAL_ADC_ConfigChannel+0x464>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	fa93 f3a3 	rbit	r3, r3
 80067e4:	61bb      	str	r3, [r7, #24]
  return result;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80067f0:	2320      	movs	r3, #32
 80067f2:	e003      	b.n	80067fc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	fab3 f383 	clz	r3, r3
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	3301      	adds	r3, #1
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2101      	movs	r1, #1
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	ea42 0103 	orr.w	r1, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10d      	bne.n	8006834 <HAL_ADC_ConfigChannel+0x490>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	0e9b      	lsrs	r3, r3, #26
 800681e:	3301      	adds	r3, #1
 8006820:	f003 021f 	and.w	r2, r3, #31
 8006824:	4613      	mov	r3, r2
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	4413      	add	r3, r2
 800682a:	3b1e      	subs	r3, #30
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006832:	e01b      	b.n	800686c <HAL_ADC_ConfigChannel+0x4c8>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	fa93 f3a3 	rbit	r3, r3
 8006840:	60fb      	str	r3, [r7, #12]
  return result;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800684c:	2320      	movs	r3, #32
 800684e:	e003      	b.n	8006858 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	fab3 f383 	clz	r3, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	3301      	adds	r3, #1
 800685a:	f003 021f 	and.w	r2, r3, #31
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	3b1e      	subs	r3, #30
 8006866:	051b      	lsls	r3, r3, #20
 8006868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800686c:	430b      	orrs	r3, r1
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	6892      	ldr	r2, [r2, #8]
 8006872:	4619      	mov	r1, r3
 8006874:	f7ff f9de 	bl	8005c34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f280 80cf 	bge.w	8006a20 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <HAL_ADC_ConfigChannel+0x4fc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_ADC_ConfigChannel+0x4f2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <HAL_ADC_ConfigChannel+0x500>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10a      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x508>
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <HAL_ADC_ConfigChannel+0x504>)
 8006898:	e009      	b.n	80068ae <HAL_ADC_ConfigChannel+0x50a>
 800689a:	bf00      	nop
 800689c:	47ff0000 	.word	0x47ff0000
 80068a0:	40022000 	.word	0x40022000
 80068a4:	40022100 	.word	0x40022100
 80068a8:	40022300 	.word	0x40022300
 80068ac:	4b61      	ldr	r3, [pc, #388]	; (8006a34 <HAL_ADC_ConfigChannel+0x690>)
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff f90c 	bl	8005acc <LL_ADC_GetCommonPathInternalCh>
 80068b4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a5f      	ldr	r2, [pc, #380]	; (8006a38 <HAL_ADC_ConfigChannel+0x694>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_ADC_ConfigChannel+0x526>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a5d      	ldr	r2, [pc, #372]	; (8006a3c <HAL_ADC_ConfigChannel+0x698>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10e      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x544>
 80068ca:	485b      	ldr	r0, [pc, #364]	; (8006a38 <HAL_ADC_ConfigChannel+0x694>)
 80068cc:	f7ff fa86 	bl	8005ddc <LL_ADC_IsEnabled>
 80068d0:	4604      	mov	r4, r0
 80068d2:	485a      	ldr	r0, [pc, #360]	; (8006a3c <HAL_ADC_ConfigChannel+0x698>)
 80068d4:	f7ff fa82 	bl	8005ddc <LL_ADC_IsEnabled>
 80068d8:	4603      	mov	r3, r0
 80068da:	4323      	orrs	r3, r4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e008      	b.n	80068fa <HAL_ADC_ConfigChannel+0x556>
 80068e8:	4855      	ldr	r0, [pc, #340]	; (8006a40 <HAL_ADC_ConfigChannel+0x69c>)
 80068ea:	f7ff fa77 	bl	8005ddc <LL_ADC_IsEnabled>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d07d      	beq.n	80069fa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a50      	ldr	r2, [pc, #320]	; (8006a44 <HAL_ADC_ConfigChannel+0x6a0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d130      	bne.n	800696a <HAL_ADC_ConfigChannel+0x5c6>
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12b      	bne.n	800696a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <HAL_ADC_ConfigChannel+0x69c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f040 8081 	bne.w	8006a20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a45      	ldr	r2, [pc, #276]	; (8006a38 <HAL_ADC_ConfigChannel+0x694>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_ADC_ConfigChannel+0x58e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a43      	ldr	r2, [pc, #268]	; (8006a3c <HAL_ADC_ConfigChannel+0x698>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_ADC_ConfigChannel+0x592>
 8006932:	4a45      	ldr	r2, [pc, #276]	; (8006a48 <HAL_ADC_ConfigChannel+0x6a4>)
 8006934:	e000      	b.n	8006938 <HAL_ADC_ConfigChannel+0x594>
 8006936:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <HAL_ADC_ConfigChannel+0x690>)
 8006938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7ff f8b0 	bl	8005aa6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006946:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <HAL_ADC_ConfigChannel+0x6a8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	4a40      	ldr	r2, [pc, #256]	; (8006a50 <HAL_ADC_ConfigChannel+0x6ac>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	099b      	lsrs	r3, r3, #6
 8006954:	3301      	adds	r3, #1
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800695a:	e002      	b.n	8006962 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3b01      	subs	r3, #1
 8006960:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f9      	bne.n	800695c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006968:	e05a      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a39      	ldr	r2, [pc, #228]	; (8006a54 <HAL_ADC_ConfigChannel+0x6b0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d11e      	bne.n	80069b2 <HAL_ADC_ConfigChannel+0x60e>
 8006974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d119      	bne.n	80069b2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2f      	ldr	r2, [pc, #188]	; (8006a40 <HAL_ADC_ConfigChannel+0x69c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d14b      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <HAL_ADC_ConfigChannel+0x694>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_ADC_ConfigChannel+0x5f8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <HAL_ADC_ConfigChannel+0x698>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d101      	bne.n	80069a0 <HAL_ADC_ConfigChannel+0x5fc>
 800699c:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <HAL_ADC_ConfigChannel+0x6a4>)
 800699e:	e000      	b.n	80069a2 <HAL_ADC_ConfigChannel+0x5fe>
 80069a0:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <HAL_ADC_ConfigChannel+0x690>)
 80069a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f7ff f87b 	bl	8005aa6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069b0:	e036      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <HAL_ADC_ConfigChannel+0x6b4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d131      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
 80069bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d12c      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <HAL_ADC_ConfigChannel+0x69c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d127      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <HAL_ADC_ConfigChannel+0x694>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_ADC_ConfigChannel+0x640>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <HAL_ADC_ConfigChannel+0x698>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_ADC_ConfigChannel+0x644>
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_ADC_ConfigChannel+0x6a4>)
 80069e6:	e000      	b.n	80069ea <HAL_ADC_ConfigChannel+0x646>
 80069e8:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <HAL_ADC_ConfigChannel+0x690>)
 80069ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7ff f857 	bl	8005aa6 <LL_ADC_SetCommonPathInternalCh>
 80069f8:	e012      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006a0c:	e008      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3784      	adds	r7, #132	; 0x84
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}
 8006a34:	58026300 	.word	0x58026300
 8006a38:	40022000 	.word	0x40022000
 8006a3c:	40022100 	.word	0x40022100
 8006a40:	58026000 	.word	0x58026000
 8006a44:	cb840000 	.word	0xcb840000
 8006a48:	40022300 	.word	0x40022300
 8006a4c:	240000bc 	.word	0x240000bc
 8006a50:	053e2d63 	.word	0x053e2d63
 8006a54:	c7520000 	.word	0xc7520000
 8006a58:	cfb80000 	.word	0xcfb80000

08006a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff f9b7 	bl	8005ddc <LL_ADC_IsEnabled>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d16e      	bne.n	8006b52 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b38      	ldr	r3, [pc, #224]	; (8006b5c <ADC_Enable+0x100>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f043 0210 	orr.w	r2, r3, #16
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a92:	f043 0201 	orr.w	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e05a      	b.n	8006b54 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f972 	bl	8005d8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006aa8:	f7fe ffbc 	bl	8005a24 <HAL_GetTick>
 8006aac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2b      	ldr	r2, [pc, #172]	; (8006b60 <ADC_Enable+0x104>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <ADC_Enable+0x66>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a29      	ldr	r2, [pc, #164]	; (8006b64 <ADC_Enable+0x108>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d101      	bne.n	8006ac6 <ADC_Enable+0x6a>
 8006ac2:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <ADC_Enable+0x10c>)
 8006ac4:	e000      	b.n	8006ac8 <ADC_Enable+0x6c>
 8006ac6:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <ADC_Enable+0x110>)
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff f903 	bl	8005cd4 <LL_ADC_GetMultimode>
 8006ace:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <ADC_Enable+0x108>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d002      	beq.n	8006ae0 <ADC_Enable+0x84>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	e000      	b.n	8006ae2 <ADC_Enable+0x86>
 8006ae0:	4b1f      	ldr	r3, [pc, #124]	; (8006b60 <ADC_Enable+0x104>)
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d02c      	beq.n	8006b44 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d130      	bne.n	8006b52 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006af0:	e028      	b.n	8006b44 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff f970 	bl	8005ddc <LL_ADC_IsEnabled>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff f940 	bl	8005d8c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b0c:	f7fe ff8a 	bl	8005a24 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d914      	bls.n	8006b44 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d00d      	beq.n	8006b44 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f043 0210 	orr.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b38:	f043 0201 	orr.w	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e007      	b.n	8006b54 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d1cf      	bne.n	8006af2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	8000003f 	.word	0x8000003f
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40022100 	.word	0x40022100
 8006b68:	40022300 	.word	0x40022300
 8006b6c:	58026300 	.word	0x58026300

08006b70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff f940 	bl	8005e02 <LL_ADC_IsDisableOngoing>
 8006b82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f927 	bl	8005ddc <LL_ADC_IsEnabled>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d047      	beq.n	8006c24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d144      	bne.n	8006c24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 030d 	and.w	r3, r3, #13
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d10c      	bne.n	8006bc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff f901 	bl	8005db4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bba:	f7fe ff33 	bl	8005a24 <HAL_GetTick>
 8006bbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bc0:	e029      	b.n	8006c16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f043 0210 	orr.w	r2, r3, #16
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	f043 0201 	orr.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e023      	b.n	8006c26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006bde:	f7fe ff21 	bl	8005a24 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d914      	bls.n	8006c16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00d      	beq.n	8006c16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f043 0210 	orr.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0a:	f043 0201 	orr.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e007      	b.n	8006c26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1dc      	bne.n	8006bde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d14b      	bne.n	8006ce0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d021      	beq.n	8006ca6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe ff92 	bl	8005b90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d032      	beq.n	8006cd8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d12b      	bne.n	8006cd8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11f      	bne.n	8006cd8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0201 	orr.w	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
 8006ca4:	e018      	b.n	8006cd8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d111      	bne.n	8006cd8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f043 0201 	orr.w	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff fb45 	bl	8006368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cde:	e00e      	b.n	8006cfe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fb4f 	bl	8006390 <HAL_ADC_ErrorCallback>
}
 8006cf2:	e004      	b.n	8006cfe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fb31 	bl	800637c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	f043 0204 	orr.w	r2, r3, #4
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fb21 	bl	8006390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a7a      	ldr	r2, [pc, #488]	; (8006f50 <ADC_ConfigureBoostMode+0x1f8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <ADC_ConfigureBoostMode+0x1c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a79      	ldr	r2, [pc, #484]	; (8006f54 <ADC_ConfigureBoostMode+0x1fc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d109      	bne.n	8006d88 <ADC_ConfigureBoostMode+0x30>
 8006d74:	4b78      	ldr	r3, [pc, #480]	; (8006f58 <ADC_ConfigureBoostMode+0x200>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e008      	b.n	8006d9a <ADC_ConfigureBoostMode+0x42>
 8006d88:	4b74      	ldr	r3, [pc, #464]	; (8006f5c <ADC_ConfigureBoostMode+0x204>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01c      	beq.n	8006dd8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d9e:	f007 fdef 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 8006da2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dac:	d010      	beq.n	8006dd0 <ADC_ConfigureBoostMode+0x78>
 8006dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db2:	d873      	bhi.n	8006e9c <ADC_ConfigureBoostMode+0x144>
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d002      	beq.n	8006dc0 <ADC_ConfigureBoostMode+0x68>
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dbe:	d16d      	bne.n	8006e9c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	60fb      	str	r3, [r7, #12]
        break;
 8006dce:	e068      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	60fb      	str	r3, [r7, #12]
        break;
 8006dd6:	e064      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006dd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ddc:	f04f 0100 	mov.w	r1, #0
 8006de0:	f009 f876 	bl	800fed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006de4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006dee:	d051      	beq.n	8006e94 <ADC_ConfigureBoostMode+0x13c>
 8006df0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006df4:	d854      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006df6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006dfa:	d047      	beq.n	8006e8c <ADC_ConfigureBoostMode+0x134>
 8006dfc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006e00:	d84e      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006e06:	d03d      	beq.n	8006e84 <ADC_ConfigureBoostMode+0x12c>
 8006e08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006e0c:	d848      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e12:	d033      	beq.n	8006e7c <ADC_ConfigureBoostMode+0x124>
 8006e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e18:	d842      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006e1e:	d029      	beq.n	8006e74 <ADC_ConfigureBoostMode+0x11c>
 8006e20:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006e24:	d83c      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e2a:	d01a      	beq.n	8006e62 <ADC_ConfigureBoostMode+0x10a>
 8006e2c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e30:	d836      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e36:	d014      	beq.n	8006e62 <ADC_ConfigureBoostMode+0x10a>
 8006e38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e3c:	d830      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e42:	d00e      	beq.n	8006e62 <ADC_ConfigureBoostMode+0x10a>
 8006e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e48:	d82a      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e4e:	d008      	beq.n	8006e62 <ADC_ConfigureBoostMode+0x10a>
 8006e50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e54:	d824      	bhi.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
 8006e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e5a:	d002      	beq.n	8006e62 <ADC_ConfigureBoostMode+0x10a>
 8006e5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e60:	d11e      	bne.n	8006ea0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	0c9b      	lsrs	r3, r3, #18
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	60fb      	str	r3, [r7, #12]
        break;
 8006e72:	e016      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	091b      	lsrs	r3, r3, #4
 8006e78:	60fb      	str	r3, [r7, #12]
        break;
 8006e7a:	e012      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	60fb      	str	r3, [r7, #12]
        break;
 8006e82:	e00e      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	60fb      	str	r3, [r7, #12]
        break;
 8006e8a:	e00a      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	09db      	lsrs	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
        break;
 8006e92:	e006      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	60fb      	str	r3, [r7, #12]
        break;
 8006e9a:	e002      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006ea0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006ea2:	f7fe fdcb 	bl	8005a3c <HAL_GetREVID>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d815      	bhi.n	8006edc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <ADC_ConfigureBoostMode+0x208>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d908      	bls.n	8006eca <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006ec8:	e03e      	b.n	8006f48 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed8:	609a      	str	r2, [r3, #8]
}
 8006eda:	e035      	b.n	8006f48 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <ADC_ConfigureBoostMode+0x20c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d808      	bhi.n	8006efc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ef8:	609a      	str	r2, [r3, #8]
}
 8006efa:	e025      	b.n	8006f48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a1a      	ldr	r2, [pc, #104]	; (8006f68 <ADC_ConfigureBoostMode+0x210>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d80a      	bhi.n	8006f1a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	e016      	b.n	8006f48 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <ADC_ConfigureBoostMode+0x214>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d80a      	bhi.n	8006f38 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f34:	609a      	str	r2, [r3, #8]
}
 8006f36:	e007      	b.n	8006f48 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006f46:	609a      	str	r2, [r3, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40022000 	.word	0x40022000
 8006f54:	40022100 	.word	0x40022100
 8006f58:	40022300 	.word	0x40022300
 8006f5c:	58026300 	.word	0x58026300
 8006f60:	01312d00 	.word	0x01312d00
 8006f64:	005f5e10 	.word	0x005f5e10
 8006f68:	00bebc20 	.word	0x00bebc20
 8006f6c:	017d7840 	.word	0x017d7840

08006f70 <LL_ADC_IsEnabled>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <LL_ADC_IsEnabled+0x18>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <LL_ADC_IsEnabled+0x1a>
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <LL_ADC_StartCalibration>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <LL_ADC_StartCalibration+0x38>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	3ffeffc0 	.word	0x3ffeffc0

08006fd4 <LL_ADC_IsCalibrationOnGoing>:
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe8:	d101      	bne.n	8006fee <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_ADC_REG_IsConversionOngoing>:
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b04      	cmp	r3, #4
 800700e:	d101      	bne.n	8007014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_ADCEx_Calibration_Start+0x1e>
 800703e:	2302      	movs	r3, #2
 8007040:	e04c      	b.n	80070dc <HAL_ADCEx_Calibration_Start+0xb8>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff fd90 	bl	8006b70 <ADC_Disable>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d135      	bne.n	80070c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007060:	4013      	ands	r3, r2
 8007062:	f043 0202 	orr.w	r2, r3, #2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff ff90 	bl	8006f98 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007078:	e014      	b.n	80070a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d30d      	bcc.n	80070a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f023 0312 	bic.w	r3, r3, #18
 8007090:	f043 0210 	orr.w	r2, r3, #16
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e01b      	b.n	80070dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff93 	bl	8006fd4 <LL_ADC_IsCalibrationOnGoing>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e2      	bne.n	800707a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f023 0303 	bic.w	r3, r3, #3
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	655a      	str	r2, [r3, #84]	; 0x54
 80070c4:	e005      	b.n	80070d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	f043 0210 	orr.w	r2, r3, #16
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	ffffeefd 	.word	0xffffeefd
 80070e8:	25c3f800 	.word	0x25c3f800

080070ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b09f      	sub	sp, #124	; 0x7c
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007106:	2302      	movs	r3, #2
 8007108:	e0be      	b.n	8007288 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007112:	2300      	movs	r3, #0
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007116:	2300      	movs	r3, #0
 8007118:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a5c      	ldr	r2, [pc, #368]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d102      	bne.n	800712a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007124:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007126:	60bb      	str	r3, [r7, #8]
 8007128:	e001      	b.n	800712e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	f043 0220 	orr.w	r2, r3, #32
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e09d      	b.n	8007288 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff ff54 	bl	8006ffc <LL_ADC_REG_IsConversionOngoing>
 8007154:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff ff4e 	bl	8006ffc <LL_ADC_REG_IsConversionOngoing>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d17f      	bne.n	8007266 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007168:	2b00      	cmp	r3, #0
 800716a:	d17c      	bne.n	8007266 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a47      	ldr	r2, [pc, #284]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a46      	ldr	r2, [pc, #280]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d101      	bne.n	8007184 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007180:	4b45      	ldr	r3, [pc, #276]	; (8007298 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007182:	e000      	b.n	8007186 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007184:	4b45      	ldr	r3, [pc, #276]	; (800729c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007186:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d039      	beq.n	8007204 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	431a      	orrs	r2, r3
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a3a      	ldr	r2, [pc, #232]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a38      	ldr	r2, [pc, #224]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10e      	bne.n	80071d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80071b6:	4836      	ldr	r0, [pc, #216]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80071b8:	f7ff feda 	bl	8006f70 <LL_ADC_IsEnabled>
 80071bc:	4604      	mov	r4, r0
 80071be:	4835      	ldr	r0, [pc, #212]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80071c0:	f7ff fed6 	bl	8006f70 <LL_ADC_IsEnabled>
 80071c4:	4603      	mov	r3, r0
 80071c6:	4323      	orrs	r3, r4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	e008      	b.n	80071e6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80071d4:	4832      	ldr	r0, [pc, #200]	; (80072a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80071d6:	f7ff fecb 	bl	8006f70 <LL_ADC_IsEnabled>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bf0c      	ite	eq
 80071e0:	2301      	moveq	r3, #1
 80071e2:	2300      	movne	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d047      	beq.n	800727a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80071ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6811      	ldr	r1, [r2, #0]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	6892      	ldr	r2, [r2, #8]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	431a      	orrs	r2, r3
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007202:	e03a      	b.n	800727a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d10e      	bne.n	8007242 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007224:	481a      	ldr	r0, [pc, #104]	; (8007290 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007226:	f7ff fea3 	bl	8006f70 <LL_ADC_IsEnabled>
 800722a:	4604      	mov	r4, r0
 800722c:	4819      	ldr	r0, [pc, #100]	; (8007294 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800722e:	f7ff fe9f 	bl	8006f70 <LL_ADC_IsEnabled>
 8007232:	4603      	mov	r3, r0
 8007234:	4323      	orrs	r3, r4
 8007236:	2b00      	cmp	r3, #0
 8007238:	bf0c      	ite	eq
 800723a:	2301      	moveq	r3, #1
 800723c:	2300      	movne	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	e008      	b.n	8007254 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007242:	4817      	ldr	r0, [pc, #92]	; (80072a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007244:	f7ff fe94 	bl	8006f70 <LL_ADC_IsEnabled>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	bf0c      	ite	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	2300      	movne	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d010      	beq.n	800727a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800725e:	4013      	ands	r3, r2
 8007260:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007262:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007264:	e009      	b.n	800727a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007278:	e000      	b.n	800727c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800727a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007284:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007288:	4618      	mov	r0, r3
 800728a:	377c      	adds	r7, #124	; 0x7c
 800728c:	46bd      	mov	sp, r7
 800728e:	bd90      	pop	{r4, r7, pc}
 8007290:	40022000 	.word	0x40022000
 8007294:	40022100 	.word	0x40022100
 8007298:	40022300 	.word	0x40022300
 800729c:	58026300 	.word	0x58026300
 80072a0:	58026000 	.word	0x58026000
 80072a4:	fffff0e0 	.word	0xfffff0e0

080072a8 <__NVIC_SetPriorityGrouping>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <__NVIC_SetPriorityGrouping+0x40>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072c4:	4013      	ands	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <__NVIC_SetPriorityGrouping+0x44>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <__NVIC_SetPriorityGrouping+0x40>)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	60d3      	str	r3, [r2, #12]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	e000ed00 	.word	0xe000ed00
 80072ec:	05fa0000 	.word	0x05fa0000

080072f0 <__NVIC_GetPriorityGrouping>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <__NVIC_GetPriorityGrouping+0x18>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	f003 0307 	and.w	r3, r3, #7
}
 80072fe:	4618      	mov	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	e000ed00 	.word	0xe000ed00

0800730c <__NVIC_EnableIRQ>:
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db0b      	blt.n	8007336 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	f003 021f 	and.w	r2, r3, #31
 8007324:	4907      	ldr	r1, [pc, #28]	; (8007344 <__NVIC_EnableIRQ+0x38>)
 8007326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	2001      	movs	r0, #1
 800732e:	fa00 f202 	lsl.w	r2, r0, r2
 8007332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	e000e100 	.word	0xe000e100

08007348 <__NVIC_SetPriority>:
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	db0a      	blt.n	8007372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	490c      	ldr	r1, [pc, #48]	; (8007394 <__NVIC_SetPriority+0x4c>)
 8007362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007366:	0112      	lsls	r2, r2, #4
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	440b      	add	r3, r1
 800736c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007370:	e00a      	b.n	8007388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	b2da      	uxtb	r2, r3
 8007376:	4908      	ldr	r1, [pc, #32]	; (8007398 <__NVIC_SetPriority+0x50>)
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	3b04      	subs	r3, #4
 8007380:	0112      	lsls	r2, r2, #4
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	440b      	add	r3, r1
 8007386:	761a      	strb	r2, [r3, #24]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	e000e100 	.word	0xe000e100
 8007398:	e000ed00 	.word	0xe000ed00

0800739c <NVIC_EncodePriority>:
{
 800739c:	b480      	push	{r7}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	f1c3 0307 	rsb	r3, r3, #7
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	bf28      	it	cs
 80073ba:	2304      	movcs	r3, #4
 80073bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	3304      	adds	r3, #4
 80073c2:	2b06      	cmp	r3, #6
 80073c4:	d902      	bls.n	80073cc <NVIC_EncodePriority+0x30>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3b03      	subs	r3, #3
 80073ca:	e000      	b.n	80073ce <NVIC_EncodePriority+0x32>
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43da      	mvns	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	401a      	ands	r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	43d9      	mvns	r1, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f4:	4313      	orrs	r3, r2
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3724      	adds	r7, #36	; 0x24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff ff4c 	bl	80072a8 <__NVIC_SetPriorityGrouping>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007426:	f7ff ff63 	bl	80072f0 <__NVIC_GetPriorityGrouping>
 800742a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	6978      	ldr	r0, [r7, #20]
 8007432:	f7ff ffb3 	bl	800739c <NVIC_EncodePriority>
 8007436:	4602      	mov	r2, r0
 8007438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff ff82 	bl	8007348 <__NVIC_SetPriority>
}
 8007444:	bf00      	nop
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ff56 	bl	800730c <__NVIC_EnableIRQ>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e014      	b.n	80074a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7f9 fbaa 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e046      	b.n	800754e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	795b      	ldrb	r3, [r3, #5]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_DAC_Start+0x20>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e040      	b.n	800754e <HAL_DAC_Start+0xa2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6819      	ldr	r1, [r3, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2201      	movs	r2, #1
 80074e6:	409a      	lsls	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10f      	bne.n	8007516 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007500:	2b02      	cmp	r3, #2
 8007502:	d11d      	bne.n	8007540 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	e014      	b.n	8007540 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2102      	movs	r1, #2
 8007528:	fa01 f303 	lsl.w	r3, r1, r3
 800752c:	429a      	cmp	r2, r3
 800752e:	d107      	bne.n	8007540 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0202 	orr.w	r2, r2, #2
 800753e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e0a2      	b.n	80076ba <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	795b      	ldrb	r3, [r3, #5]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_DAC_Start_DMA+0x24>
 800757c:	2302      	movs	r3, #2
 800757e:	e09c      	b.n	80076ba <HAL_DAC_Start_DMA+0x15e>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2202      	movs	r2, #2
 800758a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d129      	bne.n	80075e6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	4a4b      	ldr	r2, [pc, #300]	; (80076c4 <HAL_DAC_Start_DMA+0x168>)
 8007598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4a4a      	ldr	r2, [pc, #296]	; (80076c8 <HAL_DAC_Start_DMA+0x16c>)
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	4a49      	ldr	r2, [pc, #292]	; (80076cc <HAL_DAC_Start_DMA+0x170>)
 80075a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075b8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_DAC_Start_DMA+0x6c>
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d005      	beq.n	80075d2 <HAL_DAC_Start_DMA+0x76>
 80075c6:	e009      	b.n	80075dc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3308      	adds	r3, #8
 80075ce:	613b      	str	r3, [r7, #16]
        break;
 80075d0:	e033      	b.n	800763a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	613b      	str	r3, [r7, #16]
        break;
 80075da:	e02e      	b.n	800763a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3310      	adds	r3, #16
 80075e2:	613b      	str	r3, [r7, #16]
        break;
 80075e4:	e029      	b.n	800763a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	4a39      	ldr	r2, [pc, #228]	; (80076d0 <HAL_DAC_Start_DMA+0x174>)
 80075ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	4a38      	ldr	r2, [pc, #224]	; (80076d4 <HAL_DAC_Start_DMA+0x178>)
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4a37      	ldr	r2, [pc, #220]	; (80076d8 <HAL_DAC_Start_DMA+0x17c>)
 80075fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800760c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_DAC_Start_DMA+0xc0>
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d005      	beq.n	8007626 <HAL_DAC_Start_DMA+0xca>
 800761a:	e009      	b.n	8007630 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3314      	adds	r3, #20
 8007622:	613b      	str	r3, [r7, #16]
        break;
 8007624:	e009      	b.n	800763a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3318      	adds	r3, #24
 800762c:	613b      	str	r3, [r7, #16]
        break;
 800762e:	e004      	b.n	800763a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	331c      	adds	r3, #28
 8007636:	613b      	str	r3, [r7, #16]
        break;
 8007638:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d111      	bne.n	8007664 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800764e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6898      	ldr	r0, [r3, #8]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	f000 fe67 	bl	800832c <HAL_DMA_Start_IT>
 800765e:	4603      	mov	r3, r0
 8007660:	75fb      	strb	r3, [r7, #23]
 8007662:	e010      	b.n	8007686 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007672:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68d8      	ldr	r0, [r3, #12]
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	f000 fe55 	bl	800832c <HAL_DMA_Start_IT>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10c      	bne.n	80076ac <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	2201      	movs	r2, #1
 80076a0:	409a      	lsls	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e005      	b.n	80076b8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f043 0204 	orr.w	r2, r3, #4
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	08007b4d 	.word	0x08007b4d
 80076c8:	08007b6f 	.word	0x08007b6f
 80076cc:	08007b8b 	.word	0x08007b8b
 80076d0:	08007c09 	.word	0x08007c09
 80076d4:	08007c2b 	.word	0x08007c2b
 80076d8:	08007c47 	.word	0x08007c47

080076dc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e03e      	b.n	800776e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	43da      	mvns	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	400a      	ands	r2, r1
 800770c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6819      	ldr	r1, [r3, #0]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2201      	movs	r2, #1
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	43da      	mvns	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	400a      	ands	r2, r1
 8007728:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f001 f863 	bl	8008800 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e00c      	b.n	8007766 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4618      	mov	r0, r3
 8007752:	f001 f855 	bl	8008800 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007764:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01d      	beq.n	80077d4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2204      	movs	r2, #4
 80077a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f043 0201 	orr.w	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f86f 	bl	80078b2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01d      	beq.n	800781a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d018      	beq.n	800781a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2204      	movs	r2, #4
 80077ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f043 0202 	orr.w	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9ed 	bl	8007bf4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e015      	b.n	800786a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	3308      	adds	r3, #8
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e004      	b.n	8007860 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	3314      	adds	r3, #20
 800785e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	461a      	mov	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_DAC_ConfigChannel+0x1e>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e12a      	b.n	8007b40 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_DAC_ConfigChannel+0x2e>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e124      	b.n	8007b40 <HAL_DAC_ConfigChannel+0x278>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2202      	movs	r2, #2
 8007900:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d17a      	bne.n	8007a00 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800790a:	f7fe f88b 	bl	8005a24 <HAL_GetTick>
 800790e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d13d      	bne.n	8007992 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007916:	e018      	b.n	800794a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007918:	f7fe f884 	bl	8005a24 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d911      	bls.n	800794a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792c:	4b86      	ldr	r3, [pc, #536]	; (8007b48 <HAL_DAC_ConfigChannel+0x280>)
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f043 0208 	orr.w	r2, r3, #8
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2203      	movs	r2, #3
 8007944:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e0fa      	b.n	8007b40 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007950:	4b7d      	ldr	r3, [pc, #500]	; (8007b48 <HAL_DAC_ConfigChannel+0x280>)
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1df      	bne.n	8007918 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	6992      	ldr	r2, [r2, #24]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
 8007962:	e020      	b.n	80079a6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007964:	f7fe f85e 	bl	8005a24 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b01      	cmp	r3, #1
 8007970:	d90f      	bls.n	8007992 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	2b00      	cmp	r3, #0
 800797a:	da0a      	bge.n	8007992 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f043 0208 	orr.w	r2, r3, #8
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2203      	movs	r2, #3
 800798c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e0d6      	b.n	8007b40 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	2b00      	cmp	r3, #0
 800799a:	dbe3      	blt.n	8007964 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	6992      	ldr	r2, [r2, #24]
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80079b6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ba:	43db      	mvns	r3, r3
 80079bc:	ea02 0103 	and.w	r1, r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	409a      	lsls	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	21ff      	movs	r1, #255	; 0xff
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	43db      	mvns	r3, r3
 80079e8:	ea02 0103 	and.w	r1, r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6a1a      	ldr	r2, [r3, #32]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	409a      	lsls	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d11d      	bne.n	8007a44 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	221f      	movs	r2, #31
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	4013      	ands	r3, r2
 8007a22:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2207      	movs	r2, #7
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d102      	bne.n	8007a6e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6c:	e00f      	b.n	8007a8e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d102      	bne.n	8007a7c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007a76:	2301      	movs	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7a:	e008      	b.n	8007a8e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007a84:	2301      	movs	r3, #1
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
 8007a88:	e001      	b.n	8007a8e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	43da      	mvns	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	400a      	ands	r2, r1
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	43db      	mvns	r3, r3
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	4013      	ands	r3, r2
 8007af2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6819      	ldr	r1, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	22c0      	movs	r2, #192	; 0xc0
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43da      	mvns	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	400a      	ands	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3728      	adds	r7, #40	; 0x28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20008000 	.word	0x20008000

08007b4c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fe8b 	bl	8007876 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	711a      	strb	r2, [r3, #4]
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7ff fe84 	bl	800788a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f043 0204 	orr.w	r2, r3, #4
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff fe7a 	bl	800789e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	711a      	strb	r2, [r3, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff ffce 	bl	8007bb8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	711a      	strb	r2, [r3, #4]
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff ffc7 	bl	8007bcc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f043 0204 	orr.w	r2, r3, #4
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff ffbd 	bl	8007be0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	711a      	strb	r2, [r3, #4]
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007c7c:	f7fd fed2 	bl	8005a24 <HAL_GetTick>
 8007c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e316      	b.n	80082ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a66      	ldr	r2, [pc, #408]	; (8007e2c <HAL_DMA_Init+0x1b8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d04a      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a65      	ldr	r2, [pc, #404]	; (8007e30 <HAL_DMA_Init+0x1bc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d045      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a63      	ldr	r2, [pc, #396]	; (8007e34 <HAL_DMA_Init+0x1c0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d040      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a62      	ldr	r2, [pc, #392]	; (8007e38 <HAL_DMA_Init+0x1c4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d03b      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a60      	ldr	r2, [pc, #384]	; (8007e3c <HAL_DMA_Init+0x1c8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d036      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a5f      	ldr	r2, [pc, #380]	; (8007e40 <HAL_DMA_Init+0x1cc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d031      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a5d      	ldr	r2, [pc, #372]	; (8007e44 <HAL_DMA_Init+0x1d0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02c      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a5c      	ldr	r2, [pc, #368]	; (8007e48 <HAL_DMA_Init+0x1d4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d027      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a5a      	ldr	r2, [pc, #360]	; (8007e4c <HAL_DMA_Init+0x1d8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d022      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a59      	ldr	r2, [pc, #356]	; (8007e50 <HAL_DMA_Init+0x1dc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d01d      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a57      	ldr	r2, [pc, #348]	; (8007e54 <HAL_DMA_Init+0x1e0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d018      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a56      	ldr	r2, [pc, #344]	; (8007e58 <HAL_DMA_Init+0x1e4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d013      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a54      	ldr	r2, [pc, #336]	; (8007e5c <HAL_DMA_Init+0x1e8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00e      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a53      	ldr	r2, [pc, #332]	; (8007e60 <HAL_DMA_Init+0x1ec>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d009      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a51      	ldr	r2, [pc, #324]	; (8007e64 <HAL_DMA_Init+0x1f0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_DMA_Init+0xb8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a50      	ldr	r2, [pc, #320]	; (8007e68 <HAL_DMA_Init+0x1f4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d101      	bne.n	8007d30 <HAL_DMA_Init+0xbc>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <HAL_DMA_Init+0xbe>
 8007d30:	2300      	movs	r3, #0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 813b 	beq.w	8007fae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a37      	ldr	r2, [pc, #220]	; (8007e2c <HAL_DMA_Init+0x1b8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d04a      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a36      	ldr	r2, [pc, #216]	; (8007e30 <HAL_DMA_Init+0x1bc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d045      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a34      	ldr	r2, [pc, #208]	; (8007e34 <HAL_DMA_Init+0x1c0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d040      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a33      	ldr	r2, [pc, #204]	; (8007e38 <HAL_DMA_Init+0x1c4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d03b      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a31      	ldr	r2, [pc, #196]	; (8007e3c <HAL_DMA_Init+0x1c8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d036      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a30      	ldr	r2, [pc, #192]	; (8007e40 <HAL_DMA_Init+0x1cc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d031      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2e      	ldr	r2, [pc, #184]	; (8007e44 <HAL_DMA_Init+0x1d0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d02c      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a2d      	ldr	r2, [pc, #180]	; (8007e48 <HAL_DMA_Init+0x1d4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d027      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <HAL_DMA_Init+0x1d8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d022      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2a      	ldr	r2, [pc, #168]	; (8007e50 <HAL_DMA_Init+0x1dc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d01d      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <HAL_DMA_Init+0x1e0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <HAL_DMA_Init+0x1e4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <HAL_DMA_Init+0x1e8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <HAL_DMA_Init+0x1ec>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <HAL_DMA_Init+0x1f0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_DMA_Init+0x174>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <HAL_DMA_Init+0x1f4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d108      	bne.n	8007dfa <HAL_DMA_Init+0x186>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0201 	bic.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	e007      	b.n	8007e0a <HAL_DMA_Init+0x196>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e0a:	e02f      	b.n	8007e6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e0c:	f7fd fe0a 	bl	8005a24 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	d928      	bls.n	8007e6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2203      	movs	r2, #3
 8007e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e246      	b.n	80082ba <HAL_DMA_Init+0x646>
 8007e2c:	40020010 	.word	0x40020010
 8007e30:	40020028 	.word	0x40020028
 8007e34:	40020040 	.word	0x40020040
 8007e38:	40020058 	.word	0x40020058
 8007e3c:	40020070 	.word	0x40020070
 8007e40:	40020088 	.word	0x40020088
 8007e44:	400200a0 	.word	0x400200a0
 8007e48:	400200b8 	.word	0x400200b8
 8007e4c:	40020410 	.word	0x40020410
 8007e50:	40020428 	.word	0x40020428
 8007e54:	40020440 	.word	0x40020440
 8007e58:	40020458 	.word	0x40020458
 8007e5c:	40020470 	.word	0x40020470
 8007e60:	40020488 	.word	0x40020488
 8007e64:	400204a0 	.word	0x400204a0
 8007e68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1c8      	bne.n	8007e0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4b83      	ldr	r3, [pc, #524]	; (8008094 <HAL_DMA_Init+0x420>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007eaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d107      	bne.n	8007ed0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007ed0:	4b71      	ldr	r3, [pc, #452]	; (8008098 <HAL_DMA_Init+0x424>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b71      	ldr	r3, [pc, #452]	; (800809c <HAL_DMA_Init+0x428>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d328      	bcc.n	8007f30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b28      	cmp	r3, #40	; 0x28
 8007ee4:	d903      	bls.n	8007eee <HAL_DMA_Init+0x27a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b2e      	cmp	r3, #46	; 0x2e
 8007eec:	d917      	bls.n	8007f1e <HAL_DMA_Init+0x2aa>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef4:	d903      	bls.n	8007efe <HAL_DMA_Init+0x28a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b42      	cmp	r3, #66	; 0x42
 8007efc:	d90f      	bls.n	8007f1e <HAL_DMA_Init+0x2aa>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b46      	cmp	r3, #70	; 0x46
 8007f04:	d903      	bls.n	8007f0e <HAL_DMA_Init+0x29a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b48      	cmp	r3, #72	; 0x48
 8007f0c:	d907      	bls.n	8007f1e <HAL_DMA_Init+0x2aa>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b4e      	cmp	r3, #78	; 0x4e
 8007f14:	d905      	bls.n	8007f22 <HAL_DMA_Init+0x2ae>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b52      	cmp	r3, #82	; 0x52
 8007f1c:	d801      	bhi.n	8007f22 <HAL_DMA_Init+0x2ae>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <HAL_DMA_Init+0x2b0>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d117      	bne.n	8007f8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00e      	beq.n	8007f8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f002 fb4d 	bl	800a60c <DMA_CheckFifoParam>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d008      	beq.n	8007f8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2240      	movs	r2, #64	; 0x40
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e197      	b.n	80082ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f002 fa88 	bl	800a4a8 <DMA_CalcBaseAndBitshift>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	223f      	movs	r2, #63	; 0x3f
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	e0cd      	b.n	800814a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a3b      	ldr	r2, [pc, #236]	; (80080a0 <HAL_DMA_Init+0x42c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d022      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a39      	ldr	r2, [pc, #228]	; (80080a4 <HAL_DMA_Init+0x430>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01d      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a38      	ldr	r2, [pc, #224]	; (80080a8 <HAL_DMA_Init+0x434>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a36      	ldr	r2, [pc, #216]	; (80080ac <HAL_DMA_Init+0x438>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a35      	ldr	r2, [pc, #212]	; (80080b0 <HAL_DMA_Init+0x43c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a33      	ldr	r2, [pc, #204]	; (80080b4 <HAL_DMA_Init+0x440>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a32      	ldr	r2, [pc, #200]	; (80080b8 <HAL_DMA_Init+0x444>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_DMA_Init+0x38a>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a30      	ldr	r2, [pc, #192]	; (80080bc <HAL_DMA_Init+0x448>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d101      	bne.n	8008002 <HAL_DMA_Init+0x38e>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_DMA_Init+0x390>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8097 	beq.w	8008138 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a24      	ldr	r2, [pc, #144]	; (80080a0 <HAL_DMA_Init+0x42c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d021      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <HAL_DMA_Init+0x430>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01c      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <HAL_DMA_Init+0x434>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d017      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1f      	ldr	r2, [pc, #124]	; (80080ac <HAL_DMA_Init+0x438>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d012      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1e      	ldr	r2, [pc, #120]	; (80080b0 <HAL_DMA_Init+0x43c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00d      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <HAL_DMA_Init+0x440>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d008      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1b      	ldr	r2, [pc, #108]	; (80080b8 <HAL_DMA_Init+0x444>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <HAL_DMA_Init+0x3e4>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a19      	ldr	r2, [pc, #100]	; (80080bc <HAL_DMA_Init+0x448>)
 8008056:	4293      	cmp	r3, r2
 8008058:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <HAL_DMA_Init+0x44c>)
 8008076:	4013      	ands	r3, r2
 8008078:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d020      	beq.n	80080c4 <HAL_DMA_Init+0x450>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b80      	cmp	r3, #128	; 0x80
 8008088:	d102      	bne.n	8008090 <HAL_DMA_Init+0x41c>
 800808a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800808e:	e01a      	b.n	80080c6 <HAL_DMA_Init+0x452>
 8008090:	2300      	movs	r3, #0
 8008092:	e018      	b.n	80080c6 <HAL_DMA_Init+0x452>
 8008094:	fe10803f 	.word	0xfe10803f
 8008098:	5c001000 	.word	0x5c001000
 800809c:	ffff0000 	.word	0xffff0000
 80080a0:	58025408 	.word	0x58025408
 80080a4:	5802541c 	.word	0x5802541c
 80080a8:	58025430 	.word	0x58025430
 80080ac:	58025444 	.word	0x58025444
 80080b0:	58025458 	.word	0x58025458
 80080b4:	5802546c 	.word	0x5802546c
 80080b8:	58025480 	.word	0x58025480
 80080bc:	58025494 	.word	0x58025494
 80080c0:	fffe000f 	.word	0xfffe000f
 80080c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68d2      	ldr	r2, [r2, #12]
 80080ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80080d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80080dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80080e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	4b6e      	ldr	r3, [pc, #440]	; (80082c4 <HAL_DMA_Init+0x650>)
 800810c:	4413      	add	r3, r2
 800810e:	4a6e      	ldr	r2, [pc, #440]	; (80082c8 <HAL_DMA_Init+0x654>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	091b      	lsrs	r3, r3, #4
 8008116:	009a      	lsls	r2, r3, #2
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 f9c3 	bl	800a4a8 <DMA_CalcBaseAndBitshift>
 8008122:	4603      	mov	r3, r0
 8008124:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	f003 031f 	and.w	r3, r3, #31
 800812e:	2201      	movs	r2, #1
 8008130:	409a      	lsls	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	e008      	b.n	800814a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2240      	movs	r2, #64	; 0x40
 800813c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2203      	movs	r2, #3
 8008142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e0b7      	b.n	80082ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a5f      	ldr	r2, [pc, #380]	; (80082cc <HAL_DMA_Init+0x658>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d072      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a5d      	ldr	r2, [pc, #372]	; (80082d0 <HAL_DMA_Init+0x65c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d06d      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a5c      	ldr	r2, [pc, #368]	; (80082d4 <HAL_DMA_Init+0x660>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d068      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a5a      	ldr	r2, [pc, #360]	; (80082d8 <HAL_DMA_Init+0x664>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d063      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a59      	ldr	r2, [pc, #356]	; (80082dc <HAL_DMA_Init+0x668>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d05e      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a57      	ldr	r2, [pc, #348]	; (80082e0 <HAL_DMA_Init+0x66c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d059      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a56      	ldr	r2, [pc, #344]	; (80082e4 <HAL_DMA_Init+0x670>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d054      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a54      	ldr	r2, [pc, #336]	; (80082e8 <HAL_DMA_Init+0x674>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d04f      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a53      	ldr	r2, [pc, #332]	; (80082ec <HAL_DMA_Init+0x678>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d04a      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a51      	ldr	r2, [pc, #324]	; (80082f0 <HAL_DMA_Init+0x67c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d045      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a50      	ldr	r2, [pc, #320]	; (80082f4 <HAL_DMA_Init+0x680>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d040      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <HAL_DMA_Init+0x684>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d03b      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a4d      	ldr	r2, [pc, #308]	; (80082fc <HAL_DMA_Init+0x688>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d036      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a4b      	ldr	r2, [pc, #300]	; (8008300 <HAL_DMA_Init+0x68c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d031      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a4a      	ldr	r2, [pc, #296]	; (8008304 <HAL_DMA_Init+0x690>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d02c      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a48      	ldr	r2, [pc, #288]	; (8008308 <HAL_DMA_Init+0x694>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d027      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a47      	ldr	r2, [pc, #284]	; (800830c <HAL_DMA_Init+0x698>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a45      	ldr	r2, [pc, #276]	; (8008310 <HAL_DMA_Init+0x69c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d01d      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a44      	ldr	r2, [pc, #272]	; (8008314 <HAL_DMA_Init+0x6a0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d018      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a42      	ldr	r2, [pc, #264]	; (8008318 <HAL_DMA_Init+0x6a4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a41      	ldr	r2, [pc, #260]	; (800831c <HAL_DMA_Init+0x6a8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00e      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a3f      	ldr	r2, [pc, #252]	; (8008320 <HAL_DMA_Init+0x6ac>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3e      	ldr	r2, [pc, #248]	; (8008324 <HAL_DMA_Init+0x6b0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_DMA_Init+0x5c6>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a3c      	ldr	r2, [pc, #240]	; (8008328 <HAL_DMA_Init+0x6b4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d101      	bne.n	800823e <HAL_DMA_Init+0x5ca>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <HAL_DMA_Init+0x5cc>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d032      	beq.n	80082aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f002 fa5d 	bl	800a704 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b80      	cmp	r3, #128	; 0x80
 8008250:	d102      	bne.n	8008258 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800826c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d010      	beq.n	8008298 <HAL_DMA_Init+0x624>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b08      	cmp	r3, #8
 800827c:	d80c      	bhi.n	8008298 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f002 fada 	bl	800a838 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	e008      	b.n	80082aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	a7fdabf8 	.word	0xa7fdabf8
 80082c8:	cccccccd 	.word	0xcccccccd
 80082cc:	40020010 	.word	0x40020010
 80082d0:	40020028 	.word	0x40020028
 80082d4:	40020040 	.word	0x40020040
 80082d8:	40020058 	.word	0x40020058
 80082dc:	40020070 	.word	0x40020070
 80082e0:	40020088 	.word	0x40020088
 80082e4:	400200a0 	.word	0x400200a0
 80082e8:	400200b8 	.word	0x400200b8
 80082ec:	40020410 	.word	0x40020410
 80082f0:	40020428 	.word	0x40020428
 80082f4:	40020440 	.word	0x40020440
 80082f8:	40020458 	.word	0x40020458
 80082fc:	40020470 	.word	0x40020470
 8008300:	40020488 	.word	0x40020488
 8008304:	400204a0 	.word	0x400204a0
 8008308:	400204b8 	.word	0x400204b8
 800830c:	58025408 	.word	0x58025408
 8008310:	5802541c 	.word	0x5802541c
 8008314:	58025430 	.word	0x58025430
 8008318:	58025444 	.word	0x58025444
 800831c:	58025458 	.word	0x58025458
 8008320:	5802546c 	.word	0x5802546c
 8008324:	58025480 	.word	0x58025480
 8008328:	58025494 	.word	0x58025494

0800832c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e226      	b.n	8008796 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_DMA_Start_IT+0x2a>
 8008352:	2302      	movs	r3, #2
 8008354:	e21f      	b.n	8008796 <HAL_DMA_Start_IT+0x46a>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	f040 820a 	bne.w	8008780 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a68      	ldr	r2, [pc, #416]	; (8008520 <HAL_DMA_Start_IT+0x1f4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d04a      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a66      	ldr	r2, [pc, #408]	; (8008524 <HAL_DMA_Start_IT+0x1f8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d045      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a65      	ldr	r2, [pc, #404]	; (8008528 <HAL_DMA_Start_IT+0x1fc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d040      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a63      	ldr	r2, [pc, #396]	; (800852c <HAL_DMA_Start_IT+0x200>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d03b      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a62      	ldr	r2, [pc, #392]	; (8008530 <HAL_DMA_Start_IT+0x204>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d036      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a60      	ldr	r2, [pc, #384]	; (8008534 <HAL_DMA_Start_IT+0x208>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d031      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a5f      	ldr	r2, [pc, #380]	; (8008538 <HAL_DMA_Start_IT+0x20c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02c      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a5d      	ldr	r2, [pc, #372]	; (800853c <HAL_DMA_Start_IT+0x210>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a5c      	ldr	r2, [pc, #368]	; (8008540 <HAL_DMA_Start_IT+0x214>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a5a      	ldr	r2, [pc, #360]	; (8008544 <HAL_DMA_Start_IT+0x218>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01d      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a59      	ldr	r2, [pc, #356]	; (8008548 <HAL_DMA_Start_IT+0x21c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a57      	ldr	r2, [pc, #348]	; (800854c <HAL_DMA_Start_IT+0x220>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a56      	ldr	r2, [pc, #344]	; (8008550 <HAL_DMA_Start_IT+0x224>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a54      	ldr	r2, [pc, #336]	; (8008554 <HAL_DMA_Start_IT+0x228>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a53      	ldr	r2, [pc, #332]	; (8008558 <HAL_DMA_Start_IT+0x22c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_DMA_Start_IT+0xee>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a51      	ldr	r2, [pc, #324]	; (800855c <HAL_DMA_Start_IT+0x230>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <HAL_DMA_Start_IT+0x100>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e007      	b.n	800843c <HAL_DMA_Start_IT+0x110>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f001 fe84 	bl	800a150 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a34      	ldr	r2, [pc, #208]	; (8008520 <HAL_DMA_Start_IT+0x1f4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d04a      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a33      	ldr	r2, [pc, #204]	; (8008524 <HAL_DMA_Start_IT+0x1f8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d045      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a31      	ldr	r2, [pc, #196]	; (8008528 <HAL_DMA_Start_IT+0x1fc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d040      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a30      	ldr	r2, [pc, #192]	; (800852c <HAL_DMA_Start_IT+0x200>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d03b      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2e      	ldr	r2, [pc, #184]	; (8008530 <HAL_DMA_Start_IT+0x204>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d036      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <HAL_DMA_Start_IT+0x208>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d031      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2b      	ldr	r2, [pc, #172]	; (8008538 <HAL_DMA_Start_IT+0x20c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d02c      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a2a      	ldr	r2, [pc, #168]	; (800853c <HAL_DMA_Start_IT+0x210>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d027      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a28      	ldr	r2, [pc, #160]	; (8008540 <HAL_DMA_Start_IT+0x214>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d022      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a27      	ldr	r2, [pc, #156]	; (8008544 <HAL_DMA_Start_IT+0x218>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d01d      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a25      	ldr	r2, [pc, #148]	; (8008548 <HAL_DMA_Start_IT+0x21c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d018      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <HAL_DMA_Start_IT+0x220>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d013      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <HAL_DMA_Start_IT+0x224>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00e      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a21      	ldr	r2, [pc, #132]	; (8008554 <HAL_DMA_Start_IT+0x228>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d009      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1f      	ldr	r2, [pc, #124]	; (8008558 <HAL_DMA_Start_IT+0x22c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <HAL_DMA_Start_IT+0x1bc>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_DMA_Start_IT+0x230>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d101      	bne.n	80084ec <HAL_DMA_Start_IT+0x1c0>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <HAL_DMA_Start_IT+0x1c2>
 80084ec:	2300      	movs	r3, #0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d036      	beq.n	8008560 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f023 021e 	bic.w	r2, r3, #30
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0216 	orr.w	r2, r2, #22
 8008504:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d03e      	beq.n	800858c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e035      	b.n	800858c <HAL_DMA_Start_IT+0x260>
 8008520:	40020010 	.word	0x40020010
 8008524:	40020028 	.word	0x40020028
 8008528:	40020040 	.word	0x40020040
 800852c:	40020058 	.word	0x40020058
 8008530:	40020070 	.word	0x40020070
 8008534:	40020088 	.word	0x40020088
 8008538:	400200a0 	.word	0x400200a0
 800853c:	400200b8 	.word	0x400200b8
 8008540:	40020410 	.word	0x40020410
 8008544:	40020428 	.word	0x40020428
 8008548:	40020440 	.word	0x40020440
 800854c:	40020458 	.word	0x40020458
 8008550:	40020470 	.word	0x40020470
 8008554:	40020488 	.word	0x40020488
 8008558:	400204a0 	.word	0x400204a0
 800855c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 020e 	bic.w	r2, r3, #14
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 020a 	orr.w	r2, r2, #10
 8008572:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0204 	orr.w	r2, r2, #4
 800858a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a83      	ldr	r2, [pc, #524]	; (80087a0 <HAL_DMA_Start_IT+0x474>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d072      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a82      	ldr	r2, [pc, #520]	; (80087a4 <HAL_DMA_Start_IT+0x478>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d06d      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a80      	ldr	r2, [pc, #512]	; (80087a8 <HAL_DMA_Start_IT+0x47c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d068      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a7f      	ldr	r2, [pc, #508]	; (80087ac <HAL_DMA_Start_IT+0x480>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d063      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a7d      	ldr	r2, [pc, #500]	; (80087b0 <HAL_DMA_Start_IT+0x484>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d05e      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a7c      	ldr	r2, [pc, #496]	; (80087b4 <HAL_DMA_Start_IT+0x488>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d059      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a7a      	ldr	r2, [pc, #488]	; (80087b8 <HAL_DMA_Start_IT+0x48c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d054      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a79      	ldr	r2, [pc, #484]	; (80087bc <HAL_DMA_Start_IT+0x490>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d04f      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a77      	ldr	r2, [pc, #476]	; (80087c0 <HAL_DMA_Start_IT+0x494>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d04a      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a76      	ldr	r2, [pc, #472]	; (80087c4 <HAL_DMA_Start_IT+0x498>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d045      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a74      	ldr	r2, [pc, #464]	; (80087c8 <HAL_DMA_Start_IT+0x49c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d040      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a73      	ldr	r2, [pc, #460]	; (80087cc <HAL_DMA_Start_IT+0x4a0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d03b      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a71      	ldr	r2, [pc, #452]	; (80087d0 <HAL_DMA_Start_IT+0x4a4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d036      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a70      	ldr	r2, [pc, #448]	; (80087d4 <HAL_DMA_Start_IT+0x4a8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d031      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a6e      	ldr	r2, [pc, #440]	; (80087d8 <HAL_DMA_Start_IT+0x4ac>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d02c      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a6d      	ldr	r2, [pc, #436]	; (80087dc <HAL_DMA_Start_IT+0x4b0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d027      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a6b      	ldr	r2, [pc, #428]	; (80087e0 <HAL_DMA_Start_IT+0x4b4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d022      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a6a      	ldr	r2, [pc, #424]	; (80087e4 <HAL_DMA_Start_IT+0x4b8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d01d      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a68      	ldr	r2, [pc, #416]	; (80087e8 <HAL_DMA_Start_IT+0x4bc>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d018      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a67      	ldr	r2, [pc, #412]	; (80087ec <HAL_DMA_Start_IT+0x4c0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d013      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a65      	ldr	r2, [pc, #404]	; (80087f0 <HAL_DMA_Start_IT+0x4c4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00e      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a64      	ldr	r2, [pc, #400]	; (80087f4 <HAL_DMA_Start_IT+0x4c8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a62      	ldr	r2, [pc, #392]	; (80087f8 <HAL_DMA_Start_IT+0x4cc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d004      	beq.n	800867c <HAL_DMA_Start_IT+0x350>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a61      	ldr	r2, [pc, #388]	; (80087fc <HAL_DMA_Start_IT+0x4d0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d101      	bne.n	8008680 <HAL_DMA_Start_IT+0x354>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <HAL_DMA_Start_IT+0x356>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01a      	beq.n	80086bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800869e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a37      	ldr	r2, [pc, #220]	; (80087a0 <HAL_DMA_Start_IT+0x474>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d04a      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a36      	ldr	r2, [pc, #216]	; (80087a4 <HAL_DMA_Start_IT+0x478>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d045      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a34      	ldr	r2, [pc, #208]	; (80087a8 <HAL_DMA_Start_IT+0x47c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d040      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a33      	ldr	r2, [pc, #204]	; (80087ac <HAL_DMA_Start_IT+0x480>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d03b      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a31      	ldr	r2, [pc, #196]	; (80087b0 <HAL_DMA_Start_IT+0x484>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d036      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a30      	ldr	r2, [pc, #192]	; (80087b4 <HAL_DMA_Start_IT+0x488>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d031      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2e      	ldr	r2, [pc, #184]	; (80087b8 <HAL_DMA_Start_IT+0x48c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d02c      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a2d      	ldr	r2, [pc, #180]	; (80087bc <HAL_DMA_Start_IT+0x490>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d027      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a2b      	ldr	r2, [pc, #172]	; (80087c0 <HAL_DMA_Start_IT+0x494>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d022      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2a      	ldr	r2, [pc, #168]	; (80087c4 <HAL_DMA_Start_IT+0x498>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d01d      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a28      	ldr	r2, [pc, #160]	; (80087c8 <HAL_DMA_Start_IT+0x49c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d018      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a27      	ldr	r2, [pc, #156]	; (80087cc <HAL_DMA_Start_IT+0x4a0>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d013      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <HAL_DMA_Start_IT+0x4a4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00e      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a24      	ldr	r2, [pc, #144]	; (80087d4 <HAL_DMA_Start_IT+0x4a8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d009      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a22      	ldr	r2, [pc, #136]	; (80087d8 <HAL_DMA_Start_IT+0x4ac>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_DMA_Start_IT+0x430>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a21      	ldr	r2, [pc, #132]	; (80087dc <HAL_DMA_Start_IT+0x4b0>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d108      	bne.n	800876e <HAL_DMA_Start_IT+0x442>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f042 0201 	orr.w	r2, r2, #1
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e012      	b.n	8008794 <HAL_DMA_Start_IT+0x468>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0201 	orr.w	r2, r2, #1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e009      	b.n	8008794 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40020010 	.word	0x40020010
 80087a4:	40020028 	.word	0x40020028
 80087a8:	40020040 	.word	0x40020040
 80087ac:	40020058 	.word	0x40020058
 80087b0:	40020070 	.word	0x40020070
 80087b4:	40020088 	.word	0x40020088
 80087b8:	400200a0 	.word	0x400200a0
 80087bc:	400200b8 	.word	0x400200b8
 80087c0:	40020410 	.word	0x40020410
 80087c4:	40020428 	.word	0x40020428
 80087c8:	40020440 	.word	0x40020440
 80087cc:	40020458 	.word	0x40020458
 80087d0:	40020470 	.word	0x40020470
 80087d4:	40020488 	.word	0x40020488
 80087d8:	400204a0 	.word	0x400204a0
 80087dc:	400204b8 	.word	0x400204b8
 80087e0:	58025408 	.word	0x58025408
 80087e4:	5802541c 	.word	0x5802541c
 80087e8:	58025430 	.word	0x58025430
 80087ec:	58025444 	.word	0x58025444
 80087f0:	58025458 	.word	0x58025458
 80087f4:	5802546c 	.word	0x5802546c
 80087f8:	58025480 	.word	0x58025480
 80087fc:	58025494 	.word	0x58025494

08008800 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008808:	f7fd f90c 	bl	8005a24 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e2dc      	b.n	8008dd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d008      	beq.n	8008836 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2280      	movs	r2, #128	; 0x80
 8008828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e2cd      	b.n	8008dd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a76      	ldr	r2, [pc, #472]	; (8008a14 <HAL_DMA_Abort+0x214>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d04a      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a74      	ldr	r2, [pc, #464]	; (8008a18 <HAL_DMA_Abort+0x218>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d045      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a73      	ldr	r2, [pc, #460]	; (8008a1c <HAL_DMA_Abort+0x21c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d040      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a71      	ldr	r2, [pc, #452]	; (8008a20 <HAL_DMA_Abort+0x220>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d03b      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a70      	ldr	r2, [pc, #448]	; (8008a24 <HAL_DMA_Abort+0x224>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d036      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a6e      	ldr	r2, [pc, #440]	; (8008a28 <HAL_DMA_Abort+0x228>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d031      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a6d      	ldr	r2, [pc, #436]	; (8008a2c <HAL_DMA_Abort+0x22c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d02c      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a6b      	ldr	r2, [pc, #428]	; (8008a30 <HAL_DMA_Abort+0x230>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d027      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6a      	ldr	r2, [pc, #424]	; (8008a34 <HAL_DMA_Abort+0x234>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d022      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a68      	ldr	r2, [pc, #416]	; (8008a38 <HAL_DMA_Abort+0x238>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d01d      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a67      	ldr	r2, [pc, #412]	; (8008a3c <HAL_DMA_Abort+0x23c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d018      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a65      	ldr	r2, [pc, #404]	; (8008a40 <HAL_DMA_Abort+0x240>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d013      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a64      	ldr	r2, [pc, #400]	; (8008a44 <HAL_DMA_Abort+0x244>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00e      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a62      	ldr	r2, [pc, #392]	; (8008a48 <HAL_DMA_Abort+0x248>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d009      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a61      	ldr	r2, [pc, #388]	; (8008a4c <HAL_DMA_Abort+0x24c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d004      	beq.n	80088d6 <HAL_DMA_Abort+0xd6>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a5f      	ldr	r2, [pc, #380]	; (8008a50 <HAL_DMA_Abort+0x250>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d101      	bne.n	80088da <HAL_DMA_Abort+0xda>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <HAL_DMA_Abort+0xdc>
 80088da:	2300      	movs	r3, #0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d013      	beq.n	8008908 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 021e 	bic.w	r2, r2, #30
 80088ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e00a      	b.n	800891e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 020e 	bic.w	r2, r2, #14
 8008916:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a3c      	ldr	r2, [pc, #240]	; (8008a14 <HAL_DMA_Abort+0x214>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d072      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a3a      	ldr	r2, [pc, #232]	; (8008a18 <HAL_DMA_Abort+0x218>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d06d      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a39      	ldr	r2, [pc, #228]	; (8008a1c <HAL_DMA_Abort+0x21c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d068      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a37      	ldr	r2, [pc, #220]	; (8008a20 <HAL_DMA_Abort+0x220>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d063      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a36      	ldr	r2, [pc, #216]	; (8008a24 <HAL_DMA_Abort+0x224>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d05e      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a34      	ldr	r2, [pc, #208]	; (8008a28 <HAL_DMA_Abort+0x228>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d059      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a33      	ldr	r2, [pc, #204]	; (8008a2c <HAL_DMA_Abort+0x22c>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d054      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a31      	ldr	r2, [pc, #196]	; (8008a30 <HAL_DMA_Abort+0x230>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d04f      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a30      	ldr	r2, [pc, #192]	; (8008a34 <HAL_DMA_Abort+0x234>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d04a      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2e      	ldr	r2, [pc, #184]	; (8008a38 <HAL_DMA_Abort+0x238>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d045      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2d      	ldr	r2, [pc, #180]	; (8008a3c <HAL_DMA_Abort+0x23c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d040      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a2b      	ldr	r2, [pc, #172]	; (8008a40 <HAL_DMA_Abort+0x240>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d03b      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a2a      	ldr	r2, [pc, #168]	; (8008a44 <HAL_DMA_Abort+0x244>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d036      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <HAL_DMA_Abort+0x248>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d031      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <HAL_DMA_Abort+0x24c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d02c      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a25      	ldr	r2, [pc, #148]	; (8008a50 <HAL_DMA_Abort+0x250>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d027      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a24      	ldr	r2, [pc, #144]	; (8008a54 <HAL_DMA_Abort+0x254>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d022      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <HAL_DMA_Abort+0x258>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d01d      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a21      	ldr	r2, [pc, #132]	; (8008a5c <HAL_DMA_Abort+0x25c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d018      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <HAL_DMA_Abort+0x260>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <HAL_DMA_Abort+0x264>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00e      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1c      	ldr	r2, [pc, #112]	; (8008a68 <HAL_DMA_Abort+0x268>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d009      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1b      	ldr	r2, [pc, #108]	; (8008a6c <HAL_DMA_Abort+0x26c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <HAL_DMA_Abort+0x20e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a19      	ldr	r2, [pc, #100]	; (8008a70 <HAL_DMA_Abort+0x270>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d132      	bne.n	8008a74 <HAL_DMA_Abort+0x274>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e031      	b.n	8008a76 <HAL_DMA_Abort+0x276>
 8008a12:	bf00      	nop
 8008a14:	40020010 	.word	0x40020010
 8008a18:	40020028 	.word	0x40020028
 8008a1c:	40020040 	.word	0x40020040
 8008a20:	40020058 	.word	0x40020058
 8008a24:	40020070 	.word	0x40020070
 8008a28:	40020088 	.word	0x40020088
 8008a2c:	400200a0 	.word	0x400200a0
 8008a30:	400200b8 	.word	0x400200b8
 8008a34:	40020410 	.word	0x40020410
 8008a38:	40020428 	.word	0x40020428
 8008a3c:	40020440 	.word	0x40020440
 8008a40:	40020458 	.word	0x40020458
 8008a44:	40020470 	.word	0x40020470
 8008a48:	40020488 	.word	0x40020488
 8008a4c:	400204a0 	.word	0x400204a0
 8008a50:	400204b8 	.word	0x400204b8
 8008a54:	58025408 	.word	0x58025408
 8008a58:	5802541c 	.word	0x5802541c
 8008a5c:	58025430 	.word	0x58025430
 8008a60:	58025444 	.word	0x58025444
 8008a64:	58025458 	.word	0x58025458
 8008a68:	5802546c 	.word	0x5802546c
 8008a6c:	58025480 	.word	0x58025480
 8008a70:	58025494 	.word	0x58025494
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a6d      	ldr	r2, [pc, #436]	; (8008c44 <HAL_DMA_Abort+0x444>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d04a      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a6b      	ldr	r2, [pc, #428]	; (8008c48 <HAL_DMA_Abort+0x448>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d045      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a6a      	ldr	r2, [pc, #424]	; (8008c4c <HAL_DMA_Abort+0x44c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d040      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a68      	ldr	r2, [pc, #416]	; (8008c50 <HAL_DMA_Abort+0x450>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d03b      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a67      	ldr	r2, [pc, #412]	; (8008c54 <HAL_DMA_Abort+0x454>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d036      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a65      	ldr	r2, [pc, #404]	; (8008c58 <HAL_DMA_Abort+0x458>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d031      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a64      	ldr	r2, [pc, #400]	; (8008c5c <HAL_DMA_Abort+0x45c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d02c      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a62      	ldr	r2, [pc, #392]	; (8008c60 <HAL_DMA_Abort+0x460>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d027      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a61      	ldr	r2, [pc, #388]	; (8008c64 <HAL_DMA_Abort+0x464>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d022      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a5f      	ldr	r2, [pc, #380]	; (8008c68 <HAL_DMA_Abort+0x468>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d01d      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a5e      	ldr	r2, [pc, #376]	; (8008c6c <HAL_DMA_Abort+0x46c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d018      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a5c      	ldr	r2, [pc, #368]	; (8008c70 <HAL_DMA_Abort+0x470>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d013      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a5b      	ldr	r2, [pc, #364]	; (8008c74 <HAL_DMA_Abort+0x474>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a59      	ldr	r2, [pc, #356]	; (8008c78 <HAL_DMA_Abort+0x478>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a58      	ldr	r2, [pc, #352]	; (8008c7c <HAL_DMA_Abort+0x47c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_DMA_Abort+0x32a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a56      	ldr	r2, [pc, #344]	; (8008c80 <HAL_DMA_Abort+0x480>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d108      	bne.n	8008b3c <HAL_DMA_Abort+0x33c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e007      	b.n	8008b4c <HAL_DMA_Abort+0x34c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0201 	bic.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008b4c:	e013      	b.n	8008b76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b4e:	f7fc ff69 	bl	8005a24 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d90c      	bls.n	8008b76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2203      	movs	r2, #3
 8008b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e12d      	b.n	8008dd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e5      	bne.n	8008b4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a2f      	ldr	r2, [pc, #188]	; (8008c44 <HAL_DMA_Abort+0x444>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d04a      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a2d      	ldr	r2, [pc, #180]	; (8008c48 <HAL_DMA_Abort+0x448>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d045      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a2c      	ldr	r2, [pc, #176]	; (8008c4c <HAL_DMA_Abort+0x44c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d040      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <HAL_DMA_Abort+0x450>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d03b      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a29      	ldr	r2, [pc, #164]	; (8008c54 <HAL_DMA_Abort+0x454>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d036      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <HAL_DMA_Abort+0x458>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d031      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a26      	ldr	r2, [pc, #152]	; (8008c5c <HAL_DMA_Abort+0x45c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d02c      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a24      	ldr	r2, [pc, #144]	; (8008c60 <HAL_DMA_Abort+0x460>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d027      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a23      	ldr	r2, [pc, #140]	; (8008c64 <HAL_DMA_Abort+0x464>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d022      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a21      	ldr	r2, [pc, #132]	; (8008c68 <HAL_DMA_Abort+0x468>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01d      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a20      	ldr	r2, [pc, #128]	; (8008c6c <HAL_DMA_Abort+0x46c>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d018      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <HAL_DMA_Abort+0x470>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d013      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <HAL_DMA_Abort+0x474>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00e      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <HAL_DMA_Abort+0x478>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d009      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <HAL_DMA_Abort+0x47c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d004      	beq.n	8008c22 <HAL_DMA_Abort+0x422>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	; (8008c80 <HAL_DMA_Abort+0x480>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d101      	bne.n	8008c26 <HAL_DMA_Abort+0x426>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e000      	b.n	8008c28 <HAL_DMA_Abort+0x428>
 8008c26:	2300      	movs	r3, #0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d02b      	beq.n	8008c84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	223f      	movs	r2, #63	; 0x3f
 8008c3c:	409a      	lsls	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	609a      	str	r2, [r3, #8]
 8008c42:	e02a      	b.n	8008c9a <HAL_DMA_Abort+0x49a>
 8008c44:	40020010 	.word	0x40020010
 8008c48:	40020028 	.word	0x40020028
 8008c4c:	40020040 	.word	0x40020040
 8008c50:	40020058 	.word	0x40020058
 8008c54:	40020070 	.word	0x40020070
 8008c58:	40020088 	.word	0x40020088
 8008c5c:	400200a0 	.word	0x400200a0
 8008c60:	400200b8 	.word	0x400200b8
 8008c64:	40020410 	.word	0x40020410
 8008c68:	40020428 	.word	0x40020428
 8008c6c:	40020440 	.word	0x40020440
 8008c70:	40020458 	.word	0x40020458
 8008c74:	40020470 	.word	0x40020470
 8008c78:	40020488 	.word	0x40020488
 8008c7c:	400204a0 	.word	0x400204a0
 8008c80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2201      	movs	r2, #1
 8008c94:	409a      	lsls	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a4f      	ldr	r2, [pc, #316]	; (8008ddc <HAL_DMA_Abort+0x5dc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d072      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a4d      	ldr	r2, [pc, #308]	; (8008de0 <HAL_DMA_Abort+0x5e0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d06d      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a4c      	ldr	r2, [pc, #304]	; (8008de4 <HAL_DMA_Abort+0x5e4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d068      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a4a      	ldr	r2, [pc, #296]	; (8008de8 <HAL_DMA_Abort+0x5e8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d063      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a49      	ldr	r2, [pc, #292]	; (8008dec <HAL_DMA_Abort+0x5ec>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d05e      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a47      	ldr	r2, [pc, #284]	; (8008df0 <HAL_DMA_Abort+0x5f0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d059      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a46      	ldr	r2, [pc, #280]	; (8008df4 <HAL_DMA_Abort+0x5f4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d054      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a44      	ldr	r2, [pc, #272]	; (8008df8 <HAL_DMA_Abort+0x5f8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d04f      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a43      	ldr	r2, [pc, #268]	; (8008dfc <HAL_DMA_Abort+0x5fc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d04a      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <HAL_DMA_Abort+0x600>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d045      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a40      	ldr	r2, [pc, #256]	; (8008e04 <HAL_DMA_Abort+0x604>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d040      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a3e      	ldr	r2, [pc, #248]	; (8008e08 <HAL_DMA_Abort+0x608>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d03b      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a3d      	ldr	r2, [pc, #244]	; (8008e0c <HAL_DMA_Abort+0x60c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d036      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a3b      	ldr	r2, [pc, #236]	; (8008e10 <HAL_DMA_Abort+0x610>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d031      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a3a      	ldr	r2, [pc, #232]	; (8008e14 <HAL_DMA_Abort+0x614>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d02c      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a38      	ldr	r2, [pc, #224]	; (8008e18 <HAL_DMA_Abort+0x618>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d027      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a37      	ldr	r2, [pc, #220]	; (8008e1c <HAL_DMA_Abort+0x61c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d022      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a35      	ldr	r2, [pc, #212]	; (8008e20 <HAL_DMA_Abort+0x620>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01d      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a34      	ldr	r2, [pc, #208]	; (8008e24 <HAL_DMA_Abort+0x624>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d018      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a32      	ldr	r2, [pc, #200]	; (8008e28 <HAL_DMA_Abort+0x628>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a31      	ldr	r2, [pc, #196]	; (8008e2c <HAL_DMA_Abort+0x62c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00e      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a2f      	ldr	r2, [pc, #188]	; (8008e30 <HAL_DMA_Abort+0x630>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d009      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a2e      	ldr	r2, [pc, #184]	; (8008e34 <HAL_DMA_Abort+0x634>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d004      	beq.n	8008d8a <HAL_DMA_Abort+0x58a>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a2c      	ldr	r2, [pc, #176]	; (8008e38 <HAL_DMA_Abort+0x638>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d101      	bne.n	8008d8e <HAL_DMA_Abort+0x58e>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <HAL_DMA_Abort+0x590>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d015      	beq.n	8008dc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00c      	beq.n	8008dc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008db4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008dbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40020010 	.word	0x40020010
 8008de0:	40020028 	.word	0x40020028
 8008de4:	40020040 	.word	0x40020040
 8008de8:	40020058 	.word	0x40020058
 8008dec:	40020070 	.word	0x40020070
 8008df0:	40020088 	.word	0x40020088
 8008df4:	400200a0 	.word	0x400200a0
 8008df8:	400200b8 	.word	0x400200b8
 8008dfc:	40020410 	.word	0x40020410
 8008e00:	40020428 	.word	0x40020428
 8008e04:	40020440 	.word	0x40020440
 8008e08:	40020458 	.word	0x40020458
 8008e0c:	40020470 	.word	0x40020470
 8008e10:	40020488 	.word	0x40020488
 8008e14:	400204a0 	.word	0x400204a0
 8008e18:	400204b8 	.word	0x400204b8
 8008e1c:	58025408 	.word	0x58025408
 8008e20:	5802541c 	.word	0x5802541c
 8008e24:	58025430 	.word	0x58025430
 8008e28:	58025444 	.word	0x58025444
 8008e2c:	58025458 	.word	0x58025458
 8008e30:	5802546c 	.word	0x5802546c
 8008e34:	58025480 	.word	0x58025480
 8008e38:	58025494 	.word	0x58025494

08008e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e237      	b.n	80092be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d004      	beq.n	8008e64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2280      	movs	r2, #128	; 0x80
 8008e5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e22c      	b.n	80092be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a5c      	ldr	r2, [pc, #368]	; (8008fdc <HAL_DMA_Abort_IT+0x1a0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d04a      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a5b      	ldr	r2, [pc, #364]	; (8008fe0 <HAL_DMA_Abort_IT+0x1a4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d045      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a59      	ldr	r2, [pc, #356]	; (8008fe4 <HAL_DMA_Abort_IT+0x1a8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d040      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a58      	ldr	r2, [pc, #352]	; (8008fe8 <HAL_DMA_Abort_IT+0x1ac>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d03b      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a56      	ldr	r2, [pc, #344]	; (8008fec <HAL_DMA_Abort_IT+0x1b0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d036      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a55      	ldr	r2, [pc, #340]	; (8008ff0 <HAL_DMA_Abort_IT+0x1b4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d031      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a53      	ldr	r2, [pc, #332]	; (8008ff4 <HAL_DMA_Abort_IT+0x1b8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d02c      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a52      	ldr	r2, [pc, #328]	; (8008ff8 <HAL_DMA_Abort_IT+0x1bc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d027      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a50      	ldr	r2, [pc, #320]	; (8008ffc <HAL_DMA_Abort_IT+0x1c0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d022      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4f      	ldr	r2, [pc, #316]	; (8009000 <HAL_DMA_Abort_IT+0x1c4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d01d      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a4d      	ldr	r2, [pc, #308]	; (8009004 <HAL_DMA_Abort_IT+0x1c8>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d018      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a4c      	ldr	r2, [pc, #304]	; (8009008 <HAL_DMA_Abort_IT+0x1cc>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d013      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a4a      	ldr	r2, [pc, #296]	; (800900c <HAL_DMA_Abort_IT+0x1d0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00e      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a49      	ldr	r2, [pc, #292]	; (8009010 <HAL_DMA_Abort_IT+0x1d4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d009      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a47      	ldr	r2, [pc, #284]	; (8009014 <HAL_DMA_Abort_IT+0x1d8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d004      	beq.n	8008f04 <HAL_DMA_Abort_IT+0xc8>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a46      	ldr	r2, [pc, #280]	; (8009018 <HAL_DMA_Abort_IT+0x1dc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d101      	bne.n	8008f08 <HAL_DMA_Abort_IT+0xcc>
 8008f04:	2301      	movs	r3, #1
 8008f06:	e000      	b.n	8008f0a <HAL_DMA_Abort_IT+0xce>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8086 	beq.w	800901c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2204      	movs	r2, #4
 8008f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2f      	ldr	r2, [pc, #188]	; (8008fdc <HAL_DMA_Abort_IT+0x1a0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d04a      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a2e      	ldr	r2, [pc, #184]	; (8008fe0 <HAL_DMA_Abort_IT+0x1a4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d045      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a2c      	ldr	r2, [pc, #176]	; (8008fe4 <HAL_DMA_Abort_IT+0x1a8>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d040      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a2b      	ldr	r2, [pc, #172]	; (8008fe8 <HAL_DMA_Abort_IT+0x1ac>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d03b      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a29      	ldr	r2, [pc, #164]	; (8008fec <HAL_DMA_Abort_IT+0x1b0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d036      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a28      	ldr	r2, [pc, #160]	; (8008ff0 <HAL_DMA_Abort_IT+0x1b4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d031      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a26      	ldr	r2, [pc, #152]	; (8008ff4 <HAL_DMA_Abort_IT+0x1b8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d02c      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a25      	ldr	r2, [pc, #148]	; (8008ff8 <HAL_DMA_Abort_IT+0x1bc>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d027      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a23      	ldr	r2, [pc, #140]	; (8008ffc <HAL_DMA_Abort_IT+0x1c0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d022      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a22      	ldr	r2, [pc, #136]	; (8009000 <HAL_DMA_Abort_IT+0x1c4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d01d      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a20      	ldr	r2, [pc, #128]	; (8009004 <HAL_DMA_Abort_IT+0x1c8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d018      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1f      	ldr	r2, [pc, #124]	; (8009008 <HAL_DMA_Abort_IT+0x1cc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1d      	ldr	r2, [pc, #116]	; (800900c <HAL_DMA_Abort_IT+0x1d0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00e      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <HAL_DMA_Abort_IT+0x1d4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d009      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <HAL_DMA_Abort_IT+0x1d8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <HAL_DMA_Abort_IT+0x17c>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a19      	ldr	r2, [pc, #100]	; (8009018 <HAL_DMA_Abort_IT+0x1dc>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d108      	bne.n	8008fca <HAL_DMA_Abort_IT+0x18e>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e178      	b.n	80092bc <HAL_DMA_Abort_IT+0x480>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e16f      	b.n	80092bc <HAL_DMA_Abort_IT+0x480>
 8008fdc:	40020010 	.word	0x40020010
 8008fe0:	40020028 	.word	0x40020028
 8008fe4:	40020040 	.word	0x40020040
 8008fe8:	40020058 	.word	0x40020058
 8008fec:	40020070 	.word	0x40020070
 8008ff0:	40020088 	.word	0x40020088
 8008ff4:	400200a0 	.word	0x400200a0
 8008ff8:	400200b8 	.word	0x400200b8
 8008ffc:	40020410 	.word	0x40020410
 8009000:	40020428 	.word	0x40020428
 8009004:	40020440 	.word	0x40020440
 8009008:	40020458 	.word	0x40020458
 800900c:	40020470 	.word	0x40020470
 8009010:	40020488 	.word	0x40020488
 8009014:	400204a0 	.word	0x400204a0
 8009018:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 020e 	bic.w	r2, r2, #14
 800902a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a6c      	ldr	r2, [pc, #432]	; (80091e4 <HAL_DMA_Abort_IT+0x3a8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d04a      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a6b      	ldr	r2, [pc, #428]	; (80091e8 <HAL_DMA_Abort_IT+0x3ac>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d045      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a69      	ldr	r2, [pc, #420]	; (80091ec <HAL_DMA_Abort_IT+0x3b0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d040      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a68      	ldr	r2, [pc, #416]	; (80091f0 <HAL_DMA_Abort_IT+0x3b4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d03b      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a66      	ldr	r2, [pc, #408]	; (80091f4 <HAL_DMA_Abort_IT+0x3b8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d036      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a65      	ldr	r2, [pc, #404]	; (80091f8 <HAL_DMA_Abort_IT+0x3bc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d031      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a63      	ldr	r2, [pc, #396]	; (80091fc <HAL_DMA_Abort_IT+0x3c0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d02c      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a62      	ldr	r2, [pc, #392]	; (8009200 <HAL_DMA_Abort_IT+0x3c4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d027      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a60      	ldr	r2, [pc, #384]	; (8009204 <HAL_DMA_Abort_IT+0x3c8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d022      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a5f      	ldr	r2, [pc, #380]	; (8009208 <HAL_DMA_Abort_IT+0x3cc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d01d      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a5d      	ldr	r2, [pc, #372]	; (800920c <HAL_DMA_Abort_IT+0x3d0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d018      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a5c      	ldr	r2, [pc, #368]	; (8009210 <HAL_DMA_Abort_IT+0x3d4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d013      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a5a      	ldr	r2, [pc, #360]	; (8009214 <HAL_DMA_Abort_IT+0x3d8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00e      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a59      	ldr	r2, [pc, #356]	; (8009218 <HAL_DMA_Abort_IT+0x3dc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d009      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a57      	ldr	r2, [pc, #348]	; (800921c <HAL_DMA_Abort_IT+0x3e0>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d004      	beq.n	80090cc <HAL_DMA_Abort_IT+0x290>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a56      	ldr	r2, [pc, #344]	; (8009220 <HAL_DMA_Abort_IT+0x3e4>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d108      	bne.n	80090de <HAL_DMA_Abort_IT+0x2a2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	e007      	b.n	80090ee <HAL_DMA_Abort_IT+0x2b2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a3c      	ldr	r2, [pc, #240]	; (80091e4 <HAL_DMA_Abort_IT+0x3a8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d072      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a3a      	ldr	r2, [pc, #232]	; (80091e8 <HAL_DMA_Abort_IT+0x3ac>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d06d      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a39      	ldr	r2, [pc, #228]	; (80091ec <HAL_DMA_Abort_IT+0x3b0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d068      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a37      	ldr	r2, [pc, #220]	; (80091f0 <HAL_DMA_Abort_IT+0x3b4>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d063      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a36      	ldr	r2, [pc, #216]	; (80091f4 <HAL_DMA_Abort_IT+0x3b8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d05e      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a34      	ldr	r2, [pc, #208]	; (80091f8 <HAL_DMA_Abort_IT+0x3bc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d059      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a33      	ldr	r2, [pc, #204]	; (80091fc <HAL_DMA_Abort_IT+0x3c0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d054      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a31      	ldr	r2, [pc, #196]	; (8009200 <HAL_DMA_Abort_IT+0x3c4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d04f      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a30      	ldr	r2, [pc, #192]	; (8009204 <HAL_DMA_Abort_IT+0x3c8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d04a      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a2e      	ldr	r2, [pc, #184]	; (8009208 <HAL_DMA_Abort_IT+0x3cc>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d045      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a2d      	ldr	r2, [pc, #180]	; (800920c <HAL_DMA_Abort_IT+0x3d0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d040      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a2b      	ldr	r2, [pc, #172]	; (8009210 <HAL_DMA_Abort_IT+0x3d4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d03b      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a2a      	ldr	r2, [pc, #168]	; (8009214 <HAL_DMA_Abort_IT+0x3d8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d036      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a28      	ldr	r2, [pc, #160]	; (8009218 <HAL_DMA_Abort_IT+0x3dc>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d031      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a27      	ldr	r2, [pc, #156]	; (800921c <HAL_DMA_Abort_IT+0x3e0>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d02c      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a25      	ldr	r2, [pc, #148]	; (8009220 <HAL_DMA_Abort_IT+0x3e4>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d027      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a24      	ldr	r2, [pc, #144]	; (8009224 <HAL_DMA_Abort_IT+0x3e8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d022      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a22      	ldr	r2, [pc, #136]	; (8009228 <HAL_DMA_Abort_IT+0x3ec>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d01d      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a21      	ldr	r2, [pc, #132]	; (800922c <HAL_DMA_Abort_IT+0x3f0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d018      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <HAL_DMA_Abort_IT+0x3f4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <HAL_DMA_Abort_IT+0x3f8>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d00e      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <HAL_DMA_Abort_IT+0x3fc>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d009      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a1b      	ldr	r2, [pc, #108]	; (800923c <HAL_DMA_Abort_IT+0x400>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d004      	beq.n	80091de <HAL_DMA_Abort_IT+0x3a2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a19      	ldr	r2, [pc, #100]	; (8009240 <HAL_DMA_Abort_IT+0x404>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d132      	bne.n	8009244 <HAL_DMA_Abort_IT+0x408>
 80091de:	2301      	movs	r3, #1
 80091e0:	e031      	b.n	8009246 <HAL_DMA_Abort_IT+0x40a>
 80091e2:	bf00      	nop
 80091e4:	40020010 	.word	0x40020010
 80091e8:	40020028 	.word	0x40020028
 80091ec:	40020040 	.word	0x40020040
 80091f0:	40020058 	.word	0x40020058
 80091f4:	40020070 	.word	0x40020070
 80091f8:	40020088 	.word	0x40020088
 80091fc:	400200a0 	.word	0x400200a0
 8009200:	400200b8 	.word	0x400200b8
 8009204:	40020410 	.word	0x40020410
 8009208:	40020428 	.word	0x40020428
 800920c:	40020440 	.word	0x40020440
 8009210:	40020458 	.word	0x40020458
 8009214:	40020470 	.word	0x40020470
 8009218:	40020488 	.word	0x40020488
 800921c:	400204a0 	.word	0x400204a0
 8009220:	400204b8 	.word	0x400204b8
 8009224:	58025408 	.word	0x58025408
 8009228:	5802541c 	.word	0x5802541c
 800922c:	58025430 	.word	0x58025430
 8009230:	58025444 	.word	0x58025444
 8009234:	58025458 	.word	0x58025458
 8009238:	5802546c 	.word	0x5802546c
 800923c:	58025480 	.word	0x58025480
 8009240:	58025494 	.word	0x58025494
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d028      	beq.n	800929c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009258:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009264:	f003 031f 	and.w	r3, r3, #31
 8009268:	2201      	movs	r2, #1
 800926a:	409a      	lsls	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009278:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009290:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800929a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop

080092c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80092d4:	4b67      	ldr	r3, [pc, #412]	; (8009474 <HAL_DMA_IRQHandler+0x1ac>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a67      	ldr	r2, [pc, #412]	; (8009478 <HAL_DMA_IRQHandler+0x1b0>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0a9b      	lsrs	r3, r3, #10
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a5f      	ldr	r2, [pc, #380]	; (800947c <HAL_DMA_IRQHandler+0x1b4>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d04a      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a5d      	ldr	r2, [pc, #372]	; (8009480 <HAL_DMA_IRQHandler+0x1b8>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d045      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a5c      	ldr	r2, [pc, #368]	; (8009484 <HAL_DMA_IRQHandler+0x1bc>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d040      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a5a      	ldr	r2, [pc, #360]	; (8009488 <HAL_DMA_IRQHandler+0x1c0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d03b      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a59      	ldr	r2, [pc, #356]	; (800948c <HAL_DMA_IRQHandler+0x1c4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d036      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a57      	ldr	r2, [pc, #348]	; (8009490 <HAL_DMA_IRQHandler+0x1c8>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d031      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a56      	ldr	r2, [pc, #344]	; (8009494 <HAL_DMA_IRQHandler+0x1cc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d02c      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a54      	ldr	r2, [pc, #336]	; (8009498 <HAL_DMA_IRQHandler+0x1d0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d027      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a53      	ldr	r2, [pc, #332]	; (800949c <HAL_DMA_IRQHandler+0x1d4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d022      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a51      	ldr	r2, [pc, #324]	; (80094a0 <HAL_DMA_IRQHandler+0x1d8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d01d      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a50      	ldr	r2, [pc, #320]	; (80094a4 <HAL_DMA_IRQHandler+0x1dc>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d018      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a4e      	ldr	r2, [pc, #312]	; (80094a8 <HAL_DMA_IRQHandler+0x1e0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d013      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a4d      	ldr	r2, [pc, #308]	; (80094ac <HAL_DMA_IRQHandler+0x1e4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00e      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a4b      	ldr	r2, [pc, #300]	; (80094b0 <HAL_DMA_IRQHandler+0x1e8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d009      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a4a      	ldr	r2, [pc, #296]	; (80094b4 <HAL_DMA_IRQHandler+0x1ec>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d004      	beq.n	800939a <HAL_DMA_IRQHandler+0xd2>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a48      	ldr	r2, [pc, #288]	; (80094b8 <HAL_DMA_IRQHandler+0x1f0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d101      	bne.n	800939e <HAL_DMA_IRQHandler+0xd6>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <HAL_DMA_IRQHandler+0xd8>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 842b 	beq.w	8009bfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093aa:	f003 031f 	and.w	r3, r3, #31
 80093ae:	2208      	movs	r2, #8
 80093b0:	409a      	lsls	r2, r3
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4013      	ands	r3, r2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 80a2 	beq.w	8009500 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a2e      	ldr	r2, [pc, #184]	; (800947c <HAL_DMA_IRQHandler+0x1b4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d04a      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2d      	ldr	r2, [pc, #180]	; (8009480 <HAL_DMA_IRQHandler+0x1b8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d045      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <HAL_DMA_IRQHandler+0x1bc>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d040      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a2a      	ldr	r2, [pc, #168]	; (8009488 <HAL_DMA_IRQHandler+0x1c0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d03b      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a28      	ldr	r2, [pc, #160]	; (800948c <HAL_DMA_IRQHandler+0x1c4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d036      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a27      	ldr	r2, [pc, #156]	; (8009490 <HAL_DMA_IRQHandler+0x1c8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d031      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a25      	ldr	r2, [pc, #148]	; (8009494 <HAL_DMA_IRQHandler+0x1cc>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d02c      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a24      	ldr	r2, [pc, #144]	; (8009498 <HAL_DMA_IRQHandler+0x1d0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d027      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a22      	ldr	r2, [pc, #136]	; (800949c <HAL_DMA_IRQHandler+0x1d4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d022      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a21      	ldr	r2, [pc, #132]	; (80094a0 <HAL_DMA_IRQHandler+0x1d8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d01d      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <HAL_DMA_IRQHandler+0x1dc>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a1e      	ldr	r2, [pc, #120]	; (80094a8 <HAL_DMA_IRQHandler+0x1e0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <HAL_DMA_IRQHandler+0x1e4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00e      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <HAL_DMA_IRQHandler+0x1e8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_DMA_IRQHandler+0x1ec>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_DMA_IRQHandler+0x194>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <HAL_DMA_IRQHandler+0x1f0>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d12f      	bne.n	80094bc <HAL_DMA_IRQHandler+0x1f4>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	bf14      	ite	ne
 800946a:	2301      	movne	r3, #1
 800946c:	2300      	moveq	r3, #0
 800946e:	b2db      	uxtb	r3, r3
 8009470:	e02e      	b.n	80094d0 <HAL_DMA_IRQHandler+0x208>
 8009472:	bf00      	nop
 8009474:	240000bc 	.word	0x240000bc
 8009478:	1b4e81b5 	.word	0x1b4e81b5
 800947c:	40020010 	.word	0x40020010
 8009480:	40020028 	.word	0x40020028
 8009484:	40020040 	.word	0x40020040
 8009488:	40020058 	.word	0x40020058
 800948c:	40020070 	.word	0x40020070
 8009490:	40020088 	.word	0x40020088
 8009494:	400200a0 	.word	0x400200a0
 8009498:	400200b8 	.word	0x400200b8
 800949c:	40020410 	.word	0x40020410
 80094a0:	40020428 	.word	0x40020428
 80094a4:	40020440 	.word	0x40020440
 80094a8:	40020458 	.word	0x40020458
 80094ac:	40020470 	.word	0x40020470
 80094b0:	40020488 	.word	0x40020488
 80094b4:	400204a0 	.word	0x400204a0
 80094b8:	400204b8 	.word	0x400204b8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bf14      	ite	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	2300      	moveq	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d015      	beq.n	8009500 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0204 	bic.w	r2, r2, #4
 80094e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2208      	movs	r2, #8
 80094ee:	409a      	lsls	r2, r3
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f8:	f043 0201 	orr.w	r2, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009504:	f003 031f 	and.w	r3, r3, #31
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	fa22 f303 	lsr.w	r3, r2, r3
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d06e      	beq.n	80095f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a69      	ldr	r2, [pc, #420]	; (80096c0 <HAL_DMA_IRQHandler+0x3f8>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d04a      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a67      	ldr	r2, [pc, #412]	; (80096c4 <HAL_DMA_IRQHandler+0x3fc>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d045      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a66      	ldr	r2, [pc, #408]	; (80096c8 <HAL_DMA_IRQHandler+0x400>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d040      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a64      	ldr	r2, [pc, #400]	; (80096cc <HAL_DMA_IRQHandler+0x404>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d03b      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a63      	ldr	r2, [pc, #396]	; (80096d0 <HAL_DMA_IRQHandler+0x408>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d036      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a61      	ldr	r2, [pc, #388]	; (80096d4 <HAL_DMA_IRQHandler+0x40c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d031      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a60      	ldr	r2, [pc, #384]	; (80096d8 <HAL_DMA_IRQHandler+0x410>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d02c      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a5e      	ldr	r2, [pc, #376]	; (80096dc <HAL_DMA_IRQHandler+0x414>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d027      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a5d      	ldr	r2, [pc, #372]	; (80096e0 <HAL_DMA_IRQHandler+0x418>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d022      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a5b      	ldr	r2, [pc, #364]	; (80096e4 <HAL_DMA_IRQHandler+0x41c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01d      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a5a      	ldr	r2, [pc, #360]	; (80096e8 <HAL_DMA_IRQHandler+0x420>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a58      	ldr	r2, [pc, #352]	; (80096ec <HAL_DMA_IRQHandler+0x424>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a57      	ldr	r2, [pc, #348]	; (80096f0 <HAL_DMA_IRQHandler+0x428>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00e      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a55      	ldr	r2, [pc, #340]	; (80096f4 <HAL_DMA_IRQHandler+0x42c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d009      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a54      	ldr	r2, [pc, #336]	; (80096f8 <HAL_DMA_IRQHandler+0x430>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x2ee>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a52      	ldr	r2, [pc, #328]	; (80096fc <HAL_DMA_IRQHandler+0x434>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d10a      	bne.n	80095cc <HAL_DMA_IRQHandler+0x304>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bf14      	ite	ne
 80095c4:	2301      	movne	r3, #1
 80095c6:	2300      	moveq	r3, #0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	e003      	b.n	80095d4 <HAL_DMA_IRQHandler+0x30c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00d      	beq.n	80095f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095dc:	f003 031f 	and.w	r3, r3, #31
 80095e0:	2201      	movs	r2, #1
 80095e2:	409a      	lsls	r2, r3
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ec:	f043 0202 	orr.w	r2, r3, #2
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	2204      	movs	r2, #4
 80095fe:	409a      	lsls	r2, r3
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	4013      	ands	r3, r2
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 808f 	beq.w	8009728 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a2c      	ldr	r2, [pc, #176]	; (80096c0 <HAL_DMA_IRQHandler+0x3f8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d04a      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a2a      	ldr	r2, [pc, #168]	; (80096c4 <HAL_DMA_IRQHandler+0x3fc>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d045      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a29      	ldr	r2, [pc, #164]	; (80096c8 <HAL_DMA_IRQHandler+0x400>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d040      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a27      	ldr	r2, [pc, #156]	; (80096cc <HAL_DMA_IRQHandler+0x404>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d03b      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <HAL_DMA_IRQHandler+0x408>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d036      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a24      	ldr	r2, [pc, #144]	; (80096d4 <HAL_DMA_IRQHandler+0x40c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d031      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a23      	ldr	r2, [pc, #140]	; (80096d8 <HAL_DMA_IRQHandler+0x410>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d02c      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a21      	ldr	r2, [pc, #132]	; (80096dc <HAL_DMA_IRQHandler+0x414>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d027      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a20      	ldr	r2, [pc, #128]	; (80096e0 <HAL_DMA_IRQHandler+0x418>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d022      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <HAL_DMA_IRQHandler+0x41c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d01d      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a1d      	ldr	r2, [pc, #116]	; (80096e8 <HAL_DMA_IRQHandler+0x420>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d018      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a1b      	ldr	r2, [pc, #108]	; (80096ec <HAL_DMA_IRQHandler+0x424>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d013      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a1a      	ldr	r2, [pc, #104]	; (80096f0 <HAL_DMA_IRQHandler+0x428>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00e      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <HAL_DMA_IRQHandler+0x42c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d009      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <HAL_DMA_IRQHandler+0x430>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d004      	beq.n	80096aa <HAL_DMA_IRQHandler+0x3e2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a15      	ldr	r2, [pc, #84]	; (80096fc <HAL_DMA_IRQHandler+0x434>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d12a      	bne.n	8009700 <HAL_DMA_IRQHandler+0x438>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf14      	ite	ne
 80096b8:	2301      	movne	r3, #1
 80096ba:	2300      	moveq	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e023      	b.n	8009708 <HAL_DMA_IRQHandler+0x440>
 80096c0:	40020010 	.word	0x40020010
 80096c4:	40020028 	.word	0x40020028
 80096c8:	40020040 	.word	0x40020040
 80096cc:	40020058 	.word	0x40020058
 80096d0:	40020070 	.word	0x40020070
 80096d4:	40020088 	.word	0x40020088
 80096d8:	400200a0 	.word	0x400200a0
 80096dc:	400200b8 	.word	0x400200b8
 80096e0:	40020410 	.word	0x40020410
 80096e4:	40020428 	.word	0x40020428
 80096e8:	40020440 	.word	0x40020440
 80096ec:	40020458 	.word	0x40020458
 80096f0:	40020470 	.word	0x40020470
 80096f4:	40020488 	.word	0x40020488
 80096f8:	400204a0 	.word	0x400204a0
 80096fc:	400204b8 	.word	0x400204b8
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00d      	beq.n	8009728 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2204      	movs	r2, #4
 8009716:	409a      	lsls	r2, r3
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009720:	f043 0204 	orr.w	r2, r3, #4
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	2210      	movs	r2, #16
 8009732:	409a      	lsls	r2, r3
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 80a6 	beq.w	800988a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a85      	ldr	r2, [pc, #532]	; (8009958 <HAL_DMA_IRQHandler+0x690>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d04a      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a83      	ldr	r2, [pc, #524]	; (800995c <HAL_DMA_IRQHandler+0x694>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d045      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a82      	ldr	r2, [pc, #520]	; (8009960 <HAL_DMA_IRQHandler+0x698>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d040      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a80      	ldr	r2, [pc, #512]	; (8009964 <HAL_DMA_IRQHandler+0x69c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d03b      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a7f      	ldr	r2, [pc, #508]	; (8009968 <HAL_DMA_IRQHandler+0x6a0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d036      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a7d      	ldr	r2, [pc, #500]	; (800996c <HAL_DMA_IRQHandler+0x6a4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d031      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a7c      	ldr	r2, [pc, #496]	; (8009970 <HAL_DMA_IRQHandler+0x6a8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d02c      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a7a      	ldr	r2, [pc, #488]	; (8009974 <HAL_DMA_IRQHandler+0x6ac>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d027      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a79      	ldr	r2, [pc, #484]	; (8009978 <HAL_DMA_IRQHandler+0x6b0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d022      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a77      	ldr	r2, [pc, #476]	; (800997c <HAL_DMA_IRQHandler+0x6b4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d01d      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a76      	ldr	r2, [pc, #472]	; (8009980 <HAL_DMA_IRQHandler+0x6b8>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d018      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a74      	ldr	r2, [pc, #464]	; (8009984 <HAL_DMA_IRQHandler+0x6bc>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d013      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a73      	ldr	r2, [pc, #460]	; (8009988 <HAL_DMA_IRQHandler+0x6c0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00e      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a71      	ldr	r2, [pc, #452]	; (800998c <HAL_DMA_IRQHandler+0x6c4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d009      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a70      	ldr	r2, [pc, #448]	; (8009990 <HAL_DMA_IRQHandler+0x6c8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_DMA_IRQHandler+0x516>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a6e      	ldr	r2, [pc, #440]	; (8009994 <HAL_DMA_IRQHandler+0x6cc>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d10a      	bne.n	80097f4 <HAL_DMA_IRQHandler+0x52c>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bf14      	ite	ne
 80097ec:	2301      	movne	r3, #1
 80097ee:	2300      	moveq	r3, #0
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	e009      	b.n	8009808 <HAL_DMA_IRQHandler+0x540>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bf14      	ite	ne
 8009802:	2301      	movne	r3, #1
 8009804:	2300      	moveq	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d03e      	beq.n	800988a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	2210      	movs	r2, #16
 8009816:	409a      	lsls	r2, r3
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d018      	beq.n	800985c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d108      	bne.n	800984a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d024      	beq.n	800988a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
 8009848:	e01f      	b.n	800988a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01b      	beq.n	800988a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
 800985a:	e016      	b.n	800988a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009866:	2b00      	cmp	r3, #0
 8009868:	d107      	bne.n	800987a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0208 	bic.w	r2, r2, #8
 8009878:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	2220      	movs	r2, #32
 8009894:	409a      	lsls	r2, r3
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8110 	beq.w	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a2c      	ldr	r2, [pc, #176]	; (8009958 <HAL_DMA_IRQHandler+0x690>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d04a      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a2b      	ldr	r2, [pc, #172]	; (800995c <HAL_DMA_IRQHandler+0x694>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d045      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a29      	ldr	r2, [pc, #164]	; (8009960 <HAL_DMA_IRQHandler+0x698>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d040      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a28      	ldr	r2, [pc, #160]	; (8009964 <HAL_DMA_IRQHandler+0x69c>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d03b      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a26      	ldr	r2, [pc, #152]	; (8009968 <HAL_DMA_IRQHandler+0x6a0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d036      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a25      	ldr	r2, [pc, #148]	; (800996c <HAL_DMA_IRQHandler+0x6a4>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d031      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a23      	ldr	r2, [pc, #140]	; (8009970 <HAL_DMA_IRQHandler+0x6a8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d02c      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a22      	ldr	r2, [pc, #136]	; (8009974 <HAL_DMA_IRQHandler+0x6ac>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d027      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a20      	ldr	r2, [pc, #128]	; (8009978 <HAL_DMA_IRQHandler+0x6b0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d022      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1f      	ldr	r2, [pc, #124]	; (800997c <HAL_DMA_IRQHandler+0x6b4>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d01d      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a1d      	ldr	r2, [pc, #116]	; (8009980 <HAL_DMA_IRQHandler+0x6b8>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d018      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a1c      	ldr	r2, [pc, #112]	; (8009984 <HAL_DMA_IRQHandler+0x6bc>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1a      	ldr	r2, [pc, #104]	; (8009988 <HAL_DMA_IRQHandler+0x6c0>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a19      	ldr	r2, [pc, #100]	; (800998c <HAL_DMA_IRQHandler+0x6c4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d009      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a17      	ldr	r2, [pc, #92]	; (8009990 <HAL_DMA_IRQHandler+0x6c8>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_DMA_IRQHandler+0x678>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a16      	ldr	r2, [pc, #88]	; (8009994 <HAL_DMA_IRQHandler+0x6cc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d12b      	bne.n	8009998 <HAL_DMA_IRQHandler+0x6d0>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b00      	cmp	r3, #0
 800994c:	bf14      	ite	ne
 800994e:	2301      	movne	r3, #1
 8009950:	2300      	moveq	r3, #0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	e02a      	b.n	80099ac <HAL_DMA_IRQHandler+0x6e4>
 8009956:	bf00      	nop
 8009958:	40020010 	.word	0x40020010
 800995c:	40020028 	.word	0x40020028
 8009960:	40020040 	.word	0x40020040
 8009964:	40020058 	.word	0x40020058
 8009968:	40020070 	.word	0x40020070
 800996c:	40020088 	.word	0x40020088
 8009970:	400200a0 	.word	0x400200a0
 8009974:	400200b8 	.word	0x400200b8
 8009978:	40020410 	.word	0x40020410
 800997c:	40020428 	.word	0x40020428
 8009980:	40020440 	.word	0x40020440
 8009984:	40020458 	.word	0x40020458
 8009988:	40020470 	.word	0x40020470
 800998c:	40020488 	.word	0x40020488
 8009990:	400204a0 	.word	0x400204a0
 8009994:	400204b8 	.word	0x400204b8
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bf14      	ite	ne
 80099a6:	2301      	movne	r3, #1
 80099a8:	2300      	moveq	r3, #0
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8087 	beq.w	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	2220      	movs	r2, #32
 80099bc:	409a      	lsls	r2, r3
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d139      	bne.n	8009a42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0216 	bic.w	r2, r2, #22
 80099dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d103      	bne.n	80099fe <HAL_DMA_IRQHandler+0x736>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d007      	beq.n	8009a0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0208 	bic.w	r2, r2, #8
 8009a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	223f      	movs	r2, #63	; 0x3f
 8009a18:	409a      	lsls	r2, r3
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 834a 	beq.w	800a0cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
          }
          return;
 8009a40:	e344      	b.n	800a0cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d018      	beq.n	8009a82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d108      	bne.n	8009a70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d02c      	beq.n	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4798      	blx	r3
 8009a6e:	e027      	b.n	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d023      	beq.n	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3
 8009a80:	e01e      	b.n	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10f      	bne.n	8009ab0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0210 	bic.w	r2, r2, #16
 8009a9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8306 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8088 	beq.w	8009be8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2204      	movs	r2, #4
 8009adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a7a      	ldr	r2, [pc, #488]	; (8009cd0 <HAL_DMA_IRQHandler+0xa08>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d04a      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a79      	ldr	r2, [pc, #484]	; (8009cd4 <HAL_DMA_IRQHandler+0xa0c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d045      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a77      	ldr	r2, [pc, #476]	; (8009cd8 <HAL_DMA_IRQHandler+0xa10>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d040      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a76      	ldr	r2, [pc, #472]	; (8009cdc <HAL_DMA_IRQHandler+0xa14>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d03b      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a74      	ldr	r2, [pc, #464]	; (8009ce0 <HAL_DMA_IRQHandler+0xa18>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d036      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a73      	ldr	r2, [pc, #460]	; (8009ce4 <HAL_DMA_IRQHandler+0xa1c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d031      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a71      	ldr	r2, [pc, #452]	; (8009ce8 <HAL_DMA_IRQHandler+0xa20>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d02c      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a70      	ldr	r2, [pc, #448]	; (8009cec <HAL_DMA_IRQHandler+0xa24>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d027      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a6e      	ldr	r2, [pc, #440]	; (8009cf0 <HAL_DMA_IRQHandler+0xa28>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d022      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a6d      	ldr	r2, [pc, #436]	; (8009cf4 <HAL_DMA_IRQHandler+0xa2c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d01d      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a6b      	ldr	r2, [pc, #428]	; (8009cf8 <HAL_DMA_IRQHandler+0xa30>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d018      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a6a      	ldr	r2, [pc, #424]	; (8009cfc <HAL_DMA_IRQHandler+0xa34>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a68      	ldr	r2, [pc, #416]	; (8009d00 <HAL_DMA_IRQHandler+0xa38>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00e      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a67      	ldr	r2, [pc, #412]	; (8009d04 <HAL_DMA_IRQHandler+0xa3c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a65      	ldr	r2, [pc, #404]	; (8009d08 <HAL_DMA_IRQHandler+0xa40>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_DMA_IRQHandler+0x8b8>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a64      	ldr	r2, [pc, #400]	; (8009d0c <HAL_DMA_IRQHandler+0xa44>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d108      	bne.n	8009b92 <HAL_DMA_IRQHandler+0x8ca>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0201 	bic.w	r2, r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	e007      	b.n	8009ba2 <HAL_DMA_IRQHandler+0x8da>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0201 	bic.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d307      	bcc.n	8009bbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f2      	bne.n	8009ba2 <HAL_DMA_IRQHandler+0x8da>
 8009bbc:	e000      	b.n	8009bc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009bbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009bd6:	e003      	b.n	8009be0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8272 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
 8009bfa:	e26c      	b.n	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a43      	ldr	r2, [pc, #268]	; (8009d10 <HAL_DMA_IRQHandler+0xa48>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d022      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a42      	ldr	r2, [pc, #264]	; (8009d14 <HAL_DMA_IRQHandler+0xa4c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d01d      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a40      	ldr	r2, [pc, #256]	; (8009d18 <HAL_DMA_IRQHandler+0xa50>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d018      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a3f      	ldr	r2, [pc, #252]	; (8009d1c <HAL_DMA_IRQHandler+0xa54>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d013      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a3d      	ldr	r2, [pc, #244]	; (8009d20 <HAL_DMA_IRQHandler+0xa58>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00e      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a3c      	ldr	r2, [pc, #240]	; (8009d24 <HAL_DMA_IRQHandler+0xa5c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a3a      	ldr	r2, [pc, #232]	; (8009d28 <HAL_DMA_IRQHandler+0xa60>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x984>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a39      	ldr	r2, [pc, #228]	; (8009d2c <HAL_DMA_IRQHandler+0xa64>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d101      	bne.n	8009c50 <HAL_DMA_IRQHandler+0x988>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e000      	b.n	8009c52 <HAL_DMA_IRQHandler+0x98a>
 8009c50:	2300      	movs	r3, #0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 823f 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	2204      	movs	r2, #4
 8009c6a:	409a      	lsls	r2, r3
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80cd 	beq.w	8009e10 <HAL_DMA_IRQHandler+0xb48>
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80c7 	beq.w	8009e10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	409a      	lsls	r2, r3
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d049      	beq.n	8009d30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d109      	bne.n	8009cba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 8210 	beq.w	800a0d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cb8:	e20a      	b.n	800a0d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 8206 	beq.w	800a0d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ccc:	e200      	b.n	800a0d0 <HAL_DMA_IRQHandler+0xe08>
 8009cce:	bf00      	nop
 8009cd0:	40020010 	.word	0x40020010
 8009cd4:	40020028 	.word	0x40020028
 8009cd8:	40020040 	.word	0x40020040
 8009cdc:	40020058 	.word	0x40020058
 8009ce0:	40020070 	.word	0x40020070
 8009ce4:	40020088 	.word	0x40020088
 8009ce8:	400200a0 	.word	0x400200a0
 8009cec:	400200b8 	.word	0x400200b8
 8009cf0:	40020410 	.word	0x40020410
 8009cf4:	40020428 	.word	0x40020428
 8009cf8:	40020440 	.word	0x40020440
 8009cfc:	40020458 	.word	0x40020458
 8009d00:	40020470 	.word	0x40020470
 8009d04:	40020488 	.word	0x40020488
 8009d08:	400204a0 	.word	0x400204a0
 8009d0c:	400204b8 	.word	0x400204b8
 8009d10:	58025408 	.word	0x58025408
 8009d14:	5802541c 	.word	0x5802541c
 8009d18:	58025430 	.word	0x58025430
 8009d1c:	58025444 	.word	0x58025444
 8009d20:	58025458 	.word	0x58025458
 8009d24:	5802546c 	.word	0x5802546c
 8009d28:	58025480 	.word	0x58025480
 8009d2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d160      	bne.n	8009dfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a7f      	ldr	r2, [pc, #508]	; (8009f3c <HAL_DMA_IRQHandler+0xc74>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d04a      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a7d      	ldr	r2, [pc, #500]	; (8009f40 <HAL_DMA_IRQHandler+0xc78>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d045      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a7c      	ldr	r2, [pc, #496]	; (8009f44 <HAL_DMA_IRQHandler+0xc7c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d040      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a7a      	ldr	r2, [pc, #488]	; (8009f48 <HAL_DMA_IRQHandler+0xc80>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d03b      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a79      	ldr	r2, [pc, #484]	; (8009f4c <HAL_DMA_IRQHandler+0xc84>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d036      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a77      	ldr	r2, [pc, #476]	; (8009f50 <HAL_DMA_IRQHandler+0xc88>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d031      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a76      	ldr	r2, [pc, #472]	; (8009f54 <HAL_DMA_IRQHandler+0xc8c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d02c      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a74      	ldr	r2, [pc, #464]	; (8009f58 <HAL_DMA_IRQHandler+0xc90>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d027      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a73      	ldr	r2, [pc, #460]	; (8009f5c <HAL_DMA_IRQHandler+0xc94>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d022      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a71      	ldr	r2, [pc, #452]	; (8009f60 <HAL_DMA_IRQHandler+0xc98>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d01d      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a70      	ldr	r2, [pc, #448]	; (8009f64 <HAL_DMA_IRQHandler+0xc9c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d018      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a6e      	ldr	r2, [pc, #440]	; (8009f68 <HAL_DMA_IRQHandler+0xca0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a6d      	ldr	r2, [pc, #436]	; (8009f6c <HAL_DMA_IRQHandler+0xca4>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00e      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a6b      	ldr	r2, [pc, #428]	; (8009f70 <HAL_DMA_IRQHandler+0xca8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d009      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a6a      	ldr	r2, [pc, #424]	; (8009f74 <HAL_DMA_IRQHandler+0xcac>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d004      	beq.n	8009dda <HAL_DMA_IRQHandler+0xb12>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a68      	ldr	r2, [pc, #416]	; (8009f78 <HAL_DMA_IRQHandler+0xcb0>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d108      	bne.n	8009dec <HAL_DMA_IRQHandler+0xb24>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0208 	bic.w	r2, r2, #8
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	e007      	b.n	8009dfc <HAL_DMA_IRQHandler+0xb34>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f022 0204 	bic.w	r2, r2, #4
 8009dfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 8165 	beq.w	800a0d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e0e:	e15f      	b.n	800a0d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	2202      	movs	r2, #2
 8009e1a:	409a      	lsls	r2, r3
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80c5 	beq.w	8009fb0 <HAL_DMA_IRQHandler+0xce8>
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80bf 	beq.w	8009fb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	409a      	lsls	r2, r3
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d018      	beq.n	8009e7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d109      	bne.n	8009e6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 813a 	beq.w	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e68:	e134      	b.n	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8130 	beq.w	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e7c:	e12a      	b.n	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f040 8089 	bne.w	8009f9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a2b      	ldr	r2, [pc, #172]	; (8009f3c <HAL_DMA_IRQHandler+0xc74>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d04a      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a29      	ldr	r2, [pc, #164]	; (8009f40 <HAL_DMA_IRQHandler+0xc78>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d045      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a28      	ldr	r2, [pc, #160]	; (8009f44 <HAL_DMA_IRQHandler+0xc7c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d040      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a26      	ldr	r2, [pc, #152]	; (8009f48 <HAL_DMA_IRQHandler+0xc80>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d03b      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a25      	ldr	r2, [pc, #148]	; (8009f4c <HAL_DMA_IRQHandler+0xc84>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d036      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a23      	ldr	r2, [pc, #140]	; (8009f50 <HAL_DMA_IRQHandler+0xc88>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d031      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a22      	ldr	r2, [pc, #136]	; (8009f54 <HAL_DMA_IRQHandler+0xc8c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d02c      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a20      	ldr	r2, [pc, #128]	; (8009f58 <HAL_DMA_IRQHandler+0xc90>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d027      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a1f      	ldr	r2, [pc, #124]	; (8009f5c <HAL_DMA_IRQHandler+0xc94>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d022      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <HAL_DMA_IRQHandler+0xc98>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01d      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1c      	ldr	r2, [pc, #112]	; (8009f64 <HAL_DMA_IRQHandler+0xc9c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d018      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1a      	ldr	r2, [pc, #104]	; (8009f68 <HAL_DMA_IRQHandler+0xca0>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a19      	ldr	r2, [pc, #100]	; (8009f6c <HAL_DMA_IRQHandler+0xca4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00e      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a17      	ldr	r2, [pc, #92]	; (8009f70 <HAL_DMA_IRQHandler+0xca8>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a16      	ldr	r2, [pc, #88]	; (8009f74 <HAL_DMA_IRQHandler+0xcac>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d004      	beq.n	8009f2a <HAL_DMA_IRQHandler+0xc62>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a14      	ldr	r2, [pc, #80]	; (8009f78 <HAL_DMA_IRQHandler+0xcb0>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d128      	bne.n	8009f7c <HAL_DMA_IRQHandler+0xcb4>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0214 	bic.w	r2, r2, #20
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	e027      	b.n	8009f8c <HAL_DMA_IRQHandler+0xcc4>
 8009f3c:	40020010 	.word	0x40020010
 8009f40:	40020028 	.word	0x40020028
 8009f44:	40020040 	.word	0x40020040
 8009f48:	40020058 	.word	0x40020058
 8009f4c:	40020070 	.word	0x40020070
 8009f50:	40020088 	.word	0x40020088
 8009f54:	400200a0 	.word	0x400200a0
 8009f58:	400200b8 	.word	0x400200b8
 8009f5c:	40020410 	.word	0x40020410
 8009f60:	40020428 	.word	0x40020428
 8009f64:	40020440 	.word	0x40020440
 8009f68:	40020458 	.word	0x40020458
 8009f6c:	40020470 	.word	0x40020470
 8009f70:	40020488 	.word	0x40020488
 8009f74:	400204a0 	.word	0x400204a0
 8009f78:	400204b8 	.word	0x400204b8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 020a 	bic.w	r2, r2, #10
 8009f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 8097 	beq.w	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009fae:	e091      	b.n	800a0d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	2208      	movs	r2, #8
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8088 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8082 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a41      	ldr	r2, [pc, #260]	; (800a0dc <HAL_DMA_IRQHandler+0xe14>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d04a      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a3f      	ldr	r2, [pc, #252]	; (800a0e0 <HAL_DMA_IRQHandler+0xe18>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d045      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a3e      	ldr	r2, [pc, #248]	; (800a0e4 <HAL_DMA_IRQHandler+0xe1c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d040      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a3c      	ldr	r2, [pc, #240]	; (800a0e8 <HAL_DMA_IRQHandler+0xe20>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d03b      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a3b      	ldr	r2, [pc, #236]	; (800a0ec <HAL_DMA_IRQHandler+0xe24>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d036      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a39      	ldr	r2, [pc, #228]	; (800a0f0 <HAL_DMA_IRQHandler+0xe28>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d031      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a38      	ldr	r2, [pc, #224]	; (800a0f4 <HAL_DMA_IRQHandler+0xe2c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d02c      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a36      	ldr	r2, [pc, #216]	; (800a0f8 <HAL_DMA_IRQHandler+0xe30>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d027      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a35      	ldr	r2, [pc, #212]	; (800a0fc <HAL_DMA_IRQHandler+0xe34>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d022      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a33      	ldr	r2, [pc, #204]	; (800a100 <HAL_DMA_IRQHandler+0xe38>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01d      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a32      	ldr	r2, [pc, #200]	; (800a104 <HAL_DMA_IRQHandler+0xe3c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d018      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a30      	ldr	r2, [pc, #192]	; (800a108 <HAL_DMA_IRQHandler+0xe40>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a2f      	ldr	r2, [pc, #188]	; (800a10c <HAL_DMA_IRQHandler+0xe44>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00e      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a2d      	ldr	r2, [pc, #180]	; (800a110 <HAL_DMA_IRQHandler+0xe48>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d009      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a2c      	ldr	r2, [pc, #176]	; (800a114 <HAL_DMA_IRQHandler+0xe4c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d004      	beq.n	800a072 <HAL_DMA_IRQHandler+0xdaa>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a2a      	ldr	r2, [pc, #168]	; (800a118 <HAL_DMA_IRQHandler+0xe50>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d108      	bne.n	800a084 <HAL_DMA_IRQHandler+0xdbc>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 021c 	bic.w	r2, r2, #28
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	e007      	b.n	800a094 <HAL_DMA_IRQHandler+0xdcc>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 020e 	bic.w	r2, r2, #14
 800a092:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	2201      	movs	r2, #1
 800a09e:	409a      	lsls	r2, r3
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	4798      	blx	r3
 800a0ca:	e004      	b.n	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a0cc:	bf00      	nop
 800a0ce:	e002      	b.n	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0d0:	bf00      	nop
 800a0d2:	e000      	b.n	800a0d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a0d6:	3728      	adds	r7, #40	; 0x28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	40020010 	.word	0x40020010
 800a0e0:	40020028 	.word	0x40020028
 800a0e4:	40020040 	.word	0x40020040
 800a0e8:	40020058 	.word	0x40020058
 800a0ec:	40020070 	.word	0x40020070
 800a0f0:	40020088 	.word	0x40020088
 800a0f4:	400200a0 	.word	0x400200a0
 800a0f8:	400200b8 	.word	0x400200b8
 800a0fc:	40020410 	.word	0x40020410
 800a100:	40020428 	.word	0x40020428
 800a104:	40020440 	.word	0x40020440
 800a108:	40020458 	.word	0x40020458
 800a10c:	40020470 	.word	0x40020470
 800a110:	40020488 	.word	0x40020488
 800a114:	400204a0 	.word	0x400204a0
 800a118:	400204b8 	.word	0x400204b8

0800a11c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a12a:	b2db      	uxtb	r3, r3
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a162:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a168:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a7f      	ldr	r2, [pc, #508]	; (800a36c <DMA_SetConfig+0x21c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d072      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a7d      	ldr	r2, [pc, #500]	; (800a370 <DMA_SetConfig+0x220>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d06d      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a7c      	ldr	r2, [pc, #496]	; (800a374 <DMA_SetConfig+0x224>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d068      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a7a      	ldr	r2, [pc, #488]	; (800a378 <DMA_SetConfig+0x228>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d063      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a79      	ldr	r2, [pc, #484]	; (800a37c <DMA_SetConfig+0x22c>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d05e      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a77      	ldr	r2, [pc, #476]	; (800a380 <DMA_SetConfig+0x230>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d059      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a76      	ldr	r2, [pc, #472]	; (800a384 <DMA_SetConfig+0x234>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d054      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a74      	ldr	r2, [pc, #464]	; (800a388 <DMA_SetConfig+0x238>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d04f      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a73      	ldr	r2, [pc, #460]	; (800a38c <DMA_SetConfig+0x23c>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d04a      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a71      	ldr	r2, [pc, #452]	; (800a390 <DMA_SetConfig+0x240>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d045      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a70      	ldr	r2, [pc, #448]	; (800a394 <DMA_SetConfig+0x244>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d040      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a6e      	ldr	r2, [pc, #440]	; (800a398 <DMA_SetConfig+0x248>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d03b      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a6d      	ldr	r2, [pc, #436]	; (800a39c <DMA_SetConfig+0x24c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d036      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a6b      	ldr	r2, [pc, #428]	; (800a3a0 <DMA_SetConfig+0x250>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d031      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a6a      	ldr	r2, [pc, #424]	; (800a3a4 <DMA_SetConfig+0x254>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d02c      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a68      	ldr	r2, [pc, #416]	; (800a3a8 <DMA_SetConfig+0x258>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d027      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a67      	ldr	r2, [pc, #412]	; (800a3ac <DMA_SetConfig+0x25c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d022      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a65      	ldr	r2, [pc, #404]	; (800a3b0 <DMA_SetConfig+0x260>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d01d      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a64      	ldr	r2, [pc, #400]	; (800a3b4 <DMA_SetConfig+0x264>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d018      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a62      	ldr	r2, [pc, #392]	; (800a3b8 <DMA_SetConfig+0x268>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d013      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a61      	ldr	r2, [pc, #388]	; (800a3bc <DMA_SetConfig+0x26c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d00e      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a5f      	ldr	r2, [pc, #380]	; (800a3c0 <DMA_SetConfig+0x270>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d009      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a5e      	ldr	r2, [pc, #376]	; (800a3c4 <DMA_SetConfig+0x274>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d004      	beq.n	800a25a <DMA_SetConfig+0x10a>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a5c      	ldr	r2, [pc, #368]	; (800a3c8 <DMA_SetConfig+0x278>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d101      	bne.n	800a25e <DMA_SetConfig+0x10e>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <DMA_SetConfig+0x110>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00d      	beq.n	800a280 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a26c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d004      	beq.n	800a280 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a27e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a39      	ldr	r2, [pc, #228]	; (800a36c <DMA_SetConfig+0x21c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d04a      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a38      	ldr	r2, [pc, #224]	; (800a370 <DMA_SetConfig+0x220>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d045      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a36      	ldr	r2, [pc, #216]	; (800a374 <DMA_SetConfig+0x224>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d040      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a35      	ldr	r2, [pc, #212]	; (800a378 <DMA_SetConfig+0x228>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d03b      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a33      	ldr	r2, [pc, #204]	; (800a37c <DMA_SetConfig+0x22c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d036      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a32      	ldr	r2, [pc, #200]	; (800a380 <DMA_SetConfig+0x230>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d031      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a30      	ldr	r2, [pc, #192]	; (800a384 <DMA_SetConfig+0x234>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d02c      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a2f      	ldr	r2, [pc, #188]	; (800a388 <DMA_SetConfig+0x238>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d027      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a2d      	ldr	r2, [pc, #180]	; (800a38c <DMA_SetConfig+0x23c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d022      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a2c      	ldr	r2, [pc, #176]	; (800a390 <DMA_SetConfig+0x240>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d01d      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a2a      	ldr	r2, [pc, #168]	; (800a394 <DMA_SetConfig+0x244>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d018      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a29      	ldr	r2, [pc, #164]	; (800a398 <DMA_SetConfig+0x248>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d013      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a27      	ldr	r2, [pc, #156]	; (800a39c <DMA_SetConfig+0x24c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00e      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <DMA_SetConfig+0x250>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d009      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a24      	ldr	r2, [pc, #144]	; (800a3a4 <DMA_SetConfig+0x254>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d004      	beq.n	800a320 <DMA_SetConfig+0x1d0>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a23      	ldr	r2, [pc, #140]	; (800a3a8 <DMA_SetConfig+0x258>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d101      	bne.n	800a324 <DMA_SetConfig+0x1d4>
 800a320:	2301      	movs	r3, #1
 800a322:	e000      	b.n	800a326 <DMA_SetConfig+0x1d6>
 800a324:	2300      	movs	r3, #0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d059      	beq.n	800a3de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a32e:	f003 031f 	and.w	r3, r3, #31
 800a332:	223f      	movs	r2, #63	; 0x3f
 800a334:	409a      	lsls	r2, r3
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a348:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b40      	cmp	r3, #64	; 0x40
 800a358:	d138      	bne.n	800a3cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a36a:	e086      	b.n	800a47a <DMA_SetConfig+0x32a>
 800a36c:	40020010 	.word	0x40020010
 800a370:	40020028 	.word	0x40020028
 800a374:	40020040 	.word	0x40020040
 800a378:	40020058 	.word	0x40020058
 800a37c:	40020070 	.word	0x40020070
 800a380:	40020088 	.word	0x40020088
 800a384:	400200a0 	.word	0x400200a0
 800a388:	400200b8 	.word	0x400200b8
 800a38c:	40020410 	.word	0x40020410
 800a390:	40020428 	.word	0x40020428
 800a394:	40020440 	.word	0x40020440
 800a398:	40020458 	.word	0x40020458
 800a39c:	40020470 	.word	0x40020470
 800a3a0:	40020488 	.word	0x40020488
 800a3a4:	400204a0 	.word	0x400204a0
 800a3a8:	400204b8 	.word	0x400204b8
 800a3ac:	58025408 	.word	0x58025408
 800a3b0:	5802541c 	.word	0x5802541c
 800a3b4:	58025430 	.word	0x58025430
 800a3b8:	58025444 	.word	0x58025444
 800a3bc:	58025458 	.word	0x58025458
 800a3c0:	5802546c 	.word	0x5802546c
 800a3c4:	58025480 	.word	0x58025480
 800a3c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	60da      	str	r2, [r3, #12]
}
 800a3dc:	e04d      	b.n	800a47a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a29      	ldr	r2, [pc, #164]	; (800a488 <DMA_SetConfig+0x338>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d022      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a27      	ldr	r2, [pc, #156]	; (800a48c <DMA_SetConfig+0x33c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d01d      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a26      	ldr	r2, [pc, #152]	; (800a490 <DMA_SetConfig+0x340>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d018      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a24      	ldr	r2, [pc, #144]	; (800a494 <DMA_SetConfig+0x344>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d013      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a23      	ldr	r2, [pc, #140]	; (800a498 <DMA_SetConfig+0x348>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00e      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a21      	ldr	r2, [pc, #132]	; (800a49c <DMA_SetConfig+0x34c>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d009      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a20      	ldr	r2, [pc, #128]	; (800a4a0 <DMA_SetConfig+0x350>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d004      	beq.n	800a42e <DMA_SetConfig+0x2de>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1e      	ldr	r2, [pc, #120]	; (800a4a4 <DMA_SetConfig+0x354>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d101      	bne.n	800a432 <DMA_SetConfig+0x2e2>
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <DMA_SetConfig+0x2e4>
 800a432:	2300      	movs	r3, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d020      	beq.n	800a47a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	2201      	movs	r2, #1
 800a442:	409a      	lsls	r2, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d108      	bne.n	800a46a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	60da      	str	r2, [r3, #12]
}
 800a468:	e007      	b.n	800a47a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	60da      	str	r2, [r3, #12]
}
 800a47a:	bf00      	nop
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	58025408 	.word	0x58025408
 800a48c:	5802541c 	.word	0x5802541c
 800a490:	58025430 	.word	0x58025430
 800a494:	58025444 	.word	0x58025444
 800a498:	58025458 	.word	0x58025458
 800a49c:	5802546c 	.word	0x5802546c
 800a4a0:	58025480 	.word	0x58025480
 800a4a4:	58025494 	.word	0x58025494

0800a4a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a42      	ldr	r2, [pc, #264]	; (800a5c0 <DMA_CalcBaseAndBitshift+0x118>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d04a      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a41      	ldr	r2, [pc, #260]	; (800a5c4 <DMA_CalcBaseAndBitshift+0x11c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d045      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a3f      	ldr	r2, [pc, #252]	; (800a5c8 <DMA_CalcBaseAndBitshift+0x120>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d040      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a3e      	ldr	r2, [pc, #248]	; (800a5cc <DMA_CalcBaseAndBitshift+0x124>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d03b      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3c      	ldr	r2, [pc, #240]	; (800a5d0 <DMA_CalcBaseAndBitshift+0x128>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d036      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a3b      	ldr	r2, [pc, #236]	; (800a5d4 <DMA_CalcBaseAndBitshift+0x12c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d031      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a39      	ldr	r2, [pc, #228]	; (800a5d8 <DMA_CalcBaseAndBitshift+0x130>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d02c      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a38      	ldr	r2, [pc, #224]	; (800a5dc <DMA_CalcBaseAndBitshift+0x134>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d027      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a36      	ldr	r2, [pc, #216]	; (800a5e0 <DMA_CalcBaseAndBitshift+0x138>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d022      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a35      	ldr	r2, [pc, #212]	; (800a5e4 <DMA_CalcBaseAndBitshift+0x13c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d01d      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a33      	ldr	r2, [pc, #204]	; (800a5e8 <DMA_CalcBaseAndBitshift+0x140>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d018      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a32      	ldr	r2, [pc, #200]	; (800a5ec <DMA_CalcBaseAndBitshift+0x144>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d013      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a30      	ldr	r2, [pc, #192]	; (800a5f0 <DMA_CalcBaseAndBitshift+0x148>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00e      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a2f      	ldr	r2, [pc, #188]	; (800a5f4 <DMA_CalcBaseAndBitshift+0x14c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d009      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a2d      	ldr	r2, [pc, #180]	; (800a5f8 <DMA_CalcBaseAndBitshift+0x150>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <DMA_CalcBaseAndBitshift+0xa8>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a2c      	ldr	r2, [pc, #176]	; (800a5fc <DMA_CalcBaseAndBitshift+0x154>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d101      	bne.n	800a554 <DMA_CalcBaseAndBitshift+0xac>
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <DMA_CalcBaseAndBitshift+0xae>
 800a554:	2300      	movs	r3, #0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d024      	beq.n	800a5a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	3b10      	subs	r3, #16
 800a562:	4a27      	ldr	r2, [pc, #156]	; (800a600 <DMA_CalcBaseAndBitshift+0x158>)
 800a564:	fba2 2303 	umull	r2, r3, r2, r3
 800a568:	091b      	lsrs	r3, r3, #4
 800a56a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	4a24      	ldr	r2, [pc, #144]	; (800a604 <DMA_CalcBaseAndBitshift+0x15c>)
 800a574:	5cd3      	ldrb	r3, [r2, r3]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d908      	bls.n	800a594 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	4b1f      	ldr	r3, [pc, #124]	; (800a608 <DMA_CalcBaseAndBitshift+0x160>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	1d1a      	adds	r2, r3, #4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	659a      	str	r2, [r3, #88]	; 0x58
 800a592:	e00d      	b.n	800a5b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <DMA_CalcBaseAndBitshift+0x160>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6593      	str	r3, [r2, #88]	; 0x58
 800a5a2:	e005      	b.n	800a5b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	40020010 	.word	0x40020010
 800a5c4:	40020028 	.word	0x40020028
 800a5c8:	40020040 	.word	0x40020040
 800a5cc:	40020058 	.word	0x40020058
 800a5d0:	40020070 	.word	0x40020070
 800a5d4:	40020088 	.word	0x40020088
 800a5d8:	400200a0 	.word	0x400200a0
 800a5dc:	400200b8 	.word	0x400200b8
 800a5e0:	40020410 	.word	0x40020410
 800a5e4:	40020428 	.word	0x40020428
 800a5e8:	40020440 	.word	0x40020440
 800a5ec:	40020458 	.word	0x40020458
 800a5f0:	40020470 	.word	0x40020470
 800a5f4:	40020488 	.word	0x40020488
 800a5f8:	400204a0 	.word	0x400204a0
 800a5fc:	400204b8 	.word	0x400204b8
 800a600:	aaaaaaab 	.word	0xaaaaaaab
 800a604:	0801ad64 	.word	0x0801ad64
 800a608:	fffffc00 	.word	0xfffffc00

0800a60c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d120      	bne.n	800a662 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	2b03      	cmp	r3, #3
 800a626:	d858      	bhi.n	800a6da <DMA_CheckFifoParam+0xce>
 800a628:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <DMA_CheckFifoParam+0x24>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a653 	.word	0x0800a653
 800a638:	0800a641 	.word	0x0800a641
 800a63c:	0800a6db 	.word	0x0800a6db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d048      	beq.n	800a6de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a650:	e045      	b.n	800a6de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a65a:	d142      	bne.n	800a6e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a660:	e03f      	b.n	800a6e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a66a:	d123      	bne.n	800a6b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a670:	2b03      	cmp	r3, #3
 800a672:	d838      	bhi.n	800a6e6 <DMA_CheckFifoParam+0xda>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <DMA_CheckFifoParam+0x70>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a693 	.word	0x0800a693
 800a684:	0800a68d 	.word	0x0800a68d
 800a688:	0800a6a5 	.word	0x0800a6a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
        break;
 800a690:	e030      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d025      	beq.n	800a6ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a6a2:	e022      	b.n	800a6ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6ac:	d11f      	bne.n	800a6ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a6b2:	e01c      	b.n	800a6ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d902      	bls.n	800a6c2 <DMA_CheckFifoParam+0xb6>
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d003      	beq.n	800a6c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a6c0:	e018      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	73fb      	strb	r3, [r7, #15]
        break;
 800a6c6:	e015      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00e      	beq.n	800a6f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d8:	e00b      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
        break;
 800a6da:	bf00      	nop
 800a6dc:	e00a      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        break;
 800a6de:	bf00      	nop
 800a6e0:	e008      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        break;
 800a6e2:	bf00      	nop
 800a6e4:	e006      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        break;
 800a6e6:	bf00      	nop
 800a6e8:	e004      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        break;
 800a6ea:	bf00      	nop
 800a6ec:	e002      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
        break;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <DMA_CheckFifoParam+0xe8>
    break;
 800a6f2:	bf00      	nop
    }
  }

  return status;
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop

0800a704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a38      	ldr	r2, [pc, #224]	; (800a7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d022      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a36      	ldr	r2, [pc, #216]	; (800a7fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d01d      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a35      	ldr	r2, [pc, #212]	; (800a800 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d018      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a33      	ldr	r2, [pc, #204]	; (800a804 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d013      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a32      	ldr	r2, [pc, #200]	; (800a808 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00e      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a30      	ldr	r2, [pc, #192]	; (800a80c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d009      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a2f      	ldr	r2, [pc, #188]	; (800a810 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d004      	beq.n	800a762 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a2d      	ldr	r2, [pc, #180]	; (800a814 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d101      	bne.n	800a766 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01a      	beq.n	800a7a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	3b08      	subs	r3, #8
 800a774:	4a28      	ldr	r2, [pc, #160]	; (800a818 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a776:	fba2 2303 	umull	r2, r3, r2, r3
 800a77a:	091b      	lsrs	r3, r3, #4
 800a77c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	4b26      	ldr	r3, [pc, #152]	; (800a81c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	461a      	mov	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a24      	ldr	r2, [pc, #144]	; (800a820 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a790:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f003 031f 	and.w	r3, r3, #31
 800a798:	2201      	movs	r2, #1
 800a79a:	409a      	lsls	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a7a0:	e024      	b.n	800a7ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	3b10      	subs	r3, #16
 800a7aa:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b0:	091b      	lsrs	r3, r3, #4
 800a7b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a1c      	ldr	r2, [pc, #112]	; (800a828 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d806      	bhi.n	800a7ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a1b      	ldr	r2, [pc, #108]	; (800a82c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d902      	bls.n	800a7ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4b18      	ldr	r3, [pc, #96]	; (800a830 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a16      	ldr	r2, [pc, #88]	; (800a834 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a7dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f003 031f 	and.w	r3, r3, #31
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	409a      	lsls	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	58025408 	.word	0x58025408
 800a7fc:	5802541c 	.word	0x5802541c
 800a800:	58025430 	.word	0x58025430
 800a804:	58025444 	.word	0x58025444
 800a808:	58025458 	.word	0x58025458
 800a80c:	5802546c 	.word	0x5802546c
 800a810:	58025480 	.word	0x58025480
 800a814:	58025494 	.word	0x58025494
 800a818:	cccccccd 	.word	0xcccccccd
 800a81c:	16009600 	.word	0x16009600
 800a820:	58025880 	.word	0x58025880
 800a824:	aaaaaaab 	.word	0xaaaaaaab
 800a828:	400204b8 	.word	0x400204b8
 800a82c:	4002040f 	.word	0x4002040f
 800a830:	10008200 	.word	0x10008200
 800a834:	40020880 	.word	0x40020880

0800a838 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	b2db      	uxtb	r3, r3
 800a846:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d04a      	beq.n	800a8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b08      	cmp	r3, #8
 800a852:	d847      	bhi.n	800a8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a25      	ldr	r2, [pc, #148]	; (800a8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d022      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a24      	ldr	r2, [pc, #144]	; (800a8f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d01d      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a22      	ldr	r2, [pc, #136]	; (800a8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d018      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a21      	ldr	r2, [pc, #132]	; (800a8fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d013      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a1f      	ldr	r2, [pc, #124]	; (800a900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00e      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1e      	ldr	r2, [pc, #120]	; (800a904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a1c      	ldr	r2, [pc, #112]	; (800a908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a1b      	ldr	r2, [pc, #108]	; (800a90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d101      	bne.n	800a8a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00a      	beq.n	800a8c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4b17      	ldr	r3, [pc, #92]	; (800a910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a15      	ldr	r2, [pc, #84]	; (800a914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a8c0:	671a      	str	r2, [r3, #112]	; 0x70
 800a8c2:	e009      	b.n	800a8d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a11      	ldr	r2, [pc, #68]	; (800a91c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a8d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	2201      	movs	r2, #1
 800a8de:	409a      	lsls	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a8e4:	bf00      	nop
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	58025408 	.word	0x58025408
 800a8f4:	5802541c 	.word	0x5802541c
 800a8f8:	58025430 	.word	0x58025430
 800a8fc:	58025444 	.word	0x58025444
 800a900:	58025458 	.word	0x58025458
 800a904:	5802546c 	.word	0x5802546c
 800a908:	58025480 	.word	0x58025480
 800a90c:	58025494 	.word	0x58025494
 800a910:	1600963f 	.word	0x1600963f
 800a914:	58025940 	.word	0x58025940
 800a918:	1000823f 	.word	0x1000823f
 800a91c:	40020940 	.word	0x40020940

0800a920 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a934:	2308      	movs	r3, #8
 800a936:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a938:	4b40      	ldr	r3, [pc, #256]	; (800aa3c <HAL_FLASH_Program+0x11c>)
 800a93a:	7d1b      	ldrb	r3, [r3, #20]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d101      	bne.n	800a944 <HAL_FLASH_Program+0x24>
 800a940:	2302      	movs	r3, #2
 800a942:	e076      	b.n	800aa32 <HAL_FLASH_Program+0x112>
 800a944:	4b3d      	ldr	r3, [pc, #244]	; (800aa3c <HAL_FLASH_Program+0x11c>)
 800a946:	2201      	movs	r2, #1
 800a948:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a950:	d306      	bcc.n	800a960 <HAL_FLASH_Program+0x40>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a958:	d202      	bcs.n	800a960 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a95a:	2301      	movs	r3, #1
 800a95c:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a95e:	e00c      	b.n	800a97a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a966:	d306      	bcc.n	800a976 <HAL_FLASH_Program+0x56>
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a96e:	d202      	bcs.n	800a976 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a970:	2302      	movs	r3, #2
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	e001      	b.n	800a97a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e05b      	b.n	800aa32 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a97a:	4b30      	ldr	r3, [pc, #192]	; (800aa3c <HAL_FLASH_Program+0x11c>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a980:	69b9      	ldr	r1, [r7, #24]
 800a982:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a986:	f000 f897 	bl	800aab8 <FLASH_WaitForLastOperation>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a994:	2b00      	cmp	r3, #0
 800a996:	d147      	bne.n	800aa28 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d106      	bne.n	800a9ac <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a99e:	4b28      	ldr	r3, [pc, #160]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	4a27      	ldr	r2, [pc, #156]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800a9a4:	f043 0302 	orr.w	r3, r3, #2
 800a9a8:	60d3      	str	r3, [r2, #12]
 800a9aa:	e007      	b.n	800a9bc <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a9ac:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800a9ae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a9b2:	4a23      	ldr	r2, [pc, #140]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800a9b4:	f043 0302 	orr.w	r3, r3, #2
 800a9b8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a9bc:	f3bf 8f6f 	isb	sy
}
 800a9c0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a9c2:	f3bf 8f4f 	dsb	sy
}
 800a9c6:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1ef      	bne.n	800a9c8 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a9e8:	f3bf 8f6f 	isb	sy
}
 800a9ec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a9ee:	f3bf 8f4f 	dsb	sy
}
 800a9f2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a9f4:	69b9      	ldr	r1, [r7, #24]
 800a9f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9fa:	f000 f85d 	bl	800aab8 <FLASH_WaitForLastOperation>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d106      	bne.n	800aa18 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800aa0a:	4b0d      	ldr	r3, [pc, #52]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	4a0c      	ldr	r2, [pc, #48]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800aa10:	f023 0302 	bic.w	r3, r3, #2
 800aa14:	60d3      	str	r3, [r2, #12]
 800aa16:	e007      	b.n	800aa28 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800aa18:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800aa1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa1e:	4a08      	ldr	r2, [pc, #32]	; (800aa40 <HAL_FLASH_Program+0x120>)
 800aa20:	f023 0302 	bic.w	r3, r3, #2
 800aa24:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <HAL_FLASH_Program+0x11c>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	751a      	strb	r2, [r3, #20]

  return status;
 800aa2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3728      	adds	r7, #40	; 0x28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	24002000 	.word	0x24002000
 800aa40:	52002000 	.word	0x52002000

0800aa44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800aa48:	4b18      	ldr	r3, [pc, #96]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00d      	beq.n	800aa70 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800aa54:	4b15      	ldr	r3, [pc, #84]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa56:	4a16      	ldr	r2, [pc, #88]	; (800aab0 <HAL_FLASH_Unlock+0x6c>)
 800aa58:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800aa5a:	4b14      	ldr	r3, [pc, #80]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa5c:	4a15      	ldr	r2, [pc, #84]	; (800aab4 <HAL_FLASH_Unlock+0x70>)
 800aa5e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e018      	b.n	800aaa2 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa70:	4b0e      	ldr	r3, [pc, #56]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa72:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa80:	4a0b      	ldr	r2, [pc, #44]	; (800aab0 <HAL_FLASH_Unlock+0x6c>)
 800aa82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa88:	4a0a      	ldr	r2, [pc, #40]	; (800aab4 <HAL_FLASH_Unlock+0x70>)
 800aa8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <HAL_FLASH_Unlock+0x68>)
 800aa90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e000      	b.n	800aaa2 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	52002000 	.word	0x52002000
 800aab0:	45670123 	.word	0x45670123
 800aab4:	cdef89ab 	.word	0xcdef89ab

0800aab8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800aac2:	2304      	movs	r3, #4
 800aac4:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800aaca:	f7fa ffab 	bl	8005a24 <HAL_GetTick>
 800aace:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d113      	bne.n	800aafe <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aad6:	4b41      	ldr	r3, [pc, #260]	; (800abdc <FLASH_WaitForLastOperation+0x124>)
 800aad8:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aada:	e010      	b.n	800aafe <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aae2:	d00c      	beq.n	800aafe <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aae4:	f7fa ff9e 	bl	8005a24 <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d302      	bcc.n	800aafa <FLASH_WaitForLastOperation+0x42>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e06a      	b.n	800abd4 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4b37      	ldr	r3, [pc, #220]	; (800abe0 <FLASH_WaitForLastOperation+0x128>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d10a      	bne.n	800ab20 <FLASH_WaitForLastOperation+0x68>
 800ab0a:	4b36      	ldr	r3, [pc, #216]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab0c:	691a      	ldr	r2, [r3, #16]
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	4013      	ands	r3, r2
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	bf0c      	ite	eq
 800ab18:	2301      	moveq	r3, #1
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	e00c      	b.n	800ab3a <FLASH_WaitForLastOperation+0x82>
 800ab20:	4b30      	ldr	r3, [pc, #192]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab22:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ab26:	43da      	mvns	r2, r3
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bf0c      	ite	eq
 800ab34:	2301      	moveq	r3, #1
 800ab36:	2300      	movne	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1ce      	bne.n	800aadc <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d105      	bne.n	800ab50 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800ab44:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	4b27      	ldr	r3, [pc, #156]	; (800abe8 <FLASH_WaitForLastOperation+0x130>)
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	613b      	str	r3, [r7, #16]
 800ab4e:	e007      	b.n	800ab60 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800ab50:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab52:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <FLASH_WaitForLastOperation+0x130>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab5e:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d017      	beq.n	800ab9a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ab6a:	4b20      	ldr	r3, [pc, #128]	; (800abec <FLASH_WaitForLastOperation+0x134>)
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	4a1e      	ldr	r2, [pc, #120]	; (800abec <FLASH_WaitForLastOperation+0x134>)
 800ab74:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <FLASH_WaitForLastOperation+0x128>)
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d103      	bne.n	800ab8a <FLASH_WaitForLastOperation+0xd2>
 800ab82:	4a18      	ldr	r2, [pc, #96]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6153      	str	r3, [r2, #20]
 800ab88:	e005      	b.n	800ab96 <FLASH_WaitForLastOperation+0xde>
 800ab8a:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab92:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e01c      	b.n	800abd4 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d10b      	bne.n	800abb8 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800aba0:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abac:	d111      	bne.n	800abd2 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800abae:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800abb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abb4:	615a      	str	r2, [r3, #20]
 800abb6:	e00c      	b.n	800abd2 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800abba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800abbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc6:	d104      	bne.n	800abd2 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800abc8:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <FLASH_WaitForLastOperation+0x12c>)
 800abca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	80000004 	.word	0x80000004
 800abe0:	1fef000f 	.word	0x1fef000f
 800abe4:	52002000 	.word	0x52002000
 800abe8:	17ee0000 	.word	0x17ee0000
 800abec:	24002000 	.word	0x24002000

0800abf0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800abfe:	4b5e      	ldr	r3, [pc, #376]	; (800ad78 <HAL_FLASHEx_Erase+0x188>)
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d101      	bne.n	800ac0a <HAL_FLASHEx_Erase+0x1a>
 800ac06:	2302      	movs	r3, #2
 800ac08:	e0b2      	b.n	800ad70 <HAL_FLASHEx_Erase+0x180>
 800ac0a:	4b5b      	ldr	r3, [pc, #364]	; (800ad78 <HAL_FLASHEx_Erase+0x188>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac10:	4b59      	ldr	r3, [pc, #356]	; (800ad78 <HAL_FLASHEx_Erase+0x188>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ac22:	2101      	movs	r1, #1
 800ac24:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac28:	f7ff ff46 	bl	800aab8 <FLASH_WaitForLastOperation>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ac42:	2102      	movs	r1, #2
 800ac44:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac48:	f7ff ff36 	bl	800aab8 <FLASH_WaitForLastOperation>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 8085 	bne.w	800ad68 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d136      	bne.n	800acd4 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691a      	ldr	r2, [r3, #16]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f000 f887 	bl	800ad84 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ac82:	2101      	movs	r1, #1
 800ac84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac88:	f7ff ff16 	bl	800aab8 <FLASH_WaitForLastOperation>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ac96:	4b39      	ldr	r3, [pc, #228]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	4a38      	ldr	r2, [pc, #224]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ac9c:	f023 0308 	bic.w	r3, r3, #8
 800aca0:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f003 0302 	and.w	r3, r3, #2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d05c      	beq.n	800ad68 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800acae:	2102      	movs	r1, #2
 800acb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acb4:	f7ff ff00 	bl	800aab8 <FLASH_WaitForLastOperation>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800acc2:	4b2e      	ldr	r3, [pc, #184]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800acc4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800acc8:	4a2c      	ldr	r2, [pc, #176]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800acca:	f023 0308 	bic.w	r3, r3, #8
 800acce:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800acd2:	e049      	b.n	800ad68 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acda:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	60bb      	str	r3, [r7, #8]
 800ace2:	e039      	b.n	800ad58 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6859      	ldr	r1, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	461a      	mov	r2, r3
 800acee:	68b8      	ldr	r0, [r7, #8]
 800acf0:	f000 f8b2 	bl	800ae58 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00c      	beq.n	800ad1a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800ad00:	2101      	movs	r1, #1
 800ad02:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad06:	f7ff fed7 	bl	800aab8 <FLASH_WaitForLastOperation>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ad0e:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	491a      	ldr	r1, [pc, #104]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ad14:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <HAL_FLASHEx_Erase+0x190>)
 800ad16:	4013      	ands	r3, r2
 800ad18:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800ad26:	2102      	movs	r1, #2
 800ad28:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad2c:	f7ff fec4 	bl	800aab8 <FLASH_WaitForLastOperation>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ad34:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ad36:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ad3a:	4910      	ldr	r1, [pc, #64]	; (800ad7c <HAL_FLASHEx_Erase+0x18c>)
 800ad3c:	4b10      	ldr	r3, [pc, #64]	; (800ad80 <HAL_FLASHEx_Erase+0x190>)
 800ad3e:	4013      	ands	r3, r2
 800ad40:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	601a      	str	r2, [r3, #0]
          break;
 800ad50:	e00a      	b.n	800ad68 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	3301      	adds	r3, #1
 800ad56:	60bb      	str	r3, [r7, #8]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68da      	ldr	r2, [r3, #12]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	4413      	add	r3, r2
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d3bd      	bcc.n	800ace4 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ad68:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <HAL_FLASHEx_Erase+0x188>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	751a      	strb	r2, [r3, #20]

  return status;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	24002000 	.word	0x24002000
 800ad7c:	52002000 	.word	0x52002000
 800ad80:	fffff8fb 	.word	0xfffff8fb

0800ad84 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	f003 0303 	and.w	r3, r3, #3
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d122      	bne.n	800adde <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ad98:	4b2e      	ldr	r3, [pc, #184]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	4a2d      	ldr	r2, [pc, #180]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ad9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ada2:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ada4:	4b2b      	ldr	r3, [pc, #172]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ada6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800adaa:	4a2a      	ldr	r2, [pc, #168]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800adb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800adb4:	4b27      	ldr	r3, [pc, #156]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	4926      	ldr	r1, [pc, #152]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800adc0:	4b24      	ldr	r3, [pc, #144]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adc2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800adc6:	4923      	ldr	r1, [pc, #140]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4313      	orrs	r3, r2
 800adcc:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <FLASH_MassErase+0xd0>)
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <FLASH_MassErase+0xd0>)
 800add6:	f043 0310 	orr.w	r3, r3, #16
 800adda:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800addc:	e033      	b.n	800ae46 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d011      	beq.n	800ae0c <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ade8:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800adf2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800adf4:	4b17      	ldr	r3, [pc, #92]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	4916      	ldr	r1, [pc, #88]	; (800ae54 <FLASH_MassErase+0xd0>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ae00:	4b14      	ldr	r3, [pc, #80]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae06:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ae0a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d017      	beq.n	800ae46 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ae16:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae18:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae1c:	4a0d      	ldr	r2, [pc, #52]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae22:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae28:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae2c:	4909      	ldr	r1, [pc, #36]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800ae36:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae38:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae3c:	4a05      	ldr	r2, [pc, #20]	; (800ae54 <FLASH_MassErase+0xd0>)
 800ae3e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ae42:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	52002000 	.word	0x52002000

0800ae58 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d010      	beq.n	800ae90 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae6e:	4b18      	ldr	r3, [pc, #96]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	4a17      	ldr	r2, [pc, #92]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800ae74:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ae78:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ae7a:	4b15      	ldr	r3, [pc, #84]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	0219      	lsls	r1, r3, #8
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	430b      	orrs	r3, r1
 800ae86:	4313      	orrs	r3, r2
 800ae88:	4a11      	ldr	r2, [pc, #68]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800ae8a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ae8e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d014      	beq.n	800aec4 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae9a:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800ae9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aea0:	4a0b      	ldr	r2, [pc, #44]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800aea2:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800aea6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800aeac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	0219      	lsls	r1, r3, #8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	4a05      	ldr	r2, [pc, #20]	; (800aed0 <FLASH_Erase_Sector+0x78>)
 800aebc:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800aec0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	52002000 	.word	0x52002000

0800aed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b089      	sub	sp, #36	; 0x24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aee2:	4b89      	ldr	r3, [pc, #548]	; (800b108 <HAL_GPIO_Init+0x234>)
 800aee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aee6:	e194      	b.n	800b212 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	2101      	movs	r1, #1
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	fa01 f303 	lsl.w	r3, r1, r3
 800aef4:	4013      	ands	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 8186 	beq.w	800b20c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d005      	beq.n	800af18 <HAL_GPIO_Init+0x44>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d130      	bne.n	800af7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	2203      	movs	r2, #3
 800af24:	fa02 f303 	lsl.w	r3, r2, r3
 800af28:	43db      	mvns	r3, r3
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	4013      	ands	r3, r2
 800af2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	4313      	orrs	r3, r2
 800af40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af4e:	2201      	movs	r2, #1
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	fa02 f303 	lsl.w	r3, r2, r3
 800af56:	43db      	mvns	r3, r3
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	4013      	ands	r3, r2
 800af5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	091b      	lsrs	r3, r3, #4
 800af64:	f003 0201 	and.w	r2, r3, #1
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	4313      	orrs	r3, r2
 800af72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	2b03      	cmp	r3, #3
 800af84:	d017      	beq.n	800afb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	2203      	movs	r2, #3
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	43db      	mvns	r3, r3
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4013      	ands	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	689a      	ldr	r2, [r3, #8]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	fa02 f303 	lsl.w	r3, r2, r3
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	4313      	orrs	r3, r2
 800afae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d123      	bne.n	800b00a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	08da      	lsrs	r2, r3, #3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3208      	adds	r2, #8
 800afca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	220f      	movs	r2, #15
 800afda:	fa02 f303 	lsl.w	r3, r2, r3
 800afde:	43db      	mvns	r3, r3
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	4013      	ands	r3, r2
 800afe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	691a      	ldr	r2, [r3, #16]
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	f003 0307 	and.w	r3, r3, #7
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	4313      	orrs	r3, r2
 800affa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	08da      	lsrs	r2, r3, #3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3208      	adds	r2, #8
 800b004:	69b9      	ldr	r1, [r7, #24]
 800b006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	2203      	movs	r2, #3
 800b016:	fa02 f303 	lsl.w	r3, r2, r3
 800b01a:	43db      	mvns	r3, r3
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	4013      	ands	r3, r2
 800b020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f003 0203 	and.w	r2, r3, #3
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	fa02 f303 	lsl.w	r3, r2, r3
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	4313      	orrs	r3, r2
 800b036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 80e0 	beq.w	800b20c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b04c:	4b2f      	ldr	r3, [pc, #188]	; (800b10c <HAL_GPIO_Init+0x238>)
 800b04e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b052:	4a2e      	ldr	r2, [pc, #184]	; (800b10c <HAL_GPIO_Init+0x238>)
 800b054:	f043 0302 	orr.w	r3, r3, #2
 800b058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b05c:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <HAL_GPIO_Init+0x238>)
 800b05e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b06a:	4a29      	ldr	r2, [pc, #164]	; (800b110 <HAL_GPIO_Init+0x23c>)
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	089b      	lsrs	r3, r3, #2
 800b070:	3302      	adds	r3, #2
 800b072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	220f      	movs	r2, #15
 800b082:	fa02 f303 	lsl.w	r3, r2, r3
 800b086:	43db      	mvns	r3, r3
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4013      	ands	r3, r2
 800b08c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a20      	ldr	r2, [pc, #128]	; (800b114 <HAL_GPIO_Init+0x240>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d052      	beq.n	800b13c <HAL_GPIO_Init+0x268>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a1f      	ldr	r2, [pc, #124]	; (800b118 <HAL_GPIO_Init+0x244>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d031      	beq.n	800b102 <HAL_GPIO_Init+0x22e>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a1e      	ldr	r2, [pc, #120]	; (800b11c <HAL_GPIO_Init+0x248>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d02b      	beq.n	800b0fe <HAL_GPIO_Init+0x22a>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <HAL_GPIO_Init+0x24c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d025      	beq.n	800b0fa <HAL_GPIO_Init+0x226>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a1c      	ldr	r2, [pc, #112]	; (800b124 <HAL_GPIO_Init+0x250>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d01f      	beq.n	800b0f6 <HAL_GPIO_Init+0x222>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a1b      	ldr	r2, [pc, #108]	; (800b128 <HAL_GPIO_Init+0x254>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d019      	beq.n	800b0f2 <HAL_GPIO_Init+0x21e>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1a      	ldr	r2, [pc, #104]	; (800b12c <HAL_GPIO_Init+0x258>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d013      	beq.n	800b0ee <HAL_GPIO_Init+0x21a>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a19      	ldr	r2, [pc, #100]	; (800b130 <HAL_GPIO_Init+0x25c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00d      	beq.n	800b0ea <HAL_GPIO_Init+0x216>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a18      	ldr	r2, [pc, #96]	; (800b134 <HAL_GPIO_Init+0x260>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d007      	beq.n	800b0e6 <HAL_GPIO_Init+0x212>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a17      	ldr	r2, [pc, #92]	; (800b138 <HAL_GPIO_Init+0x264>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d101      	bne.n	800b0e2 <HAL_GPIO_Init+0x20e>
 800b0de:	2309      	movs	r3, #9
 800b0e0:	e02d      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0e2:	230a      	movs	r3, #10
 800b0e4:	e02b      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	e029      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0ea:	2307      	movs	r3, #7
 800b0ec:	e027      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0ee:	2306      	movs	r3, #6
 800b0f0:	e025      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0f2:	2305      	movs	r3, #5
 800b0f4:	e023      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0f6:	2304      	movs	r3, #4
 800b0f8:	e021      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e01f      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e01d      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b102:	2301      	movs	r3, #1
 800b104:	e01b      	b.n	800b13e <HAL_GPIO_Init+0x26a>
 800b106:	bf00      	nop
 800b108:	58000080 	.word	0x58000080
 800b10c:	58024400 	.word	0x58024400
 800b110:	58000400 	.word	0x58000400
 800b114:	58020000 	.word	0x58020000
 800b118:	58020400 	.word	0x58020400
 800b11c:	58020800 	.word	0x58020800
 800b120:	58020c00 	.word	0x58020c00
 800b124:	58021000 	.word	0x58021000
 800b128:	58021400 	.word	0x58021400
 800b12c:	58021800 	.word	0x58021800
 800b130:	58021c00 	.word	0x58021c00
 800b134:	58022000 	.word	0x58022000
 800b138:	58022400 	.word	0x58022400
 800b13c:	2300      	movs	r3, #0
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	f002 0203 	and.w	r2, r2, #3
 800b144:	0092      	lsls	r2, r2, #2
 800b146:	4093      	lsls	r3, r2
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b14e:	4938      	ldr	r1, [pc, #224]	; (800b230 <HAL_GPIO_Init+0x35c>)
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	089b      	lsrs	r3, r3, #2
 800b154:	3302      	adds	r3, #2
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b15c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	43db      	mvns	r3, r3
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	4013      	ands	r3, r2
 800b16c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	4313      	orrs	r3, r2
 800b180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	43db      	mvns	r3, r3
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4013      	ands	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b1b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	43db      	mvns	r3, r3
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	43db      	mvns	r3, r3
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	3301      	adds	r3, #1
 800b210:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f47f ae63 	bne.w	800aee8 <HAL_GPIO_Init+0x14>
  }
}
 800b222:	bf00      	nop
 800b224:	bf00      	nop
 800b226:	3724      	adds	r7, #36	; 0x24
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	58000400 	.word	0x58000400

0800b234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691a      	ldr	r2, [r3, #16]
 800b244:	887b      	ldrh	r3, [r7, #2]
 800b246:	4013      	ands	r3, r2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
 800b250:	e001      	b.n	800b256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b256:	7bfb      	ldrb	r3, [r7, #15]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	807b      	strh	r3, [r7, #2]
 800b270:	4613      	mov	r3, r2
 800b272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b274:	787b      	ldrb	r3, [r7, #1]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b27a:	887a      	ldrh	r2, [r7, #2]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b280:	e003      	b.n	800b28a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b282:	887b      	ldrh	r3, [r7, #2]
 800b284:	041a      	lsls	r2, r3, #16
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	619a      	str	r2, [r3, #24]
}
 800b28a:	bf00      	nop
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e08b      	b.n	800b3c2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7f7 fb42 	bl	8002948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2224      	movs	r2, #36	; 0x24
 800b2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0201 	bic.w	r2, r2, #1
 800b2da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689a      	ldr	r2, [r3, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d107      	bne.n	800b312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689a      	ldr	r2, [r3, #8]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	e006      	b.n	800b320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b31e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d108      	bne.n	800b33a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b336:	605a      	str	r2, [r3, #4]
 800b338:	e007      	b.n	800b34a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6859      	ldr	r1, [r3, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <HAL_I2C_Init+0x134>)
 800b356:	430b      	orrs	r3, r1
 800b358:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69d9      	ldr	r1, [r3, #28]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1a      	ldr	r2, [r3, #32]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	02008000 	.word	0x02008000

0800b3d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08a      	sub	sp, #40	; 0x28
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	460b      	mov	r3, r1
 800b3de:	817b      	strh	r3, [r7, #10]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	f040 80ef 	bne.w	800b5d4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b404:	d101      	bne.n	800b40a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b406:	2302      	movs	r3, #2
 800b408:	e0e5      	b.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b414:	2302      	movs	r3, #2
 800b416:	e0de      	b.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2221      	movs	r2, #33	; 0x21
 800b424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2210      	movs	r2, #16
 800b42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	893a      	ldrh	r2, [r7, #8]
 800b440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4a66      	ldr	r2, [pc, #408]	; (800b5e0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4a66      	ldr	r2, [pc, #408]	; (800b5e4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b44c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b452:	b29b      	uxth	r3, r3
 800b454:	2bff      	cmp	r3, #255	; 0xff
 800b456:	d906      	bls.n	800b466 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	22ff      	movs	r2, #255	; 0xff
 800b45c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b45e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	e007      	b.n	800b476 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b474:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01a      	beq.n	800b4b4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b498:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d074      	beq.n	800b5a6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d022      	beq.n	800b50a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c8:	4a47      	ldr	r2, [pc, #284]	; (800b5e8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b4ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	4a46      	ldr	r2, [pc, #280]	; (800b5ec <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b4d2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	2200      	movs	r2, #0
 800b4da:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4f4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4fa:	f7fc ff17 	bl	800832c <HAL_DMA_Start_IT>
 800b4fe:	4603      	mov	r3, r0
 800b500:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d13a      	bne.n	800b57e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b508:	e013      	b.n	800b532 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e051      	b.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b536:	b2db      	uxtb	r3, r3
 800b538:	3301      	adds	r3, #1
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	8979      	ldrh	r1, [r7, #10]
 800b53e:	4b2c      	ldr	r3, [pc, #176]	; (800b5f0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f002 f83b 	bl	800d5c0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54e:	b29a      	uxth	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b564:	2110      	movs	r1, #16
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f002 f85c 	bl	800d624 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e028      	b.n	800b5d0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2220      	movs	r2, #32
 800b582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f043 0210 	orr.w	r2, r3, #16
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e017      	b.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4a12      	ldr	r2, [pc, #72]	; (800b5f4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b5aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	8979      	ldrh	r1, [r7, #10]
 800b5b2:	4b0f      	ldr	r3, [pc, #60]	; (800b5f0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f002 f800 	bl	800d5c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f002 f82a 	bl	800d624 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e000      	b.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b5d4:	2302      	movs	r3, #2
  }
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3720      	adds	r7, #32
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	ffff0000 	.word	0xffff0000
 800b5e4:	0800be2b 	.word	0x0800be2b
 800b5e8:	0800d1e3 	.word	0x0800d1e3
 800b5ec:	0800d311 	.word	0x0800d311
 800b5f0:	80002000 	.word	0x80002000
 800b5f4:	0800b9bb 	.word	0x0800b9bb

0800b5f8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	461a      	mov	r2, r3
 800b604:	460b      	mov	r3, r1
 800b606:	817b      	strh	r3, [r7, #10]
 800b608:	4613      	mov	r3, r2
 800b60a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b20      	cmp	r3, #32
 800b616:	f040 80cd 	bne.w	800b7b4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b628:	d101      	bne.n	800b62e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b62a:	2302      	movs	r3, #2
 800b62c:	e0c3      	b.n	800b7b6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b634:	2b01      	cmp	r3, #1
 800b636:	d101      	bne.n	800b63c <HAL_I2C_Master_Receive_DMA+0x44>
 800b638:	2302      	movs	r3, #2
 800b63a:	e0bc      	b.n	800b7b6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2222      	movs	r2, #34	; 0x22
 800b648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2210      	movs	r2, #16
 800b650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	893a      	ldrh	r2, [r7, #8]
 800b664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	4a55      	ldr	r2, [pc, #340]	; (800b7c0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b66a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a55      	ldr	r2, [pc, #340]	; (800b7c4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b670:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b676:	b29b      	uxth	r3, r3
 800b678:	2bff      	cmp	r3, #255	; 0xff
 800b67a:	d906      	bls.n	800b68a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	22ff      	movs	r2, #255	; 0xff
 800b680:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e007      	b.n	800b69a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b68e:	b29a      	uxth	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b698:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d070      	beq.n	800b784 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d020      	beq.n	800b6ec <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ae:	4a46      	ldr	r2, [pc, #280]	; (800b7c8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b6b0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b6:	4a45      	ldr	r2, [pc, #276]	; (800b7cc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b6b8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	2200      	movs	r2, #0
 800b6c0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3324      	adds	r3, #36	; 0x24
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b6dc:	f7fc fe26 	bl	800832c <HAL_DMA_Start_IT>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b6e4:	7cfb      	ldrb	r3, [r7, #19]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d138      	bne.n	800b75c <HAL_I2C_Master_Receive_DMA+0x164>
 800b6ea:	e013      	b.n	800b714 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b700:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	e050      	b.n	800b7b6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	8979      	ldrh	r1, [r7, #10]
 800b71c:	4b2c      	ldr	r3, [pc, #176]	; (800b7d0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f001 ff4c 	bl	800d5c0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	b29a      	uxth	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b742:	2110      	movs	r1, #16
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f001 ff6d 	bl	800d624 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	e029      	b.n	800b7b0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2220      	movs	r2, #32
 800b760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b770:	f043 0210 	orr.w	r2, r3, #16
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e018      	b.n	800b7b6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b788:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	8979      	ldrh	r1, [r7, #10]
 800b792:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f001 ff10 	bl	800d5c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f001 ff3a 	bl	800d624 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e000      	b.n	800b7b6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b7b4:	2302      	movs	r3, #2
  }
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	ffff0000 	.word	0xffff0000
 800b7c4:	0800be2b 	.word	0x0800be2b
 800b7c8:	0800d279 	.word	0x0800d279
 800b7cc:	0800d311 	.word	0x0800d311
 800b7d0:	80002400 	.word	0x80002400
 800b7d4:	0800b9bb 	.word	0x0800b9bb

0800b7d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d005      	beq.n	800b804 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	68f9      	ldr	r1, [r7, #12]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
  }
}
 800b804:	bf00      	nop
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	0a1b      	lsrs	r3, r3, #8
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d010      	beq.n	800b852 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	09db      	lsrs	r3, r3, #7
 800b834:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b840:	f043 0201 	orr.w	r2, r3, #1
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b850:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	0a9b      	lsrs	r3, r3, #10
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d010      	beq.n	800b880 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	09db      	lsrs	r3, r3, #7
 800b862:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86e:	f043 0208 	orr.w	r2, r3, #8
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b87e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	0a5b      	lsrs	r3, r3, #9
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d010      	beq.n	800b8ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	09db      	lsrs	r3, r3, #7
 800b890:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00a      	beq.n	800b8ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89c:	f043 0202 	orr.w	r2, r3, #2
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f003 030b 	and.w	r3, r3, #11
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f001 fb53 	bl	800cf6c <I2C_ITError>
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b8ea:	bf00      	nop
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b8fe:	bf00      	nop
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b912:	bf00      	nop
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
 800b92a:	4613      	mov	r3, r2
 800b92c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ac:	b2db      	uxtb	r3, r3
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b088      	sub	sp, #32
 800b9be:	af02      	add	r7, sp, #8
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	60b9      	str	r1, [r7, #8]
 800b9c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <I2C_Master_ISR_IT+0x1e>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e120      	b.n	800bc1a <I2C_Master_ISR_IT+0x260>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	091b      	lsrs	r3, r3, #4
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d013      	beq.n	800ba14 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	091b      	lsrs	r3, r3, #4
 800b9f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00d      	beq.n	800ba14 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2210      	movs	r2, #16
 800b9fe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba04:	f043 0204 	orr.w	r2, r3, #4
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f001 fbc4 	bl	800d19a <I2C_Flush_TXDR>
 800ba12:	e0ed      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	089b      	lsrs	r3, r3, #2
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d023      	beq.n	800ba68 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	089b      	lsrs	r3, r3, #2
 800ba24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01d      	beq.n	800ba68 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	f023 0304 	bic.w	r3, r3, #4
 800ba32:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba66:	e0c3      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	099b      	lsrs	r3, r3, #6
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d12a      	bne.n	800baca <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	085b      	lsrs	r3, r3, #1
 800ba78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d024      	beq.n	800baca <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	085b      	lsrs	r3, r3, #1
 800ba84:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01e      	beq.n	800baca <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 80ac 	beq.w	800bbf0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	781a      	ldrb	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab2:	3b01      	subs	r3, #1
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800babe:	b29b      	uxth	r3, r3
 800bac0:	3b01      	subs	r3, #1
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bac8:	e092      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	09db      	lsrs	r3, r3, #7
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d05d      	beq.n	800bb92 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	099b      	lsrs	r3, r3, #6
 800bada:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d057      	beq.n	800bb92 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d040      	beq.n	800bb6e <I2C_Master_ISR_IT+0x1b4>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d13c      	bne.n	800bb6e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb00:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	2bff      	cmp	r3, #255	; 0xff
 800bb0a:	d90e      	bls.n	800bb2a <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	22ff      	movs	r2, #255	; 0xff
 800bb10:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	8a79      	ldrh	r1, [r7, #18]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f001 fd4c 	bl	800d5c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb28:	e032      	b.n	800bb90 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb3c:	d00b      	beq.n	800bb56 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	8a79      	ldrh	r1, [r7, #18]
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	9000      	str	r0, [sp, #0]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f001 fd36 	bl	800d5c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb54:	e01c      	b.n	800bb90 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	8a79      	ldrh	r1, [r7, #18]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 fd2a 	bl	800d5c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb6c:	e010      	b.n	800bb90 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb7c:	d003      	beq.n	800bb86 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 fdde 	bl	800c740 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb84:	e034      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bb86:	2140      	movs	r1, #64	; 0x40
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f001 f9ef 	bl	800cf6c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb8e:	e02f      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
 800bb90:	e02e      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	099b      	lsrs	r3, r3, #6
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d028      	beq.n	800bbf0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	099b      	lsrs	r3, r3, #6
 800bba2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d022      	beq.n	800bbf0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d119      	bne.n	800bbe8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbc2:	d015      	beq.n	800bbf0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbcc:	d108      	bne.n	800bbe0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	e007      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 fdad 	bl	800c740 <I2C_ITMasterSeqCplt>
 800bbe6:	e003      	b.n	800bbf0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bbe8:	2140      	movs	r1, #64	; 0x40
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f001 f9be 	bl	800cf6c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	095b      	lsrs	r3, r3, #5
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d009      	beq.n	800bc10 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	095b      	lsrs	r3, r3, #5
 800bc00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d003      	beq.n	800bc10 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bc08:	6979      	ldr	r1, [r7, #20]
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fe34 	bl	800c878 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b086      	sub	sp, #24
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d101      	bne.n	800bc46 <I2C_Slave_ISR_IT+0x24>
 800bc42:	2302      	movs	r3, #2
 800bc44:	e0ed      	b.n	800be22 <I2C_Slave_ISR_IT+0x200>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	095b      	lsrs	r3, r3, #5
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	095b      	lsrs	r3, r3, #5
 800bc5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d004      	beq.n	800bc70 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bc66:	6939      	ldr	r1, [r7, #16]
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fecf 	bl	800ca0c <I2C_ITSlaveCplt>
 800bc6e:	e0d3      	b.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	091b      	lsrs	r3, r3, #4
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d04d      	beq.n	800bd18 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	091b      	lsrs	r3, r3, #4
 800bc80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d047      	beq.n	800bd18 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d128      	bne.n	800bce4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b28      	cmp	r3, #40	; 0x28
 800bc9c:	d108      	bne.n	800bcb0 <I2C_Slave_ISR_IT+0x8e>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bca4:	d104      	bne.n	800bcb0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bca6:	6939      	ldr	r1, [r7, #16]
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f001 f909 	bl	800cec0 <I2C_ITListenCplt>
 800bcae:	e032      	b.n	800bd16 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b29      	cmp	r3, #41	; 0x29
 800bcba:	d10e      	bne.n	800bcda <I2C_Slave_ISR_IT+0xb8>
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bcc2:	d00a      	beq.n	800bcda <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2210      	movs	r2, #16
 800bcca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f001 fa64 	bl	800d19a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f000 fd71 	bl	800c7ba <I2C_ITSlaveSeqCplt>
 800bcd8:	e01d      	b.n	800bd16 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2210      	movs	r2, #16
 800bce0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bce2:	e096      	b.n	800be12 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2210      	movs	r2, #16
 800bcea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf0:	f043 0204 	orr.w	r2, r3, #4
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d004      	beq.n	800bd08 <I2C_Slave_ISR_IT+0xe6>
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd04:	f040 8085 	bne.w	800be12 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f001 f92c 	bl	800cf6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bd14:	e07d      	b.n	800be12 <I2C_Slave_ISR_IT+0x1f0>
 800bd16:	e07c      	b.n	800be12 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	089b      	lsrs	r3, r3, #2
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d030      	beq.n	800bd86 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	089b      	lsrs	r3, r3, #2
 800bd28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02a      	beq.n	800bd86 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d018      	beq.n	800bd6c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	1c5a      	adds	r2, r3, #1
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd56:	3b01      	subs	r3, #1
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	3b01      	subs	r3, #1
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d14f      	bne.n	800be16 <I2C_Slave_ISR_IT+0x1f4>
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd7c:	d04b      	beq.n	800be16 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 fd1b 	bl	800c7ba <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bd84:	e047      	b.n	800be16 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	08db      	lsrs	r3, r3, #3
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	08db      	lsrs	r3, r3, #3
 800bd96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bd9e:	6939      	ldr	r1, [r7, #16]
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fc49 	bl	800c638 <I2C_ITAddrCplt>
 800bda6:	e037      	b.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	085b      	lsrs	r3, r3, #1
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d031      	beq.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d02b      	beq.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d018      	beq.n	800bdfc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	3b01      	subs	r3, #1
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	851a      	strh	r2, [r3, #40]	; 0x28
 800bdfa:	e00d      	b.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be02:	d002      	beq.n	800be0a <I2C_Slave_ISR_IT+0x1e8>
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 fcd5 	bl	800c7ba <I2C_ITSlaveSeqCplt>
 800be10:	e002      	b.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800be12:	bf00      	nop
 800be14:	e000      	b.n	800be18 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800be16:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b088      	sub	sp, #32
 800be2e:	af02      	add	r7, sp, #8
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <I2C_Master_ISR_DMA+0x1a>
 800be40:	2302      	movs	r3, #2
 800be42:	e0e1      	b.n	800c008 <I2C_Master_ISR_DMA+0x1de>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	091b      	lsrs	r3, r3, #4
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d017      	beq.n	800be88 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	091b      	lsrs	r3, r3, #4
 800be5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be60:	2b00      	cmp	r3, #0
 800be62:	d011      	beq.n	800be88 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2210      	movs	r2, #16
 800be6a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be70:	f043 0204 	orr.w	r2, r3, #4
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be78:	2120      	movs	r1, #32
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f001 fbd2 	bl	800d624 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f001 f98a 	bl	800d19a <I2C_Flush_TXDR>
 800be86:	e0ba      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	09db      	lsrs	r3, r3, #7
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d072      	beq.n	800bf7a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	099b      	lsrs	r3, r3, #6
 800be98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d06c      	beq.n	800bf7a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beae:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d04e      	beq.n	800bf58 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bec6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800becc:	b29b      	uxth	r3, r3
 800bece:	2bff      	cmp	r3, #255	; 0xff
 800bed0:	d906      	bls.n	800bee0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	22ff      	movs	r2, #255	; 0xff
 800bed6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e010      	b.n	800bf02 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bef2:	d003      	beq.n	800befc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	e002      	b.n	800bf02 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800befc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf00:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	8a79      	ldrh	r1, [r7, #18]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f001 fb55 	bl	800d5c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b22      	cmp	r3, #34	; 0x22
 800bf32:	d108      	bne.n	800bf46 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf44:	e05b      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf56:	e052      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf66:	d003      	beq.n	800bf70 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 fbe9 	bl	800c740 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bf6e:	e046      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf70:	2140      	movs	r1, #64	; 0x40
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 fffa 	bl	800cf6c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bf78:	e041      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	099b      	lsrs	r3, r3, #6
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d029      	beq.n	800bfda <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	099b      	lsrs	r3, r3, #6
 800bf8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d023      	beq.n	800bfda <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d119      	bne.n	800bfd0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfaa:	d027      	beq.n	800bffc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfb4:	d108      	bne.n	800bfc8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfc4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bfc6:	e019      	b.n	800bffc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 fbb9 	bl	800c740 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bfce:	e015      	b.n	800bffc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bfd0:	2140      	movs	r1, #64	; 0x40
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 ffca 	bl	800cf6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bfd8:	e010      	b.n	800bffc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	095b      	lsrs	r3, r3, #5
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00b      	beq.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	095b      	lsrs	r3, r3, #5
 800bfea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d005      	beq.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 fc3f 	bl	800c878 <I2C_ITMasterCplt>
 800bffa:	e000      	b.n	800bffe <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bffc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b088      	sub	sp, #32
 800c014:	af02      	add	r7, sp, #8
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c01c:	4b92      	ldr	r3, [pc, #584]	; (800c268 <I2C_Mem_ISR_DMA+0x258>)
 800c01e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <I2C_Mem_ISR_DMA+0x1e>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e118      	b.n	800c260 <I2C_Mem_ISR_DMA+0x250>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	091b      	lsrs	r3, r3, #4
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d017      	beq.n	800c072 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	091b      	lsrs	r3, r3, #4
 800c046:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d011      	beq.n	800c072 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2210      	movs	r2, #16
 800c054:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c05a:	f043 0204 	orr.w	r2, r3, #4
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c062:	2120      	movs	r1, #32
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f001 fadd 	bl	800d624 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f001 f895 	bl	800d19a <I2C_Flush_TXDR>
 800c070:	e0f1      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00f      	beq.n	800c09e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	085b      	lsrs	r3, r3, #1
 800c082:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c086:	2b00      	cmp	r3, #0
 800c088:	d009      	beq.n	800c09e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c092:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c09a:	651a      	str	r2, [r3, #80]	; 0x50
 800c09c:	e0db      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	09db      	lsrs	r3, r3, #7
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d060      	beq.n	800c16c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	099b      	lsrs	r3, r3, #6
 800c0ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d05a      	beq.n	800c16c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f001 fb37 	bl	800d72c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c0be:	2110      	movs	r1, #16
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f001 faaf 	bl	800d624 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d048      	beq.n	800c162 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2bff      	cmp	r3, #255	; 0xff
 800c0d8:	d910      	bls.n	800c0fc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	22ff      	movs	r2, #255	; 0xff
 800c0de:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	b299      	uxth	r1, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f001 fa63 	bl	800d5c0 <I2C_TransferConfig>
 800c0fa:	e011      	b.n	800c120 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c10a:	b299      	uxth	r1, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c110:	b2da      	uxtb	r2, r3
 800c112:	2300      	movs	r3, #0
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f001 fa50 	bl	800d5c0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b22      	cmp	r3, #34	; 0x22
 800c13c:	d108      	bne.n	800c150 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c14c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c14e:	e082      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c15e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c160:	e079      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c162:	2140      	movs	r1, #64	; 0x40
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 ff01 	bl	800cf6c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c16a:	e074      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	099b      	lsrs	r3, r3, #6
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d05e      	beq.n	800c236 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	099b      	lsrs	r3, r3, #6
 800c17c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c180:	2b00      	cmp	r3, #0
 800c182:	d058      	beq.n	800c236 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c184:	2101      	movs	r1, #1
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f001 fad0 	bl	800d72c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c18c:	2110      	movs	r1, #16
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f001 fa48 	bl	800d624 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b22      	cmp	r3, #34	; 0x22
 800c19e:	d101      	bne.n	800c1a4 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c1a0:	4b32      	ldr	r3, [pc, #200]	; (800c26c <I2C_Mem_ISR_DMA+0x25c>)
 800c1a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	2bff      	cmp	r3, #255	; 0xff
 800c1ac:	d910      	bls.n	800c1d0 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	22ff      	movs	r2, #255	; 0xff
 800c1b2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b8:	b299      	uxth	r1, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f001 f9f9 	bl	800d5c0 <I2C_TransferConfig>
 800c1ce:	e011      	b.n	800c1f4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1de:	b299      	uxth	r1, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f001 f9e6 	bl	800d5c0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	b29a      	uxth	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	2b22      	cmp	r3, #34	; 0x22
 800c210:	d108      	bne.n	800c224 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c220:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c222:	e018      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c232:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c234:	e00f      	b.n	800c256 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	095b      	lsrs	r3, r3, #5
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	095b      	lsrs	r3, r3, #5
 800c246:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c24e:	68b9      	ldr	r1, [r7, #8]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fb11 	bl	800c878 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	80002000 	.word	0x80002000
 800c26c:	80002400 	.word	0x80002400

0800c270 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c282:	2300      	movs	r3, #0
 800c284:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d101      	bne.n	800c294 <I2C_Slave_ISR_DMA+0x24>
 800c290:	2302      	movs	r3, #2
 800c292:	e1cc      	b.n	800c62e <I2C_Slave_ISR_DMA+0x3be>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	095b      	lsrs	r3, r3, #5
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d004      	beq.n	800c2be <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 fba8 	bl	800ca0c <I2C_ITSlaveCplt>
 800c2bc:	e1b2      	b.n	800c624 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	091b      	lsrs	r3, r3, #4
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f000 819c 	beq.w	800c604 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	091b      	lsrs	r3, r3, #4
 800c2d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 8195 	beq.w	800c604 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	0b9b      	lsrs	r3, r3, #14
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	0bdb      	lsrs	r3, r3, #15
 800c2ea:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 8181 	beq.w	800c5f6 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d07c      	beq.n	800c3f6 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	0bdb      	lsrs	r3, r3, #15
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d076      	beq.n	800c3f6 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a75      	ldr	r2, [pc, #468]	; (800c4e4 <I2C_Slave_ISR_DMA+0x274>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d059      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a73      	ldr	r2, [pc, #460]	; (800c4e8 <I2C_Slave_ISR_DMA+0x278>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d053      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a71      	ldr	r2, [pc, #452]	; (800c4ec <I2C_Slave_ISR_DMA+0x27c>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d04d      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a6f      	ldr	r2, [pc, #444]	; (800c4f0 <I2C_Slave_ISR_DMA+0x280>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d047      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a6d      	ldr	r2, [pc, #436]	; (800c4f4 <I2C_Slave_ISR_DMA+0x284>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d041      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a6b      	ldr	r2, [pc, #428]	; (800c4f8 <I2C_Slave_ISR_DMA+0x288>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d03b      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a69      	ldr	r2, [pc, #420]	; (800c4fc <I2C_Slave_ISR_DMA+0x28c>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d035      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a67      	ldr	r2, [pc, #412]	; (800c500 <I2C_Slave_ISR_DMA+0x290>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d02f      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a65      	ldr	r2, [pc, #404]	; (800c504 <I2C_Slave_ISR_DMA+0x294>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d029      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a63      	ldr	r2, [pc, #396]	; (800c508 <I2C_Slave_ISR_DMA+0x298>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d023      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a61      	ldr	r2, [pc, #388]	; (800c50c <I2C_Slave_ISR_DMA+0x29c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d01d      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a5f      	ldr	r2, [pc, #380]	; (800c510 <I2C_Slave_ISR_DMA+0x2a0>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d017      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a5d      	ldr	r2, [pc, #372]	; (800c514 <I2C_Slave_ISR_DMA+0x2a4>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d011      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a5b      	ldr	r2, [pc, #364]	; (800c518 <I2C_Slave_ISR_DMA+0x2a8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a59      	ldr	r2, [pc, #356]	; (800c51c <I2C_Slave_ISR_DMA+0x2ac>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d005      	beq.n	800c3c8 <I2C_Slave_ISR_DMA+0x158>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a57      	ldr	r2, [pc, #348]	; (800c520 <I2C_Slave_ISR_DMA+0x2b0>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d109      	bne.n	800c3dc <I2C_Slave_ISR_DMA+0x16c>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2301      	moveq	r3, #1
 800c3d6:	2300      	movne	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	e008      	b.n	800c3ee <I2C_Slave_ISR_DMA+0x17e>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bf0c      	ite	eq
 800c3e8:	2301      	moveq	r3, #1
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 809f 	beq.w	800c53e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	0b9b      	lsrs	r3, r3, #14
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8098 	beq.w	800c53e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a33      	ldr	r2, [pc, #204]	; (800c4e4 <I2C_Slave_ISR_DMA+0x274>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d059      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a31      	ldr	r2, [pc, #196]	; (800c4e8 <I2C_Slave_ISR_DMA+0x278>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d053      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a2f      	ldr	r2, [pc, #188]	; (800c4ec <I2C_Slave_ISR_DMA+0x27c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d04d      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a2d      	ldr	r2, [pc, #180]	; (800c4f0 <I2C_Slave_ISR_DMA+0x280>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d047      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a2b      	ldr	r2, [pc, #172]	; (800c4f4 <I2C_Slave_ISR_DMA+0x284>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d041      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a29      	ldr	r2, [pc, #164]	; (800c4f8 <I2C_Slave_ISR_DMA+0x288>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d03b      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a27      	ldr	r2, [pc, #156]	; (800c4fc <I2C_Slave_ISR_DMA+0x28c>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d035      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a25      	ldr	r2, [pc, #148]	; (800c500 <I2C_Slave_ISR_DMA+0x290>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d02f      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a23      	ldr	r2, [pc, #140]	; (800c504 <I2C_Slave_ISR_DMA+0x294>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d029      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a21      	ldr	r2, [pc, #132]	; (800c508 <I2C_Slave_ISR_DMA+0x298>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d023      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a1f      	ldr	r2, [pc, #124]	; (800c50c <I2C_Slave_ISR_DMA+0x29c>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d01d      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a1d      	ldr	r2, [pc, #116]	; (800c510 <I2C_Slave_ISR_DMA+0x2a0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d017      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <I2C_Slave_ISR_DMA+0x2a4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d011      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a19      	ldr	r2, [pc, #100]	; (800c518 <I2C_Slave_ISR_DMA+0x2a8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d00b      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a17      	ldr	r2, [pc, #92]	; (800c51c <I2C_Slave_ISR_DMA+0x2ac>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d005      	beq.n	800c4ce <I2C_Slave_ISR_DMA+0x25e>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a15      	ldr	r2, [pc, #84]	; (800c520 <I2C_Slave_ISR_DMA+0x2b0>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d12a      	bne.n	800c524 <I2C_Slave_ISR_DMA+0x2b4>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bf0c      	ite	eq
 800c4da:	2301      	moveq	r3, #1
 800c4dc:	2300      	movne	r3, #0
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	e029      	b.n	800c536 <I2C_Slave_ISR_DMA+0x2c6>
 800c4e2:	bf00      	nop
 800c4e4:	40020010 	.word	0x40020010
 800c4e8:	40020028 	.word	0x40020028
 800c4ec:	40020040 	.word	0x40020040
 800c4f0:	40020058 	.word	0x40020058
 800c4f4:	40020070 	.word	0x40020070
 800c4f8:	40020088 	.word	0x40020088
 800c4fc:	400200a0 	.word	0x400200a0
 800c500:	400200b8 	.word	0x400200b8
 800c504:	40020410 	.word	0x40020410
 800c508:	40020428 	.word	0x40020428
 800c50c:	40020440 	.word	0x40020440
 800c510:	40020458 	.word	0x40020458
 800c514:	40020470 	.word	0x40020470
 800c518:	40020488 	.word	0x40020488
 800c51c:	400204a0 	.word	0x400204a0
 800c520:	400204b8 	.word	0x400204b8
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bf0c      	ite	eq
 800c530:	2301      	moveq	r3, #1
 800c532:	2300      	movne	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c53a:	2301      	movs	r3, #1
 800c53c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d128      	bne.n	800c596 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b28      	cmp	r3, #40	; 0x28
 800c54e:	d108      	bne.n	800c562 <I2C_Slave_ISR_DMA+0x2f2>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c556:	d104      	bne.n	800c562 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 fcb0 	bl	800cec0 <I2C_ITListenCplt>
 800c560:	e048      	b.n	800c5f4 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b29      	cmp	r3, #41	; 0x29
 800c56c:	d10e      	bne.n	800c58c <I2C_Slave_ISR_DMA+0x31c>
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c574:	d00a      	beq.n	800c58c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2210      	movs	r2, #16
 800c57c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 fe0b 	bl	800d19a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 f918 	bl	800c7ba <I2C_ITSlaveSeqCplt>
 800c58a:	e033      	b.n	800c5f4 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2210      	movs	r2, #16
 800c592:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c594:	e034      	b.n	800c600 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2210      	movs	r2, #16
 800c59c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5a2:	f043 0204 	orr.w	r2, r3, #4
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5b0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <I2C_Slave_ISR_DMA+0x350>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5be:	d11f      	bne.n	800c600 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c5c0:	7dfb      	ldrb	r3, [r7, #23]
 800c5c2:	2b21      	cmp	r3, #33	; 0x21
 800c5c4:	d002      	beq.n	800c5cc <I2C_Slave_ISR_DMA+0x35c>
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
 800c5c8:	2b29      	cmp	r3, #41	; 0x29
 800c5ca:	d103      	bne.n	800c5d4 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2221      	movs	r2, #33	; 0x21
 800c5d0:	631a      	str	r2, [r3, #48]	; 0x30
 800c5d2:	e008      	b.n	800c5e6 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	2b22      	cmp	r3, #34	; 0x22
 800c5d8:	d002      	beq.n	800c5e0 <I2C_Slave_ISR_DMA+0x370>
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5de:	d102      	bne.n	800c5e6 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2222      	movs	r2, #34	; 0x22
 800c5e4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f000 fcbd 	bl	800cf6c <I2C_ITError>
      if (treatdmanack == 1U)
 800c5f2:	e005      	b.n	800c600 <I2C_Slave_ISR_DMA+0x390>
 800c5f4:	e004      	b.n	800c600 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2210      	movs	r2, #16
 800c5fc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5fe:	e011      	b.n	800c624 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c600:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c602:	e00f      	b.n	800c624 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	08db      	lsrs	r3, r3, #3
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d009      	beq.n	800c624 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	08db      	lsrs	r3, r3, #3
 800c614:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f000 f80a 	bl	800c638 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3720      	adds	r7, #32
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop

0800c638 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c64e:	2b28      	cmp	r3, #40	; 0x28
 800c650:	d16a      	bne.n	800c728 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	0c1b      	lsrs	r3, r3, #16
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	0c1b      	lsrs	r3, r3, #16
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c670:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c67e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c68c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d138      	bne.n	800c708 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c696:	897b      	ldrh	r3, [r7, #10]
 800c698:	09db      	lsrs	r3, r3, #7
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	89bb      	ldrh	r3, [r7, #12]
 800c69e:	4053      	eors	r3, r2
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	f003 0306 	and.w	r3, r3, #6
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d11c      	bne.n	800c6e4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c6aa:	897b      	ldrh	r3, [r7, #10]
 800c6ac:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d13b      	bne.n	800c738 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6d6:	89ba      	ldrh	r2, [r7, #12]
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff f91e 	bl	800b91e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6e2:	e029      	b.n	800c738 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c6e4:	893b      	ldrh	r3, [r7, #8]
 800c6e6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f001 f81d 	bl	800d72c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6fa:	89ba      	ldrh	r2, [r7, #12]
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7ff f90c 	bl	800b91e <HAL_I2C_AddrCallback>
}
 800c706:	e017      	b.n	800c738 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f001 f80d 	bl	800d72c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c71a:	89ba      	ldrh	r2, [r7, #12]
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff f8fc 	bl	800b91e <HAL_I2C_AddrCallback>
}
 800c726:	e007      	b.n	800c738 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2208      	movs	r2, #8
 800c72e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b21      	cmp	r3, #33	; 0x21
 800c75a:	d115      	bne.n	800c788 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2220      	movs	r2, #32
 800c760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2211      	movs	r2, #17
 800c768:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c770:	2101      	movs	r1, #1
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 ffda 	bl	800d72c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff f8a4 	bl	800b8ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c786:	e014      	b.n	800c7b2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2220      	movs	r2, #32
 800c78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2212      	movs	r2, #18
 800c794:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c79c:	2102      	movs	r1, #2
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 ffc4 	bl	800d72c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff f898 	bl	800b8e2 <HAL_I2C_MasterRxCpltCallback>
}
 800c7b2:	bf00      	nop
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	0b9b      	lsrs	r3, r3, #14
 800c7d6:	f003 0301 	and.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d008      	beq.n	800c7f0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e00d      	b.n	800c80c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	0bdb      	lsrs	r3, r3, #15
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c80a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b29      	cmp	r3, #41	; 0x29
 800c816:	d112      	bne.n	800c83e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2228      	movs	r2, #40	; 0x28
 800c81c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2221      	movs	r2, #33	; 0x21
 800c824:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c826:	2101      	movs	r1, #1
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 ff7f 	bl	800d72c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff f85d 	bl	800b8f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c83c:	e017      	b.n	800c86e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b2a      	cmp	r3, #42	; 0x2a
 800c848:	d111      	bne.n	800c86e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2228      	movs	r2, #40	; 0x28
 800c84e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2222      	movs	r2, #34	; 0x22
 800c856:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c858:	2102      	movs	r1, #2
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 ff66 	bl	800d72c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7ff f84e 	bl	800b90a <HAL_I2C_SlaveRxCpltCallback>
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2220      	movs	r2, #32
 800c88c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b21      	cmp	r3, #33	; 0x21
 800c898:	d107      	bne.n	800c8aa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c89a:	2101      	movs	r1, #1
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 ff45 	bl	800d72c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2211      	movs	r2, #17
 800c8a6:	631a      	str	r2, [r3, #48]	; 0x30
 800c8a8:	e00c      	b.n	800c8c4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b22      	cmp	r3, #34	; 0x22
 800c8b4:	d106      	bne.n	800c8c4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c8b6:	2102      	movs	r1, #2
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 ff37 	bl	800d72c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2212      	movs	r2, #18
 800c8c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6859      	ldr	r1, [r3, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b4d      	ldr	r3, [pc, #308]	; (800ca04 <I2C_ITMasterCplt+0x18c>)
 800c8d0:	400b      	ands	r3, r1
 800c8d2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a4a      	ldr	r2, [pc, #296]	; (800ca08 <I2C_ITMasterCplt+0x190>)
 800c8de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	091b      	lsrs	r3, r3, #4
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d009      	beq.n	800c900 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2210      	movs	r2, #16
 800c8f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f8:	f043 0204 	orr.w	r2, r3, #4
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b60      	cmp	r3, #96	; 0x60
 800c90a:	d10b      	bne.n	800c924 <I2C_ITMasterCplt+0xac>
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	089b      	lsrs	r3, r3, #2
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c922:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fc38 	bl	800d19a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b60      	cmp	r3, #96	; 0x60
 800c93a:	d002      	beq.n	800c942 <I2C_ITMasterCplt+0xca>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d006      	beq.n	800c950 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fb0f 	bl	800cf6c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c94e:	e054      	b.n	800c9fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b21      	cmp	r3, #33	; 0x21
 800c95a:	d124      	bne.n	800c9a6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d10b      	bne.n	800c98e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7fe ffe1 	bl	800b94e <HAL_I2C_MemTxCpltCallback>
}
 800c98c:	e035      	b.n	800c9fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe ff95 	bl	800b8ce <HAL_I2C_MasterTxCpltCallback>
}
 800c9a4:	e029      	b.n	800c9fa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b22      	cmp	r3, #34	; 0x22
 800c9b0:	d123      	bne.n	800c9fa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b40      	cmp	r3, #64	; 0x40
 800c9ca:	d10b      	bne.n	800c9e4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7fe ffc0 	bl	800b962 <HAL_I2C_MemRxCpltCallback>
}
 800c9e2:	e00a      	b.n	800c9fa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe ff74 	bl	800b8e2 <HAL_I2C_MasterRxCpltCallback>
}
 800c9fa:	bf00      	nop
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	fe00e800 	.word	0xfe00e800
 800ca08:	ffff0000 	.word	0xffff0000

0800ca0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca2e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2220      	movs	r2, #32
 800ca36:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca38:	7afb      	ldrb	r3, [r7, #11]
 800ca3a:	2b21      	cmp	r3, #33	; 0x21
 800ca3c:	d002      	beq.n	800ca44 <I2C_ITSlaveCplt+0x38>
 800ca3e:	7afb      	ldrb	r3, [r7, #11]
 800ca40:	2b29      	cmp	r3, #41	; 0x29
 800ca42:	d108      	bne.n	800ca56 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ca44:	f248 0101 	movw	r1, #32769	; 0x8001
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fe6f 	bl	800d72c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2221      	movs	r2, #33	; 0x21
 800ca52:	631a      	str	r2, [r3, #48]	; 0x30
 800ca54:	e019      	b.n	800ca8a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca56:	7afb      	ldrb	r3, [r7, #11]
 800ca58:	2b22      	cmp	r3, #34	; 0x22
 800ca5a:	d002      	beq.n	800ca62 <I2C_ITSlaveCplt+0x56>
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca60:	d108      	bne.n	800ca74 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ca62:	f248 0102 	movw	r1, #32770	; 0x8002
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fe60 	bl	800d72c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2222      	movs	r2, #34	; 0x22
 800ca70:	631a      	str	r2, [r3, #48]	; 0x30
 800ca72:	e00a      	b.n	800ca8a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ca74:	7afb      	ldrb	r3, [r7, #11]
 800ca76:	2b28      	cmp	r3, #40	; 0x28
 800ca78:	d107      	bne.n	800ca8a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ca7a:	f248 0103 	movw	r1, #32771	; 0x8003
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fe54 	bl	800d72c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca98:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6859      	ldr	r1, [r3, #4]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	4b80      	ldr	r3, [pc, #512]	; (800cca8 <I2C_ITSlaveCplt+0x29c>)
 800caa6:	400b      	ands	r3, r1
 800caa8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fb75 	bl	800d19a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	0b9b      	lsrs	r3, r3, #14
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d07a      	beq.n	800cbb2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800caca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 8112 	beq.w	800ccfa <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a73      	ldr	r2, [pc, #460]	; (800ccac <I2C_ITSlaveCplt+0x2a0>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d059      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a71      	ldr	r2, [pc, #452]	; (800ccb0 <I2C_ITSlaveCplt+0x2a4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d053      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a6f      	ldr	r2, [pc, #444]	; (800ccb4 <I2C_ITSlaveCplt+0x2a8>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d04d      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a6d      	ldr	r2, [pc, #436]	; (800ccb8 <I2C_ITSlaveCplt+0x2ac>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d047      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a6b      	ldr	r2, [pc, #428]	; (800ccbc <I2C_ITSlaveCplt+0x2b0>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d041      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a69      	ldr	r2, [pc, #420]	; (800ccc0 <I2C_ITSlaveCplt+0x2b4>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d03b      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a67      	ldr	r2, [pc, #412]	; (800ccc4 <I2C_ITSlaveCplt+0x2b8>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d035      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a65      	ldr	r2, [pc, #404]	; (800ccc8 <I2C_ITSlaveCplt+0x2bc>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d02f      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a63      	ldr	r2, [pc, #396]	; (800cccc <I2C_ITSlaveCplt+0x2c0>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d029      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a61      	ldr	r2, [pc, #388]	; (800ccd0 <I2C_ITSlaveCplt+0x2c4>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d023      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a5f      	ldr	r2, [pc, #380]	; (800ccd4 <I2C_ITSlaveCplt+0x2c8>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d01d      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a5d      	ldr	r2, [pc, #372]	; (800ccd8 <I2C_ITSlaveCplt+0x2cc>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d017      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a5b      	ldr	r2, [pc, #364]	; (800ccdc <I2C_ITSlaveCplt+0x2d0>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d011      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a59      	ldr	r2, [pc, #356]	; (800cce0 <I2C_ITSlaveCplt+0x2d4>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d00b      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a57      	ldr	r2, [pc, #348]	; (800cce4 <I2C_ITSlaveCplt+0x2d8>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d005      	beq.n	800cb96 <I2C_ITSlaveCplt+0x18a>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a55      	ldr	r2, [pc, #340]	; (800cce8 <I2C_ITSlaveCplt+0x2dc>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d105      	bne.n	800cba2 <I2C_ITSlaveCplt+0x196>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	e004      	b.n	800cbac <I2C_ITSlaveCplt+0x1a0>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cbb0:	e0a3      	b.n	800ccfa <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	0bdb      	lsrs	r3, r3, #15
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 809d 	beq.w	800ccfa <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cbce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 8090 	beq.w	800ccfa <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a32      	ldr	r2, [pc, #200]	; (800ccac <I2C_ITSlaveCplt+0x2a0>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d059      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a30      	ldr	r2, [pc, #192]	; (800ccb0 <I2C_ITSlaveCplt+0x2a4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d053      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a2e      	ldr	r2, [pc, #184]	; (800ccb4 <I2C_ITSlaveCplt+0x2a8>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d04d      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a2c      	ldr	r2, [pc, #176]	; (800ccb8 <I2C_ITSlaveCplt+0x2ac>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d047      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a2a      	ldr	r2, [pc, #168]	; (800ccbc <I2C_ITSlaveCplt+0x2b0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d041      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a28      	ldr	r2, [pc, #160]	; (800ccc0 <I2C_ITSlaveCplt+0x2b4>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d03b      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a26      	ldr	r2, [pc, #152]	; (800ccc4 <I2C_ITSlaveCplt+0x2b8>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d035      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a24      	ldr	r2, [pc, #144]	; (800ccc8 <I2C_ITSlaveCplt+0x2bc>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d02f      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a22      	ldr	r2, [pc, #136]	; (800cccc <I2C_ITSlaveCplt+0x2c0>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d029      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a20      	ldr	r2, [pc, #128]	; (800ccd0 <I2C_ITSlaveCplt+0x2c4>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d023      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a1e      	ldr	r2, [pc, #120]	; (800ccd4 <I2C_ITSlaveCplt+0x2c8>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d01d      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a1c      	ldr	r2, [pc, #112]	; (800ccd8 <I2C_ITSlaveCplt+0x2cc>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d017      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a1a      	ldr	r2, [pc, #104]	; (800ccdc <I2C_ITSlaveCplt+0x2d0>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d011      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a18      	ldr	r2, [pc, #96]	; (800cce0 <I2C_ITSlaveCplt+0x2d4>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d00b      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a16      	ldr	r2, [pc, #88]	; (800cce4 <I2C_ITSlaveCplt+0x2d8>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d005      	beq.n	800cc9a <I2C_ITSlaveCplt+0x28e>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a14      	ldr	r2, [pc, #80]	; (800cce8 <I2C_ITSlaveCplt+0x2dc>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d128      	bne.n	800ccec <I2C_ITSlaveCplt+0x2e0>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	e027      	b.n	800ccf6 <I2C_ITSlaveCplt+0x2ea>
 800cca6:	bf00      	nop
 800cca8:	fe00e800 	.word	0xfe00e800
 800ccac:	40020010 	.word	0x40020010
 800ccb0:	40020028 	.word	0x40020028
 800ccb4:	40020040 	.word	0x40020040
 800ccb8:	40020058 	.word	0x40020058
 800ccbc:	40020070 	.word	0x40020070
 800ccc0:	40020088 	.word	0x40020088
 800ccc4:	400200a0 	.word	0x400200a0
 800ccc8:	400200b8 	.word	0x400200b8
 800cccc:	40020410 	.word	0x40020410
 800ccd0:	40020428 	.word	0x40020428
 800ccd4:	40020440 	.word	0x40020440
 800ccd8:	40020458 	.word	0x40020458
 800ccdc:	40020470 	.word	0x40020470
 800cce0:	40020488 	.word	0x40020488
 800cce4:	400204a0 	.word	0x400204a0
 800cce8:	400204b8 	.word	0x400204b8
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	089b      	lsrs	r3, r3, #2
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d020      	beq.n	800cd48 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f023 0304 	bic.w	r3, r3, #4
 800cd0c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd32:	3b01      	subs	r3, #1
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	3b01      	subs	r3, #1
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d005      	beq.n	800cd5e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd56:	f043 0204 	orr.w	r2, r3, #4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	091b      	lsrs	r3, r3, #4
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d04a      	beq.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	091b      	lsrs	r3, r3, #4
 800cd6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d044      	beq.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d128      	bne.n	800cdd2 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b28      	cmp	r3, #40	; 0x28
 800cd8a:	d108      	bne.n	800cd9e <I2C_ITSlaveCplt+0x392>
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd92:	d104      	bne.n	800cd9e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd94:	6979      	ldr	r1, [r7, #20]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f892 	bl	800cec0 <I2C_ITListenCplt>
 800cd9c:	e030      	b.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b29      	cmp	r3, #41	; 0x29
 800cda8:	d10e      	bne.n	800cdc8 <I2C_ITSlaveCplt+0x3bc>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cdb0:	d00a      	beq.n	800cdc8 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2210      	movs	r2, #16
 800cdb8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f9ed 	bl	800d19a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7ff fcfa 	bl	800c7ba <I2C_ITSlaveSeqCplt>
 800cdc6:	e01b      	b.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2210      	movs	r2, #16
 800cdce:	61da      	str	r2, [r3, #28]
 800cdd0:	e016      	b.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2210      	movs	r2, #16
 800cdd8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdde:	f043 0204 	orr.w	r2, r3, #4
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <I2C_ITSlaveCplt+0x3e8>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdf2:	d105      	bne.n	800ce00 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f8b6 	bl	800cf6c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d010      	beq.n	800ce38 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f8a5 	bl	800cf6c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	2b28      	cmp	r3, #40	; 0x28
 800ce2c:	d141      	bne.n	800ceb2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce2e:	6979      	ldr	r1, [r7, #20]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 f845 	bl	800cec0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ce36:	e03c      	b.n	800ceb2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce40:	d014      	beq.n	800ce6c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff fcb9 	bl	800c7ba <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a1c      	ldr	r2, [pc, #112]	; (800cebc <I2C_ITSlaveCplt+0x4b0>)
 800ce4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2220      	movs	r2, #32
 800ce52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7fe fd68 	bl	800b93a <HAL_I2C_ListenCpltCallback>
}
 800ce6a:	e022      	b.n	800ceb2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b22      	cmp	r3, #34	; 0x22
 800ce76:	d10e      	bne.n	800ce96 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7fe fd3b 	bl	800b90a <HAL_I2C_SlaveRxCpltCallback>
}
 800ce94:	e00d      	b.n	800ceb2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fe fd22 	bl	800b8f6 <HAL_I2C_SlaveTxCpltCallback>
}
 800ceb2:	bf00      	nop
 800ceb4:	3718      	adds	r7, #24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	ffff0000 	.word	0xffff0000

0800cec0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a26      	ldr	r2, [pc, #152]	; (800cf68 <I2C_ITListenCplt+0xa8>)
 800cece:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2220      	movs	r2, #32
 800ceda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	089b      	lsrs	r3, r3, #2
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d022      	beq.n	800cf3e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d012      	beq.n	800cf3e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf36:	f043 0204 	orr.w	r2, r3, #4
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf3e:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fbf2 	bl	800d72c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2210      	movs	r2, #16
 800cf4e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7fe fcee 	bl	800b93a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	ffff0000 	.word	0xffff0000

0800cf6c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf7c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4a6d      	ldr	r2, [pc, #436]	; (800d140 <I2C_ITError+0x1d4>)
 800cf8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	2b28      	cmp	r3, #40	; 0x28
 800cfa2:	d005      	beq.n	800cfb0 <I2C_ITError+0x44>
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	2b29      	cmp	r3, #41	; 0x29
 800cfa8:	d002      	beq.n	800cfb0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	2b2a      	cmp	r3, #42	; 0x2a
 800cfae:	d10b      	bne.n	800cfc8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cfb0:	2103      	movs	r1, #3
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fbba 	bl	800d72c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2228      	movs	r2, #40	; 0x28
 800cfbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a60      	ldr	r2, [pc, #384]	; (800d144 <I2C_ITError+0x1d8>)
 800cfc4:	635a      	str	r2, [r3, #52]	; 0x34
 800cfc6:	e030      	b.n	800d02a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cfc8:	f248 0103 	movw	r1, #32771	; 0x8003
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fbad 	bl	800d72c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f8e1 	bl	800d19a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b60      	cmp	r3, #96	; 0x60
 800cfe2:	d01f      	beq.n	800d024 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2220      	movs	r2, #32
 800cfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b20      	cmp	r3, #32
 800cff8:	d114      	bne.n	800d024 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b10      	cmp	r3, #16
 800d006:	d109      	bne.n	800d01c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2210      	movs	r2, #16
 800d00e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d014:	f043 0204 	orr.w	r2, r3, #4
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2220      	movs	r2, #32
 800d022:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	2b00      	cmp	r3, #0
 800d036:	d039      	beq.n	800d0ac <I2C_ITError+0x140>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b11      	cmp	r3, #17
 800d03c:	d002      	beq.n	800d044 <I2C_ITError+0xd8>
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b21      	cmp	r3, #33	; 0x21
 800d042:	d133      	bne.n	800d0ac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d04e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d052:	d107      	bne.n	800d064 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d062:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fd f857 	bl	800a11c <HAL_DMA_GetState>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b01      	cmp	r3, #1
 800d072:	d017      	beq.n	800d0a4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d078:	4a33      	ldr	r2, [pc, #204]	; (800d148 <I2C_ITError+0x1dc>)
 800d07a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fb fed7 	bl	8008e3c <HAL_DMA_Abort_IT>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d04d      	beq.n	800d130 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d09e:	4610      	mov	r0, r2
 800d0a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0a2:	e045      	b.n	800d130 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f851 	bl	800d14c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0aa:	e041      	b.n	800d130 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d039      	beq.n	800d128 <I2C_ITError+0x1bc>
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2b12      	cmp	r3, #18
 800d0b8:	d002      	beq.n	800d0c0 <I2C_ITError+0x154>
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b22      	cmp	r3, #34	; 0x22
 800d0be:	d133      	bne.n	800d128 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0ce:	d107      	bne.n	800d0e0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fd f819 	bl	800a11c <HAL_DMA_GetState>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d017      	beq.n	800d120 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f4:	4a14      	ldr	r2, [pc, #80]	; (800d148 <I2C_ITError+0x1dc>)
 800d0f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d104:	4618      	mov	r0, r3
 800d106:	f7fb fe99 	bl	8008e3c <HAL_DMA_Abort_IT>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d011      	beq.n	800d134 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d11a:	4610      	mov	r0, r2
 800d11c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d11e:	e009      	b.n	800d134 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 f813 	bl	800d14c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d126:	e005      	b.n	800d134 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f80f 	bl	800d14c <I2C_TreatErrorCallback>
  }
}
 800d12e:	e002      	b.n	800d136 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d130:	bf00      	nop
 800d132:	e000      	b.n	800d136 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d134:	bf00      	nop
}
 800d136:	bf00      	nop
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	ffff0000 	.word	0xffff0000
 800d144:	0800bc23 	.word	0x0800bc23
 800d148:	0800d585 	.word	0x0800d585

0800d14c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	2b60      	cmp	r3, #96	; 0x60
 800d15e:	d10e      	bne.n	800d17e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2220      	movs	r2, #32
 800d164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7fe fc07 	bl	800b98a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d17c:	e009      	b.n	800d192 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7fe fbf2 	bl	800b976 <HAL_I2C_ErrorCallback>
}
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	f003 0302 	and.w	r3, r3, #2
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d103      	bne.n	800d1b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d007      	beq.n	800d1d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	699a      	ldr	r2, [r3, #24]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f042 0201 	orr.w	r2, r2, #1
 800d1d4:	619a      	str	r2, [r3, #24]
  }
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d1fe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d104      	bne.n	800d214 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d20a:	2120      	movs	r1, #32
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 fa09 	bl	800d624 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d212:	e02d      	b.n	800d270 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d21c:	441a      	add	r2, r3
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d226:	b29b      	uxth	r3, r3
 800d228:	2bff      	cmp	r3, #255	; 0xff
 800d22a:	d903      	bls.n	800d234 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	22ff      	movs	r2, #255	; 0xff
 800d230:	851a      	strh	r2, [r3, #40]	; 0x28
 800d232:	e004      	b.n	800d23e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d238:	b29a      	uxth	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d246:	4619      	mov	r1, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3328      	adds	r3, #40	; 0x28
 800d24e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d254:	f7fb f86a 	bl	800832c <HAL_DMA_Start_IT>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d004      	beq.n	800d268 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d25e:	2110      	movs	r1, #16
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff fe83 	bl	800cf6c <I2C_ITError>
}
 800d266:	e003      	b.n	800d270 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d268:	2140      	movs	r1, #64	; 0x40
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f9da 	bl	800d624 <I2C_Enable_IRQ>
}
 800d270:	bf00      	nop
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d284:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d294:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d104      	bne.n	800d2aa <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d2a0:	2120      	movs	r1, #32
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f000 f9be 	bl	800d624 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d2a8:	e02d      	b.n	800d306 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2b2:	441a      	add	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2bff      	cmp	r3, #255	; 0xff
 800d2c0:	d903      	bls.n	800d2ca <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	22ff      	movs	r2, #255	; 0xff
 800d2c6:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2c8:	e004      	b.n	800d2d4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3324      	adds	r3, #36	; 0x24
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d2ea:	f7fb f81f 	bl	800832c <HAL_DMA_Start_IT>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d2f4:	2110      	movs	r1, #16
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7ff fe38 	bl	800cf6c <I2C_ITError>
}
 800d2fc:	e003      	b.n	800d306 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d2fe:	2140      	movs	r1, #64	; 0x40
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f000 f98f 	bl	800d624 <I2C_Enable_IRQ>
}
 800d306:	bf00      	nop
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
	...

0800d310 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	2b00      	cmp	r3, #0
 800d328:	d076      	beq.n	800d418 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a71      	ldr	r2, [pc, #452]	; (800d4f8 <I2C_DMAError+0x1e8>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d059      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a6f      	ldr	r2, [pc, #444]	; (800d4fc <I2C_DMAError+0x1ec>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d053      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a6d      	ldr	r2, [pc, #436]	; (800d500 <I2C_DMAError+0x1f0>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d04d      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a6b      	ldr	r2, [pc, #428]	; (800d504 <I2C_DMAError+0x1f4>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d047      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a69      	ldr	r2, [pc, #420]	; (800d508 <I2C_DMAError+0x1f8>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d041      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a67      	ldr	r2, [pc, #412]	; (800d50c <I2C_DMAError+0x1fc>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d03b      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a65      	ldr	r2, [pc, #404]	; (800d510 <I2C_DMAError+0x200>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d035      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a63      	ldr	r2, [pc, #396]	; (800d514 <I2C_DMAError+0x204>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d02f      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a61      	ldr	r2, [pc, #388]	; (800d518 <I2C_DMAError+0x208>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d029      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a5f      	ldr	r2, [pc, #380]	; (800d51c <I2C_DMAError+0x20c>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d023      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a5d      	ldr	r2, [pc, #372]	; (800d520 <I2C_DMAError+0x210>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d01d      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a5b      	ldr	r2, [pc, #364]	; (800d524 <I2C_DMAError+0x214>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d017      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a59      	ldr	r2, [pc, #356]	; (800d528 <I2C_DMAError+0x218>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d011      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a57      	ldr	r2, [pc, #348]	; (800d52c <I2C_DMAError+0x21c>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d00b      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a55      	ldr	r2, [pc, #340]	; (800d530 <I2C_DMAError+0x220>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d005      	beq.n	800d3ea <I2C_DMAError+0xda>
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a53      	ldr	r2, [pc, #332]	; (800d534 <I2C_DMAError+0x224>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d109      	bne.n	800d3fe <I2C_DMAError+0xee>
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	bf0c      	ite	eq
 800d3f6:	2301      	moveq	r3, #1
 800d3f8:	2300      	movne	r3, #0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	e008      	b.n	800d410 <I2C_DMAError+0x100>
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	bf0c      	ite	eq
 800d40a:	2301      	moveq	r3, #1
 800d40c:	2300      	movne	r3, #0
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d414:	2301      	movs	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 8098 	beq.w	800d552 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a33      	ldr	r2, [pc, #204]	; (800d4f8 <I2C_DMAError+0x1e8>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d059      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a31      	ldr	r2, [pc, #196]	; (800d4fc <I2C_DMAError+0x1ec>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d053      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a2f      	ldr	r2, [pc, #188]	; (800d500 <I2C_DMAError+0x1f0>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d04d      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a2d      	ldr	r2, [pc, #180]	; (800d504 <I2C_DMAError+0x1f4>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d047      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a2b      	ldr	r2, [pc, #172]	; (800d508 <I2C_DMAError+0x1f8>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d041      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a29      	ldr	r2, [pc, #164]	; (800d50c <I2C_DMAError+0x1fc>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d03b      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a27      	ldr	r2, [pc, #156]	; (800d510 <I2C_DMAError+0x200>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d035      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a25      	ldr	r2, [pc, #148]	; (800d514 <I2C_DMAError+0x204>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d02f      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a23      	ldr	r2, [pc, #140]	; (800d518 <I2C_DMAError+0x208>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d029      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a21      	ldr	r2, [pc, #132]	; (800d51c <I2C_DMAError+0x20c>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d023      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a1f      	ldr	r2, [pc, #124]	; (800d520 <I2C_DMAError+0x210>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d01d      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a1d      	ldr	r2, [pc, #116]	; (800d524 <I2C_DMAError+0x214>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d017      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a1b      	ldr	r2, [pc, #108]	; (800d528 <I2C_DMAError+0x218>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d011      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a19      	ldr	r2, [pc, #100]	; (800d52c <I2C_DMAError+0x21c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d00b      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a17      	ldr	r2, [pc, #92]	; (800d530 <I2C_DMAError+0x220>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d005      	beq.n	800d4e2 <I2C_DMAError+0x1d2>
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a15      	ldr	r2, [pc, #84]	; (800d534 <I2C_DMAError+0x224>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d12a      	bne.n	800d538 <I2C_DMAError+0x228>
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bf0c      	ite	eq
 800d4ee:	2301      	moveq	r3, #1
 800d4f0:	2300      	movne	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	e029      	b.n	800d54a <I2C_DMAError+0x23a>
 800d4f6:	bf00      	nop
 800d4f8:	40020010 	.word	0x40020010
 800d4fc:	40020028 	.word	0x40020028
 800d500:	40020040 	.word	0x40020040
 800d504:	40020058 	.word	0x40020058
 800d508:	40020070 	.word	0x40020070
 800d50c:	40020088 	.word	0x40020088
 800d510:	400200a0 	.word	0x400200a0
 800d514:	400200b8 	.word	0x400200b8
 800d518:	40020410 	.word	0x40020410
 800d51c:	40020428 	.word	0x40020428
 800d520:	40020440 	.word	0x40020440
 800d524:	40020458 	.word	0x40020458
 800d528:	40020470 	.word	0x40020470
 800d52c:	40020488 	.word	0x40020488
 800d530:	400204a0 	.word	0x400204a0
 800d534:	400204b8 	.word	0x400204b8
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	bf0c      	ite	eq
 800d544:	2301      	moveq	r3, #1
 800d546:	2300      	movne	r3, #0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d54e:	2301      	movs	r3, #1
 800d550:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7fc fdf0 	bl	800a138 <HAL_DMA_GetError>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d00e      	beq.n	800d57c <I2C_DMAError+0x26c>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d00b      	beq.n	800d57c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d572:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d574:	2110      	movs	r1, #16
 800d576:	68b8      	ldr	r0, [r7, #8]
 800d578:	f7ff fcf8 	bl	800cf6c <I2C_ITError>
  }
}
 800d57c:	bf00      	nop
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d590:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59e:	2200      	movs	r2, #0
 800d5a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f7ff fdca 	bl	800d14c <I2C_TreatErrorCallback>
}
 800d5b8:	bf00      	nop
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	607b      	str	r3, [r7, #4]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	817b      	strh	r3, [r7, #10]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5d2:	897b      	ldrh	r3, [r7, #10]
 800d5d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5d8:	7a7b      	ldrb	r3, [r7, #9]
 800d5da:	041b      	lsls	r3, r3, #16
 800d5dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	0d5b      	lsrs	r3, r3, #21
 800d5fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d5fe:	4b08      	ldr	r3, [pc, #32]	; (800d620 <I2C_TransferConfig+0x60>)
 800d600:	430b      	orrs	r3, r1
 800d602:	43db      	mvns	r3, r3
 800d604:	ea02 0103 	and.w	r1, r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d612:	bf00      	nop
 800d614:	371c      	adds	r7, #28
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	03ff63ff 	.word	0x03ff63ff

0800d624 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d638:	4a39      	ldr	r2, [pc, #228]	; (800d720 <I2C_Enable_IRQ+0xfc>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d032      	beq.n	800d6a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d642:	4a38      	ldr	r2, [pc, #224]	; (800d724 <I2C_Enable_IRQ+0x100>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d02d      	beq.n	800d6a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d64c:	4a36      	ldr	r2, [pc, #216]	; (800d728 <I2C_Enable_IRQ+0x104>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d028      	beq.n	800d6a4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d656:	2b00      	cmp	r3, #0
 800d658:	da03      	bge.n	800d662 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d660:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d662:	887b      	ldrh	r3, [r7, #2]
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d003      	beq.n	800d674 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d672:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d674:	887b      	ldrh	r3, [r7, #2]
 800d676:	f003 0302 	and.w	r3, r3, #2
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d684:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d686:	887b      	ldrh	r3, [r7, #2]
 800d688:	2b10      	cmp	r3, #16
 800d68a:	d103      	bne.n	800d694 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d692:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d694:	887b      	ldrh	r3, [r7, #2]
 800d696:	2b20      	cmp	r3, #32
 800d698:	d133      	bne.n	800d702 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f043 0320 	orr.w	r3, r3, #32
 800d6a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d6a2:	e02e      	b.n	800d702 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d6a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	da03      	bge.n	800d6b4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d6b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d6b4:	887b      	ldrh	r3, [r7, #2]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d6c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d6c6:	887b      	ldrh	r3, [r7, #2]
 800d6c8:	f003 0302 	and.w	r3, r3, #2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d6d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d6d8:	887b      	ldrh	r3, [r7, #2]
 800d6da:	2b10      	cmp	r3, #16
 800d6dc:	d103      	bne.n	800d6e6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d6e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d6e6:	887b      	ldrh	r3, [r7, #2]
 800d6e8:	2b20      	cmp	r3, #32
 800d6ea:	d103      	bne.n	800d6f4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d6f4:	887b      	ldrh	r3, [r7, #2]
 800d6f6:	2b40      	cmp	r3, #64	; 0x40
 800d6f8:	d103      	bne.n	800d702 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d700:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6819      	ldr	r1, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	430a      	orrs	r2, r1
 800d710:	601a      	str	r2, [r3, #0]
}
 800d712:	bf00      	nop
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	0800be2b 	.word	0x0800be2b
 800d724:	0800c271 	.word	0x0800c271
 800d728:	0800c011 	.word	0x0800c011

0800d72c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d73c:	887b      	ldrh	r3, [r7, #2]
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00f      	beq.n	800d766 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d74c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d754:	b2db      	uxtb	r3, r3
 800d756:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d75a:	2b28      	cmp	r3, #40	; 0x28
 800d75c:	d003      	beq.n	800d766 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d764:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d766:	887b      	ldrh	r3, [r7, #2]
 800d768:	f003 0302 	and.w	r3, r3, #2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00f      	beq.n	800d790 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d776:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d784:	2b28      	cmp	r3, #40	; 0x28
 800d786:	d003      	beq.n	800d790 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d78e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d794:	2b00      	cmp	r3, #0
 800d796:	da03      	bge.n	800d7a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d79e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d7a0:	887b      	ldrh	r3, [r7, #2]
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d103      	bne.n	800d7ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d7ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7ae:	887b      	ldrh	r3, [r7, #2]
 800d7b0:	2b20      	cmp	r3, #32
 800d7b2:	d103      	bne.n	800d7bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f043 0320 	orr.w	r3, r3, #32
 800d7ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d7bc:	887b      	ldrh	r3, [r7, #2]
 800d7be:	2b40      	cmp	r3, #64	; 0x40
 800d7c0:	d103      	bne.n	800d7ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6819      	ldr	r1, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	43da      	mvns	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	400a      	ands	r2, r1
 800d7da:	601a      	str	r2, [r3, #0]
}
 800d7dc:	bf00      	nop
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d138      	bne.n	800d870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d808:	2302      	movs	r3, #2
 800d80a:	e032      	b.n	800d872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2224      	movs	r2, #36	; 0x24
 800d818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f022 0201 	bic.w	r2, r2, #1
 800d82a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d83a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6819      	ldr	r1, [r3, #0]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	430a      	orrs	r2, r1
 800d84a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f042 0201 	orr.w	r2, r2, #1
 800d85a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2220      	movs	r2, #32
 800d860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	e000      	b.n	800d872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d870:	2302      	movs	r3, #2
  }
}
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d87e:	b480      	push	{r7}
 800d880:	b085      	sub	sp, #20
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b20      	cmp	r3, #32
 800d892:	d139      	bne.n	800d908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d101      	bne.n	800d8a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	e033      	b.n	800d90a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2224      	movs	r2, #36	; 0x24
 800d8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f022 0201 	bic.w	r2, r2, #1
 800d8c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d8d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	021b      	lsls	r3, r3, #8
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f042 0201 	orr.w	r2, r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	e000      	b.n	800d90a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d908:	2302      	movs	r3, #2
  }
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
	...

0800d918 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d920:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d926:	4a0c      	ldr	r2, [pc, #48]	; (800d958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d928:	f043 0302 	orr.w	r3, r3, #2
 800d92c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d930:	4b09      	ldr	r3, [pc, #36]	; (800d958 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d936:	f003 0302 	and.w	r3, r3, #2
 800d93a:	60fb      	str	r3, [r7, #12]
 800d93c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d93e:	4b07      	ldr	r3, [pc, #28]	; (800d95c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	4906      	ldr	r1, [pc, #24]	; (800d95c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4313      	orrs	r3, r2
 800d948:	604b      	str	r3, [r1, #4]
}
 800d94a:	bf00      	nop
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	58024400 	.word	0x58024400
 800d95c:	58000400 	.word	0x58000400

0800d960 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d98c:	4b18      	ldr	r3, [pc, #96]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f023 0201 	bic.w	r2, r3, #1
 800d994:	4916      	ldr	r1, [pc, #88]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4313      	orrs	r3, r2
 800d99a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d99c:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	4a13      	ldr	r2, [pc, #76]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9a2:	f023 0305 	bic.w	r3, r3, #5
 800d9a6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d9a8:	4b11      	ldr	r3, [pc, #68]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	4a10      	ldr	r2, [pc, #64]	; (800d9f0 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9ae:	f023 0302 	bic.w	r3, r3, #2
 800d9b2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d9b4:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <HAL_PWR_EnterSTOPMode+0x74>)
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	4a0e      	ldr	r2, [pc, #56]	; (800d9f4 <HAL_PWR_EnterSTOPMode+0x74>)
 800d9ba:	f043 0304 	orr.w	r3, r3, #4
 800d9be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d9c0:	f3bf 8f4f 	dsb	sy
}
 800d9c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d9c6:	f3bf 8f6f 	isb	sy
}
 800d9ca:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d101      	bne.n	800d9d6 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d9d2:	bf30      	wfi
 800d9d4:	e000      	b.n	800d9d8 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d9d6:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d9d8:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <HAL_PWR_EnterSTOPMode+0x74>)
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	4a05      	ldr	r2, [pc, #20]	; (800d9f4 <HAL_PWR_EnterSTOPMode+0x74>)
 800d9de:	f023 0304 	bic.w	r3, r3, #4
 800d9e2:	6113      	str	r3, [r2, #16]
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	58024800 	.word	0x58024800
 800d9f4:	e000ed00 	.word	0xe000ed00

0800d9f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800da00:	4b19      	ldr	r3, [pc, #100]	; (800da68 <HAL_PWREx_ConfigSupply+0x70>)
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d00a      	beq.n	800da22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800da0c:	4b16      	ldr	r3, [pc, #88]	; (800da68 <HAL_PWREx_ConfigSupply+0x70>)
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	429a      	cmp	r2, r3
 800da18:	d001      	beq.n	800da1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e01f      	b.n	800da5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800da1e:	2300      	movs	r3, #0
 800da20:	e01d      	b.n	800da5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800da22:	4b11      	ldr	r3, [pc, #68]	; (800da68 <HAL_PWREx_ConfigSupply+0x70>)
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	f023 0207 	bic.w	r2, r3, #7
 800da2a:	490f      	ldr	r1, [pc, #60]	; (800da68 <HAL_PWREx_ConfigSupply+0x70>)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800da32:	f7f7 fff7 	bl	8005a24 <HAL_GetTick>
 800da36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da38:	e009      	b.n	800da4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800da3a:	f7f7 fff3 	bl	8005a24 <HAL_GetTick>
 800da3e:	4602      	mov	r2, r0
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da48:	d901      	bls.n	800da4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e007      	b.n	800da5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da4e:	4b06      	ldr	r3, [pc, #24]	; (800da68 <HAL_PWREx_ConfigSupply+0x70>)
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da5a:	d1ee      	bne.n	800da3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	58024800 	.word	0x58024800

0800da6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08c      	sub	sp, #48	; 0x30
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	f000 bc48 	b.w	800e310 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 8088 	beq.w	800db9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da8e:	4b99      	ldr	r3, [pc, #612]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da98:	4b96      	ldr	r3, [pc, #600]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800da9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	2b10      	cmp	r3, #16
 800daa2:	d007      	beq.n	800dab4 <HAL_RCC_OscConfig+0x48>
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	2b18      	cmp	r3, #24
 800daa8:	d111      	bne.n	800dace <HAL_RCC_OscConfig+0x62>
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	f003 0303 	and.w	r3, r3, #3
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d10c      	bne.n	800dace <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dab4:	4b8f      	ldr	r3, [pc, #572]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d06d      	beq.n	800db9c <HAL_RCC_OscConfig+0x130>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d169      	bne.n	800db9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dac8:	2301      	movs	r3, #1
 800daca:	f000 bc21 	b.w	800e310 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad6:	d106      	bne.n	800dae6 <HAL_RCC_OscConfig+0x7a>
 800dad8:	4b86      	ldr	r3, [pc, #536]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a85      	ldr	r2, [pc, #532]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	e02e      	b.n	800db44 <HAL_RCC_OscConfig+0xd8>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10c      	bne.n	800db08 <HAL_RCC_OscConfig+0x9c>
 800daee:	4b81      	ldr	r3, [pc, #516]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a80      	ldr	r2, [pc, #512]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800daf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800daf8:	6013      	str	r3, [r2, #0]
 800dafa:	4b7e      	ldr	r3, [pc, #504]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a7d      	ldr	r2, [pc, #500]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	e01d      	b.n	800db44 <HAL_RCC_OscConfig+0xd8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db10:	d10c      	bne.n	800db2c <HAL_RCC_OscConfig+0xc0>
 800db12:	4b78      	ldr	r3, [pc, #480]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a77      	ldr	r2, [pc, #476]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	4b75      	ldr	r3, [pc, #468]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a74      	ldr	r2, [pc, #464]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	e00b      	b.n	800db44 <HAL_RCC_OscConfig+0xd8>
 800db2c:	4b71      	ldr	r3, [pc, #452]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a70      	ldr	r2, [pc, #448]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	4b6e      	ldr	r3, [pc, #440]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a6d      	ldr	r2, [pc, #436]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d013      	beq.n	800db74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db4c:	f7f7 ff6a 	bl	8005a24 <HAL_GetTick>
 800db50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db52:	e008      	b.n	800db66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db54:	f7f7 ff66 	bl	8005a24 <HAL_GetTick>
 800db58:	4602      	mov	r2, r0
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	2b64      	cmp	r3, #100	; 0x64
 800db60:	d901      	bls.n	800db66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e3d4      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db66:	4b63      	ldr	r3, [pc, #396]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0f0      	beq.n	800db54 <HAL_RCC_OscConfig+0xe8>
 800db72:	e014      	b.n	800db9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db74:	f7f7 ff56 	bl	8005a24 <HAL_GetTick>
 800db78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800db7a:	e008      	b.n	800db8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db7c:	f7f7 ff52 	bl	8005a24 <HAL_GetTick>
 800db80:	4602      	mov	r2, r0
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	2b64      	cmp	r3, #100	; 0x64
 800db88:	d901      	bls.n	800db8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e3c0      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800db8e:	4b59      	ldr	r3, [pc, #356]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1f0      	bne.n	800db7c <HAL_RCC_OscConfig+0x110>
 800db9a:	e000      	b.n	800db9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0302 	and.w	r3, r3, #2
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f000 80ca 	beq.w	800dd40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbac:	4b51      	ldr	r3, [pc, #324]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dbb6:	4b4f      	ldr	r3, [pc, #316]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d007      	beq.n	800dbd2 <HAL_RCC_OscConfig+0x166>
 800dbc2:	6a3b      	ldr	r3, [r7, #32]
 800dbc4:	2b18      	cmp	r3, #24
 800dbc6:	d156      	bne.n	800dc76 <HAL_RCC_OscConfig+0x20a>
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d151      	bne.n	800dc76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dbd2:	4b48      	ldr	r3, [pc, #288]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0304 	and.w	r3, r3, #4
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d005      	beq.n	800dbea <HAL_RCC_OscConfig+0x17e>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e392      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dbea:	4b42      	ldr	r3, [pc, #264]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f023 0219 	bic.w	r2, r3, #25
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	493f      	ldr	r1, [pc, #252]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbfc:	f7f7 ff12 	bl	8005a24 <HAL_GetTick>
 800dc00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc02:	e008      	b.n	800dc16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc04:	f7f7 ff0e 	bl	8005a24 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e37c      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc16:	4b37      	ldr	r3, [pc, #220]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0f0      	beq.n	800dc04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc22:	f7f7 ff0b 	bl	8005a3c <HAL_GetREVID>
 800dc26:	4603      	mov	r3, r0
 800dc28:	f241 0203 	movw	r2, #4099	; 0x1003
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d817      	bhi.n	800dc60 <HAL_RCC_OscConfig+0x1f4>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	2b40      	cmp	r3, #64	; 0x40
 800dc36:	d108      	bne.n	800dc4a <HAL_RCC_OscConfig+0x1de>
 800dc38:	4b2e      	ldr	r3, [pc, #184]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dc40:	4a2c      	ldr	r2, [pc, #176]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc48:	e07a      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc4a:	4b2a      	ldr	r3, [pc, #168]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	031b      	lsls	r3, r3, #12
 800dc58:	4926      	ldr	r1, [pc, #152]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc5e:	e06f      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc60:	4b24      	ldr	r3, [pc, #144]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	061b      	lsls	r3, r3, #24
 800dc6e:	4921      	ldr	r1, [pc, #132]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc70:	4313      	orrs	r3, r2
 800dc72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc74:	e064      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d047      	beq.n	800dd0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f023 0219 	bic.w	r2, r3, #25
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	491a      	ldr	r1, [pc, #104]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc90:	f7f7 fec8 	bl	8005a24 <HAL_GetTick>
 800dc94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc96:	e008      	b.n	800dcaa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc98:	f7f7 fec4 	bl	8005a24 <HAL_GetTick>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d901      	bls.n	800dcaa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e332      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcaa:	4b12      	ldr	r3, [pc, #72]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 0304 	and.w	r3, r3, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0f0      	beq.n	800dc98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcb6:	f7f7 fec1 	bl	8005a3c <HAL_GetREVID>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f241 0203 	movw	r2, #4099	; 0x1003
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d819      	bhi.n	800dcf8 <HAL_RCC_OscConfig+0x28c>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	691b      	ldr	r3, [r3, #16]
 800dcc8:	2b40      	cmp	r3, #64	; 0x40
 800dcca:	d108      	bne.n	800dcde <HAL_RCC_OscConfig+0x272>
 800dccc:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dcd4:	4a07      	ldr	r2, [pc, #28]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dcd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcda:	6053      	str	r3, [r2, #4]
 800dcdc:	e030      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	031b      	lsls	r3, r3, #12
 800dcec:	4901      	ldr	r1, [pc, #4]	; (800dcf4 <HAL_RCC_OscConfig+0x288>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	604b      	str	r3, [r1, #4]
 800dcf2:	e025      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
 800dcf4:	58024400 	.word	0x58024400
 800dcf8:	4b9a      	ldr	r3, [pc, #616]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	061b      	lsls	r3, r3, #24
 800dd06:	4997      	ldr	r1, [pc, #604]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	604b      	str	r3, [r1, #4]
 800dd0c:	e018      	b.n	800dd40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd0e:	4b95      	ldr	r3, [pc, #596]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a94      	ldr	r2, [pc, #592]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd14:	f023 0301 	bic.w	r3, r3, #1
 800dd18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd1a:	f7f7 fe83 	bl	8005a24 <HAL_GetTick>
 800dd1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd20:	e008      	b.n	800dd34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd22:	f7f7 fe7f 	bl	8005a24 <HAL_GetTick>
 800dd26:	4602      	mov	r2, r0
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d901      	bls.n	800dd34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dd30:	2303      	movs	r3, #3
 800dd32:	e2ed      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd34:	4b8b      	ldr	r3, [pc, #556]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f0      	bne.n	800dd22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0310 	and.w	r3, r3, #16
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 80a9 	beq.w	800dea0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd4e:	4b85      	ldr	r3, [pc, #532]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd58:	4b82      	ldr	r3, [pc, #520]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	2b08      	cmp	r3, #8
 800dd62:	d007      	beq.n	800dd74 <HAL_RCC_OscConfig+0x308>
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	2b18      	cmp	r3, #24
 800dd68:	d13a      	bne.n	800dde0 <HAL_RCC_OscConfig+0x374>
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d135      	bne.n	800dde0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dd74:	4b7b      	ldr	r3, [pc, #492]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d005      	beq.n	800dd8c <HAL_RCC_OscConfig+0x320>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	69db      	ldr	r3, [r3, #28]
 800dd84:	2b80      	cmp	r3, #128	; 0x80
 800dd86:	d001      	beq.n	800dd8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e2c1      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dd8c:	f7f7 fe56 	bl	8005a3c <HAL_GetREVID>
 800dd90:	4603      	mov	r3, r0
 800dd92:	f241 0203 	movw	r2, #4099	; 0x1003
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d817      	bhi.n	800ddca <HAL_RCC_OscConfig+0x35e>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	2b20      	cmp	r3, #32
 800dda0:	d108      	bne.n	800ddb4 <HAL_RCC_OscConfig+0x348>
 800dda2:	4b70      	ldr	r3, [pc, #448]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ddaa:	4a6e      	ldr	r2, [pc, #440]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ddb2:	e075      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddb4:	4b6b      	ldr	r3, [pc, #428]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	069b      	lsls	r3, r3, #26
 800ddc2:	4968      	ldr	r1, [pc, #416]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ddc8:	e06a      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddca:	4b66      	ldr	r3, [pc, #408]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	061b      	lsls	r3, r3, #24
 800ddd8:	4962      	ldr	r1, [pc, #392]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddda:	4313      	orrs	r3, r2
 800dddc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ddde:	e05f      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	69db      	ldr	r3, [r3, #28]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d042      	beq.n	800de6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dde8:	4b5e      	ldr	r3, [pc, #376]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a5d      	ldr	r2, [pc, #372]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800ddee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddf4:	f7f7 fe16 	bl	8005a24 <HAL_GetTick>
 800ddf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ddfa:	e008      	b.n	800de0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ddfc:	f7f7 fe12 	bl	8005a24 <HAL_GetTick>
 800de00:	4602      	mov	r2, r0
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	2b02      	cmp	r3, #2
 800de08:	d901      	bls.n	800de0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e280      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de0e:	4b55      	ldr	r3, [pc, #340]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0f0      	beq.n	800ddfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de1a:	f7f7 fe0f 	bl	8005a3c <HAL_GetREVID>
 800de1e:	4603      	mov	r3, r0
 800de20:	f241 0203 	movw	r2, #4099	; 0x1003
 800de24:	4293      	cmp	r3, r2
 800de26:	d817      	bhi.n	800de58 <HAL_RCC_OscConfig+0x3ec>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	2b20      	cmp	r3, #32
 800de2e:	d108      	bne.n	800de42 <HAL_RCC_OscConfig+0x3d6>
 800de30:	4b4c      	ldr	r3, [pc, #304]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800de38:	4a4a      	ldr	r2, [pc, #296]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de3e:	6053      	str	r3, [r2, #4]
 800de40:	e02e      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
 800de42:	4b48      	ldr	r3, [pc, #288]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	069b      	lsls	r3, r3, #26
 800de50:	4944      	ldr	r1, [pc, #272]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de52:	4313      	orrs	r3, r2
 800de54:	604b      	str	r3, [r1, #4]
 800de56:	e023      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
 800de58:	4b42      	ldr	r3, [pc, #264]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	061b      	lsls	r3, r3, #24
 800de66:	493f      	ldr	r1, [pc, #252]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de68:	4313      	orrs	r3, r2
 800de6a:	60cb      	str	r3, [r1, #12]
 800de6c:	e018      	b.n	800dea0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800de6e:	4b3d      	ldr	r3, [pc, #244]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a3c      	ldr	r2, [pc, #240]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de7a:	f7f7 fdd3 	bl	8005a24 <HAL_GetTick>
 800de7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800de80:	e008      	b.n	800de94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800de82:	f7f7 fdcf 	bl	8005a24 <HAL_GetTick>
 800de86:	4602      	mov	r2, r0
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d901      	bls.n	800de94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	e23d      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800de94:	4b33      	ldr	r3, [pc, #204]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1f0      	bne.n	800de82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 0308 	and.w	r3, r3, #8
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d036      	beq.n	800df1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d019      	beq.n	800dee8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800deb4:	4b2b      	ldr	r3, [pc, #172]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800deb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deb8:	4a2a      	ldr	r2, [pc, #168]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800deba:	f043 0301 	orr.w	r3, r3, #1
 800debe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dec0:	f7f7 fdb0 	bl	8005a24 <HAL_GetTick>
 800dec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dec6:	e008      	b.n	800deda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dec8:	f7f7 fdac 	bl	8005a24 <HAL_GetTick>
 800decc:	4602      	mov	r2, r0
 800dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d901      	bls.n	800deda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ded6:	2303      	movs	r3, #3
 800ded8:	e21a      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800deda:	4b22      	ldr	r3, [pc, #136]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800dedc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0f0      	beq.n	800dec8 <HAL_RCC_OscConfig+0x45c>
 800dee6:	e018      	b.n	800df1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dee8:	4b1e      	ldr	r3, [pc, #120]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800deea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deec:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800deee:	f023 0301 	bic.w	r3, r3, #1
 800def2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800def4:	f7f7 fd96 	bl	8005a24 <HAL_GetTick>
 800def8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800defa:	e008      	b.n	800df0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800defc:	f7f7 fd92 	bl	8005a24 <HAL_GetTick>
 800df00:	4602      	mov	r2, r0
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	2b02      	cmp	r3, #2
 800df08:	d901      	bls.n	800df0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e200      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df0e:	4b15      	ldr	r3, [pc, #84]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800df10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1f0      	bne.n	800defc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 0320 	and.w	r3, r3, #32
 800df22:	2b00      	cmp	r3, #0
 800df24:	d039      	beq.n	800df9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d01c      	beq.n	800df68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800df2e:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a0c      	ldr	r2, [pc, #48]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800df34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800df38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800df3a:	f7f7 fd73 	bl	8005a24 <HAL_GetTick>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df40:	e008      	b.n	800df54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800df42:	f7f7 fd6f 	bl	8005a24 <HAL_GetTick>
 800df46:	4602      	mov	r2, r0
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d901      	bls.n	800df54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	e1dd      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800df54:	4b03      	ldr	r3, [pc, #12]	; (800df64 <HAL_RCC_OscConfig+0x4f8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0f0      	beq.n	800df42 <HAL_RCC_OscConfig+0x4d6>
 800df60:	e01b      	b.n	800df9a <HAL_RCC_OscConfig+0x52e>
 800df62:	bf00      	nop
 800df64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800df68:	4b9b      	ldr	r3, [pc, #620]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a9a      	ldr	r2, [pc, #616]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800df6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800df74:	f7f7 fd56 	bl	8005a24 <HAL_GetTick>
 800df78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800df7a:	e008      	b.n	800df8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800df7c:	f7f7 fd52 	bl	8005a24 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	2b02      	cmp	r3, #2
 800df88:	d901      	bls.n	800df8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e1c0      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800df8e:	4b92      	ldr	r3, [pc, #584]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1f0      	bne.n	800df7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f003 0304 	and.w	r3, r3, #4
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 8081 	beq.w	800e0aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dfa8:	4b8c      	ldr	r3, [pc, #560]	; (800e1dc <HAL_RCC_OscConfig+0x770>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a8b      	ldr	r2, [pc, #556]	; (800e1dc <HAL_RCC_OscConfig+0x770>)
 800dfae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dfb4:	f7f7 fd36 	bl	8005a24 <HAL_GetTick>
 800dfb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dfba:	e008      	b.n	800dfce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dfbc:	f7f7 fd32 	bl	8005a24 <HAL_GetTick>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	2b64      	cmp	r3, #100	; 0x64
 800dfc8:	d901      	bls.n	800dfce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e1a0      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dfce:	4b83      	ldr	r3, [pc, #524]	; (800e1dc <HAL_RCC_OscConfig+0x770>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f0      	beq.n	800dfbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d106      	bne.n	800dff0 <HAL_RCC_OscConfig+0x584>
 800dfe2:	4b7d      	ldr	r3, [pc, #500]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800dfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfe6:	4a7c      	ldr	r2, [pc, #496]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800dfe8:	f043 0301 	orr.w	r3, r3, #1
 800dfec:	6713      	str	r3, [r2, #112]	; 0x70
 800dfee:	e02d      	b.n	800e04c <HAL_RCC_OscConfig+0x5e0>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10c      	bne.n	800e012 <HAL_RCC_OscConfig+0x5a6>
 800dff8:	4b77      	ldr	r3, [pc, #476]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800dffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dffc:	4a76      	ldr	r2, [pc, #472]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800dffe:	f023 0301 	bic.w	r3, r3, #1
 800e002:	6713      	str	r3, [r2, #112]	; 0x70
 800e004:	4b74      	ldr	r3, [pc, #464]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e008:	4a73      	ldr	r2, [pc, #460]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e00a:	f023 0304 	bic.w	r3, r3, #4
 800e00e:	6713      	str	r3, [r2, #112]	; 0x70
 800e010:	e01c      	b.n	800e04c <HAL_RCC_OscConfig+0x5e0>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	2b05      	cmp	r3, #5
 800e018:	d10c      	bne.n	800e034 <HAL_RCC_OscConfig+0x5c8>
 800e01a:	4b6f      	ldr	r3, [pc, #444]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e01e:	4a6e      	ldr	r2, [pc, #440]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e020:	f043 0304 	orr.w	r3, r3, #4
 800e024:	6713      	str	r3, [r2, #112]	; 0x70
 800e026:	4b6c      	ldr	r3, [pc, #432]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e02a:	4a6b      	ldr	r2, [pc, #428]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e02c:	f043 0301 	orr.w	r3, r3, #1
 800e030:	6713      	str	r3, [r2, #112]	; 0x70
 800e032:	e00b      	b.n	800e04c <HAL_RCC_OscConfig+0x5e0>
 800e034:	4b68      	ldr	r3, [pc, #416]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e038:	4a67      	ldr	r2, [pc, #412]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	6713      	str	r3, [r2, #112]	; 0x70
 800e040:	4b65      	ldr	r3, [pc, #404]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e044:	4a64      	ldr	r2, [pc, #400]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e046:	f023 0304 	bic.w	r3, r3, #4
 800e04a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d015      	beq.n	800e080 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e054:	f7f7 fce6 	bl	8005a24 <HAL_GetTick>
 800e058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e05a:	e00a      	b.n	800e072 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e05c:	f7f7 fce2 	bl	8005a24 <HAL_GetTick>
 800e060:	4602      	mov	r2, r0
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	f241 3288 	movw	r2, #5000	; 0x1388
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d901      	bls.n	800e072 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	e14e      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e072:	4b59      	ldr	r3, [pc, #356]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0ee      	beq.n	800e05c <HAL_RCC_OscConfig+0x5f0>
 800e07e:	e014      	b.n	800e0aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e080:	f7f7 fcd0 	bl	8005a24 <HAL_GetTick>
 800e084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e086:	e00a      	b.n	800e09e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e088:	f7f7 fccc 	bl	8005a24 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	f241 3288 	movw	r2, #5000	; 0x1388
 800e096:	4293      	cmp	r3, r2
 800e098:	d901      	bls.n	800e09e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e09a:	2303      	movs	r3, #3
 800e09c:	e138      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e09e:	4b4e      	ldr	r3, [pc, #312]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0a2:	f003 0302 	and.w	r3, r3, #2
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1ee      	bne.n	800e088 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 812d 	beq.w	800e30e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e0b4:	4b48      	ldr	r3, [pc, #288]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0bc:	2b18      	cmp	r3, #24
 800e0be:	f000 80bd 	beq.w	800e23c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	f040 809e 	bne.w	800e208 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0cc:	4b42      	ldr	r3, [pc, #264]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a41      	ldr	r2, [pc, #260]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e0d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0d8:	f7f7 fca4 	bl	8005a24 <HAL_GetTick>
 800e0dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0de:	e008      	b.n	800e0f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0e0:	f7f7 fca0 	bl	8005a24 <HAL_GetTick>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d901      	bls.n	800e0f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	e10e      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0f2:	4b39      	ldr	r3, [pc, #228]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1f0      	bne.n	800e0e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e0fe:	4b36      	ldr	r3, [pc, #216]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e102:	4b37      	ldr	r3, [pc, #220]	; (800e1e0 <HAL_RCC_OscConfig+0x774>)
 800e104:	4013      	ands	r3, r2
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e10e:	0112      	lsls	r2, r2, #4
 800e110:	430a      	orrs	r2, r1
 800e112:	4931      	ldr	r1, [pc, #196]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e114:	4313      	orrs	r3, r2
 800e116:	628b      	str	r3, [r1, #40]	; 0x28
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e11c:	3b01      	subs	r3, #1
 800e11e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	3b01      	subs	r3, #1
 800e128:	025b      	lsls	r3, r3, #9
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	431a      	orrs	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e132:	3b01      	subs	r3, #1
 800e134:	041b      	lsls	r3, r3, #16
 800e136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e13a:	431a      	orrs	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e140:	3b01      	subs	r3, #1
 800e142:	061b      	lsls	r3, r3, #24
 800e144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e148:	4923      	ldr	r1, [pc, #140]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e14a:	4313      	orrs	r3, r2
 800e14c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e14e:	4b22      	ldr	r3, [pc, #136]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e152:	4a21      	ldr	r2, [pc, #132]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e154:	f023 0301 	bic.w	r3, r3, #1
 800e158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e15a:	4b1f      	ldr	r3, [pc, #124]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e15c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e15e:	4b21      	ldr	r3, [pc, #132]	; (800e1e4 <HAL_RCC_OscConfig+0x778>)
 800e160:	4013      	ands	r3, r2
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e166:	00d2      	lsls	r2, r2, #3
 800e168:	491b      	ldr	r1, [pc, #108]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e16a:	4313      	orrs	r3, r2
 800e16c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e16e:	4b1a      	ldr	r3, [pc, #104]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e172:	f023 020c 	bic.w	r2, r3, #12
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e17a:	4917      	ldr	r1, [pc, #92]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e17c:	4313      	orrs	r3, r2
 800e17e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e180:	4b15      	ldr	r3, [pc, #84]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	f023 0202 	bic.w	r2, r3, #2
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e18c:	4912      	ldr	r1, [pc, #72]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e18e:	4313      	orrs	r3, r2
 800e190:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e192:	4b11      	ldr	r3, [pc, #68]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e196:	4a10      	ldr	r2, [pc, #64]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e19c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e19e:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a2:	4a0d      	ldr	r2, [pc, #52]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e1aa:	4b0b      	ldr	r3, [pc, #44]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ae:	4a0a      	ldr	r2, [pc, #40]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e1b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ba:	4a07      	ldr	r2, [pc, #28]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1bc:	f043 0301 	orr.w	r3, r3, #1
 800e1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e1c2:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a04      	ldr	r2, [pc, #16]	; (800e1d8 <HAL_RCC_OscConfig+0x76c>)
 800e1c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e1cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ce:	f7f7 fc29 	bl	8005a24 <HAL_GetTick>
 800e1d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e1d4:	e011      	b.n	800e1fa <HAL_RCC_OscConfig+0x78e>
 800e1d6:	bf00      	nop
 800e1d8:	58024400 	.word	0x58024400
 800e1dc:	58024800 	.word	0x58024800
 800e1e0:	fffffc0c 	.word	0xfffffc0c
 800e1e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1e8:	f7f7 fc1c 	bl	8005a24 <HAL_GetTick>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d901      	bls.n	800e1fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e1f6:	2303      	movs	r3, #3
 800e1f8:	e08a      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e1fa:	4b47      	ldr	r3, [pc, #284]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0f0      	beq.n	800e1e8 <HAL_RCC_OscConfig+0x77c>
 800e206:	e082      	b.n	800e30e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e208:	4b43      	ldr	r3, [pc, #268]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a42      	ldr	r2, [pc, #264]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e20e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e214:	f7f7 fc06 	bl	8005a24 <HAL_GetTick>
 800e218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e21a:	e008      	b.n	800e22e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e21c:	f7f7 fc02 	bl	8005a24 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	2b02      	cmp	r3, #2
 800e228:	d901      	bls.n	800e22e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e070      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e22e:	4b3a      	ldr	r3, [pc, #232]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1f0      	bne.n	800e21c <HAL_RCC_OscConfig+0x7b0>
 800e23a:	e068      	b.n	800e30e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e23c:	4b36      	ldr	r3, [pc, #216]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e240:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e242:	4b35      	ldr	r3, [pc, #212]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e246:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d031      	beq.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f003 0203 	and.w	r2, r3, #3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d12a      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	091b      	lsrs	r3, r3, #4
 800e262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d122      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e278:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d11a      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	0a5b      	lsrs	r3, r3, #9
 800e282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d111      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	0c1b      	lsrs	r3, r3, #16
 800e294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d108      	bne.n	800e2b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	0e1b      	lsrs	r3, r3, #24
 800e2a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d001      	beq.n	800e2b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e02b      	b.n	800e310 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e2b8:	4b17      	ldr	r3, [pc, #92]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	08db      	lsrs	r3, r3, #3
 800e2be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d01f      	beq.n	800e30e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e2ce:	4b12      	ldr	r3, [pc, #72]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d2:	4a11      	ldr	r2, [pc, #68]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e2d4:	f023 0301 	bic.w	r3, r3, #1
 800e2d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e2da:	f7f7 fba3 	bl	8005a24 <HAL_GetTick>
 800e2de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e2e0:	bf00      	nop
 800e2e2:	f7f7 fb9f 	bl	8005a24 <HAL_GetTick>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d0f9      	beq.n	800e2e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e2ee:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e2f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <HAL_RCC_OscConfig+0x8b0>)
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e2fa:	00d2      	lsls	r2, r2, #3
 800e2fc:	4906      	ldr	r1, [pc, #24]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e302:	4b05      	ldr	r3, [pc, #20]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e306:	4a04      	ldr	r2, [pc, #16]	; (800e318 <HAL_RCC_OscConfig+0x8ac>)
 800e308:	f043 0301 	orr.w	r3, r3, #1
 800e30c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3730      	adds	r7, #48	; 0x30
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	58024400 	.word	0x58024400
 800e31c:	ffff0007 	.word	0xffff0007

0800e320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e330:	2301      	movs	r3, #1
 800e332:	e19c      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e334:	4b8a      	ldr	r3, [pc, #552]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 030f 	and.w	r3, r3, #15
 800e33c:	683a      	ldr	r2, [r7, #0]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d910      	bls.n	800e364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e342:	4b87      	ldr	r3, [pc, #540]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f023 020f 	bic.w	r2, r3, #15
 800e34a:	4985      	ldr	r1, [pc, #532]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	4313      	orrs	r3, r2
 800e350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e352:	4b83      	ldr	r3, [pc, #524]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f003 030f 	and.w	r3, r3, #15
 800e35a:	683a      	ldr	r2, [r7, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d001      	beq.n	800e364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	e184      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f003 0304 	and.w	r3, r3, #4
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d010      	beq.n	800e392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	691a      	ldr	r2, [r3, #16]
 800e374:	4b7b      	ldr	r3, [pc, #492]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d908      	bls.n	800e392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e380:	4b78      	ldr	r3, [pc, #480]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	4975      	ldr	r1, [pc, #468]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e38e:	4313      	orrs	r3, r2
 800e390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f003 0308 	and.w	r3, r3, #8
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d010      	beq.n	800e3c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	695a      	ldr	r2, [r3, #20]
 800e3a2:	4b70      	ldr	r3, [pc, #448]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3a4:	69db      	ldr	r3, [r3, #28]
 800e3a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d908      	bls.n	800e3c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e3ae:	4b6d      	ldr	r3, [pc, #436]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3b0:	69db      	ldr	r3, [r3, #28]
 800e3b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	496a      	ldr	r1, [pc, #424]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0310 	and.w	r3, r3, #16
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d010      	beq.n	800e3ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	699a      	ldr	r2, [r3, #24]
 800e3d0:	4b64      	ldr	r3, [pc, #400]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d908      	bls.n	800e3ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e3dc:	4b61      	ldr	r3, [pc, #388]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3de:	69db      	ldr	r3, [r3, #28]
 800e3e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	495e      	ldr	r1, [pc, #376]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f003 0320 	and.w	r3, r3, #32
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d010      	beq.n	800e41c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	69da      	ldr	r2, [r3, #28]
 800e3fe:	4b59      	ldr	r3, [pc, #356]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e406:	429a      	cmp	r2, r3
 800e408:	d908      	bls.n	800e41c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e40a:	4b56      	ldr	r3, [pc, #344]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e40c:	6a1b      	ldr	r3, [r3, #32]
 800e40e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	69db      	ldr	r3, [r3, #28]
 800e416:	4953      	ldr	r1, [pc, #332]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e418:	4313      	orrs	r3, r2
 800e41a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0302 	and.w	r3, r3, #2
 800e424:	2b00      	cmp	r3, #0
 800e426:	d010      	beq.n	800e44a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68da      	ldr	r2, [r3, #12]
 800e42c:	4b4d      	ldr	r3, [pc, #308]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	f003 030f 	and.w	r3, r3, #15
 800e434:	429a      	cmp	r2, r3
 800e436:	d908      	bls.n	800e44a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e438:	4b4a      	ldr	r3, [pc, #296]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	f023 020f 	bic.w	r2, r3, #15
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	4947      	ldr	r1, [pc, #284]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e446:	4313      	orrs	r3, r2
 800e448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	d055      	beq.n	800e502 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e456:	4b43      	ldr	r3, [pc, #268]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	4940      	ldr	r1, [pc, #256]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e464:	4313      	orrs	r3, r2
 800e466:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d107      	bne.n	800e480 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e470:	4b3c      	ldr	r3, [pc, #240]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d121      	bne.n	800e4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	e0f6      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	2b03      	cmp	r3, #3
 800e486:	d107      	bne.n	800e498 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e488:	4b36      	ldr	r3, [pc, #216]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d115      	bne.n	800e4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	e0ea      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d107      	bne.n	800e4b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e4a0:	4b30      	ldr	r3, [pc, #192]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d109      	bne.n	800e4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e0de      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e4b0:	4b2c      	ldr	r3, [pc, #176]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0304 	and.w	r3, r3, #4
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e0d6      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e4c0:	4b28      	ldr	r3, [pc, #160]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	f023 0207 	bic.w	r2, r3, #7
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	4925      	ldr	r1, [pc, #148]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4d2:	f7f7 faa7 	bl	8005a24 <HAL_GetTick>
 800e4d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4d8:	e00a      	b.n	800e4f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4da:	f7f7 faa3 	bl	8005a24 <HAL_GetTick>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d901      	bls.n	800e4f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	e0be      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4f0:	4b1c      	ldr	r3, [pc, #112]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d1eb      	bne.n	800e4da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f003 0302 	and.w	r3, r3, #2
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d010      	beq.n	800e530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68da      	ldr	r2, [r3, #12]
 800e512:	4b14      	ldr	r3, [pc, #80]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	f003 030f 	and.w	r3, r3, #15
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d208      	bcs.n	800e530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e51e:	4b11      	ldr	r3, [pc, #68]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e520:	699b      	ldr	r3, [r3, #24]
 800e522:	f023 020f 	bic.w	r2, r3, #15
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	490e      	ldr	r1, [pc, #56]	; (800e564 <HAL_RCC_ClockConfig+0x244>)
 800e52c:	4313      	orrs	r3, r2
 800e52e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e530:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f003 030f 	and.w	r3, r3, #15
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d214      	bcs.n	800e568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e53e:	4b08      	ldr	r3, [pc, #32]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f023 020f 	bic.w	r2, r3, #15
 800e546:	4906      	ldr	r1, [pc, #24]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <HAL_RCC_ClockConfig+0x240>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f003 030f 	and.w	r3, r3, #15
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d005      	beq.n	800e568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	e086      	b.n	800e66e <HAL_RCC_ClockConfig+0x34e>
 800e560:	52002000 	.word	0x52002000
 800e564:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 0304 	and.w	r3, r3, #4
 800e570:	2b00      	cmp	r3, #0
 800e572:	d010      	beq.n	800e596 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	691a      	ldr	r2, [r3, #16]
 800e578:	4b3f      	ldr	r3, [pc, #252]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e580:	429a      	cmp	r2, r3
 800e582:	d208      	bcs.n	800e596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e584:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	691b      	ldr	r3, [r3, #16]
 800e590:	4939      	ldr	r1, [pc, #228]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e592:	4313      	orrs	r3, r2
 800e594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d010      	beq.n	800e5c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	695a      	ldr	r2, [r3, #20]
 800e5a6:	4b34      	ldr	r3, [pc, #208]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d208      	bcs.n	800e5c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e5b2:	4b31      	ldr	r3, [pc, #196]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5b4:	69db      	ldr	r3, [r3, #28]
 800e5b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	695b      	ldr	r3, [r3, #20]
 800e5be:	492e      	ldr	r1, [pc, #184]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 0310 	and.w	r3, r3, #16
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d010      	beq.n	800e5f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	699a      	ldr	r2, [r3, #24]
 800e5d4:	4b28      	ldr	r3, [pc, #160]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5d6:	69db      	ldr	r3, [r3, #28]
 800e5d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d208      	bcs.n	800e5f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e5e0:	4b25      	ldr	r3, [pc, #148]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	4922      	ldr	r1, [pc, #136]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f003 0320 	and.w	r3, r3, #32
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d010      	beq.n	800e620 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	69da      	ldr	r2, [r3, #28]
 800e602:	4b1d      	ldr	r3, [pc, #116]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d208      	bcs.n	800e620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e60e:	4b1a      	ldr	r3, [pc, #104]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	4917      	ldr	r1, [pc, #92]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e61c:	4313      	orrs	r3, r2
 800e61e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e620:	f000 f834 	bl	800e68c <HAL_RCC_GetSysClockFreq>
 800e624:	4602      	mov	r2, r0
 800e626:	4b14      	ldr	r3, [pc, #80]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	0a1b      	lsrs	r3, r3, #8
 800e62c:	f003 030f 	and.w	r3, r3, #15
 800e630:	4912      	ldr	r1, [pc, #72]	; (800e67c <HAL_RCC_ClockConfig+0x35c>)
 800e632:	5ccb      	ldrb	r3, [r1, r3]
 800e634:	f003 031f 	and.w	r3, r3, #31
 800e638:	fa22 f303 	lsr.w	r3, r2, r3
 800e63c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e63e:	4b0e      	ldr	r3, [pc, #56]	; (800e678 <HAL_RCC_ClockConfig+0x358>)
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	f003 030f 	and.w	r3, r3, #15
 800e646:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <HAL_RCC_ClockConfig+0x35c>)
 800e648:	5cd3      	ldrb	r3, [r2, r3]
 800e64a:	f003 031f 	and.w	r3, r3, #31
 800e64e:	693a      	ldr	r2, [r7, #16]
 800e650:	fa22 f303 	lsr.w	r3, r2, r3
 800e654:	4a0a      	ldr	r2, [pc, #40]	; (800e680 <HAL_RCC_ClockConfig+0x360>)
 800e656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e658:	4a0a      	ldr	r2, [pc, #40]	; (800e684 <HAL_RCC_ClockConfig+0x364>)
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <HAL_RCC_ClockConfig+0x368>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4618      	mov	r0, r3
 800e664:	f7f5 ff42 	bl	80044ec <HAL_InitTick>
 800e668:	4603      	mov	r3, r0
 800e66a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	58024400 	.word	0x58024400
 800e67c:	0801ad54 	.word	0x0801ad54
 800e680:	240000c0 	.word	0x240000c0
 800e684:	240000bc 	.word	0x240000bc
 800e688:	240000c4 	.word	0x240000c4

0800e68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b089      	sub	sp, #36	; 0x24
 800e690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e692:	4bb3      	ldr	r3, [pc, #716]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e69a:	2b18      	cmp	r3, #24
 800e69c:	f200 8155 	bhi.w	800e94a <HAL_RCC_GetSysClockFreq+0x2be>
 800e6a0:	a201      	add	r2, pc, #4	; (adr r2, 800e6a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a6:	bf00      	nop
 800e6a8:	0800e70d 	.word	0x0800e70d
 800e6ac:	0800e94b 	.word	0x0800e94b
 800e6b0:	0800e94b 	.word	0x0800e94b
 800e6b4:	0800e94b 	.word	0x0800e94b
 800e6b8:	0800e94b 	.word	0x0800e94b
 800e6bc:	0800e94b 	.word	0x0800e94b
 800e6c0:	0800e94b 	.word	0x0800e94b
 800e6c4:	0800e94b 	.word	0x0800e94b
 800e6c8:	0800e733 	.word	0x0800e733
 800e6cc:	0800e94b 	.word	0x0800e94b
 800e6d0:	0800e94b 	.word	0x0800e94b
 800e6d4:	0800e94b 	.word	0x0800e94b
 800e6d8:	0800e94b 	.word	0x0800e94b
 800e6dc:	0800e94b 	.word	0x0800e94b
 800e6e0:	0800e94b 	.word	0x0800e94b
 800e6e4:	0800e94b 	.word	0x0800e94b
 800e6e8:	0800e739 	.word	0x0800e739
 800e6ec:	0800e94b 	.word	0x0800e94b
 800e6f0:	0800e94b 	.word	0x0800e94b
 800e6f4:	0800e94b 	.word	0x0800e94b
 800e6f8:	0800e94b 	.word	0x0800e94b
 800e6fc:	0800e94b 	.word	0x0800e94b
 800e700:	0800e94b 	.word	0x0800e94b
 800e704:	0800e94b 	.word	0x0800e94b
 800e708:	0800e73f 	.word	0x0800e73f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e70c:	4b94      	ldr	r3, [pc, #592]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f003 0320 	and.w	r3, r3, #32
 800e714:	2b00      	cmp	r3, #0
 800e716:	d009      	beq.n	800e72c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e718:	4b91      	ldr	r3, [pc, #580]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	08db      	lsrs	r3, r3, #3
 800e71e:	f003 0303 	and.w	r3, r3, #3
 800e722:	4a90      	ldr	r2, [pc, #576]	; (800e964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e724:	fa22 f303 	lsr.w	r3, r2, r3
 800e728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e72a:	e111      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e72c:	4b8d      	ldr	r3, [pc, #564]	; (800e964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e72e:	61bb      	str	r3, [r7, #24]
      break;
 800e730:	e10e      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e732:	4b8d      	ldr	r3, [pc, #564]	; (800e968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e734:	61bb      	str	r3, [r7, #24]
      break;
 800e736:	e10b      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e738:	4b8c      	ldr	r3, [pc, #560]	; (800e96c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e73a:	61bb      	str	r3, [r7, #24]
      break;
 800e73c:	e108      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e73e:	4b88      	ldr	r3, [pc, #544]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e742:	f003 0303 	and.w	r3, r3, #3
 800e746:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e748:	4b85      	ldr	r3, [pc, #532]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74c:	091b      	lsrs	r3, r3, #4
 800e74e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e752:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e754:	4b82      	ldr	r3, [pc, #520]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e75e:	4b80      	ldr	r3, [pc, #512]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e762:	08db      	lsrs	r3, r3, #3
 800e764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	fb02 f303 	mul.w	r3, r2, r3
 800e76e:	ee07 3a90 	vmov	s15, r3
 800e772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e776:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 80e1 	beq.w	800e944 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b02      	cmp	r3, #2
 800e786:	f000 8083 	beq.w	800e890 <HAL_RCC_GetSysClockFreq+0x204>
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	f200 80a1 	bhi.w	800e8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <HAL_RCC_GetSysClockFreq+0x114>
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d056      	beq.n	800e84c <HAL_RCC_GetSysClockFreq+0x1c0>
 800e79e:	e099      	b.n	800e8d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7a0:	4b6f      	ldr	r3, [pc, #444]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 0320 	and.w	r3, r3, #32
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d02d      	beq.n	800e808 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7ac:	4b6c      	ldr	r3, [pc, #432]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	08db      	lsrs	r3, r3, #3
 800e7b2:	f003 0303 	and.w	r3, r3, #3
 800e7b6:	4a6b      	ldr	r2, [pc, #428]	; (800e964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	ee07 3a90 	vmov	s15, r3
 800e7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	ee07 3a90 	vmov	s15, r3
 800e7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7d6:	4b62      	ldr	r3, [pc, #392]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7de:	ee07 3a90 	vmov	s15, r3
 800e7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e802:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e806:	e087      	b.n	800e918 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	ee07 3a90 	vmov	s15, r3
 800e80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e812:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e974 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e81a:	4b51      	ldr	r3, [pc, #324]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e822:	ee07 3a90 	vmov	s15, r3
 800e826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e82a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e82e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e84a:	e065      	b.n	800e918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e856:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e85e:	4b40      	ldr	r3, [pc, #256]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e866:	ee07 3a90 	vmov	s15, r3
 800e86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e86e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e88a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e88e:	e043      	b.n	800e918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	ee07 3a90 	vmov	s15, r3
 800e896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e89a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e97c <HAL_RCC_GetSysClockFreq+0x2f0>
 800e89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8a2:	4b2f      	ldr	r3, [pc, #188]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e8d2:	e021      	b.n	800e918 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	ee07 3a90 	vmov	s15, r3
 800e8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8de:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8e6:	4b1e      	ldr	r3, [pc, #120]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ee:	ee07 3a90 	vmov	s15, r3
 800e8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e916:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e918:	4b11      	ldr	r3, [pc, #68]	; (800e960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91c:	0a5b      	lsrs	r3, r3, #9
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	3301      	adds	r3, #1
 800e924:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	ee07 3a90 	vmov	s15, r3
 800e92c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e930:	edd7 6a07 	vldr	s13, [r7, #28]
 800e934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e93c:	ee17 3a90 	vmov	r3, s15
 800e940:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e942:	e005      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e944:	2300      	movs	r3, #0
 800e946:	61bb      	str	r3, [r7, #24]
      break;
 800e948:	e002      	b.n	800e950 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e94a:	4b07      	ldr	r3, [pc, #28]	; (800e968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e94c:	61bb      	str	r3, [r7, #24]
      break;
 800e94e:	bf00      	nop
  }

  return sysclockfreq;
 800e950:	69bb      	ldr	r3, [r7, #24]
}
 800e952:	4618      	mov	r0, r3
 800e954:	3724      	adds	r7, #36	; 0x24
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	58024400 	.word	0x58024400
 800e964:	03d09000 	.word	0x03d09000
 800e968:	003d0900 	.word	0x003d0900
 800e96c:	017d7840 	.word	0x017d7840
 800e970:	46000000 	.word	0x46000000
 800e974:	4c742400 	.word	0x4c742400
 800e978:	4a742400 	.word	0x4a742400
 800e97c:	4bbebc20 	.word	0x4bbebc20

0800e980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e986:	f7ff fe81 	bl	800e68c <HAL_RCC_GetSysClockFreq>
 800e98a:	4602      	mov	r2, r0
 800e98c:	4b10      	ldr	r3, [pc, #64]	; (800e9d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	0a1b      	lsrs	r3, r3, #8
 800e992:	f003 030f 	and.w	r3, r3, #15
 800e996:	490f      	ldr	r1, [pc, #60]	; (800e9d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e998:	5ccb      	ldrb	r3, [r1, r3]
 800e99a:	f003 031f 	and.w	r3, r3, #31
 800e99e:	fa22 f303 	lsr.w	r3, r2, r3
 800e9a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e9a4:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	f003 030f 	and.w	r3, r3, #15
 800e9ac:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e9ae:	5cd3      	ldrb	r3, [r2, r3]
 800e9b0:	f003 031f 	and.w	r3, r3, #31
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9ba:	4a07      	ldr	r2, [pc, #28]	; (800e9d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e9be:	4a07      	ldr	r2, [pc, #28]	; (800e9dc <HAL_RCC_GetHCLKFreq+0x5c>)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e9c4:	4b04      	ldr	r3, [pc, #16]	; (800e9d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	58024400 	.word	0x58024400
 800e9d4:	0801ad54 	.word	0x0801ad54
 800e9d8:	240000c0 	.word	0x240000c0
 800e9dc:	240000bc 	.word	0x240000bc

0800e9e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e9e4:	f7ff ffcc 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	091b      	lsrs	r3, r3, #4
 800e9f0:	f003 0307 	and.w	r3, r3, #7
 800e9f4:	4904      	ldr	r1, [pc, #16]	; (800ea08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e9f6:	5ccb      	ldrb	r3, [r1, r3]
 800e9f8:	f003 031f 	and.w	r3, r3, #31
 800e9fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	58024400 	.word	0x58024400
 800ea08:	0801ad54 	.word	0x0801ad54

0800ea0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ea10:	f7ff ffb6 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800ea14:	4602      	mov	r2, r0
 800ea16:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea18:	69db      	ldr	r3, [r3, #28]
 800ea1a:	0a1b      	lsrs	r3, r3, #8
 800ea1c:	f003 0307 	and.w	r3, r3, #7
 800ea20:	4904      	ldr	r1, [pc, #16]	; (800ea34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea22:	5ccb      	ldrb	r3, [r1, r3]
 800ea24:	f003 031f 	and.w	r3, r3, #31
 800ea28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	58024400 	.word	0x58024400
 800ea34:	0801ad54 	.word	0x0801ad54

0800ea38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	223f      	movs	r2, #63	; 0x3f
 800ea46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ea48:	4b1a      	ldr	r3, [pc, #104]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea4a:	691b      	ldr	r3, [r3, #16]
 800ea4c:	f003 0207 	and.w	r2, r3, #7
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ea54:	4b17      	ldr	r3, [pc, #92]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ea60:	4b14      	ldr	r3, [pc, #80]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea62:	699b      	ldr	r3, [r3, #24]
 800ea64:	f003 020f 	and.w	r2, r3, #15
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ea6c:	4b11      	ldr	r3, [pc, #68]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea6e:	699b      	ldr	r3, [r3, #24]
 800ea70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ea78:	4b0e      	ldr	r3, [pc, #56]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea7a:	69db      	ldr	r3, [r3, #28]
 800ea7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ea84:	4b0b      	ldr	r3, [pc, #44]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea86:	69db      	ldr	r3, [r3, #28]
 800ea88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ea90:	4b08      	ldr	r3, [pc, #32]	; (800eab4 <HAL_RCC_GetClockConfig+0x7c>)
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ea9c:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <HAL_RCC_GetClockConfig+0x80>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f003 020f 	and.w	r2, r3, #15
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	601a      	str	r2, [r3, #0]
}
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	58024400 	.word	0x58024400
 800eab8:	52002000 	.word	0x52002000

0800eabc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eabc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eac0:	b0ca      	sub	sp, #296	; 0x128
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eac8:	2300      	movs	r3, #0
 800eaca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eace:	2300      	movs	r3, #0
 800ead0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ead4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eae0:	2500      	movs	r5, #0
 800eae2:	ea54 0305 	orrs.w	r3, r4, r5
 800eae6:	d049      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eaf2:	d02f      	beq.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800eaf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eaf8:	d828      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eafa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eafe:	d01a      	beq.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800eb00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb04:	d822      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eb0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb0e:	d007      	beq.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800eb10:	e01c      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb12:	4bb8      	ldr	r3, [pc, #736]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb16:	4ab7      	ldr	r2, [pc, #732]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb1e:	e01a      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb24:	3308      	adds	r3, #8
 800eb26:	2102      	movs	r1, #2
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f002 fb61 	bl	80111f0 <RCCEx_PLL2_Config>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb34:	e00f      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb3a:	3328      	adds	r3, #40	; 0x28
 800eb3c:	2102      	movs	r1, #2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f002 fc08 	bl	8011354 <RCCEx_PLL3_Config>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb4a:	e004      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb52:	e000      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800eb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10a      	bne.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800eb5e:	4ba5      	ldr	r3, [pc, #660]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb6c:	4aa1      	ldr	r2, [pc, #644]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	6513      	str	r3, [r2, #80]	; 0x50
 800eb72:	e003      	b.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800eb88:	f04f 0900 	mov.w	r9, #0
 800eb8c:	ea58 0309 	orrs.w	r3, r8, r9
 800eb90:	d047      	beq.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800eb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb98:	2b04      	cmp	r3, #4
 800eb9a:	d82a      	bhi.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800eb9c:	a201      	add	r2, pc, #4	; (adr r2, 800eba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800eb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba2:	bf00      	nop
 800eba4:	0800ebb9 	.word	0x0800ebb9
 800eba8:	0800ebc7 	.word	0x0800ebc7
 800ebac:	0800ebdd 	.word	0x0800ebdd
 800ebb0:	0800ebfb 	.word	0x0800ebfb
 800ebb4:	0800ebfb 	.word	0x0800ebfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebb8:	4b8e      	ldr	r3, [pc, #568]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbc:	4a8d      	ldr	r2, [pc, #564]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebc4:	e01a      	b.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebca:	3308      	adds	r3, #8
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f002 fb0e 	bl	80111f0 <RCCEx_PLL2_Config>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebda:	e00f      	b.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe0:	3328      	adds	r3, #40	; 0x28
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f002 fbb5 	bl	8011354 <RCCEx_PLL3_Config>
 800ebea:	4603      	mov	r3, r0
 800ebec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebf0:	e004      	b.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebf8:	e000      	b.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ebfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10a      	bne.n	800ec1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ec04:	4b7b      	ldr	r3, [pc, #492]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec08:	f023 0107 	bic.w	r1, r3, #7
 800ec0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec12:	4a78      	ldr	r2, [pc, #480]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec14:	430b      	orrs	r3, r1
 800ec16:	6513      	str	r3, [r2, #80]	; 0x50
 800ec18:	e003      	b.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ec22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ec2e:	f04f 0b00 	mov.w	fp, #0
 800ec32:	ea5a 030b 	orrs.w	r3, sl, fp
 800ec36:	d04c      	beq.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ec38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec42:	d030      	beq.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ec44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec48:	d829      	bhi.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ec4c:	d02d      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ec4e:	2bc0      	cmp	r3, #192	; 0xc0
 800ec50:	d825      	bhi.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec52:	2b80      	cmp	r3, #128	; 0x80
 800ec54:	d018      	beq.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ec56:	2b80      	cmp	r3, #128	; 0x80
 800ec58:	d821      	bhi.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d002      	beq.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ec5e:	2b40      	cmp	r3, #64	; 0x40
 800ec60:	d007      	beq.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ec62:	e01c      	b.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec64:	4b63      	ldr	r3, [pc, #396]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec68:	4a62      	ldr	r2, [pc, #392]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ec70:	e01c      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec76:	3308      	adds	r3, #8
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f002 fab8 	bl	80111f0 <RCCEx_PLL2_Config>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ec86:	e011      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec8c:	3328      	adds	r3, #40	; 0x28
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f002 fb5f 	bl	8011354 <RCCEx_PLL3_Config>
 800ec96:	4603      	mov	r3, r0
 800ec98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ec9c:	e006      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eca4:	e002      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eca6:	bf00      	nop
 800eca8:	e000      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ecaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d10a      	bne.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ecb4:	4b4f      	ldr	r3, [pc, #316]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecb8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ecbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecc2:	4a4c      	ldr	r2, [pc, #304]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecc4:	430b      	orrs	r3, r1
 800ecc6:	6513      	str	r3, [r2, #80]	; 0x50
 800ecc8:	e003      	b.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ecd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ecde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ece2:	2300      	movs	r3, #0
 800ece4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ece8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ecec:	460b      	mov	r3, r1
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	d053      	beq.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ecf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ecfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ecfe:	d035      	beq.n	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ed00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed04:	d82e      	bhi.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed0a:	d031      	beq.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ed0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed10:	d828      	bhi.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed16:	d01a      	beq.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ed18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed1c:	d822      	bhi.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d003      	beq.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ed22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed26:	d007      	beq.n	800ed38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ed28:	e01c      	b.n	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed2a:	4b32      	ldr	r3, [pc, #200]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	4a31      	ldr	r2, [pc, #196]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed36:	e01c      	b.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	2100      	movs	r1, #0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f002 fa55 	bl	80111f0 <RCCEx_PLL2_Config>
 800ed46:	4603      	mov	r3, r0
 800ed48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ed4c:	e011      	b.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed52:	3328      	adds	r3, #40	; 0x28
 800ed54:	2100      	movs	r1, #0
 800ed56:	4618      	mov	r0, r3
 800ed58:	f002 fafc 	bl	8011354 <RCCEx_PLL3_Config>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed62:	e006      	b.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ed64:	2301      	movs	r3, #1
 800ed66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed6a:	e002      	b.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ed6c:	bf00      	nop
 800ed6e:	e000      	b.n	800ed72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ed70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10b      	bne.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ed82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed8a:	4a1a      	ldr	r2, [pc, #104]	; (800edf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed8c:	430b      	orrs	r3, r1
 800ed8e:	6593      	str	r3, [r2, #88]	; 0x58
 800ed90:	e003      	b.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ed9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800eda6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800edaa:	2300      	movs	r3, #0
 800edac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800edb0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800edb4:	460b      	mov	r3, r1
 800edb6:	4313      	orrs	r3, r2
 800edb8:	d056      	beq.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800edba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800edc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edc6:	d038      	beq.n	800ee3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800edc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edcc:	d831      	bhi.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800edce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800edd2:	d034      	beq.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800edd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800edd8:	d82b      	bhi.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800edda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800edde:	d01d      	beq.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ede0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ede4:	d825      	bhi.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d006      	beq.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800edea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800edee:	d00a      	beq.n	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800edf0:	e01f      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800edf2:	bf00      	nop
 800edf4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edf8:	4ba2      	ldr	r3, [pc, #648]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfc:	4aa1      	ldr	r2, [pc, #644]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee04:	e01c      	b.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0a:	3308      	adds	r3, #8
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f002 f9ee 	bl	80111f0 <RCCEx_PLL2_Config>
 800ee14:	4603      	mov	r3, r0
 800ee16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ee1a:	e011      	b.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee20:	3328      	adds	r3, #40	; 0x28
 800ee22:	2100      	movs	r1, #0
 800ee24:	4618      	mov	r0, r3
 800ee26:	f002 fa95 	bl	8011354 <RCCEx_PLL3_Config>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee30:	e006      	b.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee38:	e002      	b.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ee3a:	bf00      	nop
 800ee3c:	e000      	b.n	800ee40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ee3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10b      	bne.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ee48:	4b8e      	ldr	r3, [pc, #568]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ee50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ee58:	4a8a      	ldr	r2, [pc, #552]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee5a:	430b      	orrs	r3, r1
 800ee5c:	6593      	str	r3, [r2, #88]	; 0x58
 800ee5e:	e003      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ee68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ee74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ee7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ee82:	460b      	mov	r3, r1
 800ee84:	4313      	orrs	r3, r2
 800ee86:	d03a      	beq.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ee88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee8e:	2b30      	cmp	r3, #48	; 0x30
 800ee90:	d01f      	beq.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ee92:	2b30      	cmp	r3, #48	; 0x30
 800ee94:	d819      	bhi.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ee96:	2b20      	cmp	r3, #32
 800ee98:	d00c      	beq.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ee9a:	2b20      	cmp	r3, #32
 800ee9c:	d815      	bhi.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d019      	beq.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800eea2:	2b10      	cmp	r3, #16
 800eea4:	d111      	bne.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eea6:	4b77      	ldr	r3, [pc, #476]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeaa:	4a76      	ldr	r2, [pc, #472]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eeb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800eeb2:	e011      	b.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeb8:	3308      	adds	r3, #8
 800eeba:	2102      	movs	r1, #2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f002 f997 	bl	80111f0 <RCCEx_PLL2_Config>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800eec8:	e006      	b.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eed0:	e002      	b.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800eed2:	bf00      	nop
 800eed4:	e000      	b.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800eed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800eee0:	4b68      	ldr	r3, [pc, #416]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eee4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800eee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeee:	4a65      	ldr	r2, [pc, #404]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eef0:	430b      	orrs	r3, r1
 800eef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eef4:	e003      	b.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eefa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800eefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ef0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ef14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	d051      	beq.n	800efc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ef1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef28:	d035      	beq.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ef2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef2e:	d82e      	bhi.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef34:	d031      	beq.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ef36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef3a:	d828      	bhi.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef40:	d01a      	beq.n	800ef78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ef42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef46:	d822      	bhi.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ef4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef50:	d007      	beq.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ef52:	e01c      	b.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef54:	4b4b      	ldr	r3, [pc, #300]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef58:	4a4a      	ldr	r2, [pc, #296]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ef60:	e01c      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef66:	3308      	adds	r3, #8
 800ef68:	2100      	movs	r1, #0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f002 f940 	bl	80111f0 <RCCEx_PLL2_Config>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ef76:	e011      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ef78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef7c:	3328      	adds	r3, #40	; 0x28
 800ef7e:	2100      	movs	r1, #0
 800ef80:	4618      	mov	r0, r3
 800ef82:	f002 f9e7 	bl	8011354 <RCCEx_PLL3_Config>
 800ef86:	4603      	mov	r3, r0
 800ef88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ef8c:	e006      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef94:	e002      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ef96:	bf00      	nop
 800ef98:	e000      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ef9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800efa4:	4b37      	ldr	r3, [pc, #220]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800efac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efb2:	4a34      	ldr	r2, [pc, #208]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efb4:	430b      	orrs	r3, r1
 800efb6:	6513      	str	r3, [r2, #80]	; 0x50
 800efb8:	e003      	b.n	800efc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800efc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800efce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800efd2:	2300      	movs	r3, #0
 800efd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800efd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800efdc:	460b      	mov	r3, r1
 800efde:	4313      	orrs	r3, r2
 800efe0:	d056      	beq.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800efe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800efec:	d033      	beq.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800efee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eff2:	d82c      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800eff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eff8:	d02f      	beq.n	800f05a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800effa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800effe:	d826      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f000:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f004:	d02b      	beq.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f00a:	d820      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f00c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f010:	d012      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f016:	d81a      	bhi.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d022      	beq.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f020:	d115      	bne.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f026:	3308      	adds	r3, #8
 800f028:	2101      	movs	r1, #1
 800f02a:	4618      	mov	r0, r3
 800f02c:	f002 f8e0 	bl	80111f0 <RCCEx_PLL2_Config>
 800f030:	4603      	mov	r3, r0
 800f032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f036:	e015      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f03c:	3328      	adds	r3, #40	; 0x28
 800f03e:	2101      	movs	r1, #1
 800f040:	4618      	mov	r0, r3
 800f042:	f002 f987 	bl	8011354 <RCCEx_PLL3_Config>
 800f046:	4603      	mov	r3, r0
 800f048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f04c:	e00a      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f054:	e006      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f056:	bf00      	nop
 800f058:	e004      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f05a:	bf00      	nop
 800f05c:	e002      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f05e:	bf00      	nop
 800f060:	e000      	b.n	800f064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d10d      	bne.n	800f088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f06c:	4b05      	ldr	r3, [pc, #20]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f070:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f07a:	4a02      	ldr	r2, [pc, #8]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f07c:	430b      	orrs	r3, r1
 800f07e:	6513      	str	r3, [r2, #80]	; 0x50
 800f080:	e006      	b.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f082:	bf00      	nop
 800f084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f08c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f09c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f0a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	d055      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0bc:	d033      	beq.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f0be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0c2:	d82c      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0c8:	d02f      	beq.n	800f12a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0ce:	d826      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f0d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f0d4:	d02b      	beq.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f0d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f0da:	d820      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0e0:	d012      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0e6:	d81a      	bhi.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d022      	beq.n	800f132 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f0ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0f0:	d115      	bne.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0f6:	3308      	adds	r3, #8
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f002 f878 	bl	80111f0 <RCCEx_PLL2_Config>
 800f100:	4603      	mov	r3, r0
 800f102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f106:	e015      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f10c:	3328      	adds	r3, #40	; 0x28
 800f10e:	2101      	movs	r1, #1
 800f110:	4618      	mov	r0, r3
 800f112:	f002 f91f 	bl	8011354 <RCCEx_PLL3_Config>
 800f116:	4603      	mov	r3, r0
 800f118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f11c:	e00a      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f124:	e006      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f126:	bf00      	nop
 800f128:	e004      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f12a:	bf00      	nop
 800f12c:	e002      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f12e:	bf00      	nop
 800f130:	e000      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10b      	bne.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f13c:	4ba3      	ldr	r3, [pc, #652]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f13e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f140:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f14c:	4a9f      	ldr	r2, [pc, #636]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f14e:	430b      	orrs	r3, r1
 800f150:	6593      	str	r3, [r2, #88]	; 0x58
 800f152:	e003      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f16c:	2300      	movs	r3, #0
 800f16e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f176:	460b      	mov	r3, r1
 800f178:	4313      	orrs	r3, r2
 800f17a:	d037      	beq.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f186:	d00e      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f18c:	d816      	bhi.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d018      	beq.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f196:	d111      	bne.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f198:	4b8c      	ldr	r3, [pc, #560]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19c:	4a8b      	ldr	r2, [pc, #556]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f19e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f1a4:	e00f      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f002 f81e 	bl	80111f0 <RCCEx_PLL2_Config>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f1ba:	e004      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1c2:	e000      	b.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10a      	bne.n	800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f1ce:	4b7f      	ldr	r3, [pc, #508]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1dc:	4a7b      	ldr	r2, [pc, #492]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1de:	430b      	orrs	r3, r1
 800f1e0:	6513      	str	r3, [r2, #80]	; 0x50
 800f1e2:	e003      	b.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f1f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f202:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f206:	460b      	mov	r3, r1
 800f208:	4313      	orrs	r3, r2
 800f20a:	d039      	beq.n	800f280 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f212:	2b03      	cmp	r3, #3
 800f214:	d81c      	bhi.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f216:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21c:	0800f259 	.word	0x0800f259
 800f220:	0800f22d 	.word	0x0800f22d
 800f224:	0800f23b 	.word	0x0800f23b
 800f228:	0800f259 	.word	0x0800f259
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f22c:	4b67      	ldr	r3, [pc, #412]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f230:	4a66      	ldr	r2, [pc, #408]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f238:	e00f      	b.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f23e:	3308      	adds	r3, #8
 800f240:	2102      	movs	r1, #2
 800f242:	4618      	mov	r0, r3
 800f244:	f001 ffd4 	bl	80111f0 <RCCEx_PLL2_Config>
 800f248:	4603      	mov	r3, r0
 800f24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f24e:	e004      	b.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f256:	e000      	b.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f25a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10a      	bne.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f262:	4b5a      	ldr	r3, [pc, #360]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f266:	f023 0103 	bic.w	r1, r3, #3
 800f26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f26e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f270:	4a56      	ldr	r2, [pc, #344]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f272:	430b      	orrs	r3, r1
 800f274:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f276:	e003      	b.n	800f280 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f27c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f28c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f290:	2300      	movs	r3, #0
 800f292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f296:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f29a:	460b      	mov	r3, r1
 800f29c:	4313      	orrs	r3, r2
 800f29e:	f000 809f 	beq.w	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f2a2:	4b4b      	ldr	r3, [pc, #300]	; (800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a4a      	ldr	r2, [pc, #296]	; (800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f2a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f2ae:	f7f6 fbb9 	bl	8005a24 <HAL_GetTick>
 800f2b2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2b6:	e00b      	b.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f2b8:	f7f6 fbb4 	bl	8005a24 <HAL_GetTick>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	2b64      	cmp	r3, #100	; 0x64
 800f2c6:	d903      	bls.n	800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2ce:	e005      	b.n	800f2dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2d0:	4b3f      	ldr	r3, [pc, #252]	; (800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0ed      	beq.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d179      	bne.n	800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f2e4:	4b39      	ldr	r3, [pc, #228]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f2f0:	4053      	eors	r3, r2
 800f2f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d015      	beq.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f2fa:	4b34      	ldr	r3, [pc, #208]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f302:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f306:	4b31      	ldr	r3, [pc, #196]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f30a:	4a30      	ldr	r2, [pc, #192]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f30c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f310:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f312:	4b2e      	ldr	r3, [pc, #184]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f316:	4a2d      	ldr	r2, [pc, #180]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f31c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f31e:	4a2b      	ldr	r2, [pc, #172]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f324:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f332:	d118      	bne.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f334:	f7f6 fb76 	bl	8005a24 <HAL_GetTick>
 800f338:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f33c:	e00d      	b.n	800f35a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f33e:	f7f6 fb71 	bl	8005a24 <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f348:	1ad2      	subs	r2, r2, r3
 800f34a:	f241 3388 	movw	r3, #5000	; 0x1388
 800f34e:	429a      	cmp	r2, r3
 800f350:	d903      	bls.n	800f35a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f352:	2303      	movs	r3, #3
 800f354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f358:	e005      	b.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f35a:	4b1c      	ldr	r3, [pc, #112]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f35e:	f003 0302 	and.w	r3, r3, #2
 800f362:	2b00      	cmp	r3, #0
 800f364:	d0eb      	beq.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d129      	bne.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f37a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f37e:	d10e      	bne.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f380:	4b12      	ldr	r3, [pc, #72]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f38c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f390:	091a      	lsrs	r2, r3, #4
 800f392:	4b10      	ldr	r3, [pc, #64]	; (800f3d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f394:	4013      	ands	r3, r2
 800f396:	4a0d      	ldr	r2, [pc, #52]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f398:	430b      	orrs	r3, r1
 800f39a:	6113      	str	r3, [r2, #16]
 800f39c:	e005      	b.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f39e:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	4a0a      	ldr	r2, [pc, #40]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3a8:	6113      	str	r3, [r2, #16]
 800f3aa:	4b08      	ldr	r3, [pc, #32]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3ba:	4a04      	ldr	r2, [pc, #16]	; (800f3cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3bc:	430b      	orrs	r3, r1
 800f3be:	6713      	str	r3, [r2, #112]	; 0x70
 800f3c0:	e00e      	b.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f3ca:	e009      	b.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f3cc:	58024400 	.word	0x58024400
 800f3d0:	58024800 	.word	0x58024800
 800f3d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f002 0301 	and.w	r3, r2, #1
 800f3ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	f000 8089 	beq.w	800f514 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f408:	2b28      	cmp	r3, #40	; 0x28
 800f40a:	d86b      	bhi.n	800f4e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f40c:	a201      	add	r2, pc, #4	; (adr r2, 800f414 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f412:	bf00      	nop
 800f414:	0800f4ed 	.word	0x0800f4ed
 800f418:	0800f4e5 	.word	0x0800f4e5
 800f41c:	0800f4e5 	.word	0x0800f4e5
 800f420:	0800f4e5 	.word	0x0800f4e5
 800f424:	0800f4e5 	.word	0x0800f4e5
 800f428:	0800f4e5 	.word	0x0800f4e5
 800f42c:	0800f4e5 	.word	0x0800f4e5
 800f430:	0800f4e5 	.word	0x0800f4e5
 800f434:	0800f4b9 	.word	0x0800f4b9
 800f438:	0800f4e5 	.word	0x0800f4e5
 800f43c:	0800f4e5 	.word	0x0800f4e5
 800f440:	0800f4e5 	.word	0x0800f4e5
 800f444:	0800f4e5 	.word	0x0800f4e5
 800f448:	0800f4e5 	.word	0x0800f4e5
 800f44c:	0800f4e5 	.word	0x0800f4e5
 800f450:	0800f4e5 	.word	0x0800f4e5
 800f454:	0800f4cf 	.word	0x0800f4cf
 800f458:	0800f4e5 	.word	0x0800f4e5
 800f45c:	0800f4e5 	.word	0x0800f4e5
 800f460:	0800f4e5 	.word	0x0800f4e5
 800f464:	0800f4e5 	.word	0x0800f4e5
 800f468:	0800f4e5 	.word	0x0800f4e5
 800f46c:	0800f4e5 	.word	0x0800f4e5
 800f470:	0800f4e5 	.word	0x0800f4e5
 800f474:	0800f4ed 	.word	0x0800f4ed
 800f478:	0800f4e5 	.word	0x0800f4e5
 800f47c:	0800f4e5 	.word	0x0800f4e5
 800f480:	0800f4e5 	.word	0x0800f4e5
 800f484:	0800f4e5 	.word	0x0800f4e5
 800f488:	0800f4e5 	.word	0x0800f4e5
 800f48c:	0800f4e5 	.word	0x0800f4e5
 800f490:	0800f4e5 	.word	0x0800f4e5
 800f494:	0800f4ed 	.word	0x0800f4ed
 800f498:	0800f4e5 	.word	0x0800f4e5
 800f49c:	0800f4e5 	.word	0x0800f4e5
 800f4a0:	0800f4e5 	.word	0x0800f4e5
 800f4a4:	0800f4e5 	.word	0x0800f4e5
 800f4a8:	0800f4e5 	.word	0x0800f4e5
 800f4ac:	0800f4e5 	.word	0x0800f4e5
 800f4b0:	0800f4e5 	.word	0x0800f4e5
 800f4b4:	0800f4ed 	.word	0x0800f4ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4bc:	3308      	adds	r3, #8
 800f4be:	2101      	movs	r1, #1
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f001 fe95 	bl	80111f0 <RCCEx_PLL2_Config>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f4cc:	e00f      	b.n	800f4ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4d2:	3328      	adds	r3, #40	; 0x28
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f001 ff3c 	bl	8011354 <RCCEx_PLL3_Config>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f4e2:	e004      	b.n	800f4ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f4ea:	e000      	b.n	800f4ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10a      	bne.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f4f6:	4bbf      	ldr	r3, [pc, #764]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f504:	4abb      	ldr	r2, [pc, #748]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f506:	430b      	orrs	r3, r1
 800f508:	6553      	str	r3, [r2, #84]	; 0x54
 800f50a:	e003      	b.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f50c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	f002 0302 	and.w	r3, r2, #2
 800f520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f524:	2300      	movs	r3, #0
 800f526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f52a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f52e:	460b      	mov	r3, r1
 800f530:	4313      	orrs	r3, r2
 800f532:	d041      	beq.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d824      	bhi.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f53e:	a201      	add	r2, pc, #4	; (adr r2, 800f544 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f544:	0800f591 	.word	0x0800f591
 800f548:	0800f55d 	.word	0x0800f55d
 800f54c:	0800f573 	.word	0x0800f573
 800f550:	0800f591 	.word	0x0800f591
 800f554:	0800f591 	.word	0x0800f591
 800f558:	0800f591 	.word	0x0800f591
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f560:	3308      	adds	r3, #8
 800f562:	2101      	movs	r1, #1
 800f564:	4618      	mov	r0, r3
 800f566:	f001 fe43 	bl	80111f0 <RCCEx_PLL2_Config>
 800f56a:	4603      	mov	r3, r0
 800f56c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f570:	e00f      	b.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f576:	3328      	adds	r3, #40	; 0x28
 800f578:	2101      	movs	r1, #1
 800f57a:	4618      	mov	r0, r3
 800f57c:	f001 feea 	bl	8011354 <RCCEx_PLL3_Config>
 800f580:	4603      	mov	r3, r0
 800f582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f586:	e004      	b.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f588:	2301      	movs	r3, #1
 800f58a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f58e:	e000      	b.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f590:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10a      	bne.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f59a:	4b96      	ldr	r3, [pc, #600]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f59e:	f023 0107 	bic.w	r1, r3, #7
 800f5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5a8:	4a92      	ldr	r2, [pc, #584]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5aa:	430b      	orrs	r3, r1
 800f5ac:	6553      	str	r3, [r2, #84]	; 0x54
 800f5ae:	e003      	b.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	f002 0304 	and.w	r3, r2, #4
 800f5c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f5ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	d044      	beq.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5e0:	2b05      	cmp	r3, #5
 800f5e2:	d825      	bhi.n	800f630 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f5e4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ea:	bf00      	nop
 800f5ec:	0800f639 	.word	0x0800f639
 800f5f0:	0800f605 	.word	0x0800f605
 800f5f4:	0800f61b 	.word	0x0800f61b
 800f5f8:	0800f639 	.word	0x0800f639
 800f5fc:	0800f639 	.word	0x0800f639
 800f600:	0800f639 	.word	0x0800f639
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f608:	3308      	adds	r3, #8
 800f60a:	2101      	movs	r1, #1
 800f60c:	4618      	mov	r0, r3
 800f60e:	f001 fdef 	bl	80111f0 <RCCEx_PLL2_Config>
 800f612:	4603      	mov	r3, r0
 800f614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f618:	e00f      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f61e:	3328      	adds	r3, #40	; 0x28
 800f620:	2101      	movs	r1, #1
 800f622:	4618      	mov	r0, r3
 800f624:	f001 fe96 	bl	8011354 <RCCEx_PLL3_Config>
 800f628:	4603      	mov	r3, r0
 800f62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f62e:	e004      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f630:	2301      	movs	r3, #1
 800f632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f636:	e000      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10b      	bne.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f642:	4b6c      	ldr	r3, [pc, #432]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f646:	f023 0107 	bic.w	r1, r3, #7
 800f64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f652:	4a68      	ldr	r2, [pc, #416]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f654:	430b      	orrs	r3, r1
 800f656:	6593      	str	r3, [r2, #88]	; 0x58
 800f658:	e003      	b.n	800f662 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f65a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f65e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66a:	f002 0320 	and.w	r3, r2, #32
 800f66e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f672:	2300      	movs	r3, #0
 800f674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f67c:	460b      	mov	r3, r1
 800f67e:	4313      	orrs	r3, r2
 800f680:	d055      	beq.n	800f72e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f68e:	d033      	beq.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f694:	d82c      	bhi.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f69a:	d02f      	beq.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f69c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6a0:	d826      	bhi.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6a6:	d02b      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f6a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6ac:	d820      	bhi.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6b2:	d012      	beq.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f6b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6b8:	d81a      	bhi.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d022      	beq.n	800f704 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6c2:	d115      	bne.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f001 fd8f 	bl	80111f0 <RCCEx_PLL2_Config>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f6d8:	e015      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6de:	3328      	adds	r3, #40	; 0x28
 800f6e0:	2102      	movs	r1, #2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f001 fe36 	bl	8011354 <RCCEx_PLL3_Config>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f6ee:	e00a      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6f6:	e006      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f6f8:	bf00      	nop
 800f6fa:	e004      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f6fc:	bf00      	nop
 800f6fe:	e002      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f700:	bf00      	nop
 800f702:	e000      	b.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f704:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d10b      	bne.n	800f726 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f70e:	4b39      	ldr	r3, [pc, #228]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f712:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f71e:	4a35      	ldr	r2, [pc, #212]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f720:	430b      	orrs	r3, r1
 800f722:	6553      	str	r3, [r2, #84]	; 0x54
 800f724:	e003      	b.n	800f72e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f72a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f73a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f73e:	2300      	movs	r3, #0
 800f740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f744:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f748:	460b      	mov	r3, r1
 800f74a:	4313      	orrs	r3, r2
 800f74c:	d058      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f756:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f75a:	d033      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f75c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f760:	d82c      	bhi.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f766:	d02f      	beq.n	800f7c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f76c:	d826      	bhi.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f76e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f772:	d02b      	beq.n	800f7cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f778:	d820      	bhi.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f77e:	d012      	beq.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f784:	d81a      	bhi.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f786:	2b00      	cmp	r3, #0
 800f788:	d022      	beq.n	800f7d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f78a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f78e:	d115      	bne.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f794:	3308      	adds	r3, #8
 800f796:	2100      	movs	r1, #0
 800f798:	4618      	mov	r0, r3
 800f79a:	f001 fd29 	bl	80111f0 <RCCEx_PLL2_Config>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f7a4:	e015      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7aa:	3328      	adds	r3, #40	; 0x28
 800f7ac:	2102      	movs	r1, #2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f001 fdd0 	bl	8011354 <RCCEx_PLL3_Config>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f7ba:	e00a      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7c2:	e006      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f7c4:	bf00      	nop
 800f7c6:	e004      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f7c8:	bf00      	nop
 800f7ca:	e002      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f7cc:	bf00      	nop
 800f7ce:	e000      	b.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f7d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10e      	bne.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f7da:	4b06      	ldr	r3, [pc, #24]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f7ea:	4a02      	ldr	r2, [pc, #8]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7ec:	430b      	orrs	r3, r1
 800f7ee:	6593      	str	r3, [r2, #88]	; 0x58
 800f7f0:	e006      	b.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f7f2:	bf00      	nop
 800f7f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f80c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f810:	2300      	movs	r3, #0
 800f812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f816:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f81a:	460b      	mov	r3, r1
 800f81c:	4313      	orrs	r3, r2
 800f81e:	d055      	beq.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f828:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f82c:	d033      	beq.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f82e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f832:	d82c      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f838:	d02f      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f83a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f83e:	d826      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f840:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f844:	d02b      	beq.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f846:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f84a:	d820      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f84c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f850:	d012      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f856:	d81a      	bhi.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d022      	beq.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f85c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f860:	d115      	bne.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f866:	3308      	adds	r3, #8
 800f868:	2100      	movs	r1, #0
 800f86a:	4618      	mov	r0, r3
 800f86c:	f001 fcc0 	bl	80111f0 <RCCEx_PLL2_Config>
 800f870:	4603      	mov	r3, r0
 800f872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f876:	e015      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f87c:	3328      	adds	r3, #40	; 0x28
 800f87e:	2102      	movs	r1, #2
 800f880:	4618      	mov	r0, r3
 800f882:	f001 fd67 	bl	8011354 <RCCEx_PLL3_Config>
 800f886:	4603      	mov	r3, r0
 800f888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f88c:	e00a      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f894:	e006      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f896:	bf00      	nop
 800f898:	e004      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f89a:	bf00      	nop
 800f89c:	e002      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f89e:	bf00      	nop
 800f8a0:	e000      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10b      	bne.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f8ac:	4ba1      	ldr	r3, [pc, #644]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f8bc:	4a9d      	ldr	r2, [pc, #628]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8be:	430b      	orrs	r3, r1
 800f8c0:	6593      	str	r3, [r2, #88]	; 0x58
 800f8c2:	e003      	b.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	f002 0308 	and.w	r3, r2, #8
 800f8d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f8dc:	2300      	movs	r3, #0
 800f8de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f8e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	d01e      	beq.n	800f92a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8f8:	d10c      	bne.n	800f914 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8fe:	3328      	adds	r3, #40	; 0x28
 800f900:	2102      	movs	r1, #2
 800f902:	4618      	mov	r0, r3
 800f904:	f001 fd26 	bl	8011354 <RCCEx_PLL3_Config>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d002      	beq.n	800f914 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f914:	4b87      	ldr	r3, [pc, #540]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f924:	4a83      	ldr	r2, [pc, #524]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f926:	430b      	orrs	r3, r1
 800f928:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f932:	f002 0310 	and.w	r3, r2, #16
 800f936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f93a:	2300      	movs	r3, #0
 800f93c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f940:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f944:	460b      	mov	r3, r1
 800f946:	4313      	orrs	r3, r2
 800f948:	d01e      	beq.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f94e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f956:	d10c      	bne.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f95c:	3328      	adds	r3, #40	; 0x28
 800f95e:	2102      	movs	r1, #2
 800f960:	4618      	mov	r0, r3
 800f962:	f001 fcf7 	bl	8011354 <RCCEx_PLL3_Config>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d002      	beq.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f96c:	2301      	movs	r3, #1
 800f96e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f972:	4b70      	ldr	r3, [pc, #448]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f97e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f982:	4a6c      	ldr	r2, [pc, #432]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f984:	430b      	orrs	r3, r1
 800f986:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f990:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f998:	2300      	movs	r3, #0
 800f99a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f99e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	d03e      	beq.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9b4:	d022      	beq.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f9b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9ba:	d81b      	bhi.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d003      	beq.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9c4:	d00b      	beq.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f9c6:	e015      	b.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9cc:	3308      	adds	r3, #8
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f001 fc0d 	bl	80111f0 <RCCEx_PLL2_Config>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f9dc:	e00f      	b.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e2:	3328      	adds	r3, #40	; 0x28
 800f9e4:	2102      	movs	r1, #2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f001 fcb4 	bl	8011354 <RCCEx_PLL3_Config>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f9f2:	e004      	b.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f9fa:	e000      	b.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f9fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10b      	bne.n	800fa1e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa06:	4b4b      	ldr	r3, [pc, #300]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa16:	4a47      	ldr	r2, [pc, #284]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa18:	430b      	orrs	r3, r1
 800fa1a:	6593      	str	r3, [r2, #88]	; 0x58
 800fa1c:	e003      	b.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fa32:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa34:	2300      	movs	r3, #0
 800fa36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	d03b      	beq.n	800faba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa4e:	d01f      	beq.n	800fa90 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fa50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fa54:	d818      	bhi.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fa56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa5a:	d003      	beq.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fa5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa60:	d007      	beq.n	800fa72 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fa62:	e011      	b.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa64:	4b33      	ldr	r3, [pc, #204]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa68:	4a32      	ldr	r2, [pc, #200]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fa70:	e00f      	b.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa76:	3328      	adds	r3, #40	; 0x28
 800fa78:	2101      	movs	r1, #1
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f001 fc6a 	bl	8011354 <RCCEx_PLL3_Config>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fa86:	e004      	b.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa8e:	e000      	b.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fa90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10b      	bne.n	800fab2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fa9a:	4b26      	ldr	r3, [pc, #152]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800faa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faaa:	4a22      	ldr	r2, [pc, #136]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800faac:	430b      	orrs	r3, r1
 800faae:	6553      	str	r3, [r2, #84]	; 0x54
 800fab0:	e003      	b.n	800faba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800faba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fac6:	673b      	str	r3, [r7, #112]	; 0x70
 800fac8:	2300      	movs	r3, #0
 800faca:	677b      	str	r3, [r7, #116]	; 0x74
 800facc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fad0:	460b      	mov	r3, r1
 800fad2:	4313      	orrs	r3, r2
 800fad4:	d034      	beq.n	800fb40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d003      	beq.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fae4:	d007      	beq.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fae6:	e011      	b.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fae8:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800faea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faec:	4a11      	ldr	r2, [pc, #68]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800faee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800faf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800faf4:	e00e      	b.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800faf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fafa:	3308      	adds	r3, #8
 800fafc:	2102      	movs	r1, #2
 800fafe:	4618      	mov	r0, r3
 800fb00:	f001 fb76 	bl	80111f0 <RCCEx_PLL2_Config>
 800fb04:	4603      	mov	r3, r0
 800fb06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fb0a:	e003      	b.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10d      	bne.n	800fb38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fb1c:	4b05      	ldr	r3, [pc, #20]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb2a:	4a02      	ldr	r2, [pc, #8]	; (800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb2c:	430b      	orrs	r3, r1
 800fb2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb30:	e006      	b.n	800fb40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fb32:	bf00      	nop
 800fb34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fb4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb4e:	2300      	movs	r3, #0
 800fb50:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fb56:	460b      	mov	r3, r1
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	d00c      	beq.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb60:	3328      	adds	r3, #40	; 0x28
 800fb62:	2102      	movs	r1, #2
 800fb64:	4618      	mov	r0, r3
 800fb66:	f001 fbf5 	bl	8011354 <RCCEx_PLL3_Config>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fb70:	2301      	movs	r3, #1
 800fb72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fb82:	663b      	str	r3, [r7, #96]	; 0x60
 800fb84:	2300      	movs	r3, #0
 800fb86:	667b      	str	r3, [r7, #100]	; 0x64
 800fb88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	d038      	beq.n	800fc04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb9e:	d018      	beq.n	800fbd2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fba4:	d811      	bhi.n	800fbca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbaa:	d014      	beq.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fbac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbb0:	d80b      	bhi.n	800fbca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d011      	beq.n	800fbda <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fbb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbba:	d106      	bne.n	800fbca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbbc:	4bc3      	ldr	r3, [pc, #780]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc0:	4ac2      	ldr	r2, [pc, #776]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fbc8:	e008      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbd0:	e004      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fbd2:	bf00      	nop
 800fbd4:	e002      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fbd6:	bf00      	nop
 800fbd8:	e000      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fbda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d10b      	bne.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fbe4:	4bb9      	ldr	r3, [pc, #740]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbf4:	4ab5      	ldr	r2, [pc, #724]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fbf6:	430b      	orrs	r3, r1
 800fbf8:	6553      	str	r3, [r2, #84]	; 0x54
 800fbfa:	e003      	b.n	800fc04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fc10:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc12:	2300      	movs	r3, #0
 800fc14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	d009      	beq.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fc20:	4baa      	ldr	r3, [pc, #680]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc2e:	4aa7      	ldr	r2, [pc, #668]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc30:	430b      	orrs	r3, r1
 800fc32:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fc40:	653b      	str	r3, [r7, #80]	; 0x50
 800fc42:	2300      	movs	r3, #0
 800fc44:	657b      	str	r3, [r7, #84]	; 0x54
 800fc46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	d00a      	beq.n	800fc66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fc50:	4b9e      	ldr	r3, [pc, #632]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fc60:	4a9a      	ldr	r2, [pc, #616]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc62:	430b      	orrs	r3, r1
 800fc64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fc72:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc74:	2300      	movs	r3, #0
 800fc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	d009      	beq.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fc82:	4b92      	ldr	r3, [pc, #584]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc86:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc90:	4a8e      	ldr	r2, [pc, #568]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc92:	430b      	orrs	r3, r1
 800fc94:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fca2:	643b      	str	r3, [r7, #64]	; 0x40
 800fca4:	2300      	movs	r3, #0
 800fca6:	647b      	str	r3, [r7, #68]	; 0x44
 800fca8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fcac:	460b      	mov	r3, r1
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	d00e      	beq.n	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fcb2:	4b86      	ldr	r3, [pc, #536]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	4a85      	ldr	r2, [pc, #532]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fcbc:	6113      	str	r3, [r2, #16]
 800fcbe:	4b83      	ldr	r3, [pc, #524]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcc0:	6919      	ldr	r1, [r3, #16]
 800fcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fcca:	4a80      	ldr	r2, [pc, #512]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fccc:	430b      	orrs	r3, r1
 800fcce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fcd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fcdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcde:	2300      	movs	r3, #0
 800fce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fce2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fce6:	460b      	mov	r3, r1
 800fce8:	4313      	orrs	r3, r2
 800fcea:	d009      	beq.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fcec:	4b77      	ldr	r3, [pc, #476]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcf0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcfa:	4a74      	ldr	r2, [pc, #464]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcfc:	430b      	orrs	r3, r1
 800fcfe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fd0c:	633b      	str	r3, [r7, #48]	; 0x30
 800fd0e:	2300      	movs	r3, #0
 800fd10:	637b      	str	r3, [r7, #52]	; 0x34
 800fd12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fd16:	460b      	mov	r3, r1
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	d00a      	beq.n	800fd32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fd1c:	4b6b      	ldr	r3, [pc, #428]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd20:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd2c:	4a67      	ldr	r2, [pc, #412]	; (800fecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd2e:	430b      	orrs	r3, r1
 800fd30:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	62b9      	str	r1, [r7, #40]	; 0x28
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	d011      	beq.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd52:	3308      	adds	r3, #8
 800fd54:	2100      	movs	r1, #0
 800fd56:	4618      	mov	r0, r3
 800fd58:	f001 fa4a 	bl	80111f0 <RCCEx_PLL2_Config>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fd62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d003      	beq.n	800fd72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	6239      	str	r1, [r7, #32]
 800fd7e:	f003 0302 	and.w	r3, r3, #2
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
 800fd84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	d011      	beq.n	800fdb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd92:	3308      	adds	r3, #8
 800fd94:	2101      	movs	r1, #1
 800fd96:	4618      	mov	r0, r3
 800fd98:	f001 fa2a 	bl	80111f0 <RCCEx_PLL2_Config>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fda2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	2100      	movs	r1, #0
 800fdbc:	61b9      	str	r1, [r7, #24]
 800fdbe:	f003 0304 	and.w	r3, r3, #4
 800fdc2:	61fb      	str	r3, [r7, #28]
 800fdc4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	d011      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	2102      	movs	r1, #2
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f001 fa0a 	bl	80111f0 <RCCEx_PLL2_Config>
 800fddc:	4603      	mov	r3, r0
 800fdde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fde2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d003      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	6139      	str	r1, [r7, #16]
 800fdfe:	f003 0308 	and.w	r3, r3, #8
 800fe02:	617b      	str	r3, [r7, #20]
 800fe04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	d011      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fe0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe12:	3328      	adds	r3, #40	; 0x28
 800fe14:	2100      	movs	r1, #0
 800fe16:	4618      	mov	r0, r3
 800fe18:	f001 fa9c 	bl	8011354 <RCCEx_PLL3_Config>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fe22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fe32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	f003 0310 	and.w	r3, r3, #16
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	d011      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe52:	3328      	adds	r3, #40	; 0x28
 800fe54:	2101      	movs	r1, #1
 800fe56:	4618      	mov	r0, r3
 800fe58:	f001 fa7c 	bl	8011354 <RCCEx_PLL3_Config>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d003      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fe72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	f003 0320 	and.w	r3, r3, #32
 800fe82:	607b      	str	r3, [r7, #4]
 800fe84:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	d011      	beq.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fe8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe92:	3328      	adds	r3, #40	; 0x28
 800fe94:	2102      	movs	r1, #2
 800fe96:	4618      	mov	r0, r3
 800fe98:	f001 fa5c 	bl	8011354 <RCCEx_PLL3_Config>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800feaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800feb2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d101      	bne.n	800febe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	e000      	b.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800febe:	2301      	movs	r3, #1
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fec6:	46bd      	mov	sp, r7
 800fec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fecc:	58024400 	.word	0x58024400

0800fed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b090      	sub	sp, #64	; 0x40
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800feda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fede:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fee2:	430b      	orrs	r3, r1
 800fee4:	f040 8094 	bne.w	8010010 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fee8:	4b9e      	ldr	r3, [pc, #632]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800feea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feec:	f003 0307 	and.w	r3, r3, #7
 800fef0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	f200 8087 	bhi.w	8010008 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fefa:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ff15 	.word	0x0800ff15
 800ff04:	0800ff3d 	.word	0x0800ff3d
 800ff08:	0800ff65 	.word	0x0800ff65
 800ff0c:	08010001 	.word	0x08010001
 800ff10:	0800ff8d 	.word	0x0800ff8d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff14:	4b93      	ldr	r3, [pc, #588]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff20:	d108      	bne.n	800ff34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff26:	4618      	mov	r0, r3
 800ff28:	f001 f810 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff30:	f000 bd45 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff38:	f000 bd41 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff3c:	4b89      	ldr	r3, [pc, #548]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff48:	d108      	bne.n	800ff5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff4a:	f107 0318 	add.w	r3, r7, #24
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 fd54 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff58:	f000 bd31 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff60:	f000 bd2d 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff64:	4b7f      	ldr	r3, [pc, #508]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff70:	d108      	bne.n	800ff84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff72:	f107 030c 	add.w	r3, r7, #12
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 fe94 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff80:	f000 bd1d 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff88:	f000 bd19 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff8c:	4b75      	ldr	r3, [pc, #468]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff94:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff96:	4b73      	ldr	r3, [pc, #460]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 0304 	and.w	r3, r3, #4
 800ff9e:	2b04      	cmp	r3, #4
 800ffa0:	d10c      	bne.n	800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ffa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d109      	bne.n	800ffbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ffa8:	4b6e      	ldr	r3, [pc, #440]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	08db      	lsrs	r3, r3, #3
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	4a6d      	ldr	r2, [pc, #436]	; (8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ffb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffba:	e01f      	b.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ffbc:	4b69      	ldr	r3, [pc, #420]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffc8:	d106      	bne.n	800ffd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ffca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ffd0:	d102      	bne.n	800ffd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ffd2:	4b66      	ldr	r3, [pc, #408]	; (801016c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ffd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffd6:	e011      	b.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ffd8:	4b62      	ldr	r3, [pc, #392]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffe4:	d106      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ffe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffec:	d102      	bne.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ffee:	4b60      	ldr	r3, [pc, #384]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fff2:	e003      	b.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fff4:	2300      	movs	r3, #0
 800fff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fff8:	f000 bce1 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fffc:	f000 bcdf 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010000:	4b5c      	ldr	r3, [pc, #368]	; (8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010004:	f000 bcdb 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010008:	2300      	movs	r3, #0
 801000a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801000c:	f000 bcd7 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010014:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010018:	430b      	orrs	r3, r1
 801001a:	f040 80ad 	bne.w	8010178 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801001e:	4b51      	ldr	r3, [pc, #324]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010022:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8010026:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801002e:	d056      	beq.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010036:	f200 8090 	bhi.w	801015a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	2bc0      	cmp	r3, #192	; 0xc0
 801003e:	f000 8088 	beq.w	8010152 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	2bc0      	cmp	r3, #192	; 0xc0
 8010046:	f200 8088 	bhi.w	801015a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801004a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004c:	2b80      	cmp	r3, #128	; 0x80
 801004e:	d032      	beq.n	80100b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010052:	2b80      	cmp	r3, #128	; 0x80
 8010054:	f200 8081 	bhi.w	801015a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	2b40      	cmp	r3, #64	; 0x40
 8010062:	d014      	beq.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010064:	e079      	b.n	801015a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010066:	4b3f      	ldr	r3, [pc, #252]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801006e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010072:	d108      	bne.n	8010086 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f000 ff67 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010082:	f000 bc9c 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801008a:	f000 bc98 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801008e:	4b35      	ldr	r3, [pc, #212]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801009a:	d108      	bne.n	80100ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801009c:	f107 0318 	add.w	r3, r7, #24
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fcab 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100aa:	f000 bc88 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100b2:	f000 bc84 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100b6:	4b2b      	ldr	r3, [pc, #172]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100c2:	d108      	bne.n	80100d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100c4:	f107 030c 	add.w	r3, r7, #12
 80100c8:	4618      	mov	r0, r3
 80100ca:	f000 fdeb 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100d2:	f000 bc74 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100da:	f000 bc70 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80100de:	4b21      	ldr	r3, [pc, #132]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80100e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80100e8:	4b1e      	ldr	r3, [pc, #120]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f003 0304 	and.w	r3, r3, #4
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d10c      	bne.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80100f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d109      	bne.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100fa:	4b1a      	ldr	r3, [pc, #104]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	08db      	lsrs	r3, r3, #3
 8010100:	f003 0303 	and.w	r3, r3, #3
 8010104:	4a18      	ldr	r2, [pc, #96]	; (8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010106:	fa22 f303 	lsr.w	r3, r2, r3
 801010a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801010c:	e01f      	b.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801010e:	4b15      	ldr	r3, [pc, #84]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801011a:	d106      	bne.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010122:	d102      	bne.n	801012a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010124:	4b11      	ldr	r3, [pc, #68]	; (801016c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010128:	e011      	b.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801012a:	4b0e      	ldr	r3, [pc, #56]	; (8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010136:	d106      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801013a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801013e:	d102      	bne.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010140:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010144:	e003      	b.n	801014e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801014a:	f000 bc38 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801014e:	f000 bc36 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010152:	4b08      	ldr	r3, [pc, #32]	; (8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010156:	f000 bc32 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801015e:	f000 bc2e 	b.w	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010162:	bf00      	nop
 8010164:	58024400 	.word	0x58024400
 8010168:	03d09000 	.word	0x03d09000
 801016c:	003d0900 	.word	0x003d0900
 8010170:	017d7840 	.word	0x017d7840
 8010174:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010178:	e9d7 2300 	ldrd	r2, r3, [r7]
 801017c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010180:	430b      	orrs	r3, r1
 8010182:	f040 809c 	bne.w	80102be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010186:	4b9e      	ldr	r3, [pc, #632]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801018a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801018e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010196:	d054      	beq.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801019e:	f200 808b 	bhi.w	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80101a8:	f000 8083 	beq.w	80102b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80101b2:	f200 8081 	bhi.w	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101bc:	d02f      	beq.n	801021e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101c4:	d878      	bhi.n	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d004      	beq.n	80101d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80101cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101d2:	d012      	beq.n	80101fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80101d4:	e070      	b.n	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80101d6:	4b8a      	ldr	r3, [pc, #552]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80101e2:	d107      	bne.n	80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 feaf 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101f2:	e3e4      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101f4:	2300      	movs	r3, #0
 80101f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101f8:	e3e1      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101fa:	4b81      	ldr	r3, [pc, #516]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010206:	d107      	bne.n	8010218 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010208:	f107 0318 	add.w	r3, r7, #24
 801020c:	4618      	mov	r0, r3
 801020e:	f000 fbf5 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010216:	e3d2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010218:	2300      	movs	r3, #0
 801021a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801021c:	e3cf      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801021e:	4b78      	ldr	r3, [pc, #480]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801022a:	d107      	bne.n	801023c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801022c:	f107 030c 	add.w	r3, r7, #12
 8010230:	4618      	mov	r0, r3
 8010232:	f000 fd37 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801023a:	e3c0      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010240:	e3bd      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010242:	4b6f      	ldr	r3, [pc, #444]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801024a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801024c:	4b6c      	ldr	r3, [pc, #432]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f003 0304 	and.w	r3, r3, #4
 8010254:	2b04      	cmp	r3, #4
 8010256:	d10c      	bne.n	8010272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025a:	2b00      	cmp	r3, #0
 801025c:	d109      	bne.n	8010272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801025e:	4b68      	ldr	r3, [pc, #416]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	08db      	lsrs	r3, r3, #3
 8010264:	f003 0303 	and.w	r3, r3, #3
 8010268:	4a66      	ldr	r2, [pc, #408]	; (8010404 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801026a:	fa22 f303 	lsr.w	r3, r2, r3
 801026e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010270:	e01e      	b.n	80102b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010272:	4b63      	ldr	r3, [pc, #396]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801027a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801027e:	d106      	bne.n	801028e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010286:	d102      	bne.n	801028e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010288:	4b5f      	ldr	r3, [pc, #380]	; (8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801028a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801028c:	e010      	b.n	80102b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801028e:	4b5c      	ldr	r3, [pc, #368]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801029a:	d106      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102a2:	d102      	bne.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102a4:	4b59      	ldr	r3, [pc, #356]	; (801040c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80102a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102a8:	e002      	b.n	80102b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80102ae:	e386      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80102b0:	e385      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80102b2:	4b57      	ldr	r3, [pc, #348]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80102b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102b6:	e382      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80102b8:	2300      	movs	r3, #0
 80102ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102bc:	e37f      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80102be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80102c6:	430b      	orrs	r3, r1
 80102c8:	f040 80a7 	bne.w	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80102cc:	4b4c      	ldr	r3, [pc, #304]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80102d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80102d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80102dc:	d055      	beq.n	801038a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80102de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80102e4:	f200 8096 	bhi.w	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80102e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80102ee:	f000 8084 	beq.w	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80102f8:	f200 808c 	bhi.w	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80102fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010302:	d030      	beq.n	8010366 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801030a:	f200 8083 	bhi.w	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	2b00      	cmp	r3, #0
 8010312:	d004      	beq.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801031a:	d012      	beq.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801031c:	e07a      	b.n	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801031e:	4b38      	ldr	r3, [pc, #224]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801032a:	d107      	bne.n	801033c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801032c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010330:	4618      	mov	r0, r3
 8010332:	f000 fe0b 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801033a:	e340      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801033c:	2300      	movs	r3, #0
 801033e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010340:	e33d      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010342:	4b2f      	ldr	r3, [pc, #188]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801034a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801034e:	d107      	bne.n	8010360 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010350:	f107 0318 	add.w	r3, r7, #24
 8010354:	4618      	mov	r0, r3
 8010356:	f000 fb51 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801035e:	e32e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010364:	e32b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010366:	4b26      	ldr	r3, [pc, #152]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801036e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010372:	d107      	bne.n	8010384 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010374:	f107 030c 	add.w	r3, r7, #12
 8010378:	4618      	mov	r0, r3
 801037a:	f000 fc93 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010382:	e31c      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010388:	e319      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801038a:	4b1d      	ldr	r3, [pc, #116]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801038e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010392:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010394:	4b1a      	ldr	r3, [pc, #104]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f003 0304 	and.w	r3, r3, #4
 801039c:	2b04      	cmp	r3, #4
 801039e:	d10c      	bne.n	80103ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80103a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d109      	bne.n	80103ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103a6:	4b16      	ldr	r3, [pc, #88]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	08db      	lsrs	r3, r3, #3
 80103ac:	f003 0303 	and.w	r3, r3, #3
 80103b0:	4a14      	ldr	r2, [pc, #80]	; (8010404 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80103b2:	fa22 f303 	lsr.w	r3, r2, r3
 80103b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103b8:	e01e      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103ba:	4b11      	ldr	r3, [pc, #68]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103c6:	d106      	bne.n	80103d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80103c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103ce:	d102      	bne.n	80103d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103d0:	4b0d      	ldr	r3, [pc, #52]	; (8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80103d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103d4:	e010      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103d6:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103e2:	d106      	bne.n	80103f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103ea:	d102      	bne.n	80103f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103ec:	4b07      	ldr	r3, [pc, #28]	; (801040c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103f0:	e002      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103f2:	2300      	movs	r3, #0
 80103f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80103f6:	e2e2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103f8:	e2e1      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103fa:	4b05      	ldr	r3, [pc, #20]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80103fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103fe:	e2de      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010400:	58024400 	.word	0x58024400
 8010404:	03d09000 	.word	0x03d09000
 8010408:	003d0900 	.word	0x003d0900
 801040c:	017d7840 	.word	0x017d7840
 8010410:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010418:	e2d1      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801041a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801041e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010422:	430b      	orrs	r3, r1
 8010424:	f040 809c 	bne.w	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010428:	4b93      	ldr	r3, [pc, #588]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801042a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801042c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010430:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010438:	d054      	beq.n	80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010440:	f200 808b 	bhi.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010446:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801044a:	f000 8083 	beq.w	8010554 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801044e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010454:	f200 8081 	bhi.w	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801045e:	d02f      	beq.n	80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010466:	d878      	bhi.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	2b00      	cmp	r3, #0
 801046c:	d004      	beq.n	8010478 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801046e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010474:	d012      	beq.n	801049c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010476:	e070      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010478:	4b7f      	ldr	r3, [pc, #508]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010484:	d107      	bne.n	8010496 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801048a:	4618      	mov	r0, r3
 801048c:	f000 fd5e 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010494:	e293      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801049a:	e290      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801049c:	4b76      	ldr	r3, [pc, #472]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104a8:	d107      	bne.n	80104ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104aa:	f107 0318 	add.w	r3, r7, #24
 80104ae:	4618      	mov	r0, r3
 80104b0:	f000 faa4 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104b8:	e281      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104be:	e27e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104c0:	4b6d      	ldr	r3, [pc, #436]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104cc:	d107      	bne.n	80104de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104ce:	f107 030c 	add.w	r3, r7, #12
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 fbe6 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104dc:	e26f      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104de:	2300      	movs	r3, #0
 80104e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e2:	e26c      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104e4:	4b64      	ldr	r3, [pc, #400]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104ee:	4b62      	ldr	r3, [pc, #392]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0304 	and.w	r3, r3, #4
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	d10c      	bne.n	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80104fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d109      	bne.n	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010500:	4b5d      	ldr	r3, [pc, #372]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	08db      	lsrs	r3, r3, #3
 8010506:	f003 0303 	and.w	r3, r3, #3
 801050a:	4a5c      	ldr	r2, [pc, #368]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801050c:	fa22 f303 	lsr.w	r3, r2, r3
 8010510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010512:	e01e      	b.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010514:	4b58      	ldr	r3, [pc, #352]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010520:	d106      	bne.n	8010530 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010528:	d102      	bne.n	8010530 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801052a:	4b55      	ldr	r3, [pc, #340]	; (8010680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801052c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801052e:	e010      	b.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010530:	4b51      	ldr	r3, [pc, #324]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801053c:	d106      	bne.n	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010544:	d102      	bne.n	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010546:	4b4f      	ldr	r3, [pc, #316]	; (8010684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010548:	63fb      	str	r3, [r7, #60]	; 0x3c
 801054a:	e002      	b.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801054c:	2300      	movs	r3, #0
 801054e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010550:	e235      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010552:	e234      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010554:	4b4c      	ldr	r3, [pc, #304]	; (8010688 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010558:	e231      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801055a:	2300      	movs	r3, #0
 801055c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801055e:	e22e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010564:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010568:	430b      	orrs	r3, r1
 801056a:	f040 808f 	bne.w	801068c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801056e:	4b42      	ldr	r3, [pc, #264]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010572:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010576:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801057e:	d06b      	beq.n	8010658 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010586:	d874      	bhi.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801058e:	d056      	beq.n	801063e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010596:	d86c      	bhi.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801059e:	d03b      	beq.n	8010618 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80105a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80105a6:	d864      	bhi.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105ae:	d021      	beq.n	80105f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105b6:	d85c      	bhi.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d004      	beq.n	80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80105be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105c4:	d004      	beq.n	80105d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80105c6:	e054      	b.n	8010672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80105c8:	f7fe fa0a 	bl	800e9e0 <HAL_RCC_GetPCLK1Freq>
 80105cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80105ce:	e1f6      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105d0:	4b29      	ldr	r3, [pc, #164]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105dc:	d107      	bne.n	80105ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105de:	f107 0318 	add.w	r3, r7, #24
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 fa0a 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105ec:	e1e7      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105f2:	e1e4      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80105f4:	4b20      	ldr	r3, [pc, #128]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010600:	d107      	bne.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fb4c 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010610:	e1d5      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010616:	e1d2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010618:	4b17      	ldr	r3, [pc, #92]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f003 0304 	and.w	r3, r3, #4
 8010620:	2b04      	cmp	r3, #4
 8010622:	d109      	bne.n	8010638 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010624:	4b14      	ldr	r3, [pc, #80]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	08db      	lsrs	r3, r3, #3
 801062a:	f003 0303 	and.w	r3, r3, #3
 801062e:	4a13      	ldr	r2, [pc, #76]	; (801067c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010630:	fa22 f303 	lsr.w	r3, r2, r3
 8010634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010636:	e1c2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801063c:	e1bf      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801063e:	4b0e      	ldr	r3, [pc, #56]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801064a:	d102      	bne.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801064c:	4b0c      	ldr	r3, [pc, #48]	; (8010680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010650:	e1b5      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010656:	e1b2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010658:	4b07      	ldr	r3, [pc, #28]	; (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010664:	d102      	bne.n	801066c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010666:	4b07      	ldr	r3, [pc, #28]	; (8010684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801066a:	e1a8      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010670:	e1a5      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010676:	e1a2      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010678:	58024400 	.word	0x58024400
 801067c:	03d09000 	.word	0x03d09000
 8010680:	003d0900 	.word	0x003d0900
 8010684:	017d7840 	.word	0x017d7840
 8010688:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801068c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010690:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010694:	430b      	orrs	r3, r1
 8010696:	d173      	bne.n	8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010698:	4b9c      	ldr	r3, [pc, #624]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801069a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801069c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80106a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106a8:	d02f      	beq.n	801070a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106b0:	d863      	bhi.n	801077a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d004      	beq.n	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80106b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106be:	d012      	beq.n	80106e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80106c0:	e05b      	b.n	801077a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106c2:	4b92      	ldr	r3, [pc, #584]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106ce:	d107      	bne.n	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106d0:	f107 0318 	add.w	r3, r7, #24
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 f991 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106de:	e16e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106e4:	e16b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106e6:	4b89      	ldr	r3, [pc, #548]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106f2:	d107      	bne.n	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106f4:	f107 030c 	add.w	r3, r7, #12
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 fad3 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010702:	e15c      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010708:	e159      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801070a:	4b80      	ldr	r3, [pc, #512]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801070e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010712:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010714:	4b7d      	ldr	r3, [pc, #500]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f003 0304 	and.w	r3, r3, #4
 801071c:	2b04      	cmp	r3, #4
 801071e:	d10c      	bne.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010722:	2b00      	cmp	r3, #0
 8010724:	d109      	bne.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010726:	4b79      	ldr	r3, [pc, #484]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	08db      	lsrs	r3, r3, #3
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	4a77      	ldr	r2, [pc, #476]	; (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010732:	fa22 f303 	lsr.w	r3, r2, r3
 8010736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010738:	e01e      	b.n	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801073a:	4b74      	ldr	r3, [pc, #464]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010746:	d106      	bne.n	8010756 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801074e:	d102      	bne.n	8010756 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010750:	4b70      	ldr	r3, [pc, #448]	; (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010754:	e010      	b.n	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010756:	4b6d      	ldr	r3, [pc, #436]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801075e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010762:	d106      	bne.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801076a:	d102      	bne.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801076c:	4b6a      	ldr	r3, [pc, #424]	; (8010918 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010770:	e002      	b.n	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010776:	e122      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010778:	e121      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801077a:	2300      	movs	r3, #0
 801077c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801077e:	e11e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010784:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010788:	430b      	orrs	r3, r1
 801078a:	d133      	bne.n	80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801078c:	4b5f      	ldr	r3, [pc, #380]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010794:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107a2:	d012      	beq.n	80107ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80107a4:	e023      	b.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107a6:	4b59      	ldr	r3, [pc, #356]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80107b2:	d107      	bne.n	80107c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 fbc7 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107c2:	e0fc      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107c4:	2300      	movs	r3, #0
 80107c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107c8:	e0f9      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107ca:	4b50      	ldr	r3, [pc, #320]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107d6:	d107      	bne.n	80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107d8:	f107 0318 	add.w	r3, r7, #24
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 f90d 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107e6:	e0ea      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107ec:	e0e7      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107f2:	e0e4      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80107f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107f8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80107fc:	430b      	orrs	r3, r1
 80107fe:	f040 808d 	bne.w	801091c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010802:	4b42      	ldr	r3, [pc, #264]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010806:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801080a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010812:	d06b      	beq.n	80108ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801081a:	d874      	bhi.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801081c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010822:	d056      	beq.n	80108d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801082a:	d86c      	bhi.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801082c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010832:	d03b      	beq.n	80108ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801083a:	d864      	bhi.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801083c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010842:	d021      	beq.n	8010888 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801084a:	d85c      	bhi.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010858:	d004      	beq.n	8010864 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801085a:	e054      	b.n	8010906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801085c:	f000 f8b8 	bl	80109d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8010860:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010862:	e0ac      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010864:	4b29      	ldr	r3, [pc, #164]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801086c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010870:	d107      	bne.n	8010882 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010872:	f107 0318 	add.w	r3, r7, #24
 8010876:	4618      	mov	r0, r3
 8010878:	f000 f8c0 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010880:	e09d      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010882:	2300      	movs	r3, #0
 8010884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010886:	e09a      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010888:	4b20      	ldr	r3, [pc, #128]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010894:	d107      	bne.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010896:	f107 030c 	add.w	r3, r7, #12
 801089a:	4618      	mov	r0, r3
 801089c:	f000 fa02 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108a4:	e08b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108aa:	e088      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80108ac:	4b17      	ldr	r3, [pc, #92]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f003 0304 	and.w	r3, r3, #4
 80108b4:	2b04      	cmp	r3, #4
 80108b6:	d109      	bne.n	80108cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108b8:	4b14      	ldr	r3, [pc, #80]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	08db      	lsrs	r3, r3, #3
 80108be:	f003 0303 	and.w	r3, r3, #3
 80108c2:	4a13      	ldr	r2, [pc, #76]	; (8010910 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80108c4:	fa22 f303 	lsr.w	r3, r2, r3
 80108c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108ca:	e078      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108d0:	e075      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80108d2:	4b0e      	ldr	r3, [pc, #56]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108de:	d102      	bne.n	80108e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80108e0:	4b0c      	ldr	r3, [pc, #48]	; (8010914 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80108e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e4:	e06b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108e6:	2300      	movs	r3, #0
 80108e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ea:	e068      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80108ec:	4b07      	ldr	r3, [pc, #28]	; (801090c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80108f8:	d102      	bne.n	8010900 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80108fa:	4b07      	ldr	r3, [pc, #28]	; (8010918 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80108fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108fe:	e05e      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010904:	e05b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801090a:	e058      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801090c:	58024400 	.word	0x58024400
 8010910:	03d09000 	.word	0x03d09000
 8010914:	003d0900 	.word	0x003d0900
 8010918:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801091c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010920:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010924:	430b      	orrs	r3, r1
 8010926:	d148      	bne.n	80109ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010928:	4b27      	ldr	r3, [pc, #156]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801092a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801092c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010930:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010938:	d02a      	beq.n	8010990 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010940:	d838      	bhi.n	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010944:	2b00      	cmp	r3, #0
 8010946:	d004      	beq.n	8010952 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801094e:	d00d      	beq.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010950:	e030      	b.n	80109b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010952:	4b1d      	ldr	r3, [pc, #116]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801095a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801095e:	d102      	bne.n	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010960:	4b1a      	ldr	r3, [pc, #104]	; (80109cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010964:	e02b      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801096a:	e028      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801096c:	4b16      	ldr	r3, [pc, #88]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010978:	d107      	bne.n	801098a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801097e:	4618      	mov	r0, r3
 8010980:	f000 fae4 	bl	8010f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010988:	e019      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801098a:	2300      	movs	r3, #0
 801098c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801098e:	e016      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010990:	4b0d      	ldr	r3, [pc, #52]	; (80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801099c:	d107      	bne.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801099e:	f107 0318 	add.w	r3, r7, #24
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 f82a 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109ac:	e007      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109b2:	e004      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80109b4:	2300      	movs	r3, #0
 80109b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109b8:	e001      	b.n	80109be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80109be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3740      	adds	r7, #64	; 0x40
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	58024400 	.word	0x58024400
 80109cc:	017d7840 	.word	0x017d7840

080109d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80109d4:	f7fd ffd4 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 80109d8:	4602      	mov	r2, r0
 80109da:	4b06      	ldr	r3, [pc, #24]	; (80109f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80109dc:	6a1b      	ldr	r3, [r3, #32]
 80109de:	091b      	lsrs	r3, r3, #4
 80109e0:	f003 0307 	and.w	r3, r3, #7
 80109e4:	4904      	ldr	r1, [pc, #16]	; (80109f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80109e6:	5ccb      	ldrb	r3, [r1, r3]
 80109e8:	f003 031f 	and.w	r3, r3, #31
 80109ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	58024400 	.word	0x58024400
 80109f8:	0801ad54 	.word	0x0801ad54

080109fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b089      	sub	sp, #36	; 0x24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a04:	4ba1      	ldr	r3, [pc, #644]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a08:	f003 0303 	and.w	r3, r3, #3
 8010a0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010a0e:	4b9f      	ldr	r3, [pc, #636]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a12:	0b1b      	lsrs	r3, r3, #12
 8010a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010a1a:	4b9c      	ldr	r3, [pc, #624]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1e:	091b      	lsrs	r3, r3, #4
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010a26:	4b99      	ldr	r3, [pc, #612]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a2a:	08db      	lsrs	r3, r3, #3
 8010a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a30:	693a      	ldr	r2, [r7, #16]
 8010a32:	fb02 f303 	mul.w	r3, r2, r3
 8010a36:	ee07 3a90 	vmov	s15, r3
 8010a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 8111 	beq.w	8010c6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	2b02      	cmp	r3, #2
 8010a4e:	f000 8083 	beq.w	8010b58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	f200 80a1 	bhi.w	8010b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d003      	beq.n	8010a68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d056      	beq.n	8010b14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010a66:	e099      	b.n	8010b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a68:	4b88      	ldr	r3, [pc, #544]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f003 0320 	and.w	r3, r3, #32
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d02d      	beq.n	8010ad0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a74:	4b85      	ldr	r3, [pc, #532]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	08db      	lsrs	r3, r3, #3
 8010a7a:	f003 0303 	and.w	r3, r3, #3
 8010a7e:	4a84      	ldr	r2, [pc, #528]	; (8010c90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010a80:	fa22 f303 	lsr.w	r3, r2, r3
 8010a84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	ee07 3a90 	vmov	s15, r3
 8010a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	ee07 3a90 	vmov	s15, r3
 8010a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a9e:	4b7b      	ldr	r3, [pc, #492]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aa6:	ee07 3a90 	vmov	s15, r3
 8010aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010ace:	e087      	b.n	8010be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	ee07 3a90 	vmov	s15, r3
 8010ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ada:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010c98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ae2:	4b6a      	ldr	r3, [pc, #424]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aea:	ee07 3a90 	vmov	s15, r3
 8010aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010af6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b12:	e065      	b.n	8010be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	ee07 3a90 	vmov	s15, r3
 8010b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b26:	4b59      	ldr	r3, [pc, #356]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2e:	ee07 3a90 	vmov	s15, r3
 8010b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b56:	e043      	b.n	8010be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	ee07 3a90 	vmov	s15, r3
 8010b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b6a:	4b48      	ldr	r3, [pc, #288]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b72:	ee07 3a90 	vmov	s15, r3
 8010b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b9a:	e021      	b.n	8010be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	ee07 3a90 	vmov	s15, r3
 8010ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ba6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bae:	4b37      	ldr	r3, [pc, #220]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bb6:	ee07 3a90 	vmov	s15, r3
 8010bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010be0:	4b2a      	ldr	r3, [pc, #168]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be4:	0a5b      	lsrs	r3, r3, #9
 8010be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bea:	ee07 3a90 	vmov	s15, r3
 8010bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c06:	ee17 2a90 	vmov	r2, s15
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010c0e:	4b1f      	ldr	r3, [pc, #124]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c12:	0c1b      	lsrs	r3, r3, #16
 8010c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c18:	ee07 3a90 	vmov	s15, r3
 8010c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c34:	ee17 2a90 	vmov	r2, s15
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010c3c:	4b13      	ldr	r3, [pc, #76]	; (8010c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c40:	0e1b      	lsrs	r3, r3, #24
 8010c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c46:	ee07 3a90 	vmov	s15, r3
 8010c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c62:	ee17 2a90 	vmov	r2, s15
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010c6a:	e008      	b.n	8010c7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	609a      	str	r2, [r3, #8]
}
 8010c7e:	bf00      	nop
 8010c80:	3724      	adds	r7, #36	; 0x24
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	58024400 	.word	0x58024400
 8010c90:	03d09000 	.word	0x03d09000
 8010c94:	46000000 	.word	0x46000000
 8010c98:	4c742400 	.word	0x4c742400
 8010c9c:	4a742400 	.word	0x4a742400
 8010ca0:	4bbebc20 	.word	0x4bbebc20

08010ca4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b089      	sub	sp, #36	; 0x24
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010cac:	4ba1      	ldr	r3, [pc, #644]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cb0:	f003 0303 	and.w	r3, r3, #3
 8010cb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010cb6:	4b9f      	ldr	r3, [pc, #636]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cba:	0d1b      	lsrs	r3, r3, #20
 8010cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010cc2:	4b9c      	ldr	r3, [pc, #624]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc6:	0a1b      	lsrs	r3, r3, #8
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010cce:	4b99      	ldr	r3, [pc, #612]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cd2:	08db      	lsrs	r3, r3, #3
 8010cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	fb02 f303 	mul.w	r3, r2, r3
 8010cde:	ee07 3a90 	vmov	s15, r3
 8010ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 8111 	beq.w	8010f14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	f000 8083 	beq.w	8010e00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	f200 80a1 	bhi.w	8010e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d003      	beq.n	8010d10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d056      	beq.n	8010dbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010d0e:	e099      	b.n	8010e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d10:	4b88      	ldr	r3, [pc, #544]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f003 0320 	and.w	r3, r3, #32
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d02d      	beq.n	8010d78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d1c:	4b85      	ldr	r3, [pc, #532]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	08db      	lsrs	r3, r3, #3
 8010d22:	f003 0303 	and.w	r3, r3, #3
 8010d26:	4a84      	ldr	r2, [pc, #528]	; (8010f38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010d28:	fa22 f303 	lsr.w	r3, r2, r3
 8010d2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	ee07 3a90 	vmov	s15, r3
 8010d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	ee07 3a90 	vmov	s15, r3
 8010d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d46:	4b7b      	ldr	r3, [pc, #492]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d4e:	ee07 3a90 	vmov	s15, r3
 8010d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010d76:	e087      	b.n	8010e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	ee07 3a90 	vmov	s15, r3
 8010d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010f40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d8a:	4b6a      	ldr	r3, [pc, #424]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d92:	ee07 3a90 	vmov	s15, r3
 8010d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010dba:	e065      	b.n	8010e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	ee07 3a90 	vmov	s15, r3
 8010dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010dce:	4b59      	ldr	r3, [pc, #356]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dd6:	ee07 3a90 	vmov	s15, r3
 8010dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8010de2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010dfe:	e043      	b.n	8010e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	ee07 3a90 	vmov	s15, r3
 8010e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e12:	4b48      	ldr	r3, [pc, #288]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e1a:	ee07 3a90 	vmov	s15, r3
 8010e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e42:	e021      	b.n	8010e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	ee07 3a90 	vmov	s15, r3
 8010e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e56:	4b37      	ldr	r3, [pc, #220]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e5e:	ee07 3a90 	vmov	s15, r3
 8010e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010e88:	4b2a      	ldr	r3, [pc, #168]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8c:	0a5b      	lsrs	r3, r3, #9
 8010e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e92:	ee07 3a90 	vmov	s15, r3
 8010e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010eae:	ee17 2a90 	vmov	r2, s15
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010eb6:	4b1f      	ldr	r3, [pc, #124]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eba:	0c1b      	lsrs	r3, r3, #16
 8010ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ec0:	ee07 3a90 	vmov	s15, r3
 8010ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010edc:	ee17 2a90 	vmov	r2, s15
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010ee4:	4b13      	ldr	r3, [pc, #76]	; (8010f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	0e1b      	lsrs	r3, r3, #24
 8010eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010eee:	ee07 3a90 	vmov	s15, r3
 8010ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f0a:	ee17 2a90 	vmov	r2, s15
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010f12:	e008      	b.n	8010f26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	609a      	str	r2, [r3, #8]
}
 8010f26:	bf00      	nop
 8010f28:	3724      	adds	r7, #36	; 0x24
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop
 8010f34:	58024400 	.word	0x58024400
 8010f38:	03d09000 	.word	0x03d09000
 8010f3c:	46000000 	.word	0x46000000
 8010f40:	4c742400 	.word	0x4c742400
 8010f44:	4a742400 	.word	0x4a742400
 8010f48:	4bbebc20 	.word	0x4bbebc20

08010f4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b089      	sub	sp, #36	; 0x24
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f54:	4ba0      	ldr	r3, [pc, #640]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f58:	f003 0303 	and.w	r3, r3, #3
 8010f5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010f5e:	4b9e      	ldr	r3, [pc, #632]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f62:	091b      	lsrs	r3, r3, #4
 8010f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010f6a:	4b9b      	ldr	r3, [pc, #620]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6e:	f003 0301 	and.w	r3, r3, #1
 8010f72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010f74:	4b98      	ldr	r3, [pc, #608]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f78:	08db      	lsrs	r3, r3, #3
 8010f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	fb02 f303 	mul.w	r3, r2, r3
 8010f84:	ee07 3a90 	vmov	s15, r3
 8010f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	f000 8111 	beq.w	80111ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	f000 8083 	beq.w	80110a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	f200 80a1 	bhi.w	80110ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d056      	beq.n	8011062 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010fb4:	e099      	b.n	80110ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fb6:	4b88      	ldr	r3, [pc, #544]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f003 0320 	and.w	r3, r3, #32
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d02d      	beq.n	801101e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010fc2:	4b85      	ldr	r3, [pc, #532]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	08db      	lsrs	r3, r3, #3
 8010fc8:	f003 0303 	and.w	r3, r3, #3
 8010fcc:	4a83      	ldr	r2, [pc, #524]	; (80111dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010fce:	fa22 f303 	lsr.w	r3, r2, r3
 8010fd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	ee07 3a90 	vmov	s15, r3
 8010fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	ee07 3a90 	vmov	s15, r3
 8010fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fec:	4b7a      	ldr	r3, [pc, #488]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ff4:	ee07 3a90 	vmov	s15, r3
 8010ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 8011000:	eddf 5a77 	vldr	s11, [pc, #476]	; 80111e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801100c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011018:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801101c:	e087      	b.n	801112e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	ee07 3a90 	vmov	s15, r3
 8011024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011028:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80111e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801102c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011030:	4b69      	ldr	r3, [pc, #420]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011038:	ee07 3a90 	vmov	s15, r3
 801103c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011040:	ed97 6a03 	vldr	s12, [r7, #12]
 8011044:	eddf 5a66 	vldr	s11, [pc, #408]	; 80111e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801104c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011058:	ee67 7a27 	vmul.f32	s15, s14, s15
 801105c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011060:	e065      	b.n	801112e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	ee07 3a90 	vmov	s15, r3
 8011068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801106c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80111e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011074:	4b58      	ldr	r3, [pc, #352]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801107c:	ee07 3a90 	vmov	s15, r3
 8011080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011084:	ed97 6a03 	vldr	s12, [r7, #12]
 8011088:	eddf 5a55 	vldr	s11, [pc, #340]	; 80111e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801108c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110a4:	e043      	b.n	801112e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	ee07 3a90 	vmov	s15, r3
 80110ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80111ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80110b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110b8:	4b47      	ldr	r3, [pc, #284]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110c0:	ee07 3a90 	vmov	s15, r3
 80110c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80110cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80111e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110e8:	e021      	b.n	801112e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	ee07 3a90 	vmov	s15, r3
 80110f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80111e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80110f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110fc:	4b36      	ldr	r3, [pc, #216]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011104:	ee07 3a90 	vmov	s15, r3
 8011108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801110c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011110:	eddf 5a33 	vldr	s11, [pc, #204]	; 80111e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801111c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801112c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801112e:	4b2a      	ldr	r3, [pc, #168]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011132:	0a5b      	lsrs	r3, r3, #9
 8011134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011138:	ee07 3a90 	vmov	s15, r3
 801113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011144:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011148:	edd7 6a07 	vldr	s13, [r7, #28]
 801114c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011154:	ee17 2a90 	vmov	r2, s15
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801115c:	4b1e      	ldr	r3, [pc, #120]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011160:	0c1b      	lsrs	r3, r3, #16
 8011162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011166:	ee07 3a90 	vmov	s15, r3
 801116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801116e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011176:	edd7 6a07 	vldr	s13, [r7, #28]
 801117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801117e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011182:	ee17 2a90 	vmov	r2, s15
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801118a:	4b13      	ldr	r3, [pc, #76]	; (80111d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118e:	0e1b      	lsrs	r3, r3, #24
 8011190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011194:	ee07 3a90 	vmov	s15, r3
 8011198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801119c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80111a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111b0:	ee17 2a90 	vmov	r2, s15
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80111b8:	e008      	b.n	80111cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	609a      	str	r2, [r3, #8]
}
 80111cc:	bf00      	nop
 80111ce:	3724      	adds	r7, #36	; 0x24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	58024400 	.word	0x58024400
 80111dc:	03d09000 	.word	0x03d09000
 80111e0:	46000000 	.word	0x46000000
 80111e4:	4c742400 	.word	0x4c742400
 80111e8:	4a742400 	.word	0x4a742400
 80111ec:	4bbebc20 	.word	0x4bbebc20

080111f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80111fe:	4b53      	ldr	r3, [pc, #332]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011202:	f003 0303 	and.w	r3, r3, #3
 8011206:	2b03      	cmp	r3, #3
 8011208:	d101      	bne.n	801120e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	e099      	b.n	8011342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801120e:	4b4f      	ldr	r3, [pc, #316]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	4a4e      	ldr	r2, [pc, #312]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801121a:	f7f4 fc03 	bl	8005a24 <HAL_GetTick>
 801121e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011220:	e008      	b.n	8011234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011222:	f7f4 fbff 	bl	8005a24 <HAL_GetTick>
 8011226:	4602      	mov	r2, r0
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	2b02      	cmp	r3, #2
 801122e:	d901      	bls.n	8011234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011230:	2303      	movs	r3, #3
 8011232:	e086      	b.n	8011342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011234:	4b45      	ldr	r3, [pc, #276]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1f0      	bne.n	8011222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011240:	4b42      	ldr	r3, [pc, #264]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011244:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	031b      	lsls	r3, r3, #12
 801124e:	493f      	ldr	r1, [pc, #252]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011250:	4313      	orrs	r3, r2
 8011252:	628b      	str	r3, [r1, #40]	; 0x28
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	3b01      	subs	r3, #1
 801125a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	3b01      	subs	r3, #1
 8011264:	025b      	lsls	r3, r3, #9
 8011266:	b29b      	uxth	r3, r3
 8011268:	431a      	orrs	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	3b01      	subs	r3, #1
 8011270:	041b      	lsls	r3, r3, #16
 8011272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011276:	431a      	orrs	r2, r3
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	3b01      	subs	r3, #1
 801127e:	061b      	lsls	r3, r3, #24
 8011280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011284:	4931      	ldr	r1, [pc, #196]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011286:	4313      	orrs	r3, r2
 8011288:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801128a:	4b30      	ldr	r3, [pc, #192]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	695b      	ldr	r3, [r3, #20]
 8011296:	492d      	ldr	r1, [pc, #180]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011298:	4313      	orrs	r3, r2
 801129a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801129c:	4b2b      	ldr	r3, [pc, #172]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	f023 0220 	bic.w	r2, r3, #32
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	699b      	ldr	r3, [r3, #24]
 80112a8:	4928      	ldr	r1, [pc, #160]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112aa:	4313      	orrs	r3, r2
 80112ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80112ae:	4b27      	ldr	r3, [pc, #156]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b2:	4a26      	ldr	r2, [pc, #152]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112b4:	f023 0310 	bic.w	r3, r3, #16
 80112b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80112ba:	4b24      	ldr	r3, [pc, #144]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112be:	4b24      	ldr	r3, [pc, #144]	; (8011350 <RCCEx_PLL2_Config+0x160>)
 80112c0:	4013      	ands	r3, r2
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	69d2      	ldr	r2, [r2, #28]
 80112c6:	00d2      	lsls	r2, r2, #3
 80112c8:	4920      	ldr	r1, [pc, #128]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112ca:	4313      	orrs	r3, r2
 80112cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80112ce:	4b1f      	ldr	r3, [pc, #124]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d2:	4a1e      	ldr	r2, [pc, #120]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112d4:	f043 0310 	orr.w	r3, r3, #16
 80112d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d106      	bne.n	80112ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80112e0:	4b1a      	ldr	r3, [pc, #104]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	4a19      	ldr	r2, [pc, #100]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80112ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80112ec:	e00f      	b.n	801130e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d106      	bne.n	8011302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80112f4:	4b15      	ldr	r3, [pc, #84]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f8:	4a14      	ldr	r2, [pc, #80]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 80112fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80112fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011300:	e005      	b.n	801130e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011302:	4b12      	ldr	r3, [pc, #72]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011306:	4a11      	ldr	r2, [pc, #68]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801130c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801130e:	4b0f      	ldr	r3, [pc, #60]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4a0e      	ldr	r2, [pc, #56]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801131a:	f7f4 fb83 	bl	8005a24 <HAL_GetTick>
 801131e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011320:	e008      	b.n	8011334 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011322:	f7f4 fb7f 	bl	8005a24 <HAL_GetTick>
 8011326:	4602      	mov	r2, r0
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	2b02      	cmp	r3, #2
 801132e:	d901      	bls.n	8011334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011330:	2303      	movs	r3, #3
 8011332:	e006      	b.n	8011342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <RCCEx_PLL2_Config+0x15c>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801133c:	2b00      	cmp	r3, #0
 801133e:	d0f0      	beq.n	8011322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011340:	7bfb      	ldrb	r3, [r7, #15]
}
 8011342:	4618      	mov	r0, r3
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	58024400 	.word	0x58024400
 8011350:	ffff0007 	.word	0xffff0007

08011354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801135e:	2300      	movs	r3, #0
 8011360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011362:	4b53      	ldr	r3, [pc, #332]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011366:	f003 0303 	and.w	r3, r3, #3
 801136a:	2b03      	cmp	r3, #3
 801136c:	d101      	bne.n	8011372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e099      	b.n	80114a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011372:	4b4f      	ldr	r3, [pc, #316]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a4e      	ldr	r2, [pc, #312]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801137c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801137e:	f7f4 fb51 	bl	8005a24 <HAL_GetTick>
 8011382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011384:	e008      	b.n	8011398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011386:	f7f4 fb4d 	bl	8005a24 <HAL_GetTick>
 801138a:	4602      	mov	r2, r0
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	2b02      	cmp	r3, #2
 8011392:	d901      	bls.n	8011398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011394:	2303      	movs	r3, #3
 8011396:	e086      	b.n	80114a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011398:	4b45      	ldr	r3, [pc, #276]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1f0      	bne.n	8011386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80113a4:	4b42      	ldr	r3, [pc, #264]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 80113a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	051b      	lsls	r3, r3, #20
 80113b2:	493f      	ldr	r1, [pc, #252]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 80113b4:	4313      	orrs	r3, r2
 80113b6:	628b      	str	r3, [r1, #40]	; 0x28
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	3b01      	subs	r3, #1
 80113be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	3b01      	subs	r3, #1
 80113c8:	025b      	lsls	r3, r3, #9
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	431a      	orrs	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	3b01      	subs	r3, #1
 80113d4:	041b      	lsls	r3, r3, #16
 80113d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80113da:	431a      	orrs	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	691b      	ldr	r3, [r3, #16]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	061b      	lsls	r3, r3, #24
 80113e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80113e8:	4931      	ldr	r1, [pc, #196]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 80113ea:	4313      	orrs	r3, r2
 80113ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80113ee:	4b30      	ldr	r3, [pc, #192]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	695b      	ldr	r3, [r3, #20]
 80113fa:	492d      	ldr	r1, [pc, #180]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 80113fc:	4313      	orrs	r3, r2
 80113fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011400:	4b2b      	ldr	r3, [pc, #172]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	699b      	ldr	r3, [r3, #24]
 801140c:	4928      	ldr	r1, [pc, #160]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801140e:	4313      	orrs	r3, r2
 8011410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011412:	4b27      	ldr	r3, [pc, #156]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	4a26      	ldr	r2, [pc, #152]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801141c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801141e:	4b24      	ldr	r3, [pc, #144]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011422:	4b24      	ldr	r3, [pc, #144]	; (80114b4 <RCCEx_PLL3_Config+0x160>)
 8011424:	4013      	ands	r3, r2
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	69d2      	ldr	r2, [r2, #28]
 801142a:	00d2      	lsls	r2, r2, #3
 801142c:	4920      	ldr	r1, [pc, #128]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801142e:	4313      	orrs	r3, r2
 8011430:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011432:	4b1f      	ldr	r3, [pc, #124]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011436:	4a1e      	ldr	r2, [pc, #120]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801143c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d106      	bne.n	8011452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011444:	4b1a      	ldr	r3, [pc, #104]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011448:	4a19      	ldr	r2, [pc, #100]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801144a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801144e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011450:	e00f      	b.n	8011472 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d106      	bne.n	8011466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011458:	4b15      	ldr	r3, [pc, #84]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	4a14      	ldr	r2, [pc, #80]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801145e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011464:	e005      	b.n	8011472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011466:	4b12      	ldr	r3, [pc, #72]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146a:	4a11      	ldr	r2, [pc, #68]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801146c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011470:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011472:	4b0f      	ldr	r3, [pc, #60]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a0e      	ldr	r2, [pc, #56]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 8011478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801147c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801147e:	f7f4 fad1 	bl	8005a24 <HAL_GetTick>
 8011482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011484:	e008      	b.n	8011498 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011486:	f7f4 facd 	bl	8005a24 <HAL_GetTick>
 801148a:	4602      	mov	r2, r0
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	2b02      	cmp	r3, #2
 8011492:	d901      	bls.n	8011498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011494:	2303      	movs	r3, #3
 8011496:	e006      	b.n	80114a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011498:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <RCCEx_PLL3_Config+0x15c>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d0f0      	beq.n	8011486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80114a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	58024400 	.word	0x58024400
 80114b4:	ffff0007 	.word	0xffff0007

080114b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80114c0:	2301      	movs	r3, #1
 80114c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d071      	beq.n	80115ae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d106      	bne.n	80114e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2200      	movs	r2, #0
 80114da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7f2 fc36 	bl	8003d50 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2202      	movs	r2, #2
 80114e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	f003 0310 	and.w	r3, r3, #16
 80114f6:	2b10      	cmp	r3, #16
 80114f8:	d050      	beq.n	801159c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	22ca      	movs	r2, #202	; 0xca
 8011500:	625a      	str	r2, [r3, #36]	; 0x24
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2253      	movs	r2, #83	; 0x53
 8011508:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f000 fa4a 	bl	80119a4 <RTC_EnterInitMode>
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011514:	7bfb      	ldrb	r3, [r7, #15]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d124      	bne.n	8011564 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	6899      	ldr	r1, [r3, #8]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	4b24      	ldr	r3, [pc, #144]	; (80115b8 <HAL_RTC_Init+0x100>)
 8011526:	400b      	ands	r3, r1
 8011528:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6899      	ldr	r1, [r3, #8]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685a      	ldr	r2, [r3, #4]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	691b      	ldr	r3, [r3, #16]
 8011538:	431a      	orrs	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	431a      	orrs	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	430a      	orrs	r2, r1
 8011546:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	0419      	lsls	r1, r3, #16
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	68da      	ldr	r2, [r3, #12]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	430a      	orrs	r2, r1
 8011558:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 fa56 	bl	8011a0c <RTC_ExitInitMode>
 8011560:	4603      	mov	r3, r0
 8011562:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011564:	7bfb      	ldrb	r3, [r7, #15]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d113      	bne.n	8011592 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	f022 0203 	bic.w	r2, r2, #3
 8011578:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	69da      	ldr	r2, [r3, #28]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	695b      	ldr	r3, [r3, #20]
 8011588:	431a      	orrs	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	430a      	orrs	r2, r1
 8011590:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	22ff      	movs	r2, #255	; 0xff
 8011598:	625a      	str	r2, [r3, #36]	; 0x24
 801159a:	e001      	b.n	80115a0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801159c:	2300      	movs	r3, #0
 801159e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d103      	bne.n	80115ae <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2201      	movs	r2, #1
 80115aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	ff8fffbf 	.word	0xff8fffbf

080115bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80115bc:	b590      	push	{r4, r7, lr}
 80115be:	b087      	sub	sp, #28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d101      	bne.n	80115d6 <HAL_RTC_SetTime+0x1a>
 80115d2:	2302      	movs	r3, #2
 80115d4:	e089      	b.n	80116ea <HAL_RTC_SetTime+0x12e>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2202      	movs	r2, #2
 80115e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	22ca      	movs	r2, #202	; 0xca
 80115ec:	625a      	str	r2, [r3, #36]	; 0x24
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2253      	movs	r2, #83	; 0x53
 80115f4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	f000 f9d4 	bl	80119a4 <RTC_EnterInitMode>
 80115fc:	4603      	mov	r3, r0
 80115fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011600:	7cfb      	ldrb	r3, [r7, #19]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d161      	bne.n	80116ca <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d126      	bne.n	801165a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011616:	2b00      	cmp	r3, #0
 8011618:	d102      	bne.n	8011620 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	2200      	movs	r2, #0
 801161e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	4618      	mov	r0, r3
 8011626:	f000 fa2f 	bl	8011a88 <RTC_ByteToBcd2>
 801162a:	4603      	mov	r3, r0
 801162c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	785b      	ldrb	r3, [r3, #1]
 8011632:	4618      	mov	r0, r3
 8011634:	f000 fa28 	bl	8011a88 <RTC_ByteToBcd2>
 8011638:	4603      	mov	r3, r0
 801163a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801163c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	789b      	ldrb	r3, [r3, #2]
 8011642:	4618      	mov	r0, r3
 8011644:	f000 fa20 	bl	8011a88 <RTC_ByteToBcd2>
 8011648:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801164a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	78db      	ldrb	r3, [r3, #3]
 8011652:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011654:	4313      	orrs	r3, r2
 8011656:	617b      	str	r3, [r7, #20]
 8011658:	e018      	b.n	801168c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011664:	2b00      	cmp	r3, #0
 8011666:	d102      	bne.n	801166e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2200      	movs	r2, #0
 801166c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	785b      	ldrb	r3, [r3, #1]
 8011678:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801167a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801167c:	68ba      	ldr	r2, [r7, #8]
 801167e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011680:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	78db      	ldrb	r3, [r3, #3]
 8011686:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011688:	4313      	orrs	r3, r2
 801168a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	6979      	ldr	r1, [r7, #20]
 8011692:	4b18      	ldr	r3, [pc, #96]	; (80116f4 <HAL_RTC_SetTime+0x138>)
 8011694:	400b      	ands	r3, r1
 8011696:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	689a      	ldr	r2, [r3, #8]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80116a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	6899      	ldr	r1, [r3, #8]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	68da      	ldr	r2, [r3, #12]
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	431a      	orrs	r2, r3
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	430a      	orrs	r2, r1
 80116be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f000 f9a3 	bl	8011a0c <RTC_ExitInitMode>
 80116c6:	4603      	mov	r3, r0
 80116c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	22ff      	movs	r2, #255	; 0xff
 80116d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80116d2:	7cfb      	ldrb	r3, [r7, #19]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d103      	bne.n	80116e0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2200      	movs	r2, #0
 80116e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80116e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	371c      	adds	r7, #28
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd90      	pop	{r4, r7, pc}
 80116f2:	bf00      	nop
 80116f4:	007f7f7f 	.word	0x007f7f7f

080116f8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	691b      	ldr	r3, [r3, #16]
 8011714:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	4b22      	ldr	r3, [pc, #136]	; (80117ac <HAL_RTC_GetTime+0xb4>)
 8011724:	4013      	ands	r3, r2
 8011726:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	0c1b      	lsrs	r3, r3, #16
 801172c:	b2db      	uxtb	r3, r3
 801172e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011732:	b2da      	uxtb	r2, r3
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	0a1b      	lsrs	r3, r3, #8
 801173c:	b2db      	uxtb	r3, r3
 801173e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011742:	b2da      	uxtb	r2, r3
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	b2db      	uxtb	r3, r3
 801174c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011750:	b2da      	uxtb	r2, r3
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	0d9b      	lsrs	r3, r3, #22
 801175a:	b2db      	uxtb	r3, r3
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	b2da      	uxtb	r2, r3
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d11a      	bne.n	80117a2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	4618      	mov	r0, r3
 8011772:	f000 f9a9 	bl	8011ac8 <RTC_Bcd2ToByte>
 8011776:	4603      	mov	r3, r0
 8011778:	461a      	mov	r2, r3
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	785b      	ldrb	r3, [r3, #1]
 8011782:	4618      	mov	r0, r3
 8011784:	f000 f9a0 	bl	8011ac8 <RTC_Bcd2ToByte>
 8011788:	4603      	mov	r3, r0
 801178a:	461a      	mov	r2, r3
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	789b      	ldrb	r3, [r3, #2]
 8011794:	4618      	mov	r0, r3
 8011796:	f000 f997 	bl	8011ac8 <RTC_Bcd2ToByte>
 801179a:	4603      	mov	r3, r0
 801179c:	461a      	mov	r2, r3
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3718      	adds	r7, #24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	007f7f7f 	.word	0x007f7f7f

080117b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80117b0:	b590      	push	{r4, r7, lr}
 80117b2:	b087      	sub	sp, #28
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d101      	bne.n	80117ca <HAL_RTC_SetDate+0x1a>
 80117c6:	2302      	movs	r3, #2
 80117c8:	e073      	b.n	80118b2 <HAL_RTC_SetDate+0x102>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2201      	movs	r2, #1
 80117ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2202      	movs	r2, #2
 80117d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d10e      	bne.n	80117fe <HAL_RTC_SetDate+0x4e>
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	785b      	ldrb	r3, [r3, #1]
 80117e4:	f003 0310 	and.w	r3, r3, #16
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d008      	beq.n	80117fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	785b      	ldrb	r3, [r3, #1]
 80117f0:	f023 0310 	bic.w	r3, r3, #16
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	330a      	adds	r3, #10
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d11c      	bne.n	801183e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	78db      	ldrb	r3, [r3, #3]
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f93d 	bl	8011a88 <RTC_ByteToBcd2>
 801180e:	4603      	mov	r3, r0
 8011810:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	785b      	ldrb	r3, [r3, #1]
 8011816:	4618      	mov	r0, r3
 8011818:	f000 f936 	bl	8011a88 <RTC_ByteToBcd2>
 801181c:	4603      	mov	r3, r0
 801181e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011820:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	789b      	ldrb	r3, [r3, #2]
 8011826:	4618      	mov	r0, r3
 8011828:	f000 f92e 	bl	8011a88 <RTC_ByteToBcd2>
 801182c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801182e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011838:	4313      	orrs	r3, r2
 801183a:	617b      	str	r3, [r7, #20]
 801183c:	e00e      	b.n	801185c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	78db      	ldrb	r3, [r3, #3]
 8011842:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	785b      	ldrb	r3, [r3, #1]
 8011848:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801184a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 801184c:	68ba      	ldr	r2, [r7, #8]
 801184e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011850:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011858:	4313      	orrs	r3, r2
 801185a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	22ca      	movs	r2, #202	; 0xca
 8011862:	625a      	str	r2, [r3, #36]	; 0x24
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2253      	movs	r2, #83	; 0x53
 801186a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f000 f899 	bl	80119a4 <RTC_EnterInitMode>
 8011872:	4603      	mov	r3, r0
 8011874:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011876:	7cfb      	ldrb	r3, [r7, #19]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d10a      	bne.n	8011892 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	6979      	ldr	r1, [r7, #20]
 8011882:	4b0e      	ldr	r3, [pc, #56]	; (80118bc <HAL_RTC_SetDate+0x10c>)
 8011884:	400b      	ands	r3, r1
 8011886:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f000 f8bf 	bl	8011a0c <RTC_ExitInitMode>
 801188e:	4603      	mov	r3, r0
 8011890:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	22ff      	movs	r2, #255	; 0xff
 8011898:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801189a:	7cfb      	ldrb	r3, [r7, #19]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d103      	bne.n	80118a8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2201      	movs	r2, #1
 80118a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80118b0:	7cfb      	ldrb	r3, [r7, #19]


}
 80118b2:	4618      	mov	r0, r3
 80118b4:	371c      	adds	r7, #28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd90      	pop	{r4, r7, pc}
 80118ba:	bf00      	nop
 80118bc:	00ffff3f 	.word	0x00ffff3f

080118c0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b086      	sub	sp, #24
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	685a      	ldr	r2, [r3, #4]
 80118d2:	4b21      	ldr	r3, [pc, #132]	; (8011958 <HAL_RTC_GetDate+0x98>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	0c1b      	lsrs	r3, r3, #16
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	0a1b      	lsrs	r3, r3, #8
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	f003 031f 	and.w	r3, r3, #31
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	0b5b      	lsrs	r3, r3, #13
 8011904:	b2db      	uxtb	r3, r3
 8011906:	f003 0307 	and.w	r3, r3, #7
 801190a:	b2da      	uxtb	r2, r3
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d11a      	bne.n	801194c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	78db      	ldrb	r3, [r3, #3]
 801191a:	4618      	mov	r0, r3
 801191c:	f000 f8d4 	bl	8011ac8 <RTC_Bcd2ToByte>
 8011920:	4603      	mov	r3, r0
 8011922:	461a      	mov	r2, r3
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	785b      	ldrb	r3, [r3, #1]
 801192c:	4618      	mov	r0, r3
 801192e:	f000 f8cb 	bl	8011ac8 <RTC_Bcd2ToByte>
 8011932:	4603      	mov	r3, r0
 8011934:	461a      	mov	r2, r3
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	789b      	ldrb	r3, [r3, #2]
 801193e:	4618      	mov	r0, r3
 8011940:	f000 f8c2 	bl	8011ac8 <RTC_Bcd2ToByte>
 8011944:	4603      	mov	r3, r0
 8011946:	461a      	mov	r2, r3
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	00ffff3f 	.word	0x00ffff3f

0801195c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4a0d      	ldr	r2, [pc, #52]	; (80119a0 <HAL_RTC_WaitForSynchro+0x44>)
 801196a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 801196c:	f7f4 f85a 	bl	8005a24 <HAL_GetTick>
 8011970:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011972:	e009      	b.n	8011988 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011974:	f7f4 f856 	bl	8005a24 <HAL_GetTick>
 8011978:	4602      	mov	r2, r0
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	1ad3      	subs	r3, r2, r3
 801197e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011982:	d901      	bls.n	8011988 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011984:	2303      	movs	r3, #3
 8011986:	e007      	b.n	8011998 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	f003 0320 	and.w	r3, r3, #32
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0ee      	beq.n	8011974 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	0003ff5f 	.word	0x0003ff5f

080119a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d120      	bne.n	8011a00 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80119c8:	f7f4 f82c 	bl	8005a24 <HAL_GetTick>
 80119cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80119ce:	e00d      	b.n	80119ec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80119d0:	f7f4 f828 	bl	8005a24 <HAL_GetTick>
 80119d4:	4602      	mov	r2, r0
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	1ad3      	subs	r3, r2, r3
 80119da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80119de:	d905      	bls.n	80119ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80119e0:	2303      	movs	r3, #3
 80119e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2203      	movs	r2, #3
 80119e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d102      	bne.n	8011a00 <RTC_EnterInitMode+0x5c>
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
 80119fc:	2b03      	cmp	r3, #3
 80119fe:	d1e7      	bne.n	80119d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
	...

08011a0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011a18:	4b1a      	ldr	r3, [pc, #104]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	4a19      	ldr	r2, [pc, #100]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a22:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011a24:	4b17      	ldr	r3, [pc, #92]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	f003 0320 	and.w	r3, r3, #32
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d10c      	bne.n	8011a4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7ff ff93 	bl	801195c <HAL_RTC_WaitForSynchro>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d01e      	beq.n	8011a7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2203      	movs	r2, #3
 8011a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011a44:	2303      	movs	r3, #3
 8011a46:	73fb      	strb	r3, [r7, #15]
 8011a48:	e017      	b.n	8011a7a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011a4a:	4b0e      	ldr	r3, [pc, #56]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	4a0d      	ldr	r2, [pc, #52]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a50:	f023 0320 	bic.w	r3, r3, #32
 8011a54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7ff ff80 	bl	801195c <HAL_RTC_WaitForSynchro>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d005      	beq.n	8011a6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2203      	movs	r2, #3
 8011a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011a6e:	4b05      	ldr	r3, [pc, #20]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a70:	689b      	ldr	r3, [r3, #8]
 8011a72:	4a04      	ldr	r2, [pc, #16]	; (8011a84 <RTC_ExitInitMode+0x78>)
 8011a74:	f043 0320 	orr.w	r3, r3, #32
 8011a78:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3710      	adds	r7, #16
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	58004000 	.word	0x58004000

08011a88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b085      	sub	sp, #20
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	4603      	mov	r3, r0
 8011a90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011a92:	2300      	movs	r3, #0
 8011a94:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011a9a:	e005      	b.n	8011aa8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011aa2:	7afb      	ldrb	r3, [r7, #11]
 8011aa4:	3b0a      	subs	r3, #10
 8011aa6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011aa8:	7afb      	ldrb	r3, [r7, #11]
 8011aaa:	2b09      	cmp	r3, #9
 8011aac:	d8f6      	bhi.n	8011a9c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	011b      	lsls	r3, r3, #4
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	7afb      	ldrb	r3, [r7, #11]
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	b2db      	uxtb	r3, r3
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3714      	adds	r7, #20
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	4603      	mov	r3, r0
 8011ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011ad2:	79fb      	ldrb	r3, [r7, #7]
 8011ad4:	091b      	lsrs	r3, r3, #4
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	461a      	mov	r2, r3
 8011ada:	0092      	lsls	r2, r2, #2
 8011adc:	4413      	add	r3, r2
 8011ade:	005b      	lsls	r3, r3, #1
 8011ae0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011ae2:	79fb      	ldrb	r3, [r7, #7]
 8011ae4:	f003 030f 	and.w	r3, r3, #15
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	4413      	add	r3, r2
 8011aee:	b2db      	uxtb	r3, r3
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d101      	bne.n	8011b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e10f      	b.n	8011d2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a87      	ldr	r2, [pc, #540]	; (8011d38 <HAL_SPI_Init+0x23c>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d00f      	beq.n	8011b3e <HAL_SPI_Init+0x42>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4a86      	ldr	r2, [pc, #536]	; (8011d3c <HAL_SPI_Init+0x240>)
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d00a      	beq.n	8011b3e <HAL_SPI_Init+0x42>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	4a84      	ldr	r2, [pc, #528]	; (8011d40 <HAL_SPI_Init+0x244>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d005      	beq.n	8011b3e <HAL_SPI_Init+0x42>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	2b0f      	cmp	r3, #15
 8011b38:	d901      	bls.n	8011b3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e0f7      	b.n	8011d2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 fd60 	bl	8012604 <SPI_GetPacketSize>
 8011b44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a7b      	ldr	r2, [pc, #492]	; (8011d38 <HAL_SPI_Init+0x23c>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d00c      	beq.n	8011b6a <HAL_SPI_Init+0x6e>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a79      	ldr	r2, [pc, #484]	; (8011d3c <HAL_SPI_Init+0x240>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d007      	beq.n	8011b6a <HAL_SPI_Init+0x6e>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4a78      	ldr	r2, [pc, #480]	; (8011d40 <HAL_SPI_Init+0x244>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d002      	beq.n	8011b6a <HAL_SPI_Init+0x6e>
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2b08      	cmp	r3, #8
 8011b68:	d811      	bhi.n	8011b8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011b6e:	4a72      	ldr	r2, [pc, #456]	; (8011d38 <HAL_SPI_Init+0x23c>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d009      	beq.n	8011b88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a70      	ldr	r2, [pc, #448]	; (8011d3c <HAL_SPI_Init+0x240>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d004      	beq.n	8011b88 <HAL_SPI_Init+0x8c>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4a6f      	ldr	r2, [pc, #444]	; (8011d40 <HAL_SPI_Init+0x244>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d104      	bne.n	8011b92 <HAL_SPI_Init+0x96>
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2b10      	cmp	r3, #16
 8011b8c:	d901      	bls.n	8011b92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e0cd      	b.n	8011d2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d106      	bne.n	8011bac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7f2 fb56 	bl	8004258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2202      	movs	r2, #2
 8011bb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f022 0201 	bic.w	r2, r2, #1
 8011bc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011bce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011bd8:	d119      	bne.n	8011c0e <HAL_SPI_Init+0x112>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011be2:	d103      	bne.n	8011bec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d008      	beq.n	8011bfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10c      	bne.n	8011c0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bfc:	d107      	bne.n	8011c0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011c0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00f      	beq.n	8011c3a <HAL_SPI_Init+0x13e>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	2b06      	cmp	r3, #6
 8011c20:	d90b      	bls.n	8011c3a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	430a      	orrs	r2, r1
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	e007      	b.n	8011c4a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011c48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	69da      	ldr	r2, [r3, #28]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c52:	431a      	orrs	r2, r3
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	431a      	orrs	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c5c:	ea42 0103 	orr.w	r1, r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	68da      	ldr	r2, [r3, #12]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	430a      	orrs	r2, r1
 8011c6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c74:	431a      	orrs	r2, r3
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7a:	431a      	orrs	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	431a      	orrs	r2, r3
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	431a      	orrs	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	695b      	ldr	r3, [r3, #20]
 8011c8c:	431a      	orrs	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a1b      	ldr	r3, [r3, #32]
 8011c92:	431a      	orrs	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	431a      	orrs	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c9e:	431a      	orrs	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	431a      	orrs	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011caa:	ea42 0103 	orr.w	r1, r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	430a      	orrs	r2, r1
 8011cb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d113      	bne.n	8011cea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011cd4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ce8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f022 0201 	bic.w	r2, r2, #1
 8011cf8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00a      	beq.n	8011d1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	430a      	orrs	r2, r1
 8011d1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2201      	movs	r2, #1
 8011d28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011d2c:	2300      	movs	r3, #0
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	40013000 	.word	0x40013000
 8011d3c:	40003800 	.word	0x40003800
 8011d40:	40003c00 	.word	0x40003c00

08011d44 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d005      	beq.n	8011d6a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011d66:	2302      	movs	r3, #2
 8011d68:	e127      	b.n	8011fba <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <HAL_SPI_Receive_DMA+0x32>
 8011d70:	88fb      	ldrh	r3, [r7, #6]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d105      	bne.n	8011d82 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e11b      	b.n	8011fba <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d101      	bne.n	8011d90 <HAL_SPI_Receive_DMA+0x4c>
 8011d8c:	2302      	movs	r3, #2
 8011d8e:	e114      	b.n	8011fba <HAL_SPI_Receive_DMA+0x276>
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2204      	movs	r2, #4
 8011d9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2200      	movs	r2, #0
 8011da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	88fa      	ldrh	r2, [r7, #6]
 8011db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	88fa      	ldrh	r2, [r7, #6]
 8011dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011de2:	d108      	bne.n	8011df6 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011df2:	601a      	str	r2, [r3, #0]
 8011df4:	e009      	b.n	8011e0a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011e08:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	68db      	ldr	r3, [r3, #12]
 8011e0e:	2b0f      	cmp	r3, #15
 8011e10:	d905      	bls.n	8011e1e <HAL_SPI_Receive_DMA+0xda>
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e16:	699b      	ldr	r3, [r3, #24]
 8011e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e1c:	d10f      	bne.n	8011e3e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e22:	2b07      	cmp	r3, #7
 8011e24:	d911      	bls.n	8011e4a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e2a:	699b      	ldr	r3, [r3, #24]
 8011e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e30:	d00b      	beq.n	8011e4a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e36:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e3c:	d005      	beq.n	8011e4a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011e46:	2301      	movs	r3, #1
 8011e48:	e0b7      	b.n	8011fba <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	689a      	ldr	r2, [r3, #8]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011e58:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	2b07      	cmp	r3, #7
 8011e60:	d820      	bhi.n	8011ea4 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e6c:	d109      	bne.n	8011e82 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	3301      	adds	r3, #1
 8011e78:	105b      	asrs	r3, r3, #1
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e86:	699b      	ldr	r3, [r3, #24]
 8011e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e8c:	d11e      	bne.n	8011ecc <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	3303      	adds	r3, #3
 8011e98:	109b      	asrs	r3, r3, #2
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011ea2:	e013      	b.n	8011ecc <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	2b0f      	cmp	r3, #15
 8011eaa:	d80f      	bhi.n	8011ecc <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011eb0:	699b      	ldr	r3, [r3, #24]
 8011eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011eb6:	d109      	bne.n	8011ecc <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	105b      	asrs	r3, r3, #1
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ed0:	4a3c      	ldr	r2, [pc, #240]	; (8011fc4 <HAL_SPI_Receive_DMA+0x280>)
 8011ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ed8:	4a3b      	ldr	r2, [pc, #236]	; (8011fc8 <HAL_SPI_Receive_DMA+0x284>)
 8011eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ee0:	4a3a      	ldr	r2, [pc, #232]	; (8011fcc <HAL_SPI_Receive_DMA+0x288>)
 8011ee2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ee8:	2200      	movs	r2, #0
 8011eea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	3330      	adds	r3, #48	; 0x30
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011efc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011f06:	f7f6 fa11 	bl	800832c <HAL_DMA_Start_IT>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d011      	beq.n	8011f34 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f16:	f043 0210 	orr.w	r2, r3, #16
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2201      	movs	r2, #1
 8011f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011f30:	2301      	movs	r3, #1
 8011f32:	e042      	b.n	8011fba <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f38:	69db      	ldr	r3, [r3, #28]
 8011f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f3e:	d108      	bne.n	8011f52 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	6859      	ldr	r1, [r3, #4]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681a      	ldr	r2, [r3, #0]
 8011f4a:	4b21      	ldr	r3, [pc, #132]	; (8011fd0 <HAL_SPI_Receive_DMA+0x28c>)
 8011f4c:	400b      	ands	r3, r1
 8011f4e:	6053      	str	r3, [r2, #4]
 8011f50:	e009      	b.n	8011f66 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <HAL_SPI_Receive_DMA+0x28c>)
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	88f9      	ldrh	r1, [r7, #6]
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	6812      	ldr	r2, [r2, #0]
 8011f62:	430b      	orrs	r3, r1
 8011f64:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	689a      	ldr	r2, [r3, #8]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f74:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	691a      	ldr	r2, [r3, #16]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011f84:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f042 0201 	orr.w	r2, r2, #1
 8011f94:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011f9e:	d107      	bne.n	8011fb0 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011fae:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	0801242f 	.word	0x0801242f
 8011fc8:	080123e9 	.word	0x080123e9
 8011fcc:	0801244b 	.word	0x0801244b
 8011fd0:	ffff0000 	.word	0xffff0000

08011fd4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b08a      	sub	sp, #40	; 0x28
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	695b      	ldr	r3, [r3, #20]
 8011fea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011fec:	6a3a      	ldr	r2, [r7, #32]
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	4013      	ands	r3, r2
 8011ff2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	689b      	ldr	r3, [r3, #8]
 8011ffa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012006:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3330      	adds	r3, #48	; 0x30
 801200e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012016:	2b00      	cmp	r3, #0
 8012018:	d010      	beq.n	801203c <HAL_SPI_IRQHandler+0x68>
 801201a:	6a3b      	ldr	r3, [r7, #32]
 801201c:	f003 0308 	and.w	r3, r3, #8
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00b      	beq.n	801203c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	699a      	ldr	r2, [r3, #24]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012032:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 f9cd 	bl	80123d4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801203a:	e192      	b.n	8012362 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012042:	2b00      	cmp	r3, #0
 8012044:	d113      	bne.n	801206e <HAL_SPI_IRQHandler+0x9a>
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	f003 0320 	and.w	r3, r3, #32
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10e      	bne.n	801206e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012056:	2b00      	cmp	r3, #0
 8012058:	d009      	beq.n	801206e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	4798      	blx	r3
    handled = 1UL;
 801206a:	2301      	movs	r3, #1
 801206c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10f      	bne.n	8012098 <HAL_SPI_IRQHandler+0xc4>
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00a      	beq.n	8012098 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012088:	2b00      	cmp	r3, #0
 801208a:	d105      	bne.n	8012098 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	4798      	blx	r3
    handled = 1UL;
 8012094:	2301      	movs	r3, #1
 8012096:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	f003 0320 	and.w	r3, r3, #32
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10f      	bne.n	80120c2 <HAL_SPI_IRQHandler+0xee>
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	f003 0302 	and.w	r3, r3, #2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00a      	beq.n	80120c2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d105      	bne.n	80120c2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	4798      	blx	r3
    handled = 1UL;
 80120be:	2301      	movs	r3, #1
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f040 8147 	bne.w	8012358 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80120ca:	69bb      	ldr	r3, [r7, #24]
 80120cc:	f003 0308 	and.w	r3, r3, #8
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 808b 	beq.w	80121ec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	699a      	ldr	r2, [r3, #24]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f042 0208 	orr.w	r2, r2, #8
 80120e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	699a      	ldr	r2, [r3, #24]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f042 0210 	orr.w	r2, r2, #16
 80120f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	699a      	ldr	r2, [r3, #24]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012104:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	691a      	ldr	r2, [r3, #16]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f022 0208 	bic.w	r2, r2, #8
 8012114:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012120:	2b00      	cmp	r3, #0
 8012122:	d13d      	bne.n	80121a0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012124:	e036      	b.n	8012194 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	2b0f      	cmp	r3, #15
 801212c:	d90b      	bls.n	8012146 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012138:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	665a      	str	r2, [r3, #100]	; 0x64
 8012144:	e01d      	b.n	8012182 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	68db      	ldr	r3, [r3, #12]
 801214a:	2b07      	cmp	r3, #7
 801214c:	d90b      	bls.n	8012166 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012152:	68fa      	ldr	r2, [r7, #12]
 8012154:	8812      	ldrh	r2, [r2, #0]
 8012156:	b292      	uxth	r2, r2
 8012158:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801215e:	1c9a      	adds	r2, r3, #2
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	665a      	str	r2, [r3, #100]	; 0x64
 8012164:	e00d      	b.n	8012182 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012172:	7812      	ldrb	r2, [r2, #0]
 8012174:	b2d2      	uxtb	r2, r2
 8012176:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801217c:	1c5a      	adds	r2, r3, #1
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012188:	b29b      	uxth	r3, r3
 801218a:	3b01      	subs	r3, #1
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801219a:	b29b      	uxth	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d1c2      	bne.n	8012126 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f98f 	bl	80124c4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2201      	movs	r2, #1
 80121aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d003      	beq.n	80121c0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 f901 	bl	80123c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80121be:	e0d0      	b.n	8012362 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80121c0:	7cfb      	ldrb	r3, [r7, #19]
 80121c2:	2b05      	cmp	r3, #5
 80121c4:	d103      	bne.n	80121ce <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 f8e6 	bl	8012398 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80121cc:	e0c6      	b.n	801235c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80121ce:	7cfb      	ldrb	r3, [r7, #19]
 80121d0:	2b04      	cmp	r3, #4
 80121d2:	d103      	bne.n	80121dc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f8d5 	bl	8012384 <HAL_SPI_RxCpltCallback>
    return;
 80121da:	e0bf      	b.n	801235c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80121dc:	7cfb      	ldrb	r3, [r7, #19]
 80121de:	2b03      	cmp	r3, #3
 80121e0:	f040 80bc 	bne.w	801235c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 f8c3 	bl	8012370 <HAL_SPI_TxCpltCallback>
    return;
 80121ea:	e0b7      	b.n	801235c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f000 80b5 	beq.w	8012362 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00f      	beq.n	8012222 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012208:	f043 0204 	orr.w	r2, r3, #4
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	699a      	ldr	r2, [r3, #24]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012220:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00f      	beq.n	801224c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012232:	f043 0201 	orr.w	r2, r3, #1
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	699a      	ldr	r2, [r3, #24]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801224a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012252:	2b00      	cmp	r3, #0
 8012254:	d00f      	beq.n	8012276 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801225c:	f043 0208 	orr.w	r2, r3, #8
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	699a      	ldr	r2, [r3, #24]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012274:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	f003 0320 	and.w	r3, r3, #32
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00f      	beq.n	80122a0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012286:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	699a      	ldr	r2, [r3, #24]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f042 0220 	orr.w	r2, r2, #32
 801229e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d05a      	beq.n	8012360 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f022 0201 	bic.w	r2, r2, #1
 80122b8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	6919      	ldr	r1, [r3, #16]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	4b28      	ldr	r3, [pc, #160]	; (8012368 <HAL_SPI_IRQHandler+0x394>)
 80122c6:	400b      	ands	r3, r1
 80122c8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80122d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80122d4:	d138      	bne.n	8012348 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	689a      	ldr	r2, [r3, #8]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80122e4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d013      	beq.n	8012316 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f2:	4a1e      	ldr	r2, [pc, #120]	; (801236c <HAL_SPI_IRQHandler+0x398>)
 80122f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7f6 fd9e 	bl	8008e3c <HAL_DMA_Abort_IT>
 8012300:	4603      	mov	r3, r0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d007      	beq.n	8012316 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801230c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801231a:	2b00      	cmp	r3, #0
 801231c:	d020      	beq.n	8012360 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012322:	4a12      	ldr	r2, [pc, #72]	; (801236c <HAL_SPI_IRQHandler+0x398>)
 8012324:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801232a:	4618      	mov	r0, r3
 801232c:	f7f6 fd86 	bl	8008e3c <HAL_DMA_Abort_IT>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d014      	beq.n	8012360 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801233c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012346:	e00b      	b.n	8012360 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2201      	movs	r2, #1
 801234c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 f835 	bl	80123c0 <HAL_SPI_ErrorCallback>
    return;
 8012356:	e003      	b.n	8012360 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012358:	bf00      	nop
 801235a:	e002      	b.n	8012362 <HAL_SPI_IRQHandler+0x38e>
    return;
 801235c:	bf00      	nop
 801235e:	e000      	b.n	8012362 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012360:	bf00      	nop
  }
}
 8012362:	3728      	adds	r7, #40	; 0x28
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	fffffc94 	.word	0xfffffc94
 801236c:	08012491 	.word	0x08012491

08012370 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012378:	bf00      	nop
 801237a:	370c      	adds	r7, #12
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801238c:	bf00      	nop
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80123a0:	bf00      	nop
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123ac:	b480      	push	{r7}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80123b4:	bf00      	nop
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80123c8:	bf00      	nop
 80123ca:	370c      	adds	r7, #12
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80123dc:	bf00      	nop
 80123de:	370c      	adds	r7, #12
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	2b07      	cmp	r3, #7
 8012400:	d011      	beq.n	8012426 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012406:	69db      	ldr	r3, [r3, #28]
 8012408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801240c:	d103      	bne.n	8012416 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	f7ff ffb8 	bl	8012384 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012414:	e007      	b.n	8012426 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	691a      	ldr	r2, [r3, #16]
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f042 0208 	orr.w	r2, r2, #8
 8012424:	611a      	str	r2, [r3, #16]
}
 8012426:	bf00      	nop
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801243a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f7ff ffb5 	bl	80123ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012442:	bf00      	nop
 8012444:	3710      	adds	r7, #16
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b084      	sub	sp, #16
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012456:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7f7 fe6d 	bl	800a138 <HAL_DMA_GetError>
 801245e:	4603      	mov	r3, r0
 8012460:	2b02      	cmp	r3, #2
 8012462:	d011      	beq.n	8012488 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f000 f82d 	bl	80124c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012470:	f043 0210 	orr.w	r2, r3, #16
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2201      	movs	r2, #1
 801247e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7ff ff9c 	bl	80123c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012488:	bf00      	nop
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801249c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2200      	movs	r2, #0
 80124a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2200      	movs	r2, #0
 80124aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	2201      	movs	r2, #1
 80124b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f7ff ff82 	bl	80123c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80124bc:	bf00      	nop
 80124be:	3710      	adds	r7, #16
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b085      	sub	sp, #20
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	695b      	ldr	r3, [r3, #20]
 80124d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	699a      	ldr	r2, [r3, #24]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f042 0208 	orr.w	r2, r2, #8
 80124e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	699a      	ldr	r2, [r3, #24]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f042 0210 	orr.w	r2, r2, #16
 80124f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f022 0201 	bic.w	r2, r2, #1
 8012502:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	6919      	ldr	r1, [r3, #16]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681a      	ldr	r2, [r3, #0]
 801250e:	4b3c      	ldr	r3, [pc, #240]	; (8012600 <SPI_CloseTransfer+0x13c>)
 8012510:	400b      	ands	r3, r1
 8012512:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	689a      	ldr	r2, [r3, #8]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012522:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b04      	cmp	r3, #4
 801252e:	d014      	beq.n	801255a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f003 0320 	and.w	r3, r3, #32
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00f      	beq.n	801255a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	699a      	ldr	r2, [r3, #24]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f042 0220 	orr.w	r2, r2, #32
 8012558:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012560:	b2db      	uxtb	r3, r3
 8012562:	2b03      	cmp	r3, #3
 8012564:	d014      	beq.n	8012590 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00f      	beq.n	8012590 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012576:	f043 0204 	orr.w	r2, r3, #4
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	699a      	ldr	r2, [r3, #24]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801258e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00f      	beq.n	80125ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125a0:	f043 0201 	orr.w	r2, r3, #1
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	699a      	ldr	r2, [r3, #24]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80125b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00f      	beq.n	80125e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125ca:	f043 0208 	orr.w	r2, r3, #8
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	699a      	ldr	r2, [r3, #24]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80125e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80125f4:	bf00      	nop
 80125f6:	3714      	adds	r7, #20
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr
 8012600:	fffffc90 	.word	0xfffffc90

08012604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012610:	095b      	lsrs	r3, r3, #5
 8012612:	3301      	adds	r3, #1
 8012614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	3301      	adds	r3, #1
 801261c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	3307      	adds	r3, #7
 8012622:	08db      	lsrs	r3, r3, #3
 8012624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	fb02 f303 	mul.w	r3, r2, r3
}
 801262e:	4618      	mov	r0, r3
 8012630:	3714      	adds	r7, #20
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr

0801263a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b082      	sub	sp, #8
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012648:	2301      	movs	r3, #1
 801264a:	e049      	b.n	80126e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012652:	b2db      	uxtb	r3, r3
 8012654:	2b00      	cmp	r3, #0
 8012656:	d106      	bne.n	8012666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7f2 fb05 	bl	8004c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2202      	movs	r2, #2
 801266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3304      	adds	r3, #4
 8012676:	4619      	mov	r1, r3
 8012678:	4610      	mov	r0, r2
 801267a:	f000 fe7d 	bl	8013378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2201      	movs	r2, #1
 8012682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2201      	movs	r2, #1
 801268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2201      	movs	r2, #1
 8012692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2201      	movs	r2, #1
 801269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2201      	movs	r2, #1
 80126a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2201      	movs	r2, #1
 80126aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2201      	movs	r2, #1
 80126b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2201      	movs	r2, #1
 80126ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2201      	movs	r2, #1
 80126c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2201      	movs	r2, #1
 80126da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b085      	sub	sp, #20
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d001      	beq.n	8012700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e054      	b.n	80127aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2202      	movs	r2, #2
 8012704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	68da      	ldr	r2, [r3, #12]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f042 0201 	orr.w	r2, r2, #1
 8012716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a26      	ldr	r2, [pc, #152]	; (80127b8 <HAL_TIM_Base_Start_IT+0xd0>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d022      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801272a:	d01d      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a22      	ldr	r2, [pc, #136]	; (80127bc <HAL_TIM_Base_Start_IT+0xd4>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d018      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a21      	ldr	r2, [pc, #132]	; (80127c0 <HAL_TIM_Base_Start_IT+0xd8>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d013      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a1f      	ldr	r2, [pc, #124]	; (80127c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d00e      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a1e      	ldr	r2, [pc, #120]	; (80127c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d009      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a1c      	ldr	r2, [pc, #112]	; (80127cc <HAL_TIM_Base_Start_IT+0xe4>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d004      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x80>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a1b      	ldr	r2, [pc, #108]	; (80127d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d115      	bne.n	8012794 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	689a      	ldr	r2, [r3, #8]
 801276e:	4b19      	ldr	r3, [pc, #100]	; (80127d4 <HAL_TIM_Base_Start_IT+0xec>)
 8012770:	4013      	ands	r3, r2
 8012772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b06      	cmp	r3, #6
 8012778:	d015      	beq.n	80127a6 <HAL_TIM_Base_Start_IT+0xbe>
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012780:	d011      	beq.n	80127a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f042 0201 	orr.w	r2, r2, #1
 8012790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012792:	e008      	b.n	80127a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f042 0201 	orr.w	r2, r2, #1
 80127a2:	601a      	str	r2, [r3, #0]
 80127a4:	e000      	b.n	80127a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80127a8:	2300      	movs	r3, #0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3714      	adds	r7, #20
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	40010000 	.word	0x40010000
 80127bc:	40000400 	.word	0x40000400
 80127c0:	40000800 	.word	0x40000800
 80127c4:	40000c00 	.word	0x40000c00
 80127c8:	40010400 	.word	0x40010400
 80127cc:	40001800 	.word	0x40001800
 80127d0:	40014000 	.word	0x40014000
 80127d4:	00010007 	.word	0x00010007

080127d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127e2:	2300      	movs	r3, #0
 80127e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d109      	bne.n	8012800 <HAL_TIM_OC_Start_IT+0x28>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	bf14      	ite	ne
 80127f8:	2301      	movne	r3, #1
 80127fa:	2300      	moveq	r3, #0
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	e03c      	b.n	801287a <HAL_TIM_OC_Start_IT+0xa2>
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	2b04      	cmp	r3, #4
 8012804:	d109      	bne.n	801281a <HAL_TIM_OC_Start_IT+0x42>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801280c:	b2db      	uxtb	r3, r3
 801280e:	2b01      	cmp	r3, #1
 8012810:	bf14      	ite	ne
 8012812:	2301      	movne	r3, #1
 8012814:	2300      	moveq	r3, #0
 8012816:	b2db      	uxtb	r3, r3
 8012818:	e02f      	b.n	801287a <HAL_TIM_OC_Start_IT+0xa2>
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2b08      	cmp	r3, #8
 801281e:	d109      	bne.n	8012834 <HAL_TIM_OC_Start_IT+0x5c>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012826:	b2db      	uxtb	r3, r3
 8012828:	2b01      	cmp	r3, #1
 801282a:	bf14      	ite	ne
 801282c:	2301      	movne	r3, #1
 801282e:	2300      	moveq	r3, #0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	e022      	b.n	801287a <HAL_TIM_OC_Start_IT+0xa2>
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2b0c      	cmp	r3, #12
 8012838:	d109      	bne.n	801284e <HAL_TIM_OC_Start_IT+0x76>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2b01      	cmp	r3, #1
 8012844:	bf14      	ite	ne
 8012846:	2301      	movne	r3, #1
 8012848:	2300      	moveq	r3, #0
 801284a:	b2db      	uxtb	r3, r3
 801284c:	e015      	b.n	801287a <HAL_TIM_OC_Start_IT+0xa2>
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	2b10      	cmp	r3, #16
 8012852:	d109      	bne.n	8012868 <HAL_TIM_OC_Start_IT+0x90>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b01      	cmp	r3, #1
 801285e:	bf14      	ite	ne
 8012860:	2301      	movne	r3, #1
 8012862:	2300      	moveq	r3, #0
 8012864:	b2db      	uxtb	r3, r3
 8012866:	e008      	b.n	801287a <HAL_TIM_OC_Start_IT+0xa2>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801286e:	b2db      	uxtb	r3, r3
 8012870:	2b01      	cmp	r3, #1
 8012872:	bf14      	ite	ne
 8012874:	2301      	movne	r3, #1
 8012876:	2300      	moveq	r3, #0
 8012878:	b2db      	uxtb	r3, r3
 801287a:	2b00      	cmp	r3, #0
 801287c:	d001      	beq.n	8012882 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801287e:	2301      	movs	r3, #1
 8012880:	e0ec      	b.n	8012a5c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d104      	bne.n	8012892 <HAL_TIM_OC_Start_IT+0xba>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2202      	movs	r2, #2
 801288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012890:	e023      	b.n	80128da <HAL_TIM_OC_Start_IT+0x102>
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	2b04      	cmp	r3, #4
 8012896:	d104      	bne.n	80128a2 <HAL_TIM_OC_Start_IT+0xca>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2202      	movs	r2, #2
 801289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128a0:	e01b      	b.n	80128da <HAL_TIM_OC_Start_IT+0x102>
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	2b08      	cmp	r3, #8
 80128a6:	d104      	bne.n	80128b2 <HAL_TIM_OC_Start_IT+0xda>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2202      	movs	r2, #2
 80128ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128b0:	e013      	b.n	80128da <HAL_TIM_OC_Start_IT+0x102>
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	2b0c      	cmp	r3, #12
 80128b6:	d104      	bne.n	80128c2 <HAL_TIM_OC_Start_IT+0xea>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2202      	movs	r2, #2
 80128bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80128c0:	e00b      	b.n	80128da <HAL_TIM_OC_Start_IT+0x102>
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	2b10      	cmp	r3, #16
 80128c6:	d104      	bne.n	80128d2 <HAL_TIM_OC_Start_IT+0xfa>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2202      	movs	r2, #2
 80128cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80128d0:	e003      	b.n	80128da <HAL_TIM_OC_Start_IT+0x102>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2202      	movs	r2, #2
 80128d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	2b0c      	cmp	r3, #12
 80128de:	d841      	bhi.n	8012964 <HAL_TIM_OC_Start_IT+0x18c>
 80128e0:	a201      	add	r2, pc, #4	; (adr r2, 80128e8 <HAL_TIM_OC_Start_IT+0x110>)
 80128e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128e6:	bf00      	nop
 80128e8:	0801291d 	.word	0x0801291d
 80128ec:	08012965 	.word	0x08012965
 80128f0:	08012965 	.word	0x08012965
 80128f4:	08012965 	.word	0x08012965
 80128f8:	0801292f 	.word	0x0801292f
 80128fc:	08012965 	.word	0x08012965
 8012900:	08012965 	.word	0x08012965
 8012904:	08012965 	.word	0x08012965
 8012908:	08012941 	.word	0x08012941
 801290c:	08012965 	.word	0x08012965
 8012910:	08012965 	.word	0x08012965
 8012914:	08012965 	.word	0x08012965
 8012918:	08012953 	.word	0x08012953
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	68da      	ldr	r2, [r3, #12]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f042 0202 	orr.w	r2, r2, #2
 801292a:	60da      	str	r2, [r3, #12]
      break;
 801292c:	e01d      	b.n	801296a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	68da      	ldr	r2, [r3, #12]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f042 0204 	orr.w	r2, r2, #4
 801293c:	60da      	str	r2, [r3, #12]
      break;
 801293e:	e014      	b.n	801296a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	68da      	ldr	r2, [r3, #12]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f042 0208 	orr.w	r2, r2, #8
 801294e:	60da      	str	r2, [r3, #12]
      break;
 8012950:	e00b      	b.n	801296a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	68da      	ldr	r2, [r3, #12]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f042 0210 	orr.w	r2, r2, #16
 8012960:	60da      	str	r2, [r3, #12]
      break;
 8012962:	e002      	b.n	801296a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012964:	2301      	movs	r3, #1
 8012966:	73fb      	strb	r3, [r7, #15]
      break;
 8012968:	bf00      	nop
  }

  if (status == HAL_OK)
 801296a:	7bfb      	ldrb	r3, [r7, #15]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d174      	bne.n	8012a5a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2201      	movs	r2, #1
 8012976:	6839      	ldr	r1, [r7, #0]
 8012978:	4618      	mov	r0, r3
 801297a:	f001 f917 	bl	8013bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4a38      	ldr	r2, [pc, #224]	; (8012a64 <HAL_TIM_OC_Start_IT+0x28c>)
 8012984:	4293      	cmp	r3, r2
 8012986:	d013      	beq.n	80129b0 <HAL_TIM_OC_Start_IT+0x1d8>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4a36      	ldr	r2, [pc, #216]	; (8012a68 <HAL_TIM_OC_Start_IT+0x290>)
 801298e:	4293      	cmp	r3, r2
 8012990:	d00e      	beq.n	80129b0 <HAL_TIM_OC_Start_IT+0x1d8>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	4a35      	ldr	r2, [pc, #212]	; (8012a6c <HAL_TIM_OC_Start_IT+0x294>)
 8012998:	4293      	cmp	r3, r2
 801299a:	d009      	beq.n	80129b0 <HAL_TIM_OC_Start_IT+0x1d8>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4a33      	ldr	r2, [pc, #204]	; (8012a70 <HAL_TIM_OC_Start_IT+0x298>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d004      	beq.n	80129b0 <HAL_TIM_OC_Start_IT+0x1d8>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a32      	ldr	r2, [pc, #200]	; (8012a74 <HAL_TIM_OC_Start_IT+0x29c>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d101      	bne.n	80129b4 <HAL_TIM_OC_Start_IT+0x1dc>
 80129b0:	2301      	movs	r3, #1
 80129b2:	e000      	b.n	80129b6 <HAL_TIM_OC_Start_IT+0x1de>
 80129b4:	2300      	movs	r3, #0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d007      	beq.n	80129ca <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80129c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a25      	ldr	r2, [pc, #148]	; (8012a64 <HAL_TIM_OC_Start_IT+0x28c>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d022      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129dc:	d01d      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4a25      	ldr	r2, [pc, #148]	; (8012a78 <HAL_TIM_OC_Start_IT+0x2a0>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d018      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a23      	ldr	r2, [pc, #140]	; (8012a7c <HAL_TIM_OC_Start_IT+0x2a4>)
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d013      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4a22      	ldr	r2, [pc, #136]	; (8012a80 <HAL_TIM_OC_Start_IT+0x2a8>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d00e      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	4a19      	ldr	r2, [pc, #100]	; (8012a68 <HAL_TIM_OC_Start_IT+0x290>)
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d009      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a1e      	ldr	r2, [pc, #120]	; (8012a84 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d004      	beq.n	8012a1a <HAL_TIM_OC_Start_IT+0x242>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4a15      	ldr	r2, [pc, #84]	; (8012a6c <HAL_TIM_OC_Start_IT+0x294>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d115      	bne.n	8012a46 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	689a      	ldr	r2, [r3, #8]
 8012a20:	4b19      	ldr	r3, [pc, #100]	; (8012a88 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012a22:	4013      	ands	r3, r2
 8012a24:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	2b06      	cmp	r3, #6
 8012a2a:	d015      	beq.n	8012a58 <HAL_TIM_OC_Start_IT+0x280>
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a32:	d011      	beq.n	8012a58 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f042 0201 	orr.w	r2, r2, #1
 8012a42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a44:	e008      	b.n	8012a58 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f042 0201 	orr.w	r2, r2, #1
 8012a54:	601a      	str	r2, [r3, #0]
 8012a56:	e000      	b.n	8012a5a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a58:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3710      	adds	r7, #16
 8012a60:	46bd      	mov	sp, r7
 8012a62:	bd80      	pop	{r7, pc}
 8012a64:	40010000 	.word	0x40010000
 8012a68:	40010400 	.word	0x40010400
 8012a6c:	40014000 	.word	0x40014000
 8012a70:	40014400 	.word	0x40014400
 8012a74:	40014800 	.word	0x40014800
 8012a78:	40000400 	.word	0x40000400
 8012a7c:	40000800 	.word	0x40000800
 8012a80:	40000c00 	.word	0x40000c00
 8012a84:	40001800 	.word	0x40001800
 8012a88:	00010007 	.word	0x00010007

08012a8c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	2b0c      	cmp	r3, #12
 8012a9e:	d841      	bhi.n	8012b24 <HAL_TIM_OC_Stop_IT+0x98>
 8012aa0:	a201      	add	r2, pc, #4	; (adr r2, 8012aa8 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa6:	bf00      	nop
 8012aa8:	08012add 	.word	0x08012add
 8012aac:	08012b25 	.word	0x08012b25
 8012ab0:	08012b25 	.word	0x08012b25
 8012ab4:	08012b25 	.word	0x08012b25
 8012ab8:	08012aef 	.word	0x08012aef
 8012abc:	08012b25 	.word	0x08012b25
 8012ac0:	08012b25 	.word	0x08012b25
 8012ac4:	08012b25 	.word	0x08012b25
 8012ac8:	08012b01 	.word	0x08012b01
 8012acc:	08012b25 	.word	0x08012b25
 8012ad0:	08012b25 	.word	0x08012b25
 8012ad4:	08012b25 	.word	0x08012b25
 8012ad8:	08012b13 	.word	0x08012b13
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68da      	ldr	r2, [r3, #12]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f022 0202 	bic.w	r2, r2, #2
 8012aea:	60da      	str	r2, [r3, #12]
      break;
 8012aec:	e01d      	b.n	8012b2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	68da      	ldr	r2, [r3, #12]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f022 0204 	bic.w	r2, r2, #4
 8012afc:	60da      	str	r2, [r3, #12]
      break;
 8012afe:	e014      	b.n	8012b2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68da      	ldr	r2, [r3, #12]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f022 0208 	bic.w	r2, r2, #8
 8012b0e:	60da      	str	r2, [r3, #12]
      break;
 8012b10:	e00b      	b.n	8012b2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	68da      	ldr	r2, [r3, #12]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f022 0210 	bic.w	r2, r2, #16
 8012b20:	60da      	str	r2, [r3, #12]
      break;
 8012b22:	e002      	b.n	8012b2a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012b24:	2301      	movs	r3, #1
 8012b26:	73fb      	strb	r3, [r7, #15]
      break;
 8012b28:	bf00      	nop
  }

  if (status == HAL_OK)
 8012b2a:	7bfb      	ldrb	r3, [r7, #15]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f040 8081 	bne.w	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2200      	movs	r2, #0
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f001 f836 	bl	8013bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	4a3e      	ldr	r2, [pc, #248]	; (8012c40 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012b46:	4293      	cmp	r3, r2
 8012b48:	d013      	beq.n	8012b72 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a3d      	ldr	r2, [pc, #244]	; (8012c44 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d00e      	beq.n	8012b72 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a3b      	ldr	r2, [pc, #236]	; (8012c48 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d009      	beq.n	8012b72 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a3a      	ldr	r2, [pc, #232]	; (8012c4c <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d004      	beq.n	8012b72 <HAL_TIM_OC_Stop_IT+0xe6>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a38      	ldr	r2, [pc, #224]	; (8012c50 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d101      	bne.n	8012b76 <HAL_TIM_OC_Stop_IT+0xea>
 8012b72:	2301      	movs	r3, #1
 8012b74:	e000      	b.n	8012b78 <HAL_TIM_OC_Stop_IT+0xec>
 8012b76:	2300      	movs	r3, #0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d017      	beq.n	8012bac <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6a1a      	ldr	r2, [r3, #32]
 8012b82:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b86:	4013      	ands	r3, r2
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d10f      	bne.n	8012bac <HAL_TIM_OC_Stop_IT+0x120>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	6a1a      	ldr	r2, [r3, #32]
 8012b92:	f240 4344 	movw	r3, #1092	; 0x444
 8012b96:	4013      	ands	r3, r2
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d107      	bne.n	8012bac <HAL_TIM_OC_Stop_IT+0x120>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012baa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	6a1a      	ldr	r2, [r3, #32]
 8012bb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d10f      	bne.n	8012bdc <HAL_TIM_OC_Stop_IT+0x150>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	6a1a      	ldr	r2, [r3, #32]
 8012bc2:	f240 4344 	movw	r3, #1092	; 0x444
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d107      	bne.n	8012bdc <HAL_TIM_OC_Stop_IT+0x150>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f022 0201 	bic.w	r2, r2, #1
 8012bda:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d104      	bne.n	8012bec <HAL_TIM_OC_Stop_IT+0x160>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2201      	movs	r2, #1
 8012be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bea:	e023      	b.n	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2b04      	cmp	r3, #4
 8012bf0:	d104      	bne.n	8012bfc <HAL_TIM_OC_Stop_IT+0x170>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bfa:	e01b      	b.n	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	2b08      	cmp	r3, #8
 8012c00:	d104      	bne.n	8012c0c <HAL_TIM_OC_Stop_IT+0x180>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c0a:	e013      	b.n	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	2b0c      	cmp	r3, #12
 8012c10:	d104      	bne.n	8012c1c <HAL_TIM_OC_Stop_IT+0x190>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c1a:	e00b      	b.n	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	2b10      	cmp	r3, #16
 8012c20:	d104      	bne.n	8012c2c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2201      	movs	r2, #1
 8012c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c2a:	e003      	b.n	8012c34 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	40010000 	.word	0x40010000
 8012c44:	40010400 	.word	0x40010400
 8012c48:	40014000 	.word	0x40014000
 8012c4c:	40014400 	.word	0x40014400
 8012c50:	40014800 	.word	0x40014800

08012c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d101      	bne.n	8012c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012c62:	2301      	movs	r3, #1
 8012c64:	e049      	b.n	8012cfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d106      	bne.n	8012c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2200      	movs	r2, #0
 8012c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 f841 	bl	8012d02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2202      	movs	r2, #2
 8012c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	3304      	adds	r3, #4
 8012c90:	4619      	mov	r1, r3
 8012c92:	4610      	mov	r0, r2
 8012c94:	f000 fb70 	bl	8013378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2201      	movs	r2, #1
 8012cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2201      	movs	r2, #1
 8012cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012cf8:	2300      	movs	r3, #0
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3708      	adds	r7, #8
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012d02:	b480      	push	{r7}
 8012d04:	b083      	sub	sp, #12
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012d0a:	bf00      	nop
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	691b      	ldr	r3, [r3, #16]
 8012d2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	f003 0302 	and.w	r3, r3, #2
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d020      	beq.n	8012d7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f003 0302 	and.w	r3, r3, #2
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d01b      	beq.n	8012d7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f06f 0202 	mvn.w	r2, #2
 8012d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	699b      	ldr	r3, [r3, #24]
 8012d58:	f003 0303 	and.w	r3, r3, #3
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d003      	beq.n	8012d68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f000 faeb 	bl	801333c <HAL_TIM_IC_CaptureCallback>
 8012d66:	e005      	b.n	8012d74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ef fee1 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f000 faee 	bl	8013350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2200      	movs	r2, #0
 8012d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	f003 0304 	and.w	r3, r3, #4
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d020      	beq.n	8012dc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	f003 0304 	and.w	r3, r3, #4
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d01b      	beq.n	8012dc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f06f 0204 	mvn.w	r2, #4
 8012d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2202      	movs	r2, #2
 8012d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	699b      	ldr	r3, [r3, #24]
 8012da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d003      	beq.n	8012db4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 fac5 	bl	801333c <HAL_TIM_IC_CaptureCallback>
 8012db2:	e005      	b.n	8012dc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ef febb 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 fac8 	bl	8013350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	f003 0308 	and.w	r3, r3, #8
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d020      	beq.n	8012e12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f003 0308 	and.w	r3, r3, #8
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d01b      	beq.n	8012e12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f06f 0208 	mvn.w	r2, #8
 8012de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2204      	movs	r2, #4
 8012de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	69db      	ldr	r3, [r3, #28]
 8012df0:	f003 0303 	and.w	r3, r3, #3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d003      	beq.n	8012e00 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f000 fa9f 	bl	801333c <HAL_TIM_IC_CaptureCallback>
 8012dfe:	e005      	b.n	8012e0c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f7ef fe95 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 faa2 	bl	8013350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	f003 0310 	and.w	r3, r3, #16
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d020      	beq.n	8012e5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f003 0310 	and.w	r3, r3, #16
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d01b      	beq.n	8012e5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f06f 0210 	mvn.w	r2, #16
 8012e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2208      	movs	r2, #8
 8012e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	69db      	ldr	r3, [r3, #28]
 8012e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d003      	beq.n	8012e4c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 fa79 	bl	801333c <HAL_TIM_IC_CaptureCallback>
 8012e4a:	e005      	b.n	8012e58 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ef fe6f 	bl	8002b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fa7c 	bl	8013350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	f003 0301 	and.w	r3, r3, #1
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d00c      	beq.n	8012e82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d007      	beq.n	8012e82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	f06f 0201 	mvn.w	r2, #1
 8012e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f7f0 fce1 	bl	8003844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d104      	bne.n	8012e96 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00c      	beq.n	8012eb0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d007      	beq.n	8012eb0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 ffba 	bl	8013e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d00c      	beq.n	8012ed4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d007      	beq.n	8012ed4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f000 ffb2 	bl	8013e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00c      	beq.n	8012ef8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d007      	beq.n	8012ef8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fa36 	bl	8013364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	f003 0320 	and.w	r3, r3, #32
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d00c      	beq.n	8012f1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f003 0320 	and.w	r3, r3, #32
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d007      	beq.n	8012f1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	f06f 0220 	mvn.w	r2, #32
 8012f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f000 ff7a 	bl	8013e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012f1c:	bf00      	nop
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f30:	2300      	movs	r3, #0
 8012f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d101      	bne.n	8012f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012f3e:	2302      	movs	r3, #2
 8012f40:	e0ff      	b.n	8013142 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2201      	movs	r2, #1
 8012f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b14      	cmp	r3, #20
 8012f4e:	f200 80f0 	bhi.w	8013132 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012f52:	a201      	add	r2, pc, #4	; (adr r2, 8012f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f58:	08012fad 	.word	0x08012fad
 8012f5c:	08013133 	.word	0x08013133
 8012f60:	08013133 	.word	0x08013133
 8012f64:	08013133 	.word	0x08013133
 8012f68:	08012fed 	.word	0x08012fed
 8012f6c:	08013133 	.word	0x08013133
 8012f70:	08013133 	.word	0x08013133
 8012f74:	08013133 	.word	0x08013133
 8012f78:	0801302f 	.word	0x0801302f
 8012f7c:	08013133 	.word	0x08013133
 8012f80:	08013133 	.word	0x08013133
 8012f84:	08013133 	.word	0x08013133
 8012f88:	0801306f 	.word	0x0801306f
 8012f8c:	08013133 	.word	0x08013133
 8012f90:	08013133 	.word	0x08013133
 8012f94:	08013133 	.word	0x08013133
 8012f98:	080130b1 	.word	0x080130b1
 8012f9c:	08013133 	.word	0x08013133
 8012fa0:	08013133 	.word	0x08013133
 8012fa4:	08013133 	.word	0x08013133
 8012fa8:	080130f1 	.word	0x080130f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	68b9      	ldr	r1, [r7, #8]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f000 fa86 	bl	80134c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	699a      	ldr	r2, [r3, #24]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f042 0208 	orr.w	r2, r2, #8
 8012fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	699a      	ldr	r2, [r3, #24]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f022 0204 	bic.w	r2, r2, #4
 8012fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	6999      	ldr	r1, [r3, #24]
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	691a      	ldr	r2, [r3, #16]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	430a      	orrs	r2, r1
 8012fe8:	619a      	str	r2, [r3, #24]
      break;
 8012fea:	e0a5      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68b9      	ldr	r1, [r7, #8]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f000 faf6 	bl	80135e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	699a      	ldr	r2, [r3, #24]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	699a      	ldr	r2, [r3, #24]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	6999      	ldr	r1, [r3, #24]
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	021a      	lsls	r2, r3, #8
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	430a      	orrs	r2, r1
 801302a:	619a      	str	r2, [r3, #24]
      break;
 801302c:	e084      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	68b9      	ldr	r1, [r7, #8]
 8013034:	4618      	mov	r0, r3
 8013036:	f000 fb5f 	bl	80136f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	69da      	ldr	r2, [r3, #28]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f042 0208 	orr.w	r2, r2, #8
 8013048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	69da      	ldr	r2, [r3, #28]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f022 0204 	bic.w	r2, r2, #4
 8013058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	69d9      	ldr	r1, [r3, #28]
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	691a      	ldr	r2, [r3, #16]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	430a      	orrs	r2, r1
 801306a:	61da      	str	r2, [r3, #28]
      break;
 801306c:	e064      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	68b9      	ldr	r1, [r7, #8]
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fbc7 	bl	8013808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	69da      	ldr	r2, [r3, #28]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	69da      	ldr	r2, [r3, #28]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	69d9      	ldr	r1, [r3, #28]
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	691b      	ldr	r3, [r3, #16]
 80130a4:	021a      	lsls	r2, r3, #8
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	430a      	orrs	r2, r1
 80130ac:	61da      	str	r2, [r3, #28]
      break;
 80130ae:	e043      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	68b9      	ldr	r1, [r7, #8]
 80130b6:	4618      	mov	r0, r3
 80130b8:	f000 fc10 	bl	80138dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f042 0208 	orr.w	r2, r2, #8
 80130ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f022 0204 	bic.w	r2, r2, #4
 80130da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	691a      	ldr	r2, [r3, #16]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	430a      	orrs	r2, r1
 80130ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80130ee:	e023      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	68b9      	ldr	r1, [r7, #8]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f000 fc54 	bl	80139a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801310a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801311a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	021a      	lsls	r2, r3, #8
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	430a      	orrs	r2, r1
 801312e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013130:	e002      	b.n	8013138 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013132:	2301      	movs	r3, #1
 8013134:	75fb      	strb	r3, [r7, #23]
      break;
 8013136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2200      	movs	r2, #0
 801313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013140:	7dfb      	ldrb	r3, [r7, #23]
}
 8013142:	4618      	mov	r0, r3
 8013144:	3718      	adds	r7, #24
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop

0801314c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013156:	2300      	movs	r3, #0
 8013158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013160:	2b01      	cmp	r3, #1
 8013162:	d101      	bne.n	8013168 <HAL_TIM_ConfigClockSource+0x1c>
 8013164:	2302      	movs	r3, #2
 8013166:	e0dc      	b.n	8013322 <HAL_TIM_ConfigClockSource+0x1d6>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2202      	movs	r2, #2
 8013174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013180:	68ba      	ldr	r2, [r7, #8]
 8013182:	4b6a      	ldr	r3, [pc, #424]	; (801332c <HAL_TIM_ConfigClockSource+0x1e0>)
 8013184:	4013      	ands	r3, r2
 8013186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801318e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4a64      	ldr	r2, [pc, #400]	; (8013330 <HAL_TIM_ConfigClockSource+0x1e4>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	f000 80a9 	beq.w	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80131a4:	4a62      	ldr	r2, [pc, #392]	; (8013330 <HAL_TIM_ConfigClockSource+0x1e4>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	f200 80ae 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131ac:	4a61      	ldr	r2, [pc, #388]	; (8013334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	f000 80a1 	beq.w	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80131b4:	4a5f      	ldr	r2, [pc, #380]	; (8013334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	f200 80a6 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131bc:	4a5e      	ldr	r2, [pc, #376]	; (8013338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	f000 8099 	beq.w	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80131c4:	4a5c      	ldr	r2, [pc, #368]	; (8013338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	f200 809e 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80131d0:	f000 8091 	beq.w	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80131d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80131d8:	f200 8096 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131e0:	f000 8089 	beq.w	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80131e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131e8:	f200 808e 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80131f0:	d03e      	beq.n	8013270 <HAL_TIM_ConfigClockSource+0x124>
 80131f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80131f6:	f200 8087 	bhi.w	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 80131fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131fe:	f000 8086 	beq.w	801330e <HAL_TIM_ConfigClockSource+0x1c2>
 8013202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013206:	d87f      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013208:	2b70      	cmp	r3, #112	; 0x70
 801320a:	d01a      	beq.n	8013242 <HAL_TIM_ConfigClockSource+0xf6>
 801320c:	2b70      	cmp	r3, #112	; 0x70
 801320e:	d87b      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013210:	2b60      	cmp	r3, #96	; 0x60
 8013212:	d050      	beq.n	80132b6 <HAL_TIM_ConfigClockSource+0x16a>
 8013214:	2b60      	cmp	r3, #96	; 0x60
 8013216:	d877      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013218:	2b50      	cmp	r3, #80	; 0x50
 801321a:	d03c      	beq.n	8013296 <HAL_TIM_ConfigClockSource+0x14a>
 801321c:	2b50      	cmp	r3, #80	; 0x50
 801321e:	d873      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013220:	2b40      	cmp	r3, #64	; 0x40
 8013222:	d058      	beq.n	80132d6 <HAL_TIM_ConfigClockSource+0x18a>
 8013224:	2b40      	cmp	r3, #64	; 0x40
 8013226:	d86f      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013228:	2b30      	cmp	r3, #48	; 0x30
 801322a:	d064      	beq.n	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 801322c:	2b30      	cmp	r3, #48	; 0x30
 801322e:	d86b      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013230:	2b20      	cmp	r3, #32
 8013232:	d060      	beq.n	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013234:	2b20      	cmp	r3, #32
 8013236:	d867      	bhi.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
 8013238:	2b00      	cmp	r3, #0
 801323a:	d05c      	beq.n	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 801323c:	2b10      	cmp	r3, #16
 801323e:	d05a      	beq.n	80132f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8013240:	e062      	b.n	8013308 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6818      	ldr	r0, [r3, #0]
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	6899      	ldr	r1, [r3, #8]
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	f000 fc8b 	bl	8013b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	609a      	str	r2, [r3, #8]
      break;
 801326e:	e04f      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	6899      	ldr	r1, [r3, #8]
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	685a      	ldr	r2, [r3, #4]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	f000 fc74 	bl	8013b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	689a      	ldr	r2, [r3, #8]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013292:	609a      	str	r2, [r3, #8]
      break;
 8013294:	e03c      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6818      	ldr	r0, [r3, #0]
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	6859      	ldr	r1, [r3, #4]
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	461a      	mov	r2, r3
 80132a4:	f000 fbe4 	bl	8013a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2150      	movs	r1, #80	; 0x50
 80132ae:	4618      	mov	r0, r3
 80132b0:	f000 fc3e 	bl	8013b30 <TIM_ITRx_SetConfig>
      break;
 80132b4:	e02c      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6818      	ldr	r0, [r3, #0]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	6859      	ldr	r1, [r3, #4]
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	461a      	mov	r2, r3
 80132c4:	f000 fc03 	bl	8013ace <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	2160      	movs	r1, #96	; 0x60
 80132ce:	4618      	mov	r0, r3
 80132d0:	f000 fc2e 	bl	8013b30 <TIM_ITRx_SetConfig>
      break;
 80132d4:	e01c      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	6859      	ldr	r1, [r3, #4]
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	461a      	mov	r2, r3
 80132e4:	f000 fbc4 	bl	8013a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2140      	movs	r1, #64	; 0x40
 80132ee:	4618      	mov	r0, r3
 80132f0:	f000 fc1e 	bl	8013b30 <TIM_ITRx_SetConfig>
      break;
 80132f4:	e00c      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	4619      	mov	r1, r3
 8013300:	4610      	mov	r0, r2
 8013302:	f000 fc15 	bl	8013b30 <TIM_ITRx_SetConfig>
      break;
 8013306:	e003      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013308:	2301      	movs	r3, #1
 801330a:	73fb      	strb	r3, [r7, #15]
      break;
 801330c:	e000      	b.n	8013310 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801330e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2201      	movs	r2, #1
 8013314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2200      	movs	r2, #0
 801331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013320:	7bfb      	ldrb	r3, [r7, #15]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	ffceff88 	.word	0xffceff88
 8013330:	00100040 	.word	0x00100040
 8013334:	00100030 	.word	0x00100030
 8013338:	00100020 	.word	0x00100020

0801333c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013344:	bf00      	nop
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr

08013350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013350:	b480      	push	{r7}
 8013352:	b083      	sub	sp, #12
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013358:	bf00      	nop
 801335a:	370c      	adds	r7, #12
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013364:	b480      	push	{r7}
 8013366:	b083      	sub	sp, #12
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801336c:	bf00      	nop
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013378:	b480      	push	{r7}
 801337a:	b085      	sub	sp, #20
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	4a46      	ldr	r2, [pc, #280]	; (80134a4 <TIM_Base_SetConfig+0x12c>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d013      	beq.n	80133b8 <TIM_Base_SetConfig+0x40>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013396:	d00f      	beq.n	80133b8 <TIM_Base_SetConfig+0x40>
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	4a43      	ldr	r2, [pc, #268]	; (80134a8 <TIM_Base_SetConfig+0x130>)
 801339c:	4293      	cmp	r3, r2
 801339e:	d00b      	beq.n	80133b8 <TIM_Base_SetConfig+0x40>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	4a42      	ldr	r2, [pc, #264]	; (80134ac <TIM_Base_SetConfig+0x134>)
 80133a4:	4293      	cmp	r3, r2
 80133a6:	d007      	beq.n	80133b8 <TIM_Base_SetConfig+0x40>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4a41      	ldr	r2, [pc, #260]	; (80134b0 <TIM_Base_SetConfig+0x138>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d003      	beq.n	80133b8 <TIM_Base_SetConfig+0x40>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4a40      	ldr	r2, [pc, #256]	; (80134b4 <TIM_Base_SetConfig+0x13c>)
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d108      	bne.n	80133ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	4313      	orrs	r3, r2
 80133c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4a35      	ldr	r2, [pc, #212]	; (80134a4 <TIM_Base_SetConfig+0x12c>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d01f      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133d8:	d01b      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	4a32      	ldr	r2, [pc, #200]	; (80134a8 <TIM_Base_SetConfig+0x130>)
 80133de:	4293      	cmp	r3, r2
 80133e0:	d017      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4a31      	ldr	r2, [pc, #196]	; (80134ac <TIM_Base_SetConfig+0x134>)
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d013      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4a30      	ldr	r2, [pc, #192]	; (80134b0 <TIM_Base_SetConfig+0x138>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d00f      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4a2f      	ldr	r2, [pc, #188]	; (80134b4 <TIM_Base_SetConfig+0x13c>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d00b      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	4a2e      	ldr	r2, [pc, #184]	; (80134b8 <TIM_Base_SetConfig+0x140>)
 80133fe:	4293      	cmp	r3, r2
 8013400:	d007      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4a2d      	ldr	r2, [pc, #180]	; (80134bc <TIM_Base_SetConfig+0x144>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d003      	beq.n	8013412 <TIM_Base_SetConfig+0x9a>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	4a2c      	ldr	r2, [pc, #176]	; (80134c0 <TIM_Base_SetConfig+0x148>)
 801340e:	4293      	cmp	r3, r2
 8013410:	d108      	bne.n	8013424 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	4313      	orrs	r3, r2
 8013422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	695b      	ldr	r3, [r3, #20]
 801342e:	4313      	orrs	r3, r2
 8013430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	68fa      	ldr	r2, [r7, #12]
 8013436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	689a      	ldr	r2, [r3, #8]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4a16      	ldr	r2, [pc, #88]	; (80134a4 <TIM_Base_SetConfig+0x12c>)
 801344c:	4293      	cmp	r3, r2
 801344e:	d00f      	beq.n	8013470 <TIM_Base_SetConfig+0xf8>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	4a18      	ldr	r2, [pc, #96]	; (80134b4 <TIM_Base_SetConfig+0x13c>)
 8013454:	4293      	cmp	r3, r2
 8013456:	d00b      	beq.n	8013470 <TIM_Base_SetConfig+0xf8>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	4a17      	ldr	r2, [pc, #92]	; (80134b8 <TIM_Base_SetConfig+0x140>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d007      	beq.n	8013470 <TIM_Base_SetConfig+0xf8>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	4a16      	ldr	r2, [pc, #88]	; (80134bc <TIM_Base_SetConfig+0x144>)
 8013464:	4293      	cmp	r3, r2
 8013466:	d003      	beq.n	8013470 <TIM_Base_SetConfig+0xf8>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4a15      	ldr	r2, [pc, #84]	; (80134c0 <TIM_Base_SetConfig+0x148>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d103      	bne.n	8013478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	691a      	ldr	r2, [r3, #16]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2201      	movs	r2, #1
 801347c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	2b01      	cmp	r3, #1
 8013488:	d105      	bne.n	8013496 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	f023 0201 	bic.w	r2, r3, #1
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	611a      	str	r2, [r3, #16]
  }
}
 8013496:	bf00      	nop
 8013498:	3714      	adds	r7, #20
 801349a:	46bd      	mov	sp, r7
 801349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a0:	4770      	bx	lr
 80134a2:	bf00      	nop
 80134a4:	40010000 	.word	0x40010000
 80134a8:	40000400 	.word	0x40000400
 80134ac:	40000800 	.word	0x40000800
 80134b0:	40000c00 	.word	0x40000c00
 80134b4:	40010400 	.word	0x40010400
 80134b8:	40014000 	.word	0x40014000
 80134bc:	40014400 	.word	0x40014400
 80134c0:	40014800 	.word	0x40014800

080134c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b087      	sub	sp, #28
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6a1b      	ldr	r3, [r3, #32]
 80134d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6a1b      	ldr	r3, [r3, #32]
 80134d8:	f023 0201 	bic.w	r2, r3, #1
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	699b      	ldr	r3, [r3, #24]
 80134ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	4b37      	ldr	r3, [pc, #220]	; (80135cc <TIM_OC1_SetConfig+0x108>)
 80134f0:	4013      	ands	r3, r2
 80134f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f023 0303 	bic.w	r3, r3, #3
 80134fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	68fa      	ldr	r2, [r7, #12]
 8013502:	4313      	orrs	r3, r2
 8013504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	f023 0302 	bic.w	r3, r3, #2
 801350c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	697a      	ldr	r2, [r7, #20]
 8013514:	4313      	orrs	r3, r2
 8013516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	4a2d      	ldr	r2, [pc, #180]	; (80135d0 <TIM_OC1_SetConfig+0x10c>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d00f      	beq.n	8013540 <TIM_OC1_SetConfig+0x7c>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4a2c      	ldr	r2, [pc, #176]	; (80135d4 <TIM_OC1_SetConfig+0x110>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d00b      	beq.n	8013540 <TIM_OC1_SetConfig+0x7c>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4a2b      	ldr	r2, [pc, #172]	; (80135d8 <TIM_OC1_SetConfig+0x114>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d007      	beq.n	8013540 <TIM_OC1_SetConfig+0x7c>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	4a2a      	ldr	r2, [pc, #168]	; (80135dc <TIM_OC1_SetConfig+0x118>)
 8013534:	4293      	cmp	r3, r2
 8013536:	d003      	beq.n	8013540 <TIM_OC1_SetConfig+0x7c>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4a29      	ldr	r2, [pc, #164]	; (80135e0 <TIM_OC1_SetConfig+0x11c>)
 801353c:	4293      	cmp	r3, r2
 801353e:	d10c      	bne.n	801355a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	f023 0308 	bic.w	r3, r3, #8
 8013546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	68db      	ldr	r3, [r3, #12]
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	4313      	orrs	r3, r2
 8013550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	f023 0304 	bic.w	r3, r3, #4
 8013558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4a1c      	ldr	r2, [pc, #112]	; (80135d0 <TIM_OC1_SetConfig+0x10c>)
 801355e:	4293      	cmp	r3, r2
 8013560:	d00f      	beq.n	8013582 <TIM_OC1_SetConfig+0xbe>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4a1b      	ldr	r2, [pc, #108]	; (80135d4 <TIM_OC1_SetConfig+0x110>)
 8013566:	4293      	cmp	r3, r2
 8013568:	d00b      	beq.n	8013582 <TIM_OC1_SetConfig+0xbe>
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	4a1a      	ldr	r2, [pc, #104]	; (80135d8 <TIM_OC1_SetConfig+0x114>)
 801356e:	4293      	cmp	r3, r2
 8013570:	d007      	beq.n	8013582 <TIM_OC1_SetConfig+0xbe>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4a19      	ldr	r2, [pc, #100]	; (80135dc <TIM_OC1_SetConfig+0x118>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d003      	beq.n	8013582 <TIM_OC1_SetConfig+0xbe>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4a18      	ldr	r2, [pc, #96]	; (80135e0 <TIM_OC1_SetConfig+0x11c>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d111      	bne.n	80135a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	695b      	ldr	r3, [r3, #20]
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	4313      	orrs	r3, r2
 801359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	693a      	ldr	r2, [r7, #16]
 80135a2:	4313      	orrs	r3, r2
 80135a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	693a      	ldr	r2, [r7, #16]
 80135aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	68fa      	ldr	r2, [r7, #12]
 80135b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	685a      	ldr	r2, [r3, #4]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	697a      	ldr	r2, [r7, #20]
 80135be:	621a      	str	r2, [r3, #32]
}
 80135c0:	bf00      	nop
 80135c2:	371c      	adds	r7, #28
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr
 80135cc:	fffeff8f 	.word	0xfffeff8f
 80135d0:	40010000 	.word	0x40010000
 80135d4:	40010400 	.word	0x40010400
 80135d8:	40014000 	.word	0x40014000
 80135dc:	40014400 	.word	0x40014400
 80135e0:	40014800 	.word	0x40014800

080135e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b087      	sub	sp, #28
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6a1b      	ldr	r3, [r3, #32]
 80135f8:	f023 0210 	bic.w	r2, r3, #16
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	699b      	ldr	r3, [r3, #24]
 801360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	4b34      	ldr	r3, [pc, #208]	; (80136e0 <TIM_OC2_SetConfig+0xfc>)
 8013610:	4013      	ands	r3, r2
 8013612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801361a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	021b      	lsls	r3, r3, #8
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	4313      	orrs	r3, r2
 8013626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	f023 0320 	bic.w	r3, r3, #32
 801362e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	011b      	lsls	r3, r3, #4
 8013636:	697a      	ldr	r2, [r7, #20]
 8013638:	4313      	orrs	r3, r2
 801363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	4a29      	ldr	r2, [pc, #164]	; (80136e4 <TIM_OC2_SetConfig+0x100>)
 8013640:	4293      	cmp	r3, r2
 8013642:	d003      	beq.n	801364c <TIM_OC2_SetConfig+0x68>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	4a28      	ldr	r2, [pc, #160]	; (80136e8 <TIM_OC2_SetConfig+0x104>)
 8013648:	4293      	cmp	r3, r2
 801364a:	d10d      	bne.n	8013668 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	011b      	lsls	r3, r3, #4
 801365a:	697a      	ldr	r2, [r7, #20]
 801365c:	4313      	orrs	r3, r2
 801365e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4a1e      	ldr	r2, [pc, #120]	; (80136e4 <TIM_OC2_SetConfig+0x100>)
 801366c:	4293      	cmp	r3, r2
 801366e:	d00f      	beq.n	8013690 <TIM_OC2_SetConfig+0xac>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	4a1d      	ldr	r2, [pc, #116]	; (80136e8 <TIM_OC2_SetConfig+0x104>)
 8013674:	4293      	cmp	r3, r2
 8013676:	d00b      	beq.n	8013690 <TIM_OC2_SetConfig+0xac>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	4a1c      	ldr	r2, [pc, #112]	; (80136ec <TIM_OC2_SetConfig+0x108>)
 801367c:	4293      	cmp	r3, r2
 801367e:	d007      	beq.n	8013690 <TIM_OC2_SetConfig+0xac>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	4a1b      	ldr	r2, [pc, #108]	; (80136f0 <TIM_OC2_SetConfig+0x10c>)
 8013684:	4293      	cmp	r3, r2
 8013686:	d003      	beq.n	8013690 <TIM_OC2_SetConfig+0xac>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4a1a      	ldr	r2, [pc, #104]	; (80136f4 <TIM_OC2_SetConfig+0x110>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d113      	bne.n	80136b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801369e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	693a      	ldr	r2, [r7, #16]
 80136a8:	4313      	orrs	r3, r2
 80136aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	699b      	ldr	r3, [r3, #24]
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	693a      	ldr	r2, [r7, #16]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	693a      	ldr	r2, [r7, #16]
 80136bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	68fa      	ldr	r2, [r7, #12]
 80136c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	685a      	ldr	r2, [r3, #4]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	621a      	str	r2, [r3, #32]
}
 80136d2:	bf00      	nop
 80136d4:	371c      	adds	r7, #28
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	feff8fff 	.word	0xfeff8fff
 80136e4:	40010000 	.word	0x40010000
 80136e8:	40010400 	.word	0x40010400
 80136ec:	40014000 	.word	0x40014000
 80136f0:	40014400 	.word	0x40014400
 80136f4:	40014800 	.word	0x40014800

080136f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b087      	sub	sp, #28
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6a1b      	ldr	r3, [r3, #32]
 8013706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6a1b      	ldr	r3, [r3, #32]
 801370c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	69db      	ldr	r3, [r3, #28]
 801371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	4b33      	ldr	r3, [pc, #204]	; (80137f0 <TIM_OC3_SetConfig+0xf8>)
 8013724:	4013      	ands	r3, r2
 8013726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	f023 0303 	bic.w	r3, r3, #3
 801372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	4313      	orrs	r3, r2
 8013738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	021b      	lsls	r3, r3, #8
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	4313      	orrs	r3, r2
 801374c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4a28      	ldr	r2, [pc, #160]	; (80137f4 <TIM_OC3_SetConfig+0xfc>)
 8013752:	4293      	cmp	r3, r2
 8013754:	d003      	beq.n	801375e <TIM_OC3_SetConfig+0x66>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4a27      	ldr	r2, [pc, #156]	; (80137f8 <TIM_OC3_SetConfig+0x100>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d10d      	bne.n	801377a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	021b      	lsls	r3, r3, #8
 801376c:	697a      	ldr	r2, [r7, #20]
 801376e:	4313      	orrs	r3, r2
 8013770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4a1d      	ldr	r2, [pc, #116]	; (80137f4 <TIM_OC3_SetConfig+0xfc>)
 801377e:	4293      	cmp	r3, r2
 8013780:	d00f      	beq.n	80137a2 <TIM_OC3_SetConfig+0xaa>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4a1c      	ldr	r2, [pc, #112]	; (80137f8 <TIM_OC3_SetConfig+0x100>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d00b      	beq.n	80137a2 <TIM_OC3_SetConfig+0xaa>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4a1b      	ldr	r2, [pc, #108]	; (80137fc <TIM_OC3_SetConfig+0x104>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d007      	beq.n	80137a2 <TIM_OC3_SetConfig+0xaa>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a1a      	ldr	r2, [pc, #104]	; (8013800 <TIM_OC3_SetConfig+0x108>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d003      	beq.n	80137a2 <TIM_OC3_SetConfig+0xaa>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4a19      	ldr	r2, [pc, #100]	; (8013804 <TIM_OC3_SetConfig+0x10c>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d113      	bne.n	80137ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80137b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	695b      	ldr	r3, [r3, #20]
 80137b6:	011b      	lsls	r3, r3, #4
 80137b8:	693a      	ldr	r2, [r7, #16]
 80137ba:	4313      	orrs	r3, r2
 80137bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	699b      	ldr	r3, [r3, #24]
 80137c2:	011b      	lsls	r3, r3, #4
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	4313      	orrs	r3, r2
 80137c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	693a      	ldr	r2, [r7, #16]
 80137ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	68fa      	ldr	r2, [r7, #12]
 80137d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	685a      	ldr	r2, [r3, #4]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	697a      	ldr	r2, [r7, #20]
 80137e2:	621a      	str	r2, [r3, #32]
}
 80137e4:	bf00      	nop
 80137e6:	371c      	adds	r7, #28
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr
 80137f0:	fffeff8f 	.word	0xfffeff8f
 80137f4:	40010000 	.word	0x40010000
 80137f8:	40010400 	.word	0x40010400
 80137fc:	40014000 	.word	0x40014000
 8013800:	40014400 	.word	0x40014400
 8013804:	40014800 	.word	0x40014800

08013808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013808:	b480      	push	{r7}
 801380a:	b087      	sub	sp, #28
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6a1b      	ldr	r3, [r3, #32]
 8013816:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6a1b      	ldr	r3, [r3, #32]
 801381c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	69db      	ldr	r3, [r3, #28]
 801382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	4b24      	ldr	r3, [pc, #144]	; (80138c4 <TIM_OC4_SetConfig+0xbc>)
 8013834:	4013      	ands	r3, r2
 8013836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801383e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	021b      	lsls	r3, r3, #8
 8013846:	68fa      	ldr	r2, [r7, #12]
 8013848:	4313      	orrs	r3, r2
 801384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	031b      	lsls	r3, r3, #12
 801385a:	693a      	ldr	r2, [r7, #16]
 801385c:	4313      	orrs	r3, r2
 801385e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4a19      	ldr	r2, [pc, #100]	; (80138c8 <TIM_OC4_SetConfig+0xc0>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d00f      	beq.n	8013888 <TIM_OC4_SetConfig+0x80>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	4a18      	ldr	r2, [pc, #96]	; (80138cc <TIM_OC4_SetConfig+0xc4>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d00b      	beq.n	8013888 <TIM_OC4_SetConfig+0x80>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4a17      	ldr	r2, [pc, #92]	; (80138d0 <TIM_OC4_SetConfig+0xc8>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d007      	beq.n	8013888 <TIM_OC4_SetConfig+0x80>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4a16      	ldr	r2, [pc, #88]	; (80138d4 <TIM_OC4_SetConfig+0xcc>)
 801387c:	4293      	cmp	r3, r2
 801387e:	d003      	beq.n	8013888 <TIM_OC4_SetConfig+0x80>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4a15      	ldr	r2, [pc, #84]	; (80138d8 <TIM_OC4_SetConfig+0xd0>)
 8013884:	4293      	cmp	r3, r2
 8013886:	d109      	bne.n	801389c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	695b      	ldr	r3, [r3, #20]
 8013894:	019b      	lsls	r3, r3, #6
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	4313      	orrs	r3, r2
 801389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	68fa      	ldr	r2, [r7, #12]
 80138a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	685a      	ldr	r2, [r3, #4]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	693a      	ldr	r2, [r7, #16]
 80138b4:	621a      	str	r2, [r3, #32]
}
 80138b6:	bf00      	nop
 80138b8:	371c      	adds	r7, #28
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	feff8fff 	.word	0xfeff8fff
 80138c8:	40010000 	.word	0x40010000
 80138cc:	40010400 	.word	0x40010400
 80138d0:	40014000 	.word	0x40014000
 80138d4:	40014400 	.word	0x40014400
 80138d8:	40014800 	.word	0x40014800

080138dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80138dc:	b480      	push	{r7}
 80138de:	b087      	sub	sp, #28
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a1b      	ldr	r3, [r3, #32]
 80138ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6a1b      	ldr	r3, [r3, #32]
 80138f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013904:	68fa      	ldr	r2, [r7, #12]
 8013906:	4b21      	ldr	r3, [pc, #132]	; (801398c <TIM_OC5_SetConfig+0xb0>)
 8013908:	4013      	ands	r3, r2
 801390a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	4313      	orrs	r3, r2
 8013914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801391c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	041b      	lsls	r3, r3, #16
 8013924:	693a      	ldr	r2, [r7, #16]
 8013926:	4313      	orrs	r3, r2
 8013928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	4a18      	ldr	r2, [pc, #96]	; (8013990 <TIM_OC5_SetConfig+0xb4>)
 801392e:	4293      	cmp	r3, r2
 8013930:	d00f      	beq.n	8013952 <TIM_OC5_SetConfig+0x76>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	4a17      	ldr	r2, [pc, #92]	; (8013994 <TIM_OC5_SetConfig+0xb8>)
 8013936:	4293      	cmp	r3, r2
 8013938:	d00b      	beq.n	8013952 <TIM_OC5_SetConfig+0x76>
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	4a16      	ldr	r2, [pc, #88]	; (8013998 <TIM_OC5_SetConfig+0xbc>)
 801393e:	4293      	cmp	r3, r2
 8013940:	d007      	beq.n	8013952 <TIM_OC5_SetConfig+0x76>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4a15      	ldr	r2, [pc, #84]	; (801399c <TIM_OC5_SetConfig+0xc0>)
 8013946:	4293      	cmp	r3, r2
 8013948:	d003      	beq.n	8013952 <TIM_OC5_SetConfig+0x76>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	4a14      	ldr	r2, [pc, #80]	; (80139a0 <TIM_OC5_SetConfig+0xc4>)
 801394e:	4293      	cmp	r3, r2
 8013950:	d109      	bne.n	8013966 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	695b      	ldr	r3, [r3, #20]
 801395e:	021b      	lsls	r3, r3, #8
 8013960:	697a      	ldr	r2, [r7, #20]
 8013962:	4313      	orrs	r3, r2
 8013964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	697a      	ldr	r2, [r7, #20]
 801396a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	685a      	ldr	r2, [r3, #4]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	693a      	ldr	r2, [r7, #16]
 801397e:	621a      	str	r2, [r3, #32]
}
 8013980:	bf00      	nop
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	fffeff8f 	.word	0xfffeff8f
 8013990:	40010000 	.word	0x40010000
 8013994:	40010400 	.word	0x40010400
 8013998:	40014000 	.word	0x40014000
 801399c:	40014400 	.word	0x40014400
 80139a0:	40014800 	.word	0x40014800

080139a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b087      	sub	sp, #28
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6a1b      	ldr	r3, [r3, #32]
 80139b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6a1b      	ldr	r3, [r3, #32]
 80139b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	4b22      	ldr	r3, [pc, #136]	; (8013a58 <TIM_OC6_SetConfig+0xb4>)
 80139d0:	4013      	ands	r3, r2
 80139d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	021b      	lsls	r3, r3, #8
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	4313      	orrs	r3, r2
 80139de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	051b      	lsls	r3, r3, #20
 80139ee:	693a      	ldr	r2, [r7, #16]
 80139f0:	4313      	orrs	r3, r2
 80139f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4a19      	ldr	r2, [pc, #100]	; (8013a5c <TIM_OC6_SetConfig+0xb8>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d00f      	beq.n	8013a1c <TIM_OC6_SetConfig+0x78>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	4a18      	ldr	r2, [pc, #96]	; (8013a60 <TIM_OC6_SetConfig+0xbc>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d00b      	beq.n	8013a1c <TIM_OC6_SetConfig+0x78>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4a17      	ldr	r2, [pc, #92]	; (8013a64 <TIM_OC6_SetConfig+0xc0>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d007      	beq.n	8013a1c <TIM_OC6_SetConfig+0x78>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	4a16      	ldr	r2, [pc, #88]	; (8013a68 <TIM_OC6_SetConfig+0xc4>)
 8013a10:	4293      	cmp	r3, r2
 8013a12:	d003      	beq.n	8013a1c <TIM_OC6_SetConfig+0x78>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	4a15      	ldr	r2, [pc, #84]	; (8013a6c <TIM_OC6_SetConfig+0xc8>)
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d109      	bne.n	8013a30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	695b      	ldr	r3, [r3, #20]
 8013a28:	029b      	lsls	r3, r3, #10
 8013a2a:	697a      	ldr	r2, [r7, #20]
 8013a2c:	4313      	orrs	r3, r2
 8013a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	697a      	ldr	r2, [r7, #20]
 8013a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	685a      	ldr	r2, [r3, #4]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	693a      	ldr	r2, [r7, #16]
 8013a48:	621a      	str	r2, [r3, #32]
}
 8013a4a:	bf00      	nop
 8013a4c:	371c      	adds	r7, #28
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr
 8013a56:	bf00      	nop
 8013a58:	feff8fff 	.word	0xfeff8fff
 8013a5c:	40010000 	.word	0x40010000
 8013a60:	40010400 	.word	0x40010400
 8013a64:	40014000 	.word	0x40014000
 8013a68:	40014400 	.word	0x40014400
 8013a6c:	40014800 	.word	0x40014800

08013a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b087      	sub	sp, #28
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	f023 0201 	bic.w	r2, r3, #1
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	699b      	ldr	r3, [r3, #24]
 8013a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	011b      	lsls	r3, r3, #4
 8013aa0:	693a      	ldr	r2, [r7, #16]
 8013aa2:	4313      	orrs	r3, r2
 8013aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f023 030a 	bic.w	r3, r3, #10
 8013aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013aae:	697a      	ldr	r2, [r7, #20]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	697a      	ldr	r2, [r7, #20]
 8013ac0:	621a      	str	r2, [r3, #32]
}
 8013ac2:	bf00      	nop
 8013ac4:	371c      	adds	r7, #28
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013acc:	4770      	bx	lr

08013ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ace:	b480      	push	{r7}
 8013ad0:	b087      	sub	sp, #28
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	60f8      	str	r0, [r7, #12]
 8013ad6:	60b9      	str	r1, [r7, #8]
 8013ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6a1b      	ldr	r3, [r3, #32]
 8013ade:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6a1b      	ldr	r3, [r3, #32]
 8013ae4:	f023 0210 	bic.w	r2, r3, #16
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	031b      	lsls	r3, r3, #12
 8013afe:	693a      	ldr	r2, [r7, #16]
 8013b00:	4313      	orrs	r3, r2
 8013b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	011b      	lsls	r3, r3, #4
 8013b10:	697a      	ldr	r2, [r7, #20]
 8013b12:	4313      	orrs	r3, r2
 8013b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	693a      	ldr	r2, [r7, #16]
 8013b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	697a      	ldr	r2, [r7, #20]
 8013b20:	621a      	str	r2, [r3, #32]
}
 8013b22:	bf00      	nop
 8013b24:	371c      	adds	r7, #28
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
	...

08013b30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b30:	b480      	push	{r7}
 8013b32:	b085      	sub	sp, #20
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	689b      	ldr	r3, [r3, #8]
 8013b3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b40:	68fa      	ldr	r2, [r7, #12]
 8013b42:	4b09      	ldr	r3, [pc, #36]	; (8013b68 <TIM_ITRx_SetConfig+0x38>)
 8013b44:	4013      	ands	r3, r2
 8013b46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b48:	683a      	ldr	r2, [r7, #0]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	f043 0307 	orr.w	r3, r3, #7
 8013b52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	68fa      	ldr	r2, [r7, #12]
 8013b58:	609a      	str	r2, [r3, #8]
}
 8013b5a:	bf00      	nop
 8013b5c:	3714      	adds	r7, #20
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop
 8013b68:	ffcfff8f 	.word	0xffcfff8f

08013b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b087      	sub	sp, #28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
 8013b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	021a      	lsls	r2, r3, #8
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	431a      	orrs	r2, r3
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	4313      	orrs	r3, r2
 8013b94:	697a      	ldr	r2, [r7, #20]
 8013b96:	4313      	orrs	r3, r2
 8013b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	697a      	ldr	r2, [r7, #20]
 8013b9e:	609a      	str	r2, [r3, #8]
}
 8013ba0:	bf00      	nop
 8013ba2:	371c      	adds	r7, #28
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b087      	sub	sp, #28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	f003 031f 	and.w	r3, r3, #31
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	6a1a      	ldr	r2, [r3, #32]
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	43db      	mvns	r3, r3
 8013bce:	401a      	ands	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6a1a      	ldr	r2, [r3, #32]
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	f003 031f 	and.w	r3, r3, #31
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	fa01 f303 	lsl.w	r3, r1, r3
 8013be4:	431a      	orrs	r2, r3
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	621a      	str	r2, [r3, #32]
}
 8013bea:	bf00      	nop
 8013bec:	371c      	adds	r7, #28
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr
	...

08013bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d101      	bne.n	8013c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013c0c:	2302      	movs	r3, #2
 8013c0e:	e06d      	b.n	8013cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2201      	movs	r2, #1
 8013c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4a30      	ldr	r2, [pc, #192]	; (8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d004      	beq.n	8013c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a2f      	ldr	r2, [pc, #188]	; (8013cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d108      	bne.n	8013c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	4313      	orrs	r3, r2
 8013c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	4313      	orrs	r3, r2
 8013c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68fa      	ldr	r2, [r7, #12]
 8013c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	4a20      	ldr	r2, [pc, #128]	; (8013cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d022      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c82:	d01d      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	4a1d      	ldr	r2, [pc, #116]	; (8013d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d018      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4a1c      	ldr	r2, [pc, #112]	; (8013d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d013      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4a1a      	ldr	r2, [pc, #104]	; (8013d08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d00e      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4a15      	ldr	r2, [pc, #84]	; (8013cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	d009      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	4a16      	ldr	r2, [pc, #88]	; (8013d0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	d004      	beq.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4a15      	ldr	r2, [pc, #84]	; (8013d10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d10c      	bne.n	8013cda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2201      	movs	r2, #1
 8013cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	40010000 	.word	0x40010000
 8013cfc:	40010400 	.word	0x40010400
 8013d00:	40000400 	.word	0x40000400
 8013d04:	40000800 	.word	0x40000800
 8013d08:	40000c00 	.word	0x40000c00
 8013d0c:	40001800 	.word	0x40001800
 8013d10:	40014000 	.word	0x40014000

08013d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b085      	sub	sp, #20
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d101      	bne.n	8013d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013d2c:	2302      	movs	r3, #2
 8013d2e:	e065      	b.n	8013dfc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2201      	movs	r2, #1
 8013d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	68db      	ldr	r3, [r3, #12]
 8013d42:	4313      	orrs	r3, r2
 8013d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	4313      	orrs	r3, r2
 8013d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	691b      	ldr	r3, [r3, #16]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	695b      	ldr	r3, [r3, #20]
 8013d88:	4313      	orrs	r3, r2
 8013d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d96:	4313      	orrs	r3, r2
 8013d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	699b      	ldr	r3, [r3, #24]
 8013da4:	041b      	lsls	r3, r3, #16
 8013da6:	4313      	orrs	r3, r2
 8013da8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4a16      	ldr	r2, [pc, #88]	; (8013e08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d004      	beq.n	8013dbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a14      	ldr	r2, [pc, #80]	; (8013e0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d115      	bne.n	8013dea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc8:	051b      	lsls	r3, r3, #20
 8013dca:	4313      	orrs	r3, r2
 8013dcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	69db      	ldr	r3, [r3, #28]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	6a1b      	ldr	r3, [r3, #32]
 8013de6:	4313      	orrs	r3, r2
 8013de8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2200      	movs	r2, #0
 8013df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013dfa:	2300      	movs	r3, #0
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3714      	adds	r7, #20
 8013e00:	46bd      	mov	sp, r7
 8013e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e06:	4770      	bx	lr
 8013e08:	40010000 	.word	0x40010000
 8013e0c:	40010400 	.word	0x40010400

08013e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b083      	sub	sp, #12
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013e18:	bf00      	nop
 8013e1a:	370c      	adds	r7, #12
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr

08013e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b083      	sub	sp, #12
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013e2c:	bf00      	nop
 8013e2e:	370c      	adds	r7, #12
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013e40:	bf00      	nop
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e042      	b.n	8013ee4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d106      	bne.n	8013e76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7f1 f989 	bl	8005188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2224      	movs	r2, #36	; 0x24
 8013e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f022 0201 	bic.w	r2, r2, #1
 8013e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d002      	beq.n	8013e9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 fbc2 	bl	8015620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f000 fe57 	bl	8014b50 <UART_SetConfig>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d101      	bne.n	8013eac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e01b      	b.n	8013ee4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	685a      	ldr	r2, [r3, #4]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	689a      	ldr	r2, [r3, #8]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	f042 0201 	orr.w	r2, r2, #1
 8013eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f001 fc41 	bl	8015764 <UART_CheckIdleState>
 8013ee2:	4603      	mov	r3, r0
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b08a      	sub	sp, #40	; 0x28
 8013ef0:	af02      	add	r7, sp, #8
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f02:	2b20      	cmp	r3, #32
 8013f04:	d17b      	bne.n	8013ffe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d002      	beq.n	8013f12 <HAL_UART_Transmit+0x26>
 8013f0c:	88fb      	ldrh	r3, [r7, #6]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	e074      	b.n	8014000 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2221      	movs	r2, #33	; 0x21
 8013f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013f26:	f7f1 fd7d 	bl	8005a24 <HAL_GetTick>
 8013f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	88fa      	ldrh	r2, [r7, #6]
 8013f30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	88fa      	ldrh	r2, [r7, #6]
 8013f38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f44:	d108      	bne.n	8013f58 <HAL_UART_Transmit+0x6c>
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d104      	bne.n	8013f58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	61bb      	str	r3, [r7, #24]
 8013f56:	e003      	b.n	8013f60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013f60:	e030      	b.n	8013fc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	2180      	movs	r1, #128	; 0x80
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f001 fca3 	bl	80158b8 <UART_WaitOnFlagUntilTimeout>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d005      	beq.n	8013f84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2220      	movs	r2, #32
 8013f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013f80:	2303      	movs	r3, #3
 8013f82:	e03d      	b.n	8014000 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d10b      	bne.n	8013fa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	461a      	mov	r2, r3
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013f98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	3302      	adds	r3, #2
 8013f9e:	61bb      	str	r3, [r7, #24]
 8013fa0:	e007      	b.n	8013fb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	781a      	ldrb	r2, [r3, #0]
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	3301      	adds	r3, #1
 8013fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d1c8      	bne.n	8013f62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	9300      	str	r3, [sp, #0]
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	2140      	movs	r1, #64	; 0x40
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	f001 fc6c 	bl	80158b8 <UART_WaitOnFlagUntilTimeout>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d005      	beq.n	8013ff2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2220      	movs	r2, #32
 8013fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013fee:	2303      	movs	r3, #3
 8013ff0:	e006      	b.n	8014000 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2220      	movs	r2, #32
 8013ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	e000      	b.n	8014000 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013ffe:	2302      	movs	r3, #2
  }
}
 8014000:	4618      	mov	r0, r3
 8014002:	3720      	adds	r7, #32
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b08a      	sub	sp, #40	; 0x28
 801400c:	af02      	add	r7, sp, #8
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	603b      	str	r3, [r7, #0]
 8014014:	4613      	mov	r3, r2
 8014016:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801401e:	2b20      	cmp	r3, #32
 8014020:	f040 80b5 	bne.w	801418e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d002      	beq.n	8014030 <HAL_UART_Receive+0x28>
 801402a:	88fb      	ldrh	r3, [r7, #6]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d101      	bne.n	8014034 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014030:	2301      	movs	r3, #1
 8014032:	e0ad      	b.n	8014190 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	2200      	movs	r2, #0
 8014038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2222      	movs	r2, #34	; 0x22
 8014040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2200      	movs	r2, #0
 8014048:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801404a:	f7f1 fceb 	bl	8005a24 <HAL_GetTick>
 801404e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	88fa      	ldrh	r2, [r7, #6]
 8014054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	88fa      	ldrh	r2, [r7, #6]
 801405c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014068:	d10e      	bne.n	8014088 <HAL_UART_Receive+0x80>
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	691b      	ldr	r3, [r3, #16]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d105      	bne.n	801407e <HAL_UART_Receive+0x76>
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801407c:	e02d      	b.n	80140da <HAL_UART_Receive+0xd2>
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	22ff      	movs	r2, #255	; 0xff
 8014082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014086:	e028      	b.n	80140da <HAL_UART_Receive+0xd2>
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	689b      	ldr	r3, [r3, #8]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d10d      	bne.n	80140ac <HAL_UART_Receive+0xa4>
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d104      	bne.n	80140a2 <HAL_UART_Receive+0x9a>
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	22ff      	movs	r2, #255	; 0xff
 801409c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140a0:	e01b      	b.n	80140da <HAL_UART_Receive+0xd2>
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	227f      	movs	r2, #127	; 0x7f
 80140a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140aa:	e016      	b.n	80140da <HAL_UART_Receive+0xd2>
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	689b      	ldr	r3, [r3, #8]
 80140b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80140b4:	d10d      	bne.n	80140d2 <HAL_UART_Receive+0xca>
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	691b      	ldr	r3, [r3, #16]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d104      	bne.n	80140c8 <HAL_UART_Receive+0xc0>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	227f      	movs	r2, #127	; 0x7f
 80140c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140c6:	e008      	b.n	80140da <HAL_UART_Receive+0xd2>
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	223f      	movs	r2, #63	; 0x3f
 80140cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140d0:	e003      	b.n	80140da <HAL_UART_Receive+0xd2>
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2200      	movs	r2, #0
 80140d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140ea:	d108      	bne.n	80140fe <HAL_UART_Receive+0xf6>
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	691b      	ldr	r3, [r3, #16]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d104      	bne.n	80140fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80140f4:	2300      	movs	r3, #0
 80140f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	61bb      	str	r3, [r7, #24]
 80140fc:	e003      	b.n	8014106 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014102:	2300      	movs	r3, #0
 8014104:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014106:	e036      	b.n	8014176 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	2200      	movs	r2, #0
 8014110:	2120      	movs	r1, #32
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f001 fbd0 	bl	80158b8 <UART_WaitOnFlagUntilTimeout>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d005      	beq.n	801412a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2220      	movs	r2, #32
 8014122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014126:	2303      	movs	r3, #3
 8014128:	e032      	b.n	8014190 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d10c      	bne.n	801414a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014136:	b29a      	uxth	r2, r3
 8014138:	8a7b      	ldrh	r3, [r7, #18]
 801413a:	4013      	ands	r3, r2
 801413c:	b29a      	uxth	r2, r3
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	3302      	adds	r3, #2
 8014146:	61bb      	str	r3, [r7, #24]
 8014148:	e00c      	b.n	8014164 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014150:	b2da      	uxtb	r2, r3
 8014152:	8a7b      	ldrh	r3, [r7, #18]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	4013      	ands	r3, r2
 8014158:	b2da      	uxtb	r2, r3
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	3301      	adds	r3, #1
 8014162:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801416a:	b29b      	uxth	r3, r3
 801416c:	3b01      	subs	r3, #1
 801416e:	b29a      	uxth	r2, r3
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801417c:	b29b      	uxth	r3, r3
 801417e:	2b00      	cmp	r3, #0
 8014180:	d1c2      	bne.n	8014108 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2220      	movs	r2, #32
 8014186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801418a:	2300      	movs	r3, #0
 801418c:	e000      	b.n	8014190 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801418e:	2302      	movs	r3, #2
  }
}
 8014190:	4618      	mov	r0, r3
 8014192:	3720      	adds	r7, #32
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08a      	sub	sp, #40	; 0x28
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	4613      	mov	r3, r2
 80141a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141ac:	2b20      	cmp	r3, #32
 80141ae:	d137      	bne.n	8014220 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d002      	beq.n	80141bc <HAL_UART_Receive_IT+0x24>
 80141b6:	88fb      	ldrh	r3, [r7, #6]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d101      	bne.n	80141c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80141bc:	2301      	movs	r3, #1
 80141be:	e030      	b.n	8014222 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	2200      	movs	r2, #0
 80141c4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4a18      	ldr	r2, [pc, #96]	; (801422c <HAL_UART_Receive_IT+0x94>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d01f      	beq.n	8014210 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d018      	beq.n	8014210 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	e853 3f00 	ldrex	r3, [r3]
 80141ea:	613b      	str	r3, [r7, #16]
   return(result);
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80141f2:	627b      	str	r3, [r7, #36]	; 0x24
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	461a      	mov	r2, r3
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	623b      	str	r3, [r7, #32]
 80141fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014200:	69f9      	ldr	r1, [r7, #28]
 8014202:	6a3a      	ldr	r2, [r7, #32]
 8014204:	e841 2300 	strex	r3, r2, [r1]
 8014208:	61bb      	str	r3, [r7, #24]
   return(result);
 801420a:	69bb      	ldr	r3, [r7, #24]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1e6      	bne.n	80141de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014210:	88fb      	ldrh	r3, [r7, #6]
 8014212:	461a      	mov	r2, r3
 8014214:	68b9      	ldr	r1, [r7, #8]
 8014216:	68f8      	ldr	r0, [r7, #12]
 8014218:	f001 fbbc 	bl	8015994 <UART_Start_Receive_IT>
 801421c:	4603      	mov	r3, r0
 801421e:	e000      	b.n	8014222 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014220:	2302      	movs	r3, #2
  }
}
 8014222:	4618      	mov	r0, r3
 8014224:	3728      	adds	r7, #40	; 0x28
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
 801422a:	bf00      	nop
 801422c:	58000c00 	.word	0x58000c00

08014230 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b09a      	sub	sp, #104	; 0x68
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014240:	e853 3f00 	ldrex	r3, [r3]
 8014244:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801424c:	667b      	str	r3, [r7, #100]	; 0x64
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	461a      	mov	r2, r3
 8014254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014256:	657b      	str	r3, [r7, #84]	; 0x54
 8014258:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801425a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801425c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801425e:	e841 2300 	strex	r3, r2, [r1]
 8014262:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014266:	2b00      	cmp	r3, #0
 8014268:	d1e6      	bne.n	8014238 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	3308      	adds	r3, #8
 8014270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014274:	e853 3f00 	ldrex	r3, [r3]
 8014278:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801427c:	4b46      	ldr	r3, [pc, #280]	; (8014398 <HAL_UART_AbortReceive+0x168>)
 801427e:	4013      	ands	r3, r2
 8014280:	663b      	str	r3, [r7, #96]	; 0x60
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	3308      	adds	r3, #8
 8014288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801428a:	643a      	str	r2, [r7, #64]	; 0x40
 801428c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801428e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014292:	e841 2300 	strex	r3, r2, [r1]
 8014296:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429a:	2b00      	cmp	r3, #0
 801429c:	d1e5      	bne.n	801426a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d118      	bne.n	80142d8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ac:	6a3b      	ldr	r3, [r7, #32]
 80142ae:	e853 3f00 	ldrex	r3, [r3]
 80142b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	f023 0310 	bic.w	r3, r3, #16
 80142ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	461a      	mov	r2, r3
 80142c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142cc:	e841 2300 	strex	r3, r2, [r1]
 80142d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80142d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d1e6      	bne.n	80142a6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	689b      	ldr	r3, [r3, #8]
 80142de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142e2:	2b40      	cmp	r3, #64	; 0x40
 80142e4:	d13b      	bne.n	801435e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	3308      	adds	r3, #8
 80142ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	e853 3f00 	ldrex	r3, [r3]
 80142f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	3308      	adds	r3, #8
 8014304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014306:	61ba      	str	r2, [r7, #24]
 8014308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801430a:	6979      	ldr	r1, [r7, #20]
 801430c:	69ba      	ldr	r2, [r7, #24]
 801430e:	e841 2300 	strex	r3, r2, [r1]
 8014312:	613b      	str	r3, [r7, #16]
   return(result);
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d1e5      	bne.n	80142e6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014320:	2b00      	cmp	r3, #0
 8014322:	d01c      	beq.n	801435e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801432a:	2200      	movs	r2, #0
 801432c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014334:	4618      	mov	r0, r3
 8014336:	f7f4 fa63 	bl	8008800 <HAL_DMA_Abort>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d00e      	beq.n	801435e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014346:	4618      	mov	r0, r3
 8014348:	f7f5 fef6 	bl	800a138 <HAL_DMA_GetError>
 801434c:	4603      	mov	r3, r0
 801434e:	2b20      	cmp	r3, #32
 8014350:	d105      	bne.n	801435e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2210      	movs	r2, #16
 8014356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801435a:	2303      	movs	r3, #3
 801435c:	e017      	b.n	801438e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2200      	movs	r2, #0
 8014362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	220f      	movs	r2, #15
 801436c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	699a      	ldr	r2, [r3, #24]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	f042 0208 	orr.w	r2, r2, #8
 801437c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2220      	movs	r2, #32
 8014382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2200      	movs	r2, #0
 801438a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801438c:	2300      	movs	r3, #0
}
 801438e:	4618      	mov	r0, r3
 8014390:	3768      	adds	r7, #104	; 0x68
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	effffffe 	.word	0xeffffffe

0801439c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b0ba      	sub	sp, #232	; 0xe8
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	69db      	ldr	r3, [r3, #28]
 80143aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80143c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80143c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80143ca:	4013      	ands	r3, r2
 80143cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80143d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d11b      	bne.n	8014410 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80143d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143dc:	f003 0320 	and.w	r3, r3, #32
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d015      	beq.n	8014410 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80143e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143e8:	f003 0320 	and.w	r3, r3, #32
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d105      	bne.n	80143fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80143f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80143f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d009      	beq.n	8014410 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 8377 	beq.w	8014af4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	4798      	blx	r3
      }
      return;
 801440e:	e371      	b.n	8014af4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8123 	beq.w	8014660 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801441a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801441e:	4b8d      	ldr	r3, [pc, #564]	; (8014654 <HAL_UART_IRQHandler+0x2b8>)
 8014420:	4013      	ands	r3, r2
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801442a:	4b8b      	ldr	r3, [pc, #556]	; (8014658 <HAL_UART_IRQHandler+0x2bc>)
 801442c:	4013      	ands	r3, r2
 801442e:	2b00      	cmp	r3, #0
 8014430:	f000 8116 	beq.w	8014660 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014438:	f003 0301 	and.w	r3, r3, #1
 801443c:	2b00      	cmp	r3, #0
 801443e:	d011      	beq.n	8014464 <HAL_UART_IRQHandler+0xc8>
 8014440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00b      	beq.n	8014464 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2201      	movs	r2, #1
 8014452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801445a:	f043 0201 	orr.w	r2, r3, #1
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014468:	f003 0302 	and.w	r3, r3, #2
 801446c:	2b00      	cmp	r3, #0
 801446e:	d011      	beq.n	8014494 <HAL_UART_IRQHandler+0xf8>
 8014470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014474:	f003 0301 	and.w	r3, r3, #1
 8014478:	2b00      	cmp	r3, #0
 801447a:	d00b      	beq.n	8014494 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2202      	movs	r2, #2
 8014482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801448a:	f043 0204 	orr.w	r2, r3, #4
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014498:	f003 0304 	and.w	r3, r3, #4
 801449c:	2b00      	cmp	r3, #0
 801449e:	d011      	beq.n	80144c4 <HAL_UART_IRQHandler+0x128>
 80144a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144a4:	f003 0301 	and.w	r3, r3, #1
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d00b      	beq.n	80144c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2204      	movs	r2, #4
 80144b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144ba:	f043 0202 	orr.w	r2, r3, #2
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80144c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144c8:	f003 0308 	and.w	r3, r3, #8
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d017      	beq.n	8014500 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80144d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144d4:	f003 0320 	and.w	r3, r3, #32
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d105      	bne.n	80144e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80144dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80144e0:	4b5c      	ldr	r3, [pc, #368]	; (8014654 <HAL_UART_IRQHandler+0x2b8>)
 80144e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d00b      	beq.n	8014500 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2208      	movs	r2, #8
 80144ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144f6:	f043 0208 	orr.w	r2, r3, #8
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014508:	2b00      	cmp	r3, #0
 801450a:	d012      	beq.n	8014532 <HAL_UART_IRQHandler+0x196>
 801450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00c      	beq.n	8014532 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014528:	f043 0220 	orr.w	r2, r3, #32
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 82dd 	beq.w	8014af8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014542:	f003 0320 	and.w	r3, r3, #32
 8014546:	2b00      	cmp	r3, #0
 8014548:	d013      	beq.n	8014572 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801454e:	f003 0320 	and.w	r3, r3, #32
 8014552:	2b00      	cmp	r3, #0
 8014554:	d105      	bne.n	8014562 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801455e:	2b00      	cmp	r3, #0
 8014560:	d007      	beq.n	8014572 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014566:	2b00      	cmp	r3, #0
 8014568:	d003      	beq.n	8014572 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	689b      	ldr	r3, [r3, #8]
 8014582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014586:	2b40      	cmp	r3, #64	; 0x40
 8014588:	d005      	beq.n	8014596 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801458a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801458e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014592:	2b00      	cmp	r3, #0
 8014594:	d054      	beq.n	8014640 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f001 fb1e 	bl	8015bd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145a6:	2b40      	cmp	r3, #64	; 0x40
 80145a8:	d146      	bne.n	8014638 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3308      	adds	r3, #8
 80145b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80145b8:	e853 3f00 	ldrex	r3, [r3]
 80145bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80145c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80145c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	3308      	adds	r3, #8
 80145d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80145d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80145da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80145e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80145e6:	e841 2300 	strex	r3, r2, [r1]
 80145ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80145ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d1d9      	bne.n	80145aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d017      	beq.n	8014630 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014606:	4a15      	ldr	r2, [pc, #84]	; (801465c <HAL_UART_IRQHandler+0x2c0>)
 8014608:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014610:	4618      	mov	r0, r3
 8014612:	f7f4 fc13 	bl	8008e3c <HAL_DMA_Abort_IT>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d019      	beq.n	8014650 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801462a:	4610      	mov	r0, r2
 801462c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801462e:	e00f      	b.n	8014650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f000 fa77 	bl	8014b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014636:	e00b      	b.n	8014650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f000 fa73 	bl	8014b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801463e:	e007      	b.n	8014650 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f000 fa6f 	bl	8014b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2200      	movs	r2, #0
 801464a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801464e:	e253      	b.n	8014af8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014650:	bf00      	nop
    return;
 8014652:	e251      	b.n	8014af8 <HAL_UART_IRQHandler+0x75c>
 8014654:	10000001 	.word	0x10000001
 8014658:	04000120 	.word	0x04000120
 801465c:	08015ca5 	.word	0x08015ca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014664:	2b01      	cmp	r3, #1
 8014666:	f040 81e7 	bne.w	8014a38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801466e:	f003 0310 	and.w	r3, r3, #16
 8014672:	2b00      	cmp	r3, #0
 8014674:	f000 81e0 	beq.w	8014a38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801467c:	f003 0310 	and.w	r3, r3, #16
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 81d9 	beq.w	8014a38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2210      	movs	r2, #16
 801468c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014698:	2b40      	cmp	r3, #64	; 0x40
 801469a:	f040 8151 	bne.w	8014940 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4a96      	ldr	r2, [pc, #600]	; (8014900 <HAL_UART_IRQHandler+0x564>)
 80146a8:	4293      	cmp	r3, r2
 80146aa:	d068      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4a93      	ldr	r2, [pc, #588]	; (8014904 <HAL_UART_IRQHandler+0x568>)
 80146b6:	4293      	cmp	r3, r2
 80146b8:	d061      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	4a91      	ldr	r2, [pc, #580]	; (8014908 <HAL_UART_IRQHandler+0x56c>)
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d05a      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4a8e      	ldr	r2, [pc, #568]	; (801490c <HAL_UART_IRQHandler+0x570>)
 80146d2:	4293      	cmp	r3, r2
 80146d4:	d053      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4a8c      	ldr	r2, [pc, #560]	; (8014910 <HAL_UART_IRQHandler+0x574>)
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d04c      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4a89      	ldr	r2, [pc, #548]	; (8014914 <HAL_UART_IRQHandler+0x578>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d045      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4a87      	ldr	r2, [pc, #540]	; (8014918 <HAL_UART_IRQHandler+0x57c>)
 80146fc:	4293      	cmp	r3, r2
 80146fe:	d03e      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	4a84      	ldr	r2, [pc, #528]	; (801491c <HAL_UART_IRQHandler+0x580>)
 801470a:	4293      	cmp	r3, r2
 801470c:	d037      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a82      	ldr	r2, [pc, #520]	; (8014920 <HAL_UART_IRQHandler+0x584>)
 8014718:	4293      	cmp	r3, r2
 801471a:	d030      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4a7f      	ldr	r2, [pc, #508]	; (8014924 <HAL_UART_IRQHandler+0x588>)
 8014726:	4293      	cmp	r3, r2
 8014728:	d029      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4a7d      	ldr	r2, [pc, #500]	; (8014928 <HAL_UART_IRQHandler+0x58c>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d022      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4a7a      	ldr	r2, [pc, #488]	; (801492c <HAL_UART_IRQHandler+0x590>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d01b      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a78      	ldr	r2, [pc, #480]	; (8014930 <HAL_UART_IRQHandler+0x594>)
 8014750:	4293      	cmp	r3, r2
 8014752:	d014      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4a75      	ldr	r2, [pc, #468]	; (8014934 <HAL_UART_IRQHandler+0x598>)
 801475e:	4293      	cmp	r3, r2
 8014760:	d00d      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4a73      	ldr	r2, [pc, #460]	; (8014938 <HAL_UART_IRQHandler+0x59c>)
 801476c:	4293      	cmp	r3, r2
 801476e:	d006      	beq.n	801477e <HAL_UART_IRQHandler+0x3e2>
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	4a70      	ldr	r2, [pc, #448]	; (801493c <HAL_UART_IRQHandler+0x5a0>)
 801477a:	4293      	cmp	r3, r2
 801477c:	d106      	bne.n	801478c <HAL_UART_IRQHandler+0x3f0>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	b29b      	uxth	r3, r3
 801478a:	e005      	b.n	8014798 <HAL_UART_IRQHandler+0x3fc>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	b29b      	uxth	r3, r3
 8014798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801479c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f000 81ab 	beq.w	8014afc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80147b0:	429a      	cmp	r2, r3
 80147b2:	f080 81a3 	bcs.w	8014afc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80147bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147c6:	69db      	ldr	r3, [r3, #28]
 80147c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147cc:	f000 8087 	beq.w	80148de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80147dc:	e853 3f00 	ldrex	r3, [r3]
 80147e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80147e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80147e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	461a      	mov	r2, r3
 80147f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80147fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80147fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801480a:	e841 2300 	strex	r3, r2, [r1]
 801480e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1da      	bne.n	80147d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	3308      	adds	r3, #8
 8014820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014824:	e853 3f00 	ldrex	r3, [r3]
 8014828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801482a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801482c:	f023 0301 	bic.w	r3, r3, #1
 8014830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	3308      	adds	r3, #8
 801483a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801483e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801484a:	e841 2300 	strex	r3, r2, [r1]
 801484e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014852:	2b00      	cmp	r3, #0
 8014854:	d1e1      	bne.n	801481a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	3308      	adds	r3, #8
 801485c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801485e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014860:	e853 3f00 	ldrex	r3, [r3]
 8014864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801486c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	3308      	adds	r3, #8
 8014876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801487a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801487c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801487e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014882:	e841 2300 	strex	r3, r2, [r1]
 8014886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801488a:	2b00      	cmp	r3, #0
 801488c:	d1e3      	bne.n	8014856 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2220      	movs	r2, #32
 8014892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2200      	movs	r2, #0
 801489a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148a4:	e853 3f00 	ldrex	r3, [r3]
 80148a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80148aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148ac:	f023 0310 	bic.w	r3, r3, #16
 80148b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	461a      	mov	r2, r3
 80148ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80148be:	65bb      	str	r3, [r7, #88]	; 0x58
 80148c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80148c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80148c6:	e841 2300 	strex	r3, r2, [r1]
 80148ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80148cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1e4      	bne.n	801489c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148d8:	4618      	mov	r0, r3
 80148da:	f7f3 ff91 	bl	8008800 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2202      	movs	r2, #2
 80148e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	1ad3      	subs	r3, r2, r3
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	4619      	mov	r1, r3
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f91d 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80148fe:	e0fd      	b.n	8014afc <HAL_UART_IRQHandler+0x760>
 8014900:	40020010 	.word	0x40020010
 8014904:	40020028 	.word	0x40020028
 8014908:	40020040 	.word	0x40020040
 801490c:	40020058 	.word	0x40020058
 8014910:	40020070 	.word	0x40020070
 8014914:	40020088 	.word	0x40020088
 8014918:	400200a0 	.word	0x400200a0
 801491c:	400200b8 	.word	0x400200b8
 8014920:	40020410 	.word	0x40020410
 8014924:	40020428 	.word	0x40020428
 8014928:	40020440 	.word	0x40020440
 801492c:	40020458 	.word	0x40020458
 8014930:	40020470 	.word	0x40020470
 8014934:	40020488 	.word	0x40020488
 8014938:	400204a0 	.word	0x400204a0
 801493c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801494c:	b29b      	uxth	r3, r3
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801495a:	b29b      	uxth	r3, r3
 801495c:	2b00      	cmp	r3, #0
 801495e:	f000 80cf 	beq.w	8014b00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014966:	2b00      	cmp	r3, #0
 8014968:	f000 80ca 	beq.w	8014b00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014974:	e853 3f00 	ldrex	r3, [r3]
 8014978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801497c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	461a      	mov	r2, r3
 801498a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801498e:	647b      	str	r3, [r7, #68]	; 0x44
 8014990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014996:	e841 2300 	strex	r3, r2, [r1]
 801499a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d1e4      	bne.n	801496c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	3308      	adds	r3, #8
 80149a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	e853 3f00 	ldrex	r3, [r3]
 80149b0:	623b      	str	r3, [r7, #32]
   return(result);
 80149b2:	6a3a      	ldr	r2, [r7, #32]
 80149b4:	4b55      	ldr	r3, [pc, #340]	; (8014b0c <HAL_UART_IRQHandler+0x770>)
 80149b6:	4013      	ands	r3, r2
 80149b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	3308      	adds	r3, #8
 80149c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80149c6:	633a      	str	r2, [r7, #48]	; 0x30
 80149c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149ce:	e841 2300 	strex	r3, r2, [r1]
 80149d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80149d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d1e3      	bne.n	80149a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2220      	movs	r2, #32
 80149de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2200      	movs	r2, #0
 80149e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	e853 3f00 	ldrex	r3, [r3]
 80149fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f023 0310 	bic.w	r3, r3, #16
 8014a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a10:	61fb      	str	r3, [r7, #28]
 8014a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a14:	69b9      	ldr	r1, [r7, #24]
 8014a16:	69fa      	ldr	r2, [r7, #28]
 8014a18:	e841 2300 	strex	r3, r2, [r1]
 8014a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d1e4      	bne.n	80149ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2202      	movs	r2, #2
 8014a28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014a2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014a2e:	4619      	mov	r1, r3
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 f881 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014a36:	e063      	b.n	8014b00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00e      	beq.n	8014a62 <HAL_UART_IRQHandler+0x6c6>
 8014a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d008      	beq.n	8014a62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f001 fe80 	bl	8016760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014a60:	e051      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d014      	beq.n	8014a98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d105      	bne.n	8014a86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d008      	beq.n	8014a98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d03a      	beq.n	8014b04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	4798      	blx	r3
    }
    return;
 8014a96:	e035      	b.n	8014b04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d009      	beq.n	8014ab8 <HAL_UART_IRQHandler+0x71c>
 8014aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d003      	beq.n	8014ab8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f001 f90d 	bl	8015cd0 <UART_EndTransmit_IT>
    return;
 8014ab6:	e026      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d009      	beq.n	8014ad8 <HAL_UART_IRQHandler+0x73c>
 8014ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ac8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d003      	beq.n	8014ad8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f001 fe59 	bl	8016788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ad6:	e016      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d010      	beq.n	8014b06 <HAL_UART_IRQHandler+0x76a>
 8014ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	da0c      	bge.n	8014b06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f001 fe41 	bl	8016774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014af2:	e008      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8014af4:	bf00      	nop
 8014af6:	e006      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8014af8:	bf00      	nop
 8014afa:	e004      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8014afc:	bf00      	nop
 8014afe:	e002      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
      return;
 8014b00:	bf00      	nop
 8014b02:	e000      	b.n	8014b06 <HAL_UART_IRQHandler+0x76a>
    return;
 8014b04:	bf00      	nop
  }
}
 8014b06:	37e8      	adds	r7, #232	; 0xe8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	effffffe 	.word	0xeffffffe

08014b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014b18:	bf00      	nop
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014b2c:	bf00      	nop
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	460b      	mov	r3, r1
 8014b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014b44:	bf00      	nop
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014b54:	b092      	sub	sp, #72	; 0x48
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	689a      	ldr	r2, [r3, #8]
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	431a      	orrs	r2, r3
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	695b      	ldr	r3, [r3, #20]
 8014b6e:	431a      	orrs	r2, r3
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	69db      	ldr	r3, [r3, #28]
 8014b74:	4313      	orrs	r3, r2
 8014b76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	4bbe      	ldr	r3, [pc, #760]	; (8014e78 <UART_SetConfig+0x328>)
 8014b80:	4013      	ands	r3, r2
 8014b82:	697a      	ldr	r2, [r7, #20]
 8014b84:	6812      	ldr	r2, [r2, #0]
 8014b86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014b88:	430b      	orrs	r3, r1
 8014b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	68da      	ldr	r2, [r3, #12]
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	430a      	orrs	r2, r1
 8014ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	699b      	ldr	r3, [r3, #24]
 8014ba6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4ab3      	ldr	r2, [pc, #716]	; (8014e7c <UART_SetConfig+0x32c>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d004      	beq.n	8014bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	689a      	ldr	r2, [r3, #8]
 8014bc2:	4baf      	ldr	r3, [pc, #700]	; (8014e80 <UART_SetConfig+0x330>)
 8014bc4:	4013      	ands	r3, r2
 8014bc6:	697a      	ldr	r2, [r7, #20]
 8014bc8:	6812      	ldr	r2, [r2, #0]
 8014bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014bcc:	430b      	orrs	r3, r1
 8014bce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd6:	f023 010f 	bic.w	r1, r3, #15
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	430a      	orrs	r2, r1
 8014be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4aa6      	ldr	r2, [pc, #664]	; (8014e84 <UART_SetConfig+0x334>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d177      	bne.n	8014ce0 <UART_SetConfig+0x190>
 8014bf0:	4ba5      	ldr	r3, [pc, #660]	; (8014e88 <UART_SetConfig+0x338>)
 8014bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014bf8:	2b28      	cmp	r3, #40	; 0x28
 8014bfa:	d86d      	bhi.n	8014cd8 <UART_SetConfig+0x188>
 8014bfc:	a201      	add	r2, pc, #4	; (adr r2, 8014c04 <UART_SetConfig+0xb4>)
 8014bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c02:	bf00      	nop
 8014c04:	08014ca9 	.word	0x08014ca9
 8014c08:	08014cd9 	.word	0x08014cd9
 8014c0c:	08014cd9 	.word	0x08014cd9
 8014c10:	08014cd9 	.word	0x08014cd9
 8014c14:	08014cd9 	.word	0x08014cd9
 8014c18:	08014cd9 	.word	0x08014cd9
 8014c1c:	08014cd9 	.word	0x08014cd9
 8014c20:	08014cd9 	.word	0x08014cd9
 8014c24:	08014cb1 	.word	0x08014cb1
 8014c28:	08014cd9 	.word	0x08014cd9
 8014c2c:	08014cd9 	.word	0x08014cd9
 8014c30:	08014cd9 	.word	0x08014cd9
 8014c34:	08014cd9 	.word	0x08014cd9
 8014c38:	08014cd9 	.word	0x08014cd9
 8014c3c:	08014cd9 	.word	0x08014cd9
 8014c40:	08014cd9 	.word	0x08014cd9
 8014c44:	08014cb9 	.word	0x08014cb9
 8014c48:	08014cd9 	.word	0x08014cd9
 8014c4c:	08014cd9 	.word	0x08014cd9
 8014c50:	08014cd9 	.word	0x08014cd9
 8014c54:	08014cd9 	.word	0x08014cd9
 8014c58:	08014cd9 	.word	0x08014cd9
 8014c5c:	08014cd9 	.word	0x08014cd9
 8014c60:	08014cd9 	.word	0x08014cd9
 8014c64:	08014cc1 	.word	0x08014cc1
 8014c68:	08014cd9 	.word	0x08014cd9
 8014c6c:	08014cd9 	.word	0x08014cd9
 8014c70:	08014cd9 	.word	0x08014cd9
 8014c74:	08014cd9 	.word	0x08014cd9
 8014c78:	08014cd9 	.word	0x08014cd9
 8014c7c:	08014cd9 	.word	0x08014cd9
 8014c80:	08014cd9 	.word	0x08014cd9
 8014c84:	08014cc9 	.word	0x08014cc9
 8014c88:	08014cd9 	.word	0x08014cd9
 8014c8c:	08014cd9 	.word	0x08014cd9
 8014c90:	08014cd9 	.word	0x08014cd9
 8014c94:	08014cd9 	.word	0x08014cd9
 8014c98:	08014cd9 	.word	0x08014cd9
 8014c9c:	08014cd9 	.word	0x08014cd9
 8014ca0:	08014cd9 	.word	0x08014cd9
 8014ca4:	08014cd1 	.word	0x08014cd1
 8014ca8:	2301      	movs	r3, #1
 8014caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cae:	e222      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cb0:	2304      	movs	r3, #4
 8014cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cb6:	e21e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cb8:	2308      	movs	r3, #8
 8014cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cbe:	e21a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cc0:	2310      	movs	r3, #16
 8014cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cc6:	e216      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cc8:	2320      	movs	r3, #32
 8014cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cce:	e212      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cd0:	2340      	movs	r3, #64	; 0x40
 8014cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cd6:	e20e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014cd8:	2380      	movs	r3, #128	; 0x80
 8014cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014cde:	e20a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4a69      	ldr	r2, [pc, #420]	; (8014e8c <UART_SetConfig+0x33c>)
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	d130      	bne.n	8014d4c <UART_SetConfig+0x1fc>
 8014cea:	4b67      	ldr	r3, [pc, #412]	; (8014e88 <UART_SetConfig+0x338>)
 8014cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cee:	f003 0307 	and.w	r3, r3, #7
 8014cf2:	2b05      	cmp	r3, #5
 8014cf4:	d826      	bhi.n	8014d44 <UART_SetConfig+0x1f4>
 8014cf6:	a201      	add	r2, pc, #4	; (adr r2, 8014cfc <UART_SetConfig+0x1ac>)
 8014cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cfc:	08014d15 	.word	0x08014d15
 8014d00:	08014d1d 	.word	0x08014d1d
 8014d04:	08014d25 	.word	0x08014d25
 8014d08:	08014d2d 	.word	0x08014d2d
 8014d0c:	08014d35 	.word	0x08014d35
 8014d10:	08014d3d 	.word	0x08014d3d
 8014d14:	2300      	movs	r3, #0
 8014d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d1a:	e1ec      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d1c:	2304      	movs	r3, #4
 8014d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d22:	e1e8      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d24:	2308      	movs	r3, #8
 8014d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d2a:	e1e4      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d2c:	2310      	movs	r3, #16
 8014d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d32:	e1e0      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d34:	2320      	movs	r3, #32
 8014d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d3a:	e1dc      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d3c:	2340      	movs	r3, #64	; 0x40
 8014d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d42:	e1d8      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d44:	2380      	movs	r3, #128	; 0x80
 8014d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d4a:	e1d4      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	4a4f      	ldr	r2, [pc, #316]	; (8014e90 <UART_SetConfig+0x340>)
 8014d52:	4293      	cmp	r3, r2
 8014d54:	d130      	bne.n	8014db8 <UART_SetConfig+0x268>
 8014d56:	4b4c      	ldr	r3, [pc, #304]	; (8014e88 <UART_SetConfig+0x338>)
 8014d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d5a:	f003 0307 	and.w	r3, r3, #7
 8014d5e:	2b05      	cmp	r3, #5
 8014d60:	d826      	bhi.n	8014db0 <UART_SetConfig+0x260>
 8014d62:	a201      	add	r2, pc, #4	; (adr r2, 8014d68 <UART_SetConfig+0x218>)
 8014d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d68:	08014d81 	.word	0x08014d81
 8014d6c:	08014d89 	.word	0x08014d89
 8014d70:	08014d91 	.word	0x08014d91
 8014d74:	08014d99 	.word	0x08014d99
 8014d78:	08014da1 	.word	0x08014da1
 8014d7c:	08014da9 	.word	0x08014da9
 8014d80:	2300      	movs	r3, #0
 8014d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d86:	e1b6      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d88:	2304      	movs	r3, #4
 8014d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d8e:	e1b2      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d90:	2308      	movs	r3, #8
 8014d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d96:	e1ae      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014d98:	2310      	movs	r3, #16
 8014d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d9e:	e1aa      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014da0:	2320      	movs	r3, #32
 8014da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014da6:	e1a6      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014da8:	2340      	movs	r3, #64	; 0x40
 8014daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dae:	e1a2      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014db0:	2380      	movs	r3, #128	; 0x80
 8014db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014db6:	e19e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	4a35      	ldr	r2, [pc, #212]	; (8014e94 <UART_SetConfig+0x344>)
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	d130      	bne.n	8014e24 <UART_SetConfig+0x2d4>
 8014dc2:	4b31      	ldr	r3, [pc, #196]	; (8014e88 <UART_SetConfig+0x338>)
 8014dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dc6:	f003 0307 	and.w	r3, r3, #7
 8014dca:	2b05      	cmp	r3, #5
 8014dcc:	d826      	bhi.n	8014e1c <UART_SetConfig+0x2cc>
 8014dce:	a201      	add	r2, pc, #4	; (adr r2, 8014dd4 <UART_SetConfig+0x284>)
 8014dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dd4:	08014ded 	.word	0x08014ded
 8014dd8:	08014df5 	.word	0x08014df5
 8014ddc:	08014dfd 	.word	0x08014dfd
 8014de0:	08014e05 	.word	0x08014e05
 8014de4:	08014e0d 	.word	0x08014e0d
 8014de8:	08014e15 	.word	0x08014e15
 8014dec:	2300      	movs	r3, #0
 8014dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014df2:	e180      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014df4:	2304      	movs	r3, #4
 8014df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dfa:	e17c      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014dfc:	2308      	movs	r3, #8
 8014dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e02:	e178      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e04:	2310      	movs	r3, #16
 8014e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e0a:	e174      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e0c:	2320      	movs	r3, #32
 8014e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e12:	e170      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e14:	2340      	movs	r3, #64	; 0x40
 8014e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1a:	e16c      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e1c:	2380      	movs	r3, #128	; 0x80
 8014e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e22:	e168      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	4a1b      	ldr	r2, [pc, #108]	; (8014e98 <UART_SetConfig+0x348>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d142      	bne.n	8014eb4 <UART_SetConfig+0x364>
 8014e2e:	4b16      	ldr	r3, [pc, #88]	; (8014e88 <UART_SetConfig+0x338>)
 8014e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e32:	f003 0307 	and.w	r3, r3, #7
 8014e36:	2b05      	cmp	r3, #5
 8014e38:	d838      	bhi.n	8014eac <UART_SetConfig+0x35c>
 8014e3a:	a201      	add	r2, pc, #4	; (adr r2, 8014e40 <UART_SetConfig+0x2f0>)
 8014e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e40:	08014e59 	.word	0x08014e59
 8014e44:	08014e61 	.word	0x08014e61
 8014e48:	08014e69 	.word	0x08014e69
 8014e4c:	08014e71 	.word	0x08014e71
 8014e50:	08014e9d 	.word	0x08014e9d
 8014e54:	08014ea5 	.word	0x08014ea5
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5e:	e14a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e60:	2304      	movs	r3, #4
 8014e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e66:	e146      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e68:	2308      	movs	r3, #8
 8014e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e6e:	e142      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e70:	2310      	movs	r3, #16
 8014e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e76:	e13e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014e78:	cfff69f3 	.word	0xcfff69f3
 8014e7c:	58000c00 	.word	0x58000c00
 8014e80:	11fff4ff 	.word	0x11fff4ff
 8014e84:	40011000 	.word	0x40011000
 8014e88:	58024400 	.word	0x58024400
 8014e8c:	40004400 	.word	0x40004400
 8014e90:	40004800 	.word	0x40004800
 8014e94:	40004c00 	.word	0x40004c00
 8014e98:	40005000 	.word	0x40005000
 8014e9c:	2320      	movs	r3, #32
 8014e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ea2:	e128      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014ea4:	2340      	movs	r3, #64	; 0x40
 8014ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eaa:	e124      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014eac:	2380      	movs	r3, #128	; 0x80
 8014eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eb2:	e120      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	4acb      	ldr	r2, [pc, #812]	; (80151e8 <UART_SetConfig+0x698>)
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	d176      	bne.n	8014fac <UART_SetConfig+0x45c>
 8014ebe:	4bcb      	ldr	r3, [pc, #812]	; (80151ec <UART_SetConfig+0x69c>)
 8014ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014ec6:	2b28      	cmp	r3, #40	; 0x28
 8014ec8:	d86c      	bhi.n	8014fa4 <UART_SetConfig+0x454>
 8014eca:	a201      	add	r2, pc, #4	; (adr r2, 8014ed0 <UART_SetConfig+0x380>)
 8014ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed0:	08014f75 	.word	0x08014f75
 8014ed4:	08014fa5 	.word	0x08014fa5
 8014ed8:	08014fa5 	.word	0x08014fa5
 8014edc:	08014fa5 	.word	0x08014fa5
 8014ee0:	08014fa5 	.word	0x08014fa5
 8014ee4:	08014fa5 	.word	0x08014fa5
 8014ee8:	08014fa5 	.word	0x08014fa5
 8014eec:	08014fa5 	.word	0x08014fa5
 8014ef0:	08014f7d 	.word	0x08014f7d
 8014ef4:	08014fa5 	.word	0x08014fa5
 8014ef8:	08014fa5 	.word	0x08014fa5
 8014efc:	08014fa5 	.word	0x08014fa5
 8014f00:	08014fa5 	.word	0x08014fa5
 8014f04:	08014fa5 	.word	0x08014fa5
 8014f08:	08014fa5 	.word	0x08014fa5
 8014f0c:	08014fa5 	.word	0x08014fa5
 8014f10:	08014f85 	.word	0x08014f85
 8014f14:	08014fa5 	.word	0x08014fa5
 8014f18:	08014fa5 	.word	0x08014fa5
 8014f1c:	08014fa5 	.word	0x08014fa5
 8014f20:	08014fa5 	.word	0x08014fa5
 8014f24:	08014fa5 	.word	0x08014fa5
 8014f28:	08014fa5 	.word	0x08014fa5
 8014f2c:	08014fa5 	.word	0x08014fa5
 8014f30:	08014f8d 	.word	0x08014f8d
 8014f34:	08014fa5 	.word	0x08014fa5
 8014f38:	08014fa5 	.word	0x08014fa5
 8014f3c:	08014fa5 	.word	0x08014fa5
 8014f40:	08014fa5 	.word	0x08014fa5
 8014f44:	08014fa5 	.word	0x08014fa5
 8014f48:	08014fa5 	.word	0x08014fa5
 8014f4c:	08014fa5 	.word	0x08014fa5
 8014f50:	08014f95 	.word	0x08014f95
 8014f54:	08014fa5 	.word	0x08014fa5
 8014f58:	08014fa5 	.word	0x08014fa5
 8014f5c:	08014fa5 	.word	0x08014fa5
 8014f60:	08014fa5 	.word	0x08014fa5
 8014f64:	08014fa5 	.word	0x08014fa5
 8014f68:	08014fa5 	.word	0x08014fa5
 8014f6c:	08014fa5 	.word	0x08014fa5
 8014f70:	08014f9d 	.word	0x08014f9d
 8014f74:	2301      	movs	r3, #1
 8014f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f7a:	e0bc      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014f7c:	2304      	movs	r3, #4
 8014f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f82:	e0b8      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014f84:	2308      	movs	r3, #8
 8014f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f8a:	e0b4      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014f8c:	2310      	movs	r3, #16
 8014f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f92:	e0b0      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014f94:	2320      	movs	r3, #32
 8014f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f9a:	e0ac      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014f9c:	2340      	movs	r3, #64	; 0x40
 8014f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fa2:	e0a8      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014fa4:	2380      	movs	r3, #128	; 0x80
 8014fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014faa:	e0a4      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	4a8f      	ldr	r2, [pc, #572]	; (80151f0 <UART_SetConfig+0x6a0>)
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d130      	bne.n	8015018 <UART_SetConfig+0x4c8>
 8014fb6:	4b8d      	ldr	r3, [pc, #564]	; (80151ec <UART_SetConfig+0x69c>)
 8014fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fba:	f003 0307 	and.w	r3, r3, #7
 8014fbe:	2b05      	cmp	r3, #5
 8014fc0:	d826      	bhi.n	8015010 <UART_SetConfig+0x4c0>
 8014fc2:	a201      	add	r2, pc, #4	; (adr r2, 8014fc8 <UART_SetConfig+0x478>)
 8014fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fc8:	08014fe1 	.word	0x08014fe1
 8014fcc:	08014fe9 	.word	0x08014fe9
 8014fd0:	08014ff1 	.word	0x08014ff1
 8014fd4:	08014ff9 	.word	0x08014ff9
 8014fd8:	08015001 	.word	0x08015001
 8014fdc:	08015009 	.word	0x08015009
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fe6:	e086      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014fe8:	2304      	movs	r3, #4
 8014fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fee:	e082      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014ff0:	2308      	movs	r3, #8
 8014ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ff6:	e07e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8014ff8:	2310      	movs	r3, #16
 8014ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ffe:	e07a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015000:	2320      	movs	r3, #32
 8015002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015006:	e076      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015008:	2340      	movs	r3, #64	; 0x40
 801500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801500e:	e072      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015010:	2380      	movs	r3, #128	; 0x80
 8015012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015016:	e06e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	4a75      	ldr	r2, [pc, #468]	; (80151f4 <UART_SetConfig+0x6a4>)
 801501e:	4293      	cmp	r3, r2
 8015020:	d130      	bne.n	8015084 <UART_SetConfig+0x534>
 8015022:	4b72      	ldr	r3, [pc, #456]	; (80151ec <UART_SetConfig+0x69c>)
 8015024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015026:	f003 0307 	and.w	r3, r3, #7
 801502a:	2b05      	cmp	r3, #5
 801502c:	d826      	bhi.n	801507c <UART_SetConfig+0x52c>
 801502e:	a201      	add	r2, pc, #4	; (adr r2, 8015034 <UART_SetConfig+0x4e4>)
 8015030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015034:	0801504d 	.word	0x0801504d
 8015038:	08015055 	.word	0x08015055
 801503c:	0801505d 	.word	0x0801505d
 8015040:	08015065 	.word	0x08015065
 8015044:	0801506d 	.word	0x0801506d
 8015048:	08015075 	.word	0x08015075
 801504c:	2300      	movs	r3, #0
 801504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015052:	e050      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015054:	2304      	movs	r3, #4
 8015056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801505a:	e04c      	b.n	80150f6 <UART_SetConfig+0x5a6>
 801505c:	2308      	movs	r3, #8
 801505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015062:	e048      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015064:	2310      	movs	r3, #16
 8015066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801506a:	e044      	b.n	80150f6 <UART_SetConfig+0x5a6>
 801506c:	2320      	movs	r3, #32
 801506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015072:	e040      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015074:	2340      	movs	r3, #64	; 0x40
 8015076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801507a:	e03c      	b.n	80150f6 <UART_SetConfig+0x5a6>
 801507c:	2380      	movs	r3, #128	; 0x80
 801507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015082:	e038      	b.n	80150f6 <UART_SetConfig+0x5a6>
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4a5b      	ldr	r2, [pc, #364]	; (80151f8 <UART_SetConfig+0x6a8>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d130      	bne.n	80150f0 <UART_SetConfig+0x5a0>
 801508e:	4b57      	ldr	r3, [pc, #348]	; (80151ec <UART_SetConfig+0x69c>)
 8015090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015092:	f003 0307 	and.w	r3, r3, #7
 8015096:	2b05      	cmp	r3, #5
 8015098:	d826      	bhi.n	80150e8 <UART_SetConfig+0x598>
 801509a:	a201      	add	r2, pc, #4	; (adr r2, 80150a0 <UART_SetConfig+0x550>)
 801509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150a0:	080150b9 	.word	0x080150b9
 80150a4:	080150c1 	.word	0x080150c1
 80150a8:	080150c9 	.word	0x080150c9
 80150ac:	080150d1 	.word	0x080150d1
 80150b0:	080150d9 	.word	0x080150d9
 80150b4:	080150e1 	.word	0x080150e1
 80150b8:	2302      	movs	r3, #2
 80150ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150be:	e01a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150c0:	2304      	movs	r3, #4
 80150c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150c6:	e016      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150c8:	2308      	movs	r3, #8
 80150ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ce:	e012      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150d0:	2310      	movs	r3, #16
 80150d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d6:	e00e      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150d8:	2320      	movs	r3, #32
 80150da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150de:	e00a      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150e0:	2340      	movs	r3, #64	; 0x40
 80150e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e6:	e006      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150e8:	2380      	movs	r3, #128	; 0x80
 80150ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ee:	e002      	b.n	80150f6 <UART_SetConfig+0x5a6>
 80150f0:	2380      	movs	r3, #128	; 0x80
 80150f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4a3f      	ldr	r2, [pc, #252]	; (80151f8 <UART_SetConfig+0x6a8>)
 80150fc:	4293      	cmp	r3, r2
 80150fe:	f040 80f8 	bne.w	80152f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015102:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015106:	2b20      	cmp	r3, #32
 8015108:	dc46      	bgt.n	8015198 <UART_SetConfig+0x648>
 801510a:	2b02      	cmp	r3, #2
 801510c:	f2c0 8082 	blt.w	8015214 <UART_SetConfig+0x6c4>
 8015110:	3b02      	subs	r3, #2
 8015112:	2b1e      	cmp	r3, #30
 8015114:	d87e      	bhi.n	8015214 <UART_SetConfig+0x6c4>
 8015116:	a201      	add	r2, pc, #4	; (adr r2, 801511c <UART_SetConfig+0x5cc>)
 8015118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801511c:	0801519f 	.word	0x0801519f
 8015120:	08015215 	.word	0x08015215
 8015124:	080151a7 	.word	0x080151a7
 8015128:	08015215 	.word	0x08015215
 801512c:	08015215 	.word	0x08015215
 8015130:	08015215 	.word	0x08015215
 8015134:	080151b7 	.word	0x080151b7
 8015138:	08015215 	.word	0x08015215
 801513c:	08015215 	.word	0x08015215
 8015140:	08015215 	.word	0x08015215
 8015144:	08015215 	.word	0x08015215
 8015148:	08015215 	.word	0x08015215
 801514c:	08015215 	.word	0x08015215
 8015150:	08015215 	.word	0x08015215
 8015154:	080151c7 	.word	0x080151c7
 8015158:	08015215 	.word	0x08015215
 801515c:	08015215 	.word	0x08015215
 8015160:	08015215 	.word	0x08015215
 8015164:	08015215 	.word	0x08015215
 8015168:	08015215 	.word	0x08015215
 801516c:	08015215 	.word	0x08015215
 8015170:	08015215 	.word	0x08015215
 8015174:	08015215 	.word	0x08015215
 8015178:	08015215 	.word	0x08015215
 801517c:	08015215 	.word	0x08015215
 8015180:	08015215 	.word	0x08015215
 8015184:	08015215 	.word	0x08015215
 8015188:	08015215 	.word	0x08015215
 801518c:	08015215 	.word	0x08015215
 8015190:	08015215 	.word	0x08015215
 8015194:	08015207 	.word	0x08015207
 8015198:	2b40      	cmp	r3, #64	; 0x40
 801519a:	d037      	beq.n	801520c <UART_SetConfig+0x6bc>
 801519c:	e03a      	b.n	8015214 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801519e:	f7fb fc17 	bl	80109d0 <HAL_RCCEx_GetD3PCLK1Freq>
 80151a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80151a4:	e03c      	b.n	8015220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80151a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7fb fc26 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80151b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151b4:	e034      	b.n	8015220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80151b6:	f107 0318 	add.w	r3, r7, #24
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fb fd72 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80151c4:	e02c      	b.n	8015220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80151c6:	4b09      	ldr	r3, [pc, #36]	; (80151ec <UART_SetConfig+0x69c>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	f003 0320 	and.w	r3, r3, #32
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d016      	beq.n	8015200 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80151d2:	4b06      	ldr	r3, [pc, #24]	; (80151ec <UART_SetConfig+0x69c>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	08db      	lsrs	r3, r3, #3
 80151d8:	f003 0303 	and.w	r3, r3, #3
 80151dc:	4a07      	ldr	r2, [pc, #28]	; (80151fc <UART_SetConfig+0x6ac>)
 80151de:	fa22 f303 	lsr.w	r3, r2, r3
 80151e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80151e4:	e01c      	b.n	8015220 <UART_SetConfig+0x6d0>
 80151e6:	bf00      	nop
 80151e8:	40011400 	.word	0x40011400
 80151ec:	58024400 	.word	0x58024400
 80151f0:	40007800 	.word	0x40007800
 80151f4:	40007c00 	.word	0x40007c00
 80151f8:	58000c00 	.word	0x58000c00
 80151fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015200:	4b9d      	ldr	r3, [pc, #628]	; (8015478 <UART_SetConfig+0x928>)
 8015202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015204:	e00c      	b.n	8015220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015206:	4b9d      	ldr	r3, [pc, #628]	; (801547c <UART_SetConfig+0x92c>)
 8015208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801520a:	e009      	b.n	8015220 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801520c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015212:	e005      	b.n	8015220 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015214:	2300      	movs	r3, #0
 8015216:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015218:	2301      	movs	r3, #1
 801521a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801521e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015222:	2b00      	cmp	r3, #0
 8015224:	f000 81de 	beq.w	80155e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801522c:	4a94      	ldr	r2, [pc, #592]	; (8015480 <UART_SetConfig+0x930>)
 801522e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015232:	461a      	mov	r2, r3
 8015234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015236:	fbb3 f3f2 	udiv	r3, r3, r2
 801523a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	685a      	ldr	r2, [r3, #4]
 8015240:	4613      	mov	r3, r2
 8015242:	005b      	lsls	r3, r3, #1
 8015244:	4413      	add	r3, r2
 8015246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015248:	429a      	cmp	r2, r3
 801524a:	d305      	bcc.n	8015258 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015254:	429a      	cmp	r2, r3
 8015256:	d903      	bls.n	8015260 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015258:	2301      	movs	r3, #1
 801525a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801525e:	e1c1      	b.n	80155e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015262:	2200      	movs	r2, #0
 8015264:	60bb      	str	r3, [r7, #8]
 8015266:	60fa      	str	r2, [r7, #12]
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526c:	4a84      	ldr	r2, [pc, #528]	; (8015480 <UART_SetConfig+0x930>)
 801526e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015272:	b29b      	uxth	r3, r3
 8015274:	2200      	movs	r2, #0
 8015276:	603b      	str	r3, [r7, #0]
 8015278:	607a      	str	r2, [r7, #4]
 801527a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801527e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015282:	f7eb f82d 	bl	80002e0 <__aeabi_uldivmod>
 8015286:	4602      	mov	r2, r0
 8015288:	460b      	mov	r3, r1
 801528a:	4610      	mov	r0, r2
 801528c:	4619      	mov	r1, r3
 801528e:	f04f 0200 	mov.w	r2, #0
 8015292:	f04f 0300 	mov.w	r3, #0
 8015296:	020b      	lsls	r3, r1, #8
 8015298:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801529c:	0202      	lsls	r2, r0, #8
 801529e:	6979      	ldr	r1, [r7, #20]
 80152a0:	6849      	ldr	r1, [r1, #4]
 80152a2:	0849      	lsrs	r1, r1, #1
 80152a4:	2000      	movs	r0, #0
 80152a6:	460c      	mov	r4, r1
 80152a8:	4605      	mov	r5, r0
 80152aa:	eb12 0804 	adds.w	r8, r2, r4
 80152ae:	eb43 0905 	adc.w	r9, r3, r5
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	469a      	mov	sl, r3
 80152ba:	4693      	mov	fp, r2
 80152bc:	4652      	mov	r2, sl
 80152be:	465b      	mov	r3, fp
 80152c0:	4640      	mov	r0, r8
 80152c2:	4649      	mov	r1, r9
 80152c4:	f7eb f80c 	bl	80002e0 <__aeabi_uldivmod>
 80152c8:	4602      	mov	r2, r0
 80152ca:	460b      	mov	r3, r1
 80152cc:	4613      	mov	r3, r2
 80152ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80152d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80152d6:	d308      	bcc.n	80152ea <UART_SetConfig+0x79a>
 80152d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80152de:	d204      	bcs.n	80152ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80152e6:	60da      	str	r2, [r3, #12]
 80152e8:	e17c      	b.n	80155e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80152ea:	2301      	movs	r3, #1
 80152ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80152f0:	e178      	b.n	80155e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	69db      	ldr	r3, [r3, #28]
 80152f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80152fa:	f040 80c5 	bne.w	8015488 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80152fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015302:	2b20      	cmp	r3, #32
 8015304:	dc48      	bgt.n	8015398 <UART_SetConfig+0x848>
 8015306:	2b00      	cmp	r3, #0
 8015308:	db7b      	blt.n	8015402 <UART_SetConfig+0x8b2>
 801530a:	2b20      	cmp	r3, #32
 801530c:	d879      	bhi.n	8015402 <UART_SetConfig+0x8b2>
 801530e:	a201      	add	r2, pc, #4	; (adr r2, 8015314 <UART_SetConfig+0x7c4>)
 8015310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015314:	0801539f 	.word	0x0801539f
 8015318:	080153a7 	.word	0x080153a7
 801531c:	08015403 	.word	0x08015403
 8015320:	08015403 	.word	0x08015403
 8015324:	080153af 	.word	0x080153af
 8015328:	08015403 	.word	0x08015403
 801532c:	08015403 	.word	0x08015403
 8015330:	08015403 	.word	0x08015403
 8015334:	080153bf 	.word	0x080153bf
 8015338:	08015403 	.word	0x08015403
 801533c:	08015403 	.word	0x08015403
 8015340:	08015403 	.word	0x08015403
 8015344:	08015403 	.word	0x08015403
 8015348:	08015403 	.word	0x08015403
 801534c:	08015403 	.word	0x08015403
 8015350:	08015403 	.word	0x08015403
 8015354:	080153cf 	.word	0x080153cf
 8015358:	08015403 	.word	0x08015403
 801535c:	08015403 	.word	0x08015403
 8015360:	08015403 	.word	0x08015403
 8015364:	08015403 	.word	0x08015403
 8015368:	08015403 	.word	0x08015403
 801536c:	08015403 	.word	0x08015403
 8015370:	08015403 	.word	0x08015403
 8015374:	08015403 	.word	0x08015403
 8015378:	08015403 	.word	0x08015403
 801537c:	08015403 	.word	0x08015403
 8015380:	08015403 	.word	0x08015403
 8015384:	08015403 	.word	0x08015403
 8015388:	08015403 	.word	0x08015403
 801538c:	08015403 	.word	0x08015403
 8015390:	08015403 	.word	0x08015403
 8015394:	080153f5 	.word	0x080153f5
 8015398:	2b40      	cmp	r3, #64	; 0x40
 801539a:	d02e      	beq.n	80153fa <UART_SetConfig+0x8aa>
 801539c:	e031      	b.n	8015402 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801539e:	f7f9 fb1f 	bl	800e9e0 <HAL_RCC_GetPCLK1Freq>
 80153a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153a4:	e033      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80153a6:	f7f9 fb31 	bl	800ea0c <HAL_RCC_GetPCLK2Freq>
 80153aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80153ac:	e02f      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80153ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fb fb22 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80153b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153bc:	e027      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80153be:	f107 0318 	add.w	r3, r7, #24
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fb fc6e 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153cc:	e01f      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80153ce:	4b2d      	ldr	r3, [pc, #180]	; (8015484 <UART_SetConfig+0x934>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f003 0320 	and.w	r3, r3, #32
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d009      	beq.n	80153ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80153da:	4b2a      	ldr	r3, [pc, #168]	; (8015484 <UART_SetConfig+0x934>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	08db      	lsrs	r3, r3, #3
 80153e0:	f003 0303 	and.w	r3, r3, #3
 80153e4:	4a24      	ldr	r2, [pc, #144]	; (8015478 <UART_SetConfig+0x928>)
 80153e6:	fa22 f303 	lsr.w	r3, r2, r3
 80153ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80153ec:	e00f      	b.n	801540e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80153ee:	4b22      	ldr	r3, [pc, #136]	; (8015478 <UART_SetConfig+0x928>)
 80153f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153f2:	e00c      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80153f4:	4b21      	ldr	r3, [pc, #132]	; (801547c <UART_SetConfig+0x92c>)
 80153f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80153f8:	e009      	b.n	801540e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80153fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80153fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015400:	e005      	b.n	801540e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015402:	2300      	movs	r3, #0
 8015404:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015406:	2301      	movs	r3, #1
 8015408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801540c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015410:	2b00      	cmp	r3, #0
 8015412:	f000 80e7 	beq.w	80155e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801541a:	4a19      	ldr	r2, [pc, #100]	; (8015480 <UART_SetConfig+0x930>)
 801541c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015420:	461a      	mov	r2, r3
 8015422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015424:	fbb3 f3f2 	udiv	r3, r3, r2
 8015428:	005a      	lsls	r2, r3, #1
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	085b      	lsrs	r3, r3, #1
 8015430:	441a      	add	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	fbb2 f3f3 	udiv	r3, r2, r3
 801543a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801543e:	2b0f      	cmp	r3, #15
 8015440:	d916      	bls.n	8015470 <UART_SetConfig+0x920>
 8015442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015448:	d212      	bcs.n	8015470 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801544c:	b29b      	uxth	r3, r3
 801544e:	f023 030f 	bic.w	r3, r3, #15
 8015452:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015456:	085b      	lsrs	r3, r3, #1
 8015458:	b29b      	uxth	r3, r3
 801545a:	f003 0307 	and.w	r3, r3, #7
 801545e:	b29a      	uxth	r2, r3
 8015460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015462:	4313      	orrs	r3, r2
 8015464:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801546c:	60da      	str	r2, [r3, #12]
 801546e:	e0b9      	b.n	80155e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015470:	2301      	movs	r3, #1
 8015472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015476:	e0b5      	b.n	80155e4 <UART_SetConfig+0xa94>
 8015478:	03d09000 	.word	0x03d09000
 801547c:	003d0900 	.word	0x003d0900
 8015480:	0801ad6c 	.word	0x0801ad6c
 8015484:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015488:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801548c:	2b20      	cmp	r3, #32
 801548e:	dc49      	bgt.n	8015524 <UART_SetConfig+0x9d4>
 8015490:	2b00      	cmp	r3, #0
 8015492:	db7c      	blt.n	801558e <UART_SetConfig+0xa3e>
 8015494:	2b20      	cmp	r3, #32
 8015496:	d87a      	bhi.n	801558e <UART_SetConfig+0xa3e>
 8015498:	a201      	add	r2, pc, #4	; (adr r2, 80154a0 <UART_SetConfig+0x950>)
 801549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801549e:	bf00      	nop
 80154a0:	0801552b 	.word	0x0801552b
 80154a4:	08015533 	.word	0x08015533
 80154a8:	0801558f 	.word	0x0801558f
 80154ac:	0801558f 	.word	0x0801558f
 80154b0:	0801553b 	.word	0x0801553b
 80154b4:	0801558f 	.word	0x0801558f
 80154b8:	0801558f 	.word	0x0801558f
 80154bc:	0801558f 	.word	0x0801558f
 80154c0:	0801554b 	.word	0x0801554b
 80154c4:	0801558f 	.word	0x0801558f
 80154c8:	0801558f 	.word	0x0801558f
 80154cc:	0801558f 	.word	0x0801558f
 80154d0:	0801558f 	.word	0x0801558f
 80154d4:	0801558f 	.word	0x0801558f
 80154d8:	0801558f 	.word	0x0801558f
 80154dc:	0801558f 	.word	0x0801558f
 80154e0:	0801555b 	.word	0x0801555b
 80154e4:	0801558f 	.word	0x0801558f
 80154e8:	0801558f 	.word	0x0801558f
 80154ec:	0801558f 	.word	0x0801558f
 80154f0:	0801558f 	.word	0x0801558f
 80154f4:	0801558f 	.word	0x0801558f
 80154f8:	0801558f 	.word	0x0801558f
 80154fc:	0801558f 	.word	0x0801558f
 8015500:	0801558f 	.word	0x0801558f
 8015504:	0801558f 	.word	0x0801558f
 8015508:	0801558f 	.word	0x0801558f
 801550c:	0801558f 	.word	0x0801558f
 8015510:	0801558f 	.word	0x0801558f
 8015514:	0801558f 	.word	0x0801558f
 8015518:	0801558f 	.word	0x0801558f
 801551c:	0801558f 	.word	0x0801558f
 8015520:	08015581 	.word	0x08015581
 8015524:	2b40      	cmp	r3, #64	; 0x40
 8015526:	d02e      	beq.n	8015586 <UART_SetConfig+0xa36>
 8015528:	e031      	b.n	801558e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801552a:	f7f9 fa59 	bl	800e9e0 <HAL_RCC_GetPCLK1Freq>
 801552e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015530:	e033      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015532:	f7f9 fa6b 	bl	800ea0c <HAL_RCC_GetPCLK2Freq>
 8015536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015538:	e02f      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801553a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801553e:	4618      	mov	r0, r3
 8015540:	f7fb fa5c 	bl	80109fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015548:	e027      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801554a:	f107 0318 	add.w	r3, r7, #24
 801554e:	4618      	mov	r0, r3
 8015550:	f7fb fba8 	bl	8010ca4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015558:	e01f      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801555a:	4b2d      	ldr	r3, [pc, #180]	; (8015610 <UART_SetConfig+0xac0>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f003 0320 	and.w	r3, r3, #32
 8015562:	2b00      	cmp	r3, #0
 8015564:	d009      	beq.n	801557a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015566:	4b2a      	ldr	r3, [pc, #168]	; (8015610 <UART_SetConfig+0xac0>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	08db      	lsrs	r3, r3, #3
 801556c:	f003 0303 	and.w	r3, r3, #3
 8015570:	4a28      	ldr	r2, [pc, #160]	; (8015614 <UART_SetConfig+0xac4>)
 8015572:	fa22 f303 	lsr.w	r3, r2, r3
 8015576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015578:	e00f      	b.n	801559a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801557a:	4b26      	ldr	r3, [pc, #152]	; (8015614 <UART_SetConfig+0xac4>)
 801557c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801557e:	e00c      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015580:	4b25      	ldr	r3, [pc, #148]	; (8015618 <UART_SetConfig+0xac8>)
 8015582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015584:	e009      	b.n	801559a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801558a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801558c:	e005      	b.n	801559a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801558e:	2300      	movs	r3, #0
 8015590:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015592:	2301      	movs	r3, #1
 8015594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015598:	bf00      	nop
    }

    if (pclk != 0U)
 801559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801559c:	2b00      	cmp	r3, #0
 801559e:	d021      	beq.n	80155e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155a4:	4a1d      	ldr	r2, [pc, #116]	; (801561c <UART_SetConfig+0xacc>)
 80155a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80155aa:	461a      	mov	r2, r3
 80155ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	085b      	lsrs	r3, r3, #1
 80155b8:	441a      	add	r2, r3
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	fbb2 f3f3 	udiv	r3, r2, r3
 80155c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80155c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155c6:	2b0f      	cmp	r3, #15
 80155c8:	d909      	bls.n	80155de <UART_SetConfig+0xa8e>
 80155ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155d0:	d205      	bcs.n	80155de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80155d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	60da      	str	r2, [r3, #12]
 80155dc:	e002      	b.n	80155e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80155de:	2301      	movs	r3, #1
 80155e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	2201      	movs	r2, #1
 80155e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	2201      	movs	r2, #1
 80155f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	2200      	movs	r2, #0
 80155f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	2200      	movs	r2, #0
 80155fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015600:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015604:	4618      	mov	r0, r3
 8015606:	3748      	adds	r7, #72	; 0x48
 8015608:	46bd      	mov	sp, r7
 801560a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801560e:	bf00      	nop
 8015610:	58024400 	.word	0x58024400
 8015614:	03d09000 	.word	0x03d09000
 8015618:	003d0900 	.word	0x003d0900
 801561c:	0801ad6c 	.word	0x0801ad6c

08015620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015620:	b480      	push	{r7}
 8015622:	b083      	sub	sp, #12
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801562c:	f003 0308 	and.w	r3, r3, #8
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00a      	beq.n	801564a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	430a      	orrs	r2, r1
 8015648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801564e:	f003 0301 	and.w	r3, r3, #1
 8015652:	2b00      	cmp	r3, #0
 8015654:	d00a      	beq.n	801566c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	430a      	orrs	r2, r1
 801566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015670:	f003 0302 	and.w	r3, r3, #2
 8015674:	2b00      	cmp	r3, #0
 8015676:	d00a      	beq.n	801568e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	430a      	orrs	r2, r1
 801568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015692:	f003 0304 	and.w	r3, r3, #4
 8015696:	2b00      	cmp	r3, #0
 8015698:	d00a      	beq.n	80156b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	430a      	orrs	r2, r1
 80156ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156b4:	f003 0310 	and.w	r3, r3, #16
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d00a      	beq.n	80156d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	689b      	ldr	r3, [r3, #8]
 80156c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	430a      	orrs	r2, r1
 80156d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156d6:	f003 0320 	and.w	r3, r3, #32
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00a      	beq.n	80156f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	689b      	ldr	r3, [r3, #8]
 80156e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	430a      	orrs	r2, r1
 80156f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d01a      	beq.n	8015736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	430a      	orrs	r2, r1
 8015714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801571e:	d10a      	bne.n	8015736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	430a      	orrs	r2, r1
 8015734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00a      	beq.n	8015758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	430a      	orrs	r2, r1
 8015756:	605a      	str	r2, [r3, #4]
  }
}
 8015758:	bf00      	nop
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b098      	sub	sp, #96	; 0x60
 8015768:	af02      	add	r7, sp, #8
 801576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2200      	movs	r2, #0
 8015770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015774:	f7f0 f956 	bl	8005a24 <HAL_GetTick>
 8015778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f003 0308 	and.w	r3, r3, #8
 8015784:	2b08      	cmp	r3, #8
 8015786:	d12f      	bne.n	80157e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801578c:	9300      	str	r3, [sp, #0]
 801578e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015790:	2200      	movs	r2, #0
 8015792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f000 f88e 	bl	80158b8 <UART_WaitOnFlagUntilTimeout>
 801579c:	4603      	mov	r3, r0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d022      	beq.n	80157e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157aa:	e853 3f00 	ldrex	r3, [r3]
 80157ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80157b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80157b6:	653b      	str	r3, [r7, #80]	; 0x50
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	461a      	mov	r2, r3
 80157be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157c0:	647b      	str	r3, [r7, #68]	; 0x44
 80157c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80157c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157c8:	e841 2300 	strex	r3, r2, [r1]
 80157cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80157ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d1e6      	bne.n	80157a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2220      	movs	r2, #32
 80157d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80157e4:	2303      	movs	r3, #3
 80157e6:	e063      	b.n	80158b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f003 0304 	and.w	r3, r3, #4
 80157f2:	2b04      	cmp	r3, #4
 80157f4:	d149      	bne.n	801588a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80157f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157fe:	2200      	movs	r2, #0
 8015800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f000 f857 	bl	80158b8 <UART_WaitOnFlagUntilTimeout>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d03c      	beq.n	801588a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015818:	e853 3f00 	ldrex	r3, [r3]
 801581c:	623b      	str	r3, [r7, #32]
   return(result);
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	461a      	mov	r2, r3
 801582c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801582e:	633b      	str	r3, [r7, #48]	; 0x30
 8015830:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015836:	e841 2300 	strex	r3, r2, [r1]
 801583a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1e6      	bne.n	8015810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	3308      	adds	r3, #8
 8015848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	e853 3f00 	ldrex	r3, [r3]
 8015850:	60fb      	str	r3, [r7, #12]
   return(result);
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f023 0301 	bic.w	r3, r3, #1
 8015858:	64bb      	str	r3, [r7, #72]	; 0x48
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	3308      	adds	r3, #8
 8015860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015862:	61fa      	str	r2, [r7, #28]
 8015864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015866:	69b9      	ldr	r1, [r7, #24]
 8015868:	69fa      	ldr	r2, [r7, #28]
 801586a:	e841 2300 	strex	r3, r2, [r1]
 801586e:	617b      	str	r3, [r7, #20]
   return(result);
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1e5      	bne.n	8015842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2220      	movs	r2, #32
 801587a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2200      	movs	r2, #0
 8015882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015886:	2303      	movs	r3, #3
 8015888:	e012      	b.n	80158b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2220      	movs	r2, #32
 801588e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2220      	movs	r2, #32
 8015896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2200      	movs	r2, #0
 801589e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2200      	movs	r2, #0
 80158a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80158ae:	2300      	movs	r3, #0
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3758      	adds	r7, #88	; 0x58
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	603b      	str	r3, [r7, #0]
 80158c4:	4613      	mov	r3, r2
 80158c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80158c8:	e04f      	b.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158d0:	d04b      	beq.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80158d2:	f7f0 f8a7 	bl	8005a24 <HAL_GetTick>
 80158d6:	4602      	mov	r2, r0
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	1ad3      	subs	r3, r2, r3
 80158dc:	69ba      	ldr	r2, [r7, #24]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d302      	bcc.n	80158e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d101      	bne.n	80158ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80158e8:	2303      	movs	r3, #3
 80158ea:	e04e      	b.n	801598a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	f003 0304 	and.w	r3, r3, #4
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d037      	beq.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b80      	cmp	r3, #128	; 0x80
 80158fe:	d034      	beq.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b40      	cmp	r3, #64	; 0x40
 8015904:	d031      	beq.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	69db      	ldr	r3, [r3, #28]
 801590c:	f003 0308 	and.w	r3, r3, #8
 8015910:	2b08      	cmp	r3, #8
 8015912:	d110      	bne.n	8015936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2208      	movs	r2, #8
 801591a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801591c:	68f8      	ldr	r0, [r7, #12]
 801591e:	f000 f95b 	bl	8015bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2208      	movs	r2, #8
 8015926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2200      	movs	r2, #0
 801592e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015932:	2301      	movs	r3, #1
 8015934:	e029      	b.n	801598a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	69db      	ldr	r3, [r3, #28]
 801593c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015944:	d111      	bne.n	801596a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801594e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f000 f941 	bl	8015bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2220      	movs	r2, #32
 801595a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	2200      	movs	r2, #0
 8015962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015966:	2303      	movs	r3, #3
 8015968:	e00f      	b.n	801598a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	69da      	ldr	r2, [r3, #28]
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	4013      	ands	r3, r2
 8015974:	68ba      	ldr	r2, [r7, #8]
 8015976:	429a      	cmp	r2, r3
 8015978:	bf0c      	ite	eq
 801597a:	2301      	moveq	r3, #1
 801597c:	2300      	movne	r3, #0
 801597e:	b2db      	uxtb	r3, r3
 8015980:	461a      	mov	r2, r3
 8015982:	79fb      	ldrb	r3, [r7, #7]
 8015984:	429a      	cmp	r2, r3
 8015986:	d0a0      	beq.n	80158ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015988:	2300      	movs	r3, #0
}
 801598a:	4618      	mov	r0, r3
 801598c:	3710      	adds	r7, #16
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
	...

08015994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015994:	b480      	push	{r7}
 8015996:	b0a3      	sub	sp, #140	; 0x8c
 8015998:	af00      	add	r7, sp, #0
 801599a:	60f8      	str	r0, [r7, #12]
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	4613      	mov	r3, r2
 80159a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	68ba      	ldr	r2, [r7, #8]
 80159a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	88fa      	ldrh	r2, [r7, #6]
 80159ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	88fa      	ldrh	r2, [r7, #6]
 80159b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2200      	movs	r2, #0
 80159bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	689b      	ldr	r3, [r3, #8]
 80159c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159c6:	d10e      	bne.n	80159e6 <UART_Start_Receive_IT+0x52>
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	691b      	ldr	r3, [r3, #16]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d105      	bne.n	80159dc <UART_Start_Receive_IT+0x48>
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80159d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80159da:	e02d      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	22ff      	movs	r2, #255	; 0xff
 80159e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80159e4:	e028      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	689b      	ldr	r3, [r3, #8]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d10d      	bne.n	8015a0a <UART_Start_Receive_IT+0x76>
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	691b      	ldr	r3, [r3, #16]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d104      	bne.n	8015a00 <UART_Start_Receive_IT+0x6c>
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	22ff      	movs	r2, #255	; 0xff
 80159fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80159fe:	e01b      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	227f      	movs	r2, #127	; 0x7f
 8015a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a08:	e016      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	689b      	ldr	r3, [r3, #8]
 8015a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015a12:	d10d      	bne.n	8015a30 <UART_Start_Receive_IT+0x9c>
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	691b      	ldr	r3, [r3, #16]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d104      	bne.n	8015a26 <UART_Start_Receive_IT+0x92>
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	227f      	movs	r2, #127	; 0x7f
 8015a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a24:	e008      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	223f      	movs	r2, #63	; 0x3f
 8015a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a2e:	e003      	b.n	8015a38 <UART_Start_Receive_IT+0xa4>
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2200      	movs	r2, #0
 8015a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	2222      	movs	r2, #34	; 0x22
 8015a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	3308      	adds	r3, #8
 8015a4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a52:	e853 3f00 	ldrex	r3, [r3]
 8015a56:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a5a:	f043 0301 	orr.w	r3, r3, #1
 8015a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	3308      	adds	r3, #8
 8015a68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015a6c:	673a      	str	r2, [r7, #112]	; 0x70
 8015a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a70:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015a72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a74:	e841 2300 	strex	r3, r2, [r1]
 8015a78:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d1e3      	bne.n	8015a48 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015a88:	d14f      	bne.n	8015b2a <UART_Start_Receive_IT+0x196>
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015a90:	88fa      	ldrh	r2, [r7, #6]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d349      	bcc.n	8015b2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	689b      	ldr	r3, [r3, #8]
 8015a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a9e:	d107      	bne.n	8015ab0 <UART_Start_Receive_IT+0x11c>
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	691b      	ldr	r3, [r3, #16]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d103      	bne.n	8015ab0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	4a47      	ldr	r2, [pc, #284]	; (8015bc8 <UART_Start_Receive_IT+0x234>)
 8015aac:	675a      	str	r2, [r3, #116]	; 0x74
 8015aae:	e002      	b.n	8015ab6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4a46      	ldr	r2, [pc, #280]	; (8015bcc <UART_Start_Receive_IT+0x238>)
 8015ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	691b      	ldr	r3, [r3, #16]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d01a      	beq.n	8015af4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ac6:	e853 3f00 	ldrex	r3, [r3]
 8015aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	461a      	mov	r2, r3
 8015adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ae2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ae4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ae6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ae8:	e841 2300 	strex	r3, r2, [r1]
 8015aec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d1e4      	bne.n	8015abe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	3308      	adds	r3, #8
 8015afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015afe:	e853 3f00 	ldrex	r3, [r3]
 8015b02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	3308      	adds	r3, #8
 8015b12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b14:	64ba      	str	r2, [r7, #72]	; 0x48
 8015b16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b1c:	e841 2300 	strex	r3, r2, [r1]
 8015b20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d1e5      	bne.n	8015af4 <UART_Start_Receive_IT+0x160>
 8015b28:	e046      	b.n	8015bb8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	689b      	ldr	r3, [r3, #8]
 8015b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b32:	d107      	bne.n	8015b44 <UART_Start_Receive_IT+0x1b0>
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	691b      	ldr	r3, [r3, #16]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d103      	bne.n	8015b44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	4a24      	ldr	r2, [pc, #144]	; (8015bd0 <UART_Start_Receive_IT+0x23c>)
 8015b40:	675a      	str	r2, [r3, #116]	; 0x74
 8015b42:	e002      	b.n	8015b4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	4a23      	ldr	r2, [pc, #140]	; (8015bd4 <UART_Start_Receive_IT+0x240>)
 8015b48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	691b      	ldr	r3, [r3, #16]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d019      	beq.n	8015b86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5a:	e853 3f00 	ldrex	r3, [r3]
 8015b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015b66:	677b      	str	r3, [r7, #116]	; 0x74
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b70:	637b      	str	r3, [r7, #52]	; 0x34
 8015b72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b78:	e841 2300 	strex	r3, r2, [r1]
 8015b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d1e6      	bne.n	8015b52 <UART_Start_Receive_IT+0x1be>
 8015b84:	e018      	b.n	8015bb8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	e853 3f00 	ldrex	r3, [r3]
 8015b92:	613b      	str	r3, [r7, #16]
   return(result);
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	f043 0320 	orr.w	r3, r3, #32
 8015b9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ba4:	623b      	str	r3, [r7, #32]
 8015ba6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ba8:	69f9      	ldr	r1, [r7, #28]
 8015baa:	6a3a      	ldr	r2, [r7, #32]
 8015bac:	e841 2300 	strex	r3, r2, [r1]
 8015bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8015bb2:	69bb      	ldr	r3, [r7, #24]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e6      	bne.n	8015b86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015bb8:	2300      	movs	r3, #0
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	378c      	adds	r7, #140	; 0x8c
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr
 8015bc6:	bf00      	nop
 8015bc8:	080163f9 	.word	0x080163f9
 8015bcc:	08016099 	.word	0x08016099
 8015bd0:	08015ee1 	.word	0x08015ee1
 8015bd4:	08015d29 	.word	0x08015d29

08015bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b095      	sub	sp, #84	; 0x54
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be8:	e853 3f00 	ldrex	r3, [r3]
 8015bec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8015c00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c06:	e841 2300 	strex	r3, r2, [r1]
 8015c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d1e6      	bne.n	8015be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3308      	adds	r3, #8
 8015c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1a:	6a3b      	ldr	r3, [r7, #32]
 8015c1c:	e853 3f00 	ldrex	r3, [r3]
 8015c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c22:	69fa      	ldr	r2, [r7, #28]
 8015c24:	4b1e      	ldr	r3, [pc, #120]	; (8015ca0 <UART_EndRxTransfer+0xc8>)
 8015c26:	4013      	ands	r3, r2
 8015c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	3308      	adds	r3, #8
 8015c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c3a:	e841 2300 	strex	r3, r2, [r1]
 8015c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d1e5      	bne.n	8015c12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d118      	bne.n	8015c80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	e853 3f00 	ldrex	r3, [r3]
 8015c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	f023 0310 	bic.w	r3, r3, #16
 8015c62:	647b      	str	r3, [r7, #68]	; 0x44
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	461a      	mov	r2, r3
 8015c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c6c:	61bb      	str	r3, [r7, #24]
 8015c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c70:	6979      	ldr	r1, [r7, #20]
 8015c72:	69ba      	ldr	r2, [r7, #24]
 8015c74:	e841 2300 	strex	r3, r2, [r1]
 8015c78:	613b      	str	r3, [r7, #16]
   return(result);
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1e6      	bne.n	8015c4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2220      	movs	r2, #32
 8015c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2200      	movs	r2, #0
 8015c92:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015c94:	bf00      	nop
 8015c96:	3754      	adds	r7, #84	; 0x54
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr
 8015ca0:	effffffe 	.word	0xeffffffe

08015ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f7fe ff2e 	bl	8014b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015cc8:	bf00      	nop
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b088      	sub	sp, #32
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	e853 3f00 	ldrex	r3, [r3]
 8015ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015cec:	61fb      	str	r3, [r7, #28]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	61bb      	str	r3, [r7, #24]
 8015cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cfa:	6979      	ldr	r1, [r7, #20]
 8015cfc:	69ba      	ldr	r2, [r7, #24]
 8015cfe:	e841 2300 	strex	r3, r2, [r1]
 8015d02:	613b      	str	r3, [r7, #16]
   return(result);
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d1e6      	bne.n	8015cd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2220      	movs	r2, #32
 8015d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2200      	movs	r2, #0
 8015d16:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7fe fef9 	bl	8014b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d1e:	bf00      	nop
 8015d20:	3720      	adds	r7, #32
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
	...

08015d28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b09c      	sub	sp, #112	; 0x70
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d36:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d40:	2b22      	cmp	r3, #34	; 0x22
 8015d42:	f040 80be 	bne.w	8015ec2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015d50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015d54:	b2d9      	uxtb	r1, r3
 8015d56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d60:	400a      	ands	r2, r1
 8015d62:	b2d2      	uxtb	r2, r2
 8015d64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d6a:	1c5a      	adds	r2, r3, #1
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015d76:	b29b      	uxth	r3, r3
 8015d78:	3b01      	subs	r3, #1
 8015d7a:	b29a      	uxth	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	f040 80a1 	bne.w	8015ed2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d98:	e853 3f00 	ldrex	r3, [r3]
 8015d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	461a      	mov	r2, r3
 8015dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8015db0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015db6:	e841 2300 	strex	r3, r2, [r1]
 8015dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1e6      	bne.n	8015d90 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	3308      	adds	r3, #8
 8015dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dcc:	e853 3f00 	ldrex	r3, [r3]
 8015dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dd4:	f023 0301 	bic.w	r3, r3, #1
 8015dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	3308      	adds	r3, #8
 8015de0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015de2:	647a      	str	r2, [r7, #68]	; 0x44
 8015de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015de6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015dea:	e841 2300 	strex	r3, r2, [r1]
 8015dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d1e5      	bne.n	8015dc2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2220      	movs	r2, #32
 8015dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2200      	movs	r2, #0
 8015e02:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2200      	movs	r2, #0
 8015e08:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	4a33      	ldr	r2, [pc, #204]	; (8015edc <UART_RxISR_8BIT+0x1b4>)
 8015e10:	4293      	cmp	r3, r2
 8015e12:	d01f      	beq.n	8015e54 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d018      	beq.n	8015e54 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2a:	e853 3f00 	ldrex	r3, [r3]
 8015e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015e36:	663b      	str	r3, [r7, #96]	; 0x60
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e40:	633b      	str	r3, [r7, #48]	; 0x30
 8015e42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e48:	e841 2300 	strex	r3, r2, [r1]
 8015e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d1e6      	bne.n	8015e22 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e58:	2b01      	cmp	r3, #1
 8015e5a:	d12e      	bne.n	8015eba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	e853 3f00 	ldrex	r3, [r3]
 8015e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	f023 0310 	bic.w	r3, r3, #16
 8015e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e80:	61fb      	str	r3, [r7, #28]
 8015e82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e84:	69b9      	ldr	r1, [r7, #24]
 8015e86:	69fa      	ldr	r2, [r7, #28]
 8015e88:	e841 2300 	strex	r3, r2, [r1]
 8015e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d1e6      	bne.n	8015e62 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	69db      	ldr	r3, [r3, #28]
 8015e9a:	f003 0310 	and.w	r3, r3, #16
 8015e9e:	2b10      	cmp	r3, #16
 8015ea0:	d103      	bne.n	8015eaa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2210      	movs	r2, #16
 8015ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015eb0:	4619      	mov	r1, r3
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7fe fe40 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015eb8:	e00b      	b.n	8015ed2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f7ec fe8e 	bl	8002bdc <HAL_UART_RxCpltCallback>
}
 8015ec0:	e007      	b.n	8015ed2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	699a      	ldr	r2, [r3, #24]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	f042 0208 	orr.w	r2, r2, #8
 8015ed0:	619a      	str	r2, [r3, #24]
}
 8015ed2:	bf00      	nop
 8015ed4:	3770      	adds	r7, #112	; 0x70
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	58000c00 	.word	0x58000c00

08015ee0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b09c      	sub	sp, #112	; 0x70
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015eee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ef8:	2b22      	cmp	r3, #34	; 0x22
 8015efa:	f040 80be 	bne.w	801607a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f0c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015f0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015f12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015f16:	4013      	ands	r3, r2
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f22:	1c9a      	adds	r2, r3, #2
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	3b01      	subs	r3, #1
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	f040 80a1 	bne.w	801608a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f50:	e853 3f00 	ldrex	r3, [r3]
 8015f54:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	461a      	mov	r2, r3
 8015f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f66:	657b      	str	r3, [r7, #84]	; 0x54
 8015f68:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f6e:	e841 2300 	strex	r3, r2, [r1]
 8015f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1e6      	bne.n	8015f48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	3308      	adds	r3, #8
 8015f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f84:	e853 3f00 	ldrex	r3, [r3]
 8015f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f8c:	f023 0301 	bic.w	r3, r3, #1
 8015f90:	663b      	str	r3, [r7, #96]	; 0x60
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	3308      	adds	r3, #8
 8015f98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f9a:	643a      	str	r2, [r7, #64]	; 0x40
 8015f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015fa2:	e841 2300 	strex	r3, r2, [r1]
 8015fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d1e5      	bne.n	8015f7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2220      	movs	r2, #32
 8015fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	4a33      	ldr	r2, [pc, #204]	; (8016094 <UART_RxISR_16BIT+0x1b4>)
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d01f      	beq.n	801600c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d018      	beq.n	801600c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fe0:	6a3b      	ldr	r3, [r7, #32]
 8015fe2:	e853 3f00 	ldrex	r3, [r3]
 8015fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ffa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016000:	e841 2300 	strex	r3, r2, [r1]
 8016004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016008:	2b00      	cmp	r3, #0
 801600a:	d1e6      	bne.n	8015fda <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016010:	2b01      	cmp	r3, #1
 8016012:	d12e      	bne.n	8016072 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	e853 3f00 	ldrex	r3, [r3]
 8016026:	60bb      	str	r3, [r7, #8]
   return(result);
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	f023 0310 	bic.w	r3, r3, #16
 801602e:	65bb      	str	r3, [r7, #88]	; 0x58
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	461a      	mov	r2, r3
 8016036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016038:	61bb      	str	r3, [r7, #24]
 801603a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801603c:	6979      	ldr	r1, [r7, #20]
 801603e:	69ba      	ldr	r2, [r7, #24]
 8016040:	e841 2300 	strex	r3, r2, [r1]
 8016044:	613b      	str	r3, [r7, #16]
   return(result);
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d1e6      	bne.n	801601a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	69db      	ldr	r3, [r3, #28]
 8016052:	f003 0310 	and.w	r3, r3, #16
 8016056:	2b10      	cmp	r3, #16
 8016058:	d103      	bne.n	8016062 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2210      	movs	r2, #16
 8016060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7fe fd64 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016070:	e00b      	b.n	801608a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f7ec fdb2 	bl	8002bdc <HAL_UART_RxCpltCallback>
}
 8016078:	e007      	b.n	801608a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	699a      	ldr	r2, [r3, #24]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	f042 0208 	orr.w	r2, r2, #8
 8016088:	619a      	str	r2, [r3, #24]
}
 801608a:	bf00      	nop
 801608c:	3770      	adds	r7, #112	; 0x70
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	58000c00 	.word	0x58000c00

08016098 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b0ac      	sub	sp, #176	; 0xb0
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80160a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	69db      	ldr	r3, [r3, #28]
 80160b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	689b      	ldr	r3, [r3, #8]
 80160c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160ce:	2b22      	cmp	r3, #34	; 0x22
 80160d0:	f040 8180 	bne.w	80163d4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160da:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80160de:	e123      	b.n	8016328 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80160ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80160ee:	b2d9      	uxtb	r1, r3
 80160f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80160f4:	b2da      	uxtb	r2, r3
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160fa:	400a      	ands	r2, r1
 80160fc:	b2d2      	uxtb	r2, r2
 80160fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016104:	1c5a      	adds	r2, r3, #1
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016110:	b29b      	uxth	r3, r3
 8016112:	3b01      	subs	r3, #1
 8016114:	b29a      	uxth	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	69db      	ldr	r3, [r3, #28]
 8016122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801612a:	f003 0307 	and.w	r3, r3, #7
 801612e:	2b00      	cmp	r3, #0
 8016130:	d053      	beq.n	80161da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016136:	f003 0301 	and.w	r3, r3, #1
 801613a:	2b00      	cmp	r3, #0
 801613c:	d011      	beq.n	8016162 <UART_RxISR_8BIT_FIFOEN+0xca>
 801613e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016146:	2b00      	cmp	r3, #0
 8016148:	d00b      	beq.n	8016162 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2201      	movs	r2, #1
 8016150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016158:	f043 0201 	orr.w	r2, r3, #1
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016166:	f003 0302 	and.w	r3, r3, #2
 801616a:	2b00      	cmp	r3, #0
 801616c:	d011      	beq.n	8016192 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801616e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016172:	f003 0301 	and.w	r3, r3, #1
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00b      	beq.n	8016192 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2202      	movs	r2, #2
 8016180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016188:	f043 0204 	orr.w	r2, r3, #4
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016196:	f003 0304 	and.w	r3, r3, #4
 801619a:	2b00      	cmp	r3, #0
 801619c:	d011      	beq.n	80161c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801619e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80161a2:	f003 0301 	and.w	r3, r3, #1
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00b      	beq.n	80161c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2204      	movs	r2, #4
 80161b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161b8:	f043 0202 	orr.w	r2, r3, #2
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d006      	beq.n	80161da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7fe fca9 	bl	8014b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f040 80a0 	bne.w	8016328 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80161f0:	e853 3f00 	ldrex	r3, [r3]
 80161f4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80161f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	461a      	mov	r2, r3
 8016206:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801620a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801620c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801620e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016210:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016212:	e841 2300 	strex	r3, r2, [r1]
 8016216:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801621a:	2b00      	cmp	r3, #0
 801621c:	d1e4      	bne.n	80161e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	3308      	adds	r3, #8
 8016224:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016228:	e853 3f00 	ldrex	r3, [r3]
 801622c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801622e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016230:	4b6e      	ldr	r3, [pc, #440]	; (80163ec <UART_RxISR_8BIT_FIFOEN+0x354>)
 8016232:	4013      	ands	r3, r2
 8016234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	3308      	adds	r3, #8
 801623e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016242:	66ba      	str	r2, [r7, #104]	; 0x68
 8016244:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016246:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016248:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801624a:	e841 2300 	strex	r3, r2, [r1]
 801624e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016252:	2b00      	cmp	r3, #0
 8016254:	d1e3      	bne.n	801621e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2220      	movs	r2, #32
 801625a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2200      	movs	r2, #0
 8016262:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	4a60      	ldr	r2, [pc, #384]	; (80163f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016270:	4293      	cmp	r3, r2
 8016272:	d021      	beq.n	80162b8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	685b      	ldr	r3, [r3, #4]
 801627a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801627e:	2b00      	cmp	r3, #0
 8016280:	d01a      	beq.n	80162b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801628a:	e853 3f00 	ldrex	r3, [r3]
 801628e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	461a      	mov	r2, r3
 80162a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162a4:	657b      	str	r3, [r7, #84]	; 0x54
 80162a6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80162aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80162ac:	e841 2300 	strex	r3, r2, [r1]
 80162b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80162b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d1e4      	bne.n	8016282 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d130      	bne.n	8016322 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	2200      	movs	r2, #0
 80162c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ce:	e853 3f00 	ldrex	r3, [r3]
 80162d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80162d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d6:	f023 0310 	bic.w	r3, r3, #16
 80162da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	461a      	mov	r2, r3
 80162e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80162e8:	643b      	str	r3, [r7, #64]	; 0x40
 80162ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80162ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80162f0:	e841 2300 	strex	r3, r2, [r1]
 80162f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80162f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d1e4      	bne.n	80162c6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	69db      	ldr	r3, [r3, #28]
 8016302:	f003 0310 	and.w	r3, r3, #16
 8016306:	2b10      	cmp	r3, #16
 8016308:	d103      	bne.n	8016312 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	2210      	movs	r2, #16
 8016310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016318:	4619      	mov	r1, r3
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7fe fc0c 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
 8016320:	e002      	b.n	8016328 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7ec fc5a 	bl	8002bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016328:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801632c:	2b00      	cmp	r3, #0
 801632e:	d006      	beq.n	801633e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016334:	f003 0320 	and.w	r3, r3, #32
 8016338:	2b00      	cmp	r3, #0
 801633a:	f47f aed1 	bne.w	80160e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016344:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016348:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801634c:	2b00      	cmp	r3, #0
 801634e:	d049      	beq.n	80163e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016356:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801635a:	429a      	cmp	r2, r3
 801635c:	d242      	bcs.n	80163e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	3308      	adds	r3, #8
 8016364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016366:	6a3b      	ldr	r3, [r7, #32]
 8016368:	e853 3f00 	ldrex	r3, [r3]
 801636c:	61fb      	str	r3, [r7, #28]
   return(result);
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	3308      	adds	r3, #8
 801637e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801638a:	e841 2300 	strex	r3, r2, [r1]
 801638e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016392:	2b00      	cmp	r3, #0
 8016394:	d1e3      	bne.n	801635e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	4a16      	ldr	r2, [pc, #88]	; (80163f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801639a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	e853 3f00 	ldrex	r3, [r3]
 80163a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	f043 0320 	orr.w	r3, r3, #32
 80163b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	461a      	mov	r2, r3
 80163ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80163be:	61bb      	str	r3, [r7, #24]
 80163c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c2:	6979      	ldr	r1, [r7, #20]
 80163c4:	69ba      	ldr	r2, [r7, #24]
 80163c6:	e841 2300 	strex	r3, r2, [r1]
 80163ca:	613b      	str	r3, [r7, #16]
   return(result);
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d1e4      	bne.n	801639c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80163d2:	e007      	b.n	80163e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	699a      	ldr	r2, [r3, #24]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	f042 0208 	orr.w	r2, r2, #8
 80163e2:	619a      	str	r2, [r3, #24]
}
 80163e4:	bf00      	nop
 80163e6:	37b0      	adds	r7, #176	; 0xb0
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	effffffe 	.word	0xeffffffe
 80163f0:	58000c00 	.word	0x58000c00
 80163f4:	08015d29 	.word	0x08015d29

080163f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b0ae      	sub	sp, #184	; 0xb8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016406:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	69db      	ldr	r3, [r3, #28]
 8016410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	689b      	ldr	r3, [r3, #8]
 8016424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801642e:	2b22      	cmp	r3, #34	; 0x22
 8016430:	f040 8184 	bne.w	801673c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801643a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801643e:	e127      	b.n	8016690 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016446:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801644e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016452:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016456:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801645a:	4013      	ands	r3, r2
 801645c:	b29a      	uxth	r2, r3
 801645e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016462:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016468:	1c9a      	adds	r2, r3, #2
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016474:	b29b      	uxth	r3, r3
 8016476:	3b01      	subs	r3, #1
 8016478:	b29a      	uxth	r2, r3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	69db      	ldr	r3, [r3, #28]
 8016486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801648a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801648e:	f003 0307 	and.w	r3, r3, #7
 8016492:	2b00      	cmp	r3, #0
 8016494:	d053      	beq.n	801653e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801649a:	f003 0301 	and.w	r3, r3, #1
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d011      	beq.n	80164c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80164a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d00b      	beq.n	80164c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2201      	movs	r2, #1
 80164b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164bc:	f043 0201 	orr.w	r2, r3, #1
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80164c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164ca:	f003 0302 	and.w	r3, r3, #2
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d011      	beq.n	80164f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80164d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164d6:	f003 0301 	and.w	r3, r3, #1
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00b      	beq.n	80164f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2202      	movs	r2, #2
 80164e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80164ec:	f043 0204 	orr.w	r2, r3, #4
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80164f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164fa:	f003 0304 	and.w	r3, r3, #4
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d011      	beq.n	8016526 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016506:	f003 0301 	and.w	r3, r3, #1
 801650a:	2b00      	cmp	r3, #0
 801650c:	d00b      	beq.n	8016526 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	2204      	movs	r2, #4
 8016514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801651c:	f043 0202 	orr.w	r2, r3, #2
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801652c:	2b00      	cmp	r3, #0
 801652e:	d006      	beq.n	801653e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7fe faf7 	bl	8014b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2200      	movs	r2, #0
 801653a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016544:	b29b      	uxth	r3, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	f040 80a2 	bne.w	8016690 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016554:	e853 3f00 	ldrex	r3, [r3]
 8016558:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801655a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801655c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	461a      	mov	r2, r3
 801656a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801656e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016572:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016574:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016576:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801657a:	e841 2300 	strex	r3, r2, [r1]
 801657e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016582:	2b00      	cmp	r3, #0
 8016584:	d1e2      	bne.n	801654c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	3308      	adds	r3, #8
 801658c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801658e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016590:	e853 3f00 	ldrex	r3, [r3]
 8016594:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016598:	4b6e      	ldr	r3, [pc, #440]	; (8016754 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801659a:	4013      	ands	r3, r2
 801659c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	3308      	adds	r3, #8
 80165a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80165aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80165ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80165b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165b2:	e841 2300 	strex	r3, r2, [r1]
 80165b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80165b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d1e3      	bne.n	8016586 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2220      	movs	r2, #32
 80165c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2200      	movs	r2, #0
 80165ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	2200      	movs	r2, #0
 80165d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4a60      	ldr	r2, [pc, #384]	; (8016758 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80165d8:	4293      	cmp	r3, r2
 80165da:	d021      	beq.n	8016620 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d01a      	beq.n	8016620 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165f2:	e853 3f00 	ldrex	r3, [r3]
 80165f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80165f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80165fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	461a      	mov	r2, r3
 8016608:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801660c:	65bb      	str	r3, [r7, #88]	; 0x58
 801660e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016614:	e841 2300 	strex	r3, r2, [r1]
 8016618:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801661a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1e4      	bne.n	80165ea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016624:	2b01      	cmp	r3, #1
 8016626:	d130      	bne.n	801668a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2200      	movs	r2, #0
 801662c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016636:	e853 3f00 	ldrex	r3, [r3]
 801663a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801663e:	f023 0310 	bic.w	r3, r3, #16
 8016642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	461a      	mov	r2, r3
 801664c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016650:	647b      	str	r3, [r7, #68]	; 0x44
 8016652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016658:	e841 2300 	strex	r3, r2, [r1]
 801665c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016660:	2b00      	cmp	r3, #0
 8016662:	d1e4      	bne.n	801662e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	69db      	ldr	r3, [r3, #28]
 801666a:	f003 0310 	and.w	r3, r3, #16
 801666e:	2b10      	cmp	r3, #16
 8016670:	d103      	bne.n	801667a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2210      	movs	r2, #16
 8016678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016680:	4619      	mov	r1, r3
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f7fe fa58 	bl	8014b38 <HAL_UARTEx_RxEventCallback>
 8016688:	e002      	b.n	8016690 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f7ec faa6 	bl	8002bdc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016690:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016694:	2b00      	cmp	r3, #0
 8016696:	d006      	beq.n	80166a6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801669c:	f003 0320 	and.w	r3, r3, #32
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	f47f aecd 	bne.w	8016440 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80166b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d049      	beq.n	801674c <UART_RxISR_16BIT_FIFOEN+0x354>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80166be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d242      	bcs.n	801674c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	3308      	adds	r3, #8
 80166cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d0:	e853 3f00 	ldrex	r3, [r3]
 80166d4:	623b      	str	r3, [r7, #32]
   return(result);
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80166dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	3308      	adds	r3, #8
 80166e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80166ea:	633a      	str	r2, [r7, #48]	; 0x30
 80166ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166f2:	e841 2300 	strex	r3, r2, [r1]
 80166f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80166f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d1e3      	bne.n	80166c6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	4a16      	ldr	r2, [pc, #88]	; (801675c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016702:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	e853 3f00 	ldrex	r3, [r3]
 8016710:	60fb      	str	r3, [r7, #12]
   return(result);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	f043 0320 	orr.w	r3, r3, #32
 8016718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	461a      	mov	r2, r3
 8016722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016726:	61fb      	str	r3, [r7, #28]
 8016728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801672a:	69b9      	ldr	r1, [r7, #24]
 801672c:	69fa      	ldr	r2, [r7, #28]
 801672e:	e841 2300 	strex	r3, r2, [r1]
 8016732:	617b      	str	r3, [r7, #20]
   return(result);
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1e4      	bne.n	8016704 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801673a:	e007      	b.n	801674c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	699a      	ldr	r2, [r3, #24]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	f042 0208 	orr.w	r2, r2, #8
 801674a:	619a      	str	r2, [r3, #24]
}
 801674c:	bf00      	nop
 801674e:	37b8      	adds	r7, #184	; 0xb8
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	effffffe 	.word	0xeffffffe
 8016758:	58000c00 	.word	0x58000c00
 801675c:	08015ee1 	.word	0x08015ee1

08016760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016760:	b480      	push	{r7}
 8016762:	b083      	sub	sp, #12
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016768:	bf00      	nop
 801676a:	370c      	adds	r7, #12
 801676c:	46bd      	mov	sp, r7
 801676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016772:	4770      	bx	lr

08016774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016774:	b480      	push	{r7}
 8016776:	b083      	sub	sp, #12
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801677c:	bf00      	nop
 801677e:	370c      	adds	r7, #12
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016788:	b480      	push	{r7}
 801678a:	b083      	sub	sp, #12
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016790:	bf00      	nop
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801679c:	b480      	push	{r7}
 801679e:	b089      	sub	sp, #36	; 0x24
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	d101      	bne.n	80167b2 <HAL_UARTEx_EnableStopMode+0x16>
 80167ae:	2302      	movs	r3, #2
 80167b0:	e021      	b.n	80167f6 <HAL_UARTEx_EnableStopMode+0x5a>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2201      	movs	r2, #1
 80167b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	e853 3f00 	ldrex	r3, [r3]
 80167c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	f043 0302 	orr.w	r3, r3, #2
 80167ce:	61fb      	str	r3, [r7, #28]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	461a      	mov	r2, r3
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	61bb      	str	r3, [r7, #24]
 80167da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167dc:	6979      	ldr	r1, [r7, #20]
 80167de:	69ba      	ldr	r2, [r7, #24]
 80167e0:	e841 2300 	strex	r3, r2, [r1]
 80167e4:	613b      	str	r3, [r7, #16]
   return(result);
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d1e6      	bne.n	80167ba <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3724      	adds	r7, #36	; 0x24
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr

08016802 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016810:	2b01      	cmp	r3, #1
 8016812:	d101      	bne.n	8016818 <HAL_UARTEx_EnableFifoMode+0x16>
 8016814:	2302      	movs	r3, #2
 8016816:	e02b      	b.n	8016870 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2201      	movs	r2, #1
 801681c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2224      	movs	r2, #36	; 0x24
 8016824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	f022 0201 	bic.w	r2, r2, #1
 801683e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016846:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801684e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	68fa      	ldr	r2, [r7, #12]
 8016856:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 f8c3 	bl	80169e4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	2220      	movs	r2, #32
 8016862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2200      	movs	r2, #0
 801686a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801686e:	2300      	movs	r3, #0
}
 8016870:	4618      	mov	r0, r3
 8016872:	3710      	adds	r7, #16
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}

08016878 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016878:	b480      	push	{r7}
 801687a:	b085      	sub	sp, #20
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016886:	2b01      	cmp	r3, #1
 8016888:	d101      	bne.n	801688e <HAL_UARTEx_DisableFifoMode+0x16>
 801688a:	2302      	movs	r3, #2
 801688c:	e027      	b.n	80168de <HAL_UARTEx_DisableFifoMode+0x66>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2201      	movs	r2, #1
 8016892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2224      	movs	r2, #36	; 0x24
 801689a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f022 0201 	bic.w	r2, r2, #1
 80168b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80168bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2220      	movs	r2, #32
 80168d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2200      	movs	r2, #0
 80168d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168dc:	2300      	movs	r3, #0
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3714      	adds	r7, #20
 80168e2:	46bd      	mov	sp, r7
 80168e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e8:	4770      	bx	lr

080168ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b084      	sub	sp, #16
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	6078      	str	r0, [r7, #4]
 80168f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80168fa:	2b01      	cmp	r3, #1
 80168fc:	d101      	bne.n	8016902 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80168fe:	2302      	movs	r3, #2
 8016900:	e02d      	b.n	801695e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2201      	movs	r2, #1
 8016906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2224      	movs	r2, #36	; 0x24
 801690e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f022 0201 	bic.w	r2, r2, #1
 8016928:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	430a      	orrs	r2, r1
 801693c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f000 f850 	bl	80169e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	68fa      	ldr	r2, [r7, #12]
 801694a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2220      	movs	r2, #32
 8016950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2200      	movs	r2, #0
 8016958:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801695c:	2300      	movs	r3, #0
}
 801695e:	4618      	mov	r0, r3
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}

08016966 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016966:	b580      	push	{r7, lr}
 8016968:	b084      	sub	sp, #16
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
 801696e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016976:	2b01      	cmp	r3, #1
 8016978:	d101      	bne.n	801697e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801697a:	2302      	movs	r3, #2
 801697c:	e02d      	b.n	80169da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2201      	movs	r2, #1
 8016982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	2224      	movs	r2, #36	; 0x24
 801698a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	f022 0201 	bic.w	r2, r2, #1
 80169a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	689b      	ldr	r3, [r3, #8]
 80169ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	683a      	ldr	r2, [r7, #0]
 80169b6:	430a      	orrs	r2, r1
 80169b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 f812 	bl	80169e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2220      	movs	r2, #32
 80169cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80169d8:	2300      	movs	r3, #0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3710      	adds	r7, #16
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
	...

080169e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d108      	bne.n	8016a06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2201      	movs	r2, #1
 80169f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2201      	movs	r2, #1
 8016a00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016a04:	e031      	b.n	8016a6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016a06:	2310      	movs	r3, #16
 8016a08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016a0a:	2310      	movs	r3, #16
 8016a0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	0e5b      	lsrs	r3, r3, #25
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	f003 0307 	and.w	r3, r3, #7
 8016a1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	689b      	ldr	r3, [r3, #8]
 8016a24:	0f5b      	lsrs	r3, r3, #29
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	f003 0307 	and.w	r3, r3, #7
 8016a2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016a2e:	7bbb      	ldrb	r3, [r7, #14]
 8016a30:	7b3a      	ldrb	r2, [r7, #12]
 8016a32:	4911      	ldr	r1, [pc, #68]	; (8016a78 <UARTEx_SetNbDataToProcess+0x94>)
 8016a34:	5c8a      	ldrb	r2, [r1, r2]
 8016a36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016a3a:	7b3a      	ldrb	r2, [r7, #12]
 8016a3c:	490f      	ldr	r1, [pc, #60]	; (8016a7c <UARTEx_SetNbDataToProcess+0x98>)
 8016a3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a44:	b29a      	uxth	r2, r3
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016a4c:	7bfb      	ldrb	r3, [r7, #15]
 8016a4e:	7b7a      	ldrb	r2, [r7, #13]
 8016a50:	4909      	ldr	r1, [pc, #36]	; (8016a78 <UARTEx_SetNbDataToProcess+0x94>)
 8016a52:	5c8a      	ldrb	r2, [r1, r2]
 8016a54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016a58:	7b7a      	ldrb	r2, [r7, #13]
 8016a5a:	4908      	ldr	r1, [pc, #32]	; (8016a7c <UARTEx_SetNbDataToProcess+0x98>)
 8016a5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016a6a:	bf00      	nop
 8016a6c:	3714      	adds	r7, #20
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a74:	4770      	bx	lr
 8016a76:	bf00      	nop
 8016a78:	0801ad84 	.word	0x0801ad84
 8016a7c:	0801ad8c 	.word	0x0801ad8c

08016a80 <__NVIC_SetPriority>:
{
 8016a80:	b480      	push	{r7}
 8016a82:	b083      	sub	sp, #12
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	6039      	str	r1, [r7, #0]
 8016a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	db0a      	blt.n	8016aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	b2da      	uxtb	r2, r3
 8016a98:	490c      	ldr	r1, [pc, #48]	; (8016acc <__NVIC_SetPriority+0x4c>)
 8016a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a9e:	0112      	lsls	r2, r2, #4
 8016aa0:	b2d2      	uxtb	r2, r2
 8016aa2:	440b      	add	r3, r1
 8016aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016aa8:	e00a      	b.n	8016ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	b2da      	uxtb	r2, r3
 8016aae:	4908      	ldr	r1, [pc, #32]	; (8016ad0 <__NVIC_SetPriority+0x50>)
 8016ab0:	88fb      	ldrh	r3, [r7, #6]
 8016ab2:	f003 030f 	and.w	r3, r3, #15
 8016ab6:	3b04      	subs	r3, #4
 8016ab8:	0112      	lsls	r2, r2, #4
 8016aba:	b2d2      	uxtb	r2, r2
 8016abc:	440b      	add	r3, r1
 8016abe:	761a      	strb	r2, [r3, #24]
}
 8016ac0:	bf00      	nop
 8016ac2:	370c      	adds	r7, #12
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aca:	4770      	bx	lr
 8016acc:	e000e100 	.word	0xe000e100
 8016ad0:	e000ed00 	.word	0xe000ed00

08016ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016ad8:	4b05      	ldr	r3, [pc, #20]	; (8016af0 <SysTick_Handler+0x1c>)
 8016ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016adc:	f002 f958 	bl	8018d90 <xTaskGetSchedulerState>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d001      	beq.n	8016aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016ae6:	f002 ff77 	bl	80199d8 <xPortSysTickHandler>
  }
}
 8016aea:	bf00      	nop
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	e000e010 	.word	0xe000e010

08016af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016af4:	b580      	push	{r7, lr}
 8016af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016af8:	2100      	movs	r1, #0
 8016afa:	f06f 0004 	mvn.w	r0, #4
 8016afe:	f7ff ffbf 	bl	8016a80 <__NVIC_SetPriority>
#endif
}
 8016b02:	bf00      	nop
 8016b04:	bd80      	pop	{r7, pc}
	...

08016b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b0e:	f3ef 8305 	mrs	r3, IPSR
 8016b12:	603b      	str	r3, [r7, #0]
  return(result);
 8016b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d003      	beq.n	8016b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016b1a:	f06f 0305 	mvn.w	r3, #5
 8016b1e:	607b      	str	r3, [r7, #4]
 8016b20:	e00c      	b.n	8016b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016b22:	4b0a      	ldr	r3, [pc, #40]	; (8016b4c <osKernelInitialize+0x44>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d105      	bne.n	8016b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016b2a:	4b08      	ldr	r3, [pc, #32]	; (8016b4c <osKernelInitialize+0x44>)
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016b30:	2300      	movs	r3, #0
 8016b32:	607b      	str	r3, [r7, #4]
 8016b34:	e002      	b.n	8016b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016b3c:	687b      	ldr	r3, [r7, #4]
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	370c      	adds	r7, #12
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	2400201c 	.word	0x2400201c

08016b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b56:	f3ef 8305 	mrs	r3, IPSR
 8016b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8016b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d003      	beq.n	8016b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8016b62:	f06f 0305 	mvn.w	r3, #5
 8016b66:	607b      	str	r3, [r7, #4]
 8016b68:	e010      	b.n	8016b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016b6a:	4b0b      	ldr	r3, [pc, #44]	; (8016b98 <osKernelStart+0x48>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d109      	bne.n	8016b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016b72:	f7ff ffbf 	bl	8016af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016b76:	4b08      	ldr	r3, [pc, #32]	; (8016b98 <osKernelStart+0x48>)
 8016b78:	2202      	movs	r2, #2
 8016b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016b7c:	f001 fc0c 	bl	8018398 <vTaskStartScheduler>
      stat = osOK;
 8016b80:	2300      	movs	r3, #0
 8016b82:	607b      	str	r3, [r7, #4]
 8016b84:	e002      	b.n	8016b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016b8c:	687b      	ldr	r3, [r7, #4]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3708      	adds	r7, #8
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	2400201c 	.word	0x2400201c

08016b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b08e      	sub	sp, #56	; 0x38
 8016ba0:	af04      	add	r7, sp, #16
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bac:	f3ef 8305 	mrs	r3, IPSR
 8016bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8016bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d17e      	bne.n	8016cb6 <osThreadNew+0x11a>
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d07b      	beq.n	8016cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016bbe:	2380      	movs	r3, #128	; 0x80
 8016bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016bc2:	2318      	movs	r3, #24
 8016bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d045      	beq.n	8016c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d002      	beq.n	8016be4 <osThreadNew+0x48>
        name = attr->name;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	699b      	ldr	r3, [r3, #24]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d002      	beq.n	8016bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	699b      	ldr	r3, [r3, #24]
 8016bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d008      	beq.n	8016c0a <osThreadNew+0x6e>
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	2b38      	cmp	r3, #56	; 0x38
 8016bfc:	d805      	bhi.n	8016c0a <osThreadNew+0x6e>
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	f003 0301 	and.w	r3, r3, #1
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d001      	beq.n	8016c0e <osThreadNew+0x72>
        return (NULL);
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	e054      	b.n	8016cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	695b      	ldr	r3, [r3, #20]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d003      	beq.n	8016c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	695b      	ldr	r3, [r3, #20]
 8016c1a:	089b      	lsrs	r3, r3, #2
 8016c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	689b      	ldr	r3, [r3, #8]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d00e      	beq.n	8016c44 <osThreadNew+0xa8>
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	68db      	ldr	r3, [r3, #12]
 8016c2a:	2b5b      	cmp	r3, #91	; 0x5b
 8016c2c:	d90a      	bls.n	8016c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d006      	beq.n	8016c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	695b      	ldr	r3, [r3, #20]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d002      	beq.n	8016c44 <osThreadNew+0xa8>
        mem = 1;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	61bb      	str	r3, [r7, #24]
 8016c42:	e010      	b.n	8016c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d10c      	bne.n	8016c66 <osThreadNew+0xca>
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d108      	bne.n	8016c66 <osThreadNew+0xca>
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	691b      	ldr	r3, [r3, #16]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d104      	bne.n	8016c66 <osThreadNew+0xca>
          mem = 0;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	61bb      	str	r3, [r7, #24]
 8016c60:	e001      	b.n	8016c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d110      	bne.n	8016c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016c74:	9202      	str	r2, [sp, #8]
 8016c76:	9301      	str	r3, [sp, #4]
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	9300      	str	r3, [sp, #0]
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	6a3a      	ldr	r2, [r7, #32]
 8016c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c82:	68f8      	ldr	r0, [r7, #12]
 8016c84:	f001 f9b2 	bl	8017fec <xTaskCreateStatic>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	613b      	str	r3, [r7, #16]
 8016c8c:	e013      	b.n	8016cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d110      	bne.n	8016cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	f107 0310 	add.w	r3, r7, #16
 8016c9c:	9301      	str	r3, [sp, #4]
 8016c9e:	69fb      	ldr	r3, [r7, #28]
 8016ca0:	9300      	str	r3, [sp, #0]
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ca6:	68f8      	ldr	r0, [r7, #12]
 8016ca8:	f001 f9fd 	bl	80180a6 <xTaskCreate>
 8016cac:	4603      	mov	r3, r0
 8016cae:	2b01      	cmp	r3, #1
 8016cb0:	d001      	beq.n	8016cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016cb6:	693b      	ldr	r3, [r7, #16]
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3728      	adds	r7, #40	; 0x28
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cc6:	f3ef 8305 	mrs	r3, IPSR
 8016cca:	603b      	str	r3, [r7, #0]
  return(result);
 8016ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d003      	beq.n	8016cda <osThreadYield+0x1a>
    stat = osErrorISR;
 8016cd2:	f06f 0305 	mvn.w	r3, #5
 8016cd6:	607b      	str	r3, [r7, #4]
 8016cd8:	e009      	b.n	8016cee <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016cde:	4b07      	ldr	r3, [pc, #28]	; (8016cfc <osThreadYield+0x3c>)
 8016ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ce4:	601a      	str	r2, [r3, #0]
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016cee:	687b      	ldr	r3, [r7, #4]
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	370c      	adds	r7, #12
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfa:	4770      	bx	lr
 8016cfc:	e000ed04 	.word	0xe000ed04

08016d00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b084      	sub	sp, #16
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d08:	f3ef 8305 	mrs	r3, IPSR
 8016d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d003      	beq.n	8016d1c <osDelay+0x1c>
    stat = osErrorISR;
 8016d14:	f06f 0305 	mvn.w	r3, #5
 8016d18:	60fb      	str	r3, [r7, #12]
 8016d1a:	e007      	b.n	8016d2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d002      	beq.n	8016d2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f001 fb02 	bl	8018330 <vTaskDelay>
    }
  }

  return (stat);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b086      	sub	sp, #24
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d42:	f3ef 8305 	mrs	r3, IPSR
 8016d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d48:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d12d      	bne.n	8016daa <osEventFlagsNew+0x74>
    mem = -1;
 8016d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d52:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d015      	beq.n	8016d86 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	689b      	ldr	r3, [r3, #8]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d006      	beq.n	8016d70 <osEventFlagsNew+0x3a>
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	68db      	ldr	r3, [r3, #12]
 8016d66:	2b1f      	cmp	r3, #31
 8016d68:	d902      	bls.n	8016d70 <osEventFlagsNew+0x3a>
        mem = 1;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	613b      	str	r3, [r7, #16]
 8016d6e:	e00c      	b.n	8016d8a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	689b      	ldr	r3, [r3, #8]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d108      	bne.n	8016d8a <osEventFlagsNew+0x54>
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d104      	bne.n	8016d8a <osEventFlagsNew+0x54>
          mem = 0;
 8016d80:	2300      	movs	r3, #0
 8016d82:	613b      	str	r3, [r7, #16]
 8016d84:	e001      	b.n	8016d8a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016d86:	2300      	movs	r3, #0
 8016d88:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	d106      	bne.n	8016d9e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	689b      	ldr	r3, [r3, #8]
 8016d94:	4618      	mov	r0, r3
 8016d96:	f000 f91d 	bl	8016fd4 <xEventGroupCreateStatic>
 8016d9a:	6178      	str	r0, [r7, #20]
 8016d9c:	e005      	b.n	8016daa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d102      	bne.n	8016daa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016da4:	f000 f94d 	bl	8017042 <xEventGroupCreate>
 8016da8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016daa:	697b      	ldr	r3, [r7, #20]
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3718      	adds	r7, #24
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b086      	sub	sp, #24
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
 8016dbc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d004      	beq.n	8016dd2 <osEventFlagsSet+0x1e>
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d003      	beq.n	8016dda <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016dd2:	f06f 0303 	mvn.w	r3, #3
 8016dd6:	617b      	str	r3, [r7, #20]
 8016dd8:	e028      	b.n	8016e2c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016dda:	f3ef 8305 	mrs	r3, IPSR
 8016dde:	60fb      	str	r3, [r7, #12]
  return(result);
 8016de0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d01d      	beq.n	8016e22 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016de6:	2300      	movs	r3, #0
 8016de8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016dea:	f107 0308 	add.w	r3, r7, #8
 8016dee:	461a      	mov	r2, r3
 8016df0:	6839      	ldr	r1, [r7, #0]
 8016df2:	6938      	ldr	r0, [r7, #16]
 8016df4:	f000 fb46 	bl	8017484 <xEventGroupSetBitsFromISR>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d103      	bne.n	8016e06 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016dfe:	f06f 0302 	mvn.w	r3, #2
 8016e02:	617b      	str	r3, [r7, #20]
 8016e04:	e012      	b.n	8016e2c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d00d      	beq.n	8016e2c <osEventFlagsSet+0x78>
 8016e10:	4b09      	ldr	r3, [pc, #36]	; (8016e38 <osEventFlagsSet+0x84>)
 8016e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e16:	601a      	str	r2, [r3, #0]
 8016e18:	f3bf 8f4f 	dsb	sy
 8016e1c:	f3bf 8f6f 	isb	sy
 8016e20:	e004      	b.n	8016e2c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016e22:	6839      	ldr	r1, [r7, #0]
 8016e24:	6938      	ldr	r0, [r7, #16]
 8016e26:	f000 fa65 	bl	80172f4 <xEventGroupSetBits>
 8016e2a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016e2c:	697b      	ldr	r3, [r7, #20]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3718      	adds	r7, #24
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	e000ed04 	.word	0xe000ed04

08016e3c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b086      	sub	sp, #24
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d004      	beq.n	8016e5a <osEventFlagsClear+0x1e>
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d003      	beq.n	8016e62 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016e5a:	f06f 0303 	mvn.w	r3, #3
 8016e5e:	617b      	str	r3, [r7, #20]
 8016e60:	e019      	b.n	8016e96 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e62:	f3ef 8305 	mrs	r3, IPSR
 8016e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d00e      	beq.n	8016e8c <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016e6e:	6938      	ldr	r0, [r7, #16]
 8016e70:	f000 fa1c 	bl	80172ac <xEventGroupGetBitsFromISR>
 8016e74:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016e76:	6839      	ldr	r1, [r7, #0]
 8016e78:	6938      	ldr	r0, [r7, #16]
 8016e7a:	f000 fa03 	bl	8017284 <xEventGroupClearBitsFromISR>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d108      	bne.n	8016e96 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016e84:	f06f 0302 	mvn.w	r3, #2
 8016e88:	617b      	str	r3, [r7, #20]
 8016e8a:	e004      	b.n	8016e96 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016e8c:	6839      	ldr	r1, [r7, #0]
 8016e8e:	6938      	ldr	r0, [r7, #16]
 8016e90:	f000 f9c0 	bl	8017214 <xEventGroupClearBits>
 8016e94:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016e96:	697b      	ldr	r3, [r7, #20]
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3718      	adds	r7, #24
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b08c      	sub	sp, #48	; 0x30
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	607a      	str	r2, [r7, #4]
 8016eac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016eb2:	69bb      	ldr	r3, [r7, #24]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d004      	beq.n	8016ec2 <osEventFlagsWait+0x22>
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d003      	beq.n	8016eca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016ec2:	f06f 0303 	mvn.w	r3, #3
 8016ec6:	61fb      	str	r3, [r7, #28]
 8016ec8:	e04b      	b.n	8016f62 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016eca:	f3ef 8305 	mrs	r3, IPSR
 8016ece:	617b      	str	r3, [r7, #20]
  return(result);
 8016ed0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d003      	beq.n	8016ede <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016ed6:	f06f 0305 	mvn.w	r3, #5
 8016eda:	61fb      	str	r3, [r7, #28]
 8016edc:	e041      	b.n	8016f62 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d002      	beq.n	8016eee <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016ee8:	2301      	movs	r3, #1
 8016eea:	627b      	str	r3, [r7, #36]	; 0x24
 8016eec:	e001      	b.n	8016ef2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f003 0302 	and.w	r3, r3, #2
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d002      	beq.n	8016f02 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016efc:	2300      	movs	r3, #0
 8016efe:	623b      	str	r3, [r7, #32]
 8016f00:	e001      	b.n	8016f06 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016f02:	2301      	movs	r3, #1
 8016f04:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	9300      	str	r3, [sp, #0]
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0c:	6a3a      	ldr	r2, [r7, #32]
 8016f0e:	68b9      	ldr	r1, [r7, #8]
 8016f10:	69b8      	ldr	r0, [r7, #24]
 8016f12:	f000 f8b1 	bl	8017078 <xEventGroupWaitBits>
 8016f16:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f003 0301 	and.w	r3, r3, #1
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d010      	beq.n	8016f44 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016f22:	68ba      	ldr	r2, [r7, #8]
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	4013      	ands	r3, r2
 8016f28:	68ba      	ldr	r2, [r7, #8]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d019      	beq.n	8016f62 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d003      	beq.n	8016f3c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016f34:	f06f 0301 	mvn.w	r3, #1
 8016f38:	61fb      	str	r3, [r7, #28]
 8016f3a:	e012      	b.n	8016f62 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016f3c:	f06f 0302 	mvn.w	r3, #2
 8016f40:	61fb      	str	r3, [r7, #28]
 8016f42:	e00e      	b.n	8016f62 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016f44:	68ba      	ldr	r2, [r7, #8]
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	4013      	ands	r3, r2
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d109      	bne.n	8016f62 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d003      	beq.n	8016f5c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016f54:	f06f 0301 	mvn.w	r3, #1
 8016f58:	61fb      	str	r3, [r7, #28]
 8016f5a:	e002      	b.n	8016f62 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016f5c:	f06f 0302 	mvn.w	r3, #2
 8016f60:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016f62:	69fb      	ldr	r3, [r7, #28]
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3728      	adds	r7, #40	; 0x28
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016f6c:	b480      	push	{r7}
 8016f6e:	b085      	sub	sp, #20
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	60f8      	str	r0, [r7, #12]
 8016f74:	60b9      	str	r1, [r7, #8]
 8016f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	4a07      	ldr	r2, [pc, #28]	; (8016f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8016f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	4a06      	ldr	r2, [pc, #24]	; (8016f9c <vApplicationGetIdleTaskMemory+0x30>)
 8016f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2280      	movs	r2, #128	; 0x80
 8016f88:	601a      	str	r2, [r3, #0]
}
 8016f8a:	bf00      	nop
 8016f8c:	3714      	adds	r7, #20
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f94:	4770      	bx	lr
 8016f96:	bf00      	nop
 8016f98:	24002020 	.word	0x24002020
 8016f9c:	2400207c 	.word	0x2400207c

08016fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016fa0:	b480      	push	{r7}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	4a07      	ldr	r2, [pc, #28]	; (8016fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8016fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	4a06      	ldr	r2, [pc, #24]	; (8016fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8016fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016fbe:	601a      	str	r2, [r3, #0]
}
 8016fc0:	bf00      	nop
 8016fc2:	3714      	adds	r7, #20
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fca:	4770      	bx	lr
 8016fcc:	2400227c 	.word	0x2400227c
 8016fd0:	240022d8 	.word	0x240022d8

08016fd4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b086      	sub	sp, #24
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d10a      	bne.n	8016ff8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe6:	f383 8811 	msr	BASEPRI, r3
 8016fea:	f3bf 8f6f 	isb	sy
 8016fee:	f3bf 8f4f 	dsb	sy
 8016ff2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016ff4:	bf00      	nop
 8016ff6:	e7fe      	b.n	8016ff6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016ff8:	2320      	movs	r3, #32
 8016ffa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	2b20      	cmp	r3, #32
 8017000:	d00a      	beq.n	8017018 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8017002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017006:	f383 8811 	msr	BASEPRI, r3
 801700a:	f3bf 8f6f 	isb	sy
 801700e:	f3bf 8f4f 	dsb	sy
 8017012:	60fb      	str	r3, [r7, #12]
}
 8017014:	bf00      	nop
 8017016:	e7fe      	b.n	8017016 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d00a      	beq.n	8017038 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	2200      	movs	r2, #0
 8017026:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017028:	697b      	ldr	r3, [r7, #20]
 801702a:	3304      	adds	r3, #4
 801702c:	4618      	mov	r0, r3
 801702e:	f000 fa3d 	bl	80174ac <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8017032:	697b      	ldr	r3, [r7, #20]
 8017034:	2201      	movs	r2, #1
 8017036:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017038:	697b      	ldr	r3, [r7, #20]
	}
 801703a:	4618      	mov	r0, r3
 801703c:	3718      	adds	r7, #24
 801703e:	46bd      	mov	sp, r7
 8017040:	bd80      	pop	{r7, pc}

08017042 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8017042:	b580      	push	{r7, lr}
 8017044:	b082      	sub	sp, #8
 8017046:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017048:	2020      	movs	r0, #32
 801704a:	f002 fd55 	bl	8019af8 <pvPortMalloc>
 801704e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00a      	beq.n	801706c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	3304      	adds	r3, #4
 8017060:	4618      	mov	r0, r3
 8017062:	f000 fa23 	bl	80174ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2200      	movs	r2, #0
 801706a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801706c:	687b      	ldr	r3, [r7, #4]
	}
 801706e:	4618      	mov	r0, r3
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
	...

08017078 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b090      	sub	sp, #64	; 0x40
 801707c:	af00      	add	r7, sp, #0
 801707e:	60f8      	str	r0, [r7, #12]
 8017080:	60b9      	str	r1, [r7, #8]
 8017082:	607a      	str	r2, [r7, #4]
 8017084:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801708a:	2300      	movs	r3, #0
 801708c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801708e:	2300      	movs	r3, #0
 8017090:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d10a      	bne.n	80170ae <xEventGroupWaitBits+0x36>
	__asm volatile
 8017098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801709c:	f383 8811 	msr	BASEPRI, r3
 80170a0:	f3bf 8f6f 	isb	sy
 80170a4:	f3bf 8f4f 	dsb	sy
 80170a8:	623b      	str	r3, [r7, #32]
}
 80170aa:	bf00      	nop
 80170ac:	e7fe      	b.n	80170ac <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00a      	beq.n	80170ce <xEventGroupWaitBits+0x56>
	__asm volatile
 80170b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170bc:	f383 8811 	msr	BASEPRI, r3
 80170c0:	f3bf 8f6f 	isb	sy
 80170c4:	f3bf 8f4f 	dsb	sy
 80170c8:	61fb      	str	r3, [r7, #28]
}
 80170ca:	bf00      	nop
 80170cc:	e7fe      	b.n	80170cc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d10a      	bne.n	80170ea <xEventGroupWaitBits+0x72>
	__asm volatile
 80170d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d8:	f383 8811 	msr	BASEPRI, r3
 80170dc:	f3bf 8f6f 	isb	sy
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	61bb      	str	r3, [r7, #24]
}
 80170e6:	bf00      	nop
 80170e8:	e7fe      	b.n	80170e8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170ea:	f001 fe51 	bl	8018d90 <xTaskGetSchedulerState>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d102      	bne.n	80170fa <xEventGroupWaitBits+0x82>
 80170f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d101      	bne.n	80170fe <xEventGroupWaitBits+0x86>
 80170fa:	2301      	movs	r3, #1
 80170fc:	e000      	b.n	8017100 <xEventGroupWaitBits+0x88>
 80170fe:	2300      	movs	r3, #0
 8017100:	2b00      	cmp	r3, #0
 8017102:	d10a      	bne.n	801711a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017108:	f383 8811 	msr	BASEPRI, r3
 801710c:	f3bf 8f6f 	isb	sy
 8017110:	f3bf 8f4f 	dsb	sy
 8017114:	617b      	str	r3, [r7, #20]
}
 8017116:	bf00      	nop
 8017118:	e7fe      	b.n	8017118 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801711a:	f001 f9a3 	bl	8018464 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017124:	683a      	ldr	r2, [r7, #0]
 8017126:	68b9      	ldr	r1, [r7, #8]
 8017128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801712a:	f000 f988 	bl	801743e <prvTestWaitCondition>
 801712e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017132:	2b00      	cmp	r3, #0
 8017134:	d00e      	beq.n	8017154 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017138:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801713a:	2300      	movs	r3, #0
 801713c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d028      	beq.n	8017196 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017146:	681a      	ldr	r2, [r3, #0]
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	43db      	mvns	r3, r3
 801714c:	401a      	ands	r2, r3
 801714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017150:	601a      	str	r2, [r3, #0]
 8017152:	e020      	b.n	8017196 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017156:	2b00      	cmp	r3, #0
 8017158:	d104      	bne.n	8017164 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801715e:	2301      	movs	r3, #1
 8017160:	633b      	str	r3, [r7, #48]	; 0x30
 8017162:	e018      	b.n	8017196 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d003      	beq.n	8017172 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017170:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d003      	beq.n	8017180 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801717a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801717e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017182:	1d18      	adds	r0, r3, #4
 8017184:	68ba      	ldr	r2, [r7, #8]
 8017186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017188:	4313      	orrs	r3, r2
 801718a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801718c:	4619      	mov	r1, r3
 801718e:	f001 fb77 	bl	8018880 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017196:	f001 f973 	bl	8018480 <xTaskResumeAll>
 801719a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801719c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d031      	beq.n	8017206 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80171a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d107      	bne.n	80171b8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80171a8:	4b19      	ldr	r3, [pc, #100]	; (8017210 <xEventGroupWaitBits+0x198>)
 80171aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ae:	601a      	str	r2, [r3, #0]
 80171b0:	f3bf 8f4f 	dsb	sy
 80171b4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80171b8:	f001 fe76 	bl	8018ea8 <uxTaskResetEventItemValue>
 80171bc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80171be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d11a      	bne.n	80171fe <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80171c8:	f002 fb74 	bl	80198b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80171cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80171d2:	683a      	ldr	r2, [r7, #0]
 80171d4:	68b9      	ldr	r1, [r7, #8]
 80171d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80171d8:	f000 f931 	bl	801743e <prvTestWaitCondition>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d009      	beq.n	80171f6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d006      	beq.n	80171f6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80171e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	43db      	mvns	r3, r3
 80171f0:	401a      	ands	r2, r3
 80171f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171f4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80171f6:	2301      	movs	r3, #1
 80171f8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80171fa:	f002 fb8b 	bl	8019914 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80171fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017200:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017204:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017208:	4618      	mov	r0, r3
 801720a:	3740      	adds	r7, #64	; 0x40
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}
 8017210:	e000ed04 	.word	0xe000ed04

08017214 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b086      	sub	sp, #24
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d10a      	bne.n	801723e <xEventGroupClearBits+0x2a>
	__asm volatile
 8017228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801722c:	f383 8811 	msr	BASEPRI, r3
 8017230:	f3bf 8f6f 	isb	sy
 8017234:	f3bf 8f4f 	dsb	sy
 8017238:	60fb      	str	r3, [r7, #12]
}
 801723a:	bf00      	nop
 801723c:	e7fe      	b.n	801723c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017244:	2b00      	cmp	r3, #0
 8017246:	d00a      	beq.n	801725e <xEventGroupClearBits+0x4a>
	__asm volatile
 8017248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801724c:	f383 8811 	msr	BASEPRI, r3
 8017250:	f3bf 8f6f 	isb	sy
 8017254:	f3bf 8f4f 	dsb	sy
 8017258:	60bb      	str	r3, [r7, #8]
}
 801725a:	bf00      	nop
 801725c:	e7fe      	b.n	801725c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801725e:	f002 fb29 	bl	80198b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	681a      	ldr	r2, [r3, #0]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	43db      	mvns	r3, r3
 8017270:	401a      	ands	r2, r3
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017276:	f002 fb4d 	bl	8019914 <vPortExitCritical>

	return uxReturn;
 801727a:	693b      	ldr	r3, [r7, #16]
}
 801727c:	4618      	mov	r0, r3
 801727e:	3718      	adds	r7, #24
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017284:	b580      	push	{r7, lr}
 8017286:	b084      	sub	sp, #16
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801728e:	2300      	movs	r3, #0
 8017290:	683a      	ldr	r2, [r7, #0]
 8017292:	6879      	ldr	r1, [r7, #4]
 8017294:	4804      	ldr	r0, [pc, #16]	; (80172a8 <xEventGroupClearBitsFromISR+0x24>)
 8017296:	f002 f9c1 	bl	801961c <xTimerPendFunctionCallFromISR>
 801729a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801729c:	68fb      	ldr	r3, [r7, #12]
	}
 801729e:	4618      	mov	r0, r3
 80172a0:	3710      	adds	r7, #16
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	08017425 	.word	0x08017425

080172ac <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80172ac:	b480      	push	{r7}
 80172ae:	b089      	sub	sp, #36	; 0x24
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80172b8:	f3ef 8211 	mrs	r2, BASEPRI
 80172bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c0:	f383 8811 	msr	BASEPRI, r3
 80172c4:	f3bf 8f6f 	isb	sy
 80172c8:	f3bf 8f4f 	dsb	sy
 80172cc:	60fa      	str	r2, [r7, #12]
 80172ce:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80172d0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172d2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80172d4:	69fb      	ldr	r3, [r7, #28]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	617b      	str	r3, [r7, #20]
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80172e4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80172e6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80172e8:	4618      	mov	r0, r3
 80172ea:	3724      	adds	r7, #36	; 0x24
 80172ec:	46bd      	mov	sp, r7
 80172ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f2:	4770      	bx	lr

080172f4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b08e      	sub	sp, #56	; 0x38
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80172fe:	2300      	movs	r3, #0
 8017300:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017306:	2300      	movs	r3, #0
 8017308:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d10a      	bne.n	8017326 <xEventGroupSetBits+0x32>
	__asm volatile
 8017310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	613b      	str	r3, [r7, #16]
}
 8017322:	bf00      	nop
 8017324:	e7fe      	b.n	8017324 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801732c:	2b00      	cmp	r3, #0
 801732e:	d00a      	beq.n	8017346 <xEventGroupSetBits+0x52>
	__asm volatile
 8017330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017334:	f383 8811 	msr	BASEPRI, r3
 8017338:	f3bf 8f6f 	isb	sy
 801733c:	f3bf 8f4f 	dsb	sy
 8017340:	60fb      	str	r3, [r7, #12]
}
 8017342:	bf00      	nop
 8017344:	e7fe      	b.n	8017344 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017348:	3304      	adds	r3, #4
 801734a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	3308      	adds	r3, #8
 8017350:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8017352:	f001 f887 	bl	8018464 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	431a      	orrs	r2, r3
 8017364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017366:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017368:	e03c      	b.n	80173e4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017376:	2300      	movs	r3, #0
 8017378:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801737a:	69bb      	ldr	r3, [r7, #24]
 801737c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017380:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017382:	69bb      	ldr	r3, [r7, #24]
 8017384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017388:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017390:	2b00      	cmp	r3, #0
 8017392:	d108      	bne.n	80173a6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	69bb      	ldr	r3, [r7, #24]
 801739a:	4013      	ands	r3, r2
 801739c:	2b00      	cmp	r3, #0
 801739e:	d00b      	beq.n	80173b8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80173a0:	2301      	movs	r3, #1
 80173a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173a4:	e008      	b.n	80173b8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80173a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	69bb      	ldr	r3, [r7, #24]
 80173ac:	4013      	ands	r3, r2
 80173ae:	69ba      	ldr	r2, [r7, #24]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d101      	bne.n	80173b8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80173b4:	2301      	movs	r3, #1
 80173b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80173b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d010      	beq.n	80173e0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d003      	beq.n	80173d0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80173c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	4313      	orrs	r3, r2
 80173ce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80173d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80173d8:	4619      	mov	r1, r3
 80173da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80173dc:	f001 fb1c 	bl	8018a18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80173e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d1be      	bne.n	801736a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80173ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ee:	681a      	ldr	r2, [r3, #0]
 80173f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f2:	43db      	mvns	r3, r3
 80173f4:	401a      	ands	r2, r3
 80173f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80173fa:	f001 f841 	bl	8018480 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80173fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017400:	681b      	ldr	r3, [r3, #0]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3738      	adds	r7, #56	; 0x38
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}

0801740a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b082      	sub	sp, #8
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017414:	6839      	ldr	r1, [r7, #0]
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f7ff ff6c 	bl	80172f4 <xEventGroupSetBits>
}
 801741c:	bf00      	nop
 801741e:	3708      	adds	r7, #8
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b082      	sub	sp, #8
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801742e:	6839      	ldr	r1, [r7, #0]
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f7ff feef 	bl	8017214 <xEventGroupClearBits>
}
 8017436:	bf00      	nop
 8017438:	3708      	adds	r7, #8
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801743e:	b480      	push	{r7}
 8017440:	b087      	sub	sp, #28
 8017442:	af00      	add	r7, sp, #0
 8017444:	60f8      	str	r0, [r7, #12]
 8017446:	60b9      	str	r1, [r7, #8]
 8017448:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801744a:	2300      	movs	r3, #0
 801744c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d107      	bne.n	8017464 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	4013      	ands	r3, r2
 801745a:	2b00      	cmp	r3, #0
 801745c:	d00a      	beq.n	8017474 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801745e:	2301      	movs	r3, #1
 8017460:	617b      	str	r3, [r7, #20]
 8017462:	e007      	b.n	8017474 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017464:	68fa      	ldr	r2, [r7, #12]
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	4013      	ands	r3, r2
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	429a      	cmp	r2, r3
 801746e:	d101      	bne.n	8017474 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017470:	2301      	movs	r3, #1
 8017472:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017474:	697b      	ldr	r3, [r7, #20]
}
 8017476:	4618      	mov	r0, r3
 8017478:	371c      	adds	r7, #28
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr
	...

08017484 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017484:	b580      	push	{r7, lr}
 8017486:	b086      	sub	sp, #24
 8017488:	af00      	add	r7, sp, #0
 801748a:	60f8      	str	r0, [r7, #12]
 801748c:	60b9      	str	r1, [r7, #8]
 801748e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	68ba      	ldr	r2, [r7, #8]
 8017494:	68f9      	ldr	r1, [r7, #12]
 8017496:	4804      	ldr	r0, [pc, #16]	; (80174a8 <xEventGroupSetBitsFromISR+0x24>)
 8017498:	f002 f8c0 	bl	801961c <xTimerPendFunctionCallFromISR>
 801749c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801749e:	697b      	ldr	r3, [r7, #20]
	}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3718      	adds	r7, #24
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}
 80174a8:	0801740b 	.word	0x0801740b

080174ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80174ac:	b480      	push	{r7}
 80174ae:	b083      	sub	sp, #12
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f103 0208 	add.w	r2, r3, #8
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f103 0208 	add.w	r2, r3, #8
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f103 0208 	add.w	r2, r3, #8
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	2200      	movs	r2, #0
 80174de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80174e0:	bf00      	nop
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr

080174ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80174ec:	b480      	push	{r7}
 80174ee:	b083      	sub	sp, #12
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2200      	movs	r2, #0
 80174f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80174fa:	bf00      	nop
 80174fc:	370c      	adds	r7, #12
 80174fe:	46bd      	mov	sp, r7
 8017500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017504:	4770      	bx	lr

08017506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017506:	b480      	push	{r7}
 8017508:	b085      	sub	sp, #20
 801750a:	af00      	add	r7, sp, #0
 801750c:	6078      	str	r0, [r7, #4]
 801750e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	68fa      	ldr	r2, [r7, #12]
 801751a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	689a      	ldr	r2, [r3, #8]
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	689b      	ldr	r3, [r3, #8]
 8017528:	683a      	ldr	r2, [r7, #0]
 801752a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	683a      	ldr	r2, [r7, #0]
 8017530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	1c5a      	adds	r2, r3, #1
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	601a      	str	r2, [r3, #0]
}
 8017542:	bf00      	nop
 8017544:	3714      	adds	r7, #20
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr

0801754e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801754e:	b480      	push	{r7}
 8017550:	b085      	sub	sp, #20
 8017552:	af00      	add	r7, sp, #0
 8017554:	6078      	str	r0, [r7, #4]
 8017556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017564:	d103      	bne.n	801756e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	691b      	ldr	r3, [r3, #16]
 801756a:	60fb      	str	r3, [r7, #12]
 801756c:	e00c      	b.n	8017588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	3308      	adds	r3, #8
 8017572:	60fb      	str	r3, [r7, #12]
 8017574:	e002      	b.n	801757c <vListInsert+0x2e>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	685b      	ldr	r3, [r3, #4]
 801757a:	60fb      	str	r3, [r7, #12]
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	68ba      	ldr	r2, [r7, #8]
 8017584:	429a      	cmp	r2, r3
 8017586:	d2f6      	bcs.n	8017576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	685a      	ldr	r2, [r3, #4]
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	683a      	ldr	r2, [r7, #0]
 8017596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	68fa      	ldr	r2, [r7, #12]
 801759c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	683a      	ldr	r2, [r7, #0]
 80175a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	1c5a      	adds	r2, r3, #1
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	601a      	str	r2, [r3, #0]
}
 80175b4:	bf00      	nop
 80175b6:	3714      	adds	r7, #20
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80175c0:	b480      	push	{r7}
 80175c2:	b085      	sub	sp, #20
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	691b      	ldr	r3, [r3, #16]
 80175cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	6892      	ldr	r2, [r2, #8]
 80175d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	689b      	ldr	r3, [r3, #8]
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	6852      	ldr	r2, [r2, #4]
 80175e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d103      	bne.n	80175f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	689a      	ldr	r2, [r3, #8]
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2200      	movs	r2, #0
 80175f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	1e5a      	subs	r2, r3, #1
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	681b      	ldr	r3, [r3, #0]
}
 8017608:	4618      	mov	r0, r3
 801760a:	3714      	adds	r7, #20
 801760c:	46bd      	mov	sp, r7
 801760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017612:	4770      	bx	lr

08017614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d10a      	bne.n	801763e <xQueueGenericReset+0x2a>
	__asm volatile
 8017628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801762c:	f383 8811 	msr	BASEPRI, r3
 8017630:	f3bf 8f6f 	isb	sy
 8017634:	f3bf 8f4f 	dsb	sy
 8017638:	60bb      	str	r3, [r7, #8]
}
 801763a:	bf00      	nop
 801763c:	e7fe      	b.n	801763c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801763e:	f002 f939 	bl	80198b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801764a:	68f9      	ldr	r1, [r7, #12]
 801764c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801764e:	fb01 f303 	mul.w	r3, r1, r3
 8017652:	441a      	add	r2, r3
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	2200      	movs	r2, #0
 801765c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801766e:	3b01      	subs	r3, #1
 8017670:	68f9      	ldr	r1, [r7, #12]
 8017672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017674:	fb01 f303 	mul.w	r3, r1, r3
 8017678:	441a      	add	r2, r3
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	22ff      	movs	r2, #255	; 0xff
 8017682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	22ff      	movs	r2, #255	; 0xff
 801768a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d114      	bne.n	80176be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	691b      	ldr	r3, [r3, #16]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d01a      	beq.n	80176d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	3310      	adds	r3, #16
 80176a0:	4618      	mov	r0, r3
 80176a2:	f001 f955 	bl	8018950 <xTaskRemoveFromEventList>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d012      	beq.n	80176d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80176ac:	4b0c      	ldr	r3, [pc, #48]	; (80176e0 <xQueueGenericReset+0xcc>)
 80176ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176b2:	601a      	str	r2, [r3, #0]
 80176b4:	f3bf 8f4f 	dsb	sy
 80176b8:	f3bf 8f6f 	isb	sy
 80176bc:	e009      	b.n	80176d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	3310      	adds	r3, #16
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7ff fef2 	bl	80174ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	3324      	adds	r3, #36	; 0x24
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7ff feed 	bl	80174ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80176d2:	f002 f91f 	bl	8019914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80176d6:	2301      	movs	r3, #1
}
 80176d8:	4618      	mov	r0, r3
 80176da:	3710      	adds	r7, #16
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	e000ed04 	.word	0xe000ed04

080176e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08e      	sub	sp, #56	; 0x38
 80176e8:	af02      	add	r7, sp, #8
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	607a      	str	r2, [r7, #4]
 80176f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d10a      	bne.n	801770e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80176f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176fc:	f383 8811 	msr	BASEPRI, r3
 8017700:	f3bf 8f6f 	isb	sy
 8017704:	f3bf 8f4f 	dsb	sy
 8017708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801770a:	bf00      	nop
 801770c:	e7fe      	b.n	801770c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d10a      	bne.n	801772a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017726:	bf00      	nop
 8017728:	e7fe      	b.n	8017728 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d002      	beq.n	8017736 <xQueueGenericCreateStatic+0x52>
 8017730:	68bb      	ldr	r3, [r7, #8]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d001      	beq.n	801773a <xQueueGenericCreateStatic+0x56>
 8017736:	2301      	movs	r3, #1
 8017738:	e000      	b.n	801773c <xQueueGenericCreateStatic+0x58>
 801773a:	2300      	movs	r3, #0
 801773c:	2b00      	cmp	r3, #0
 801773e:	d10a      	bne.n	8017756 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017744:	f383 8811 	msr	BASEPRI, r3
 8017748:	f3bf 8f6f 	isb	sy
 801774c:	f3bf 8f4f 	dsb	sy
 8017750:	623b      	str	r3, [r7, #32]
}
 8017752:	bf00      	nop
 8017754:	e7fe      	b.n	8017754 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d102      	bne.n	8017762 <xQueueGenericCreateStatic+0x7e>
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d101      	bne.n	8017766 <xQueueGenericCreateStatic+0x82>
 8017762:	2301      	movs	r3, #1
 8017764:	e000      	b.n	8017768 <xQueueGenericCreateStatic+0x84>
 8017766:	2300      	movs	r3, #0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d10a      	bne.n	8017782 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017770:	f383 8811 	msr	BASEPRI, r3
 8017774:	f3bf 8f6f 	isb	sy
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	61fb      	str	r3, [r7, #28]
}
 801777e:	bf00      	nop
 8017780:	e7fe      	b.n	8017780 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017782:	2350      	movs	r3, #80	; 0x50
 8017784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	2b50      	cmp	r3, #80	; 0x50
 801778a:	d00a      	beq.n	80177a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017790:	f383 8811 	msr	BASEPRI, r3
 8017794:	f3bf 8f6f 	isb	sy
 8017798:	f3bf 8f4f 	dsb	sy
 801779c:	61bb      	str	r3, [r7, #24]
}
 801779e:	bf00      	nop
 80177a0:	e7fe      	b.n	80177a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80177a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80177a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d00d      	beq.n	80177ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80177ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b0:	2201      	movs	r2, #1
 80177b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80177b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80177ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177bc:	9300      	str	r3, [sp, #0]
 80177be:	4613      	mov	r3, r2
 80177c0:	687a      	ldr	r2, [r7, #4]
 80177c2:	68b9      	ldr	r1, [r7, #8]
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f000 f805 	bl	80177d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80177ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3730      	adds	r7, #48	; 0x30
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
 80177da:	60f8      	str	r0, [r7, #12]
 80177dc:	60b9      	str	r1, [r7, #8]
 80177de:	607a      	str	r2, [r7, #4]
 80177e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d103      	bne.n	80177f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80177e8:	69bb      	ldr	r3, [r7, #24]
 80177ea:	69ba      	ldr	r2, [r7, #24]
 80177ec:	601a      	str	r2, [r3, #0]
 80177ee:	e002      	b.n	80177f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	687a      	ldr	r2, [r7, #4]
 80177f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80177f6:	69bb      	ldr	r3, [r7, #24]
 80177f8:	68fa      	ldr	r2, [r7, #12]
 80177fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	68ba      	ldr	r2, [r7, #8]
 8017800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017802:	2101      	movs	r1, #1
 8017804:	69b8      	ldr	r0, [r7, #24]
 8017806:	f7ff ff05 	bl	8017614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801780a:	69bb      	ldr	r3, [r7, #24]
 801780c:	78fa      	ldrb	r2, [r7, #3]
 801780e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017812:	bf00      	nop
 8017814:	3710      	adds	r7, #16
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
	...

0801781c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b08e      	sub	sp, #56	; 0x38
 8017820:	af00      	add	r7, sp, #0
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
 8017828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801782a:	2300      	movs	r3, #0
 801782c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	2b00      	cmp	r3, #0
 8017836:	d10a      	bne.n	801784e <xQueueGenericSend+0x32>
	__asm volatile
 8017838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801784a:	bf00      	nop
 801784c:	e7fe      	b.n	801784c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d103      	bne.n	801785c <xQueueGenericSend+0x40>
 8017854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017858:	2b00      	cmp	r3, #0
 801785a:	d101      	bne.n	8017860 <xQueueGenericSend+0x44>
 801785c:	2301      	movs	r3, #1
 801785e:	e000      	b.n	8017862 <xQueueGenericSend+0x46>
 8017860:	2300      	movs	r3, #0
 8017862:	2b00      	cmp	r3, #0
 8017864:	d10a      	bne.n	801787c <xQueueGenericSend+0x60>
	__asm volatile
 8017866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801786a:	f383 8811 	msr	BASEPRI, r3
 801786e:	f3bf 8f6f 	isb	sy
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017878:	bf00      	nop
 801787a:	e7fe      	b.n	801787a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	2b02      	cmp	r3, #2
 8017880:	d103      	bne.n	801788a <xQueueGenericSend+0x6e>
 8017882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017886:	2b01      	cmp	r3, #1
 8017888:	d101      	bne.n	801788e <xQueueGenericSend+0x72>
 801788a:	2301      	movs	r3, #1
 801788c:	e000      	b.n	8017890 <xQueueGenericSend+0x74>
 801788e:	2300      	movs	r3, #0
 8017890:	2b00      	cmp	r3, #0
 8017892:	d10a      	bne.n	80178aa <xQueueGenericSend+0x8e>
	__asm volatile
 8017894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017898:	f383 8811 	msr	BASEPRI, r3
 801789c:	f3bf 8f6f 	isb	sy
 80178a0:	f3bf 8f4f 	dsb	sy
 80178a4:	623b      	str	r3, [r7, #32]
}
 80178a6:	bf00      	nop
 80178a8:	e7fe      	b.n	80178a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80178aa:	f001 fa71 	bl	8018d90 <xTaskGetSchedulerState>
 80178ae:	4603      	mov	r3, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d102      	bne.n	80178ba <xQueueGenericSend+0x9e>
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d101      	bne.n	80178be <xQueueGenericSend+0xa2>
 80178ba:	2301      	movs	r3, #1
 80178bc:	e000      	b.n	80178c0 <xQueueGenericSend+0xa4>
 80178be:	2300      	movs	r3, #0
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d10a      	bne.n	80178da <xQueueGenericSend+0xbe>
	__asm volatile
 80178c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178c8:	f383 8811 	msr	BASEPRI, r3
 80178cc:	f3bf 8f6f 	isb	sy
 80178d0:	f3bf 8f4f 	dsb	sy
 80178d4:	61fb      	str	r3, [r7, #28]
}
 80178d6:	bf00      	nop
 80178d8:	e7fe      	b.n	80178d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80178da:	f001 ffeb 	bl	80198b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80178de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178e6:	429a      	cmp	r2, r3
 80178e8:	d302      	bcc.n	80178f0 <xQueueGenericSend+0xd4>
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	2b02      	cmp	r3, #2
 80178ee:	d129      	bne.n	8017944 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80178f0:	683a      	ldr	r2, [r7, #0]
 80178f2:	68b9      	ldr	r1, [r7, #8]
 80178f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178f6:	f000 fa0b 	bl	8017d10 <prvCopyDataToQueue>
 80178fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80178fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017900:	2b00      	cmp	r3, #0
 8017902:	d010      	beq.n	8017926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017906:	3324      	adds	r3, #36	; 0x24
 8017908:	4618      	mov	r0, r3
 801790a:	f001 f821 	bl	8018950 <xTaskRemoveFromEventList>
 801790e:	4603      	mov	r3, r0
 8017910:	2b00      	cmp	r3, #0
 8017912:	d013      	beq.n	801793c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017914:	4b3f      	ldr	r3, [pc, #252]	; (8017a14 <xQueueGenericSend+0x1f8>)
 8017916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801791a:	601a      	str	r2, [r3, #0]
 801791c:	f3bf 8f4f 	dsb	sy
 8017920:	f3bf 8f6f 	isb	sy
 8017924:	e00a      	b.n	801793c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017928:	2b00      	cmp	r3, #0
 801792a:	d007      	beq.n	801793c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801792c:	4b39      	ldr	r3, [pc, #228]	; (8017a14 <xQueueGenericSend+0x1f8>)
 801792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017932:	601a      	str	r2, [r3, #0]
 8017934:	f3bf 8f4f 	dsb	sy
 8017938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801793c:	f001 ffea 	bl	8019914 <vPortExitCritical>
				return pdPASS;
 8017940:	2301      	movs	r3, #1
 8017942:	e063      	b.n	8017a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d103      	bne.n	8017952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801794a:	f001 ffe3 	bl	8019914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801794e:	2300      	movs	r3, #0
 8017950:	e05c      	b.n	8017a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017954:	2b00      	cmp	r3, #0
 8017956:	d106      	bne.n	8017966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017958:	f107 0314 	add.w	r3, r7, #20
 801795c:	4618      	mov	r0, r3
 801795e:	f001 f8bd 	bl	8018adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017962:	2301      	movs	r3, #1
 8017964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017966:	f001 ffd5 	bl	8019914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801796a:	f000 fd7b 	bl	8018464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801796e:	f001 ffa1 	bl	80198b4 <vPortEnterCritical>
 8017972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017978:	b25b      	sxtb	r3, r3
 801797a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801797e:	d103      	bne.n	8017988 <xQueueGenericSend+0x16c>
 8017980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017982:	2200      	movs	r2, #0
 8017984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801798a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801798e:	b25b      	sxtb	r3, r3
 8017990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017994:	d103      	bne.n	801799e <xQueueGenericSend+0x182>
 8017996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017998:	2200      	movs	r2, #0
 801799a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801799e:	f001 ffb9 	bl	8019914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80179a2:	1d3a      	adds	r2, r7, #4
 80179a4:	f107 0314 	add.w	r3, r7, #20
 80179a8:	4611      	mov	r1, r2
 80179aa:	4618      	mov	r0, r3
 80179ac:	f001 f8ac 	bl	8018b08 <xTaskCheckForTimeOut>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d124      	bne.n	8017a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80179b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179b8:	f000 faa2 	bl	8017f00 <prvIsQueueFull>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d018      	beq.n	80179f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80179c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c4:	3310      	adds	r3, #16
 80179c6:	687a      	ldr	r2, [r7, #4]
 80179c8:	4611      	mov	r1, r2
 80179ca:	4618      	mov	r0, r3
 80179cc:	f000 ff34 	bl	8018838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80179d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179d2:	f000 fa2d 	bl	8017e30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80179d6:	f000 fd53 	bl	8018480 <xTaskResumeAll>
 80179da:	4603      	mov	r3, r0
 80179dc:	2b00      	cmp	r3, #0
 80179de:	f47f af7c 	bne.w	80178da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80179e2:	4b0c      	ldr	r3, [pc, #48]	; (8017a14 <xQueueGenericSend+0x1f8>)
 80179e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179e8:	601a      	str	r2, [r3, #0]
 80179ea:	f3bf 8f4f 	dsb	sy
 80179ee:	f3bf 8f6f 	isb	sy
 80179f2:	e772      	b.n	80178da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80179f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179f6:	f000 fa1b 	bl	8017e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80179fa:	f000 fd41 	bl	8018480 <xTaskResumeAll>
 80179fe:	e76c      	b.n	80178da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a02:	f000 fa15 	bl	8017e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a06:	f000 fd3b 	bl	8018480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3738      	adds	r7, #56	; 0x38
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	e000ed04 	.word	0xe000ed04

08017a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b090      	sub	sp, #64	; 0x40
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	60f8      	str	r0, [r7, #12]
 8017a20:	60b9      	str	r1, [r7, #8]
 8017a22:	607a      	str	r2, [r7, #4]
 8017a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d10a      	bne.n	8017a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017a42:	bf00      	nop
 8017a44:	e7fe      	b.n	8017a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d103      	bne.n	8017a54 <xQueueGenericSendFromISR+0x3c>
 8017a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d101      	bne.n	8017a58 <xQueueGenericSendFromISR+0x40>
 8017a54:	2301      	movs	r3, #1
 8017a56:	e000      	b.n	8017a5a <xQueueGenericSendFromISR+0x42>
 8017a58:	2300      	movs	r3, #0
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d10a      	bne.n	8017a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a62:	f383 8811 	msr	BASEPRI, r3
 8017a66:	f3bf 8f6f 	isb	sy
 8017a6a:	f3bf 8f4f 	dsb	sy
 8017a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017a70:	bf00      	nop
 8017a72:	e7fe      	b.n	8017a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	2b02      	cmp	r3, #2
 8017a78:	d103      	bne.n	8017a82 <xQueueGenericSendFromISR+0x6a>
 8017a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d101      	bne.n	8017a86 <xQueueGenericSendFromISR+0x6e>
 8017a82:	2301      	movs	r3, #1
 8017a84:	e000      	b.n	8017a88 <xQueueGenericSendFromISR+0x70>
 8017a86:	2300      	movs	r3, #0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d10a      	bne.n	8017aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a90:	f383 8811 	msr	BASEPRI, r3
 8017a94:	f3bf 8f6f 	isb	sy
 8017a98:	f3bf 8f4f 	dsb	sy
 8017a9c:	623b      	str	r3, [r7, #32]
}
 8017a9e:	bf00      	nop
 8017aa0:	e7fe      	b.n	8017aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017aa2:	f001 ffe9 	bl	8019a78 <vPortValidateInterruptPriority>
	__asm volatile
 8017aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8017aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aae:	f383 8811 	msr	BASEPRI, r3
 8017ab2:	f3bf 8f6f 	isb	sy
 8017ab6:	f3bf 8f4f 	dsb	sy
 8017aba:	61fa      	str	r2, [r7, #28]
 8017abc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017abe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ac0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aca:	429a      	cmp	r2, r3
 8017acc:	d302      	bcc.n	8017ad4 <xQueueGenericSendFromISR+0xbc>
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b02      	cmp	r3, #2
 8017ad2:	d12f      	bne.n	8017b34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ae4:	683a      	ldr	r2, [r7, #0]
 8017ae6:	68b9      	ldr	r1, [r7, #8]
 8017ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017aea:	f000 f911 	bl	8017d10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017aee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017af6:	d112      	bne.n	8017b1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d016      	beq.n	8017b2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b02:	3324      	adds	r3, #36	; 0x24
 8017b04:	4618      	mov	r0, r3
 8017b06:	f000 ff23 	bl	8018950 <xTaskRemoveFromEventList>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d00e      	beq.n	8017b2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d00b      	beq.n	8017b2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2201      	movs	r2, #1
 8017b1a:	601a      	str	r2, [r3, #0]
 8017b1c:	e007      	b.n	8017b2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017b22:	3301      	adds	r3, #1
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	b25a      	sxtb	r2, r3
 8017b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017b2e:	2301      	movs	r3, #1
 8017b30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017b32:	e001      	b.n	8017b38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017b34:	2300      	movs	r3, #0
 8017b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b3a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	f383 8811 	msr	BASEPRI, r3
}
 8017b42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	3740      	adds	r7, #64	; 0x40
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}
	...

08017b50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b08c      	sub	sp, #48	; 0x30
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	60f8      	str	r0, [r7, #12]
 8017b58:	60b9      	str	r1, [r7, #8]
 8017b5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d10a      	bne.n	8017b80 <xQueueReceive+0x30>
	__asm volatile
 8017b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6e:	f383 8811 	msr	BASEPRI, r3
 8017b72:	f3bf 8f6f 	isb	sy
 8017b76:	f3bf 8f4f 	dsb	sy
 8017b7a:	623b      	str	r3, [r7, #32]
}
 8017b7c:	bf00      	nop
 8017b7e:	e7fe      	b.n	8017b7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d103      	bne.n	8017b8e <xQueueReceive+0x3e>
 8017b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d101      	bne.n	8017b92 <xQueueReceive+0x42>
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e000      	b.n	8017b94 <xQueueReceive+0x44>
 8017b92:	2300      	movs	r3, #0
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d10a      	bne.n	8017bae <xQueueReceive+0x5e>
	__asm volatile
 8017b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b9c:	f383 8811 	msr	BASEPRI, r3
 8017ba0:	f3bf 8f6f 	isb	sy
 8017ba4:	f3bf 8f4f 	dsb	sy
 8017ba8:	61fb      	str	r3, [r7, #28]
}
 8017baa:	bf00      	nop
 8017bac:	e7fe      	b.n	8017bac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017bae:	f001 f8ef 	bl	8018d90 <xTaskGetSchedulerState>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d102      	bne.n	8017bbe <xQueueReceive+0x6e>
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d101      	bne.n	8017bc2 <xQueueReceive+0x72>
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	e000      	b.n	8017bc4 <xQueueReceive+0x74>
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d10a      	bne.n	8017bde <xQueueReceive+0x8e>
	__asm volatile
 8017bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bcc:	f383 8811 	msr	BASEPRI, r3
 8017bd0:	f3bf 8f6f 	isb	sy
 8017bd4:	f3bf 8f4f 	dsb	sy
 8017bd8:	61bb      	str	r3, [r7, #24]
}
 8017bda:	bf00      	nop
 8017bdc:	e7fe      	b.n	8017bdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017bde:	f001 fe69 	bl	80198b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017be6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d01f      	beq.n	8017c2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017bee:	68b9      	ldr	r1, [r7, #8]
 8017bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bf2:	f000 f8f7 	bl	8017de4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf8:	1e5a      	subs	r2, r3, #1
 8017bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	691b      	ldr	r3, [r3, #16]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d00f      	beq.n	8017c26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c08:	3310      	adds	r3, #16
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f000 fea0 	bl	8018950 <xTaskRemoveFromEventList>
 8017c10:	4603      	mov	r3, r0
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d007      	beq.n	8017c26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017c16:	4b3d      	ldr	r3, [pc, #244]	; (8017d0c <xQueueReceive+0x1bc>)
 8017c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	f3bf 8f4f 	dsb	sy
 8017c22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017c26:	f001 fe75 	bl	8019914 <vPortExitCritical>
				return pdPASS;
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	e069      	b.n	8017d02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d103      	bne.n	8017c3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c34:	f001 fe6e 	bl	8019914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	e062      	b.n	8017d02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d106      	bne.n	8017c50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017c42:	f107 0310 	add.w	r3, r7, #16
 8017c46:	4618      	mov	r0, r3
 8017c48:	f000 ff48 	bl	8018adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017c50:	f001 fe60 	bl	8019914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017c54:	f000 fc06 	bl	8018464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017c58:	f001 fe2c 	bl	80198b4 <vPortEnterCritical>
 8017c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c62:	b25b      	sxtb	r3, r3
 8017c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c68:	d103      	bne.n	8017c72 <xQueueReceive+0x122>
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c78:	b25b      	sxtb	r3, r3
 8017c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c7e:	d103      	bne.n	8017c88 <xQueueReceive+0x138>
 8017c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c82:	2200      	movs	r2, #0
 8017c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c88:	f001 fe44 	bl	8019914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017c8c:	1d3a      	adds	r2, r7, #4
 8017c8e:	f107 0310 	add.w	r3, r7, #16
 8017c92:	4611      	mov	r1, r2
 8017c94:	4618      	mov	r0, r3
 8017c96:	f000 ff37 	bl	8018b08 <xTaskCheckForTimeOut>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d123      	bne.n	8017ce8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ca2:	f000 f917 	bl	8017ed4 <prvIsQueueEmpty>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d017      	beq.n	8017cdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cae:	3324      	adds	r3, #36	; 0x24
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	4611      	mov	r1, r2
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f000 fdbf 	bl	8018838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cbc:	f000 f8b8 	bl	8017e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017cc0:	f000 fbde 	bl	8018480 <xTaskResumeAll>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d189      	bne.n	8017bde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017cca:	4b10      	ldr	r3, [pc, #64]	; (8017d0c <xQueueReceive+0x1bc>)
 8017ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cd0:	601a      	str	r2, [r3, #0]
 8017cd2:	f3bf 8f4f 	dsb	sy
 8017cd6:	f3bf 8f6f 	isb	sy
 8017cda:	e780      	b.n	8017bde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cde:	f000 f8a7 	bl	8017e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017ce2:	f000 fbcd 	bl	8018480 <xTaskResumeAll>
 8017ce6:	e77a      	b.n	8017bde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cea:	f000 f8a1 	bl	8017e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017cee:	f000 fbc7 	bl	8018480 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cf4:	f000 f8ee 	bl	8017ed4 <prvIsQueueEmpty>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f43f af6f 	beq.w	8017bde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3730      	adds	r7, #48	; 0x30
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	e000ed04 	.word	0xe000ed04

08017d10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b086      	sub	sp, #24
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	60b9      	str	r1, [r7, #8]
 8017d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d10d      	bne.n	8017d4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d14d      	bne.n	8017dd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	689b      	ldr	r3, [r3, #8]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f001 f846 	bl	8018dcc <xTaskPriorityDisinherit>
 8017d40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	2200      	movs	r2, #0
 8017d46:	609a      	str	r2, [r3, #8]
 8017d48:	e043      	b.n	8017dd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d119      	bne.n	8017d84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	6858      	ldr	r0, [r3, #4]
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d58:	461a      	mov	r2, r3
 8017d5a:	68b9      	ldr	r1, [r7, #8]
 8017d5c:	f002 f8e0 	bl	8019f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	685a      	ldr	r2, [r3, #4]
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d68:	441a      	add	r2, r3
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	685a      	ldr	r2, [r3, #4]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	689b      	ldr	r3, [r3, #8]
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d32b      	bcc.n	8017dd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	681a      	ldr	r2, [r3, #0]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	605a      	str	r2, [r3, #4]
 8017d82:	e026      	b.n	8017dd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	68d8      	ldr	r0, [r3, #12]
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d8c:	461a      	mov	r2, r3
 8017d8e:	68b9      	ldr	r1, [r7, #8]
 8017d90:	f002 f8c6 	bl	8019f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	68da      	ldr	r2, [r3, #12]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d9c:	425b      	negs	r3, r3
 8017d9e:	441a      	add	r2, r3
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	68da      	ldr	r2, [r3, #12]
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d207      	bcs.n	8017dc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	689a      	ldr	r2, [r3, #8]
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017db8:	425b      	negs	r3, r3
 8017dba:	441a      	add	r2, r3
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2b02      	cmp	r3, #2
 8017dc4:	d105      	bne.n	8017dd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017dc6:	693b      	ldr	r3, [r7, #16]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d002      	beq.n	8017dd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	3b01      	subs	r3, #1
 8017dd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	1c5a      	adds	r2, r3, #1
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017dda:	697b      	ldr	r3, [r7, #20]
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3718      	adds	r7, #24
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d018      	beq.n	8017e28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	68da      	ldr	r2, [r3, #12]
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dfe:	441a      	add	r2, r3
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	68da      	ldr	r2, [r3, #12]
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	689b      	ldr	r3, [r3, #8]
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d303      	bcc.n	8017e18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681a      	ldr	r2, [r3, #0]
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	68d9      	ldr	r1, [r3, #12]
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e20:	461a      	mov	r2, r3
 8017e22:	6838      	ldr	r0, [r7, #0]
 8017e24:	f002 f87c 	bl	8019f20 <memcpy>
	}
}
 8017e28:	bf00      	nop
 8017e2a:	3708      	adds	r7, #8
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b084      	sub	sp, #16
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017e38:	f001 fd3c 	bl	80198b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017e44:	e011      	b.n	8017e6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d012      	beq.n	8017e74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	3324      	adds	r3, #36	; 0x24
 8017e52:	4618      	mov	r0, r3
 8017e54:	f000 fd7c 	bl	8018950 <xTaskRemoveFromEventList>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d001      	beq.n	8017e62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017e5e:	f000 feb5 	bl	8018bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017e62:	7bfb      	ldrb	r3, [r7, #15]
 8017e64:	3b01      	subs	r3, #1
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	dce9      	bgt.n	8017e46 <prvUnlockQueue+0x16>
 8017e72:	e000      	b.n	8017e76 <prvUnlockQueue+0x46>
					break;
 8017e74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	22ff      	movs	r2, #255	; 0xff
 8017e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017e7e:	f001 fd49 	bl	8019914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017e82:	f001 fd17 	bl	80198b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017e8e:	e011      	b.n	8017eb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	691b      	ldr	r3, [r3, #16]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d012      	beq.n	8017ebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	3310      	adds	r3, #16
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f000 fd57 	bl	8018950 <xTaskRemoveFromEventList>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d001      	beq.n	8017eac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017ea8:	f000 fe90 	bl	8018bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017eac:	7bbb      	ldrb	r3, [r7, #14]
 8017eae:	3b01      	subs	r3, #1
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	dce9      	bgt.n	8017e90 <prvUnlockQueue+0x60>
 8017ebc:	e000      	b.n	8017ec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017ebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	22ff      	movs	r2, #255	; 0xff
 8017ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017ec8:	f001 fd24 	bl	8019914 <vPortExitCritical>
}
 8017ecc:	bf00      	nop
 8017ece:	3710      	adds	r7, #16
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}

08017ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017edc:	f001 fcea 	bl	80198b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d102      	bne.n	8017eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017ee8:	2301      	movs	r3, #1
 8017eea:	60fb      	str	r3, [r7, #12]
 8017eec:	e001      	b.n	8017ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017ef2:	f001 fd0f 	bl	8019914 <vPortExitCritical>

	return xReturn;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
}
 8017ef8:	4618      	mov	r0, r3
 8017efa:	3710      	adds	r7, #16
 8017efc:	46bd      	mov	sp, r7
 8017efe:	bd80      	pop	{r7, pc}

08017f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b084      	sub	sp, #16
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f08:	f001 fcd4 	bl	80198b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d102      	bne.n	8017f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	60fb      	str	r3, [r7, #12]
 8017f1c:	e001      	b.n	8017f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017f22:	f001 fcf7 	bl	8019914 <vPortExitCritical>

	return xReturn;
 8017f26:	68fb      	ldr	r3, [r7, #12]
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	3710      	adds	r7, #16
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}

08017f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017f30:	b480      	push	{r7}
 8017f32:	b085      	sub	sp, #20
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	60fb      	str	r3, [r7, #12]
 8017f3e:	e014      	b.n	8017f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017f40:	4a0f      	ldr	r2, [pc, #60]	; (8017f80 <vQueueAddToRegistry+0x50>)
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d10b      	bne.n	8017f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017f4c:	490c      	ldr	r1, [pc, #48]	; (8017f80 <vQueueAddToRegistry+0x50>)
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	683a      	ldr	r2, [r7, #0]
 8017f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017f56:	4a0a      	ldr	r2, [pc, #40]	; (8017f80 <vQueueAddToRegistry+0x50>)
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	4413      	add	r3, r2
 8017f5e:	687a      	ldr	r2, [r7, #4]
 8017f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017f62:	e006      	b.n	8017f72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	3301      	adds	r3, #1
 8017f68:	60fb      	str	r3, [r7, #12]
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	2b07      	cmp	r3, #7
 8017f6e:	d9e7      	bls.n	8017f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017f70:	bf00      	nop
 8017f72:	bf00      	nop
 8017f74:	3714      	adds	r7, #20
 8017f76:	46bd      	mov	sp, r7
 8017f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7c:	4770      	bx	lr
 8017f7e:	bf00      	nop
 8017f80:	240026d8 	.word	0x240026d8

08017f84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b086      	sub	sp, #24
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	60b9      	str	r1, [r7, #8]
 8017f8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017f94:	f001 fc8e 	bl	80198b4 <vPortEnterCritical>
 8017f98:	697b      	ldr	r3, [r7, #20]
 8017f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f9e:	b25b      	sxtb	r3, r3
 8017fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fa4:	d103      	bne.n	8017fae <vQueueWaitForMessageRestricted+0x2a>
 8017fa6:	697b      	ldr	r3, [r7, #20]
 8017fa8:	2200      	movs	r2, #0
 8017faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017fb4:	b25b      	sxtb	r3, r3
 8017fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fba:	d103      	bne.n	8017fc4 <vQueueWaitForMessageRestricted+0x40>
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017fc4:	f001 fca6 	bl	8019914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d106      	bne.n	8017fde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	3324      	adds	r3, #36	; 0x24
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	68b9      	ldr	r1, [r7, #8]
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f000 fc8d 	bl	80188f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017fde:	6978      	ldr	r0, [r7, #20]
 8017fe0:	f7ff ff26 	bl	8017e30 <prvUnlockQueue>
	}
 8017fe4:	bf00      	nop
 8017fe6:	3718      	adds	r7, #24
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}

08017fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b08e      	sub	sp, #56	; 0x38
 8017ff0:	af04      	add	r7, sp, #16
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	60b9      	str	r1, [r7, #8]
 8017ff6:	607a      	str	r2, [r7, #4]
 8017ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d10a      	bne.n	8018016 <xTaskCreateStatic+0x2a>
	__asm volatile
 8018000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018004:	f383 8811 	msr	BASEPRI, r3
 8018008:	f3bf 8f6f 	isb	sy
 801800c:	f3bf 8f4f 	dsb	sy
 8018010:	623b      	str	r3, [r7, #32]
}
 8018012:	bf00      	nop
 8018014:	e7fe      	b.n	8018014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018018:	2b00      	cmp	r3, #0
 801801a:	d10a      	bne.n	8018032 <xTaskCreateStatic+0x46>
	__asm volatile
 801801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018020:	f383 8811 	msr	BASEPRI, r3
 8018024:	f3bf 8f6f 	isb	sy
 8018028:	f3bf 8f4f 	dsb	sy
 801802c:	61fb      	str	r3, [r7, #28]
}
 801802e:	bf00      	nop
 8018030:	e7fe      	b.n	8018030 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018032:	235c      	movs	r3, #92	; 0x5c
 8018034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018036:	693b      	ldr	r3, [r7, #16]
 8018038:	2b5c      	cmp	r3, #92	; 0x5c
 801803a:	d00a      	beq.n	8018052 <xTaskCreateStatic+0x66>
	__asm volatile
 801803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018040:	f383 8811 	msr	BASEPRI, r3
 8018044:	f3bf 8f6f 	isb	sy
 8018048:	f3bf 8f4f 	dsb	sy
 801804c:	61bb      	str	r3, [r7, #24]
}
 801804e:	bf00      	nop
 8018050:	e7fe      	b.n	8018050 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018052:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018056:	2b00      	cmp	r3, #0
 8018058:	d01e      	beq.n	8018098 <xTaskCreateStatic+0xac>
 801805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801805c:	2b00      	cmp	r3, #0
 801805e:	d01b      	beq.n	8018098 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018062:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018068:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	2202      	movs	r2, #2
 801806e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018072:	2300      	movs	r3, #0
 8018074:	9303      	str	r3, [sp, #12]
 8018076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018078:	9302      	str	r3, [sp, #8]
 801807a:	f107 0314 	add.w	r3, r7, #20
 801807e:	9301      	str	r3, [sp, #4]
 8018080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018082:	9300      	str	r3, [sp, #0]
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	687a      	ldr	r2, [r7, #4]
 8018088:	68b9      	ldr	r1, [r7, #8]
 801808a:	68f8      	ldr	r0, [r7, #12]
 801808c:	f000 f850 	bl	8018130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018092:	f000 f8dd 	bl	8018250 <prvAddNewTaskToReadyList>
 8018096:	e001      	b.n	801809c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018098:	2300      	movs	r3, #0
 801809a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801809c:	697b      	ldr	r3, [r7, #20]
	}
 801809e:	4618      	mov	r0, r3
 80180a0:	3728      	adds	r7, #40	; 0x28
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}

080180a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80180a6:	b580      	push	{r7, lr}
 80180a8:	b08c      	sub	sp, #48	; 0x30
 80180aa:	af04      	add	r7, sp, #16
 80180ac:	60f8      	str	r0, [r7, #12]
 80180ae:	60b9      	str	r1, [r7, #8]
 80180b0:	603b      	str	r3, [r7, #0]
 80180b2:	4613      	mov	r3, r2
 80180b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80180b6:	88fb      	ldrh	r3, [r7, #6]
 80180b8:	009b      	lsls	r3, r3, #2
 80180ba:	4618      	mov	r0, r3
 80180bc:	f001 fd1c 	bl	8019af8 <pvPortMalloc>
 80180c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d00e      	beq.n	80180e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80180c8:	205c      	movs	r0, #92	; 0x5c
 80180ca:	f001 fd15 	bl	8019af8 <pvPortMalloc>
 80180ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80180d0:	69fb      	ldr	r3, [r7, #28]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d003      	beq.n	80180de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	697a      	ldr	r2, [r7, #20]
 80180da:	631a      	str	r2, [r3, #48]	; 0x30
 80180dc:	e005      	b.n	80180ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80180de:	6978      	ldr	r0, [r7, #20]
 80180e0:	f001 fdd6 	bl	8019c90 <vPortFree>
 80180e4:	e001      	b.n	80180ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80180e6:	2300      	movs	r3, #0
 80180e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80180ea:	69fb      	ldr	r3, [r7, #28]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d017      	beq.n	8018120 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	2200      	movs	r2, #0
 80180f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80180f8:	88fa      	ldrh	r2, [r7, #6]
 80180fa:	2300      	movs	r3, #0
 80180fc:	9303      	str	r3, [sp, #12]
 80180fe:	69fb      	ldr	r3, [r7, #28]
 8018100:	9302      	str	r3, [sp, #8]
 8018102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018104:	9301      	str	r3, [sp, #4]
 8018106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018108:	9300      	str	r3, [sp, #0]
 801810a:	683b      	ldr	r3, [r7, #0]
 801810c:	68b9      	ldr	r1, [r7, #8]
 801810e:	68f8      	ldr	r0, [r7, #12]
 8018110:	f000 f80e 	bl	8018130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018114:	69f8      	ldr	r0, [r7, #28]
 8018116:	f000 f89b 	bl	8018250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801811a:	2301      	movs	r3, #1
 801811c:	61bb      	str	r3, [r7, #24]
 801811e:	e002      	b.n	8018126 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018126:	69bb      	ldr	r3, [r7, #24]
	}
 8018128:	4618      	mov	r0, r3
 801812a:	3720      	adds	r7, #32
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b088      	sub	sp, #32
 8018134:	af00      	add	r7, sp, #0
 8018136:	60f8      	str	r0, [r7, #12]
 8018138:	60b9      	str	r1, [r7, #8]
 801813a:	607a      	str	r2, [r7, #4]
 801813c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018140:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	461a      	mov	r2, r3
 8018148:	21a5      	movs	r1, #165	; 0xa5
 801814a:	f001 fef7 	bl	8019f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018152:	6879      	ldr	r1, [r7, #4]
 8018154:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018158:	440b      	add	r3, r1
 801815a:	009b      	lsls	r3, r3, #2
 801815c:	4413      	add	r3, r2
 801815e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018160:	69bb      	ldr	r3, [r7, #24]
 8018162:	f023 0307 	bic.w	r3, r3, #7
 8018166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018168:	69bb      	ldr	r3, [r7, #24]
 801816a:	f003 0307 	and.w	r3, r3, #7
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00a      	beq.n	8018188 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	617b      	str	r3, [r7, #20]
}
 8018184:	bf00      	nop
 8018186:	e7fe      	b.n	8018186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d01f      	beq.n	80181ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801818e:	2300      	movs	r3, #0
 8018190:	61fb      	str	r3, [r7, #28]
 8018192:	e012      	b.n	80181ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018194:	68ba      	ldr	r2, [r7, #8]
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	4413      	add	r3, r2
 801819a:	7819      	ldrb	r1, [r3, #0]
 801819c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801819e:	69fb      	ldr	r3, [r7, #28]
 80181a0:	4413      	add	r3, r2
 80181a2:	3334      	adds	r3, #52	; 0x34
 80181a4:	460a      	mov	r2, r1
 80181a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80181a8:	68ba      	ldr	r2, [r7, #8]
 80181aa:	69fb      	ldr	r3, [r7, #28]
 80181ac:	4413      	add	r3, r2
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d006      	beq.n	80181c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80181b4:	69fb      	ldr	r3, [r7, #28]
 80181b6:	3301      	adds	r3, #1
 80181b8:	61fb      	str	r3, [r7, #28]
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	2b0f      	cmp	r3, #15
 80181be:	d9e9      	bls.n	8018194 <prvInitialiseNewTask+0x64>
 80181c0:	e000      	b.n	80181c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80181c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80181c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181c6:	2200      	movs	r2, #0
 80181c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80181cc:	e003      	b.n	80181d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80181ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d0:	2200      	movs	r2, #0
 80181d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80181d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d8:	2b37      	cmp	r3, #55	; 0x37
 80181da:	d901      	bls.n	80181e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80181dc:	2337      	movs	r3, #55	; 0x37
 80181de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80181e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80181e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80181ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ee:	2200      	movs	r2, #0
 80181f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80181f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f4:	3304      	adds	r3, #4
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7ff f978 	bl	80174ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80181fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fe:	3318      	adds	r3, #24
 8018200:	4618      	mov	r0, r3
 8018202:	f7ff f973 	bl	80174ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801820a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801820e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801821a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801821e:	2200      	movs	r2, #0
 8018220:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018224:	2200      	movs	r2, #0
 8018226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801822a:	683a      	ldr	r2, [r7, #0]
 801822c:	68f9      	ldr	r1, [r7, #12]
 801822e:	69b8      	ldr	r0, [r7, #24]
 8018230:	f001 fa14 	bl	801965c <pxPortInitialiseStack>
 8018234:	4602      	mov	r2, r0
 8018236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823c:	2b00      	cmp	r3, #0
 801823e:	d002      	beq.n	8018246 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018246:	bf00      	nop
 8018248:	3720      	adds	r7, #32
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}
	...

08018250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018258:	f001 fb2c 	bl	80198b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801825c:	4b2d      	ldr	r3, [pc, #180]	; (8018314 <prvAddNewTaskToReadyList+0xc4>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	3301      	adds	r3, #1
 8018262:	4a2c      	ldr	r2, [pc, #176]	; (8018314 <prvAddNewTaskToReadyList+0xc4>)
 8018264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018266:	4b2c      	ldr	r3, [pc, #176]	; (8018318 <prvAddNewTaskToReadyList+0xc8>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d109      	bne.n	8018282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801826e:	4a2a      	ldr	r2, [pc, #168]	; (8018318 <prvAddNewTaskToReadyList+0xc8>)
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018274:	4b27      	ldr	r3, [pc, #156]	; (8018314 <prvAddNewTaskToReadyList+0xc4>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	2b01      	cmp	r3, #1
 801827a:	d110      	bne.n	801829e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801827c:	f000 fcca 	bl	8018c14 <prvInitialiseTaskLists>
 8018280:	e00d      	b.n	801829e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018282:	4b26      	ldr	r3, [pc, #152]	; (801831c <prvAddNewTaskToReadyList+0xcc>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d109      	bne.n	801829e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801828a:	4b23      	ldr	r3, [pc, #140]	; (8018318 <prvAddNewTaskToReadyList+0xc8>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018294:	429a      	cmp	r2, r3
 8018296:	d802      	bhi.n	801829e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018298:	4a1f      	ldr	r2, [pc, #124]	; (8018318 <prvAddNewTaskToReadyList+0xc8>)
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801829e:	4b20      	ldr	r3, [pc, #128]	; (8018320 <prvAddNewTaskToReadyList+0xd0>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	3301      	adds	r3, #1
 80182a4:	4a1e      	ldr	r2, [pc, #120]	; (8018320 <prvAddNewTaskToReadyList+0xd0>)
 80182a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80182a8:	4b1d      	ldr	r3, [pc, #116]	; (8018320 <prvAddNewTaskToReadyList+0xd0>)
 80182aa:	681a      	ldr	r2, [r3, #0]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182b4:	4b1b      	ldr	r3, [pc, #108]	; (8018324 <prvAddNewTaskToReadyList+0xd4>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d903      	bls.n	80182c4 <prvAddNewTaskToReadyList+0x74>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182c0:	4a18      	ldr	r2, [pc, #96]	; (8018324 <prvAddNewTaskToReadyList+0xd4>)
 80182c2:	6013      	str	r3, [r2, #0]
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182c8:	4613      	mov	r3, r2
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	4413      	add	r3, r2
 80182ce:	009b      	lsls	r3, r3, #2
 80182d0:	4a15      	ldr	r2, [pc, #84]	; (8018328 <prvAddNewTaskToReadyList+0xd8>)
 80182d2:	441a      	add	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	3304      	adds	r3, #4
 80182d8:	4619      	mov	r1, r3
 80182da:	4610      	mov	r0, r2
 80182dc:	f7ff f913 	bl	8017506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80182e0:	f001 fb18 	bl	8019914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80182e4:	4b0d      	ldr	r3, [pc, #52]	; (801831c <prvAddNewTaskToReadyList+0xcc>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d00e      	beq.n	801830a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80182ec:	4b0a      	ldr	r3, [pc, #40]	; (8018318 <prvAddNewTaskToReadyList+0xc8>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d207      	bcs.n	801830a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80182fa:	4b0c      	ldr	r3, [pc, #48]	; (801832c <prvAddNewTaskToReadyList+0xdc>)
 80182fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018300:	601a      	str	r2, [r3, #0]
 8018302:	f3bf 8f4f 	dsb	sy
 8018306:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801830a:	bf00      	nop
 801830c:	3708      	adds	r7, #8
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	24002bec 	.word	0x24002bec
 8018318:	24002718 	.word	0x24002718
 801831c:	24002bf8 	.word	0x24002bf8
 8018320:	24002c08 	.word	0x24002c08
 8018324:	24002bf4 	.word	0x24002bf4
 8018328:	2400271c 	.word	0x2400271c
 801832c:	e000ed04 	.word	0xe000ed04

08018330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018330:	b580      	push	{r7, lr}
 8018332:	b084      	sub	sp, #16
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018338:	2300      	movs	r3, #0
 801833a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d017      	beq.n	8018372 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018342:	4b13      	ldr	r3, [pc, #76]	; (8018390 <vTaskDelay+0x60>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d00a      	beq.n	8018360 <vTaskDelay+0x30>
	__asm volatile
 801834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801834e:	f383 8811 	msr	BASEPRI, r3
 8018352:	f3bf 8f6f 	isb	sy
 8018356:	f3bf 8f4f 	dsb	sy
 801835a:	60bb      	str	r3, [r7, #8]
}
 801835c:	bf00      	nop
 801835e:	e7fe      	b.n	801835e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018360:	f000 f880 	bl	8018464 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018364:	2100      	movs	r1, #0
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f000 fdb6 	bl	8018ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801836c:	f000 f888 	bl	8018480 <xTaskResumeAll>
 8018370:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d107      	bne.n	8018388 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018378:	4b06      	ldr	r3, [pc, #24]	; (8018394 <vTaskDelay+0x64>)
 801837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801837e:	601a      	str	r2, [r3, #0]
 8018380:	f3bf 8f4f 	dsb	sy
 8018384:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018388:	bf00      	nop
 801838a:	3710      	adds	r7, #16
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}
 8018390:	24002c14 	.word	0x24002c14
 8018394:	e000ed04 	.word	0xe000ed04

08018398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b08a      	sub	sp, #40	; 0x28
 801839c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801839e:	2300      	movs	r3, #0
 80183a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80183a2:	2300      	movs	r3, #0
 80183a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80183a6:	463a      	mov	r2, r7
 80183a8:	1d39      	adds	r1, r7, #4
 80183aa:	f107 0308 	add.w	r3, r7, #8
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fe fddc 	bl	8016f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80183b4:	6839      	ldr	r1, [r7, #0]
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	68ba      	ldr	r2, [r7, #8]
 80183ba:	9202      	str	r2, [sp, #8]
 80183bc:	9301      	str	r3, [sp, #4]
 80183be:	2300      	movs	r3, #0
 80183c0:	9300      	str	r3, [sp, #0]
 80183c2:	2300      	movs	r3, #0
 80183c4:	460a      	mov	r2, r1
 80183c6:	4921      	ldr	r1, [pc, #132]	; (801844c <vTaskStartScheduler+0xb4>)
 80183c8:	4821      	ldr	r0, [pc, #132]	; (8018450 <vTaskStartScheduler+0xb8>)
 80183ca:	f7ff fe0f 	bl	8017fec <xTaskCreateStatic>
 80183ce:	4603      	mov	r3, r0
 80183d0:	4a20      	ldr	r2, [pc, #128]	; (8018454 <vTaskStartScheduler+0xbc>)
 80183d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80183d4:	4b1f      	ldr	r3, [pc, #124]	; (8018454 <vTaskStartScheduler+0xbc>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d002      	beq.n	80183e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80183dc:	2301      	movs	r3, #1
 80183de:	617b      	str	r3, [r7, #20]
 80183e0:	e001      	b.n	80183e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80183e2:	2300      	movs	r3, #0
 80183e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80183e6:	697b      	ldr	r3, [r7, #20]
 80183e8:	2b01      	cmp	r3, #1
 80183ea:	d102      	bne.n	80183f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80183ec:	f000 fdc8 	bl	8018f80 <xTimerCreateTimerTask>
 80183f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	d116      	bne.n	8018426 <vTaskStartScheduler+0x8e>
	__asm volatile
 80183f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183fc:	f383 8811 	msr	BASEPRI, r3
 8018400:	f3bf 8f6f 	isb	sy
 8018404:	f3bf 8f4f 	dsb	sy
 8018408:	613b      	str	r3, [r7, #16]
}
 801840a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801840c:	4b12      	ldr	r3, [pc, #72]	; (8018458 <vTaskStartScheduler+0xc0>)
 801840e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018412:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018414:	4b11      	ldr	r3, [pc, #68]	; (801845c <vTaskStartScheduler+0xc4>)
 8018416:	2201      	movs	r2, #1
 8018418:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801841a:	4b11      	ldr	r3, [pc, #68]	; (8018460 <vTaskStartScheduler+0xc8>)
 801841c:	2200      	movs	r2, #0
 801841e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018420:	f001 f9a6 	bl	8019770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018424:	e00e      	b.n	8018444 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018426:	697b      	ldr	r3, [r7, #20]
 8018428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801842c:	d10a      	bne.n	8018444 <vTaskStartScheduler+0xac>
	__asm volatile
 801842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018432:	f383 8811 	msr	BASEPRI, r3
 8018436:	f3bf 8f6f 	isb	sy
 801843a:	f3bf 8f4f 	dsb	sy
 801843e:	60fb      	str	r3, [r7, #12]
}
 8018440:	bf00      	nop
 8018442:	e7fe      	b.n	8018442 <vTaskStartScheduler+0xaa>
}
 8018444:	bf00      	nop
 8018446:	3718      	adds	r7, #24
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}
 801844c:	0801abb0 	.word	0x0801abb0
 8018450:	08018be5 	.word	0x08018be5
 8018454:	24002c10 	.word	0x24002c10
 8018458:	24002c0c 	.word	0x24002c0c
 801845c:	24002bf8 	.word	0x24002bf8
 8018460:	24002bf0 	.word	0x24002bf0

08018464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018464:	b480      	push	{r7}
 8018466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018468:	4b04      	ldr	r3, [pc, #16]	; (801847c <vTaskSuspendAll+0x18>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	3301      	adds	r3, #1
 801846e:	4a03      	ldr	r2, [pc, #12]	; (801847c <vTaskSuspendAll+0x18>)
 8018470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018472:	bf00      	nop
 8018474:	46bd      	mov	sp, r7
 8018476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847a:	4770      	bx	lr
 801847c:	24002c14 	.word	0x24002c14

08018480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018486:	2300      	movs	r3, #0
 8018488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801848a:	2300      	movs	r3, #0
 801848c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801848e:	4b42      	ldr	r3, [pc, #264]	; (8018598 <xTaskResumeAll+0x118>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d10a      	bne.n	80184ac <xTaskResumeAll+0x2c>
	__asm volatile
 8018496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801849a:	f383 8811 	msr	BASEPRI, r3
 801849e:	f3bf 8f6f 	isb	sy
 80184a2:	f3bf 8f4f 	dsb	sy
 80184a6:	603b      	str	r3, [r7, #0]
}
 80184a8:	bf00      	nop
 80184aa:	e7fe      	b.n	80184aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80184ac:	f001 fa02 	bl	80198b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80184b0:	4b39      	ldr	r3, [pc, #228]	; (8018598 <xTaskResumeAll+0x118>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	3b01      	subs	r3, #1
 80184b6:	4a38      	ldr	r2, [pc, #224]	; (8018598 <xTaskResumeAll+0x118>)
 80184b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184ba:	4b37      	ldr	r3, [pc, #220]	; (8018598 <xTaskResumeAll+0x118>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d162      	bne.n	8018588 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80184c2:	4b36      	ldr	r3, [pc, #216]	; (801859c <xTaskResumeAll+0x11c>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d05e      	beq.n	8018588 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80184ca:	e02f      	b.n	801852c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184cc:	4b34      	ldr	r3, [pc, #208]	; (80185a0 <xTaskResumeAll+0x120>)
 80184ce:	68db      	ldr	r3, [r3, #12]
 80184d0:	68db      	ldr	r3, [r3, #12]
 80184d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	3318      	adds	r3, #24
 80184d8:	4618      	mov	r0, r3
 80184da:	f7ff f871 	bl	80175c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	3304      	adds	r3, #4
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7ff f86c 	bl	80175c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184ec:	4b2d      	ldr	r3, [pc, #180]	; (80185a4 <xTaskResumeAll+0x124>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d903      	bls.n	80184fc <xTaskResumeAll+0x7c>
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184f8:	4a2a      	ldr	r2, [pc, #168]	; (80185a4 <xTaskResumeAll+0x124>)
 80184fa:	6013      	str	r3, [r2, #0]
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018500:	4613      	mov	r3, r2
 8018502:	009b      	lsls	r3, r3, #2
 8018504:	4413      	add	r3, r2
 8018506:	009b      	lsls	r3, r3, #2
 8018508:	4a27      	ldr	r2, [pc, #156]	; (80185a8 <xTaskResumeAll+0x128>)
 801850a:	441a      	add	r2, r3
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	3304      	adds	r3, #4
 8018510:	4619      	mov	r1, r3
 8018512:	4610      	mov	r0, r2
 8018514:	f7fe fff7 	bl	8017506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801851c:	4b23      	ldr	r3, [pc, #140]	; (80185ac <xTaskResumeAll+0x12c>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018522:	429a      	cmp	r2, r3
 8018524:	d302      	bcc.n	801852c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018526:	4b22      	ldr	r3, [pc, #136]	; (80185b0 <xTaskResumeAll+0x130>)
 8018528:	2201      	movs	r2, #1
 801852a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801852c:	4b1c      	ldr	r3, [pc, #112]	; (80185a0 <xTaskResumeAll+0x120>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d1cb      	bne.n	80184cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d001      	beq.n	801853e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801853a:	f000 fc09 	bl	8018d50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801853e:	4b1d      	ldr	r3, [pc, #116]	; (80185b4 <xTaskResumeAll+0x134>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d010      	beq.n	801856c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801854a:	f000 f847 	bl	80185dc <xTaskIncrementTick>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	d002      	beq.n	801855a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018554:	4b16      	ldr	r3, [pc, #88]	; (80185b0 <xTaskResumeAll+0x130>)
 8018556:	2201      	movs	r2, #1
 8018558:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	3b01      	subs	r3, #1
 801855e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d1f1      	bne.n	801854a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018566:	4b13      	ldr	r3, [pc, #76]	; (80185b4 <xTaskResumeAll+0x134>)
 8018568:	2200      	movs	r2, #0
 801856a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801856c:	4b10      	ldr	r3, [pc, #64]	; (80185b0 <xTaskResumeAll+0x130>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d009      	beq.n	8018588 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018574:	2301      	movs	r3, #1
 8018576:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018578:	4b0f      	ldr	r3, [pc, #60]	; (80185b8 <xTaskResumeAll+0x138>)
 801857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801857e:	601a      	str	r2, [r3, #0]
 8018580:	f3bf 8f4f 	dsb	sy
 8018584:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018588:	f001 f9c4 	bl	8019914 <vPortExitCritical>

	return xAlreadyYielded;
 801858c:	68bb      	ldr	r3, [r7, #8]
}
 801858e:	4618      	mov	r0, r3
 8018590:	3710      	adds	r7, #16
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	24002c14 	.word	0x24002c14
 801859c:	24002bec 	.word	0x24002bec
 80185a0:	24002bac 	.word	0x24002bac
 80185a4:	24002bf4 	.word	0x24002bf4
 80185a8:	2400271c 	.word	0x2400271c
 80185ac:	24002718 	.word	0x24002718
 80185b0:	24002c00 	.word	0x24002c00
 80185b4:	24002bfc 	.word	0x24002bfc
 80185b8:	e000ed04 	.word	0xe000ed04

080185bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80185bc:	b480      	push	{r7}
 80185be:	b083      	sub	sp, #12
 80185c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80185c2:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <xTaskGetTickCount+0x1c>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80185c8:	687b      	ldr	r3, [r7, #4]
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	370c      	adds	r7, #12
 80185ce:	46bd      	mov	sp, r7
 80185d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d4:	4770      	bx	lr
 80185d6:	bf00      	nop
 80185d8:	24002bf0 	.word	0x24002bf0

080185dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b086      	sub	sp, #24
 80185e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80185e2:	2300      	movs	r3, #0
 80185e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185e6:	4b53      	ldr	r3, [pc, #332]	; (8018734 <xTaskIncrementTick+0x158>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	f040 8095 	bne.w	801871a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80185f0:	4b51      	ldr	r3, [pc, #324]	; (8018738 <xTaskIncrementTick+0x15c>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	3301      	adds	r3, #1
 80185f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80185f8:	4a4f      	ldr	r2, [pc, #316]	; (8018738 <xTaskIncrementTick+0x15c>)
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d120      	bne.n	8018646 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018604:	4b4d      	ldr	r3, [pc, #308]	; (801873c <xTaskIncrementTick+0x160>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d00a      	beq.n	8018624 <xTaskIncrementTick+0x48>
	__asm volatile
 801860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018612:	f383 8811 	msr	BASEPRI, r3
 8018616:	f3bf 8f6f 	isb	sy
 801861a:	f3bf 8f4f 	dsb	sy
 801861e:	603b      	str	r3, [r7, #0]
}
 8018620:	bf00      	nop
 8018622:	e7fe      	b.n	8018622 <xTaskIncrementTick+0x46>
 8018624:	4b45      	ldr	r3, [pc, #276]	; (801873c <xTaskIncrementTick+0x160>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	60fb      	str	r3, [r7, #12]
 801862a:	4b45      	ldr	r3, [pc, #276]	; (8018740 <xTaskIncrementTick+0x164>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	4a43      	ldr	r2, [pc, #268]	; (801873c <xTaskIncrementTick+0x160>)
 8018630:	6013      	str	r3, [r2, #0]
 8018632:	4a43      	ldr	r2, [pc, #268]	; (8018740 <xTaskIncrementTick+0x164>)
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	6013      	str	r3, [r2, #0]
 8018638:	4b42      	ldr	r3, [pc, #264]	; (8018744 <xTaskIncrementTick+0x168>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	3301      	adds	r3, #1
 801863e:	4a41      	ldr	r2, [pc, #260]	; (8018744 <xTaskIncrementTick+0x168>)
 8018640:	6013      	str	r3, [r2, #0]
 8018642:	f000 fb85 	bl	8018d50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018646:	4b40      	ldr	r3, [pc, #256]	; (8018748 <xTaskIncrementTick+0x16c>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	693a      	ldr	r2, [r7, #16]
 801864c:	429a      	cmp	r2, r3
 801864e:	d349      	bcc.n	80186e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018650:	4b3a      	ldr	r3, [pc, #232]	; (801873c <xTaskIncrementTick+0x160>)
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d104      	bne.n	8018664 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801865a:	4b3b      	ldr	r3, [pc, #236]	; (8018748 <xTaskIncrementTick+0x16c>)
 801865c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018660:	601a      	str	r2, [r3, #0]
					break;
 8018662:	e03f      	b.n	80186e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018664:	4b35      	ldr	r3, [pc, #212]	; (801873c <xTaskIncrementTick+0x160>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	68db      	ldr	r3, [r3, #12]
 801866c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018674:	693a      	ldr	r2, [r7, #16]
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	429a      	cmp	r2, r3
 801867a:	d203      	bcs.n	8018684 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801867c:	4a32      	ldr	r2, [pc, #200]	; (8018748 <xTaskIncrementTick+0x16c>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018682:	e02f      	b.n	80186e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	3304      	adds	r3, #4
 8018688:	4618      	mov	r0, r3
 801868a:	f7fe ff99 	bl	80175c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018692:	2b00      	cmp	r3, #0
 8018694:	d004      	beq.n	80186a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	3318      	adds	r3, #24
 801869a:	4618      	mov	r0, r3
 801869c:	f7fe ff90 	bl	80175c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186a4:	4b29      	ldr	r3, [pc, #164]	; (801874c <xTaskIncrementTick+0x170>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	429a      	cmp	r2, r3
 80186aa:	d903      	bls.n	80186b4 <xTaskIncrementTick+0xd8>
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186b0:	4a26      	ldr	r2, [pc, #152]	; (801874c <xTaskIncrementTick+0x170>)
 80186b2:	6013      	str	r3, [r2, #0]
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186b8:	4613      	mov	r3, r2
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	4413      	add	r3, r2
 80186be:	009b      	lsls	r3, r3, #2
 80186c0:	4a23      	ldr	r2, [pc, #140]	; (8018750 <xTaskIncrementTick+0x174>)
 80186c2:	441a      	add	r2, r3
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	3304      	adds	r3, #4
 80186c8:	4619      	mov	r1, r3
 80186ca:	4610      	mov	r0, r2
 80186cc:	f7fe ff1b 	bl	8017506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186d4:	4b1f      	ldr	r3, [pc, #124]	; (8018754 <xTaskIncrementTick+0x178>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186da:	429a      	cmp	r2, r3
 80186dc:	d3b8      	bcc.n	8018650 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80186de:	2301      	movs	r3, #1
 80186e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80186e2:	e7b5      	b.n	8018650 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80186e4:	4b1b      	ldr	r3, [pc, #108]	; (8018754 <xTaskIncrementTick+0x178>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186ea:	4919      	ldr	r1, [pc, #100]	; (8018750 <xTaskIncrementTick+0x174>)
 80186ec:	4613      	mov	r3, r2
 80186ee:	009b      	lsls	r3, r3, #2
 80186f0:	4413      	add	r3, r2
 80186f2:	009b      	lsls	r3, r3, #2
 80186f4:	440b      	add	r3, r1
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b01      	cmp	r3, #1
 80186fa:	d901      	bls.n	8018700 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80186fc:	2301      	movs	r3, #1
 80186fe:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018700:	4b15      	ldr	r3, [pc, #84]	; (8018758 <xTaskIncrementTick+0x17c>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d101      	bne.n	801870c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018708:	f7e9 fe1c 	bl	8002344 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801870c:	4b13      	ldr	r3, [pc, #76]	; (801875c <xTaskIncrementTick+0x180>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d009      	beq.n	8018728 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018714:	2301      	movs	r3, #1
 8018716:	617b      	str	r3, [r7, #20]
 8018718:	e006      	b.n	8018728 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801871a:	4b0f      	ldr	r3, [pc, #60]	; (8018758 <xTaskIncrementTick+0x17c>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	3301      	adds	r3, #1
 8018720:	4a0d      	ldr	r2, [pc, #52]	; (8018758 <xTaskIncrementTick+0x17c>)
 8018722:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018724:	f7e9 fe0e 	bl	8002344 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018728:	697b      	ldr	r3, [r7, #20]
}
 801872a:	4618      	mov	r0, r3
 801872c:	3718      	adds	r7, #24
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}
 8018732:	bf00      	nop
 8018734:	24002c14 	.word	0x24002c14
 8018738:	24002bf0 	.word	0x24002bf0
 801873c:	24002ba4 	.word	0x24002ba4
 8018740:	24002ba8 	.word	0x24002ba8
 8018744:	24002c04 	.word	0x24002c04
 8018748:	24002c0c 	.word	0x24002c0c
 801874c:	24002bf4 	.word	0x24002bf4
 8018750:	2400271c 	.word	0x2400271c
 8018754:	24002718 	.word	0x24002718
 8018758:	24002bfc 	.word	0x24002bfc
 801875c:	24002c00 	.word	0x24002c00

08018760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018766:	4b2f      	ldr	r3, [pc, #188]	; (8018824 <vTaskSwitchContext+0xc4>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d003      	beq.n	8018776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801876e:	4b2e      	ldr	r3, [pc, #184]	; (8018828 <vTaskSwitchContext+0xc8>)
 8018770:	2201      	movs	r2, #1
 8018772:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018774:	e052      	b.n	801881c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018776:	4b2c      	ldr	r3, [pc, #176]	; (8018828 <vTaskSwitchContext+0xc8>)
 8018778:	2200      	movs	r2, #0
 801877a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801877c:	4b2b      	ldr	r3, [pc, #172]	; (801882c <vTaskSwitchContext+0xcc>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	681a      	ldr	r2, [r3, #0]
 8018782:	4b2a      	ldr	r3, [pc, #168]	; (801882c <vTaskSwitchContext+0xcc>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018788:	429a      	cmp	r2, r3
 801878a:	d808      	bhi.n	801879e <vTaskSwitchContext+0x3e>
 801878c:	4b27      	ldr	r3, [pc, #156]	; (801882c <vTaskSwitchContext+0xcc>)
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	4b26      	ldr	r3, [pc, #152]	; (801882c <vTaskSwitchContext+0xcc>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	3334      	adds	r3, #52	; 0x34
 8018796:	4619      	mov	r1, r3
 8018798:	4610      	mov	r0, r2
 801879a:	f7e9 fde1 	bl	8002360 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801879e:	4b24      	ldr	r3, [pc, #144]	; (8018830 <vTaskSwitchContext+0xd0>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	60fb      	str	r3, [r7, #12]
 80187a4:	e010      	b.n	80187c8 <vTaskSwitchContext+0x68>
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d10a      	bne.n	80187c2 <vTaskSwitchContext+0x62>
	__asm volatile
 80187ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b0:	f383 8811 	msr	BASEPRI, r3
 80187b4:	f3bf 8f6f 	isb	sy
 80187b8:	f3bf 8f4f 	dsb	sy
 80187bc:	607b      	str	r3, [r7, #4]
}
 80187be:	bf00      	nop
 80187c0:	e7fe      	b.n	80187c0 <vTaskSwitchContext+0x60>
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	3b01      	subs	r3, #1
 80187c6:	60fb      	str	r3, [r7, #12]
 80187c8:	491a      	ldr	r1, [pc, #104]	; (8018834 <vTaskSwitchContext+0xd4>)
 80187ca:	68fa      	ldr	r2, [r7, #12]
 80187cc:	4613      	mov	r3, r2
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	4413      	add	r3, r2
 80187d2:	009b      	lsls	r3, r3, #2
 80187d4:	440b      	add	r3, r1
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d0e4      	beq.n	80187a6 <vTaskSwitchContext+0x46>
 80187dc:	68fa      	ldr	r2, [r7, #12]
 80187de:	4613      	mov	r3, r2
 80187e0:	009b      	lsls	r3, r3, #2
 80187e2:	4413      	add	r3, r2
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	4a13      	ldr	r2, [pc, #76]	; (8018834 <vTaskSwitchContext+0xd4>)
 80187e8:	4413      	add	r3, r2
 80187ea:	60bb      	str	r3, [r7, #8]
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	685a      	ldr	r2, [r3, #4]
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	605a      	str	r2, [r3, #4]
 80187f6:	68bb      	ldr	r3, [r7, #8]
 80187f8:	685a      	ldr	r2, [r3, #4]
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	3308      	adds	r3, #8
 80187fe:	429a      	cmp	r2, r3
 8018800:	d104      	bne.n	801880c <vTaskSwitchContext+0xac>
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	685a      	ldr	r2, [r3, #4]
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	605a      	str	r2, [r3, #4]
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	4a06      	ldr	r2, [pc, #24]	; (801882c <vTaskSwitchContext+0xcc>)
 8018814:	6013      	str	r3, [r2, #0]
 8018816:	4a06      	ldr	r2, [pc, #24]	; (8018830 <vTaskSwitchContext+0xd0>)
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	6013      	str	r3, [r2, #0]
}
 801881c:	bf00      	nop
 801881e:	3710      	adds	r7, #16
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}
 8018824:	24002c14 	.word	0x24002c14
 8018828:	24002c00 	.word	0x24002c00
 801882c:	24002718 	.word	0x24002718
 8018830:	24002bf4 	.word	0x24002bf4
 8018834:	2400271c 	.word	0x2400271c

08018838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b084      	sub	sp, #16
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d10a      	bne.n	801885e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801884c:	f383 8811 	msr	BASEPRI, r3
 8018850:	f3bf 8f6f 	isb	sy
 8018854:	f3bf 8f4f 	dsb	sy
 8018858:	60fb      	str	r3, [r7, #12]
}
 801885a:	bf00      	nop
 801885c:	e7fe      	b.n	801885c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801885e:	4b07      	ldr	r3, [pc, #28]	; (801887c <vTaskPlaceOnEventList+0x44>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3318      	adds	r3, #24
 8018864:	4619      	mov	r1, r3
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f7fe fe71 	bl	801754e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801886c:	2101      	movs	r1, #1
 801886e:	6838      	ldr	r0, [r7, #0]
 8018870:	f000 fb32 	bl	8018ed8 <prvAddCurrentTaskToDelayedList>
}
 8018874:	bf00      	nop
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	24002718 	.word	0x24002718

08018880 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b086      	sub	sp, #24
 8018884:	af00      	add	r7, sp, #0
 8018886:	60f8      	str	r0, [r7, #12]
 8018888:	60b9      	str	r1, [r7, #8]
 801888a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d10a      	bne.n	80188a8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018896:	f383 8811 	msr	BASEPRI, r3
 801889a:	f3bf 8f6f 	isb	sy
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	617b      	str	r3, [r7, #20]
}
 80188a4:	bf00      	nop
 80188a6:	e7fe      	b.n	80188a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80188a8:	4b11      	ldr	r3, [pc, #68]	; (80188f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d10a      	bne.n	80188c6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80188b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b4:	f383 8811 	msr	BASEPRI, r3
 80188b8:	f3bf 8f6f 	isb	sy
 80188bc:	f3bf 8f4f 	dsb	sy
 80188c0:	613b      	str	r3, [r7, #16]
}
 80188c2:	bf00      	nop
 80188c4:	e7fe      	b.n	80188c4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80188c6:	4b0b      	ldr	r3, [pc, #44]	; (80188f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	68ba      	ldr	r2, [r7, #8]
 80188cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80188d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80188d2:	4b08      	ldr	r3, [pc, #32]	; (80188f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	3318      	adds	r3, #24
 80188d8:	4619      	mov	r1, r3
 80188da:	68f8      	ldr	r0, [r7, #12]
 80188dc:	f7fe fe13 	bl	8017506 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80188e0:	2101      	movs	r1, #1
 80188e2:	6878      	ldr	r0, [r7, #4]
 80188e4:	f000 faf8 	bl	8018ed8 <prvAddCurrentTaskToDelayedList>
}
 80188e8:	bf00      	nop
 80188ea:	3718      	adds	r7, #24
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	24002c14 	.word	0x24002c14
 80188f4:	24002718 	.word	0x24002718

080188f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b086      	sub	sp, #24
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d10a      	bne.n	8018920 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801890e:	f383 8811 	msr	BASEPRI, r3
 8018912:	f3bf 8f6f 	isb	sy
 8018916:	f3bf 8f4f 	dsb	sy
 801891a:	617b      	str	r3, [r7, #20]
}
 801891c:	bf00      	nop
 801891e:	e7fe      	b.n	801891e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018920:	4b0a      	ldr	r3, [pc, #40]	; (801894c <vTaskPlaceOnEventListRestricted+0x54>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	3318      	adds	r3, #24
 8018926:	4619      	mov	r1, r3
 8018928:	68f8      	ldr	r0, [r7, #12]
 801892a:	f7fe fdec 	bl	8017506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d002      	beq.n	801893a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018938:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801893a:	6879      	ldr	r1, [r7, #4]
 801893c:	68b8      	ldr	r0, [r7, #8]
 801893e:	f000 facb 	bl	8018ed8 <prvAddCurrentTaskToDelayedList>
	}
 8018942:	bf00      	nop
 8018944:	3718      	adds	r7, #24
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	24002718 	.word	0x24002718

08018950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b086      	sub	sp, #24
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	68db      	ldr	r3, [r3, #12]
 801895e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018960:	693b      	ldr	r3, [r7, #16]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d10a      	bne.n	801897c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801896a:	f383 8811 	msr	BASEPRI, r3
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	f3bf 8f4f 	dsb	sy
 8018976:	60fb      	str	r3, [r7, #12]
}
 8018978:	bf00      	nop
 801897a:	e7fe      	b.n	801897a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	3318      	adds	r3, #24
 8018980:	4618      	mov	r0, r3
 8018982:	f7fe fe1d 	bl	80175c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018986:	4b1e      	ldr	r3, [pc, #120]	; (8018a00 <xTaskRemoveFromEventList+0xb0>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d11d      	bne.n	80189ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801898e:	693b      	ldr	r3, [r7, #16]
 8018990:	3304      	adds	r3, #4
 8018992:	4618      	mov	r0, r3
 8018994:	f7fe fe14 	bl	80175c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018998:	693b      	ldr	r3, [r7, #16]
 801899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801899c:	4b19      	ldr	r3, [pc, #100]	; (8018a04 <xTaskRemoveFromEventList+0xb4>)
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d903      	bls.n	80189ac <xTaskRemoveFromEventList+0x5c>
 80189a4:	693b      	ldr	r3, [r7, #16]
 80189a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189a8:	4a16      	ldr	r2, [pc, #88]	; (8018a04 <xTaskRemoveFromEventList+0xb4>)
 80189aa:	6013      	str	r3, [r2, #0]
 80189ac:	693b      	ldr	r3, [r7, #16]
 80189ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189b0:	4613      	mov	r3, r2
 80189b2:	009b      	lsls	r3, r3, #2
 80189b4:	4413      	add	r3, r2
 80189b6:	009b      	lsls	r3, r3, #2
 80189b8:	4a13      	ldr	r2, [pc, #76]	; (8018a08 <xTaskRemoveFromEventList+0xb8>)
 80189ba:	441a      	add	r2, r3
 80189bc:	693b      	ldr	r3, [r7, #16]
 80189be:	3304      	adds	r3, #4
 80189c0:	4619      	mov	r1, r3
 80189c2:	4610      	mov	r0, r2
 80189c4:	f7fe fd9f 	bl	8017506 <vListInsertEnd>
 80189c8:	e005      	b.n	80189d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	3318      	adds	r3, #24
 80189ce:	4619      	mov	r1, r3
 80189d0:	480e      	ldr	r0, [pc, #56]	; (8018a0c <xTaskRemoveFromEventList+0xbc>)
 80189d2:	f7fe fd98 	bl	8017506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189da:	4b0d      	ldr	r3, [pc, #52]	; (8018a10 <xTaskRemoveFromEventList+0xc0>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d905      	bls.n	80189f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80189e4:	2301      	movs	r3, #1
 80189e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80189e8:	4b0a      	ldr	r3, [pc, #40]	; (8018a14 <xTaskRemoveFromEventList+0xc4>)
 80189ea:	2201      	movs	r2, #1
 80189ec:	601a      	str	r2, [r3, #0]
 80189ee:	e001      	b.n	80189f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80189f0:	2300      	movs	r3, #0
 80189f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80189f4:	697b      	ldr	r3, [r7, #20]
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3718      	adds	r7, #24
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	24002c14 	.word	0x24002c14
 8018a04:	24002bf4 	.word	0x24002bf4
 8018a08:	2400271c 	.word	0x2400271c
 8018a0c:	24002bac 	.word	0x24002bac
 8018a10:	24002718 	.word	0x24002718
 8018a14:	24002c00 	.word	0x24002c00

08018a18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b086      	sub	sp, #24
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
 8018a20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018a22:	4b29      	ldr	r3, [pc, #164]	; (8018ac8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d10a      	bne.n	8018a40 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a2e:	f383 8811 	msr	BASEPRI, r3
 8018a32:	f3bf 8f6f 	isb	sy
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	613b      	str	r3, [r7, #16]
}
 8018a3c:	bf00      	nop
 8018a3e:	e7fe      	b.n	8018a3e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	68db      	ldr	r3, [r3, #12]
 8018a4e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d10a      	bne.n	8018a6c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a5a:	f383 8811 	msr	BASEPRI, r3
 8018a5e:	f3bf 8f6f 	isb	sy
 8018a62:	f3bf 8f4f 	dsb	sy
 8018a66:	60fb      	str	r3, [r7, #12]
}
 8018a68:	bf00      	nop
 8018a6a:	e7fe      	b.n	8018a6a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f7fe fda7 	bl	80175c0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	3304      	adds	r3, #4
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7fe fda2 	bl	80175c0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a80:	4b12      	ldr	r3, [pc, #72]	; (8018acc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d903      	bls.n	8018a90 <vTaskRemoveFromUnorderedEventList+0x78>
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a8c:	4a0f      	ldr	r2, [pc, #60]	; (8018acc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018a8e:	6013      	str	r3, [r2, #0]
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a94:	4613      	mov	r3, r2
 8018a96:	009b      	lsls	r3, r3, #2
 8018a98:	4413      	add	r3, r2
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	4a0c      	ldr	r2, [pc, #48]	; (8018ad0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018a9e:	441a      	add	r2, r3
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	3304      	adds	r3, #4
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	f7fe fd2d 	bl	8017506 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab0:	4b08      	ldr	r3, [pc, #32]	; (8018ad4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d902      	bls.n	8018ac0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018aba:	4b07      	ldr	r3, [pc, #28]	; (8018ad8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018abc:	2201      	movs	r2, #1
 8018abe:	601a      	str	r2, [r3, #0]
	}
}
 8018ac0:	bf00      	nop
 8018ac2:	3718      	adds	r7, #24
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	24002c14 	.word	0x24002c14
 8018acc:	24002bf4 	.word	0x24002bf4
 8018ad0:	2400271c 	.word	0x2400271c
 8018ad4:	24002718 	.word	0x24002718
 8018ad8:	24002c00 	.word	0x24002c00

08018adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018adc:	b480      	push	{r7}
 8018ade:	b083      	sub	sp, #12
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018ae4:	4b06      	ldr	r3, [pc, #24]	; (8018b00 <vTaskInternalSetTimeOutState+0x24>)
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018aec:	4b05      	ldr	r3, [pc, #20]	; (8018b04 <vTaskInternalSetTimeOutState+0x28>)
 8018aee:	681a      	ldr	r2, [r3, #0]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	605a      	str	r2, [r3, #4]
}
 8018af4:	bf00      	nop
 8018af6:	370c      	adds	r7, #12
 8018af8:	46bd      	mov	sp, r7
 8018afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afe:	4770      	bx	lr
 8018b00:	24002c04 	.word	0x24002c04
 8018b04:	24002bf0 	.word	0x24002bf0

08018b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b088      	sub	sp, #32
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d10a      	bne.n	8018b2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1c:	f383 8811 	msr	BASEPRI, r3
 8018b20:	f3bf 8f6f 	isb	sy
 8018b24:	f3bf 8f4f 	dsb	sy
 8018b28:	613b      	str	r3, [r7, #16]
}
 8018b2a:	bf00      	nop
 8018b2c:	e7fe      	b.n	8018b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d10a      	bne.n	8018b4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b38:	f383 8811 	msr	BASEPRI, r3
 8018b3c:	f3bf 8f6f 	isb	sy
 8018b40:	f3bf 8f4f 	dsb	sy
 8018b44:	60fb      	str	r3, [r7, #12]
}
 8018b46:	bf00      	nop
 8018b48:	e7fe      	b.n	8018b48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018b4a:	f000 feb3 	bl	80198b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018b4e:	4b1d      	ldr	r3, [pc, #116]	; (8018bc4 <xTaskCheckForTimeOut+0xbc>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	685b      	ldr	r3, [r3, #4]
 8018b58:	69ba      	ldr	r2, [r7, #24]
 8018b5a:	1ad3      	subs	r3, r2, r3
 8018b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b66:	d102      	bne.n	8018b6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018b68:	2300      	movs	r3, #0
 8018b6a:	61fb      	str	r3, [r7, #28]
 8018b6c:	e023      	b.n	8018bb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	4b15      	ldr	r3, [pc, #84]	; (8018bc8 <xTaskCheckForTimeOut+0xc0>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d007      	beq.n	8018b8a <xTaskCheckForTimeOut+0x82>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	685b      	ldr	r3, [r3, #4]
 8018b7e:	69ba      	ldr	r2, [r7, #24]
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d302      	bcc.n	8018b8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018b84:	2301      	movs	r3, #1
 8018b86:	61fb      	str	r3, [r7, #28]
 8018b88:	e015      	b.n	8018bb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018b8a:	683b      	ldr	r3, [r7, #0]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	697a      	ldr	r2, [r7, #20]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d20b      	bcs.n	8018bac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	1ad2      	subs	r2, r2, r3
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f7ff ff9b 	bl	8018adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	61fb      	str	r3, [r7, #28]
 8018baa:	e004      	b.n	8018bb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018bb6:	f000 fead 	bl	8019914 <vPortExitCritical>

	return xReturn;
 8018bba:	69fb      	ldr	r3, [r7, #28]
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3720      	adds	r7, #32
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	24002bf0 	.word	0x24002bf0
 8018bc8:	24002c04 	.word	0x24002c04

08018bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018bcc:	b480      	push	{r7}
 8018bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018bd0:	4b03      	ldr	r3, [pc, #12]	; (8018be0 <vTaskMissedYield+0x14>)
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	601a      	str	r2, [r3, #0]
}
 8018bd6:	bf00      	nop
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bde:	4770      	bx	lr
 8018be0:	24002c00 	.word	0x24002c00

08018be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018bec:	f000 f852 	bl	8018c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018bf0:	4b06      	ldr	r3, [pc, #24]	; (8018c0c <prvIdleTask+0x28>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	2b01      	cmp	r3, #1
 8018bf6:	d9f9      	bls.n	8018bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8018bf8:	4b05      	ldr	r3, [pc, #20]	; (8018c10 <prvIdleTask+0x2c>)
 8018bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bfe:	601a      	str	r2, [r3, #0]
 8018c00:	f3bf 8f4f 	dsb	sy
 8018c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018c08:	e7f0      	b.n	8018bec <prvIdleTask+0x8>
 8018c0a:	bf00      	nop
 8018c0c:	2400271c 	.word	0x2400271c
 8018c10:	e000ed04 	.word	0xe000ed04

08018c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b082      	sub	sp, #8
 8018c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	607b      	str	r3, [r7, #4]
 8018c1e:	e00c      	b.n	8018c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018c20:	687a      	ldr	r2, [r7, #4]
 8018c22:	4613      	mov	r3, r2
 8018c24:	009b      	lsls	r3, r3, #2
 8018c26:	4413      	add	r3, r2
 8018c28:	009b      	lsls	r3, r3, #2
 8018c2a:	4a12      	ldr	r2, [pc, #72]	; (8018c74 <prvInitialiseTaskLists+0x60>)
 8018c2c:	4413      	add	r3, r2
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7fe fc3c 	bl	80174ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	3301      	adds	r3, #1
 8018c38:	607b      	str	r3, [r7, #4]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	2b37      	cmp	r3, #55	; 0x37
 8018c3e:	d9ef      	bls.n	8018c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018c40:	480d      	ldr	r0, [pc, #52]	; (8018c78 <prvInitialiseTaskLists+0x64>)
 8018c42:	f7fe fc33 	bl	80174ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018c46:	480d      	ldr	r0, [pc, #52]	; (8018c7c <prvInitialiseTaskLists+0x68>)
 8018c48:	f7fe fc30 	bl	80174ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018c4c:	480c      	ldr	r0, [pc, #48]	; (8018c80 <prvInitialiseTaskLists+0x6c>)
 8018c4e:	f7fe fc2d 	bl	80174ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018c52:	480c      	ldr	r0, [pc, #48]	; (8018c84 <prvInitialiseTaskLists+0x70>)
 8018c54:	f7fe fc2a 	bl	80174ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018c58:	480b      	ldr	r0, [pc, #44]	; (8018c88 <prvInitialiseTaskLists+0x74>)
 8018c5a:	f7fe fc27 	bl	80174ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018c5e:	4b0b      	ldr	r3, [pc, #44]	; (8018c8c <prvInitialiseTaskLists+0x78>)
 8018c60:	4a05      	ldr	r2, [pc, #20]	; (8018c78 <prvInitialiseTaskLists+0x64>)
 8018c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018c64:	4b0a      	ldr	r3, [pc, #40]	; (8018c90 <prvInitialiseTaskLists+0x7c>)
 8018c66:	4a05      	ldr	r2, [pc, #20]	; (8018c7c <prvInitialiseTaskLists+0x68>)
 8018c68:	601a      	str	r2, [r3, #0]
}
 8018c6a:	bf00      	nop
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	2400271c 	.word	0x2400271c
 8018c78:	24002b7c 	.word	0x24002b7c
 8018c7c:	24002b90 	.word	0x24002b90
 8018c80:	24002bac 	.word	0x24002bac
 8018c84:	24002bc0 	.word	0x24002bc0
 8018c88:	24002bd8 	.word	0x24002bd8
 8018c8c:	24002ba4 	.word	0x24002ba4
 8018c90:	24002ba8 	.word	0x24002ba8

08018c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018c9a:	e019      	b.n	8018cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018c9c:	f000 fe0a 	bl	80198b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ca0:	4b10      	ldr	r3, [pc, #64]	; (8018ce4 <prvCheckTasksWaitingTermination+0x50>)
 8018ca2:	68db      	ldr	r3, [r3, #12]
 8018ca4:	68db      	ldr	r3, [r3, #12]
 8018ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	3304      	adds	r3, #4
 8018cac:	4618      	mov	r0, r3
 8018cae:	f7fe fc87 	bl	80175c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018cb2:	4b0d      	ldr	r3, [pc, #52]	; (8018ce8 <prvCheckTasksWaitingTermination+0x54>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	3b01      	subs	r3, #1
 8018cb8:	4a0b      	ldr	r2, [pc, #44]	; (8018ce8 <prvCheckTasksWaitingTermination+0x54>)
 8018cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018cbc:	4b0b      	ldr	r3, [pc, #44]	; (8018cec <prvCheckTasksWaitingTermination+0x58>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	3b01      	subs	r3, #1
 8018cc2:	4a0a      	ldr	r2, [pc, #40]	; (8018cec <prvCheckTasksWaitingTermination+0x58>)
 8018cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018cc6:	f000 fe25 	bl	8019914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f000 f810 	bl	8018cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018cd0:	4b06      	ldr	r3, [pc, #24]	; (8018cec <prvCheckTasksWaitingTermination+0x58>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d1e1      	bne.n	8018c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018cd8:	bf00      	nop
 8018cda:	bf00      	nop
 8018cdc:	3708      	adds	r7, #8
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	24002bc0 	.word	0x24002bc0
 8018ce8:	24002bec 	.word	0x24002bec
 8018cec:	24002bd4 	.word	0x24002bd4

08018cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d108      	bne.n	8018d14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d06:	4618      	mov	r0, r3
 8018d08:	f000 ffc2 	bl	8019c90 <vPortFree>
				vPortFree( pxTCB );
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f000 ffbf 	bl	8019c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018d12:	e018      	b.n	8018d46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d1a:	2b01      	cmp	r3, #1
 8018d1c:	d103      	bne.n	8018d26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f000 ffb6 	bl	8019c90 <vPortFree>
	}
 8018d24:	e00f      	b.n	8018d46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d2c:	2b02      	cmp	r3, #2
 8018d2e:	d00a      	beq.n	8018d46 <prvDeleteTCB+0x56>
	__asm volatile
 8018d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d34:	f383 8811 	msr	BASEPRI, r3
 8018d38:	f3bf 8f6f 	isb	sy
 8018d3c:	f3bf 8f4f 	dsb	sy
 8018d40:	60fb      	str	r3, [r7, #12]
}
 8018d42:	bf00      	nop
 8018d44:	e7fe      	b.n	8018d44 <prvDeleteTCB+0x54>
	}
 8018d46:	bf00      	nop
 8018d48:	3710      	adds	r7, #16
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}
	...

08018d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018d56:	4b0c      	ldr	r3, [pc, #48]	; (8018d88 <prvResetNextTaskUnblockTime+0x38>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d104      	bne.n	8018d6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018d60:	4b0a      	ldr	r3, [pc, #40]	; (8018d8c <prvResetNextTaskUnblockTime+0x3c>)
 8018d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018d68:	e008      	b.n	8018d7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d6a:	4b07      	ldr	r3, [pc, #28]	; (8018d88 <prvResetNextTaskUnblockTime+0x38>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	68db      	ldr	r3, [r3, #12]
 8018d70:	68db      	ldr	r3, [r3, #12]
 8018d72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	685b      	ldr	r3, [r3, #4]
 8018d78:	4a04      	ldr	r2, [pc, #16]	; (8018d8c <prvResetNextTaskUnblockTime+0x3c>)
 8018d7a:	6013      	str	r3, [r2, #0]
}
 8018d7c:	bf00      	nop
 8018d7e:	370c      	adds	r7, #12
 8018d80:	46bd      	mov	sp, r7
 8018d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d86:	4770      	bx	lr
 8018d88:	24002ba4 	.word	0x24002ba4
 8018d8c:	24002c0c 	.word	0x24002c0c

08018d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018d90:	b480      	push	{r7}
 8018d92:	b083      	sub	sp, #12
 8018d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018d96:	4b0b      	ldr	r3, [pc, #44]	; (8018dc4 <xTaskGetSchedulerState+0x34>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d102      	bne.n	8018da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018d9e:	2301      	movs	r3, #1
 8018da0:	607b      	str	r3, [r7, #4]
 8018da2:	e008      	b.n	8018db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018da4:	4b08      	ldr	r3, [pc, #32]	; (8018dc8 <xTaskGetSchedulerState+0x38>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d102      	bne.n	8018db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018dac:	2302      	movs	r3, #2
 8018dae:	607b      	str	r3, [r7, #4]
 8018db0:	e001      	b.n	8018db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018db2:	2300      	movs	r3, #0
 8018db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018db6:	687b      	ldr	r3, [r7, #4]
	}
 8018db8:	4618      	mov	r0, r3
 8018dba:	370c      	adds	r7, #12
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc2:	4770      	bx	lr
 8018dc4:	24002bf8 	.word	0x24002bf8
 8018dc8:	24002c14 	.word	0x24002c14

08018dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b086      	sub	sp, #24
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d056      	beq.n	8018e90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018de2:	4b2e      	ldr	r3, [pc, #184]	; (8018e9c <xTaskPriorityDisinherit+0xd0>)
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	693a      	ldr	r2, [r7, #16]
 8018de8:	429a      	cmp	r2, r3
 8018dea:	d00a      	beq.n	8018e02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df0:	f383 8811 	msr	BASEPRI, r3
 8018df4:	f3bf 8f6f 	isb	sy
 8018df8:	f3bf 8f4f 	dsb	sy
 8018dfc:	60fb      	str	r3, [r7, #12]
}
 8018dfe:	bf00      	nop
 8018e00:	e7fe      	b.n	8018e00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d10a      	bne.n	8018e20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e0e:	f383 8811 	msr	BASEPRI, r3
 8018e12:	f3bf 8f6f 	isb	sy
 8018e16:	f3bf 8f4f 	dsb	sy
 8018e1a:	60bb      	str	r3, [r7, #8]
}
 8018e1c:	bf00      	nop
 8018e1e:	e7fe      	b.n	8018e1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e24:	1e5a      	subs	r2, r3, #1
 8018e26:	693b      	ldr	r3, [r7, #16]
 8018e28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d02c      	beq.n	8018e90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d128      	bne.n	8018e90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e3e:	693b      	ldr	r3, [r7, #16]
 8018e40:	3304      	adds	r3, #4
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fe fbbc 	bl	80175c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018e48:	693b      	ldr	r3, [r7, #16]
 8018e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018e58:	693b      	ldr	r3, [r7, #16]
 8018e5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e60:	4b0f      	ldr	r3, [pc, #60]	; (8018ea0 <xTaskPriorityDisinherit+0xd4>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d903      	bls.n	8018e70 <xTaskPriorityDisinherit+0xa4>
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e6c:	4a0c      	ldr	r2, [pc, #48]	; (8018ea0 <xTaskPriorityDisinherit+0xd4>)
 8018e6e:	6013      	str	r3, [r2, #0]
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e74:	4613      	mov	r3, r2
 8018e76:	009b      	lsls	r3, r3, #2
 8018e78:	4413      	add	r3, r2
 8018e7a:	009b      	lsls	r3, r3, #2
 8018e7c:	4a09      	ldr	r2, [pc, #36]	; (8018ea4 <xTaskPriorityDisinherit+0xd8>)
 8018e7e:	441a      	add	r2, r3
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	3304      	adds	r3, #4
 8018e84:	4619      	mov	r1, r3
 8018e86:	4610      	mov	r0, r2
 8018e88:	f7fe fb3d 	bl	8017506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018e8c:	2301      	movs	r3, #1
 8018e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018e90:	697b      	ldr	r3, [r7, #20]
	}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3718      	adds	r7, #24
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	24002718 	.word	0x24002718
 8018ea0:	24002bf4 	.word	0x24002bf4
 8018ea4:	2400271c 	.word	0x2400271c

08018ea8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018ea8:	b480      	push	{r7}
 8018eaa:	b083      	sub	sp, #12
 8018eac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018eae:	4b09      	ldr	r3, [pc, #36]	; (8018ed4 <uxTaskResetEventItemValue+0x2c>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	699b      	ldr	r3, [r3, #24]
 8018eb4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018eb6:	4b07      	ldr	r3, [pc, #28]	; (8018ed4 <uxTaskResetEventItemValue+0x2c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ebc:	4b05      	ldr	r3, [pc, #20]	; (8018ed4 <uxTaskResetEventItemValue+0x2c>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018ec4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018ec6:	687b      	ldr	r3, [r7, #4]
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	370c      	adds	r7, #12
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr
 8018ed4:	24002718 	.word	0x24002718

08018ed8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b084      	sub	sp, #16
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018ee2:	4b21      	ldr	r3, [pc, #132]	; (8018f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ee8:	4b20      	ldr	r3, [pc, #128]	; (8018f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	3304      	adds	r3, #4
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7fe fb66 	bl	80175c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018efa:	d10a      	bne.n	8018f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d007      	beq.n	8018f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f02:	4b1a      	ldr	r3, [pc, #104]	; (8018f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	3304      	adds	r3, #4
 8018f08:	4619      	mov	r1, r3
 8018f0a:	4819      	ldr	r0, [pc, #100]	; (8018f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8018f0c:	f7fe fafb 	bl	8017506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018f10:	e026      	b.n	8018f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018f12:	68fa      	ldr	r2, [r7, #12]
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	4413      	add	r3, r2
 8018f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018f1a:	4b14      	ldr	r3, [pc, #80]	; (8018f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	68ba      	ldr	r2, [r7, #8]
 8018f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018f22:	68ba      	ldr	r2, [r7, #8]
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d209      	bcs.n	8018f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f2a:	4b12      	ldr	r3, [pc, #72]	; (8018f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018f2c:	681a      	ldr	r2, [r3, #0]
 8018f2e:	4b0f      	ldr	r3, [pc, #60]	; (8018f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	3304      	adds	r3, #4
 8018f34:	4619      	mov	r1, r3
 8018f36:	4610      	mov	r0, r2
 8018f38:	f7fe fb09 	bl	801754e <vListInsert>
}
 8018f3c:	e010      	b.n	8018f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f3e:	4b0e      	ldr	r3, [pc, #56]	; (8018f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018f40:	681a      	ldr	r2, [r3, #0]
 8018f42:	4b0a      	ldr	r3, [pc, #40]	; (8018f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	3304      	adds	r3, #4
 8018f48:	4619      	mov	r1, r3
 8018f4a:	4610      	mov	r0, r2
 8018f4c:	f7fe faff 	bl	801754e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018f50:	4b0a      	ldr	r3, [pc, #40]	; (8018f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	68ba      	ldr	r2, [r7, #8]
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d202      	bcs.n	8018f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018f5a:	4a08      	ldr	r2, [pc, #32]	; (8018f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	6013      	str	r3, [r2, #0]
}
 8018f60:	bf00      	nop
 8018f62:	3710      	adds	r7, #16
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bd80      	pop	{r7, pc}
 8018f68:	24002bf0 	.word	0x24002bf0
 8018f6c:	24002718 	.word	0x24002718
 8018f70:	24002bd8 	.word	0x24002bd8
 8018f74:	24002ba8 	.word	0x24002ba8
 8018f78:	24002ba4 	.word	0x24002ba4
 8018f7c:	24002c0c 	.word	0x24002c0c

08018f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b08a      	sub	sp, #40	; 0x28
 8018f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018f86:	2300      	movs	r3, #0
 8018f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018f8a:	f000 fb07 	bl	801959c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018f8e:	4b1c      	ldr	r3, [pc, #112]	; (8019000 <xTimerCreateTimerTask+0x80>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d021      	beq.n	8018fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018f96:	2300      	movs	r3, #0
 8018f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018f9e:	1d3a      	adds	r2, r7, #4
 8018fa0:	f107 0108 	add.w	r1, r7, #8
 8018fa4:	f107 030c 	add.w	r3, r7, #12
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7fd fff9 	bl	8016fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018fae:	6879      	ldr	r1, [r7, #4]
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	68fa      	ldr	r2, [r7, #12]
 8018fb4:	9202      	str	r2, [sp, #8]
 8018fb6:	9301      	str	r3, [sp, #4]
 8018fb8:	2302      	movs	r3, #2
 8018fba:	9300      	str	r3, [sp, #0]
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	460a      	mov	r2, r1
 8018fc0:	4910      	ldr	r1, [pc, #64]	; (8019004 <xTimerCreateTimerTask+0x84>)
 8018fc2:	4811      	ldr	r0, [pc, #68]	; (8019008 <xTimerCreateTimerTask+0x88>)
 8018fc4:	f7ff f812 	bl	8017fec <xTaskCreateStatic>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	4a10      	ldr	r2, [pc, #64]	; (801900c <xTimerCreateTimerTask+0x8c>)
 8018fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018fce:	4b0f      	ldr	r3, [pc, #60]	; (801900c <xTimerCreateTimerTask+0x8c>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d001      	beq.n	8018fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d10a      	bne.n	8018ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe4:	f383 8811 	msr	BASEPRI, r3
 8018fe8:	f3bf 8f6f 	isb	sy
 8018fec:	f3bf 8f4f 	dsb	sy
 8018ff0:	613b      	str	r3, [r7, #16]
}
 8018ff2:	bf00      	nop
 8018ff4:	e7fe      	b.n	8018ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018ff6:	697b      	ldr	r3, [r7, #20]
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3718      	adds	r7, #24
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}
 8019000:	24002c48 	.word	0x24002c48
 8019004:	0801abb8 	.word	0x0801abb8
 8019008:	08019145 	.word	0x08019145
 801900c:	24002c4c 	.word	0x24002c4c

08019010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b08a      	sub	sp, #40	; 0x28
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
 801901c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801901e:	2300      	movs	r3, #0
 8019020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d10a      	bne.n	801903e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801902c:	f383 8811 	msr	BASEPRI, r3
 8019030:	f3bf 8f6f 	isb	sy
 8019034:	f3bf 8f4f 	dsb	sy
 8019038:	623b      	str	r3, [r7, #32]
}
 801903a:	bf00      	nop
 801903c:	e7fe      	b.n	801903c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801903e:	4b1a      	ldr	r3, [pc, #104]	; (80190a8 <xTimerGenericCommand+0x98>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d02a      	beq.n	801909c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019046:	68bb      	ldr	r3, [r7, #8]
 8019048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	2b05      	cmp	r3, #5
 8019056:	dc18      	bgt.n	801908a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019058:	f7ff fe9a 	bl	8018d90 <xTaskGetSchedulerState>
 801905c:	4603      	mov	r3, r0
 801905e:	2b02      	cmp	r3, #2
 8019060:	d109      	bne.n	8019076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019062:	4b11      	ldr	r3, [pc, #68]	; (80190a8 <xTimerGenericCommand+0x98>)
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	f107 0110 	add.w	r1, r7, #16
 801906a:	2300      	movs	r3, #0
 801906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801906e:	f7fe fbd5 	bl	801781c <xQueueGenericSend>
 8019072:	6278      	str	r0, [r7, #36]	; 0x24
 8019074:	e012      	b.n	801909c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019076:	4b0c      	ldr	r3, [pc, #48]	; (80190a8 <xTimerGenericCommand+0x98>)
 8019078:	6818      	ldr	r0, [r3, #0]
 801907a:	f107 0110 	add.w	r1, r7, #16
 801907e:	2300      	movs	r3, #0
 8019080:	2200      	movs	r2, #0
 8019082:	f7fe fbcb 	bl	801781c <xQueueGenericSend>
 8019086:	6278      	str	r0, [r7, #36]	; 0x24
 8019088:	e008      	b.n	801909c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801908a:	4b07      	ldr	r3, [pc, #28]	; (80190a8 <xTimerGenericCommand+0x98>)
 801908c:	6818      	ldr	r0, [r3, #0]
 801908e:	f107 0110 	add.w	r1, r7, #16
 8019092:	2300      	movs	r3, #0
 8019094:	683a      	ldr	r2, [r7, #0]
 8019096:	f7fe fcbf 	bl	8017a18 <xQueueGenericSendFromISR>
 801909a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801909e:	4618      	mov	r0, r3
 80190a0:	3728      	adds	r7, #40	; 0x28
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}
 80190a6:	bf00      	nop
 80190a8:	24002c48 	.word	0x24002c48

080190ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b088      	sub	sp, #32
 80190b0:	af02      	add	r7, sp, #8
 80190b2:	6078      	str	r0, [r7, #4]
 80190b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190b6:	4b22      	ldr	r3, [pc, #136]	; (8019140 <prvProcessExpiredTimer+0x94>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	68db      	ldr	r3, [r3, #12]
 80190bc:	68db      	ldr	r3, [r3, #12]
 80190be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	3304      	adds	r3, #4
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7fe fa7b 	bl	80175c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190d0:	f003 0304 	and.w	r3, r3, #4
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d022      	beq.n	801911e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	699a      	ldr	r2, [r3, #24]
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	18d1      	adds	r1, r2, r3
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	683a      	ldr	r2, [r7, #0]
 80190e4:	6978      	ldr	r0, [r7, #20]
 80190e6:	f000 f8d1 	bl	801928c <prvInsertTimerInActiveList>
 80190ea:	4603      	mov	r3, r0
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d01f      	beq.n	8019130 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80190f0:	2300      	movs	r3, #0
 80190f2:	9300      	str	r3, [sp, #0]
 80190f4:	2300      	movs	r3, #0
 80190f6:	687a      	ldr	r2, [r7, #4]
 80190f8:	2100      	movs	r1, #0
 80190fa:	6978      	ldr	r0, [r7, #20]
 80190fc:	f7ff ff88 	bl	8019010 <xTimerGenericCommand>
 8019100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d113      	bne.n	8019130 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801910c:	f383 8811 	msr	BASEPRI, r3
 8019110:	f3bf 8f6f 	isb	sy
 8019114:	f3bf 8f4f 	dsb	sy
 8019118:	60fb      	str	r3, [r7, #12]
}
 801911a:	bf00      	nop
 801911c:	e7fe      	b.n	801911c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801911e:	697b      	ldr	r3, [r7, #20]
 8019120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019124:	f023 0301 	bic.w	r3, r3, #1
 8019128:	b2da      	uxtb	r2, r3
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019130:	697b      	ldr	r3, [r7, #20]
 8019132:	6a1b      	ldr	r3, [r3, #32]
 8019134:	6978      	ldr	r0, [r7, #20]
 8019136:	4798      	blx	r3
}
 8019138:	bf00      	nop
 801913a:	3718      	adds	r7, #24
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}
 8019140:	24002c40 	.word	0x24002c40

08019144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b084      	sub	sp, #16
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801914c:	f107 0308 	add.w	r3, r7, #8
 8019150:	4618      	mov	r0, r3
 8019152:	f000 f857 	bl	8019204 <prvGetNextExpireTime>
 8019156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019158:	68bb      	ldr	r3, [r7, #8]
 801915a:	4619      	mov	r1, r3
 801915c:	68f8      	ldr	r0, [r7, #12]
 801915e:	f000 f803 	bl	8019168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019162:	f000 f8d5 	bl	8019310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019166:	e7f1      	b.n	801914c <prvTimerTask+0x8>

08019168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019172:	f7ff f977 	bl	8018464 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019176:	f107 0308 	add.w	r3, r7, #8
 801917a:	4618      	mov	r0, r3
 801917c:	f000 f866 	bl	801924c <prvSampleTimeNow>
 8019180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019182:	68bb      	ldr	r3, [r7, #8]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d130      	bne.n	80191ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019188:	683b      	ldr	r3, [r7, #0]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d10a      	bne.n	80191a4 <prvProcessTimerOrBlockTask+0x3c>
 801918e:	687a      	ldr	r2, [r7, #4]
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	429a      	cmp	r2, r3
 8019194:	d806      	bhi.n	80191a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019196:	f7ff f973 	bl	8018480 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801919a:	68f9      	ldr	r1, [r7, #12]
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	f7ff ff85 	bl	80190ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80191a2:	e024      	b.n	80191ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d008      	beq.n	80191bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80191aa:	4b13      	ldr	r3, [pc, #76]	; (80191f8 <prvProcessTimerOrBlockTask+0x90>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d101      	bne.n	80191b8 <prvProcessTimerOrBlockTask+0x50>
 80191b4:	2301      	movs	r3, #1
 80191b6:	e000      	b.n	80191ba <prvProcessTimerOrBlockTask+0x52>
 80191b8:	2300      	movs	r3, #0
 80191ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80191bc:	4b0f      	ldr	r3, [pc, #60]	; (80191fc <prvProcessTimerOrBlockTask+0x94>)
 80191be:	6818      	ldr	r0, [r3, #0]
 80191c0:	687a      	ldr	r2, [r7, #4]
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	1ad3      	subs	r3, r2, r3
 80191c6:	683a      	ldr	r2, [r7, #0]
 80191c8:	4619      	mov	r1, r3
 80191ca:	f7fe fedb 	bl	8017f84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80191ce:	f7ff f957 	bl	8018480 <xTaskResumeAll>
 80191d2:	4603      	mov	r3, r0
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d10a      	bne.n	80191ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80191d8:	4b09      	ldr	r3, [pc, #36]	; (8019200 <prvProcessTimerOrBlockTask+0x98>)
 80191da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191de:	601a      	str	r2, [r3, #0]
 80191e0:	f3bf 8f4f 	dsb	sy
 80191e4:	f3bf 8f6f 	isb	sy
}
 80191e8:	e001      	b.n	80191ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80191ea:	f7ff f949 	bl	8018480 <xTaskResumeAll>
}
 80191ee:	bf00      	nop
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	24002c44 	.word	0x24002c44
 80191fc:	24002c48 	.word	0x24002c48
 8019200:	e000ed04 	.word	0xe000ed04

08019204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019204:	b480      	push	{r7}
 8019206:	b085      	sub	sp, #20
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801920c:	4b0e      	ldr	r3, [pc, #56]	; (8019248 <prvGetNextExpireTime+0x44>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d101      	bne.n	801921a <prvGetNextExpireTime+0x16>
 8019216:	2201      	movs	r2, #1
 8019218:	e000      	b.n	801921c <prvGetNextExpireTime+0x18>
 801921a:	2200      	movs	r2, #0
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d105      	bne.n	8019234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019228:	4b07      	ldr	r3, [pc, #28]	; (8019248 <prvGetNextExpireTime+0x44>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	68db      	ldr	r3, [r3, #12]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	60fb      	str	r3, [r7, #12]
 8019232:	e001      	b.n	8019238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019234:	2300      	movs	r3, #0
 8019236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019238:	68fb      	ldr	r3, [r7, #12]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3714      	adds	r7, #20
 801923e:	46bd      	mov	sp, r7
 8019240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019244:	4770      	bx	lr
 8019246:	bf00      	nop
 8019248:	24002c40 	.word	0x24002c40

0801924c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019254:	f7ff f9b2 	bl	80185bc <xTaskGetTickCount>
 8019258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801925a:	4b0b      	ldr	r3, [pc, #44]	; (8019288 <prvSampleTimeNow+0x3c>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	68fa      	ldr	r2, [r7, #12]
 8019260:	429a      	cmp	r2, r3
 8019262:	d205      	bcs.n	8019270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019264:	f000 f936 	bl	80194d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	2201      	movs	r2, #1
 801926c:	601a      	str	r2, [r3, #0]
 801926e:	e002      	b.n	8019276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	2200      	movs	r2, #0
 8019274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019276:	4a04      	ldr	r2, [pc, #16]	; (8019288 <prvSampleTimeNow+0x3c>)
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801927c:	68fb      	ldr	r3, [r7, #12]
}
 801927e:	4618      	mov	r0, r3
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	24002c50 	.word	0x24002c50

0801928c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b086      	sub	sp, #24
 8019290:	af00      	add	r7, sp, #0
 8019292:	60f8      	str	r0, [r7, #12]
 8019294:	60b9      	str	r1, [r7, #8]
 8019296:	607a      	str	r2, [r7, #4]
 8019298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801929a:	2300      	movs	r3, #0
 801929c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	68ba      	ldr	r2, [r7, #8]
 80192a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	68fa      	ldr	r2, [r7, #12]
 80192a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80192aa:	68ba      	ldr	r2, [r7, #8]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d812      	bhi.n	80192d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192b2:	687a      	ldr	r2, [r7, #4]
 80192b4:	683b      	ldr	r3, [r7, #0]
 80192b6:	1ad2      	subs	r2, r2, r3
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	699b      	ldr	r3, [r3, #24]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d302      	bcc.n	80192c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80192c0:	2301      	movs	r3, #1
 80192c2:	617b      	str	r3, [r7, #20]
 80192c4:	e01b      	b.n	80192fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80192c6:	4b10      	ldr	r3, [pc, #64]	; (8019308 <prvInsertTimerInActiveList+0x7c>)
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	3304      	adds	r3, #4
 80192ce:	4619      	mov	r1, r3
 80192d0:	4610      	mov	r0, r2
 80192d2:	f7fe f93c 	bl	801754e <vListInsert>
 80192d6:	e012      	b.n	80192fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80192d8:	687a      	ldr	r2, [r7, #4]
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	429a      	cmp	r2, r3
 80192de:	d206      	bcs.n	80192ee <prvInsertTimerInActiveList+0x62>
 80192e0:	68ba      	ldr	r2, [r7, #8]
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d302      	bcc.n	80192ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80192e8:	2301      	movs	r3, #1
 80192ea:	617b      	str	r3, [r7, #20]
 80192ec:	e007      	b.n	80192fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80192ee:	4b07      	ldr	r3, [pc, #28]	; (801930c <prvInsertTimerInActiveList+0x80>)
 80192f0:	681a      	ldr	r2, [r3, #0]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	3304      	adds	r3, #4
 80192f6:	4619      	mov	r1, r3
 80192f8:	4610      	mov	r0, r2
 80192fa:	f7fe f928 	bl	801754e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80192fe:	697b      	ldr	r3, [r7, #20]
}
 8019300:	4618      	mov	r0, r3
 8019302:	3718      	adds	r7, #24
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}
 8019308:	24002c44 	.word	0x24002c44
 801930c:	24002c40 	.word	0x24002c40

08019310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b08e      	sub	sp, #56	; 0x38
 8019314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019316:	e0ca      	b.n	80194ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	2b00      	cmp	r3, #0
 801931c:	da18      	bge.n	8019350 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801931e:	1d3b      	adds	r3, r7, #4
 8019320:	3304      	adds	r3, #4
 8019322:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019326:	2b00      	cmp	r3, #0
 8019328:	d10a      	bne.n	8019340 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932e:	f383 8811 	msr	BASEPRI, r3
 8019332:	f3bf 8f6f 	isb	sy
 8019336:	f3bf 8f4f 	dsb	sy
 801933a:	61fb      	str	r3, [r7, #28]
}
 801933c:	bf00      	nop
 801933e:	e7fe      	b.n	801933e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019346:	6850      	ldr	r0, [r2, #4]
 8019348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801934a:	6892      	ldr	r2, [r2, #8]
 801934c:	4611      	mov	r1, r2
 801934e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	f2c0 80aa 	blt.w	80194ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801935e:	695b      	ldr	r3, [r3, #20]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d004      	beq.n	801936e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019366:	3304      	adds	r3, #4
 8019368:	4618      	mov	r0, r3
 801936a:	f7fe f929 	bl	80175c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801936e:	463b      	mov	r3, r7
 8019370:	4618      	mov	r0, r3
 8019372:	f7ff ff6b 	bl	801924c <prvSampleTimeNow>
 8019376:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2b09      	cmp	r3, #9
 801937c:	f200 8097 	bhi.w	80194ae <prvProcessReceivedCommands+0x19e>
 8019380:	a201      	add	r2, pc, #4	; (adr r2, 8019388 <prvProcessReceivedCommands+0x78>)
 8019382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019386:	bf00      	nop
 8019388:	080193b1 	.word	0x080193b1
 801938c:	080193b1 	.word	0x080193b1
 8019390:	080193b1 	.word	0x080193b1
 8019394:	08019425 	.word	0x08019425
 8019398:	08019439 	.word	0x08019439
 801939c:	08019483 	.word	0x08019483
 80193a0:	080193b1 	.word	0x080193b1
 80193a4:	080193b1 	.word	0x080193b1
 80193a8:	08019425 	.word	0x08019425
 80193ac:	08019439 	.word	0x08019439
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193b6:	f043 0301 	orr.w	r3, r3, #1
 80193ba:	b2da      	uxtb	r2, r3
 80193bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80193c2:	68ba      	ldr	r2, [r7, #8]
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	699b      	ldr	r3, [r3, #24]
 80193c8:	18d1      	adds	r1, r2, r3
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193d0:	f7ff ff5c 	bl	801928c <prvInsertTimerInActiveList>
 80193d4:	4603      	mov	r3, r0
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d069      	beq.n	80194ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80193da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193dc:	6a1b      	ldr	r3, [r3, #32]
 80193de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80193e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193e8:	f003 0304 	and.w	r3, r3, #4
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d05e      	beq.n	80194ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80193f0:	68ba      	ldr	r2, [r7, #8]
 80193f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f4:	699b      	ldr	r3, [r3, #24]
 80193f6:	441a      	add	r2, r3
 80193f8:	2300      	movs	r3, #0
 80193fa:	9300      	str	r3, [sp, #0]
 80193fc:	2300      	movs	r3, #0
 80193fe:	2100      	movs	r1, #0
 8019400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019402:	f7ff fe05 	bl	8019010 <xTimerGenericCommand>
 8019406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019408:	6a3b      	ldr	r3, [r7, #32]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d14f      	bne.n	80194ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019412:	f383 8811 	msr	BASEPRI, r3
 8019416:	f3bf 8f6f 	isb	sy
 801941a:	f3bf 8f4f 	dsb	sy
 801941e:	61bb      	str	r3, [r7, #24]
}
 8019420:	bf00      	nop
 8019422:	e7fe      	b.n	8019422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801942a:	f023 0301 	bic.w	r3, r3, #1
 801942e:	b2da      	uxtb	r2, r3
 8019430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019436:	e03a      	b.n	80194ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801943e:	f043 0301 	orr.w	r3, r3, #1
 8019442:	b2da      	uxtb	r2, r3
 8019444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801944a:	68ba      	ldr	r2, [r7, #8]
 801944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019452:	699b      	ldr	r3, [r3, #24]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d10a      	bne.n	801946e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801945c:	f383 8811 	msr	BASEPRI, r3
 8019460:	f3bf 8f6f 	isb	sy
 8019464:	f3bf 8f4f 	dsb	sy
 8019468:	617b      	str	r3, [r7, #20]
}
 801946a:	bf00      	nop
 801946c:	e7fe      	b.n	801946c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019470:	699a      	ldr	r2, [r3, #24]
 8019472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019474:	18d1      	adds	r1, r2, r3
 8019476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801947a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801947c:	f7ff ff06 	bl	801928c <prvInsertTimerInActiveList>
					break;
 8019480:	e015      	b.n	80194ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019488:	f003 0302 	and.w	r3, r3, #2
 801948c:	2b00      	cmp	r3, #0
 801948e:	d103      	bne.n	8019498 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019492:	f000 fbfd 	bl	8019c90 <vPortFree>
 8019496:	e00a      	b.n	80194ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801949a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801949e:	f023 0301 	bic.w	r3, r3, #1
 80194a2:	b2da      	uxtb	r2, r3
 80194a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80194aa:	e000      	b.n	80194ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80194ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80194ae:	4b08      	ldr	r3, [pc, #32]	; (80194d0 <prvProcessReceivedCommands+0x1c0>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	1d39      	adds	r1, r7, #4
 80194b4:	2200      	movs	r2, #0
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7fe fb4a 	bl	8017b50 <xQueueReceive>
 80194bc:	4603      	mov	r3, r0
 80194be:	2b00      	cmp	r3, #0
 80194c0:	f47f af2a 	bne.w	8019318 <prvProcessReceivedCommands+0x8>
	}
}
 80194c4:	bf00      	nop
 80194c6:	bf00      	nop
 80194c8:	3730      	adds	r7, #48	; 0x30
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	bf00      	nop
 80194d0:	24002c48 	.word	0x24002c48

080194d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b088      	sub	sp, #32
 80194d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80194da:	e048      	b.n	801956e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80194dc:	4b2d      	ldr	r3, [pc, #180]	; (8019594 <prvSwitchTimerLists+0xc0>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	68db      	ldr	r3, [r3, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194e6:	4b2b      	ldr	r3, [pc, #172]	; (8019594 <prvSwitchTimerLists+0xc0>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	68db      	ldr	r3, [r3, #12]
 80194ec:	68db      	ldr	r3, [r3, #12]
 80194ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	3304      	adds	r3, #4
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7fe f863 	bl	80175c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	6a1b      	ldr	r3, [r3, #32]
 80194fe:	68f8      	ldr	r0, [r7, #12]
 8019500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019508:	f003 0304 	and.w	r3, r3, #4
 801950c:	2b00      	cmp	r3, #0
 801950e:	d02e      	beq.n	801956e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	699b      	ldr	r3, [r3, #24]
 8019514:	693a      	ldr	r2, [r7, #16]
 8019516:	4413      	add	r3, r2
 8019518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801951a:	68ba      	ldr	r2, [r7, #8]
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	429a      	cmp	r2, r3
 8019520:	d90e      	bls.n	8019540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	68ba      	ldr	r2, [r7, #8]
 8019526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	68fa      	ldr	r2, [r7, #12]
 801952c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801952e:	4b19      	ldr	r3, [pc, #100]	; (8019594 <prvSwitchTimerLists+0xc0>)
 8019530:	681a      	ldr	r2, [r3, #0]
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	3304      	adds	r3, #4
 8019536:	4619      	mov	r1, r3
 8019538:	4610      	mov	r0, r2
 801953a:	f7fe f808 	bl	801754e <vListInsert>
 801953e:	e016      	b.n	801956e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019540:	2300      	movs	r3, #0
 8019542:	9300      	str	r3, [sp, #0]
 8019544:	2300      	movs	r3, #0
 8019546:	693a      	ldr	r2, [r7, #16]
 8019548:	2100      	movs	r1, #0
 801954a:	68f8      	ldr	r0, [r7, #12]
 801954c:	f7ff fd60 	bl	8019010 <xTimerGenericCommand>
 8019550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d10a      	bne.n	801956e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801955c:	f383 8811 	msr	BASEPRI, r3
 8019560:	f3bf 8f6f 	isb	sy
 8019564:	f3bf 8f4f 	dsb	sy
 8019568:	603b      	str	r3, [r7, #0]
}
 801956a:	bf00      	nop
 801956c:	e7fe      	b.n	801956c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801956e:	4b09      	ldr	r3, [pc, #36]	; (8019594 <prvSwitchTimerLists+0xc0>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d1b1      	bne.n	80194dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019578:	4b06      	ldr	r3, [pc, #24]	; (8019594 <prvSwitchTimerLists+0xc0>)
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801957e:	4b06      	ldr	r3, [pc, #24]	; (8019598 <prvSwitchTimerLists+0xc4>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	4a04      	ldr	r2, [pc, #16]	; (8019594 <prvSwitchTimerLists+0xc0>)
 8019584:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019586:	4a04      	ldr	r2, [pc, #16]	; (8019598 <prvSwitchTimerLists+0xc4>)
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	6013      	str	r3, [r2, #0]
}
 801958c:	bf00      	nop
 801958e:	3718      	adds	r7, #24
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	24002c40 	.word	0x24002c40
 8019598:	24002c44 	.word	0x24002c44

0801959c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80195a2:	f000 f987 	bl	80198b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80195a6:	4b15      	ldr	r3, [pc, #84]	; (80195fc <prvCheckForValidListAndQueue+0x60>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d120      	bne.n	80195f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80195ae:	4814      	ldr	r0, [pc, #80]	; (8019600 <prvCheckForValidListAndQueue+0x64>)
 80195b0:	f7fd ff7c 	bl	80174ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80195b4:	4813      	ldr	r0, [pc, #76]	; (8019604 <prvCheckForValidListAndQueue+0x68>)
 80195b6:	f7fd ff79 	bl	80174ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80195ba:	4b13      	ldr	r3, [pc, #76]	; (8019608 <prvCheckForValidListAndQueue+0x6c>)
 80195bc:	4a10      	ldr	r2, [pc, #64]	; (8019600 <prvCheckForValidListAndQueue+0x64>)
 80195be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80195c0:	4b12      	ldr	r3, [pc, #72]	; (801960c <prvCheckForValidListAndQueue+0x70>)
 80195c2:	4a10      	ldr	r2, [pc, #64]	; (8019604 <prvCheckForValidListAndQueue+0x68>)
 80195c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80195c6:	2300      	movs	r3, #0
 80195c8:	9300      	str	r3, [sp, #0]
 80195ca:	4b11      	ldr	r3, [pc, #68]	; (8019610 <prvCheckForValidListAndQueue+0x74>)
 80195cc:	4a11      	ldr	r2, [pc, #68]	; (8019614 <prvCheckForValidListAndQueue+0x78>)
 80195ce:	2110      	movs	r1, #16
 80195d0:	200a      	movs	r0, #10
 80195d2:	f7fe f887 	bl	80176e4 <xQueueGenericCreateStatic>
 80195d6:	4603      	mov	r3, r0
 80195d8:	4a08      	ldr	r2, [pc, #32]	; (80195fc <prvCheckForValidListAndQueue+0x60>)
 80195da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80195dc:	4b07      	ldr	r3, [pc, #28]	; (80195fc <prvCheckForValidListAndQueue+0x60>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d005      	beq.n	80195f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80195e4:	4b05      	ldr	r3, [pc, #20]	; (80195fc <prvCheckForValidListAndQueue+0x60>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	490b      	ldr	r1, [pc, #44]	; (8019618 <prvCheckForValidListAndQueue+0x7c>)
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7fe fca0 	bl	8017f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80195f0:	f000 f990 	bl	8019914 <vPortExitCritical>
}
 80195f4:	bf00      	nop
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	24002c48 	.word	0x24002c48
 8019600:	24002c18 	.word	0x24002c18
 8019604:	24002c2c 	.word	0x24002c2c
 8019608:	24002c40 	.word	0x24002c40
 801960c:	24002c44 	.word	0x24002c44
 8019610:	24002cf4 	.word	0x24002cf4
 8019614:	24002c54 	.word	0x24002c54
 8019618:	0801abc0 	.word	0x0801abc0

0801961c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801961c:	b580      	push	{r7, lr}
 801961e:	b08a      	sub	sp, #40	; 0x28
 8019620:	af00      	add	r7, sp, #0
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	607a      	str	r2, [r7, #4]
 8019628:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801962a:	f06f 0301 	mvn.w	r3, #1
 801962e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801963c:	4b06      	ldr	r3, [pc, #24]	; (8019658 <xTimerPendFunctionCallFromISR+0x3c>)
 801963e:	6818      	ldr	r0, [r3, #0]
 8019640:	f107 0114 	add.w	r1, r7, #20
 8019644:	2300      	movs	r3, #0
 8019646:	683a      	ldr	r2, [r7, #0]
 8019648:	f7fe f9e6 	bl	8017a18 <xQueueGenericSendFromISR>
 801964c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019650:	4618      	mov	r0, r3
 8019652:	3728      	adds	r7, #40	; 0x28
 8019654:	46bd      	mov	sp, r7
 8019656:	bd80      	pop	{r7, pc}
 8019658:	24002c48 	.word	0x24002c48

0801965c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801965c:	b480      	push	{r7}
 801965e:	b085      	sub	sp, #20
 8019660:	af00      	add	r7, sp, #0
 8019662:	60f8      	str	r0, [r7, #12]
 8019664:	60b9      	str	r1, [r7, #8]
 8019666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	3b04      	subs	r3, #4
 801966c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	3b04      	subs	r3, #4
 801967a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	f023 0201 	bic.w	r2, r3, #1
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	3b04      	subs	r3, #4
 801968a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801968c:	4a0c      	ldr	r2, [pc, #48]	; (80196c0 <pxPortInitialiseStack+0x64>)
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	3b14      	subs	r3, #20
 8019696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	3b04      	subs	r3, #4
 80196a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	f06f 0202 	mvn.w	r2, #2
 80196aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	3b20      	subs	r3, #32
 80196b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80196b2:	68fb      	ldr	r3, [r7, #12]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	3714      	adds	r7, #20
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr
 80196c0:	080196c5 	.word	0x080196c5

080196c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80196c4:	b480      	push	{r7}
 80196c6:	b085      	sub	sp, #20
 80196c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80196ca:	2300      	movs	r3, #0
 80196cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80196ce:	4b12      	ldr	r3, [pc, #72]	; (8019718 <prvTaskExitError+0x54>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196d6:	d00a      	beq.n	80196ee <prvTaskExitError+0x2a>
	__asm volatile
 80196d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196dc:	f383 8811 	msr	BASEPRI, r3
 80196e0:	f3bf 8f6f 	isb	sy
 80196e4:	f3bf 8f4f 	dsb	sy
 80196e8:	60fb      	str	r3, [r7, #12]
}
 80196ea:	bf00      	nop
 80196ec:	e7fe      	b.n	80196ec <prvTaskExitError+0x28>
	__asm volatile
 80196ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f2:	f383 8811 	msr	BASEPRI, r3
 80196f6:	f3bf 8f6f 	isb	sy
 80196fa:	f3bf 8f4f 	dsb	sy
 80196fe:	60bb      	str	r3, [r7, #8]
}
 8019700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019702:	bf00      	nop
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d0fc      	beq.n	8019704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801970a:	bf00      	nop
 801970c:	bf00      	nop
 801970e:	3714      	adds	r7, #20
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr
 8019718:	240000cc 	.word	0x240000cc
 801971c:	00000000 	.word	0x00000000

08019720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019720:	4b07      	ldr	r3, [pc, #28]	; (8019740 <pxCurrentTCBConst2>)
 8019722:	6819      	ldr	r1, [r3, #0]
 8019724:	6808      	ldr	r0, [r1, #0]
 8019726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801972a:	f380 8809 	msr	PSP, r0
 801972e:	f3bf 8f6f 	isb	sy
 8019732:	f04f 0000 	mov.w	r0, #0
 8019736:	f380 8811 	msr	BASEPRI, r0
 801973a:	4770      	bx	lr
 801973c:	f3af 8000 	nop.w

08019740 <pxCurrentTCBConst2>:
 8019740:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019744:	bf00      	nop
 8019746:	bf00      	nop

08019748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019748:	4808      	ldr	r0, [pc, #32]	; (801976c <prvPortStartFirstTask+0x24>)
 801974a:	6800      	ldr	r0, [r0, #0]
 801974c:	6800      	ldr	r0, [r0, #0]
 801974e:	f380 8808 	msr	MSP, r0
 8019752:	f04f 0000 	mov.w	r0, #0
 8019756:	f380 8814 	msr	CONTROL, r0
 801975a:	b662      	cpsie	i
 801975c:	b661      	cpsie	f
 801975e:	f3bf 8f4f 	dsb	sy
 8019762:	f3bf 8f6f 	isb	sy
 8019766:	df00      	svc	0
 8019768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801976a:	bf00      	nop
 801976c:	e000ed08 	.word	0xe000ed08

08019770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b086      	sub	sp, #24
 8019774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019776:	4b46      	ldr	r3, [pc, #280]	; (8019890 <xPortStartScheduler+0x120>)
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	4a46      	ldr	r2, [pc, #280]	; (8019894 <xPortStartScheduler+0x124>)
 801977c:	4293      	cmp	r3, r2
 801977e:	d10a      	bne.n	8019796 <xPortStartScheduler+0x26>
	__asm volatile
 8019780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019784:	f383 8811 	msr	BASEPRI, r3
 8019788:	f3bf 8f6f 	isb	sy
 801978c:	f3bf 8f4f 	dsb	sy
 8019790:	613b      	str	r3, [r7, #16]
}
 8019792:	bf00      	nop
 8019794:	e7fe      	b.n	8019794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019796:	4b3e      	ldr	r3, [pc, #248]	; (8019890 <xPortStartScheduler+0x120>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a3f      	ldr	r2, [pc, #252]	; (8019898 <xPortStartScheduler+0x128>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d10a      	bne.n	80197b6 <xPortStartScheduler+0x46>
	__asm volatile
 80197a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a4:	f383 8811 	msr	BASEPRI, r3
 80197a8:	f3bf 8f6f 	isb	sy
 80197ac:	f3bf 8f4f 	dsb	sy
 80197b0:	60fb      	str	r3, [r7, #12]
}
 80197b2:	bf00      	nop
 80197b4:	e7fe      	b.n	80197b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80197b6:	4b39      	ldr	r3, [pc, #228]	; (801989c <xPortStartScheduler+0x12c>)
 80197b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80197ba:	697b      	ldr	r3, [r7, #20]
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	22ff      	movs	r2, #255	; 0xff
 80197c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80197c8:	697b      	ldr	r3, [r7, #20]
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	b2db      	uxtb	r3, r3
 80197ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80197d0:	78fb      	ldrb	r3, [r7, #3]
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80197d8:	b2da      	uxtb	r2, r3
 80197da:	4b31      	ldr	r3, [pc, #196]	; (80198a0 <xPortStartScheduler+0x130>)
 80197dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80197de:	4b31      	ldr	r3, [pc, #196]	; (80198a4 <xPortStartScheduler+0x134>)
 80197e0:	2207      	movs	r2, #7
 80197e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80197e4:	e009      	b.n	80197fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80197e6:	4b2f      	ldr	r3, [pc, #188]	; (80198a4 <xPortStartScheduler+0x134>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	3b01      	subs	r3, #1
 80197ec:	4a2d      	ldr	r2, [pc, #180]	; (80198a4 <xPortStartScheduler+0x134>)
 80197ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80197f0:	78fb      	ldrb	r3, [r7, #3]
 80197f2:	b2db      	uxtb	r3, r3
 80197f4:	005b      	lsls	r3, r3, #1
 80197f6:	b2db      	uxtb	r3, r3
 80197f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80197fa:	78fb      	ldrb	r3, [r7, #3]
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019802:	2b80      	cmp	r3, #128	; 0x80
 8019804:	d0ef      	beq.n	80197e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019806:	4b27      	ldr	r3, [pc, #156]	; (80198a4 <xPortStartScheduler+0x134>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	f1c3 0307 	rsb	r3, r3, #7
 801980e:	2b04      	cmp	r3, #4
 8019810:	d00a      	beq.n	8019828 <xPortStartScheduler+0xb8>
	__asm volatile
 8019812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019816:	f383 8811 	msr	BASEPRI, r3
 801981a:	f3bf 8f6f 	isb	sy
 801981e:	f3bf 8f4f 	dsb	sy
 8019822:	60bb      	str	r3, [r7, #8]
}
 8019824:	bf00      	nop
 8019826:	e7fe      	b.n	8019826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019828:	4b1e      	ldr	r3, [pc, #120]	; (80198a4 <xPortStartScheduler+0x134>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	021b      	lsls	r3, r3, #8
 801982e:	4a1d      	ldr	r2, [pc, #116]	; (80198a4 <xPortStartScheduler+0x134>)
 8019830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019832:	4b1c      	ldr	r3, [pc, #112]	; (80198a4 <xPortStartScheduler+0x134>)
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801983a:	4a1a      	ldr	r2, [pc, #104]	; (80198a4 <xPortStartScheduler+0x134>)
 801983c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	b2da      	uxtb	r2, r3
 8019842:	697b      	ldr	r3, [r7, #20]
 8019844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019846:	4b18      	ldr	r3, [pc, #96]	; (80198a8 <xPortStartScheduler+0x138>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	4a17      	ldr	r2, [pc, #92]	; (80198a8 <xPortStartScheduler+0x138>)
 801984c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019852:	4b15      	ldr	r3, [pc, #84]	; (80198a8 <xPortStartScheduler+0x138>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4a14      	ldr	r2, [pc, #80]	; (80198a8 <xPortStartScheduler+0x138>)
 8019858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801985c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801985e:	f000 f8dd 	bl	8019a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019862:	4b12      	ldr	r3, [pc, #72]	; (80198ac <xPortStartScheduler+0x13c>)
 8019864:	2200      	movs	r2, #0
 8019866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019868:	f000 f8fc 	bl	8019a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801986c:	4b10      	ldr	r3, [pc, #64]	; (80198b0 <xPortStartScheduler+0x140>)
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	4a0f      	ldr	r2, [pc, #60]	; (80198b0 <xPortStartScheduler+0x140>)
 8019872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019878:	f7ff ff66 	bl	8019748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801987c:	f7fe ff70 	bl	8018760 <vTaskSwitchContext>
	prvTaskExitError();
 8019880:	f7ff ff20 	bl	80196c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019884:	2300      	movs	r3, #0
}
 8019886:	4618      	mov	r0, r3
 8019888:	3718      	adds	r7, #24
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}
 801988e:	bf00      	nop
 8019890:	e000ed00 	.word	0xe000ed00
 8019894:	410fc271 	.word	0x410fc271
 8019898:	410fc270 	.word	0x410fc270
 801989c:	e000e400 	.word	0xe000e400
 80198a0:	24002d44 	.word	0x24002d44
 80198a4:	24002d48 	.word	0x24002d48
 80198a8:	e000ed20 	.word	0xe000ed20
 80198ac:	240000cc 	.word	0x240000cc
 80198b0:	e000ef34 	.word	0xe000ef34

080198b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80198b4:	b480      	push	{r7}
 80198b6:	b083      	sub	sp, #12
 80198b8:	af00      	add	r7, sp, #0
	__asm volatile
 80198ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198be:	f383 8811 	msr	BASEPRI, r3
 80198c2:	f3bf 8f6f 	isb	sy
 80198c6:	f3bf 8f4f 	dsb	sy
 80198ca:	607b      	str	r3, [r7, #4]
}
 80198cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80198ce:	4b0f      	ldr	r3, [pc, #60]	; (801990c <vPortEnterCritical+0x58>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	3301      	adds	r3, #1
 80198d4:	4a0d      	ldr	r2, [pc, #52]	; (801990c <vPortEnterCritical+0x58>)
 80198d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80198d8:	4b0c      	ldr	r3, [pc, #48]	; (801990c <vPortEnterCritical+0x58>)
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	2b01      	cmp	r3, #1
 80198de:	d10f      	bne.n	8019900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80198e0:	4b0b      	ldr	r3, [pc, #44]	; (8019910 <vPortEnterCritical+0x5c>)
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	b2db      	uxtb	r3, r3
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d00a      	beq.n	8019900 <vPortEnterCritical+0x4c>
	__asm volatile
 80198ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198ee:	f383 8811 	msr	BASEPRI, r3
 80198f2:	f3bf 8f6f 	isb	sy
 80198f6:	f3bf 8f4f 	dsb	sy
 80198fa:	603b      	str	r3, [r7, #0]
}
 80198fc:	bf00      	nop
 80198fe:	e7fe      	b.n	80198fe <vPortEnterCritical+0x4a>
	}
}
 8019900:	bf00      	nop
 8019902:	370c      	adds	r7, #12
 8019904:	46bd      	mov	sp, r7
 8019906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990a:	4770      	bx	lr
 801990c:	240000cc 	.word	0x240000cc
 8019910:	e000ed04 	.word	0xe000ed04

08019914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019914:	b480      	push	{r7}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801991a:	4b12      	ldr	r3, [pc, #72]	; (8019964 <vPortExitCritical+0x50>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d10a      	bne.n	8019938 <vPortExitCritical+0x24>
	__asm volatile
 8019922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019926:	f383 8811 	msr	BASEPRI, r3
 801992a:	f3bf 8f6f 	isb	sy
 801992e:	f3bf 8f4f 	dsb	sy
 8019932:	607b      	str	r3, [r7, #4]
}
 8019934:	bf00      	nop
 8019936:	e7fe      	b.n	8019936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019938:	4b0a      	ldr	r3, [pc, #40]	; (8019964 <vPortExitCritical+0x50>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	3b01      	subs	r3, #1
 801993e:	4a09      	ldr	r2, [pc, #36]	; (8019964 <vPortExitCritical+0x50>)
 8019940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019942:	4b08      	ldr	r3, [pc, #32]	; (8019964 <vPortExitCritical+0x50>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d105      	bne.n	8019956 <vPortExitCritical+0x42>
 801994a:	2300      	movs	r3, #0
 801994c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	f383 8811 	msr	BASEPRI, r3
}
 8019954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019956:	bf00      	nop
 8019958:	370c      	adds	r7, #12
 801995a:	46bd      	mov	sp, r7
 801995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019960:	4770      	bx	lr
 8019962:	bf00      	nop
 8019964:	240000cc 	.word	0x240000cc
	...

08019970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019970:	f3ef 8009 	mrs	r0, PSP
 8019974:	f3bf 8f6f 	isb	sy
 8019978:	4b15      	ldr	r3, [pc, #84]	; (80199d0 <pxCurrentTCBConst>)
 801997a:	681a      	ldr	r2, [r3, #0]
 801997c:	f01e 0f10 	tst.w	lr, #16
 8019980:	bf08      	it	eq
 8019982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801998a:	6010      	str	r0, [r2, #0]
 801998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019994:	f380 8811 	msr	BASEPRI, r0
 8019998:	f3bf 8f4f 	dsb	sy
 801999c:	f3bf 8f6f 	isb	sy
 80199a0:	f7fe fede 	bl	8018760 <vTaskSwitchContext>
 80199a4:	f04f 0000 	mov.w	r0, #0
 80199a8:	f380 8811 	msr	BASEPRI, r0
 80199ac:	bc09      	pop	{r0, r3}
 80199ae:	6819      	ldr	r1, [r3, #0]
 80199b0:	6808      	ldr	r0, [r1, #0]
 80199b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b6:	f01e 0f10 	tst.w	lr, #16
 80199ba:	bf08      	it	eq
 80199bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80199c0:	f380 8809 	msr	PSP, r0
 80199c4:	f3bf 8f6f 	isb	sy
 80199c8:	4770      	bx	lr
 80199ca:	bf00      	nop
 80199cc:	f3af 8000 	nop.w

080199d0 <pxCurrentTCBConst>:
 80199d0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80199d4:	bf00      	nop
 80199d6:	bf00      	nop

080199d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b082      	sub	sp, #8
 80199dc:	af00      	add	r7, sp, #0
	__asm volatile
 80199de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e2:	f383 8811 	msr	BASEPRI, r3
 80199e6:	f3bf 8f6f 	isb	sy
 80199ea:	f3bf 8f4f 	dsb	sy
 80199ee:	607b      	str	r3, [r7, #4]
}
 80199f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80199f2:	f7fe fdf3 	bl	80185dc <xTaskIncrementTick>
 80199f6:	4603      	mov	r3, r0
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d003      	beq.n	8019a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80199fc:	4b06      	ldr	r3, [pc, #24]	; (8019a18 <xPortSysTickHandler+0x40>)
 80199fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a02:	601a      	str	r2, [r3, #0]
 8019a04:	2300      	movs	r3, #0
 8019a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	f383 8811 	msr	BASEPRI, r3
}
 8019a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019a10:	bf00      	nop
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	e000ed04 	.word	0xe000ed04

08019a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019a1c:	b480      	push	{r7}
 8019a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019a20:	4b0b      	ldr	r3, [pc, #44]	; (8019a50 <vPortSetupTimerInterrupt+0x34>)
 8019a22:	2200      	movs	r2, #0
 8019a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a26:	4b0b      	ldr	r3, [pc, #44]	; (8019a54 <vPortSetupTimerInterrupt+0x38>)
 8019a28:	2200      	movs	r2, #0
 8019a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019a2c:	4b0a      	ldr	r3, [pc, #40]	; (8019a58 <vPortSetupTimerInterrupt+0x3c>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	4a0a      	ldr	r2, [pc, #40]	; (8019a5c <vPortSetupTimerInterrupt+0x40>)
 8019a32:	fba2 2303 	umull	r2, r3, r2, r3
 8019a36:	099b      	lsrs	r3, r3, #6
 8019a38:	4a09      	ldr	r2, [pc, #36]	; (8019a60 <vPortSetupTimerInterrupt+0x44>)
 8019a3a:	3b01      	subs	r3, #1
 8019a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019a3e:	4b04      	ldr	r3, [pc, #16]	; (8019a50 <vPortSetupTimerInterrupt+0x34>)
 8019a40:	2207      	movs	r2, #7
 8019a42:	601a      	str	r2, [r3, #0]
}
 8019a44:	bf00      	nop
 8019a46:	46bd      	mov	sp, r7
 8019a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4c:	4770      	bx	lr
 8019a4e:	bf00      	nop
 8019a50:	e000e010 	.word	0xe000e010
 8019a54:	e000e018 	.word	0xe000e018
 8019a58:	240000bc 	.word	0x240000bc
 8019a5c:	10624dd3 	.word	0x10624dd3
 8019a60:	e000e014 	.word	0xe000e014

08019a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019a74 <vPortEnableVFP+0x10>
 8019a68:	6801      	ldr	r1, [r0, #0]
 8019a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019a6e:	6001      	str	r1, [r0, #0]
 8019a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019a72:	bf00      	nop
 8019a74:	e000ed88 	.word	0xe000ed88

08019a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019a78:	b480      	push	{r7}
 8019a7a:	b085      	sub	sp, #20
 8019a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019a7e:	f3ef 8305 	mrs	r3, IPSR
 8019a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2b0f      	cmp	r3, #15
 8019a88:	d914      	bls.n	8019ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019a8a:	4a17      	ldr	r2, [pc, #92]	; (8019ae8 <vPortValidateInterruptPriority+0x70>)
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	4413      	add	r3, r2
 8019a90:	781b      	ldrb	r3, [r3, #0]
 8019a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019a94:	4b15      	ldr	r3, [pc, #84]	; (8019aec <vPortValidateInterruptPriority+0x74>)
 8019a96:	781b      	ldrb	r3, [r3, #0]
 8019a98:	7afa      	ldrb	r2, [r7, #11]
 8019a9a:	429a      	cmp	r2, r3
 8019a9c:	d20a      	bcs.n	8019ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa2:	f383 8811 	msr	BASEPRI, r3
 8019aa6:	f3bf 8f6f 	isb	sy
 8019aaa:	f3bf 8f4f 	dsb	sy
 8019aae:	607b      	str	r3, [r7, #4]
}
 8019ab0:	bf00      	nop
 8019ab2:	e7fe      	b.n	8019ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019ab4:	4b0e      	ldr	r3, [pc, #56]	; (8019af0 <vPortValidateInterruptPriority+0x78>)
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019abc:	4b0d      	ldr	r3, [pc, #52]	; (8019af4 <vPortValidateInterruptPriority+0x7c>)
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	429a      	cmp	r2, r3
 8019ac2:	d90a      	bls.n	8019ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ac8:	f383 8811 	msr	BASEPRI, r3
 8019acc:	f3bf 8f6f 	isb	sy
 8019ad0:	f3bf 8f4f 	dsb	sy
 8019ad4:	603b      	str	r3, [r7, #0]
}
 8019ad6:	bf00      	nop
 8019ad8:	e7fe      	b.n	8019ad8 <vPortValidateInterruptPriority+0x60>
	}
 8019ada:	bf00      	nop
 8019adc:	3714      	adds	r7, #20
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	e000e3f0 	.word	0xe000e3f0
 8019aec:	24002d44 	.word	0x24002d44
 8019af0:	e000ed0c 	.word	0xe000ed0c
 8019af4:	24002d48 	.word	0x24002d48

08019af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b08a      	sub	sp, #40	; 0x28
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019b00:	2300      	movs	r3, #0
 8019b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019b04:	f7fe fcae 	bl	8018464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019b08:	4b5b      	ldr	r3, [pc, #364]	; (8019c78 <pvPortMalloc+0x180>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d101      	bne.n	8019b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019b10:	f000 f920 	bl	8019d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019b14:	4b59      	ldr	r3, [pc, #356]	; (8019c7c <pvPortMalloc+0x184>)
 8019b16:	681a      	ldr	r2, [r3, #0]
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	4013      	ands	r3, r2
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	f040 8093 	bne.w	8019c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d01d      	beq.n	8019b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019b28:	2208      	movs	r2, #8
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	4413      	add	r3, r2
 8019b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	f003 0307 	and.w	r3, r3, #7
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d014      	beq.n	8019b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	f023 0307 	bic.w	r3, r3, #7
 8019b40:	3308      	adds	r3, #8
 8019b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	f003 0307 	and.w	r3, r3, #7
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d00a      	beq.n	8019b64 <pvPortMalloc+0x6c>
	__asm volatile
 8019b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b52:	f383 8811 	msr	BASEPRI, r3
 8019b56:	f3bf 8f6f 	isb	sy
 8019b5a:	f3bf 8f4f 	dsb	sy
 8019b5e:	617b      	str	r3, [r7, #20]
}
 8019b60:	bf00      	nop
 8019b62:	e7fe      	b.n	8019b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d06e      	beq.n	8019c48 <pvPortMalloc+0x150>
 8019b6a:	4b45      	ldr	r3, [pc, #276]	; (8019c80 <pvPortMalloc+0x188>)
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	687a      	ldr	r2, [r7, #4]
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d869      	bhi.n	8019c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019b74:	4b43      	ldr	r3, [pc, #268]	; (8019c84 <pvPortMalloc+0x18c>)
 8019b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019b78:	4b42      	ldr	r3, [pc, #264]	; (8019c84 <pvPortMalloc+0x18c>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019b7e:	e004      	b.n	8019b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	429a      	cmp	r2, r3
 8019b92:	d903      	bls.n	8019b9c <pvPortMalloc+0xa4>
 8019b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d1f1      	bne.n	8019b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019b9c:	4b36      	ldr	r3, [pc, #216]	; (8019c78 <pvPortMalloc+0x180>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d050      	beq.n	8019c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019ba6:	6a3b      	ldr	r3, [r7, #32]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2208      	movs	r2, #8
 8019bac:	4413      	add	r3, r2
 8019bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb2:	681a      	ldr	r2, [r3, #0]
 8019bb4:	6a3b      	ldr	r3, [r7, #32]
 8019bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bba:	685a      	ldr	r2, [r3, #4]
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	1ad2      	subs	r2, r2, r3
 8019bc0:	2308      	movs	r3, #8
 8019bc2:	005b      	lsls	r3, r3, #1
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d91f      	bls.n	8019c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	4413      	add	r3, r2
 8019bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	f003 0307 	and.w	r3, r3, #7
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d00a      	beq.n	8019bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8019bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bde:	f383 8811 	msr	BASEPRI, r3
 8019be2:	f3bf 8f6f 	isb	sy
 8019be6:	f3bf 8f4f 	dsb	sy
 8019bea:	613b      	str	r3, [r7, #16]
}
 8019bec:	bf00      	nop
 8019bee:	e7fe      	b.n	8019bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	685a      	ldr	r2, [r3, #4]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	1ad2      	subs	r2, r2, r3
 8019bf8:	69bb      	ldr	r3, [r7, #24]
 8019bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfe:	687a      	ldr	r2, [r7, #4]
 8019c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019c02:	69b8      	ldr	r0, [r7, #24]
 8019c04:	f000 f908 	bl	8019e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019c08:	4b1d      	ldr	r3, [pc, #116]	; (8019c80 <pvPortMalloc+0x188>)
 8019c0a:	681a      	ldr	r2, [r3, #0]
 8019c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0e:	685b      	ldr	r3, [r3, #4]
 8019c10:	1ad3      	subs	r3, r2, r3
 8019c12:	4a1b      	ldr	r2, [pc, #108]	; (8019c80 <pvPortMalloc+0x188>)
 8019c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019c16:	4b1a      	ldr	r3, [pc, #104]	; (8019c80 <pvPortMalloc+0x188>)
 8019c18:	681a      	ldr	r2, [r3, #0]
 8019c1a:	4b1b      	ldr	r3, [pc, #108]	; (8019c88 <pvPortMalloc+0x190>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d203      	bcs.n	8019c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019c22:	4b17      	ldr	r3, [pc, #92]	; (8019c80 <pvPortMalloc+0x188>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	4a18      	ldr	r2, [pc, #96]	; (8019c88 <pvPortMalloc+0x190>)
 8019c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	685a      	ldr	r2, [r3, #4]
 8019c2e:	4b13      	ldr	r3, [pc, #76]	; (8019c7c <pvPortMalloc+0x184>)
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	431a      	orrs	r2, r3
 8019c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019c3e:	4b13      	ldr	r3, [pc, #76]	; (8019c8c <pvPortMalloc+0x194>)
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	3301      	adds	r3, #1
 8019c44:	4a11      	ldr	r2, [pc, #68]	; (8019c8c <pvPortMalloc+0x194>)
 8019c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019c48:	f7fe fc1a 	bl	8018480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c4c:	69fb      	ldr	r3, [r7, #28]
 8019c4e:	f003 0307 	and.w	r3, r3, #7
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d00a      	beq.n	8019c6c <pvPortMalloc+0x174>
	__asm volatile
 8019c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c5a:	f383 8811 	msr	BASEPRI, r3
 8019c5e:	f3bf 8f6f 	isb	sy
 8019c62:	f3bf 8f4f 	dsb	sy
 8019c66:	60fb      	str	r3, [r7, #12]
}
 8019c68:	bf00      	nop
 8019c6a:	e7fe      	b.n	8019c6a <pvPortMalloc+0x172>
	return pvReturn;
 8019c6c:	69fb      	ldr	r3, [r7, #28]
}
 8019c6e:	4618      	mov	r0, r3
 8019c70:	3728      	adds	r7, #40	; 0x28
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}
 8019c76:	bf00      	nop
 8019c78:	24006954 	.word	0x24006954
 8019c7c:	24006968 	.word	0x24006968
 8019c80:	24006958 	.word	0x24006958
 8019c84:	2400694c 	.word	0x2400694c
 8019c88:	2400695c 	.word	0x2400695c
 8019c8c:	24006960 	.word	0x24006960

08019c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b086      	sub	sp, #24
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d04d      	beq.n	8019d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019ca2:	2308      	movs	r3, #8
 8019ca4:	425b      	negs	r3, r3
 8019ca6:	697a      	ldr	r2, [r7, #20]
 8019ca8:	4413      	add	r3, r2
 8019caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019cac:	697b      	ldr	r3, [r7, #20]
 8019cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	685a      	ldr	r2, [r3, #4]
 8019cb4:	4b24      	ldr	r3, [pc, #144]	; (8019d48 <vPortFree+0xb8>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	4013      	ands	r3, r2
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d10a      	bne.n	8019cd4 <vPortFree+0x44>
	__asm volatile
 8019cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cc2:	f383 8811 	msr	BASEPRI, r3
 8019cc6:	f3bf 8f6f 	isb	sy
 8019cca:	f3bf 8f4f 	dsb	sy
 8019cce:	60fb      	str	r3, [r7, #12]
}
 8019cd0:	bf00      	nop
 8019cd2:	e7fe      	b.n	8019cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019cd4:	693b      	ldr	r3, [r7, #16]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d00a      	beq.n	8019cf2 <vPortFree+0x62>
	__asm volatile
 8019cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce0:	f383 8811 	msr	BASEPRI, r3
 8019ce4:	f3bf 8f6f 	isb	sy
 8019ce8:	f3bf 8f4f 	dsb	sy
 8019cec:	60bb      	str	r3, [r7, #8]
}
 8019cee:	bf00      	nop
 8019cf0:	e7fe      	b.n	8019cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	685a      	ldr	r2, [r3, #4]
 8019cf6:	4b14      	ldr	r3, [pc, #80]	; (8019d48 <vPortFree+0xb8>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4013      	ands	r3, r2
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d01e      	beq.n	8019d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019d00:	693b      	ldr	r3, [r7, #16]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d11a      	bne.n	8019d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019d08:	693b      	ldr	r3, [r7, #16]
 8019d0a:	685a      	ldr	r2, [r3, #4]
 8019d0c:	4b0e      	ldr	r3, [pc, #56]	; (8019d48 <vPortFree+0xb8>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	43db      	mvns	r3, r3
 8019d12:	401a      	ands	r2, r3
 8019d14:	693b      	ldr	r3, [r7, #16]
 8019d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019d18:	f7fe fba4 	bl	8018464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019d1c:	693b      	ldr	r3, [r7, #16]
 8019d1e:	685a      	ldr	r2, [r3, #4]
 8019d20:	4b0a      	ldr	r3, [pc, #40]	; (8019d4c <vPortFree+0xbc>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	4413      	add	r3, r2
 8019d26:	4a09      	ldr	r2, [pc, #36]	; (8019d4c <vPortFree+0xbc>)
 8019d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019d2a:	6938      	ldr	r0, [r7, #16]
 8019d2c:	f000 f874 	bl	8019e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019d30:	4b07      	ldr	r3, [pc, #28]	; (8019d50 <vPortFree+0xc0>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	3301      	adds	r3, #1
 8019d36:	4a06      	ldr	r2, [pc, #24]	; (8019d50 <vPortFree+0xc0>)
 8019d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019d3a:	f7fe fba1 	bl	8018480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019d3e:	bf00      	nop
 8019d40:	3718      	adds	r7, #24
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd80      	pop	{r7, pc}
 8019d46:	bf00      	nop
 8019d48:	24006968 	.word	0x24006968
 8019d4c:	24006958 	.word	0x24006958
 8019d50:	24006964 	.word	0x24006964

08019d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019d54:	b480      	push	{r7}
 8019d56:	b085      	sub	sp, #20
 8019d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019d60:	4b27      	ldr	r3, [pc, #156]	; (8019e00 <prvHeapInit+0xac>)
 8019d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	f003 0307 	and.w	r3, r3, #7
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d00c      	beq.n	8019d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	3307      	adds	r3, #7
 8019d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	f023 0307 	bic.w	r3, r3, #7
 8019d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019d7c:	68ba      	ldr	r2, [r7, #8]
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	4a1f      	ldr	r2, [pc, #124]	; (8019e00 <prvHeapInit+0xac>)
 8019d84:	4413      	add	r3, r2
 8019d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019d8c:	4a1d      	ldr	r2, [pc, #116]	; (8019e04 <prvHeapInit+0xb0>)
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019d92:	4b1c      	ldr	r3, [pc, #112]	; (8019e04 <prvHeapInit+0xb0>)
 8019d94:	2200      	movs	r2, #0
 8019d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	68ba      	ldr	r2, [r7, #8]
 8019d9c:	4413      	add	r3, r2
 8019d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019da0:	2208      	movs	r2, #8
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	1a9b      	subs	r3, r3, r2
 8019da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f023 0307 	bic.w	r3, r3, #7
 8019dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	4a15      	ldr	r2, [pc, #84]	; (8019e08 <prvHeapInit+0xb4>)
 8019db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019db6:	4b14      	ldr	r3, [pc, #80]	; (8019e08 <prvHeapInit+0xb4>)
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019dbe:	4b12      	ldr	r3, [pc, #72]	; (8019e08 <prvHeapInit+0xb4>)
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	68fa      	ldr	r2, [r7, #12]
 8019dce:	1ad2      	subs	r2, r2, r3
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019dd4:	4b0c      	ldr	r3, [pc, #48]	; (8019e08 <prvHeapInit+0xb4>)
 8019dd6:	681a      	ldr	r2, [r3, #0]
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	4a0a      	ldr	r2, [pc, #40]	; (8019e0c <prvHeapInit+0xb8>)
 8019de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	685b      	ldr	r3, [r3, #4]
 8019de8:	4a09      	ldr	r2, [pc, #36]	; (8019e10 <prvHeapInit+0xbc>)
 8019dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019dec:	4b09      	ldr	r3, [pc, #36]	; (8019e14 <prvHeapInit+0xc0>)
 8019dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019df2:	601a      	str	r2, [r3, #0]
}
 8019df4:	bf00      	nop
 8019df6:	3714      	adds	r7, #20
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfe:	4770      	bx	lr
 8019e00:	24002d4c 	.word	0x24002d4c
 8019e04:	2400694c 	.word	0x2400694c
 8019e08:	24006954 	.word	0x24006954
 8019e0c:	2400695c 	.word	0x2400695c
 8019e10:	24006958 	.word	0x24006958
 8019e14:	24006968 	.word	0x24006968

08019e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019e18:	b480      	push	{r7}
 8019e1a:	b085      	sub	sp, #20
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019e20:	4b28      	ldr	r3, [pc, #160]	; (8019ec4 <prvInsertBlockIntoFreeList+0xac>)
 8019e22:	60fb      	str	r3, [r7, #12]
 8019e24:	e002      	b.n	8019e2c <prvInsertBlockIntoFreeList+0x14>
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	60fb      	str	r3, [r7, #12]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	687a      	ldr	r2, [r7, #4]
 8019e32:	429a      	cmp	r2, r3
 8019e34:	d8f7      	bhi.n	8019e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	685b      	ldr	r3, [r3, #4]
 8019e3e:	68ba      	ldr	r2, [r7, #8]
 8019e40:	4413      	add	r3, r2
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d108      	bne.n	8019e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	685a      	ldr	r2, [r3, #4]
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	441a      	add	r2, r3
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	68ba      	ldr	r2, [r7, #8]
 8019e64:	441a      	add	r2, r3
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	d118      	bne.n	8019ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	681a      	ldr	r2, [r3, #0]
 8019e72:	4b15      	ldr	r3, [pc, #84]	; (8019ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	429a      	cmp	r2, r3
 8019e78:	d00d      	beq.n	8019e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	685a      	ldr	r2, [r3, #4]
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	441a      	add	r2, r3
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	681a      	ldr	r2, [r3, #0]
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	601a      	str	r2, [r3, #0]
 8019e94:	e008      	b.n	8019ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019e96:	4b0c      	ldr	r3, [pc, #48]	; (8019ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8019e98:	681a      	ldr	r2, [r3, #0]
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	601a      	str	r2, [r3, #0]
 8019e9e:	e003      	b.n	8019ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681a      	ldr	r2, [r3, #0]
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019ea8:	68fa      	ldr	r2, [r7, #12]
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	429a      	cmp	r2, r3
 8019eae:	d002      	beq.n	8019eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019eb6:	bf00      	nop
 8019eb8:	3714      	adds	r7, #20
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec0:	4770      	bx	lr
 8019ec2:	bf00      	nop
 8019ec4:	2400694c 	.word	0x2400694c
 8019ec8:	24006954 	.word	0x24006954

08019ecc <__errno>:
 8019ecc:	4b01      	ldr	r3, [pc, #4]	; (8019ed4 <__errno+0x8>)
 8019ece:	6818      	ldr	r0, [r3, #0]
 8019ed0:	4770      	bx	lr
 8019ed2:	bf00      	nop
 8019ed4:	240000d0 	.word	0x240000d0

08019ed8 <__libc_init_array>:
 8019ed8:	b570      	push	{r4, r5, r6, lr}
 8019eda:	4d0d      	ldr	r5, [pc, #52]	; (8019f10 <__libc_init_array+0x38>)
 8019edc:	4c0d      	ldr	r4, [pc, #52]	; (8019f14 <__libc_init_array+0x3c>)
 8019ede:	1b64      	subs	r4, r4, r5
 8019ee0:	10a4      	asrs	r4, r4, #2
 8019ee2:	2600      	movs	r6, #0
 8019ee4:	42a6      	cmp	r6, r4
 8019ee6:	d109      	bne.n	8019efc <__libc_init_array+0x24>
 8019ee8:	4d0b      	ldr	r5, [pc, #44]	; (8019f18 <__libc_init_array+0x40>)
 8019eea:	4c0c      	ldr	r4, [pc, #48]	; (8019f1c <__libc_init_array+0x44>)
 8019eec:	f000 fd2c 	bl	801a948 <_init>
 8019ef0:	1b64      	subs	r4, r4, r5
 8019ef2:	10a4      	asrs	r4, r4, #2
 8019ef4:	2600      	movs	r6, #0
 8019ef6:	42a6      	cmp	r6, r4
 8019ef8:	d105      	bne.n	8019f06 <__libc_init_array+0x2e>
 8019efa:	bd70      	pop	{r4, r5, r6, pc}
 8019efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f00:	4798      	blx	r3
 8019f02:	3601      	adds	r6, #1
 8019f04:	e7ee      	b.n	8019ee4 <__libc_init_array+0xc>
 8019f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f0a:	4798      	blx	r3
 8019f0c:	3601      	adds	r6, #1
 8019f0e:	e7f2      	b.n	8019ef6 <__libc_init_array+0x1e>
 8019f10:	0801ae00 	.word	0x0801ae00
 8019f14:	0801ae00 	.word	0x0801ae00
 8019f18:	0801ae00 	.word	0x0801ae00
 8019f1c:	0801ae04 	.word	0x0801ae04

08019f20 <memcpy>:
 8019f20:	440a      	add	r2, r1
 8019f22:	4291      	cmp	r1, r2
 8019f24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019f28:	d100      	bne.n	8019f2c <memcpy+0xc>
 8019f2a:	4770      	bx	lr
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019f36:	4291      	cmp	r1, r2
 8019f38:	d1f9      	bne.n	8019f2e <memcpy+0xe>
 8019f3a:	bd10      	pop	{r4, pc}

08019f3c <memset>:
 8019f3c:	4402      	add	r2, r0
 8019f3e:	4603      	mov	r3, r0
 8019f40:	4293      	cmp	r3, r2
 8019f42:	d100      	bne.n	8019f46 <memset+0xa>
 8019f44:	4770      	bx	lr
 8019f46:	f803 1b01 	strb.w	r1, [r3], #1
 8019f4a:	e7f9      	b.n	8019f40 <memset+0x4>

08019f4c <_puts_r>:
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	460e      	mov	r6, r1
 8019f50:	4605      	mov	r5, r0
 8019f52:	b118      	cbz	r0, 8019f5c <_puts_r+0x10>
 8019f54:	6983      	ldr	r3, [r0, #24]
 8019f56:	b90b      	cbnz	r3, 8019f5c <_puts_r+0x10>
 8019f58:	f000 fa48 	bl	801a3ec <__sinit>
 8019f5c:	69ab      	ldr	r3, [r5, #24]
 8019f5e:	68ac      	ldr	r4, [r5, #8]
 8019f60:	b913      	cbnz	r3, 8019f68 <_puts_r+0x1c>
 8019f62:	4628      	mov	r0, r5
 8019f64:	f000 fa42 	bl	801a3ec <__sinit>
 8019f68:	4b2c      	ldr	r3, [pc, #176]	; (801a01c <_puts_r+0xd0>)
 8019f6a:	429c      	cmp	r4, r3
 8019f6c:	d120      	bne.n	8019fb0 <_puts_r+0x64>
 8019f6e:	686c      	ldr	r4, [r5, #4]
 8019f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f72:	07db      	lsls	r3, r3, #31
 8019f74:	d405      	bmi.n	8019f82 <_puts_r+0x36>
 8019f76:	89a3      	ldrh	r3, [r4, #12]
 8019f78:	0598      	lsls	r0, r3, #22
 8019f7a:	d402      	bmi.n	8019f82 <_puts_r+0x36>
 8019f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f7e:	f000 fad3 	bl	801a528 <__retarget_lock_acquire_recursive>
 8019f82:	89a3      	ldrh	r3, [r4, #12]
 8019f84:	0719      	lsls	r1, r3, #28
 8019f86:	d51d      	bpl.n	8019fc4 <_puts_r+0x78>
 8019f88:	6923      	ldr	r3, [r4, #16]
 8019f8a:	b1db      	cbz	r3, 8019fc4 <_puts_r+0x78>
 8019f8c:	3e01      	subs	r6, #1
 8019f8e:	68a3      	ldr	r3, [r4, #8]
 8019f90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019f94:	3b01      	subs	r3, #1
 8019f96:	60a3      	str	r3, [r4, #8]
 8019f98:	bb39      	cbnz	r1, 8019fea <_puts_r+0x9e>
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	da38      	bge.n	801a010 <_puts_r+0xc4>
 8019f9e:	4622      	mov	r2, r4
 8019fa0:	210a      	movs	r1, #10
 8019fa2:	4628      	mov	r0, r5
 8019fa4:	f000 f848 	bl	801a038 <__swbuf_r>
 8019fa8:	3001      	adds	r0, #1
 8019faa:	d011      	beq.n	8019fd0 <_puts_r+0x84>
 8019fac:	250a      	movs	r5, #10
 8019fae:	e011      	b.n	8019fd4 <_puts_r+0x88>
 8019fb0:	4b1b      	ldr	r3, [pc, #108]	; (801a020 <_puts_r+0xd4>)
 8019fb2:	429c      	cmp	r4, r3
 8019fb4:	d101      	bne.n	8019fba <_puts_r+0x6e>
 8019fb6:	68ac      	ldr	r4, [r5, #8]
 8019fb8:	e7da      	b.n	8019f70 <_puts_r+0x24>
 8019fba:	4b1a      	ldr	r3, [pc, #104]	; (801a024 <_puts_r+0xd8>)
 8019fbc:	429c      	cmp	r4, r3
 8019fbe:	bf08      	it	eq
 8019fc0:	68ec      	ldreq	r4, [r5, #12]
 8019fc2:	e7d5      	b.n	8019f70 <_puts_r+0x24>
 8019fc4:	4621      	mov	r1, r4
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f000 f888 	bl	801a0dc <__swsetup_r>
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	d0dd      	beq.n	8019f8c <_puts_r+0x40>
 8019fd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019fd6:	07da      	lsls	r2, r3, #31
 8019fd8:	d405      	bmi.n	8019fe6 <_puts_r+0x9a>
 8019fda:	89a3      	ldrh	r3, [r4, #12]
 8019fdc:	059b      	lsls	r3, r3, #22
 8019fde:	d402      	bmi.n	8019fe6 <_puts_r+0x9a>
 8019fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fe2:	f000 faa2 	bl	801a52a <__retarget_lock_release_recursive>
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	bd70      	pop	{r4, r5, r6, pc}
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	da04      	bge.n	8019ff8 <_puts_r+0xac>
 8019fee:	69a2      	ldr	r2, [r4, #24]
 8019ff0:	429a      	cmp	r2, r3
 8019ff2:	dc06      	bgt.n	801a002 <_puts_r+0xb6>
 8019ff4:	290a      	cmp	r1, #10
 8019ff6:	d004      	beq.n	801a002 <_puts_r+0xb6>
 8019ff8:	6823      	ldr	r3, [r4, #0]
 8019ffa:	1c5a      	adds	r2, r3, #1
 8019ffc:	6022      	str	r2, [r4, #0]
 8019ffe:	7019      	strb	r1, [r3, #0]
 801a000:	e7c5      	b.n	8019f8e <_puts_r+0x42>
 801a002:	4622      	mov	r2, r4
 801a004:	4628      	mov	r0, r5
 801a006:	f000 f817 	bl	801a038 <__swbuf_r>
 801a00a:	3001      	adds	r0, #1
 801a00c:	d1bf      	bne.n	8019f8e <_puts_r+0x42>
 801a00e:	e7df      	b.n	8019fd0 <_puts_r+0x84>
 801a010:	6823      	ldr	r3, [r4, #0]
 801a012:	250a      	movs	r5, #10
 801a014:	1c5a      	adds	r2, r3, #1
 801a016:	6022      	str	r2, [r4, #0]
 801a018:	701d      	strb	r5, [r3, #0]
 801a01a:	e7db      	b.n	8019fd4 <_puts_r+0x88>
 801a01c:	0801adb8 	.word	0x0801adb8
 801a020:	0801add8 	.word	0x0801add8
 801a024:	0801ad98 	.word	0x0801ad98

0801a028 <puts>:
 801a028:	4b02      	ldr	r3, [pc, #8]	; (801a034 <puts+0xc>)
 801a02a:	4601      	mov	r1, r0
 801a02c:	6818      	ldr	r0, [r3, #0]
 801a02e:	f7ff bf8d 	b.w	8019f4c <_puts_r>
 801a032:	bf00      	nop
 801a034:	240000d0 	.word	0x240000d0

0801a038 <__swbuf_r>:
 801a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a03a:	460e      	mov	r6, r1
 801a03c:	4614      	mov	r4, r2
 801a03e:	4605      	mov	r5, r0
 801a040:	b118      	cbz	r0, 801a04a <__swbuf_r+0x12>
 801a042:	6983      	ldr	r3, [r0, #24]
 801a044:	b90b      	cbnz	r3, 801a04a <__swbuf_r+0x12>
 801a046:	f000 f9d1 	bl	801a3ec <__sinit>
 801a04a:	4b21      	ldr	r3, [pc, #132]	; (801a0d0 <__swbuf_r+0x98>)
 801a04c:	429c      	cmp	r4, r3
 801a04e:	d12b      	bne.n	801a0a8 <__swbuf_r+0x70>
 801a050:	686c      	ldr	r4, [r5, #4]
 801a052:	69a3      	ldr	r3, [r4, #24]
 801a054:	60a3      	str	r3, [r4, #8]
 801a056:	89a3      	ldrh	r3, [r4, #12]
 801a058:	071a      	lsls	r2, r3, #28
 801a05a:	d52f      	bpl.n	801a0bc <__swbuf_r+0x84>
 801a05c:	6923      	ldr	r3, [r4, #16]
 801a05e:	b36b      	cbz	r3, 801a0bc <__swbuf_r+0x84>
 801a060:	6923      	ldr	r3, [r4, #16]
 801a062:	6820      	ldr	r0, [r4, #0]
 801a064:	1ac0      	subs	r0, r0, r3
 801a066:	6963      	ldr	r3, [r4, #20]
 801a068:	b2f6      	uxtb	r6, r6
 801a06a:	4283      	cmp	r3, r0
 801a06c:	4637      	mov	r7, r6
 801a06e:	dc04      	bgt.n	801a07a <__swbuf_r+0x42>
 801a070:	4621      	mov	r1, r4
 801a072:	4628      	mov	r0, r5
 801a074:	f000 f926 	bl	801a2c4 <_fflush_r>
 801a078:	bb30      	cbnz	r0, 801a0c8 <__swbuf_r+0x90>
 801a07a:	68a3      	ldr	r3, [r4, #8]
 801a07c:	3b01      	subs	r3, #1
 801a07e:	60a3      	str	r3, [r4, #8]
 801a080:	6823      	ldr	r3, [r4, #0]
 801a082:	1c5a      	adds	r2, r3, #1
 801a084:	6022      	str	r2, [r4, #0]
 801a086:	701e      	strb	r6, [r3, #0]
 801a088:	6963      	ldr	r3, [r4, #20]
 801a08a:	3001      	adds	r0, #1
 801a08c:	4283      	cmp	r3, r0
 801a08e:	d004      	beq.n	801a09a <__swbuf_r+0x62>
 801a090:	89a3      	ldrh	r3, [r4, #12]
 801a092:	07db      	lsls	r3, r3, #31
 801a094:	d506      	bpl.n	801a0a4 <__swbuf_r+0x6c>
 801a096:	2e0a      	cmp	r6, #10
 801a098:	d104      	bne.n	801a0a4 <__swbuf_r+0x6c>
 801a09a:	4621      	mov	r1, r4
 801a09c:	4628      	mov	r0, r5
 801a09e:	f000 f911 	bl	801a2c4 <_fflush_r>
 801a0a2:	b988      	cbnz	r0, 801a0c8 <__swbuf_r+0x90>
 801a0a4:	4638      	mov	r0, r7
 801a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0a8:	4b0a      	ldr	r3, [pc, #40]	; (801a0d4 <__swbuf_r+0x9c>)
 801a0aa:	429c      	cmp	r4, r3
 801a0ac:	d101      	bne.n	801a0b2 <__swbuf_r+0x7a>
 801a0ae:	68ac      	ldr	r4, [r5, #8]
 801a0b0:	e7cf      	b.n	801a052 <__swbuf_r+0x1a>
 801a0b2:	4b09      	ldr	r3, [pc, #36]	; (801a0d8 <__swbuf_r+0xa0>)
 801a0b4:	429c      	cmp	r4, r3
 801a0b6:	bf08      	it	eq
 801a0b8:	68ec      	ldreq	r4, [r5, #12]
 801a0ba:	e7ca      	b.n	801a052 <__swbuf_r+0x1a>
 801a0bc:	4621      	mov	r1, r4
 801a0be:	4628      	mov	r0, r5
 801a0c0:	f000 f80c 	bl	801a0dc <__swsetup_r>
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	d0cb      	beq.n	801a060 <__swbuf_r+0x28>
 801a0c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a0cc:	e7ea      	b.n	801a0a4 <__swbuf_r+0x6c>
 801a0ce:	bf00      	nop
 801a0d0:	0801adb8 	.word	0x0801adb8
 801a0d4:	0801add8 	.word	0x0801add8
 801a0d8:	0801ad98 	.word	0x0801ad98

0801a0dc <__swsetup_r>:
 801a0dc:	4b32      	ldr	r3, [pc, #200]	; (801a1a8 <__swsetup_r+0xcc>)
 801a0de:	b570      	push	{r4, r5, r6, lr}
 801a0e0:	681d      	ldr	r5, [r3, #0]
 801a0e2:	4606      	mov	r6, r0
 801a0e4:	460c      	mov	r4, r1
 801a0e6:	b125      	cbz	r5, 801a0f2 <__swsetup_r+0x16>
 801a0e8:	69ab      	ldr	r3, [r5, #24]
 801a0ea:	b913      	cbnz	r3, 801a0f2 <__swsetup_r+0x16>
 801a0ec:	4628      	mov	r0, r5
 801a0ee:	f000 f97d 	bl	801a3ec <__sinit>
 801a0f2:	4b2e      	ldr	r3, [pc, #184]	; (801a1ac <__swsetup_r+0xd0>)
 801a0f4:	429c      	cmp	r4, r3
 801a0f6:	d10f      	bne.n	801a118 <__swsetup_r+0x3c>
 801a0f8:	686c      	ldr	r4, [r5, #4]
 801a0fa:	89a3      	ldrh	r3, [r4, #12]
 801a0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a100:	0719      	lsls	r1, r3, #28
 801a102:	d42c      	bmi.n	801a15e <__swsetup_r+0x82>
 801a104:	06dd      	lsls	r5, r3, #27
 801a106:	d411      	bmi.n	801a12c <__swsetup_r+0x50>
 801a108:	2309      	movs	r3, #9
 801a10a:	6033      	str	r3, [r6, #0]
 801a10c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a110:	81a3      	strh	r3, [r4, #12]
 801a112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a116:	e03e      	b.n	801a196 <__swsetup_r+0xba>
 801a118:	4b25      	ldr	r3, [pc, #148]	; (801a1b0 <__swsetup_r+0xd4>)
 801a11a:	429c      	cmp	r4, r3
 801a11c:	d101      	bne.n	801a122 <__swsetup_r+0x46>
 801a11e:	68ac      	ldr	r4, [r5, #8]
 801a120:	e7eb      	b.n	801a0fa <__swsetup_r+0x1e>
 801a122:	4b24      	ldr	r3, [pc, #144]	; (801a1b4 <__swsetup_r+0xd8>)
 801a124:	429c      	cmp	r4, r3
 801a126:	bf08      	it	eq
 801a128:	68ec      	ldreq	r4, [r5, #12]
 801a12a:	e7e6      	b.n	801a0fa <__swsetup_r+0x1e>
 801a12c:	0758      	lsls	r0, r3, #29
 801a12e:	d512      	bpl.n	801a156 <__swsetup_r+0x7a>
 801a130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a132:	b141      	cbz	r1, 801a146 <__swsetup_r+0x6a>
 801a134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a138:	4299      	cmp	r1, r3
 801a13a:	d002      	beq.n	801a142 <__swsetup_r+0x66>
 801a13c:	4630      	mov	r0, r6
 801a13e:	f000 fa5b 	bl	801a5f8 <_free_r>
 801a142:	2300      	movs	r3, #0
 801a144:	6363      	str	r3, [r4, #52]	; 0x34
 801a146:	89a3      	ldrh	r3, [r4, #12]
 801a148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a14c:	81a3      	strh	r3, [r4, #12]
 801a14e:	2300      	movs	r3, #0
 801a150:	6063      	str	r3, [r4, #4]
 801a152:	6923      	ldr	r3, [r4, #16]
 801a154:	6023      	str	r3, [r4, #0]
 801a156:	89a3      	ldrh	r3, [r4, #12]
 801a158:	f043 0308 	orr.w	r3, r3, #8
 801a15c:	81a3      	strh	r3, [r4, #12]
 801a15e:	6923      	ldr	r3, [r4, #16]
 801a160:	b94b      	cbnz	r3, 801a176 <__swsetup_r+0x9a>
 801a162:	89a3      	ldrh	r3, [r4, #12]
 801a164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a16c:	d003      	beq.n	801a176 <__swsetup_r+0x9a>
 801a16e:	4621      	mov	r1, r4
 801a170:	4630      	mov	r0, r6
 801a172:	f000 fa01 	bl	801a578 <__smakebuf_r>
 801a176:	89a0      	ldrh	r0, [r4, #12]
 801a178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a17c:	f010 0301 	ands.w	r3, r0, #1
 801a180:	d00a      	beq.n	801a198 <__swsetup_r+0xbc>
 801a182:	2300      	movs	r3, #0
 801a184:	60a3      	str	r3, [r4, #8]
 801a186:	6963      	ldr	r3, [r4, #20]
 801a188:	425b      	negs	r3, r3
 801a18a:	61a3      	str	r3, [r4, #24]
 801a18c:	6923      	ldr	r3, [r4, #16]
 801a18e:	b943      	cbnz	r3, 801a1a2 <__swsetup_r+0xc6>
 801a190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a194:	d1ba      	bne.n	801a10c <__swsetup_r+0x30>
 801a196:	bd70      	pop	{r4, r5, r6, pc}
 801a198:	0781      	lsls	r1, r0, #30
 801a19a:	bf58      	it	pl
 801a19c:	6963      	ldrpl	r3, [r4, #20]
 801a19e:	60a3      	str	r3, [r4, #8]
 801a1a0:	e7f4      	b.n	801a18c <__swsetup_r+0xb0>
 801a1a2:	2000      	movs	r0, #0
 801a1a4:	e7f7      	b.n	801a196 <__swsetup_r+0xba>
 801a1a6:	bf00      	nop
 801a1a8:	240000d0 	.word	0x240000d0
 801a1ac:	0801adb8 	.word	0x0801adb8
 801a1b0:	0801add8 	.word	0x0801add8
 801a1b4:	0801ad98 	.word	0x0801ad98

0801a1b8 <__sflush_r>:
 801a1b8:	898a      	ldrh	r2, [r1, #12]
 801a1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1be:	4605      	mov	r5, r0
 801a1c0:	0710      	lsls	r0, r2, #28
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	d458      	bmi.n	801a278 <__sflush_r+0xc0>
 801a1c6:	684b      	ldr	r3, [r1, #4]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	dc05      	bgt.n	801a1d8 <__sflush_r+0x20>
 801a1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	dc02      	bgt.n	801a1d8 <__sflush_r+0x20>
 801a1d2:	2000      	movs	r0, #0
 801a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a1da:	2e00      	cmp	r6, #0
 801a1dc:	d0f9      	beq.n	801a1d2 <__sflush_r+0x1a>
 801a1de:	2300      	movs	r3, #0
 801a1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a1e4:	682f      	ldr	r7, [r5, #0]
 801a1e6:	602b      	str	r3, [r5, #0]
 801a1e8:	d032      	beq.n	801a250 <__sflush_r+0x98>
 801a1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	075a      	lsls	r2, r3, #29
 801a1f0:	d505      	bpl.n	801a1fe <__sflush_r+0x46>
 801a1f2:	6863      	ldr	r3, [r4, #4]
 801a1f4:	1ac0      	subs	r0, r0, r3
 801a1f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a1f8:	b10b      	cbz	r3, 801a1fe <__sflush_r+0x46>
 801a1fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a1fc:	1ac0      	subs	r0, r0, r3
 801a1fe:	2300      	movs	r3, #0
 801a200:	4602      	mov	r2, r0
 801a202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a204:	6a21      	ldr	r1, [r4, #32]
 801a206:	4628      	mov	r0, r5
 801a208:	47b0      	blx	r6
 801a20a:	1c43      	adds	r3, r0, #1
 801a20c:	89a3      	ldrh	r3, [r4, #12]
 801a20e:	d106      	bne.n	801a21e <__sflush_r+0x66>
 801a210:	6829      	ldr	r1, [r5, #0]
 801a212:	291d      	cmp	r1, #29
 801a214:	d82c      	bhi.n	801a270 <__sflush_r+0xb8>
 801a216:	4a2a      	ldr	r2, [pc, #168]	; (801a2c0 <__sflush_r+0x108>)
 801a218:	40ca      	lsrs	r2, r1
 801a21a:	07d6      	lsls	r6, r2, #31
 801a21c:	d528      	bpl.n	801a270 <__sflush_r+0xb8>
 801a21e:	2200      	movs	r2, #0
 801a220:	6062      	str	r2, [r4, #4]
 801a222:	04d9      	lsls	r1, r3, #19
 801a224:	6922      	ldr	r2, [r4, #16]
 801a226:	6022      	str	r2, [r4, #0]
 801a228:	d504      	bpl.n	801a234 <__sflush_r+0x7c>
 801a22a:	1c42      	adds	r2, r0, #1
 801a22c:	d101      	bne.n	801a232 <__sflush_r+0x7a>
 801a22e:	682b      	ldr	r3, [r5, #0]
 801a230:	b903      	cbnz	r3, 801a234 <__sflush_r+0x7c>
 801a232:	6560      	str	r0, [r4, #84]	; 0x54
 801a234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a236:	602f      	str	r7, [r5, #0]
 801a238:	2900      	cmp	r1, #0
 801a23a:	d0ca      	beq.n	801a1d2 <__sflush_r+0x1a>
 801a23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a240:	4299      	cmp	r1, r3
 801a242:	d002      	beq.n	801a24a <__sflush_r+0x92>
 801a244:	4628      	mov	r0, r5
 801a246:	f000 f9d7 	bl	801a5f8 <_free_r>
 801a24a:	2000      	movs	r0, #0
 801a24c:	6360      	str	r0, [r4, #52]	; 0x34
 801a24e:	e7c1      	b.n	801a1d4 <__sflush_r+0x1c>
 801a250:	6a21      	ldr	r1, [r4, #32]
 801a252:	2301      	movs	r3, #1
 801a254:	4628      	mov	r0, r5
 801a256:	47b0      	blx	r6
 801a258:	1c41      	adds	r1, r0, #1
 801a25a:	d1c7      	bne.n	801a1ec <__sflush_r+0x34>
 801a25c:	682b      	ldr	r3, [r5, #0]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d0c4      	beq.n	801a1ec <__sflush_r+0x34>
 801a262:	2b1d      	cmp	r3, #29
 801a264:	d001      	beq.n	801a26a <__sflush_r+0xb2>
 801a266:	2b16      	cmp	r3, #22
 801a268:	d101      	bne.n	801a26e <__sflush_r+0xb6>
 801a26a:	602f      	str	r7, [r5, #0]
 801a26c:	e7b1      	b.n	801a1d2 <__sflush_r+0x1a>
 801a26e:	89a3      	ldrh	r3, [r4, #12]
 801a270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a274:	81a3      	strh	r3, [r4, #12]
 801a276:	e7ad      	b.n	801a1d4 <__sflush_r+0x1c>
 801a278:	690f      	ldr	r7, [r1, #16]
 801a27a:	2f00      	cmp	r7, #0
 801a27c:	d0a9      	beq.n	801a1d2 <__sflush_r+0x1a>
 801a27e:	0793      	lsls	r3, r2, #30
 801a280:	680e      	ldr	r6, [r1, #0]
 801a282:	bf08      	it	eq
 801a284:	694b      	ldreq	r3, [r1, #20]
 801a286:	600f      	str	r7, [r1, #0]
 801a288:	bf18      	it	ne
 801a28a:	2300      	movne	r3, #0
 801a28c:	eba6 0807 	sub.w	r8, r6, r7
 801a290:	608b      	str	r3, [r1, #8]
 801a292:	f1b8 0f00 	cmp.w	r8, #0
 801a296:	dd9c      	ble.n	801a1d2 <__sflush_r+0x1a>
 801a298:	6a21      	ldr	r1, [r4, #32]
 801a29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a29c:	4643      	mov	r3, r8
 801a29e:	463a      	mov	r2, r7
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	47b0      	blx	r6
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	dc06      	bgt.n	801a2b6 <__sflush_r+0xfe>
 801a2a8:	89a3      	ldrh	r3, [r4, #12]
 801a2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2ae:	81a3      	strh	r3, [r4, #12]
 801a2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2b4:	e78e      	b.n	801a1d4 <__sflush_r+0x1c>
 801a2b6:	4407      	add	r7, r0
 801a2b8:	eba8 0800 	sub.w	r8, r8, r0
 801a2bc:	e7e9      	b.n	801a292 <__sflush_r+0xda>
 801a2be:	bf00      	nop
 801a2c0:	20400001 	.word	0x20400001

0801a2c4 <_fflush_r>:
 801a2c4:	b538      	push	{r3, r4, r5, lr}
 801a2c6:	690b      	ldr	r3, [r1, #16]
 801a2c8:	4605      	mov	r5, r0
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	b913      	cbnz	r3, 801a2d4 <_fflush_r+0x10>
 801a2ce:	2500      	movs	r5, #0
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	bd38      	pop	{r3, r4, r5, pc}
 801a2d4:	b118      	cbz	r0, 801a2de <_fflush_r+0x1a>
 801a2d6:	6983      	ldr	r3, [r0, #24]
 801a2d8:	b90b      	cbnz	r3, 801a2de <_fflush_r+0x1a>
 801a2da:	f000 f887 	bl	801a3ec <__sinit>
 801a2de:	4b14      	ldr	r3, [pc, #80]	; (801a330 <_fflush_r+0x6c>)
 801a2e0:	429c      	cmp	r4, r3
 801a2e2:	d11b      	bne.n	801a31c <_fflush_r+0x58>
 801a2e4:	686c      	ldr	r4, [r5, #4]
 801a2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d0ef      	beq.n	801a2ce <_fflush_r+0xa>
 801a2ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a2f0:	07d0      	lsls	r0, r2, #31
 801a2f2:	d404      	bmi.n	801a2fe <_fflush_r+0x3a>
 801a2f4:	0599      	lsls	r1, r3, #22
 801a2f6:	d402      	bmi.n	801a2fe <_fflush_r+0x3a>
 801a2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2fa:	f000 f915 	bl	801a528 <__retarget_lock_acquire_recursive>
 801a2fe:	4628      	mov	r0, r5
 801a300:	4621      	mov	r1, r4
 801a302:	f7ff ff59 	bl	801a1b8 <__sflush_r>
 801a306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a308:	07da      	lsls	r2, r3, #31
 801a30a:	4605      	mov	r5, r0
 801a30c:	d4e0      	bmi.n	801a2d0 <_fflush_r+0xc>
 801a30e:	89a3      	ldrh	r3, [r4, #12]
 801a310:	059b      	lsls	r3, r3, #22
 801a312:	d4dd      	bmi.n	801a2d0 <_fflush_r+0xc>
 801a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a316:	f000 f908 	bl	801a52a <__retarget_lock_release_recursive>
 801a31a:	e7d9      	b.n	801a2d0 <_fflush_r+0xc>
 801a31c:	4b05      	ldr	r3, [pc, #20]	; (801a334 <_fflush_r+0x70>)
 801a31e:	429c      	cmp	r4, r3
 801a320:	d101      	bne.n	801a326 <_fflush_r+0x62>
 801a322:	68ac      	ldr	r4, [r5, #8]
 801a324:	e7df      	b.n	801a2e6 <_fflush_r+0x22>
 801a326:	4b04      	ldr	r3, [pc, #16]	; (801a338 <_fflush_r+0x74>)
 801a328:	429c      	cmp	r4, r3
 801a32a:	bf08      	it	eq
 801a32c:	68ec      	ldreq	r4, [r5, #12]
 801a32e:	e7da      	b.n	801a2e6 <_fflush_r+0x22>
 801a330:	0801adb8 	.word	0x0801adb8
 801a334:	0801add8 	.word	0x0801add8
 801a338:	0801ad98 	.word	0x0801ad98

0801a33c <std>:
 801a33c:	2300      	movs	r3, #0
 801a33e:	b510      	push	{r4, lr}
 801a340:	4604      	mov	r4, r0
 801a342:	e9c0 3300 	strd	r3, r3, [r0]
 801a346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a34a:	6083      	str	r3, [r0, #8]
 801a34c:	8181      	strh	r1, [r0, #12]
 801a34e:	6643      	str	r3, [r0, #100]	; 0x64
 801a350:	81c2      	strh	r2, [r0, #14]
 801a352:	6183      	str	r3, [r0, #24]
 801a354:	4619      	mov	r1, r3
 801a356:	2208      	movs	r2, #8
 801a358:	305c      	adds	r0, #92	; 0x5c
 801a35a:	f7ff fdef 	bl	8019f3c <memset>
 801a35e:	4b05      	ldr	r3, [pc, #20]	; (801a374 <std+0x38>)
 801a360:	6263      	str	r3, [r4, #36]	; 0x24
 801a362:	4b05      	ldr	r3, [pc, #20]	; (801a378 <std+0x3c>)
 801a364:	62a3      	str	r3, [r4, #40]	; 0x28
 801a366:	4b05      	ldr	r3, [pc, #20]	; (801a37c <std+0x40>)
 801a368:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a36a:	4b05      	ldr	r3, [pc, #20]	; (801a380 <std+0x44>)
 801a36c:	6224      	str	r4, [r4, #32]
 801a36e:	6323      	str	r3, [r4, #48]	; 0x30
 801a370:	bd10      	pop	{r4, pc}
 801a372:	bf00      	nop
 801a374:	0801a7d9 	.word	0x0801a7d9
 801a378:	0801a7fb 	.word	0x0801a7fb
 801a37c:	0801a833 	.word	0x0801a833
 801a380:	0801a857 	.word	0x0801a857

0801a384 <_cleanup_r>:
 801a384:	4901      	ldr	r1, [pc, #4]	; (801a38c <_cleanup_r+0x8>)
 801a386:	f000 b8af 	b.w	801a4e8 <_fwalk_reent>
 801a38a:	bf00      	nop
 801a38c:	0801a2c5 	.word	0x0801a2c5

0801a390 <__sfmoreglue>:
 801a390:	b570      	push	{r4, r5, r6, lr}
 801a392:	2268      	movs	r2, #104	; 0x68
 801a394:	1e4d      	subs	r5, r1, #1
 801a396:	4355      	muls	r5, r2
 801a398:	460e      	mov	r6, r1
 801a39a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a39e:	f000 f997 	bl	801a6d0 <_malloc_r>
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	b140      	cbz	r0, 801a3b8 <__sfmoreglue+0x28>
 801a3a6:	2100      	movs	r1, #0
 801a3a8:	e9c0 1600 	strd	r1, r6, [r0]
 801a3ac:	300c      	adds	r0, #12
 801a3ae:	60a0      	str	r0, [r4, #8]
 801a3b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a3b4:	f7ff fdc2 	bl	8019f3c <memset>
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	bd70      	pop	{r4, r5, r6, pc}

0801a3bc <__sfp_lock_acquire>:
 801a3bc:	4801      	ldr	r0, [pc, #4]	; (801a3c4 <__sfp_lock_acquire+0x8>)
 801a3be:	f000 b8b3 	b.w	801a528 <__retarget_lock_acquire_recursive>
 801a3c2:	bf00      	nop
 801a3c4:	2400696d 	.word	0x2400696d

0801a3c8 <__sfp_lock_release>:
 801a3c8:	4801      	ldr	r0, [pc, #4]	; (801a3d0 <__sfp_lock_release+0x8>)
 801a3ca:	f000 b8ae 	b.w	801a52a <__retarget_lock_release_recursive>
 801a3ce:	bf00      	nop
 801a3d0:	2400696d 	.word	0x2400696d

0801a3d4 <__sinit_lock_acquire>:
 801a3d4:	4801      	ldr	r0, [pc, #4]	; (801a3dc <__sinit_lock_acquire+0x8>)
 801a3d6:	f000 b8a7 	b.w	801a528 <__retarget_lock_acquire_recursive>
 801a3da:	bf00      	nop
 801a3dc:	2400696e 	.word	0x2400696e

0801a3e0 <__sinit_lock_release>:
 801a3e0:	4801      	ldr	r0, [pc, #4]	; (801a3e8 <__sinit_lock_release+0x8>)
 801a3e2:	f000 b8a2 	b.w	801a52a <__retarget_lock_release_recursive>
 801a3e6:	bf00      	nop
 801a3e8:	2400696e 	.word	0x2400696e

0801a3ec <__sinit>:
 801a3ec:	b510      	push	{r4, lr}
 801a3ee:	4604      	mov	r4, r0
 801a3f0:	f7ff fff0 	bl	801a3d4 <__sinit_lock_acquire>
 801a3f4:	69a3      	ldr	r3, [r4, #24]
 801a3f6:	b11b      	cbz	r3, 801a400 <__sinit+0x14>
 801a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3fc:	f7ff bff0 	b.w	801a3e0 <__sinit_lock_release>
 801a400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a404:	6523      	str	r3, [r4, #80]	; 0x50
 801a406:	4b13      	ldr	r3, [pc, #76]	; (801a454 <__sinit+0x68>)
 801a408:	4a13      	ldr	r2, [pc, #76]	; (801a458 <__sinit+0x6c>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a40e:	42a3      	cmp	r3, r4
 801a410:	bf04      	itt	eq
 801a412:	2301      	moveq	r3, #1
 801a414:	61a3      	streq	r3, [r4, #24]
 801a416:	4620      	mov	r0, r4
 801a418:	f000 f820 	bl	801a45c <__sfp>
 801a41c:	6060      	str	r0, [r4, #4]
 801a41e:	4620      	mov	r0, r4
 801a420:	f000 f81c 	bl	801a45c <__sfp>
 801a424:	60a0      	str	r0, [r4, #8]
 801a426:	4620      	mov	r0, r4
 801a428:	f000 f818 	bl	801a45c <__sfp>
 801a42c:	2200      	movs	r2, #0
 801a42e:	60e0      	str	r0, [r4, #12]
 801a430:	2104      	movs	r1, #4
 801a432:	6860      	ldr	r0, [r4, #4]
 801a434:	f7ff ff82 	bl	801a33c <std>
 801a438:	68a0      	ldr	r0, [r4, #8]
 801a43a:	2201      	movs	r2, #1
 801a43c:	2109      	movs	r1, #9
 801a43e:	f7ff ff7d 	bl	801a33c <std>
 801a442:	68e0      	ldr	r0, [r4, #12]
 801a444:	2202      	movs	r2, #2
 801a446:	2112      	movs	r1, #18
 801a448:	f7ff ff78 	bl	801a33c <std>
 801a44c:	2301      	movs	r3, #1
 801a44e:	61a3      	str	r3, [r4, #24]
 801a450:	e7d2      	b.n	801a3f8 <__sinit+0xc>
 801a452:	bf00      	nop
 801a454:	0801ad94 	.word	0x0801ad94
 801a458:	0801a385 	.word	0x0801a385

0801a45c <__sfp>:
 801a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a45e:	4607      	mov	r7, r0
 801a460:	f7ff ffac 	bl	801a3bc <__sfp_lock_acquire>
 801a464:	4b1e      	ldr	r3, [pc, #120]	; (801a4e0 <__sfp+0x84>)
 801a466:	681e      	ldr	r6, [r3, #0]
 801a468:	69b3      	ldr	r3, [r6, #24]
 801a46a:	b913      	cbnz	r3, 801a472 <__sfp+0x16>
 801a46c:	4630      	mov	r0, r6
 801a46e:	f7ff ffbd 	bl	801a3ec <__sinit>
 801a472:	3648      	adds	r6, #72	; 0x48
 801a474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a478:	3b01      	subs	r3, #1
 801a47a:	d503      	bpl.n	801a484 <__sfp+0x28>
 801a47c:	6833      	ldr	r3, [r6, #0]
 801a47e:	b30b      	cbz	r3, 801a4c4 <__sfp+0x68>
 801a480:	6836      	ldr	r6, [r6, #0]
 801a482:	e7f7      	b.n	801a474 <__sfp+0x18>
 801a484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a488:	b9d5      	cbnz	r5, 801a4c0 <__sfp+0x64>
 801a48a:	4b16      	ldr	r3, [pc, #88]	; (801a4e4 <__sfp+0x88>)
 801a48c:	60e3      	str	r3, [r4, #12]
 801a48e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a492:	6665      	str	r5, [r4, #100]	; 0x64
 801a494:	f000 f847 	bl	801a526 <__retarget_lock_init_recursive>
 801a498:	f7ff ff96 	bl	801a3c8 <__sfp_lock_release>
 801a49c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a4a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a4a4:	6025      	str	r5, [r4, #0]
 801a4a6:	61a5      	str	r5, [r4, #24]
 801a4a8:	2208      	movs	r2, #8
 801a4aa:	4629      	mov	r1, r5
 801a4ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a4b0:	f7ff fd44 	bl	8019f3c <memset>
 801a4b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a4b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a4bc:	4620      	mov	r0, r4
 801a4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4c0:	3468      	adds	r4, #104	; 0x68
 801a4c2:	e7d9      	b.n	801a478 <__sfp+0x1c>
 801a4c4:	2104      	movs	r1, #4
 801a4c6:	4638      	mov	r0, r7
 801a4c8:	f7ff ff62 	bl	801a390 <__sfmoreglue>
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	6030      	str	r0, [r6, #0]
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d1d5      	bne.n	801a480 <__sfp+0x24>
 801a4d4:	f7ff ff78 	bl	801a3c8 <__sfp_lock_release>
 801a4d8:	230c      	movs	r3, #12
 801a4da:	603b      	str	r3, [r7, #0]
 801a4dc:	e7ee      	b.n	801a4bc <__sfp+0x60>
 801a4de:	bf00      	nop
 801a4e0:	0801ad94 	.word	0x0801ad94
 801a4e4:	ffff0001 	.word	0xffff0001

0801a4e8 <_fwalk_reent>:
 801a4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4ec:	4606      	mov	r6, r0
 801a4ee:	4688      	mov	r8, r1
 801a4f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a4f4:	2700      	movs	r7, #0
 801a4f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a4fa:	f1b9 0901 	subs.w	r9, r9, #1
 801a4fe:	d505      	bpl.n	801a50c <_fwalk_reent+0x24>
 801a500:	6824      	ldr	r4, [r4, #0]
 801a502:	2c00      	cmp	r4, #0
 801a504:	d1f7      	bne.n	801a4f6 <_fwalk_reent+0xe>
 801a506:	4638      	mov	r0, r7
 801a508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a50c:	89ab      	ldrh	r3, [r5, #12]
 801a50e:	2b01      	cmp	r3, #1
 801a510:	d907      	bls.n	801a522 <_fwalk_reent+0x3a>
 801a512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a516:	3301      	adds	r3, #1
 801a518:	d003      	beq.n	801a522 <_fwalk_reent+0x3a>
 801a51a:	4629      	mov	r1, r5
 801a51c:	4630      	mov	r0, r6
 801a51e:	47c0      	blx	r8
 801a520:	4307      	orrs	r7, r0
 801a522:	3568      	adds	r5, #104	; 0x68
 801a524:	e7e9      	b.n	801a4fa <_fwalk_reent+0x12>

0801a526 <__retarget_lock_init_recursive>:
 801a526:	4770      	bx	lr

0801a528 <__retarget_lock_acquire_recursive>:
 801a528:	4770      	bx	lr

0801a52a <__retarget_lock_release_recursive>:
 801a52a:	4770      	bx	lr

0801a52c <__swhatbuf_r>:
 801a52c:	b570      	push	{r4, r5, r6, lr}
 801a52e:	460e      	mov	r6, r1
 801a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a534:	2900      	cmp	r1, #0
 801a536:	b096      	sub	sp, #88	; 0x58
 801a538:	4614      	mov	r4, r2
 801a53a:	461d      	mov	r5, r3
 801a53c:	da08      	bge.n	801a550 <__swhatbuf_r+0x24>
 801a53e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a542:	2200      	movs	r2, #0
 801a544:	602a      	str	r2, [r5, #0]
 801a546:	061a      	lsls	r2, r3, #24
 801a548:	d410      	bmi.n	801a56c <__swhatbuf_r+0x40>
 801a54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a54e:	e00e      	b.n	801a56e <__swhatbuf_r+0x42>
 801a550:	466a      	mov	r2, sp
 801a552:	f000 f9a7 	bl	801a8a4 <_fstat_r>
 801a556:	2800      	cmp	r0, #0
 801a558:	dbf1      	blt.n	801a53e <__swhatbuf_r+0x12>
 801a55a:	9a01      	ldr	r2, [sp, #4]
 801a55c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a560:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a564:	425a      	negs	r2, r3
 801a566:	415a      	adcs	r2, r3
 801a568:	602a      	str	r2, [r5, #0]
 801a56a:	e7ee      	b.n	801a54a <__swhatbuf_r+0x1e>
 801a56c:	2340      	movs	r3, #64	; 0x40
 801a56e:	2000      	movs	r0, #0
 801a570:	6023      	str	r3, [r4, #0]
 801a572:	b016      	add	sp, #88	; 0x58
 801a574:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a578 <__smakebuf_r>:
 801a578:	898b      	ldrh	r3, [r1, #12]
 801a57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a57c:	079d      	lsls	r5, r3, #30
 801a57e:	4606      	mov	r6, r0
 801a580:	460c      	mov	r4, r1
 801a582:	d507      	bpl.n	801a594 <__smakebuf_r+0x1c>
 801a584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a588:	6023      	str	r3, [r4, #0]
 801a58a:	6123      	str	r3, [r4, #16]
 801a58c:	2301      	movs	r3, #1
 801a58e:	6163      	str	r3, [r4, #20]
 801a590:	b002      	add	sp, #8
 801a592:	bd70      	pop	{r4, r5, r6, pc}
 801a594:	ab01      	add	r3, sp, #4
 801a596:	466a      	mov	r2, sp
 801a598:	f7ff ffc8 	bl	801a52c <__swhatbuf_r>
 801a59c:	9900      	ldr	r1, [sp, #0]
 801a59e:	4605      	mov	r5, r0
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	f000 f895 	bl	801a6d0 <_malloc_r>
 801a5a6:	b948      	cbnz	r0, 801a5bc <__smakebuf_r+0x44>
 801a5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5ac:	059a      	lsls	r2, r3, #22
 801a5ae:	d4ef      	bmi.n	801a590 <__smakebuf_r+0x18>
 801a5b0:	f023 0303 	bic.w	r3, r3, #3
 801a5b4:	f043 0302 	orr.w	r3, r3, #2
 801a5b8:	81a3      	strh	r3, [r4, #12]
 801a5ba:	e7e3      	b.n	801a584 <__smakebuf_r+0xc>
 801a5bc:	4b0d      	ldr	r3, [pc, #52]	; (801a5f4 <__smakebuf_r+0x7c>)
 801a5be:	62b3      	str	r3, [r6, #40]	; 0x28
 801a5c0:	89a3      	ldrh	r3, [r4, #12]
 801a5c2:	6020      	str	r0, [r4, #0]
 801a5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a5c8:	81a3      	strh	r3, [r4, #12]
 801a5ca:	9b00      	ldr	r3, [sp, #0]
 801a5cc:	6163      	str	r3, [r4, #20]
 801a5ce:	9b01      	ldr	r3, [sp, #4]
 801a5d0:	6120      	str	r0, [r4, #16]
 801a5d2:	b15b      	cbz	r3, 801a5ec <__smakebuf_r+0x74>
 801a5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5d8:	4630      	mov	r0, r6
 801a5da:	f000 f975 	bl	801a8c8 <_isatty_r>
 801a5de:	b128      	cbz	r0, 801a5ec <__smakebuf_r+0x74>
 801a5e0:	89a3      	ldrh	r3, [r4, #12]
 801a5e2:	f023 0303 	bic.w	r3, r3, #3
 801a5e6:	f043 0301 	orr.w	r3, r3, #1
 801a5ea:	81a3      	strh	r3, [r4, #12]
 801a5ec:	89a0      	ldrh	r0, [r4, #12]
 801a5ee:	4305      	orrs	r5, r0
 801a5f0:	81a5      	strh	r5, [r4, #12]
 801a5f2:	e7cd      	b.n	801a590 <__smakebuf_r+0x18>
 801a5f4:	0801a385 	.word	0x0801a385

0801a5f8 <_free_r>:
 801a5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	d044      	beq.n	801a688 <_free_r+0x90>
 801a5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a602:	9001      	str	r0, [sp, #4]
 801a604:	2b00      	cmp	r3, #0
 801a606:	f1a1 0404 	sub.w	r4, r1, #4
 801a60a:	bfb8      	it	lt
 801a60c:	18e4      	addlt	r4, r4, r3
 801a60e:	f000 f97d 	bl	801a90c <__malloc_lock>
 801a612:	4a1e      	ldr	r2, [pc, #120]	; (801a68c <_free_r+0x94>)
 801a614:	9801      	ldr	r0, [sp, #4]
 801a616:	6813      	ldr	r3, [r2, #0]
 801a618:	b933      	cbnz	r3, 801a628 <_free_r+0x30>
 801a61a:	6063      	str	r3, [r4, #4]
 801a61c:	6014      	str	r4, [r2, #0]
 801a61e:	b003      	add	sp, #12
 801a620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a624:	f000 b978 	b.w	801a918 <__malloc_unlock>
 801a628:	42a3      	cmp	r3, r4
 801a62a:	d908      	bls.n	801a63e <_free_r+0x46>
 801a62c:	6825      	ldr	r5, [r4, #0]
 801a62e:	1961      	adds	r1, r4, r5
 801a630:	428b      	cmp	r3, r1
 801a632:	bf01      	itttt	eq
 801a634:	6819      	ldreq	r1, [r3, #0]
 801a636:	685b      	ldreq	r3, [r3, #4]
 801a638:	1949      	addeq	r1, r1, r5
 801a63a:	6021      	streq	r1, [r4, #0]
 801a63c:	e7ed      	b.n	801a61a <_free_r+0x22>
 801a63e:	461a      	mov	r2, r3
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	b10b      	cbz	r3, 801a648 <_free_r+0x50>
 801a644:	42a3      	cmp	r3, r4
 801a646:	d9fa      	bls.n	801a63e <_free_r+0x46>
 801a648:	6811      	ldr	r1, [r2, #0]
 801a64a:	1855      	adds	r5, r2, r1
 801a64c:	42a5      	cmp	r5, r4
 801a64e:	d10b      	bne.n	801a668 <_free_r+0x70>
 801a650:	6824      	ldr	r4, [r4, #0]
 801a652:	4421      	add	r1, r4
 801a654:	1854      	adds	r4, r2, r1
 801a656:	42a3      	cmp	r3, r4
 801a658:	6011      	str	r1, [r2, #0]
 801a65a:	d1e0      	bne.n	801a61e <_free_r+0x26>
 801a65c:	681c      	ldr	r4, [r3, #0]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	6053      	str	r3, [r2, #4]
 801a662:	4421      	add	r1, r4
 801a664:	6011      	str	r1, [r2, #0]
 801a666:	e7da      	b.n	801a61e <_free_r+0x26>
 801a668:	d902      	bls.n	801a670 <_free_r+0x78>
 801a66a:	230c      	movs	r3, #12
 801a66c:	6003      	str	r3, [r0, #0]
 801a66e:	e7d6      	b.n	801a61e <_free_r+0x26>
 801a670:	6825      	ldr	r5, [r4, #0]
 801a672:	1961      	adds	r1, r4, r5
 801a674:	428b      	cmp	r3, r1
 801a676:	bf04      	itt	eq
 801a678:	6819      	ldreq	r1, [r3, #0]
 801a67a:	685b      	ldreq	r3, [r3, #4]
 801a67c:	6063      	str	r3, [r4, #4]
 801a67e:	bf04      	itt	eq
 801a680:	1949      	addeq	r1, r1, r5
 801a682:	6021      	streq	r1, [r4, #0]
 801a684:	6054      	str	r4, [r2, #4]
 801a686:	e7ca      	b.n	801a61e <_free_r+0x26>
 801a688:	b003      	add	sp, #12
 801a68a:	bd30      	pop	{r4, r5, pc}
 801a68c:	24006970 	.word	0x24006970

0801a690 <sbrk_aligned>:
 801a690:	b570      	push	{r4, r5, r6, lr}
 801a692:	4e0e      	ldr	r6, [pc, #56]	; (801a6cc <sbrk_aligned+0x3c>)
 801a694:	460c      	mov	r4, r1
 801a696:	6831      	ldr	r1, [r6, #0]
 801a698:	4605      	mov	r5, r0
 801a69a:	b911      	cbnz	r1, 801a6a2 <sbrk_aligned+0x12>
 801a69c:	f000 f88c 	bl	801a7b8 <_sbrk_r>
 801a6a0:	6030      	str	r0, [r6, #0]
 801a6a2:	4621      	mov	r1, r4
 801a6a4:	4628      	mov	r0, r5
 801a6a6:	f000 f887 	bl	801a7b8 <_sbrk_r>
 801a6aa:	1c43      	adds	r3, r0, #1
 801a6ac:	d00a      	beq.n	801a6c4 <sbrk_aligned+0x34>
 801a6ae:	1cc4      	adds	r4, r0, #3
 801a6b0:	f024 0403 	bic.w	r4, r4, #3
 801a6b4:	42a0      	cmp	r0, r4
 801a6b6:	d007      	beq.n	801a6c8 <sbrk_aligned+0x38>
 801a6b8:	1a21      	subs	r1, r4, r0
 801a6ba:	4628      	mov	r0, r5
 801a6bc:	f000 f87c 	bl	801a7b8 <_sbrk_r>
 801a6c0:	3001      	adds	r0, #1
 801a6c2:	d101      	bne.n	801a6c8 <sbrk_aligned+0x38>
 801a6c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	bd70      	pop	{r4, r5, r6, pc}
 801a6cc:	24006974 	.word	0x24006974

0801a6d0 <_malloc_r>:
 801a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6d4:	1ccd      	adds	r5, r1, #3
 801a6d6:	f025 0503 	bic.w	r5, r5, #3
 801a6da:	3508      	adds	r5, #8
 801a6dc:	2d0c      	cmp	r5, #12
 801a6de:	bf38      	it	cc
 801a6e0:	250c      	movcc	r5, #12
 801a6e2:	2d00      	cmp	r5, #0
 801a6e4:	4607      	mov	r7, r0
 801a6e6:	db01      	blt.n	801a6ec <_malloc_r+0x1c>
 801a6e8:	42a9      	cmp	r1, r5
 801a6ea:	d905      	bls.n	801a6f8 <_malloc_r+0x28>
 801a6ec:	230c      	movs	r3, #12
 801a6ee:	603b      	str	r3, [r7, #0]
 801a6f0:	2600      	movs	r6, #0
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6f8:	4e2e      	ldr	r6, [pc, #184]	; (801a7b4 <_malloc_r+0xe4>)
 801a6fa:	f000 f907 	bl	801a90c <__malloc_lock>
 801a6fe:	6833      	ldr	r3, [r6, #0]
 801a700:	461c      	mov	r4, r3
 801a702:	bb34      	cbnz	r4, 801a752 <_malloc_r+0x82>
 801a704:	4629      	mov	r1, r5
 801a706:	4638      	mov	r0, r7
 801a708:	f7ff ffc2 	bl	801a690 <sbrk_aligned>
 801a70c:	1c43      	adds	r3, r0, #1
 801a70e:	4604      	mov	r4, r0
 801a710:	d14d      	bne.n	801a7ae <_malloc_r+0xde>
 801a712:	6834      	ldr	r4, [r6, #0]
 801a714:	4626      	mov	r6, r4
 801a716:	2e00      	cmp	r6, #0
 801a718:	d140      	bne.n	801a79c <_malloc_r+0xcc>
 801a71a:	6823      	ldr	r3, [r4, #0]
 801a71c:	4631      	mov	r1, r6
 801a71e:	4638      	mov	r0, r7
 801a720:	eb04 0803 	add.w	r8, r4, r3
 801a724:	f000 f848 	bl	801a7b8 <_sbrk_r>
 801a728:	4580      	cmp	r8, r0
 801a72a:	d13a      	bne.n	801a7a2 <_malloc_r+0xd2>
 801a72c:	6821      	ldr	r1, [r4, #0]
 801a72e:	3503      	adds	r5, #3
 801a730:	1a6d      	subs	r5, r5, r1
 801a732:	f025 0503 	bic.w	r5, r5, #3
 801a736:	3508      	adds	r5, #8
 801a738:	2d0c      	cmp	r5, #12
 801a73a:	bf38      	it	cc
 801a73c:	250c      	movcc	r5, #12
 801a73e:	4629      	mov	r1, r5
 801a740:	4638      	mov	r0, r7
 801a742:	f7ff ffa5 	bl	801a690 <sbrk_aligned>
 801a746:	3001      	adds	r0, #1
 801a748:	d02b      	beq.n	801a7a2 <_malloc_r+0xd2>
 801a74a:	6823      	ldr	r3, [r4, #0]
 801a74c:	442b      	add	r3, r5
 801a74e:	6023      	str	r3, [r4, #0]
 801a750:	e00e      	b.n	801a770 <_malloc_r+0xa0>
 801a752:	6822      	ldr	r2, [r4, #0]
 801a754:	1b52      	subs	r2, r2, r5
 801a756:	d41e      	bmi.n	801a796 <_malloc_r+0xc6>
 801a758:	2a0b      	cmp	r2, #11
 801a75a:	d916      	bls.n	801a78a <_malloc_r+0xba>
 801a75c:	1961      	adds	r1, r4, r5
 801a75e:	42a3      	cmp	r3, r4
 801a760:	6025      	str	r5, [r4, #0]
 801a762:	bf18      	it	ne
 801a764:	6059      	strne	r1, [r3, #4]
 801a766:	6863      	ldr	r3, [r4, #4]
 801a768:	bf08      	it	eq
 801a76a:	6031      	streq	r1, [r6, #0]
 801a76c:	5162      	str	r2, [r4, r5]
 801a76e:	604b      	str	r3, [r1, #4]
 801a770:	4638      	mov	r0, r7
 801a772:	f104 060b 	add.w	r6, r4, #11
 801a776:	f000 f8cf 	bl	801a918 <__malloc_unlock>
 801a77a:	f026 0607 	bic.w	r6, r6, #7
 801a77e:	1d23      	adds	r3, r4, #4
 801a780:	1af2      	subs	r2, r6, r3
 801a782:	d0b6      	beq.n	801a6f2 <_malloc_r+0x22>
 801a784:	1b9b      	subs	r3, r3, r6
 801a786:	50a3      	str	r3, [r4, r2]
 801a788:	e7b3      	b.n	801a6f2 <_malloc_r+0x22>
 801a78a:	6862      	ldr	r2, [r4, #4]
 801a78c:	42a3      	cmp	r3, r4
 801a78e:	bf0c      	ite	eq
 801a790:	6032      	streq	r2, [r6, #0]
 801a792:	605a      	strne	r2, [r3, #4]
 801a794:	e7ec      	b.n	801a770 <_malloc_r+0xa0>
 801a796:	4623      	mov	r3, r4
 801a798:	6864      	ldr	r4, [r4, #4]
 801a79a:	e7b2      	b.n	801a702 <_malloc_r+0x32>
 801a79c:	4634      	mov	r4, r6
 801a79e:	6876      	ldr	r6, [r6, #4]
 801a7a0:	e7b9      	b.n	801a716 <_malloc_r+0x46>
 801a7a2:	230c      	movs	r3, #12
 801a7a4:	603b      	str	r3, [r7, #0]
 801a7a6:	4638      	mov	r0, r7
 801a7a8:	f000 f8b6 	bl	801a918 <__malloc_unlock>
 801a7ac:	e7a1      	b.n	801a6f2 <_malloc_r+0x22>
 801a7ae:	6025      	str	r5, [r4, #0]
 801a7b0:	e7de      	b.n	801a770 <_malloc_r+0xa0>
 801a7b2:	bf00      	nop
 801a7b4:	24006970 	.word	0x24006970

0801a7b8 <_sbrk_r>:
 801a7b8:	b538      	push	{r3, r4, r5, lr}
 801a7ba:	4d06      	ldr	r5, [pc, #24]	; (801a7d4 <_sbrk_r+0x1c>)
 801a7bc:	2300      	movs	r3, #0
 801a7be:	4604      	mov	r4, r0
 801a7c0:	4608      	mov	r0, r1
 801a7c2:	602b      	str	r3, [r5, #0]
 801a7c4:	f7ea f872 	bl	80048ac <_sbrk>
 801a7c8:	1c43      	adds	r3, r0, #1
 801a7ca:	d102      	bne.n	801a7d2 <_sbrk_r+0x1a>
 801a7cc:	682b      	ldr	r3, [r5, #0]
 801a7ce:	b103      	cbz	r3, 801a7d2 <_sbrk_r+0x1a>
 801a7d0:	6023      	str	r3, [r4, #0]
 801a7d2:	bd38      	pop	{r3, r4, r5, pc}
 801a7d4:	24006978 	.word	0x24006978

0801a7d8 <__sread>:
 801a7d8:	b510      	push	{r4, lr}
 801a7da:	460c      	mov	r4, r1
 801a7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7e0:	f000 f8a0 	bl	801a924 <_read_r>
 801a7e4:	2800      	cmp	r0, #0
 801a7e6:	bfab      	itete	ge
 801a7e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a7ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a7ec:	181b      	addge	r3, r3, r0
 801a7ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a7f2:	bfac      	ite	ge
 801a7f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a7f6:	81a3      	strhlt	r3, [r4, #12]
 801a7f8:	bd10      	pop	{r4, pc}

0801a7fa <__swrite>:
 801a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7fe:	461f      	mov	r7, r3
 801a800:	898b      	ldrh	r3, [r1, #12]
 801a802:	05db      	lsls	r3, r3, #23
 801a804:	4605      	mov	r5, r0
 801a806:	460c      	mov	r4, r1
 801a808:	4616      	mov	r6, r2
 801a80a:	d505      	bpl.n	801a818 <__swrite+0x1e>
 801a80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a810:	2302      	movs	r3, #2
 801a812:	2200      	movs	r2, #0
 801a814:	f000 f868 	bl	801a8e8 <_lseek_r>
 801a818:	89a3      	ldrh	r3, [r4, #12]
 801a81a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a81e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a822:	81a3      	strh	r3, [r4, #12]
 801a824:	4632      	mov	r2, r6
 801a826:	463b      	mov	r3, r7
 801a828:	4628      	mov	r0, r5
 801a82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a82e:	f000 b817 	b.w	801a860 <_write_r>

0801a832 <__sseek>:
 801a832:	b510      	push	{r4, lr}
 801a834:	460c      	mov	r4, r1
 801a836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a83a:	f000 f855 	bl	801a8e8 <_lseek_r>
 801a83e:	1c43      	adds	r3, r0, #1
 801a840:	89a3      	ldrh	r3, [r4, #12]
 801a842:	bf15      	itete	ne
 801a844:	6560      	strne	r0, [r4, #84]	; 0x54
 801a846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a84a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a84e:	81a3      	strheq	r3, [r4, #12]
 801a850:	bf18      	it	ne
 801a852:	81a3      	strhne	r3, [r4, #12]
 801a854:	bd10      	pop	{r4, pc}

0801a856 <__sclose>:
 801a856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a85a:	f000 b813 	b.w	801a884 <_close_r>
	...

0801a860 <_write_r>:
 801a860:	b538      	push	{r3, r4, r5, lr}
 801a862:	4d07      	ldr	r5, [pc, #28]	; (801a880 <_write_r+0x20>)
 801a864:	4604      	mov	r4, r0
 801a866:	4608      	mov	r0, r1
 801a868:	4611      	mov	r1, r2
 801a86a:	2200      	movs	r2, #0
 801a86c:	602a      	str	r2, [r5, #0]
 801a86e:	461a      	mov	r2, r3
 801a870:	f7e9 ffcb 	bl	800480a <_write>
 801a874:	1c43      	adds	r3, r0, #1
 801a876:	d102      	bne.n	801a87e <_write_r+0x1e>
 801a878:	682b      	ldr	r3, [r5, #0]
 801a87a:	b103      	cbz	r3, 801a87e <_write_r+0x1e>
 801a87c:	6023      	str	r3, [r4, #0]
 801a87e:	bd38      	pop	{r3, r4, r5, pc}
 801a880:	24006978 	.word	0x24006978

0801a884 <_close_r>:
 801a884:	b538      	push	{r3, r4, r5, lr}
 801a886:	4d06      	ldr	r5, [pc, #24]	; (801a8a0 <_close_r+0x1c>)
 801a888:	2300      	movs	r3, #0
 801a88a:	4604      	mov	r4, r0
 801a88c:	4608      	mov	r0, r1
 801a88e:	602b      	str	r3, [r5, #0]
 801a890:	f7e9 ffd7 	bl	8004842 <_close>
 801a894:	1c43      	adds	r3, r0, #1
 801a896:	d102      	bne.n	801a89e <_close_r+0x1a>
 801a898:	682b      	ldr	r3, [r5, #0]
 801a89a:	b103      	cbz	r3, 801a89e <_close_r+0x1a>
 801a89c:	6023      	str	r3, [r4, #0]
 801a89e:	bd38      	pop	{r3, r4, r5, pc}
 801a8a0:	24006978 	.word	0x24006978

0801a8a4 <_fstat_r>:
 801a8a4:	b538      	push	{r3, r4, r5, lr}
 801a8a6:	4d07      	ldr	r5, [pc, #28]	; (801a8c4 <_fstat_r+0x20>)
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	4604      	mov	r4, r0
 801a8ac:	4608      	mov	r0, r1
 801a8ae:	4611      	mov	r1, r2
 801a8b0:	602b      	str	r3, [r5, #0]
 801a8b2:	f7e9 ffd2 	bl	800485a <_fstat>
 801a8b6:	1c43      	adds	r3, r0, #1
 801a8b8:	d102      	bne.n	801a8c0 <_fstat_r+0x1c>
 801a8ba:	682b      	ldr	r3, [r5, #0]
 801a8bc:	b103      	cbz	r3, 801a8c0 <_fstat_r+0x1c>
 801a8be:	6023      	str	r3, [r4, #0]
 801a8c0:	bd38      	pop	{r3, r4, r5, pc}
 801a8c2:	bf00      	nop
 801a8c4:	24006978 	.word	0x24006978

0801a8c8 <_isatty_r>:
 801a8c8:	b538      	push	{r3, r4, r5, lr}
 801a8ca:	4d06      	ldr	r5, [pc, #24]	; (801a8e4 <_isatty_r+0x1c>)
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	4608      	mov	r0, r1
 801a8d2:	602b      	str	r3, [r5, #0]
 801a8d4:	f7e9 ffd1 	bl	800487a <_isatty>
 801a8d8:	1c43      	adds	r3, r0, #1
 801a8da:	d102      	bne.n	801a8e2 <_isatty_r+0x1a>
 801a8dc:	682b      	ldr	r3, [r5, #0]
 801a8de:	b103      	cbz	r3, 801a8e2 <_isatty_r+0x1a>
 801a8e0:	6023      	str	r3, [r4, #0]
 801a8e2:	bd38      	pop	{r3, r4, r5, pc}
 801a8e4:	24006978 	.word	0x24006978

0801a8e8 <_lseek_r>:
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	4d07      	ldr	r5, [pc, #28]	; (801a908 <_lseek_r+0x20>)
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	4608      	mov	r0, r1
 801a8f0:	4611      	mov	r1, r2
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	602a      	str	r2, [r5, #0]
 801a8f6:	461a      	mov	r2, r3
 801a8f8:	f7e9 ffca 	bl	8004890 <_lseek>
 801a8fc:	1c43      	adds	r3, r0, #1
 801a8fe:	d102      	bne.n	801a906 <_lseek_r+0x1e>
 801a900:	682b      	ldr	r3, [r5, #0]
 801a902:	b103      	cbz	r3, 801a906 <_lseek_r+0x1e>
 801a904:	6023      	str	r3, [r4, #0]
 801a906:	bd38      	pop	{r3, r4, r5, pc}
 801a908:	24006978 	.word	0x24006978

0801a90c <__malloc_lock>:
 801a90c:	4801      	ldr	r0, [pc, #4]	; (801a914 <__malloc_lock+0x8>)
 801a90e:	f7ff be0b 	b.w	801a528 <__retarget_lock_acquire_recursive>
 801a912:	bf00      	nop
 801a914:	2400696c 	.word	0x2400696c

0801a918 <__malloc_unlock>:
 801a918:	4801      	ldr	r0, [pc, #4]	; (801a920 <__malloc_unlock+0x8>)
 801a91a:	f7ff be06 	b.w	801a52a <__retarget_lock_release_recursive>
 801a91e:	bf00      	nop
 801a920:	2400696c 	.word	0x2400696c

0801a924 <_read_r>:
 801a924:	b538      	push	{r3, r4, r5, lr}
 801a926:	4d07      	ldr	r5, [pc, #28]	; (801a944 <_read_r+0x20>)
 801a928:	4604      	mov	r4, r0
 801a92a:	4608      	mov	r0, r1
 801a92c:	4611      	mov	r1, r2
 801a92e:	2200      	movs	r2, #0
 801a930:	602a      	str	r2, [r5, #0]
 801a932:	461a      	mov	r2, r3
 801a934:	f7e9 ff4c 	bl	80047d0 <_read>
 801a938:	1c43      	adds	r3, r0, #1
 801a93a:	d102      	bne.n	801a942 <_read_r+0x1e>
 801a93c:	682b      	ldr	r3, [r5, #0]
 801a93e:	b103      	cbz	r3, 801a942 <_read_r+0x1e>
 801a940:	6023      	str	r3, [r4, #0]
 801a942:	bd38      	pop	{r3, r4, r5, pc}
 801a944:	24006978 	.word	0x24006978

0801a948 <_init>:
 801a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a94a:	bf00      	nop
 801a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a94e:	bc08      	pop	{r3}
 801a950:	469e      	mov	lr, r3
 801a952:	4770      	bx	lr

0801a954 <_fini>:
 801a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a956:	bf00      	nop
 801a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a95a:	bc08      	pop	{r3}
 801a95c:	469e      	mov	lr, r3
 801a95e:	4770      	bx	lr
